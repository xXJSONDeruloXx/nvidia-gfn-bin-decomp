ast.pyc (Python 3.10)
[Code]
    File Name: ast.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 16
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        'sys'
        '_ast'
        'contextlib'
        'contextmanager'
        'nullcontext'
        'enum'
        'IntEnum'
        'auto'
        'parse'
        'literal_eval'
        'dump'
        'copy_location'
        'fix_missing_locations'
        'increment_lineno'
        'iter_fields'
        'iter_child_nodes'
        'get_docstring'
        '_splitlines_no_ff'
        '_pad_whitespace'
        'get_source_segment'
        'walk'
        'object'
        'NodeVisitor'
        'NodeTransformer'
        'hasattr'
        'Constant'
        '_getter'
        '_setter'
        'property'
        'n'
        's'
        'type'
        '_ABC'
        '_new'
        'Num'
        'Str'
        'Bytes'
        'NameConstant'
        'Ellipsis'
        'int'
        'float'
        'complex'
        'str'
        'bytes'
        'bool'
        '_const_types'
        '_const_types_not'
        '_const_node_type_names'
        'AST'
        'slice'
        'Index'
        'ExtSlice'
        'Tuple'
        '_dims_getter'
        '_dims_setter'
        'dims'
        'mod'
        'Suite'
        'expr_context'
        'AugLoad'
        'AugStore'
        'Param'
        'repr'
        'float_info'
        'max_10_exp'
        '_INFSTR'
        '_Precedence'
        '_SINGLE_QUOTES'
        '_MULTI_QUOTES'
        '_ALL_QUOTES'
        '_Unparser'
        'unparse'
        'main'
        '__name__'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        '\n    ast\n    ~~~\n\n    The `ast` module helps Python applications to process trees of the Python\n    abstract syntax grammar.  The abstract syntax itself might change with\n    each Python release; this module helps to find out programmatically what\n    the current grammar looks like and allows modifications of it.\n\n    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as\n    a flag to the `compile()` builtin function or by using the `parse()`\n    function from this module.  The result will be a tree of objects whose\n    classes all inherit from `ast.AST`.\n\n    A modified abstract syntax tree can be compiled into a Python code object\n    using the built-in `compile()` function.\n\n    Additionally various helper functions are provided that make working with\n    the trees simpler.  The main intention of the helper functions and this\n    module in general is to provide an easy to use interface for libraries\n    that work tightly with the python syntax (template engines for example).\n\n\n    :copyright: Copyright 2008 by Armin Ronacher.\n    :license: Python License.\n'
        0
        None
        (
            '*'
        )
        (
            'contextmanager'
            'nullcontext'
        )
        (
            'IntEnum'
            'auto'
        )
        '<unknown>'
        'exec'
        False
        (
            'type_comments'
            'feature_version'
        )
        [Code]
            File Name: ast.py
            Object Name: parse
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 2
            Locals: 8
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'PyCF_ONLY_AST'
                'PyCF_TYPE_COMMENTS'
                'isinstance'
                'tuple'
                'compile'
            [Var Names]
                'source'
                'filename'
                'mode'
                'type_comments'
                'feature_version'
                'flags'
                'major'
                'minor'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Parse the source into an AST node.\n    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).\n    Pass type_comments=True to get back type comments where the syntax allows.\n    '
                3
                None
                -1
                (
                    '_feature_version'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: PyCF_ONLY_AST
                2       STORE_FAST                      5: flags
                4       LOAD_FAST                       3: type_comments
                6       POP_JUMP_IF_FALSE               8 (to 16)
                8       LOAD_FAST                       5: flags
                10      LOAD_GLOBAL                     1: PyCF_TYPE_COMMENTS
                12      INPLACE_OR                      
                14      STORE_FAST                      5: flags
                16      LOAD_GLOBAL                     2: isinstance
                18      LOAD_FAST                       4: feature_version
                20      LOAD_GLOBAL                     3: tuple
                22      CALL_FUNCTION                   2
                24      POP_JUMP_IF_FALSE               26 (to 52)
                26      LOAD_FAST                       4: feature_version
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      6: major
                32      STORE_FAST                      7: minor
                34      LOAD_FAST                       6: major
                36      LOAD_CONST                      1: 3
                38      COMPARE_OP                      2 (==)
                40      POP_JUMP_IF_TRUE                23 (to 46)
                42      LOAD_ASSERTION_ERROR            
                44      RAISE_VARARGS                   1
                46      LOAD_FAST                       7: minor
                48      STORE_FAST                      4: feature_version
                50      JUMP_FORWARD                    6 (to 64)
                52      LOAD_FAST                       4: feature_version
                54      LOAD_CONST                      2: None
                56      IS_OP                           0 (is)
                58      POP_JUMP_IF_FALSE               32 (to 64)
                60      LOAD_CONST                      3: -1
                62      STORE_FAST                      4: feature_version
                64      LOAD_GLOBAL                     4: compile
                66      LOAD_FAST                       0: source
                68      LOAD_FAST                       1: filename
                70      LOAD_FAST                       2: mode
                72      LOAD_FAST                       5: flags
                74      LOAD_FAST                       4: feature_version
                76      LOAD_CONST                      4: ('_feature_version',)
                78      CALL_FUNCTION_KW                5
                80      RETURN_VALUE                    
        'parse'
        [Code]
            File Name: ast.py
            Object Name: literal_eval
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 4
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'isinstance'
                'str'
                'parse'
                'lstrip'
                'Expression'
                'body'
            [Var Names]
                'node_or_string'
            [Free Vars]
            [Cell Vars]
                '_convert'
                '_convert_num'
                '_convert_signed_num'
                '_raise_malformed_node'
            [Constants]
                '\n    Evaluate an expression node or a string containing only a Python\n    expression.  The string or node provided may only consist of the following\n    Python literal structures: strings, bytes, numbers, tuples, lists, dicts,\n    sets, booleans, and None.\n\n    Caution: A complex expression can overflow the C stack and cause a crash.\n    '
                ' \t'
                'eval'
                (
                    'mode'
                )
                [Code]
                    File Name: ast.py
                    Object Name: _raise_malformed_node
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        'getattr'
                        'ValueError'
                    [Var Names]
                        'node'
                        'msg'
                        'lno'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'malformed node or string'
                        'lineno'
                        ' on line '
                        ': '
                    [Disassembly]
                        0       LOAD_CONST                      1: 'malformed node or string'
                        2       STORE_FAST                      1: msg
                        4       LOAD_GLOBAL                     0: getattr
                        6       LOAD_FAST                       0: node
                        8       LOAD_CONST                      2: 'lineno'
                        10      LOAD_CONST                      0: None
                        12      CALL_FUNCTION                   3
                        14      DUP_TOP                         
                        16      STORE_FAST                      2: lno
                        18      POP_JUMP_IF_FALSE               17 (to 34)
                        20      LOAD_FAST                       1: msg
                        22      LOAD_CONST                      3: ' on line '
                        24      LOAD_FAST                       2: lno
                        26      FORMAT_VALUE                    0 (FVC_NONE)
                        28      BUILD_STRING                    2
                        30      INPLACE_ADD                     
                        32      STORE_FAST                      1: msg
                        34      LOAD_GLOBAL                     1: ValueError
                        36      LOAD_FAST                       1: msg
                        38      LOAD_CONST                      4: ': '
                        40      LOAD_FAST                       0: node
                        42      FORMAT_VALUE                    2 (FVC_REPR)
                        44      BUILD_STRING                    2
                        46      BINARY_ADD                      
                        48      CALL_FUNCTION                   1
                        50      RAISE_VARARGS                   1
                'literal_eval.<locals>._raise_malformed_node'
                [Code]
                    File Name: ast.py
                    Object Name: _convert_num
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'isinstance'
                        'Constant'
                        'type'
                        'value'
                        'int'
                        'float'
                        'complex'
                    [Var Names]
                        'node'
                    [Free Vars]
                        '_raise_malformed_node'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       0: node
                        4       LOAD_GLOBAL                     1: Constant
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               15 (to 30)
                        10      LOAD_GLOBAL                     2: type
                        12      LOAD_FAST                       0: node
                        14      LOAD_ATTR                       3: value
                        16      CALL_FUNCTION                   1
                        18      LOAD_GLOBAL                     4: int
                        20      LOAD_GLOBAL                     5: float
                        22      LOAD_GLOBAL                     6: complex
                        24      BUILD_TUPLE                     3
                        26      CONTAINS_OP                     1 (not in)
                        28      POP_JUMP_IF_FALSE               19 (to 38)
                        30      LOAD_DEREF                      0: _raise_malformed_node
                        32      LOAD_FAST                       0: node
                        34      CALL_FUNCTION                   1
                        36      POP_TOP                         
                        38      LOAD_FAST                       0: node
                        40      LOAD_ATTR                       3: value
                        42      RETURN_VALUE                    
                'literal_eval.<locals>._convert_num'
                [Code]
                    File Name: ast.py
                    Object Name: _convert_signed_num
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'isinstance'
                        'UnaryOp'
                        'op'
                        'UAdd'
                        'USub'
                        'operand'
                    [Var Names]
                        'node'
                        'operand'
                    [Free Vars]
                        '_convert_num'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       0: node
                        4       LOAD_GLOBAL                     1: UnaryOp
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               30 (to 60)
                        10      LOAD_GLOBAL                     0: isinstance
                        12      LOAD_FAST                       0: node
                        14      LOAD_ATTR                       2: op
                        16      LOAD_GLOBAL                     3: UAdd
                        18      LOAD_GLOBAL                     4: USub
                        20      BUILD_TUPLE                     2
                        22      CALL_FUNCTION                   2
                        24      POP_JUMP_IF_FALSE               30 (to 60)
                        26      LOAD_DEREF                      0: _convert_num
                        28      LOAD_FAST                       0: node
                        30      LOAD_ATTR                       5: operand
                        32      CALL_FUNCTION                   1
                        34      STORE_FAST                      1: operand
                        36      LOAD_GLOBAL                     0: isinstance
                        38      LOAD_FAST                       0: node
                        40      LOAD_ATTR                       2: op
                        42      LOAD_GLOBAL                     3: UAdd
                        44      CALL_FUNCTION                   2
                        46      POP_JUMP_IF_FALSE               27 (to 54)
                        48      LOAD_FAST                       1: operand
                        50      UNARY_POSITIVE                  
                        52      RETURN_VALUE                    
                        54      LOAD_FAST                       1: operand
                        56      UNARY_NEGATIVE                  
                        58      RETURN_VALUE                    
                        60      LOAD_DEREF                      0: _convert_num
                        62      LOAD_FAST                       0: node
                        64      CALL_FUNCTION                   1
                        66      RETURN_VALUE                    
                'literal_eval.<locals>._convert_signed_num'
                [Code]
                    File Name: ast.py
                    Object Name: _convert
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 6
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'isinstance'
                        'Constant'
                        'value'
                        'Tuple'
                        'tuple'
                        'map'
                        'elts'
                        'List'
                        'list'
                        'Set'
                        'set'
                        'Call'
                        'func'
                        'Name'
                        'id'
                        'args'
                        'keywords'
                        'Dict'
                        'len'
                        'keys'
                        'values'
                        'dict'
                        'zip'
                        'BinOp'
                        'op'
                        'Add'
                        'Sub'
                        'left'
                        'right'
                        'int'
                        'float'
                        'complex'
                    [Var Names]
                        'node'
                        'left'
                        'right'
                    [Free Vars]
                        '_convert'
                        '_convert_num'
                        '_convert_signed_num'
                        '_raise_malformed_node'
                    [Cell Vars]
                    [Constants]
                        None
                        'set'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       0: node
                        4       LOAD_GLOBAL                     1: Constant
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               8 (to 16)
                        10      LOAD_FAST                       0: node
                        12      LOAD_ATTR                       2: value
                        14      RETURN_VALUE                    
                        16      LOAD_GLOBAL                     0: isinstance
                        18      LOAD_FAST                       0: node
                        20      LOAD_GLOBAL                     3: Tuple
                        22      CALL_FUNCTION                   2
                        24      POP_JUMP_IF_FALSE               21 (to 42)
                        26      LOAD_GLOBAL                     4: tuple
                        28      LOAD_GLOBAL                     5: map
                        30      LOAD_DEREF                      0: _convert
                        32      LOAD_FAST                       0: node
                        34      LOAD_ATTR                       6: elts
                        36      CALL_FUNCTION                   2
                        38      CALL_FUNCTION                   1
                        40      RETURN_VALUE                    
                        42      LOAD_GLOBAL                     0: isinstance
                        44      LOAD_FAST                       0: node
                        46      LOAD_GLOBAL                     7: List
                        48      CALL_FUNCTION                   2
                        50      POP_JUMP_IF_FALSE               34 (to 68)
                        52      LOAD_GLOBAL                     8: list
                        54      LOAD_GLOBAL                     5: map
                        56      LOAD_DEREF                      0: _convert
                        58      LOAD_FAST                       0: node
                        60      LOAD_ATTR                       6: elts
                        62      CALL_FUNCTION                   2
                        64      CALL_FUNCTION                   1
                        66      RETURN_VALUE                    
                        68      LOAD_GLOBAL                     0: isinstance
                        70      LOAD_FAST                       0: node
                        72      LOAD_GLOBAL                     9: Set
                        74      CALL_FUNCTION                   2
                        76      POP_JUMP_IF_FALSE               47 (to 94)
                        78      LOAD_GLOBAL                     10: set
                        80      LOAD_GLOBAL                     5: map
                        82      LOAD_DEREF                      0: _convert
                        84      LOAD_FAST                       0: node
                        86      LOAD_ATTR                       6: elts
                        88      CALL_FUNCTION                   2
                        90      CALL_FUNCTION                   1
                        92      RETURN_VALUE                    
                        94      LOAD_GLOBAL                     0: isinstance
                        96      LOAD_FAST                       0: node
                        98      LOAD_GLOBAL                     11: Call
                        100     CALL_FUNCTION                   2
                        102     POP_JUMP_IF_FALSE               79 (to 158)
                        104     LOAD_GLOBAL                     0: isinstance
                        106     LOAD_FAST                       0: node
                        108     LOAD_ATTR                       12: func
                        110     LOAD_GLOBAL                     13: Name
                        112     CALL_FUNCTION                   2
                        114     POP_JUMP_IF_FALSE               79 (to 158)
                        116     LOAD_FAST                       0: node
                        118     LOAD_ATTR                       12: func
                        120     LOAD_ATTR                       14: id
                        122     LOAD_CONST                      1: 'set'
                        124     COMPARE_OP                      2 (==)
                        126     POP_JUMP_IF_FALSE               79 (to 158)
                        128     LOAD_FAST                       0: node
                        130     LOAD_ATTR                       15: args
                        132     LOAD_FAST                       0: node
                        134     LOAD_ATTR                       16: keywords
                        136     DUP_TOP                         
                        138     ROT_THREE                       
                        140     COMPARE_OP                      2 (==)
                        142     POP_JUMP_IF_FALSE               78 (to 156)
                        144     BUILD_LIST                      0
                        146     COMPARE_OP                      2 (==)
                        148     POP_JUMP_IF_FALSE               79 (to 158)
                        150     LOAD_GLOBAL                     10: set
                        152     CALL_FUNCTION                   0
                        154     RETURN_VALUE                    
                        156     POP_TOP                         
                        158     LOAD_GLOBAL                     0: isinstance
                        160     LOAD_FAST                       0: node
                        162     LOAD_GLOBAL                     17: Dict
                        164     CALL_FUNCTION                   2
                        166     POP_JUMP_IF_FALSE               113 (to 226)
                        168     LOAD_GLOBAL                     18: len
                        170     LOAD_FAST                       0: node
                        172     LOAD_ATTR                       19: keys
                        174     CALL_FUNCTION                   1
                        176     LOAD_GLOBAL                     18: len
                        178     LOAD_FAST                       0: node
                        180     LOAD_ATTR                       20: values
                        182     CALL_FUNCTION                   1
                        184     COMPARE_OP                      3 (!=)
                        186     POP_JUMP_IF_FALSE               98 (to 196)
                        188     LOAD_DEREF                      3: _raise_malformed_node
                        190     LOAD_FAST                       0: node
                        192     CALL_FUNCTION                   1
                        194     POP_TOP                         
                        196     LOAD_GLOBAL                     21: dict
                        198     LOAD_GLOBAL                     22: zip
                        200     LOAD_GLOBAL                     5: map
                        202     LOAD_DEREF                      0: _convert
                        204     LOAD_FAST                       0: node
                        206     LOAD_ATTR                       19: keys
                        208     CALL_FUNCTION                   2
                        210     LOAD_GLOBAL                     5: map
                        212     LOAD_DEREF                      0: _convert
                        214     LOAD_FAST                       0: node
                        216     LOAD_ATTR                       20: values
                        218     CALL_FUNCTION                   2
                        220     CALL_FUNCTION                   2
                        222     CALL_FUNCTION                   1
                        224     RETURN_VALUE                    
                        226     LOAD_GLOBAL                     0: isinstance
                        228     LOAD_FAST                       0: node
                        230     LOAD_GLOBAL                     23: BinOp
                        232     CALL_FUNCTION                   2
                        234     POP_JUMP_IF_FALSE               162 (to 324)
                        236     LOAD_GLOBAL                     0: isinstance
                        238     LOAD_FAST                       0: node
                        240     LOAD_ATTR                       24: op
                        242     LOAD_GLOBAL                     25: Add
                        244     LOAD_GLOBAL                     26: Sub
                        246     BUILD_TUPLE                     2
                        248     CALL_FUNCTION                   2
                        250     POP_JUMP_IF_FALSE               162 (to 324)
                        252     LOAD_DEREF                      2: _convert_signed_num
                        254     LOAD_FAST                       0: node
                        256     LOAD_ATTR                       27: left
                        258     CALL_FUNCTION                   1
                        260     STORE_FAST                      1: left
                        262     LOAD_DEREF                      1: _convert_num
                        264     LOAD_FAST                       0: node
                        266     LOAD_ATTR                       28: right
                        268     CALL_FUNCTION                   1
                        270     STORE_FAST                      2: right
                        272     LOAD_GLOBAL                     0: isinstance
                        274     LOAD_FAST                       1: left
                        276     LOAD_GLOBAL                     29: int
                        278     LOAD_GLOBAL                     30: float
                        280     BUILD_TUPLE                     2
                        282     CALL_FUNCTION                   2
                        284     POP_JUMP_IF_FALSE               162 (to 324)
                        286     LOAD_GLOBAL                     0: isinstance
                        288     LOAD_FAST                       2: right
                        290     LOAD_GLOBAL                     31: complex
                        292     CALL_FUNCTION                   2
                        294     POP_JUMP_IF_FALSE               162 (to 324)
                        296     LOAD_GLOBAL                     0: isinstance
                        298     LOAD_FAST                       0: node
                        300     LOAD_ATTR                       24: op
                        302     LOAD_GLOBAL                     25: Add
                        304     CALL_FUNCTION                   2
                        306     POP_JUMP_IF_FALSE               158 (to 316)
                        308     LOAD_FAST                       1: left
                        310     LOAD_FAST                       2: right
                        312     BINARY_ADD                      
                        314     RETURN_VALUE                    
                        316     LOAD_FAST                       1: left
                        318     LOAD_FAST                       2: right
                        320     BINARY_SUBTRACT                 
                        322     RETURN_VALUE                    
                        324     LOAD_DEREF                      2: _convert_signed_num
                        326     LOAD_FAST                       0: node
                        328     CALL_FUNCTION                   1
                        330     RETURN_VALUE                    
                'literal_eval.<locals>._convert'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: node_or_string
                4       LOAD_GLOBAL                     1: str
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               14 (to 28)
                10      LOAD_GLOBAL                     2: parse
                12      LOAD_FAST                       0: node_or_string
                14      LOAD_METHOD                     3: lstrip
                16      LOAD_CONST                      1: ' \t'
                18      CALL_METHOD                     1
                20      LOAD_CONST                      2: 'eval'
                22      LOAD_CONST                      3: ('mode',)
                24      CALL_FUNCTION_KW                2
                26      STORE_FAST                      0: node_or_string
                28      LOAD_GLOBAL                     0: isinstance
                30      LOAD_FAST                       0: node_or_string
                32      LOAD_GLOBAL                     4: Expression
                34      CALL_FUNCTION                   2
                36      POP_JUMP_IF_FALSE               22 (to 44)
                38      LOAD_FAST                       0: node_or_string
                40      LOAD_ATTR                       5: body
                42      STORE_FAST                      0: node_or_string
                44      LOAD_CONST                      4: <CODE> _raise_malformed_node
                46      LOAD_CONST                      5: 'literal_eval.<locals>._raise_malformed_node'
                48      MAKE_FUNCTION                   0
                50      STORE_DEREF                     3: _raise_malformed_node
                52      LOAD_CLOSURE                    3: _raise_malformed_node
                54      BUILD_TUPLE                     1
                56      LOAD_CONST                      6: <CODE> _convert_num
                58      LOAD_CONST                      7: 'literal_eval.<locals>._convert_num'
                60      MAKE_FUNCTION                   8
                62      STORE_DEREF                     1: _convert_num
                64      LOAD_CLOSURE                    1: _convert_num
                66      BUILD_TUPLE                     1
                68      LOAD_CONST                      8: <CODE> _convert_signed_num
                70      LOAD_CONST                      9: 'literal_eval.<locals>._convert_signed_num'
                72      MAKE_FUNCTION                   8
                74      STORE_DEREF                     2: _convert_signed_num
                76      LOAD_CLOSURE                    0: _convert
                78      LOAD_CLOSURE                    1: _convert_num
                80      LOAD_CLOSURE                    2: _convert_signed_num
                82      LOAD_CLOSURE                    3: _raise_malformed_node
                84      BUILD_TUPLE                     4
                86      LOAD_CONST                      10: <CODE> _convert
                88      LOAD_CONST                      11: 'literal_eval.<locals>._convert'
                90      MAKE_FUNCTION                   8
                92      STORE_DEREF                     0: _convert
                94      LOAD_DEREF                      0: _convert
                96      LOAD_FAST                       0: node_or_string
                98      CALL_FUNCTION                   1
                100     RETURN_VALUE                    
        'literal_eval'
        True
        (
            'indent'
        )
        [Code]
            File Name: ast.py
            Object Name: dump
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 1
            Locals: 4
            Stack Size: 5
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'isinstance'
                'AST'
                'TypeError'
                '__class__'
                '__name__'
                'str'
            [Var Names]
                'node'
                'annotate_fields'
                'include_attributes'
                'indent'
            [Free Vars]
            [Cell Vars]
                '_format'
                'annotate_fields'
                'include_attributes'
                'indent'
            [Constants]
                '\n    Return a formatted dump of the tree in node.  This is mainly useful for\n    debugging purposes.  If annotate_fields is true (by default),\n    the returned string will show the names and the values for fields.\n    If annotate_fields is false, the result string will be more compact by\n    omitting unambiguous field names.  Attributes such as line\n    numbers and column offsets are not dumped by default.  If this is wanted,\n    include_attributes can be set to true.  If indent is a non-negative\n    integer or string, then the tree will be pretty-printed with that indent\n    level. None (the default) selects the single line representation.\n    '
                0
                [Code]
                    File Name: ast.py
                    Object Name: _format
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 9
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'isinstance'
                        'AST'
                        'type'
                        '_fields'
                        'getattr'
                        'AttributeError'
                        'append'
                        '_attributes'
                        'len'
                        '__class__'
                        '__name__'
                        'join'
                        'list'
                        'repr'
                    [Var Names]
                        'node'
                        'level'
                        'prefix'
                        'sep'
                        'cls'
                        'args'
                        'allsimple'
                        'keywords'
                        'name'
                        'value'
                        'simple'
                    [Free Vars]
                        '_format'
                        'annotate_fields'
                        'include_attributes'
                        'indent'
                    [Cell Vars]
                        'level'
                    [Constants]
                        None
                        1
                        '\n'
                        ',\n'
                        ''
                        ', '
                        True
                        ...
                        '%s=%s'
                        3
                        '%s(%s)'
                        '%s(%s%s)'
                        False
                        (
                            '[]'
                            True
                        )
                        '[%s%s]'
                        [Code]
                            File Name: ast.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                                '_format'
                                'level'
                            [Cell Vars]
                            [Constants]
                                0
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        10 (to 26)
                                6       STORE_FAST                      1: x
                                8       LOAD_DEREF                      0: _format
                                10      LOAD_FAST                       1: x
                                12      LOAD_DEREF                      1: level
                                14      CALL_FUNCTION                   2
                                16      LOAD_CONST                      0: 0
                                18      BINARY_SUBSCR                   
                                20      YIELD_VALUE                     
                                22      POP_TOP                         
                                24      JUMP_ABSOLUTE                   2 (to 4)
                                26      LOAD_CONST                      1: None
                                28      RETURN_VALUE                    
                        'dump.<locals>._format.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_DEREF                      4: indent
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           1 (is not)
                        6       POP_JUMP_IF_FALSE               21 (to 42)
                        8       LOAD_DEREF                      0: level
                        10      LOAD_CONST                      1: 1
                        12      INPLACE_ADD                     
                        14      STORE_DEREF                     0: level
                        16      LOAD_CONST                      2: '\n'
                        18      LOAD_DEREF                      4: indent
                        20      LOAD_DEREF                      0: level
                        22      BINARY_MULTIPLY                 
                        24      BINARY_ADD                      
                        26      STORE_FAST                      2: prefix
                        28      LOAD_CONST                      3: ',\n'
                        30      LOAD_DEREF                      4: indent
                        32      LOAD_DEREF                      0: level
                        34      BINARY_MULTIPLY                 
                        36      BINARY_ADD                      
                        38      STORE_FAST                      3: sep
                        40      JUMP_FORWARD                    4 (to 50)
                        42      LOAD_CONST                      4: ''
                        44      STORE_FAST                      2: prefix
                        46      LOAD_CONST                      5: ', '
                        48      STORE_FAST                      3: sep
                        50      LOAD_GLOBAL                     0: isinstance
                        52      LOAD_FAST                       0: node
                        54      LOAD_GLOBAL                     1: AST
                        56      CALL_FUNCTION                   2
                        58      POP_JUMP_IF_FALSE               205 (to 410)
                        60      LOAD_GLOBAL                     2: type
                        62      LOAD_FAST                       0: node
                        64      CALL_FUNCTION                   1
                        66      STORE_FAST                      4: cls
                        68      BUILD_LIST                      0
                        70      STORE_FAST                      5: args
                        72      LOAD_CONST                      6: True
                        74      STORE_FAST                      6: allsimple
                        76      LOAD_DEREF                      2: annotate_fields
                        78      STORE_FAST                      7: keywords
                        80      LOAD_FAST                       0: node
                        82      LOAD_ATTR                       3: _fields
                        84      GET_ITER                        
                        86      FOR_ITER                        64 (to 216)
                        88      STORE_FAST                      8: name
                        90      SETUP_FINALLY                   7 (to 106)
                        92      LOAD_GLOBAL                     4: getattr
                        94      LOAD_FAST                       0: node
                        96      LOAD_FAST                       8: name
                        98      CALL_FUNCTION                   2
                        100     STORE_FAST                      9: value
                        102     POP_BLOCK                       
                        104     JUMP_FORWARD                    11 (to 128)
                        106     DUP_TOP                         
                        108     LOAD_GLOBAL                     5: AttributeError
                        110     JUMP_IF_NOT_EXC_MATCH           63 (to 126)
                        112     POP_TOP                         
                        114     POP_TOP                         
                        116     POP_TOP                         
                        118     LOAD_CONST                      6: True
                        120     STORE_FAST                      7: keywords
                        122     POP_EXCEPT                      
                        124     JUMP_ABSOLUTE                   43 (to 86)
                        126     RERAISE                         0
                        128     LOAD_FAST                       9: value
                        130     LOAD_CONST                      0: None
                        132     IS_OP                           0 (is)
                        134     POP_JUMP_IF_FALSE               79 (to 158)
                        136     LOAD_GLOBAL                     4: getattr
                        138     LOAD_FAST                       4: cls
                        140     LOAD_FAST                       8: name
                        142     LOAD_CONST                      7: ...
                        144     CALL_FUNCTION                   3
                        146     LOAD_CONST                      0: None
                        148     IS_OP                           0 (is)
                        150     POP_JUMP_IF_FALSE               79 (to 158)
                        152     LOAD_CONST                      6: True
                        154     STORE_FAST                      7: keywords
                        156     JUMP_ABSOLUTE                   43 (to 86)
                        158     LOAD_DEREF                      1: _format
                        160     LOAD_FAST                       9: value
                        162     LOAD_DEREF                      0: level
                        164     CALL_FUNCTION                   2
                        166     UNPACK_SEQUENCE                 2
                        168     STORE_FAST                      9: value
                        170     STORE_FAST                      10: simple
                        172     LOAD_FAST                       6: allsimple
                        174     JUMP_IF_FALSE_OR_POP            89 (to 178)
                        176     LOAD_FAST                       10: simple
                        178     STORE_FAST                      6: allsimple
                        180     LOAD_FAST                       7: keywords
                        182     POP_JUMP_IF_FALSE               102 (to 204)
                        184     LOAD_FAST                       5: args
                        186     LOAD_METHOD                     6: append
                        188     LOAD_CONST                      8: '%s=%s'
                        190     LOAD_FAST                       8: name
                        192     LOAD_FAST                       9: value
                        194     BUILD_TUPLE                     2
                        196     BINARY_MODULO                   
                        198     CALL_METHOD                     1
                        200     POP_TOP                         
                        202     JUMP_ABSOLUTE                   43 (to 86)
                        204     LOAD_FAST                       5: args
                        206     LOAD_METHOD                     6: append
                        208     LOAD_FAST                       9: value
                        210     CALL_METHOD                     1
                        212     POP_TOP                         
                        214     JUMP_ABSOLUTE                   43 (to 86)
                        216     LOAD_DEREF                      3: include_attributes
                        218     POP_JUMP_IF_FALSE               169 (to 338)
                        220     LOAD_FAST                       0: node
                        222     LOAD_ATTR                       7: _attributes
                        224     POP_JUMP_IF_FALSE               169 (to 338)
                        226     LOAD_FAST                       0: node
                        228     LOAD_ATTR                       7: _attributes
                        230     GET_ITER                        
                        232     FOR_ITER                        52 (to 338)
                        234     STORE_FAST                      8: name
                        236     SETUP_FINALLY                   7 (to 252)
                        238     LOAD_GLOBAL                     4: getattr
                        240     LOAD_FAST                       0: node
                        242     LOAD_FAST                       8: name
                        244     CALL_FUNCTION                   2
                        246     STORE_FAST                      9: value
                        248     POP_BLOCK                       
                        250     JUMP_FORWARD                    9 (to 270)
                        252     DUP_TOP                         
                        254     LOAD_GLOBAL                     5: AttributeError
                        256     JUMP_IF_NOT_EXC_MATCH           134 (to 268)
                        258     POP_TOP                         
                        260     POP_TOP                         
                        262     POP_TOP                         
                        264     POP_EXCEPT                      
                        266     JUMP_ABSOLUTE                   116 (to 232)
                        268     RERAISE                         0
                        270     LOAD_FAST                       9: value
                        272     LOAD_CONST                      0: None
                        274     IS_OP                           0 (is)
                        276     POP_JUMP_IF_FALSE               148 (to 296)
                        278     LOAD_GLOBAL                     4: getattr
                        280     LOAD_FAST                       4: cls
                        282     LOAD_FAST                       8: name
                        284     LOAD_CONST                      7: ...
                        286     CALL_FUNCTION                   3
                        288     LOAD_CONST                      0: None
                        290     IS_OP                           0 (is)
                        292     POP_JUMP_IF_FALSE               148 (to 296)
                        294     JUMP_ABSOLUTE                   116 (to 232)
                        296     LOAD_DEREF                      1: _format
                        298     LOAD_FAST                       9: value
                        300     LOAD_DEREF                      0: level
                        302     CALL_FUNCTION                   2
                        304     UNPACK_SEQUENCE                 2
                        306     STORE_FAST                      9: value
                        308     STORE_FAST                      10: simple
                        310     LOAD_FAST                       6: allsimple
                        312     JUMP_IF_FALSE_OR_POP            158 (to 316)
                        314     LOAD_FAST                       10: simple
                        316     STORE_FAST                      6: allsimple
                        318     LOAD_FAST                       5: args
                        320     LOAD_METHOD                     6: append
                        322     LOAD_CONST                      8: '%s=%s'
                        324     LOAD_FAST                       8: name
                        326     LOAD_FAST                       9: value
                        328     BUILD_TUPLE                     2
                        330     BINARY_MODULO                   
                        332     CALL_METHOD                     1
                        334     POP_TOP                         
                        336     JUMP_ABSOLUTE                   116 (to 232)
                        338     LOAD_FAST                       6: allsimple
                        340     POP_JUMP_IF_FALSE               191 (to 382)
                        342     LOAD_GLOBAL                     8: len
                        344     LOAD_FAST                       5: args
                        346     CALL_FUNCTION                   1
                        348     LOAD_CONST                      9: 3
                        350     COMPARE_OP                      1 (<=)
                        352     POP_JUMP_IF_FALSE               191 (to 382)
                        354     LOAD_CONST                      10: '%s(%s)'
                        356     LOAD_FAST                       0: node
                        358     LOAD_ATTR                       9: __class__
                        360     LOAD_ATTR                       10: __name__
                        362     LOAD_CONST                      5: ', '
                        364     LOAD_METHOD                     11: join
                        366     LOAD_FAST                       5: args
                        368     CALL_METHOD                     1
                        370     BUILD_TUPLE                     2
                        372     BINARY_MODULO                   
                        374     LOAD_FAST                       5: args
                        376     UNARY_NOT                       
                        378     BUILD_TUPLE                     2
                        380     RETURN_VALUE                    
                        382     LOAD_CONST                      11: '%s(%s%s)'
                        384     LOAD_FAST                       0: node
                        386     LOAD_ATTR                       9: __class__
                        388     LOAD_ATTR                       10: __name__
                        390     LOAD_FAST                       2: prefix
                        392     LOAD_FAST                       3: sep
                        394     LOAD_METHOD                     11: join
                        396     LOAD_FAST                       5: args
                        398     CALL_METHOD                     1
                        400     BUILD_TUPLE                     3
                        402     BINARY_MODULO                   
                        404     LOAD_CONST                      12: False
                        406     BUILD_TUPLE                     2
                        408     RETURN_VALUE                    
                        410     LOAD_GLOBAL                     0: isinstance
                        412     LOAD_FAST                       0: node
                        414     LOAD_GLOBAL                     12: list
                        416     CALL_FUNCTION                   2
                        418     POP_JUMP_IF_FALSE               233 (to 466)
                        420     LOAD_FAST                       0: node
                        422     POP_JUMP_IF_TRUE                214 (to 428)
                        424     LOAD_CONST                      13: ('[]', True)
                        426     RETURN_VALUE                    
                        428     LOAD_CONST                      14: '[%s%s]'
                        430     LOAD_FAST                       2: prefix
                        432     LOAD_FAST                       3: sep
                        434     LOAD_METHOD                     11: join
                        436     LOAD_CLOSURE                    1: _format
                        438     LOAD_CLOSURE                    0: level
                        440     BUILD_TUPLE                     2
                        442     LOAD_CONST                      15: <CODE> <genexpr>
                        444     LOAD_CONST                      16: 'dump.<locals>._format.<locals>.<genexpr>'
                        446     MAKE_FUNCTION                   8
                        448     LOAD_FAST                       0: node
                        450     GET_ITER                        
                        452     CALL_FUNCTION                   1
                        454     CALL_METHOD                     1
                        456     BUILD_TUPLE                     2
                        458     BINARY_MODULO                   
                        460     LOAD_CONST                      12: False
                        462     BUILD_TUPLE                     2
                        464     RETURN_VALUE                    
                        466     LOAD_GLOBAL                     13: repr
                        468     LOAD_FAST                       0: node
                        470     CALL_FUNCTION                   1
                        472     LOAD_CONST                      6: True
                        474     BUILD_TUPLE                     2
                        476     RETURN_VALUE                    
                'dump.<locals>._format'
                'expected AST, got %r'
                None
                ' '
                (
                    0
                )
            [Disassembly]
                0       LOAD_CONST                      7: (0,)
                2       LOAD_CLOSURE                    0: _format
                4       LOAD_CLOSURE                    1: annotate_fields
                6       LOAD_CLOSURE                    2: include_attributes
                8       LOAD_CLOSURE                    3: indent
                10      BUILD_TUPLE                     4
                12      LOAD_CONST                      2: <CODE> _format
                14      LOAD_CONST                      3: 'dump.<locals>._format'
                16      MAKE_FUNCTION                   9
                18      STORE_DEREF                     0: _format
                20      LOAD_GLOBAL                     0: isinstance
                22      LOAD_FAST                       0: node
                24      LOAD_GLOBAL                     1: AST
                26      CALL_FUNCTION                   2
                28      POP_JUMP_IF_TRUE                23 (to 46)
                30      LOAD_GLOBAL                     2: TypeError
                32      LOAD_CONST                      4: 'expected AST, got %r'
                34      LOAD_FAST                       0: node
                36      LOAD_ATTR                       3: __class__
                38      LOAD_ATTR                       4: __name__
                40      BINARY_MODULO                   
                42      CALL_FUNCTION                   1
                44      RAISE_VARARGS                   1
                46      LOAD_DEREF                      3: indent
                48      LOAD_CONST                      5: None
                50      IS_OP                           1 (is not)
                52      POP_JUMP_IF_FALSE               36 (to 72)
                54      LOAD_GLOBAL                     0: isinstance
                56      LOAD_DEREF                      3: indent
                58      LOAD_GLOBAL                     5: str
                60      CALL_FUNCTION                   2
                62      POP_JUMP_IF_TRUE                36 (to 72)
                64      LOAD_CONST                      6: ' '
                66      LOAD_DEREF                      3: indent
                68      BINARY_MULTIPLY                 
                70      STORE_DEREF                     3: indent
                72      LOAD_DEREF                      0: _format
                74      LOAD_FAST                       0: node
                76      CALL_FUNCTION                   1
                78      LOAD_CONST                      1: 0
                80      BINARY_SUBSCR                   
                82      RETURN_VALUE                    
        'dump'
        [Code]
            File Name: ast.py
            Object Name: copy_location
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_attributes'
                'getattr'
                'hasattr'
                'startswith'
                'setattr'
            [Var Names]
                'new_node'
                'old_node'
                'attr'
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Copy source location (`lineno`, `col_offset`, `end_lineno`, and `end_col_offset`\n    attributes) from *old_node* to *new_node* if possible, and return *new_node*.\n    '
                (
                    'lineno'
                    'col_offset'
                    'end_lineno'
                    'end_col_offset'
                )
                None
                'end_'
            [Disassembly]
                0       LOAD_CONST                      1: ('lineno', 'col_offset', 'end_lineno', 'end_col_offset')
                2       GET_ITER                        
                4       FOR_ITER                        38 (to 82)
                6       STORE_FAST                      2: attr
                8       LOAD_FAST                       2: attr
                10      LOAD_FAST                       1: old_node
                12      LOAD_ATTR                       0: _attributes
                14      CONTAINS_OP                     0 (in)
                16      POP_JUMP_IF_FALSE               40 (to 80)
                18      LOAD_FAST                       2: attr
                20      LOAD_FAST                       0: new_node
                22      LOAD_ATTR                       0: _attributes
                24      CONTAINS_OP                     0 (in)
                26      POP_JUMP_IF_FALSE               40 (to 80)
                28      LOAD_GLOBAL                     1: getattr
                30      LOAD_FAST                       1: old_node
                32      LOAD_FAST                       2: attr
                34      LOAD_CONST                      2: None
                36      CALL_FUNCTION                   3
                38      STORE_FAST                      3: value
                40      LOAD_FAST                       3: value
                42      LOAD_CONST                      2: None
                44      IS_OP                           1 (is not)
                46      POP_JUMP_IF_TRUE                34 (to 68)
                48      LOAD_GLOBAL                     2: hasattr
                50      LOAD_FAST                       1: old_node
                52      LOAD_FAST                       2: attr
                54      CALL_FUNCTION                   2
                56      POP_JUMP_IF_FALSE               40 (to 80)
                58      LOAD_FAST                       2: attr
                60      LOAD_METHOD                     3: startswith
                62      LOAD_CONST                      3: 'end_'
                64      CALL_METHOD                     1
                66      POP_JUMP_IF_FALSE               40 (to 80)
                68      LOAD_GLOBAL                     4: setattr
                70      LOAD_FAST                       0: new_node
                72      LOAD_FAST                       2: attr
                74      LOAD_FAST                       3: value
                76      CALL_FUNCTION                   3
                78      POP_TOP                         
                80      JUMP_ABSOLUTE                   2 (to 4)
                82      LOAD_FAST                       0: new_node
                84      RETURN_VALUE                    
        'copy_location'
        [Code]
            File Name: ast.py
            Object Name: fix_missing_locations
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 6
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
            [Var Names]
                'node'
            [Free Vars]
            [Cell Vars]
                '_fix'
            [Constants]
                '\n    When you compile a node tree with compile(), the compiler expects lineno and\n    col_offset attributes for every node that supports them.  This is rather\n    tedious to fill in for generated nodes, so this helper adds these attributes\n    recursively where not already set, by setting them to the values of the\n    parent node.  It works recursively starting at *node*.\n    '
                [Code]
                    File Name: ast.py
                    Object Name: _fix
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 7
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        '_attributes'
                        'hasattr'
                        'lineno'
                        'getattr'
                        'end_lineno'
                        'col_offset'
                        'end_col_offset'
                        'iter_child_nodes'
                    [Var Names]
                        'node'
                        'lineno'
                        'col_offset'
                        'end_lineno'
                        'end_col_offset'
                        'child'
                    [Free Vars]
                        '_fix'
                    [Cell Vars]
                    [Constants]
                        None
                        'lineno'
                        'end_lineno'
                        'col_offset'
                        'end_col_offset'
                    [Disassembly]
                        0       LOAD_CONST                      1: 'lineno'
                        2       LOAD_FAST                       0: node
                        4       LOAD_ATTR                       0: _attributes
                        6       CONTAINS_OP                     0 (in)
                        8       POP_JUMP_IF_FALSE               17 (to 34)
                        10      LOAD_GLOBAL                     1: hasattr
                        12      LOAD_FAST                       0: node
                        14      LOAD_CONST                      1: 'lineno'
                        16      CALL_FUNCTION                   2
                        18      POP_JUMP_IF_TRUE                14 (to 28)
                        20      LOAD_FAST                       1: lineno
                        22      LOAD_FAST                       0: node
                        24      STORE_ATTR                      2: lineno
                        26      JUMP_FORWARD                    3 (to 34)
                        28      LOAD_FAST                       0: node
                        30      LOAD_ATTR                       2: lineno
                        32      STORE_FAST                      1: lineno
                        34      LOAD_CONST                      2: 'end_lineno'
                        36      LOAD_FAST                       0: node
                        38      LOAD_ATTR                       0: _attributes
                        40      CONTAINS_OP                     0 (in)
                        42      POP_JUMP_IF_FALSE               37 (to 74)
                        44      LOAD_GLOBAL                     3: getattr
                        46      LOAD_FAST                       0: node
                        48      LOAD_CONST                      2: 'end_lineno'
                        50      LOAD_CONST                      0: None
                        52      CALL_FUNCTION                   3
                        54      LOAD_CONST                      0: None
                        56      IS_OP                           0 (is)
                        58      POP_JUMP_IF_FALSE               34 (to 68)
                        60      LOAD_FAST                       3: end_lineno
                        62      LOAD_FAST                       0: node
                        64      STORE_ATTR                      4: end_lineno
                        66      JUMP_FORWARD                    3 (to 74)
                        68      LOAD_FAST                       0: node
                        70      LOAD_ATTR                       4: end_lineno
                        72      STORE_FAST                      3: end_lineno
                        74      LOAD_CONST                      3: 'col_offset'
                        76      LOAD_FAST                       0: node
                        78      LOAD_ATTR                       0: _attributes
                        80      CONTAINS_OP                     0 (in)
                        82      POP_JUMP_IF_FALSE               54 (to 108)
                        84      LOAD_GLOBAL                     1: hasattr
                        86      LOAD_FAST                       0: node
                        88      LOAD_CONST                      3: 'col_offset'
                        90      CALL_FUNCTION                   2
                        92      POP_JUMP_IF_TRUE                51 (to 102)
                        94      LOAD_FAST                       2: col_offset
                        96      LOAD_FAST                       0: node
                        98      STORE_ATTR                      5: col_offset
                        100     JUMP_FORWARD                    3 (to 108)
                        102     LOAD_FAST                       0: node
                        104     LOAD_ATTR                       5: col_offset
                        106     STORE_FAST                      2: col_offset
                        108     LOAD_CONST                      4: 'end_col_offset'
                        110     LOAD_FAST                       0: node
                        112     LOAD_ATTR                       0: _attributes
                        114     CONTAINS_OP                     0 (in)
                        116     POP_JUMP_IF_FALSE               74 (to 148)
                        118     LOAD_GLOBAL                     3: getattr
                        120     LOAD_FAST                       0: node
                        122     LOAD_CONST                      4: 'end_col_offset'
                        124     LOAD_CONST                      0: None
                        126     CALL_FUNCTION                   3
                        128     LOAD_CONST                      0: None
                        130     IS_OP                           0 (is)
                        132     POP_JUMP_IF_FALSE               71 (to 142)
                        134     LOAD_FAST                       4: end_col_offset
                        136     LOAD_FAST                       0: node
                        138     STORE_ATTR                      6: end_col_offset
                        140     JUMP_FORWARD                    3 (to 148)
                        142     LOAD_FAST                       0: node
                        144     LOAD_ATTR                       6: end_col_offset
                        146     STORE_FAST                      4: end_col_offset
                        148     LOAD_GLOBAL                     7: iter_child_nodes
                        150     LOAD_FAST                       0: node
                        152     CALL_FUNCTION                   1
                        154     GET_ITER                        
                        156     FOR_ITER                        10 (to 178)
                        158     STORE_FAST                      5: child
                        160     LOAD_DEREF                      0: _fix
                        162     LOAD_FAST                       5: child
                        164     LOAD_FAST                       1: lineno
                        166     LOAD_FAST                       2: col_offset
                        168     LOAD_FAST                       3: end_lineno
                        170     LOAD_FAST                       4: end_col_offset
                        172     CALL_FUNCTION                   5
                        174     POP_TOP                         
                        176     JUMP_ABSOLUTE                   78 (to 156)
                        178     LOAD_CONST                      0: None
                        180     RETURN_VALUE                    
                'fix_missing_locations.<locals>._fix'
                1
                0
            [Disassembly]
                0       LOAD_CLOSURE                    0: _fix
                2       BUILD_TUPLE                     1
                4       LOAD_CONST                      1: <CODE> _fix
                6       LOAD_CONST                      2: 'fix_missing_locations.<locals>._fix'
                8       MAKE_FUNCTION                   8
                10      STORE_DEREF                     0: _fix
                12      LOAD_DEREF                      0: _fix
                14      LOAD_FAST                       0: node
                16      LOAD_CONST                      3: 1
                18      LOAD_CONST                      4: 0
                20      LOAD_CONST                      3: 1
                22      LOAD_CONST                      4: 0
                24      CALL_FUNCTION                   5
                26      POP_TOP                         
                28      LOAD_FAST                       0: node
                30      RETURN_VALUE                    
        'fix_missing_locations'
        1
        [Code]
            File Name: ast.py
            Object Name: increment_lineno
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'walk'
                'isinstance'
                'TypeIgnore'
                'getattr'
                'lineno'
                '_attributes'
                'end_lineno'
            [Var Names]
                'node'
                'n'
                'child'
                'end_lineno'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Increment the line number and end line number of each node in the tree\n    starting at *node* by *n*. This is useful to "move code" to a different\n    location in a file.\n    '
                'lineno'
                0
                'end_lineno'
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: walk
                2       LOAD_FAST                       0: node
                4       CALL_FUNCTION                   1
                6       GET_ITER                        
                8       FOR_ITER                        51 (to 112)
                10      STORE_FAST                      2: child
                12      LOAD_GLOBAL                     1: isinstance
                14      LOAD_FAST                       2: child
                16      LOAD_GLOBAL                     2: TypeIgnore
                18      CALL_FUNCTION                   2
                20      POP_JUMP_IF_FALSE               21 (to 42)
                22      LOAD_GLOBAL                     3: getattr
                24      LOAD_FAST                       2: child
                26      LOAD_CONST                      1: 'lineno'
                28      LOAD_CONST                      2: 0
                30      CALL_FUNCTION                   3
                32      LOAD_FAST                       1: n
                34      BINARY_ADD                      
                36      LOAD_FAST                       2: child
                38      STORE_ATTR                      4: lineno
                40      JUMP_ABSOLUTE                   4 (to 8)
                42      LOAD_CONST                      1: 'lineno'
                44      LOAD_FAST                       2: child
                46      LOAD_ATTR                       5: _attributes
                48      CONTAINS_OP                     0 (in)
                50      POP_JUMP_IF_FALSE               35 (to 70)
                52      LOAD_GLOBAL                     3: getattr
                54      LOAD_FAST                       2: child
                56      LOAD_CONST                      1: 'lineno'
                58      LOAD_CONST                      2: 0
                60      CALL_FUNCTION                   3
                62      LOAD_FAST                       1: n
                64      BINARY_ADD                      
                66      LOAD_FAST                       2: child
                68      STORE_ATTR                      4: lineno
                70      LOAD_CONST                      3: 'end_lineno'
                72      LOAD_FAST                       2: child
                74      LOAD_ATTR                       5: _attributes
                76      CONTAINS_OP                     0 (in)
                78      POP_JUMP_IF_FALSE               55 (to 110)
                80      LOAD_GLOBAL                     3: getattr
                82      LOAD_FAST                       2: child
                84      LOAD_CONST                      3: 'end_lineno'
                86      LOAD_CONST                      2: 0
                88      CALL_FUNCTION                   3
                90      DUP_TOP                         
                92      STORE_FAST                      3: end_lineno
                94      LOAD_CONST                      4: None
                96      IS_OP                           1 (is not)
                98      POP_JUMP_IF_FALSE               55 (to 110)
                100     LOAD_FAST                       3: end_lineno
                102     LOAD_FAST                       1: n
                104     BINARY_ADD                      
                106     LOAD_FAST                       2: child
                108     STORE_ATTR                      6: end_lineno
                110     JUMP_ABSOLUTE                   4 (to 8)
                112     LOAD_FAST                       0: node
                114     RETURN_VALUE                    
        'increment_lineno'
        [Code]
            File Name: ast.py
            Object Name: iter_fields
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 9
            Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
            [Names]
                '_fields'
                'getattr'
                'AttributeError'
            [Var Names]
                'node'
                'field'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``\n    that is present on *node*.\n    '
                None
            [Disassembly]
                0       GEN_START                       0
                2       LOAD_FAST                       0: node
                4       LOAD_ATTR                       0: _fields
                6       GET_ITER                        
                8       FOR_ITER                        21 (to 52)
                10      STORE_FAST                      1: field
                12      SETUP_FINALLY                   10 (to 34)
                14      LOAD_FAST                       1: field
                16      LOAD_GLOBAL                     1: getattr
                18      LOAD_FAST                       0: node
                20      LOAD_FAST                       1: field
                22      CALL_FUNCTION                   2
                24      BUILD_TUPLE                     2
                26      YIELD_VALUE                     
                28      POP_TOP                         
                30      POP_BLOCK                       
                32      JUMP_ABSOLUTE                   4 (to 8)
                34      DUP_TOP                         
                36      LOAD_GLOBAL                     2: AttributeError
                38      JUMP_IF_NOT_EXC_MATCH           25 (to 50)
                40      POP_TOP                         
                42      POP_TOP                         
                44      POP_TOP                         
                46      POP_EXCEPT                      
                48      JUMP_ABSOLUTE                   4 (to 8)
                50      RERAISE                         0
                52      LOAD_CONST                      1: None
                54      RETURN_VALUE                    
        'iter_fields'
        [Code]
            File Name: ast.py
            Object Name: iter_child_nodes
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
            [Names]
                'iter_fields'
                'isinstance'
                'AST'
                'list'
            [Var Names]
                'node'
                'name'
                'field'
                'item'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Yield all direct child nodes of *node*, that is, all fields that are nodes\n    and all items of fields that are lists of nodes.\n    '
                None
            [Disassembly]
                0       GEN_START                       0
                2       LOAD_GLOBAL                     0: iter_fields
                4       LOAD_FAST                       0: node
                6       CALL_FUNCTION                   1
                8       GET_ITER                        
                10      FOR_ITER                        31 (to 74)
                12      UNPACK_SEQUENCE                 2
                14      STORE_FAST                      1: name
                16      STORE_FAST                      2: field
                18      LOAD_GLOBAL                     1: isinstance
                20      LOAD_FAST                       2: field
                22      LOAD_GLOBAL                     2: AST
                24      CALL_FUNCTION                   2
                26      POP_JUMP_IF_FALSE               18 (to 36)
                28      LOAD_FAST                       2: field
                30      YIELD_VALUE                     
                32      POP_TOP                         
                34      JUMP_ABSOLUTE                   5 (to 10)
                36      LOAD_GLOBAL                     1: isinstance
                38      LOAD_FAST                       2: field
                40      LOAD_GLOBAL                     3: list
                42      CALL_FUNCTION                   2
                44      POP_JUMP_IF_FALSE               36 (to 72)
                46      LOAD_FAST                       2: field
                48      GET_ITER                        
                50      FOR_ITER                        10 (to 72)
                52      STORE_FAST                      3: item
                54      LOAD_GLOBAL                     1: isinstance
                56      LOAD_FAST                       3: item
                58      LOAD_GLOBAL                     2: AST
                60      CALL_FUNCTION                   2
                62      POP_JUMP_IF_FALSE               35 (to 70)
                64      LOAD_FAST                       3: item
                66      YIELD_VALUE                     
                68      POP_TOP                         
                70      JUMP_ABSOLUTE                   25 (to 50)
                72      JUMP_ABSOLUTE                   5 (to 10)
                74      LOAD_CONST                      1: None
                76      RETURN_VALUE                    
        'iter_child_nodes'
        [Code]
            File Name: ast.py
            Object Name: get_docstring
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'AsyncFunctionDef'
                'FunctionDef'
                'ClassDef'
                'Module'
                'TypeError'
                '__class__'
                '__name__'
                'body'
                'Expr'
                'value'
                'Str'
                's'
                'Constant'
                'str'
                'inspect'
                'cleandoc'
            [Var Names]
                'node'
                'clean'
                'text'
                'inspect'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Return the docstring for the given node or None if no docstring can\n    be found.  If the node provided does not have docstrings a TypeError\n    will be raised.\n\n    If *clean* is `True`, all tabs are expanded to spaces and any whitespace\n    that can be uniformly removed from the second line onwards is removed.\n    '
                "%r can't have docstrings"
                0
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: node
                4       LOAD_GLOBAL                     1: AsyncFunctionDef
                6       LOAD_GLOBAL                     2: FunctionDef
                8       LOAD_GLOBAL                     3: ClassDef
                10      LOAD_GLOBAL                     4: Module
                12      BUILD_TUPLE                     4
                14      CALL_FUNCTION                   2
                16      POP_JUMP_IF_TRUE                17 (to 34)
                18      LOAD_GLOBAL                     5: TypeError
                20      LOAD_CONST                      1: "%r can't have docstrings"
                22      LOAD_FAST                       0: node
                24      LOAD_ATTR                       6: __class__
                26      LOAD_ATTR                       7: __name__
                28      BINARY_MODULO                   
                30      CALL_FUNCTION                   1
                32      RAISE_VARARGS                   1
                34      LOAD_FAST                       0: node
                36      LOAD_ATTR                       8: body
                38      POP_JUMP_IF_FALSE               28 (to 56)
                40      LOAD_GLOBAL                     0: isinstance
                42      LOAD_FAST                       0: node
                44      LOAD_ATTR                       8: body
                46      LOAD_CONST                      2: 0
                48      BINARY_SUBSCR                   
                50      LOAD_GLOBAL                     9: Expr
                52      CALL_FUNCTION                   2
                54      POP_JUMP_IF_TRUE                30 (to 60)
                56      LOAD_CONST                      3: None
                58      RETURN_VALUE                    
                60      LOAD_FAST                       0: node
                62      LOAD_ATTR                       8: body
                64      LOAD_CONST                      2: 0
                66      BINARY_SUBSCR                   
                68      LOAD_ATTR                       10: value
                70      STORE_FAST                      0: node
                72      LOAD_GLOBAL                     0: isinstance
                74      LOAD_FAST                       0: node
                76      LOAD_GLOBAL                     11: Str
                78      CALL_FUNCTION                   2
                80      POP_JUMP_IF_FALSE               45 (to 90)
                82      LOAD_FAST                       0: node
                84      LOAD_ATTR                       12: s
                86      STORE_FAST                      2: text
                88      JUMP_FORWARD                    17 (to 124)
                90      LOAD_GLOBAL                     0: isinstance
                92      LOAD_FAST                       0: node
                94      LOAD_GLOBAL                     13: Constant
                96      CALL_FUNCTION                   2
                98      POP_JUMP_IF_FALSE               60 (to 120)
                100     LOAD_GLOBAL                     0: isinstance
                102     LOAD_FAST                       0: node
                104     LOAD_ATTR                       10: value
                106     LOAD_GLOBAL                     14: str
                108     CALL_FUNCTION                   2
                110     POP_JUMP_IF_FALSE               60 (to 120)
                112     LOAD_FAST                       0: node
                114     LOAD_ATTR                       10: value
                116     STORE_FAST                      2: text
                118     JUMP_FORWARD                    2 (to 124)
                120     LOAD_CONST                      3: None
                122     RETURN_VALUE                    
                124     LOAD_FAST                       1: clean
                126     POP_JUMP_IF_FALSE               73 (to 146)
                128     LOAD_CONST                      2: 0
                130     LOAD_CONST                      3: None
                132     IMPORT_NAME                     15: inspect
                134     STORE_FAST                      3: inspect
                136     LOAD_FAST                       3: inspect
                138     LOAD_METHOD                     16: cleandoc
                140     LOAD_FAST                       2: text
                142     CALL_METHOD                     1
                144     STORE_FAST                      2: text
                146     LOAD_FAST                       2: text
                148     RETURN_VALUE                    
        'get_docstring'
        [Code]
            File Name: ast.py
            Object Name: _splitlines_no_ff
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'len'
                'append'
            [Var Names]
                'source'
                'idx'
                'lines'
                'next_line'
                'c'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Split a string into lines ignoring form feed and other chars.\n\n    This mimics how the Python parser splits source code.\n    '
                0
                ''
                1
                '\r'
                '\n'
                '\r\n'
            [Disassembly]
                0       LOAD_CONST                      1: 0
                2       STORE_FAST                      1: idx
                4       BUILD_LIST                      0
                6       STORE_FAST                      2: lines
                8       LOAD_CONST                      2: ''
                10      STORE_FAST                      3: next_line
                12      LOAD_FAST                       1: idx
                14      LOAD_GLOBAL                     0: len
                16      LOAD_FAST                       0: source
                18      CALL_FUNCTION                   1
                20      COMPARE_OP                      0 (<)
                22      POP_JUMP_IF_FALSE               65 (to 130)
                24      LOAD_FAST                       0: source
                26      LOAD_FAST                       1: idx
                28      BINARY_SUBSCR                   
                30      STORE_FAST                      4: c
                32      LOAD_FAST                       3: next_line
                34      LOAD_FAST                       4: c
                36      INPLACE_ADD                     
                38      STORE_FAST                      3: next_line
                40      LOAD_FAST                       1: idx
                42      LOAD_CONST                      3: 1
                44      INPLACE_ADD                     
                46      STORE_FAST                      1: idx
                48      LOAD_FAST                       4: c
                50      LOAD_CONST                      4: '\r'
                52      COMPARE_OP                      2 (==)
                54      POP_JUMP_IF_FALSE               48 (to 96)
                56      LOAD_FAST                       1: idx
                58      LOAD_GLOBAL                     0: len
                60      LOAD_FAST                       0: source
                62      CALL_FUNCTION                   1
                64      COMPARE_OP                      0 (<)
                66      POP_JUMP_IF_FALSE               48 (to 96)
                68      LOAD_FAST                       0: source
                70      LOAD_FAST                       1: idx
                72      BINARY_SUBSCR                   
                74      LOAD_CONST                      5: '\n'
                76      COMPARE_OP                      2 (==)
                78      POP_JUMP_IF_FALSE               48 (to 96)
                80      LOAD_FAST                       3: next_line
                82      LOAD_CONST                      5: '\n'
                84      INPLACE_ADD                     
                86      STORE_FAST                      3: next_line
                88      LOAD_FAST                       1: idx
                90      LOAD_CONST                      3: 1
                92      INPLACE_ADD                     
                94      STORE_FAST                      1: idx
                96      LOAD_FAST                       4: c
                98      LOAD_CONST                      6: '\r\n'
                100     CONTAINS_OP                     0 (in)
                102     POP_JUMP_IF_FALSE               59 (to 118)
                104     LOAD_FAST                       2: lines
                106     LOAD_METHOD                     1: append
                108     LOAD_FAST                       3: next_line
                110     CALL_METHOD                     1
                112     POP_TOP                         
                114     LOAD_CONST                      2: ''
                116     STORE_FAST                      3: next_line
                118     LOAD_FAST                       1: idx
                120     LOAD_GLOBAL                     0: len
                122     LOAD_FAST                       0: source
                124     CALL_FUNCTION                   1
                126     COMPARE_OP                      0 (<)
                128     POP_JUMP_IF_TRUE                12 (to 24)
                130     LOAD_FAST                       3: next_line
                132     POP_JUMP_IF_FALSE               72 (to 144)
                134     LOAD_FAST                       2: lines
                136     LOAD_METHOD                     1: append
                138     LOAD_FAST                       3: next_line
                140     CALL_METHOD                     1
                142     POP_TOP                         
                144     LOAD_FAST                       2: lines
                146     RETURN_VALUE                    
        '_splitlines_no_ff'
        [Code]
            File Name: ast.py
            Object Name: _pad_whitespace
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'source'
                'result'
                'c'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Replace all chars except '\\f\\t' in a line with spaces."
                ''
                '\x0c\t'
                ' '
            [Disassembly]
                0       LOAD_CONST                      1: ''
                2       STORE_FAST                      1: result
                4       LOAD_FAST                       0: source
                6       GET_ITER                        
                8       FOR_ITER                        15 (to 40)
                10      STORE_FAST                      2: c
                12      LOAD_FAST                       2: c
                14      LOAD_CONST                      2: '\x0c\t'
                16      CONTAINS_OP                     0 (in)
                18      POP_JUMP_IF_FALSE               15 (to 30)
                20      LOAD_FAST                       1: result
                22      LOAD_FAST                       2: c
                24      INPLACE_ADD                     
                26      STORE_FAST                      1: result
                28      JUMP_ABSOLUTE                   4 (to 8)
                30      LOAD_FAST                       1: result
                32      LOAD_CONST                      3: ' '
                34      INPLACE_ADD                     
                36      STORE_FAST                      1: result
                38      JUMP_ABSOLUTE                   4 (to 8)
                40      LOAD_FAST                       1: result
                42      RETURN_VALUE                    
        '_pad_whitespace'
        (
            'padded'
        )
        [Code]
            File Name: ast.py
            Object Name: get_source_segment
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 1
            Locals: 11
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'end_lineno'
                'end_col_offset'
                'lineno'
                'col_offset'
                'AttributeError'
                '_splitlines_no_ff'
                'encode'
                'decode'
                '_pad_whitespace'
                'insert'
                'append'
                'join'
            [Var Names]
                'source'
                'node'
                'padded'
                'lineno'
                'end_lineno'
                'col_offset'
                'end_col_offset'
                'lines'
                'padding'
                'first'
                'last'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get source code segment of the *source* that generated *node*.\n\n    If some location information (`lineno`, `end_lineno`, `col_offset`,\n    or `end_col_offset`) is missing, return None.\n\n    If *padded* is `True`, the first line of a multi-line statement will\n    be padded with spaces to match its original position.\n    '
                None
                1
                ''
                0
            [Disassembly]
                0       SETUP_FINALLY                   31 (to 64)
                2       LOAD_FAST                       1: node
                4       LOAD_ATTR                       0: end_lineno
                6       LOAD_CONST                      1: None
                8       IS_OP                           0 (is)
                10      POP_JUMP_IF_TRUE                11 (to 22)
                12      LOAD_FAST                       1: node
                14      LOAD_ATTR                       1: end_col_offset
                16      LOAD_CONST                      1: None
                18      IS_OP                           0 (is)
                20      POP_JUMP_IF_FALSE               14 (to 28)
                22      POP_BLOCK                       
                24      LOAD_CONST                      1: None
                26      RETURN_VALUE                    
                28      LOAD_FAST                       1: node
                30      LOAD_ATTR                       2: lineno
                32      LOAD_CONST                      2: 1
                34      BINARY_SUBTRACT                 
                36      STORE_FAST                      3: lineno
                38      LOAD_FAST                       1: node
                40      LOAD_ATTR                       0: end_lineno
                42      LOAD_CONST                      2: 1
                44      BINARY_SUBTRACT                 
                46      STORE_FAST                      4: end_lineno
                48      LOAD_FAST                       1: node
                50      LOAD_ATTR                       3: col_offset
                52      STORE_FAST                      5: col_offset
                54      LOAD_FAST                       1: node
                56      LOAD_ATTR                       1: end_col_offset
                58      STORE_FAST                      6: end_col_offset
                60      POP_BLOCK                       
                62      JUMP_FORWARD                    10 (to 84)
                64      DUP_TOP                         
                66      LOAD_GLOBAL                     4: AttributeError
                68      JUMP_IF_NOT_EXC_MATCH           41 (to 82)
                70      POP_TOP                         
                72      POP_TOP                         
                74      POP_TOP                         
                76      POP_EXCEPT                      
                78      LOAD_CONST                      1: None
                80      RETURN_VALUE                    
                82      RERAISE                         0
                84      LOAD_GLOBAL                     5: _splitlines_no_ff
                86      LOAD_FAST                       0: source
                88      CALL_FUNCTION                   1
                90      STORE_FAST                      7: lines
                92      LOAD_FAST                       4: end_lineno
                94      LOAD_FAST                       3: lineno
                96      COMPARE_OP                      2 (==)
                98      POP_JUMP_IF_FALSE               62 (to 124)
                100     LOAD_FAST                       7: lines
                102     LOAD_FAST                       3: lineno
                104     BINARY_SUBSCR                   
                106     LOAD_METHOD                     6: encode
                108     CALL_METHOD                     0
                110     LOAD_FAST                       5: col_offset
                112     LOAD_FAST                       6: end_col_offset
                114     BUILD_SLICE                     2
                116     BINARY_SUBSCR                   
                118     LOAD_METHOD                     7: decode
                120     CALL_METHOD                     0
                122     RETURN_VALUE                    
                124     LOAD_FAST                       2: padded
                126     POP_JUMP_IF_FALSE               79 (to 158)
                128     LOAD_GLOBAL                     8: _pad_whitespace
                130     LOAD_FAST                       7: lines
                132     LOAD_FAST                       3: lineno
                134     BINARY_SUBSCR                   
                136     LOAD_METHOD                     6: encode
                138     CALL_METHOD                     0
                140     LOAD_CONST                      1: None
                142     LOAD_FAST                       5: col_offset
                144     BUILD_SLICE                     2
                146     BINARY_SUBSCR                   
                148     LOAD_METHOD                     7: decode
                150     CALL_METHOD                     0
                152     CALL_FUNCTION                   1
                154     STORE_FAST                      8: padding
                156     JUMP_FORWARD                    2 (to 162)
                158     LOAD_CONST                      3: ''
                160     STORE_FAST                      8: padding
                162     LOAD_FAST                       8: padding
                164     LOAD_FAST                       7: lines
                166     LOAD_FAST                       3: lineno
                168     BINARY_SUBSCR                   
                170     LOAD_METHOD                     6: encode
                172     CALL_METHOD                     0
                174     LOAD_FAST                       5: col_offset
                176     LOAD_CONST                      1: None
                178     BUILD_SLICE                     2
                180     BINARY_SUBSCR                   
                182     LOAD_METHOD                     7: decode
                184     CALL_METHOD                     0
                186     BINARY_ADD                      
                188     STORE_FAST                      9: first
                190     LOAD_FAST                       7: lines
                192     LOAD_FAST                       4: end_lineno
                194     BINARY_SUBSCR                   
                196     LOAD_METHOD                     6: encode
                198     CALL_METHOD                     0
                200     LOAD_CONST                      1: None
                202     LOAD_FAST                       6: end_col_offset
                204     BUILD_SLICE                     2
                206     BINARY_SUBSCR                   
                208     LOAD_METHOD                     7: decode
                210     CALL_METHOD                     0
                212     STORE_FAST                      10: last
                214     LOAD_FAST                       7: lines
                216     LOAD_FAST                       3: lineno
                218     LOAD_CONST                      2: 1
                220     BINARY_ADD                      
                222     LOAD_FAST                       4: end_lineno
                224     BUILD_SLICE                     2
                226     BINARY_SUBSCR                   
                228     STORE_FAST                      7: lines
                230     LOAD_FAST                       7: lines
                232     LOAD_METHOD                     9: insert
                234     LOAD_CONST                      4: 0
                236     LOAD_FAST                       9: first
                238     CALL_METHOD                     2
                240     POP_TOP                         
                242     LOAD_FAST                       7: lines
                244     LOAD_METHOD                     10: append
                246     LOAD_FAST                       10: last
                248     CALL_METHOD                     1
                250     POP_TOP                         
                252     LOAD_CONST                      3: ''
                254     LOAD_METHOD                     11: join
                256     LOAD_FAST                       7: lines
                258     CALL_METHOD                     1
                260     RETURN_VALUE                    
        'get_source_segment'
        [Code]
            File Name: ast.py
            Object Name: walk
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
            [Names]
                'collections'
                'deque'
                'popleft'
                'extend'
                'iter_child_nodes'
            [Var Names]
                'node'
                'deque'
                'todo'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Recursively yield all descendant nodes in the tree starting at *node*\n    (including *node* itself), in no specified order.  This is useful if you\n    only want to modify nodes in place and don't care about the context.\n    "
                0
                (
                    'deque'
                )
                None
            [Disassembly]
                0       GEN_START                       0
                2       LOAD_CONST                      1: 0
                4       LOAD_CONST                      2: ('deque',)
                6       IMPORT_NAME                     0: collections
                8       IMPORT_FROM                     1: deque
                10      STORE_FAST                      1: deque
                12      POP_TOP                         
                14      LOAD_FAST                       1: deque
                16      LOAD_FAST                       0: node
                18      BUILD_LIST                      1
                20      CALL_FUNCTION                   1
                22      STORE_FAST                      2: todo
                24      LOAD_FAST                       2: todo
                26      POP_JUMP_IF_FALSE               32 (to 64)
                28      LOAD_FAST                       2: todo
                30      LOAD_METHOD                     2: popleft
                32      CALL_METHOD                     0
                34      STORE_FAST                      0: node
                36      LOAD_FAST                       2: todo
                38      LOAD_METHOD                     3: extend
                40      LOAD_GLOBAL                     4: iter_child_nodes
                42      LOAD_FAST                       0: node
                44      CALL_FUNCTION                   1
                46      CALL_METHOD                     1
                48      POP_TOP                         
                50      LOAD_FAST                       0: node
                52      YIELD_VALUE                     
                54      POP_TOP                         
                56      LOAD_FAST                       2: todo
                58      POP_JUMP_IF_TRUE                14 (to 28)
                60      LOAD_CONST                      3: None
                62      RETURN_VALUE                    
                64      LOAD_CONST                      3: None
                66      RETURN_VALUE                    
        'walk'
        [Code]
            File Name: ast.py
            Object Name: NodeVisitor
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'visit'
                'generic_visit'
                'visit_Constant'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'NodeVisitor'
                "\n    A node visitor base class that walks the abstract syntax tree and calls a\n    visitor function for every node found.  This function may return a value\n    which is forwarded by the `visit` method.\n\n    This class is meant to be subclassed, with the subclass adding visitor\n    methods.\n\n    Per default the visitor functions for the nodes are ``'visit_'`` +\n    class name of the node.  So a `TryFinally` node visit function would\n    be `visit_TryFinally`.  This behavior can be changed by overriding\n    the `visit` method.  If no visitor function exists for a node\n    (return value `None`) the `generic_visit` visitor is used instead.\n\n    Don't use the `NodeVisitor` if you want to apply changes to nodes during\n    traversing.  For this a special visitor exists (`NodeTransformer`) that\n    allows modifications.\n    "
                [Code]
                    File Name: ast.py
                    Object Name: visit
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__class__'
                        '__name__'
                        'getattr'
                        'generic_visit'
                    [Var Names]
                        'self'
                        'node'
                        'method'
                        'visitor'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Visit a node.'
                        'visit_'
                    [Disassembly]
                        0       LOAD_CONST                      1: 'visit_'
                        2       LOAD_FAST                       1: node
                        4       LOAD_ATTR                       0: __class__
                        6       LOAD_ATTR                       1: __name__
                        8       BINARY_ADD                      
                        10      STORE_FAST                      2: method
                        12      LOAD_GLOBAL                     2: getattr
                        14      LOAD_FAST                       0: self
                        16      LOAD_FAST                       2: method
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       3: generic_visit
                        22      CALL_FUNCTION                   3
                        24      STORE_FAST                      3: visitor
                        26      LOAD_FAST                       3: visitor
                        28      LOAD_FAST                       1: node
                        30      CALL_FUNCTION                   1
                        32      RETURN_VALUE                    
                'NodeVisitor.visit'
                [Code]
                    File Name: ast.py
                    Object Name: generic_visit
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'iter_fields'
                        'isinstance'
                        'list'
                        'AST'
                        'visit'
                    [Var Names]
                        'self'
                        'node'
                        'field'
                        'value'
                        'item'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Called if no explicit visitor function exists for a node.'
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: iter_fields
                        2       LOAD_FAST                       1: node
                        4       CALL_FUNCTION                   1
                        6       GET_ITER                        
                        8       FOR_ITER                        35 (to 80)
                        10      UNPACK_SEQUENCE                 2
                        12      STORE_FAST                      2: field
                        14      STORE_FAST                      3: value
                        16      LOAD_GLOBAL                     1: isinstance
                        18      LOAD_FAST                       3: value
                        20      LOAD_GLOBAL                     2: list
                        22      CALL_FUNCTION                   2
                        24      POP_JUMP_IF_FALSE               29 (to 58)
                        26      LOAD_FAST                       3: value
                        28      GET_ITER                        
                        30      FOR_ITER                        12 (to 56)
                        32      STORE_FAST                      4: item
                        34      LOAD_GLOBAL                     1: isinstance
                        36      LOAD_FAST                       4: item
                        38      LOAD_GLOBAL                     3: AST
                        40      CALL_FUNCTION                   2
                        42      POP_JUMP_IF_FALSE               27 (to 54)
                        44      LOAD_FAST                       0: self
                        46      LOAD_METHOD                     4: visit
                        48      LOAD_FAST                       4: item
                        50      CALL_METHOD                     1
                        52      POP_TOP                         
                        54      JUMP_ABSOLUTE                   15 (to 30)
                        56      JUMP_ABSOLUTE                   4 (to 8)
                        58      LOAD_GLOBAL                     1: isinstance
                        60      LOAD_FAST                       3: value
                        62      LOAD_GLOBAL                     3: AST
                        64      CALL_FUNCTION                   2
                        66      POP_JUMP_IF_FALSE               39 (to 78)
                        68      LOAD_FAST                       0: self
                        70      LOAD_METHOD                     4: visit
                        72      LOAD_FAST                       3: value
                        74      CALL_METHOD                     1
                        76      POP_TOP                         
                        78      JUMP_ABSOLUTE                   4 (to 8)
                        80      LOAD_CONST                      1: None
                        82      RETURN_VALUE                    
                'NodeVisitor.generic_visit'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Constant
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'value'
                        '_const_node_type_names'
                        'get'
                        'type'
                        'items'
                        'isinstance'
                        'getattr'
                        'AttributeError'
                        'warnings'
                        'warn'
                        'DeprecationWarning'
                        'generic_visit'
                    [Var Names]
                        'self'
                        'node'
                        'value'
                        'type_name'
                        'cls'
                        'name'
                        'method'
                        'visitor'
                        'warnings'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'visit_'
                        0
                        ' is deprecated; add visit_Constant'
                        2
                    [Disassembly]
                        0       LOAD_FAST                       1: node
                        2       LOAD_ATTR                       0: value
                        4       STORE_FAST                      2: value
                        6       LOAD_GLOBAL                     1: _const_node_type_names
                        8       LOAD_METHOD                     2: get
                        10      LOAD_GLOBAL                     3: type
                        12      LOAD_FAST                       2: value
                        14      CALL_FUNCTION                   1
                        16      CALL_METHOD                     1
                        18      STORE_FAST                      3: type_name
                        20      LOAD_FAST                       3: type_name
                        22      LOAD_CONST                      0: None
                        24      IS_OP                           0 (is)
                        26      POP_JUMP_IF_FALSE               32 (to 64)
                        28      LOAD_GLOBAL                     1: _const_node_type_names
                        30      LOAD_METHOD                     4: items
                        32      CALL_METHOD                     0
                        34      GET_ITER                        
                        36      FOR_ITER                        13 (to 64)
                        38      UNPACK_SEQUENCE                 2
                        40      STORE_FAST                      4: cls
                        42      STORE_FAST                      5: name
                        44      LOAD_GLOBAL                     5: isinstance
                        46      LOAD_FAST                       2: value
                        48      LOAD_FAST                       4: cls
                        50      CALL_FUNCTION                   2
                        52      POP_JUMP_IF_FALSE               31 (to 62)
                        54      LOAD_FAST                       5: name
                        56      STORE_FAST                      3: type_name
                        58      POP_TOP                         
                        60      JUMP_FORWARD                    1 (to 64)
                        62      JUMP_ABSOLUTE                   18 (to 36)
                        64      LOAD_FAST                       3: type_name
                        66      LOAD_CONST                      0: None
                        68      IS_OP                           1 (is not)
                        70      POP_JUMP_IF_FALSE               75 (to 150)
                        72      LOAD_CONST                      1: 'visit_'
                        74      LOAD_FAST                       3: type_name
                        76      BINARY_ADD                      
                        78      STORE_FAST                      6: method
                        80      SETUP_FINALLY                   7 (to 96)
                        82      LOAD_GLOBAL                     6: getattr
                        84      LOAD_FAST                       0: self
                        86      LOAD_FAST                       6: method
                        88      CALL_FUNCTION                   2
                        90      STORE_FAST                      7: visitor
                        92      POP_BLOCK                       
                        94      JUMP_FORWARD                    9 (to 114)
                        96      DUP_TOP                         
                        98      LOAD_GLOBAL                     7: AttributeError
                        100     JUMP_IF_NOT_EXC_MATCH           56 (to 112)
                        102     POP_TOP                         
                        104     POP_TOP                         
                        106     POP_TOP                         
                        108     POP_EXCEPT                      
                        110     JUMP_FORWARD                    19 (to 150)
                        112     RERAISE                         0
                        114     LOAD_CONST                      2: 0
                        116     LOAD_CONST                      0: None
                        118     IMPORT_NAME                     8: warnings
                        120     STORE_FAST                      8: warnings
                        122     LOAD_FAST                       8: warnings
                        124     LOAD_METHOD                     9: warn
                        126     LOAD_FAST                       6: method
                        128     FORMAT_VALUE                    0 (FVC_NONE)
                        130     LOAD_CONST                      3: ' is deprecated; add visit_Constant'
                        132     BUILD_STRING                    2
                        134     LOAD_GLOBAL                     10: DeprecationWarning
                        136     LOAD_CONST                      4: 2
                        138     CALL_METHOD                     3
                        140     POP_TOP                         
                        142     LOAD_FAST                       7: visitor
                        144     LOAD_FAST                       1: node
                        146     CALL_FUNCTION                   1
                        148     RETURN_VALUE                    
                        150     LOAD_FAST                       0: self
                        152     LOAD_METHOD                     11: generic_visit
                        154     LOAD_FAST                       1: node
                        156     CALL_METHOD                     1
                        158     RETURN_VALUE                    
                'NodeVisitor.visit_Constant'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'NodeVisitor'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "\n    A node visitor base class that walks the abstract syntax tree and calls a\n    visitor function for every node found.  This function may return a value\n    which is forwarded by the `visit` method.\n\n    This class is meant to be subclassed, with the subclass adding visitor\n    methods.\n\n    Per default the visitor functions for the nodes are ``'visit_'`` +\n    class name of the node.  So a `TryFinally` node visit function would\n    be `visit_TryFinally`.  This behavior can be changed by overriding\n    the `visit` method.  If no visitor function exists for a node\n    (return value `None`) the `generic_visit` visitor is used instead.\n\n    Don't use the `NodeVisitor` if you want to apply changes to nodes during\n    traversing.  For this a special visitor exists (`NodeTransformer`) that\n    allows modifications.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> visit
                14      LOAD_CONST                      3: 'NodeVisitor.visit'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: visit
                20      LOAD_CONST                      4: <CODE> generic_visit
                22      LOAD_CONST                      5: 'NodeVisitor.generic_visit'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: generic_visit
                28      LOAD_CONST                      6: <CODE> visit_Constant
                30      LOAD_CONST                      7: 'NodeVisitor.visit_Constant'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: visit_Constant
                36      LOAD_CONST                      8: None
                38      RETURN_VALUE                    
        'NodeVisitor'
        [Code]
            File Name: ast.py
            Object Name: NodeTransformer
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'generic_visit'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'NodeTransformer'
                "\n    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and\n    allows modification of nodes.\n\n    The `NodeTransformer` will walk the AST and use the return value of the\n    visitor methods to replace or remove the old node.  If the return value of\n    the visitor method is ``None``, the node will be removed from its location,\n    otherwise it is replaced with the return value.  The return value may be the\n    original node in which case no replacement takes place.\n\n    Here is an example transformer that rewrites all occurrences of name lookups\n    (``foo``) to ``data['foo']``::\n\n       class RewriteName(NodeTransformer):\n\n           def visit_Name(self, node):\n               return Subscript(\n                   value=Name(id='data', ctx=Load()),\n                   slice=Constant(value=node.id),\n                   ctx=node.ctx\n               )\n\n    Keep in mind that if the node you're operating on has child nodes you must\n    either transform the child nodes yourself or call the :meth:`generic_visit`\n    method for the node first.\n\n    For nodes that were part of a collection of statements (that applies to all\n    statement nodes), the visitor may also return a list of nodes rather than\n    just a single node.\n\n    Usually you use the transformer like this::\n\n       node = YourTransformer().visit(node)\n    "
                [Code]
                    File Name: ast.py
                    Object Name: generic_visit
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'iter_fields'
                        'isinstance'
                        'list'
                        'AST'
                        'visit'
                        'extend'
                        'append'
                        'delattr'
                        'setattr'
                    [Var Names]
                        'self'
                        'node'
                        'field'
                        'old_value'
                        'new_values'
                        'value'
                        'new_node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: iter_fields
                        2       LOAD_FAST                       1: node
                        4       CALL_FUNCTION                   1
                        6       GET_ITER                        
                        8       FOR_ITER                        80 (to 170)
                        10      UNPACK_SEQUENCE                 2
                        12      STORE_FAST                      2: field
                        14      STORE_FAST                      3: old_value
                        16      LOAD_GLOBAL                     1: isinstance
                        18      LOAD_FAST                       3: old_value
                        20      LOAD_GLOBAL                     2: list
                        22      CALL_FUNCTION                   2
                        24      POP_JUMP_IF_FALSE               58 (to 116)
                        26      BUILD_LIST                      0
                        28      STORE_FAST                      4: new_values
                        30      LOAD_FAST                       3: old_value
                        32      GET_ITER                        
                        34      FOR_ITER                        33 (to 102)
                        36      STORE_FAST                      5: value
                        38      LOAD_GLOBAL                     1: isinstance
                        40      LOAD_FAST                       5: value
                        42      LOAD_GLOBAL                     3: AST
                        44      CALL_FUNCTION                   2
                        46      POP_JUMP_IF_FALSE               45 (to 90)
                        48      LOAD_FAST                       0: self
                        50      LOAD_METHOD                     4: visit
                        52      LOAD_FAST                       5: value
                        54      CALL_METHOD                     1
                        56      STORE_FAST                      5: value
                        58      LOAD_FAST                       5: value
                        60      LOAD_CONST                      0: None
                        62      IS_OP                           0 (is)
                        64      POP_JUMP_IF_FALSE               34 (to 68)
                        66      JUMP_ABSOLUTE                   17 (to 34)
                        68      LOAD_GLOBAL                     1: isinstance
                        70      LOAD_FAST                       5: value
                        72      LOAD_GLOBAL                     3: AST
                        74      CALL_FUNCTION                   2
                        76      POP_JUMP_IF_TRUE                45 (to 90)
                        78      LOAD_FAST                       4: new_values
                        80      LOAD_METHOD                     5: extend
                        82      LOAD_FAST                       5: value
                        84      CALL_METHOD                     1
                        86      POP_TOP                         
                        88      JUMP_ABSOLUTE                   17 (to 34)
                        90      LOAD_FAST                       4: new_values
                        92      LOAD_METHOD                     6: append
                        94      LOAD_FAST                       5: value
                        96      CALL_METHOD                     1
                        98      POP_TOP                         
                        100     JUMP_ABSOLUTE                   17 (to 34)
                        102     LOAD_FAST                       4: new_values
                        104     LOAD_FAST                       3: old_value
                        106     LOAD_CONST                      0: None
                        108     LOAD_CONST                      0: None
                        110     BUILD_SLICE                     2
                        112     STORE_SUBSCR                    
                        114     JUMP_ABSOLUTE                   4 (to 8)
                        116     LOAD_GLOBAL                     1: isinstance
                        118     LOAD_FAST                       3: old_value
                        120     LOAD_GLOBAL                     3: AST
                        122     CALL_FUNCTION                   2
                        124     POP_JUMP_IF_FALSE               84 (to 168)
                        126     LOAD_FAST                       0: self
                        128     LOAD_METHOD                     4: visit
                        130     LOAD_FAST                       3: old_value
                        132     CALL_METHOD                     1
                        134     STORE_FAST                      6: new_node
                        136     LOAD_FAST                       6: new_node
                        138     LOAD_CONST                      0: None
                        140     IS_OP                           0 (is)
                        142     POP_JUMP_IF_FALSE               78 (to 156)
                        144     LOAD_GLOBAL                     7: delattr
                        146     LOAD_FAST                       1: node
                        148     LOAD_FAST                       2: field
                        150     CALL_FUNCTION                   2
                        152     POP_TOP                         
                        154     JUMP_ABSOLUTE                   4 (to 8)
                        156     LOAD_GLOBAL                     8: setattr
                        158     LOAD_FAST                       1: node
                        160     LOAD_FAST                       2: field
                        162     LOAD_FAST                       6: new_node
                        164     CALL_FUNCTION                   3
                        166     POP_TOP                         
                        168     JUMP_ABSOLUTE                   4 (to 8)
                        170     LOAD_FAST                       1: node
                        172     RETURN_VALUE                    
                'NodeTransformer.generic_visit'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'NodeTransformer'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "\n    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and\n    allows modification of nodes.\n\n    The `NodeTransformer` will walk the AST and use the return value of the\n    visitor methods to replace or remove the old node.  If the return value of\n    the visitor method is ``None``, the node will be removed from its location,\n    otherwise it is replaced with the return value.  The return value may be the\n    original node in which case no replacement takes place.\n\n    Here is an example transformer that rewrites all occurrences of name lookups\n    (``foo``) to ``data['foo']``::\n\n       class RewriteName(NodeTransformer):\n\n           def visit_Name(self, node):\n               return Subscript(\n                   value=Name(id='data', ctx=Load()),\n                   slice=Constant(value=node.id),\n                   ctx=node.ctx\n               )\n\n    Keep in mind that if the node you're operating on has child nodes you must\n    either transform the child nodes yourself or call the :meth:`generic_visit`\n    method for the node first.\n\n    For nodes that were part of a collection of statements (that applies to all\n    statement nodes), the visitor may also return a list of nodes rather than\n    just a single node.\n\n    Usually you use the transformer like this::\n\n       node = YourTransformer().visit(node)\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> generic_visit
                14      LOAD_CONST                      3: 'NodeTransformer.generic_visit'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: generic_visit
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'NodeTransformer'
        'n'
        [Code]
            File Name: ast.py
            Object Name: _getter
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'value'
            [Var Names]
                'self'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Deprecated. Use value instead.'
            [Disassembly]
                0       LOAD_FAST                       0: self
                2       LOAD_ATTR                       0: value
                4       RETURN_VALUE                    
        '_getter'
        [Code]
            File Name: ast.py
            Object Name: _setter
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'value'
            [Var Names]
                'self'
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_FAST                       1: value
                2       LOAD_FAST                       0: self
                4       STORE_ATTR                      0: value
                6       LOAD_CONST                      0: None
                8       RETURN_VALUE                    
        '_setter'
        [Code]
            File Name: ast.py
            Object Name: _ABC
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '__instancecheck__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_ABC'
                [Code]
                    File Name: ast.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '__doc__'
                    [Var Names]
                        'cls'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Deprecated AST node class. Use ast.Constant instead'
                    [Disassembly]
                        0       LOAD_CONST                      1: 'Deprecated AST node class. Use ast.Constant instead'
                        2       LOAD_FAST                       0: cls
                        4       STORE_ATTR                      0: __doc__
                        6       LOAD_CONST                      0: None
                        8       RETURN_VALUE                    
                '_ABC.__init__'
                [Code]
                    File Name: ast.py
                    Object Name: __instancecheck__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'Constant'
                        '_const_types'
                        'value'
                        'AttributeError'
                        '_const_types_not'
                        'get'
                        'type'
                        '__instancecheck__'
                    [Var Names]
                        'cls'
                        'inst'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        (
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: inst
                        4       LOAD_GLOBAL                     1: Constant
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_CONST                      1: False
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: cls
                        16      LOAD_GLOBAL                     2: _const_types
                        18      CONTAINS_OP                     0 (in)
                        20      POP_JUMP_IF_FALSE               44 (to 88)
                        22      SETUP_FINALLY                   5 (to 34)
                        24      LOAD_FAST                       1: inst
                        26      LOAD_ATTR                       3: value
                        28      STORE_FAST                      2: value
                        30      POP_BLOCK                       
                        32      JUMP_FORWARD                    10 (to 54)
                        34      DUP_TOP                         
                        36      LOAD_GLOBAL                     4: AttributeError
                        38      JUMP_IF_NOT_EXC_MATCH           26 (to 52)
                        40      POP_TOP                         
                        42      POP_TOP                         
                        44      POP_TOP                         
                        46      POP_EXCEPT                      
                        48      LOAD_CONST                      1: False
                        50      RETURN_VALUE                    
                        52      RERAISE                         0
                        54      LOAD_GLOBAL                     0: isinstance
                        56      LOAD_FAST                       2: value
                        58      LOAD_GLOBAL                     2: _const_types
                        60      LOAD_FAST                       0: cls
                        62      BINARY_SUBSCR                   
                        64      CALL_FUNCTION                   2
                        66      JUMP_IF_FALSE_OR_POP            43 (to 86)
                        68      LOAD_GLOBAL                     0: isinstance
                        70      LOAD_FAST                       2: value
                        72      LOAD_GLOBAL                     5: _const_types_not
                        74      LOAD_METHOD                     6: get
                        76      LOAD_FAST                       0: cls
                        78      LOAD_CONST                      2: ()
                        80      CALL_METHOD                     2
                        82      CALL_FUNCTION                   2
                        84      UNARY_NOT                       
                        86      RETURN_VALUE                    
                        88      LOAD_GLOBAL                     7: type
                        90      LOAD_METHOD                     8: __instancecheck__
                        92      LOAD_FAST                       0: cls
                        94      LOAD_FAST                       1: inst
                        96      CALL_METHOD                     2
                        98      RETURN_VALUE                    
                '_ABC.__instancecheck__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_ABC'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: <CODE> __init__
                10      LOAD_CONST                      2: '_ABC.__init__'
                12      MAKE_FUNCTION                   0
                14      STORE_NAME                      3: __init__
                16      LOAD_CONST                      3: <CODE> __instancecheck__
                18      LOAD_CONST                      4: '_ABC.__instancecheck__'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      4: __instancecheck__
                24      LOAD_CONST                      5: None
                26      RETURN_VALUE                    
        '_ABC'
        [Code]
            File Name: ast.py
            Object Name: _new
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 5
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                '_fields'
                'index'
                'len'
                'TypeError'
                '__name__'
                '_const_types'
                'Constant'
                '__new__'
            [Var Names]
                'cls'
                'args'
                'kwargs'
                'key'
                'pos'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                ' got multiple values for argument '
            [Disassembly]
                0       LOAD_FAST                       2: kwargs
                2       GET_ITER                        
                4       FOR_ITER                        30 (to 66)
                6       STORE_FAST                      3: key
                8       LOAD_FAST                       3: key
                10      LOAD_FAST                       0: cls
                12      LOAD_ATTR                       0: _fields
                14      CONTAINS_OP                     1 (not in)
                16      POP_JUMP_IF_FALSE               10 (to 20)
                18      JUMP_ABSOLUTE                   2 (to 4)
                20      LOAD_FAST                       0: cls
                22      LOAD_ATTR                       0: _fields
                24      LOAD_METHOD                     1: index
                26      LOAD_FAST                       3: key
                28      CALL_METHOD                     1
                30      STORE_FAST                      4: pos
                32      LOAD_FAST                       4: pos
                34      LOAD_GLOBAL                     2: len
                36      LOAD_FAST                       1: args
                38      CALL_FUNCTION                   1
                40      COMPARE_OP                      0 (<)
                42      POP_JUMP_IF_FALSE               32 (to 64)
                44      LOAD_GLOBAL                     3: TypeError
                46      LOAD_FAST                       0: cls
                48      LOAD_ATTR                       4: __name__
                50      FORMAT_VALUE                    0 (FVC_NONE)
                52      LOAD_CONST                      1: ' got multiple values for argument '
                54      LOAD_FAST                       3: key
                56      FORMAT_VALUE                    2 (FVC_REPR)
                58      BUILD_STRING                    3
                60      CALL_FUNCTION                   1
                62      RAISE_VARARGS                   1
                64      JUMP_ABSOLUTE                   2 (to 4)
                66      LOAD_FAST                       0: cls
                68      LOAD_GLOBAL                     5: _const_types
                70      CONTAINS_OP                     0 (in)
                72      POP_JUMP_IF_FALSE               44 (to 88)
                74      LOAD_GLOBAL                     6: Constant
                76      LOAD_FAST                       1: args
                78      BUILD_MAP                       0
                80      LOAD_FAST                       2: kwargs
                82      DICT_MERGE                      1
                84      CALL_FUNCTION_EX                1
                86      RETURN_VALUE                    
                88      LOAD_GLOBAL                     6: Constant
                90      LOAD_ATTR                       7: __new__
                92      LOAD_FAST                       0: cls
                94      BUILD_LIST                      1
                96      LOAD_FAST                       1: args
                98      LIST_EXTEND                     1
                100     LIST_TO_TUPLE                   
                102     BUILD_MAP                       0
                104     LOAD_FAST                       2: kwargs
                106     DICT_MERGE                      1
                108     CALL_FUNCTION_EX                1
                110     RETURN_VALUE                    
        '_new'
        [Code]
            File Name: ast.py
            Object Name: Num
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '_fields'
                '_new'
                '__new__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Num'
                (
                    'n'
                )
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Num'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ('n',)
                10      STORE_NAME                      3: _fields
                12      LOAD_NAME                       4: _new
                14      STORE_NAME                      5: __new__
                16      LOAD_CONST                      2: None
                18      RETURN_VALUE                    
        'Num'
        (
            'metaclass'
        )
        [Code]
            File Name: ast.py
            Object Name: Str
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '_fields'
                '_new'
                '__new__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Str'
                (
                    's'
                )
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Str'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ('s',)
                10      STORE_NAME                      3: _fields
                12      LOAD_NAME                       4: _new
                14      STORE_NAME                      5: __new__
                16      LOAD_CONST                      2: None
                18      RETURN_VALUE                    
        'Str'
        [Code]
            File Name: ast.py
            Object Name: Bytes
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '_fields'
                '_new'
                '__new__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Bytes'
                (
                    's'
                )
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Bytes'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ('s',)
                10      STORE_NAME                      3: _fields
                12      LOAD_NAME                       4: _new
                14      STORE_NAME                      5: __new__
                16      LOAD_CONST                      2: None
                18      RETURN_VALUE                    
        'Bytes'
        [Code]
            File Name: ast.py
            Object Name: NameConstant
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '_new'
                '__new__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'NameConstant'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'NameConstant'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: _new
                10      STORE_NAME                      4: __new__
                12      LOAD_CONST                      1: None
                14      RETURN_VALUE                    
        'NameConstant'
        [Code]
            File Name: ast.py
            Object Name: Ellipsis
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '_fields'
                '__new__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Ellipsis'
                (
                )
                [Code]
                    File Name: ast.py
                    Object Name: __new__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'Ellipsis'
                        'Constant'
                        '__new__'
                    [Var Names]
                        'cls'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ...
                    [Disassembly]
                        0       LOAD_FAST                       0: cls
                        2       LOAD_GLOBAL                     0: Ellipsis
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               15 (to 30)
                        8       LOAD_GLOBAL                     1: Constant
                        10      LOAD_CONST                      1: ...
                        12      BUILD_LIST                      1
                        14      LOAD_FAST                       1: args
                        16      LIST_EXTEND                     1
                        18      LIST_TO_TUPLE                   
                        20      BUILD_MAP                       0
                        22      LOAD_FAST                       2: kwargs
                        24      DICT_MERGE                      1
                        26      CALL_FUNCTION_EX                1
                        28      RETURN_VALUE                    
                        30      LOAD_GLOBAL                     1: Constant
                        32      LOAD_ATTR                       2: __new__
                        34      LOAD_FAST                       0: cls
                        36      BUILD_LIST                      1
                        38      LOAD_FAST                       1: args
                        40      LIST_EXTEND                     1
                        42      LIST_TO_TUPLE                   
                        44      BUILD_MAP                       0
                        46      LOAD_FAST                       2: kwargs
                        48      DICT_MERGE                      1
                        50      CALL_FUNCTION_EX                1
                        52      RETURN_VALUE                    
                'Ellipsis.__new__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Ellipsis'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ()
                10      STORE_NAME                      3: _fields
                12      LOAD_CONST                      2: <CODE> __new__
                14      LOAD_CONST                      3: 'Ellipsis.__new__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __new__
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'Ellipsis'
        ...
        [Code]
            File Name: ast.py
            Object Name: slice
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'slice'
                'Deprecated AST node class.'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'slice'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Deprecated AST node class.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'slice'
        [Code]
            File Name: ast.py
            Object Name: Index
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__new__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Index'
                'Deprecated AST node class. Use the index value directly instead.'
                [Code]
                    File Name: ast.py
                    Object Name: __new__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 1
                    Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'cls'
                        'value'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: value
                        2       RETURN_VALUE                    
                'Index.__new__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Index'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Deprecated AST node class. Use the index value directly instead.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __new__
                14      LOAD_CONST                      3: 'Index.__new__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __new__
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'Index'
        [Code]
            File Name: ast.py
            Object Name: ExtSlice
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__new__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ExtSlice'
                'Deprecated AST node class. Use ast.Tuple instead.'
                (
                )
                [Code]
                    File Name: ast.py
                    Object Name: __new__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'Tuple'
                        'list'
                        'Load'
                    [Var Names]
                        'cls'
                        'dims'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Tuple
                        2       LOAD_GLOBAL                     1: list
                        4       LOAD_FAST                       1: dims
                        6       CALL_FUNCTION                   1
                        8       LOAD_GLOBAL                     2: Load
                        10      CALL_FUNCTION                   0
                        12      BUILD_TUPLE                     2
                        14      BUILD_MAP                       0
                        16      LOAD_FAST                       2: kwargs
                        18      DICT_MERGE                      1
                        20      CALL_FUNCTION_EX                1
                        22      RETURN_VALUE                    
                'ExtSlice.__new__'
                None
                (
                    (
                    )
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ExtSlice'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Deprecated AST node class. Use ast.Tuple instead.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      6: ((),)
                14      LOAD_CONST                      3: <CODE> __new__
                16      LOAD_CONST                      4: 'ExtSlice.__new__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __new__
                22      LOAD_CONST                      5: None
                24      RETURN_VALUE                    
        'ExtSlice'
        'dims'
        [Code]
            File Name: ast.py
            Object Name: _dims_getter
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'elts'
            [Var Names]
                'self'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Deprecated. Use elts instead.'
            [Disassembly]
                0       LOAD_FAST                       0: self
                2       LOAD_ATTR                       0: elts
                4       RETURN_VALUE                    
        '_dims_getter'
        [Code]
            File Name: ast.py
            Object Name: _dims_setter
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'elts'
            [Var Names]
                'self'
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_FAST                       1: value
                2       LOAD_FAST                       0: self
                4       STORE_ATTR                      0: elts
                6       LOAD_CONST                      0: None
                8       RETURN_VALUE                    
        '_dims_setter'
        [Code]
            File Name: ast.py
            Object Name: Suite
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Suite'
                'Deprecated AST node class.  Unused in Python 3.'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Suite'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Deprecated AST node class.  Unused in Python 3.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'Suite'
        [Code]
            File Name: ast.py
            Object Name: AugLoad
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'AugLoad'
                'Deprecated AST node class.  Unused in Python 3.'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'AugLoad'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Deprecated AST node class.  Unused in Python 3.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'AugLoad'
        [Code]
            File Name: ast.py
            Object Name: AugStore
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'AugStore'
                'Deprecated AST node class.  Unused in Python 3.'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'AugStore'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Deprecated AST node class.  Unused in Python 3.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'AugStore'
        [Code]
            File Name: ast.py
            Object Name: Param
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Param'
                'Deprecated AST node class.  Unused in Python 3.'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Param'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Deprecated AST node class.  Unused in Python 3.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'Param'
        '1e'
        [Code]
            File Name: ast.py
            Object Name: _Precedence
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'auto'
                'TUPLE'
                'YIELD'
                'TEST'
                'OR'
                'AND'
                'NOT'
                'CMP'
                'EXPR'
                'BOR'
                'BXOR'
                'BAND'
                'SHIFT'
                'ARITH'
                'TERM'
                'FACTOR'
                'POWER'
                'AWAIT'
                'ATOM'
                'next'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_Precedence'
                'Precedence table that originated from python grammar.'
                [Code]
                    File Name: ast.py
                    Object Name: next
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__class__'
                        'ValueError'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                    [Disassembly]
                        0       SETUP_FINALLY                   8 (to 18)
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: __class__
                        6       LOAD_FAST                       0: self
                        8       LOAD_CONST                      1: 1
                        10      BINARY_ADD                      
                        12      CALL_METHOD                     1
                        14      POP_BLOCK                       
                        16      RETURN_VALUE                    
                        18      DUP_TOP                         
                        20      LOAD_GLOBAL                     1: ValueError
                        22      JUMP_IF_NOT_EXC_MATCH           19 (to 38)
                        24      POP_TOP                         
                        26      POP_TOP                         
                        28      POP_TOP                         
                        30      LOAD_FAST                       0: self
                        32      ROT_FOUR                        
                        34      POP_EXCEPT                      
                        36      RETURN_VALUE                    
                        38      RERAISE                         0
                '_Precedence.next'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_Precedence'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Precedence table that originated from python grammar.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: auto
                14      CALL_FUNCTION                   0
                16      STORE_NAME                      5: TUPLE
                18      LOAD_NAME                       4: auto
                20      CALL_FUNCTION                   0
                22      STORE_NAME                      6: YIELD
                24      LOAD_NAME                       4: auto
                26      CALL_FUNCTION                   0
                28      STORE_NAME                      7: TEST
                30      LOAD_NAME                       4: auto
                32      CALL_FUNCTION                   0
                34      STORE_NAME                      8: OR
                36      LOAD_NAME                       4: auto
                38      CALL_FUNCTION                   0
                40      STORE_NAME                      9: AND
                42      LOAD_NAME                       4: auto
                44      CALL_FUNCTION                   0
                46      STORE_NAME                      10: NOT
                48      LOAD_NAME                       4: auto
                50      CALL_FUNCTION                   0
                52      STORE_NAME                      11: CMP
                54      LOAD_NAME                       4: auto
                56      CALL_FUNCTION                   0
                58      STORE_NAME                      12: EXPR
                60      LOAD_NAME                       12: EXPR
                62      STORE_NAME                      13: BOR
                64      LOAD_NAME                       4: auto
                66      CALL_FUNCTION                   0
                68      STORE_NAME                      14: BXOR
                70      LOAD_NAME                       4: auto
                72      CALL_FUNCTION                   0
                74      STORE_NAME                      15: BAND
                76      LOAD_NAME                       4: auto
                78      CALL_FUNCTION                   0
                80      STORE_NAME                      16: SHIFT
                82      LOAD_NAME                       4: auto
                84      CALL_FUNCTION                   0
                86      STORE_NAME                      17: ARITH
                88      LOAD_NAME                       4: auto
                90      CALL_FUNCTION                   0
                92      STORE_NAME                      18: TERM
                94      LOAD_NAME                       4: auto
                96      CALL_FUNCTION                   0
                98      STORE_NAME                      19: FACTOR
                100     LOAD_NAME                       4: auto
                102     CALL_FUNCTION                   0
                104     STORE_NAME                      20: POWER
                106     LOAD_NAME                       4: auto
                108     CALL_FUNCTION                   0
                110     STORE_NAME                      21: AWAIT
                112     LOAD_NAME                       4: auto
                114     CALL_FUNCTION                   0
                116     STORE_NAME                      22: ATOM
                118     LOAD_CONST                      2: <CODE> next
                120     LOAD_CONST                      3: '_Precedence.next'
                122     MAKE_FUNCTION                   0
                124     STORE_NAME                      23: next
                126     LOAD_CONST                      4: None
                128     RETURN_VALUE                    
        '_Precedence'
        (
            "'"
            '"'
        )
        (
            '"""'
            "'''"
        )
        [Code]
            File Name: ast.py
            Object Name: _Unparser
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 14
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'interleave'
                'items_view'
                'maybe_newline'
                'fill'
                'write'
                'buffer_writer'
                'property'
                'buffer'
                'contextmanager'
                'block'
                'delimit'
                'delimit_if'
                'require_parens'
                'get_precedence'
                'set_precedence'
                'get_raw_docstring'
                'get_type_comment'
                'traverse'
                'visit'
                '_write_docstring_and_traverse_body'
                'visit_Module'
                'visit_FunctionType'
                'visit_Expr'
                'visit_NamedExpr'
                'visit_Import'
                'visit_ImportFrom'
                'visit_Assign'
                'visit_AugAssign'
                'visit_AnnAssign'
                'visit_Return'
                'visit_Pass'
                'visit_Break'
                'visit_Continue'
                'visit_Delete'
                'visit_Assert'
                'visit_Global'
                'visit_Nonlocal'
                'visit_Await'
                'visit_Yield'
                'visit_YieldFrom'
                'visit_Raise'
                'visit_Try'
                'visit_ExceptHandler'
                'visit_ClassDef'
                'visit_FunctionDef'
                'visit_AsyncFunctionDef'
                '_function_helper'
                'visit_For'
                'visit_AsyncFor'
                '_for_helper'
                'visit_If'
                'visit_While'
                'visit_With'
                'visit_AsyncWith'
                '_ALL_QUOTES'
                '_str_literal_helper'
                '_write_str_avoiding_backslashes'
                'visit_JoinedStr'
                'visit_FormattedValue'
                '_fstring_JoinedStr'
                '_fstring_Constant'
                '_fstring_FormattedValue'
                'visit_Name'
                '_write_docstring'
                '_write_constant'
                'visit_Constant'
                'visit_List'
                'visit_ListComp'
                'visit_GeneratorExp'
                'visit_SetComp'
                'visit_DictComp'
                'visit_comprehension'
                'visit_IfExp'
                'visit_Set'
                'visit_Dict'
                'visit_Tuple'
                'unop'
                '_Precedence'
                'NOT'
                'FACTOR'
                'unop_precedence'
                'visit_UnaryOp'
                'binop'
                'ARITH'
                'TERM'
                'SHIFT'
                'BOR'
                'BXOR'
                'BAND'
                'POWER'
                'binop_precedence'
                'frozenset'
                'binop_rassoc'
                'visit_BinOp'
                'cmpops'
                'visit_Compare'
                'boolops'
                'AND'
                'OR'
                'boolop_precedence'
                'visit_BoolOp'
                'visit_Attribute'
                'visit_Call'
                'visit_Subscript'
                'visit_Starred'
                'visit_Ellipsis'
                'visit_Slice'
                'visit_Match'
                'visit_arg'
                'visit_arguments'
                'visit_keyword'
                'visit_Lambda'
                'visit_alias'
                'visit_withitem'
                'visit_match_case'
                'visit_MatchValue'
                'visit_MatchSingleton'
                'visit_MatchSequence'
                'visit_MatchStar'
                'visit_MatchMapping'
                'visit_MatchClass'
                'visit_MatchAs'
                'visit_MatchOr'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_Unparser'
                'Methods in this class recursively traverse an AST and\n    output source code for the abstract syntax; original formatting\n    is disregarded.'
                False
                (
                    '_avoid_backslashes'
                )
                [Code]
                    File Name: ast.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_source'
                        '_buffer'
                        '_precedences'
                        '_type_ignores'
                        '_indent'
                        '_avoid_backslashes'
                    [Var Names]
                        'self'
                        '_avoid_backslashes'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _source
                        6       BUILD_LIST                      0
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _buffer
                        12      BUILD_MAP                       0
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: _precedences
                        18      BUILD_MAP                       0
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      3: _type_ignores
                        24      LOAD_CONST                      1: 0
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      4: _indent
                        30      LOAD_FAST                       1: _avoid_backslashes
                        32      LOAD_FAST                       0: self
                        34      STORE_ATTR                      5: _avoid_backslashes
                        36      LOAD_CONST                      0: None
                        38      RETURN_VALUE                    
                '_Unparser.__init__'
                [Code]
                    File Name: ast.py
                    Object Name: interleave
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'iter'
                        'next'
                        'StopIteration'
                    [Var Names]
                        'self'
                        'inter'
                        'f'
                        'seq'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Call f on each item in seq, calling inter() in between.'
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: iter
                        2       LOAD_FAST                       3: seq
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      3: seq
                        8       SETUP_FINALLY                   8 (to 26)
                        10      LOAD_FAST                       2: f
                        12      LOAD_GLOBAL                     1: next
                        14      LOAD_FAST                       3: seq
                        16      CALL_FUNCTION                   1
                        18      CALL_FUNCTION                   1
                        20      POP_TOP                         
                        22      POP_BLOCK                       
                        24      JUMP_FORWARD                    10 (to 46)
                        26      DUP_TOP                         
                        28      LOAD_GLOBAL                     2: StopIteration
                        30      JUMP_IF_NOT_EXC_MATCH           22 (to 44)
                        32      POP_TOP                         
                        34      POP_TOP                         
                        36      POP_TOP                         
                        38      POP_EXCEPT                      
                        40      LOAD_CONST                      1: None
                        42      RETURN_VALUE                    
                        44      RERAISE                         0
                        46      LOAD_FAST                       3: seq
                        48      GET_ITER                        
                        50      FOR_ITER                        9 (to 70)
                        52      STORE_FAST                      4: x
                        54      LOAD_FAST                       1: inter
                        56      CALL_FUNCTION                   0
                        58      POP_TOP                         
                        60      LOAD_FAST                       2: f
                        62      LOAD_FAST                       4: x
                        64      CALL_FUNCTION                   1
                        66      POP_TOP                         
                        68      JUMP_ABSOLUTE                   25 (to 50)
                        70      LOAD_CONST                      1: None
                        72      RETURN_VALUE                    
                '_Unparser.interleave'
                [Code]
                    File Name: ast.py
                    Object Name: items_view
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'len'
                        'write'
                        'interleave'
                    [Var Names]
                        'self'
                        'traverser'
                        'items'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        'Traverse and separate the given *items* with a comma and append it to\n        the buffer. If *items* is a single item sequence, a trailing comma\n        will be added.'
                        1
                        0
                        ','
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.items_view.<locals>.<lambda>'
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: len
                        2       LOAD_FAST                       2: items
                        4       CALL_FUNCTION                   1
                        6       LOAD_CONST                      1: 1
                        8       COMPARE_OP                      2 (==)
                        10      POP_JUMP_IF_FALSE               19 (to 38)
                        12      LOAD_FAST                       1: traverser
                        14      LOAD_FAST                       2: items
                        16      LOAD_CONST                      2: 0
                        18      BINARY_SUBSCR                   
                        20      CALL_FUNCTION                   1
                        22      POP_TOP                         
                        24      LOAD_DEREF                      0: self
                        26      LOAD_METHOD                     1: write
                        28      LOAD_CONST                      3: ','
                        30      CALL_METHOD                     1
                        32      POP_TOP                         
                        34      LOAD_CONST                      6: None
                        36      RETURN_VALUE                    
                        38      LOAD_DEREF                      0: self
                        40      LOAD_METHOD                     2: interleave
                        42      LOAD_CLOSURE                    0: self
                        44      BUILD_TUPLE                     1
                        46      LOAD_CONST                      4: <CODE> <lambda>
                        48      LOAD_CONST                      5: '_Unparser.items_view.<locals>.<lambda>'
                        50      MAKE_FUNCTION                   8
                        52      LOAD_FAST                       1: traverser
                        54      LOAD_FAST                       2: items
                        56      CALL_METHOD                     3
                        58      POP_TOP                         
                        60      LOAD_CONST                      6: None
                        62      RETURN_VALUE                    
                '_Unparser.items_view'
                [Code]
                    File Name: ast.py
                    Object Name: maybe_newline
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_source'
                        'write'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Adds a newline if it isn't the start of generated source"
                        '\n'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _source
                        4       POP_JUMP_IF_FALSE               10 (to 20)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: write
                        10      LOAD_CONST                      1: '\n'
                        12      CALL_METHOD                     1
                        14      POP_TOP                         
                        16      LOAD_CONST                      2: None
                        18      RETURN_VALUE                    
                        20      LOAD_CONST                      2: None
                        22      RETURN_VALUE                    
                '_Unparser.maybe_newline'
                ''
                [Code]
                    File Name: ast.py
                    Object Name: fill
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'maybe_newline'
                        'write'
                        '_indent'
                    [Var Names]
                        'self'
                        'text'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Indent a piece of text and append it, according to the current\n        indentation level'
                        '    '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: maybe_newline
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     1: write
                        12      LOAD_CONST                      1: '    '
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _indent
                        18      BINARY_MULTIPLY                 
                        20      LOAD_FAST                       1: text
                        22      BINARY_ADD                      
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_CONST                      2: None
                        30      RETURN_VALUE                    
                '_Unparser.fill'
                [Code]
                    File Name: ast.py
                    Object Name: write
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_source'
                        'append'
                    [Var Names]
                        'self'
                        'text'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Append a piece of text'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _source
                        4       LOAD_METHOD                     1: append
                        6       LOAD_FAST                       1: text
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_CONST                      1: None
                        14      RETURN_VALUE                    
                '_Unparser.write'
                [Code]
                    File Name: ast.py
                    Object Name: buffer_writer
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_buffer'
                        'append'
                    [Var Names]
                        'self'
                        'text'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _buffer
                        4       LOAD_METHOD                     1: append
                        6       LOAD_FAST                       1: text
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                '_Unparser.buffer_writer'
                [Code]
                    File Name: ast.py
                    Object Name: buffer
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'join'
                        '_buffer'
                        'clear'
                    [Var Names]
                        'self'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ''
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_METHOD                     0: join
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: _buffer
                        8       CALL_METHOD                     1
                        10      STORE_FAST                      1: value
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: _buffer
                        16      LOAD_METHOD                     2: clear
                        18      CALL_METHOD                     0
                        20      POP_TOP                         
                        22      LOAD_FAST                       1: value
                        24      RETURN_VALUE                    
                '_Unparser.buffer'
                None
                (
                    'extra'
                )
                [Code]
                    File Name: ast.py
                    Object Name: block
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'write'
                        '_indent'
                    [Var Names]
                        'self'
                        'extra'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "A context manager for preparing the source for blocks. It adds\n        the character':', increases the indentation on enter and decreases\n        the indentation on exit. If *extra* is given, it will be directly\n        appended after the colon character.\n        "
                        ':'
                        1
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: write
                        6       LOAD_CONST                      1: ':'
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_FAST                       1: extra
                        14      POP_JUMP_IF_FALSE               13 (to 26)
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     0: write
                        20      LOAD_FAST                       1: extra
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       0: self
                        28      DUP_TOP                         
                        30      LOAD_ATTR                       1: _indent
                        32      LOAD_CONST                      2: 1
                        34      INPLACE_ADD                     
                        36      ROT_TWO                         
                        38      STORE_ATTR                      1: _indent
                        40      LOAD_CONST                      3: None
                        42      YIELD_VALUE                     
                        44      POP_TOP                         
                        46      LOAD_FAST                       0: self
                        48      DUP_TOP                         
                        50      LOAD_ATTR                       1: _indent
                        52      LOAD_CONST                      2: 1
                        54      INPLACE_SUBTRACT                
                        56      ROT_TWO                         
                        58      STORE_ATTR                      1: _indent
                        60      LOAD_CONST                      3: None
                        62      RETURN_VALUE                    
                '_Unparser.block'
                [Code]
                    File Name: ast.py
                    Object Name: delimit
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'write'
                    [Var Names]
                        'self'
                        'start'
                        'end'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'A context manager for preparing the source for expressions. It adds\n        *start* to the buffer and enters, after exit it adds *end*.'
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: write
                        6       LOAD_FAST                       1: start
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_CONST                      1: None
                        14      YIELD_VALUE                     
                        16      POP_TOP                         
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     0: write
                        22      LOAD_FAST                       2: end
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_CONST                      1: None
                        30      RETURN_VALUE                    
                '_Unparser.delimit'
                [Code]
                    File Name: ast.py
                    Object Name: delimit_if
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'delimit'
                        'nullcontext'
                    [Var Names]
                        'self'
                        'start'
                        'end'
                        'condition'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       3: condition
                        2       POP_JUMP_IF_FALSE               8 (to 16)
                        4       LOAD_FAST                       0: self
                        6       LOAD_METHOD                     0: delimit
                        8       LOAD_FAST                       1: start
                        10      LOAD_FAST                       2: end
                        12      CALL_METHOD                     2
                        14      RETURN_VALUE                    
                        16      LOAD_GLOBAL                     1: nullcontext
                        18      CALL_FUNCTION                   0
                        20      RETURN_VALUE                    
                '_Unparser.delimit_if'
                [Code]
                    File Name: ast.py
                    Object Name: require_parens
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'delimit_if'
                        'get_precedence'
                    [Var Names]
                        'self'
                        'precedence'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Shortcut to adding precedence related parens'
                        '('
                        ')'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: delimit_if
                        4       LOAD_CONST                      1: '('
                        6       LOAD_CONST                      2: ')'
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     1: get_precedence
                        12      LOAD_FAST                       2: node
                        14      CALL_METHOD                     1
                        16      LOAD_FAST                       1: precedence
                        18      COMPARE_OP                      4 (>)
                        20      CALL_METHOD                     3
                        22      RETURN_VALUE                    
                '_Unparser.require_parens'
                [Code]
                    File Name: ast.py
                    Object Name: get_precedence
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_precedences'
                        'get'
                        '_Precedence'
                        'TEST'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _precedences
                        4       LOAD_METHOD                     1: get
                        6       LOAD_FAST                       1: node
                        8       LOAD_GLOBAL                     2: _Precedence
                        10      LOAD_ATTR                       3: TEST
                        12      CALL_METHOD                     2
                        14      RETURN_VALUE                    
                '_Unparser.get_precedence'
                [Code]
                    File Name: ast.py
                    Object Name: set_precedence
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_precedences'
                    [Var Names]
                        'self'
                        'precedence'
                        'nodes'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       2: nodes
                        2       GET_ITER                        
                        4       FOR_ITER                        7 (to 20)
                        6       STORE_FAST                      3: node
                        8       LOAD_FAST                       1: precedence
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       0: _precedences
                        14      LOAD_FAST                       3: node
                        16      STORE_SUBSCR                    
                        18      JUMP_ABSOLUTE                   2 (to 4)
                        20      LOAD_CONST                      0: None
                        22      RETURN_VALUE                    
                '_Unparser.set_precedence'
                [Code]
                    File Name: ast.py
                    Object Name: get_raw_docstring
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'AsyncFunctionDef'
                        'FunctionDef'
                        'ClassDef'
                        'Module'
                        'len'
                        'body'
                        'Expr'
                        'value'
                        'Constant'
                        'str'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'If a docstring node is found in the body of the *node* parameter,\n        return that docstring node, None otherwise.\n\n        Logic mirrored from ``_PyAST_GetDocString``.'
                        1
                        None
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: node
                        4       LOAD_GLOBAL                     1: AsyncFunctionDef
                        6       LOAD_GLOBAL                     2: FunctionDef
                        8       LOAD_GLOBAL                     3: ClassDef
                        10      LOAD_GLOBAL                     4: Module
                        12      BUILD_TUPLE                     4
                        14      CALL_FUNCTION                   2
                        16      POP_JUMP_IF_FALSE               16 (to 32)
                        18      LOAD_GLOBAL                     5: len
                        20      LOAD_FAST                       1: node
                        22      LOAD_ATTR                       6: body
                        24      CALL_FUNCTION                   1
                        26      LOAD_CONST                      1: 1
                        28      COMPARE_OP                      0 (<)
                        30      POP_JUMP_IF_FALSE               18 (to 36)
                        32      LOAD_CONST                      2: None
                        34      RETURN_VALUE                    
                        36      LOAD_FAST                       1: node
                        38      LOAD_ATTR                       6: body
                        40      LOAD_CONST                      3: 0
                        42      BINARY_SUBSCR                   
                        44      STORE_FAST                      1: node
                        46      LOAD_GLOBAL                     0: isinstance
                        48      LOAD_FAST                       1: node
                        50      LOAD_GLOBAL                     7: Expr
                        52      CALL_FUNCTION                   2
                        54      POP_JUMP_IF_TRUE                30 (to 60)
                        56      LOAD_CONST                      2: None
                        58      RETURN_VALUE                    
                        60      LOAD_FAST                       1: node
                        62      LOAD_ATTR                       8: value
                        64      STORE_FAST                      1: node
                        66      LOAD_GLOBAL                     0: isinstance
                        68      LOAD_FAST                       1: node
                        70      LOAD_GLOBAL                     9: Constant
                        72      CALL_FUNCTION                   2
                        74      POP_JUMP_IF_FALSE               46 (to 92)
                        76      LOAD_GLOBAL                     0: isinstance
                        78      LOAD_FAST                       1: node
                        80      LOAD_ATTR                       8: value
                        82      LOAD_GLOBAL                     10: str
                        84      CALL_FUNCTION                   2
                        86      POP_JUMP_IF_FALSE               48 (to 96)
                        88      LOAD_FAST                       1: node
                        90      RETURN_VALUE                    
                        92      LOAD_CONST                      2: None
                        94      RETURN_VALUE                    
                        96      LOAD_CONST                      2: None
                        98      RETURN_VALUE                    
                '_Unparser.get_raw_docstring'
                [Code]
                    File Name: ast.py
                    Object Name: get_type_comment
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_type_ignores'
                        'get'
                        'lineno'
                        'type_comment'
                    [Var Names]
                        'self'
                        'node'
                        'comment'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' # type: '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _type_ignores
                        4       LOAD_METHOD                     1: get
                        6       LOAD_FAST                       1: node
                        8       LOAD_ATTR                       2: lineno
                        10      CALL_METHOD                     1
                        12      JUMP_IF_TRUE_OR_POP             9 (to 18)
                        14      LOAD_FAST                       1: node
                        16      LOAD_ATTR                       3: type_comment
                        18      STORE_FAST                      2: comment
                        20      LOAD_FAST                       2: comment
                        22      LOAD_CONST                      0: None
                        24      IS_OP                           1 (is not)
                        26      POP_JUMP_IF_FALSE               19 (to 38)
                        28      LOAD_CONST                      1: ' # type: '
                        30      LOAD_FAST                       2: comment
                        32      FORMAT_VALUE                    0 (FVC_NONE)
                        34      BUILD_STRING                    2
                        36      RETURN_VALUE                    
                        38      LOAD_CONST                      0: None
                        40      RETURN_VALUE                    
                '_Unparser.get_type_comment'
                [Code]
                    File Name: ast.py
                    Object Name: traverse
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'isinstance'
                        'list'
                        'traverse'
                        'super'
                        'visit'
                    [Var Names]
                        'self'
                        'node'
                        'item'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: node
                        4       LOAD_GLOBAL                     1: list
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               17 (to 34)
                        10      LOAD_FAST                       1: node
                        12      GET_ITER                        
                        14      FOR_ITER                        7 (to 30)
                        16      STORE_FAST                      2: item
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     2: traverse
                        22      LOAD_FAST                       2: item
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      JUMP_ABSOLUTE                   7 (to 14)
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                        34      LOAD_GLOBAL                     3: super
                        36      CALL_FUNCTION                   0
                        38      LOAD_METHOD                     4: visit
                        40      LOAD_FAST                       1: node
                        42      CALL_METHOD                     1
                        44      POP_TOP                         
                        46      LOAD_CONST                      0: None
                        48      RETURN_VALUE                    
                '_Unparser.traverse'
                [Code]
                    File Name: ast.py
                    Object Name: visit
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_source'
                        'traverse'
                        'join'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Outputs a source code string that, if converted back to an ast\n        (using ast.parse) will generate an AST equivalent to *node*'
                        ''
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _source
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: traverse
                        10      LOAD_FAST                       1: node
                        12      CALL_METHOD                     1
                        14      POP_TOP                         
                        16      LOAD_CONST                      1: ''
                        18      LOAD_METHOD                     2: join
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       0: _source
                        24      CALL_METHOD                     1
                        26      RETURN_VALUE                    
                '_Unparser.visit'
                [Code]
                    File Name: ast.py
                    Object Name: _write_docstring_and_traverse_body
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'get_raw_docstring'
                        '_write_docstring'
                        'traverse'
                        'body'
                    [Var Names]
                        'self'
                        'node'
                        'docstring'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: get_raw_docstring
                        4       LOAD_FAST                       1: node
                        6       CALL_METHOD                     1
                        8       DUP_TOP                         
                        10      STORE_FAST                      2: docstring
                        12      POP_JUMP_IF_FALSE               24 (to 48)
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     1: _write_docstring
                        18      LOAD_FAST                       2: docstring
                        20      CALL_METHOD                     1
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     2: traverse
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       3: body
                        32      LOAD_CONST                      1: 1
                        34      LOAD_CONST                      0: None
                        36      BUILD_SLICE                     2
                        38      BINARY_SUBSCR                   
                        40      CALL_METHOD                     1
                        42      POP_TOP                         
                        44      LOAD_CONST                      0: None
                        46      RETURN_VALUE                    
                        48      LOAD_FAST                       0: self
                        50      LOAD_METHOD                     2: traverse
                        52      LOAD_FAST                       1: node
                        54      LOAD_ATTR                       3: body
                        56      CALL_METHOD                     1
                        58      POP_TOP                         
                        60      LOAD_CONST                      0: None
                        62      RETURN_VALUE                    
                '_Unparser._write_docstring_and_traverse_body'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Module
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type_ignores'
                        '_type_ignores'
                        '_write_docstring_and_traverse_body'
                        'clear'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: ast.py
                            Object Name: <dictcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 5
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'lineno'
                                'tag'
                            [Var Names]
                                '.0'
                                'ignore'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                'ignore'
                            [Disassembly]
                                0       BUILD_MAP                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        10 (to 26)
                                6       STORE_FAST                      1: ignore
                                8       LOAD_FAST                       1: ignore
                                10      LOAD_ATTR                       0: lineno
                                12      LOAD_CONST                      0: 'ignore'
                                14      LOAD_FAST                       1: ignore
                                16      LOAD_ATTR                       1: tag
                                18      FORMAT_VALUE                    0 (FVC_NONE)
                                20      BUILD_STRING                    2
                                22      MAP_ADD                         2
                                24      JUMP_ABSOLUTE                   2 (to 4)
                                26      RETURN_VALUE                    
                        '_Unparser.visit_Module.<locals>.<dictcomp>'
                    [Disassembly]
                        0       LOAD_CONST                      1: <CODE> <dictcomp>
                        2       LOAD_CONST                      2: '_Unparser.visit_Module.<locals>.<dictcomp>'
                        4       MAKE_FUNCTION                   0
                        6       LOAD_FAST                       1: node
                        8       LOAD_ATTR                       0: type_ignores
                        10      GET_ITER                        
                        12      CALL_FUNCTION                   1
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      1: _type_ignores
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     2: _write_docstring_and_traverse_body
                        22      LOAD_FAST                       1: node
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       1: _type_ignores
                        32      LOAD_METHOD                     3: clear
                        34      CALL_METHOD                     0
                        36      POP_TOP                         
                        38      LOAD_CONST                      0: None
                        40      RETURN_VALUE                    
                '_Unparser.visit_Module'
                [Code]
                    File Name: ast.py
                    Object Name: visit_FunctionType
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'delimit'
                        'interleave'
                        'traverse'
                        'argtypes'
                        'write'
                        'returns'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        '('
                        ')'
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_FunctionType.<locals>.<lambda>'
                        ' -> '
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: delimit
                        4       LOAD_CONST                      1: '('
                        6       LOAD_CONST                      2: ')'
                        8       CALL_METHOD                     2
                        10      SETUP_WITH                      21 (to 54)
                        12      POP_TOP                         
                        14      LOAD_DEREF                      0: self
                        16      LOAD_METHOD                     1: interleave
                        18      LOAD_CLOSURE                    0: self
                        20      BUILD_TUPLE                     1
                        22      LOAD_CONST                      3: <CODE> <lambda>
                        24      LOAD_CONST                      4: '_Unparser.visit_FunctionType.<locals>.<lambda>'
                        26      MAKE_FUNCTION                   8
                        28      LOAD_DEREF                      0: self
                        30      LOAD_ATTR                       2: traverse
                        32      LOAD_FAST                       1: node
                        34      LOAD_ATTR                       3: argtypes
                        36      CALL_METHOD                     3
                        38      POP_TOP                         
                        40      POP_BLOCK                       
                        42      LOAD_CONST                      0: None
                        44      DUP_TOP                         
                        46      DUP_TOP                         
                        48      CALL_FUNCTION                   3
                        50      POP_TOP                         
                        52      JUMP_FORWARD                    8 (to 70)
                        54      WITH_EXCEPT_START               
                        56      POP_JUMP_IF_TRUE                30 (to 60)
                        58      RERAISE                         1
                        60      POP_TOP                         
                        62      POP_TOP                         
                        64      POP_TOP                         
                        66      POP_EXCEPT                      
                        68      POP_TOP                         
                        70      LOAD_DEREF                      0: self
                        72      LOAD_METHOD                     4: write
                        74      LOAD_CONST                      5: ' -> '
                        76      CALL_METHOD                     1
                        78      POP_TOP                         
                        80      LOAD_DEREF                      0: self
                        82      LOAD_METHOD                     2: traverse
                        84      LOAD_FAST                       1: node
                        86      LOAD_ATTR                       5: returns
                        88      CALL_METHOD                     1
                        90      POP_TOP                         
                        92      LOAD_CONST                      0: None
                        94      RETURN_VALUE                    
                '_Unparser.visit_FunctionType'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Expr
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'set_precedence'
                        '_Precedence'
                        'YIELD'
                        'value'
                        'traverse'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     1: set_precedence
                        12      LOAD_GLOBAL                     2: _Precedence
                        14      LOAD_ATTR                       3: YIELD
                        16      LOAD_FAST                       1: node
                        18      LOAD_ATTR                       4: value
                        20      CALL_METHOD                     2
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     5: traverse
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       4: value
                        32      CALL_METHOD                     1
                        34      POP_TOP                         
                        36      LOAD_CONST                      0: None
                        38      RETURN_VALUE                    
                '_Unparser.visit_Expr'
                [Code]
                    File Name: ast.py
                    Object Name: visit_NamedExpr
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'require_parens'
                        '_Precedence'
                        'TUPLE'
                        'set_precedence'
                        'ATOM'
                        'target'
                        'value'
                        'traverse'
                        'write'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' := '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: require_parens
                        4       LOAD_GLOBAL                     1: _Precedence
                        6       LOAD_ATTR                       2: TUPLE
                        8       LOAD_FAST                       1: node
                        10      CALL_METHOD                     2
                        12      SETUP_WITH                      36 (to 86)
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     3: set_precedence
                        20      LOAD_GLOBAL                     1: _Precedence
                        22      LOAD_ATTR                       4: ATOM
                        24      LOAD_FAST                       1: node
                        26      LOAD_ATTR                       5: target
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       6: value
                        32      CALL_METHOD                     3
                        34      POP_TOP                         
                        36      LOAD_FAST                       0: self
                        38      LOAD_METHOD                     7: traverse
                        40      LOAD_FAST                       1: node
                        42      LOAD_ATTR                       5: target
                        44      CALL_METHOD                     1
                        46      POP_TOP                         
                        48      LOAD_FAST                       0: self
                        50      LOAD_METHOD                     8: write
                        52      LOAD_CONST                      1: ' := '
                        54      CALL_METHOD                     1
                        56      POP_TOP                         
                        58      LOAD_FAST                       0: self
                        60      LOAD_METHOD                     7: traverse
                        62      LOAD_FAST                       1: node
                        64      LOAD_ATTR                       6: value
                        66      CALL_METHOD                     1
                        68      POP_TOP                         
                        70      POP_BLOCK                       
                        72      LOAD_CONST                      0: None
                        74      DUP_TOP                         
                        76      DUP_TOP                         
                        78      CALL_FUNCTION                   3
                        80      POP_TOP                         
                        82      LOAD_CONST                      0: None
                        84      RETURN_VALUE                    
                        86      WITH_EXCEPT_START               
                        88      POP_JUMP_IF_TRUE                46 (to 92)
                        90      RERAISE                         1
                        92      POP_TOP                         
                        94      POP_TOP                         
                        96      POP_TOP                         
                        98      POP_EXCEPT                      
                        100     POP_TOP                         
                        102     LOAD_CONST                      0: None
                        104     RETURN_VALUE                    
                '_Unparser.visit_NamedExpr'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Import
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'fill'
                        'interleave'
                        'traverse'
                        'names'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        'import '
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_Import.<locals>.<lambda>'
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'import '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_DEREF                      0: self
                        12      LOAD_METHOD                     1: interleave
                        14      LOAD_CLOSURE                    0: self
                        16      BUILD_TUPLE                     1
                        18      LOAD_CONST                      2: <CODE> <lambda>
                        20      LOAD_CONST                      3: '_Unparser.visit_Import.<locals>.<lambda>'
                        22      MAKE_FUNCTION                   8
                        24      LOAD_DEREF                      0: self
                        26      LOAD_ATTR                       2: traverse
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       3: names
                        32      CALL_METHOD                     3
                        34      POP_TOP                         
                        36      LOAD_CONST                      0: None
                        38      RETURN_VALUE                    
                '_Unparser.visit_Import'
                [Code]
                    File Name: ast.py
                    Object Name: visit_ImportFrom
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'fill'
                        'write'
                        'level'
                        'module'
                        'interleave'
                        'traverse'
                        'names'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        'from '
                        '.'
                        0
                        ' import '
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_ImportFrom.<locals>.<lambda>'
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'from '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_DEREF                      0: self
                        12      LOAD_METHOD                     1: write
                        14      LOAD_CONST                      2: '.'
                        16      LOAD_FAST                       1: node
                        18      LOAD_ATTR                       2: level
                        20      JUMP_IF_TRUE_OR_POP             12 (to 24)
                        22      LOAD_CONST                      3: 0
                        24      BINARY_MULTIPLY                 
                        26      CALL_METHOD                     1
                        28      POP_TOP                         
                        30      LOAD_FAST                       1: node
                        32      LOAD_ATTR                       3: module
                        34      POP_JUMP_IF_FALSE               24 (to 48)
                        36      LOAD_DEREF                      0: self
                        38      LOAD_METHOD                     1: write
                        40      LOAD_FAST                       1: node
                        42      LOAD_ATTR                       3: module
                        44      CALL_METHOD                     1
                        46      POP_TOP                         
                        48      LOAD_DEREF                      0: self
                        50      LOAD_METHOD                     1: write
                        52      LOAD_CONST                      4: ' import '
                        54      CALL_METHOD                     1
                        56      POP_TOP                         
                        58      LOAD_DEREF                      0: self
                        60      LOAD_METHOD                     4: interleave
                        62      LOAD_CLOSURE                    0: self
                        64      BUILD_TUPLE                     1
                        66      LOAD_CONST                      5: <CODE> <lambda>
                        68      LOAD_CONST                      6: '_Unparser.visit_ImportFrom.<locals>.<lambda>'
                        70      MAKE_FUNCTION                   8
                        72      LOAD_DEREF                      0: self
                        74      LOAD_ATTR                       5: traverse
                        76      LOAD_FAST                       1: node
                        78      LOAD_ATTR                       6: names
                        80      CALL_METHOD                     3
                        82      POP_TOP                         
                        84      LOAD_CONST                      0: None
                        86      RETURN_VALUE                    
                '_Unparser.visit_ImportFrom'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Assign
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'targets'
                        'traverse'
                        'write'
                        'value'
                        'get_type_comment'
                    [Var Names]
                        'self'
                        'node'
                        'target'
                        'type_comment'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' = '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       1: node
                        10      LOAD_ATTR                       1: targets
                        12      GET_ITER                        
                        14      FOR_ITER                        12 (to 40)
                        16      STORE_FAST                      2: target
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     2: traverse
                        22      LOAD_FAST                       2: target
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     3: write
                        32      LOAD_CONST                      1: ' = '
                        34      CALL_METHOD                     1
                        36      POP_TOP                         
                        38      JUMP_ABSOLUTE                   7 (to 14)
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     2: traverse
                        44      LOAD_FAST                       1: node
                        46      LOAD_ATTR                       4: value
                        48      CALL_METHOD                     1
                        50      POP_TOP                         
                        52      LOAD_FAST                       0: self
                        54      LOAD_METHOD                     5: get_type_comment
                        56      LOAD_FAST                       1: node
                        58      CALL_METHOD                     1
                        60      DUP_TOP                         
                        62      STORE_FAST                      3: type_comment
                        64      POP_JUMP_IF_FALSE               40 (to 80)
                        66      LOAD_FAST                       0: self
                        68      LOAD_METHOD                     3: write
                        70      LOAD_FAST                       3: type_comment
                        72      CALL_METHOD                     1
                        74      POP_TOP                         
                        76      LOAD_CONST                      0: None
                        78      RETURN_VALUE                    
                        80      LOAD_CONST                      0: None
                        82      RETURN_VALUE                    
                '_Unparser.visit_Assign'
                [Code]
                    File Name: ast.py
                    Object Name: visit_AugAssign
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'traverse'
                        'target'
                        'write'
                        'binop'
                        'op'
                        '__class__'
                        '__name__'
                        'value'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' '
                        '= '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     1: traverse
                        12      LOAD_FAST                       1: node
                        14      LOAD_ATTR                       2: target
                        16      CALL_METHOD                     1
                        18      POP_TOP                         
                        20      LOAD_FAST                       0: self
                        22      LOAD_METHOD                     3: write
                        24      LOAD_CONST                      1: ' '
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       4: binop
                        30      LOAD_FAST                       1: node
                        32      LOAD_ATTR                       5: op
                        34      LOAD_ATTR                       6: __class__
                        36      LOAD_ATTR                       7: __name__
                        38      BINARY_SUBSCR                   
                        40      BINARY_ADD                      
                        42      LOAD_CONST                      2: '= '
                        44      BINARY_ADD                      
                        46      CALL_METHOD                     1
                        48      POP_TOP                         
                        50      LOAD_FAST                       0: self
                        52      LOAD_METHOD                     1: traverse
                        54      LOAD_FAST                       1: node
                        56      LOAD_ATTR                       8: value
                        58      CALL_METHOD                     1
                        60      POP_TOP                         
                        62      LOAD_CONST                      0: None
                        64      RETURN_VALUE                    
                '_Unparser.visit_AugAssign'
                [Code]
                    File Name: ast.py
                    Object Name: visit_AnnAssign
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'delimit_if'
                        'simple'
                        'isinstance'
                        'target'
                        'Name'
                        'traverse'
                        'write'
                        'annotation'
                        'value'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '('
                        ')'
                        ': '
                        ' = '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     1: delimit_if
                        12      LOAD_CONST                      1: '('
                        14      LOAD_CONST                      2: ')'
                        16      LOAD_FAST                       1: node
                        18      LOAD_ATTR                       2: simple
                        20      UNARY_NOT                       
                        22      JUMP_IF_FALSE_OR_POP            17 (to 34)
                        24      LOAD_GLOBAL                     3: isinstance
                        26      LOAD_FAST                       1: node
                        28      LOAD_ATTR                       4: target
                        30      LOAD_GLOBAL                     5: Name
                        32      CALL_FUNCTION                   2
                        34      CALL_METHOD                     3
                        36      SETUP_WITH                      14 (to 66)
                        38      POP_TOP                         
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     6: traverse
                        44      LOAD_FAST                       1: node
                        46      LOAD_ATTR                       4: target
                        48      CALL_METHOD                     1
                        50      POP_TOP                         
                        52      POP_BLOCK                       
                        54      LOAD_CONST                      0: None
                        56      DUP_TOP                         
                        58      DUP_TOP                         
                        60      CALL_FUNCTION                   3
                        62      POP_TOP                         
                        64      JUMP_FORWARD                    8 (to 82)
                        66      WITH_EXCEPT_START               
                        68      POP_JUMP_IF_TRUE                36 (to 72)
                        70      RERAISE                         1
                        72      POP_TOP                         
                        74      POP_TOP                         
                        76      POP_TOP                         
                        78      POP_EXCEPT                      
                        80      POP_TOP                         
                        82      LOAD_FAST                       0: self
                        84      LOAD_METHOD                     7: write
                        86      LOAD_CONST                      3: ': '
                        88      CALL_METHOD                     1
                        90      POP_TOP                         
                        92      LOAD_FAST                       0: self
                        94      LOAD_METHOD                     6: traverse
                        96      LOAD_FAST                       1: node
                        98      LOAD_ATTR                       8: annotation
                        100     CALL_METHOD                     1
                        102     POP_TOP                         
                        104     LOAD_FAST                       1: node
                        106     LOAD_ATTR                       9: value
                        108     POP_JUMP_IF_FALSE               68 (to 136)
                        110     LOAD_FAST                       0: self
                        112     LOAD_METHOD                     7: write
                        114     LOAD_CONST                      4: ' = '
                        116     CALL_METHOD                     1
                        118     POP_TOP                         
                        120     LOAD_FAST                       0: self
                        122     LOAD_METHOD                     6: traverse
                        124     LOAD_FAST                       1: node
                        126     LOAD_ATTR                       9: value
                        128     CALL_METHOD                     1
                        130     POP_TOP                         
                        132     LOAD_CONST                      0: None
                        134     RETURN_VALUE                    
                        136     LOAD_CONST                      0: None
                        138     RETURN_VALUE                    
                '_Unparser.visit_AnnAssign'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Return
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'value'
                        'write'
                        'traverse'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'return'
                        ' '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'return'
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       1: node
                        12      LOAD_ATTR                       1: value
                        14      POP_JUMP_IF_FALSE               21 (to 42)
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     2: write
                        20      LOAD_CONST                      2: ' '
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     3: traverse
                        30      LOAD_FAST                       1: node
                        32      LOAD_ATTR                       1: value
                        34      CALL_METHOD                     1
                        36      POP_TOP                         
                        38      LOAD_CONST                      0: None
                        40      RETURN_VALUE                    
                        42      LOAD_CONST                      0: None
                        44      RETURN_VALUE                    
                '_Unparser.visit_Return'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Pass
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'pass'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'pass'
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                '_Unparser.visit_Pass'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Break
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'break'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'break'
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                '_Unparser.visit_Break'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Continue
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'continue'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'continue'
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                '_Unparser.visit_Continue'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Delete
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'fill'
                        'interleave'
                        'traverse'
                        'targets'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        'del '
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_Delete.<locals>.<lambda>'
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'del '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_DEREF                      0: self
                        12      LOAD_METHOD                     1: interleave
                        14      LOAD_CLOSURE                    0: self
                        16      BUILD_TUPLE                     1
                        18      LOAD_CONST                      2: <CODE> <lambda>
                        20      LOAD_CONST                      3: '_Unparser.visit_Delete.<locals>.<lambda>'
                        22      MAKE_FUNCTION                   8
                        24      LOAD_DEREF                      0: self
                        26      LOAD_ATTR                       2: traverse
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       3: targets
                        32      CALL_METHOD                     3
                        34      POP_TOP                         
                        36      LOAD_CONST                      0: None
                        38      RETURN_VALUE                    
                '_Unparser.visit_Delete'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Assert
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'traverse'
                        'test'
                        'msg'
                        'write'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'assert '
                        ', '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'assert '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: traverse
                        14      LOAD_FAST                       1: node
                        16      LOAD_ATTR                       2: test
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_FAST                       1: node
                        24      LOAD_ATTR                       3: msg
                        26      POP_JUMP_IF_FALSE               27 (to 54)
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     4: write
                        32      LOAD_CONST                      2: ', '
                        34      CALL_METHOD                     1
                        36      POP_TOP                         
                        38      LOAD_FAST                       0: self
                        40      LOAD_METHOD                     1: traverse
                        42      LOAD_FAST                       1: node
                        44      LOAD_ATTR                       3: msg
                        46      CALL_METHOD                     1
                        48      POP_TOP                         
                        50      LOAD_CONST                      0: None
                        52      RETURN_VALUE                    
                        54      LOAD_CONST                      0: None
                        56      RETURN_VALUE                    
                '_Unparser.visit_Assert'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Global
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'fill'
                        'interleave'
                        'write'
                        'names'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        'global '
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_Global.<locals>.<lambda>'
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'global '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_DEREF                      0: self
                        12      LOAD_METHOD                     1: interleave
                        14      LOAD_CLOSURE                    0: self
                        16      BUILD_TUPLE                     1
                        18      LOAD_CONST                      2: <CODE> <lambda>
                        20      LOAD_CONST                      3: '_Unparser.visit_Global.<locals>.<lambda>'
                        22      MAKE_FUNCTION                   8
                        24      LOAD_DEREF                      0: self
                        26      LOAD_ATTR                       2: write
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       3: names
                        32      CALL_METHOD                     3
                        34      POP_TOP                         
                        36      LOAD_CONST                      0: None
                        38      RETURN_VALUE                    
                '_Unparser.visit_Global'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Nonlocal
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'fill'
                        'interleave'
                        'write'
                        'names'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        'nonlocal '
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_Nonlocal.<locals>.<lambda>'
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'nonlocal '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_DEREF                      0: self
                        12      LOAD_METHOD                     1: interleave
                        14      LOAD_CLOSURE                    0: self
                        16      BUILD_TUPLE                     1
                        18      LOAD_CONST                      2: <CODE> <lambda>
                        20      LOAD_CONST                      3: '_Unparser.visit_Nonlocal.<locals>.<lambda>'
                        22      MAKE_FUNCTION                   8
                        24      LOAD_DEREF                      0: self
                        26      LOAD_ATTR                       2: write
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       3: names
                        32      CALL_METHOD                     3
                        34      POP_TOP                         
                        36      LOAD_CONST                      0: None
                        38      RETURN_VALUE                    
                '_Unparser.visit_Nonlocal'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Await
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'require_parens'
                        '_Precedence'
                        'AWAIT'
                        'write'
                        'value'
                        'set_precedence'
                        'ATOM'
                        'traverse'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'await'
                        ' '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: require_parens
                        4       LOAD_GLOBAL                     1: _Precedence
                        6       LOAD_ATTR                       2: AWAIT
                        8       LOAD_FAST                       1: node
                        10      CALL_METHOD                     2
                        12      SETUP_WITH                      44 (to 102)
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     3: write
                        20      LOAD_CONST                      1: 'await'
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       1: node
                        28      LOAD_ATTR                       4: value
                        30      POP_JUMP_IF_FALSE               43 (to 86)
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     3: write
                        36      LOAD_CONST                      2: ' '
                        38      CALL_METHOD                     1
                        40      POP_TOP                         
                        42      LOAD_FAST                       0: self
                        44      LOAD_METHOD                     5: set_precedence
                        46      LOAD_GLOBAL                     1: _Precedence
                        48      LOAD_ATTR                       6: ATOM
                        50      LOAD_FAST                       1: node
                        52      LOAD_ATTR                       4: value
                        54      CALL_METHOD                     2
                        56      POP_TOP                         
                        58      LOAD_FAST                       0: self
                        60      LOAD_METHOD                     7: traverse
                        62      LOAD_FAST                       1: node
                        64      LOAD_ATTR                       4: value
                        66      CALL_METHOD                     1
                        68      POP_TOP                         
                        70      POP_BLOCK                       
                        72      LOAD_CONST                      0: None
                        74      DUP_TOP                         
                        76      DUP_TOP                         
                        78      CALL_FUNCTION                   3
                        80      POP_TOP                         
                        82      LOAD_CONST                      0: None
                        84      RETURN_VALUE                    
                        86      POP_BLOCK                       
                        88      LOAD_CONST                      0: None
                        90      DUP_TOP                         
                        92      DUP_TOP                         
                        94      CALL_FUNCTION                   3
                        96      POP_TOP                         
                        98      LOAD_CONST                      0: None
                        100     RETURN_VALUE                    
                        102     WITH_EXCEPT_START               
                        104     POP_JUMP_IF_TRUE                54 (to 108)
                        106     RERAISE                         1
                        108     POP_TOP                         
                        110     POP_TOP                         
                        112     POP_TOP                         
                        114     POP_EXCEPT                      
                        116     POP_TOP                         
                        118     LOAD_CONST                      0: None
                        120     RETURN_VALUE                    
                '_Unparser.visit_Await'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Yield
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'require_parens'
                        '_Precedence'
                        'YIELD'
                        'write'
                        'value'
                        'set_precedence'
                        'ATOM'
                        'traverse'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'yield'
                        ' '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: require_parens
                        4       LOAD_GLOBAL                     1: _Precedence
                        6       LOAD_ATTR                       2: YIELD
                        8       LOAD_FAST                       1: node
                        10      CALL_METHOD                     2
                        12      SETUP_WITH                      44 (to 102)
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     3: write
                        20      LOAD_CONST                      1: 'yield'
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       1: node
                        28      LOAD_ATTR                       4: value
                        30      POP_JUMP_IF_FALSE               43 (to 86)
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     3: write
                        36      LOAD_CONST                      2: ' '
                        38      CALL_METHOD                     1
                        40      POP_TOP                         
                        42      LOAD_FAST                       0: self
                        44      LOAD_METHOD                     5: set_precedence
                        46      LOAD_GLOBAL                     1: _Precedence
                        48      LOAD_ATTR                       6: ATOM
                        50      LOAD_FAST                       1: node
                        52      LOAD_ATTR                       4: value
                        54      CALL_METHOD                     2
                        56      POP_TOP                         
                        58      LOAD_FAST                       0: self
                        60      LOAD_METHOD                     7: traverse
                        62      LOAD_FAST                       1: node
                        64      LOAD_ATTR                       4: value
                        66      CALL_METHOD                     1
                        68      POP_TOP                         
                        70      POP_BLOCK                       
                        72      LOAD_CONST                      0: None
                        74      DUP_TOP                         
                        76      DUP_TOP                         
                        78      CALL_FUNCTION                   3
                        80      POP_TOP                         
                        82      LOAD_CONST                      0: None
                        84      RETURN_VALUE                    
                        86      POP_BLOCK                       
                        88      LOAD_CONST                      0: None
                        90      DUP_TOP                         
                        92      DUP_TOP                         
                        94      CALL_FUNCTION                   3
                        96      POP_TOP                         
                        98      LOAD_CONST                      0: None
                        100     RETURN_VALUE                    
                        102     WITH_EXCEPT_START               
                        104     POP_JUMP_IF_TRUE                54 (to 108)
                        106     RERAISE                         1
                        108     POP_TOP                         
                        110     POP_TOP                         
                        112     POP_TOP                         
                        114     POP_EXCEPT                      
                        116     POP_TOP                         
                        118     LOAD_CONST                      0: None
                        120     RETURN_VALUE                    
                '_Unparser.visit_Yield'
                [Code]
                    File Name: ast.py
                    Object Name: visit_YieldFrom
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'require_parens'
                        '_Precedence'
                        'YIELD'
                        'write'
                        'value'
                        'ValueError'
                        'set_precedence'
                        'ATOM'
                        'traverse'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'yield from '
                        "Node can't be used without a value attribute."
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: require_parens
                        4       LOAD_GLOBAL                     1: _Precedence
                        6       LOAD_ATTR                       2: YIELD
                        8       LOAD_FAST                       1: node
                        10      CALL_METHOD                     2
                        12      SETUP_WITH                      35 (to 84)
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     3: write
                        20      LOAD_CONST                      1: 'yield from '
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       1: node
                        28      LOAD_ATTR                       4: value
                        30      POP_JUMP_IF_TRUE                20 (to 40)
                        32      LOAD_GLOBAL                     5: ValueError
                        34      LOAD_CONST                      2: "Node can't be used without a value attribute."
                        36      CALL_FUNCTION                   1
                        38      RAISE_VARARGS                   1
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     6: set_precedence
                        44      LOAD_GLOBAL                     1: _Precedence
                        46      LOAD_ATTR                       7: ATOM
                        48      LOAD_FAST                       1: node
                        50      LOAD_ATTR                       4: value
                        52      CALL_METHOD                     2
                        54      POP_TOP                         
                        56      LOAD_FAST                       0: self
                        58      LOAD_METHOD                     8: traverse
                        60      LOAD_FAST                       1: node
                        62      LOAD_ATTR                       4: value
                        64      CALL_METHOD                     1
                        66      POP_TOP                         
                        68      POP_BLOCK                       
                        70      LOAD_CONST                      0: None
                        72      DUP_TOP                         
                        74      DUP_TOP                         
                        76      CALL_FUNCTION                   3
                        78      POP_TOP                         
                        80      LOAD_CONST                      0: None
                        82      RETURN_VALUE                    
                        84      WITH_EXCEPT_START               
                        86      POP_JUMP_IF_TRUE                45 (to 90)
                        88      RERAISE                         1
                        90      POP_TOP                         
                        92      POP_TOP                         
                        94      POP_TOP                         
                        96      POP_EXCEPT                      
                        98      POP_TOP                         
                        100     LOAD_CONST                      0: None
                        102     RETURN_VALUE                    
                '_Unparser.visit_YieldFrom'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Raise
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'exc'
                        'cause'
                        'ValueError'
                        'write'
                        'traverse'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'raise'
                        "Node can't use cause without an exception."
                        ' '
                        ' from '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'raise'
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       1: node
                        12      LOAD_ATTR                       1: exc
                        14      POP_JUMP_IF_TRUE                17 (to 34)
                        16      LOAD_FAST                       1: node
                        18      LOAD_ATTR                       2: cause
                        20      POP_JUMP_IF_FALSE               15 (to 30)
                        22      LOAD_GLOBAL                     3: ValueError
                        24      LOAD_CONST                      2: "Node can't use cause without an exception."
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     4: write
                        38      LOAD_CONST                      3: ' '
                        40      CALL_METHOD                     1
                        42      POP_TOP                         
                        44      LOAD_FAST                       0: self
                        46      LOAD_METHOD                     5: traverse
                        48      LOAD_FAST                       1: node
                        50      LOAD_ATTR                       1: exc
                        52      CALL_METHOD                     1
                        54      POP_TOP                         
                        56      LOAD_FAST                       1: node
                        58      LOAD_ATTR                       2: cause
                        60      POP_JUMP_IF_FALSE               44 (to 88)
                        62      LOAD_FAST                       0: self
                        64      LOAD_METHOD                     4: write
                        66      LOAD_CONST                      4: ' from '
                        68      CALL_METHOD                     1
                        70      POP_TOP                         
                        72      LOAD_FAST                       0: self
                        74      LOAD_METHOD                     5: traverse
                        76      LOAD_FAST                       1: node
                        78      LOAD_ATTR                       2: cause
                        80      CALL_METHOD                     1
                        82      POP_TOP                         
                        84      LOAD_CONST                      0: None
                        86      RETURN_VALUE                    
                        88      LOAD_CONST                      0: None
                        90      RETURN_VALUE                    
                '_Unparser.visit_Raise'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Try
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'block'
                        'traverse'
                        'body'
                        'handlers'
                        'orelse'
                        'finalbody'
                    [Var Names]
                        'self'
                        'node'
                        'ex'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'try'
                        'else'
                        'finally'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'try'
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: block
                        14      CALL_METHOD                     0
                        16      SETUP_WITH                      14 (to 46)
                        18      POP_TOP                         
                        20      LOAD_FAST                       0: self
                        22      LOAD_METHOD                     2: traverse
                        24      LOAD_FAST                       1: node
                        26      LOAD_ATTR                       3: body
                        28      CALL_METHOD                     1
                        30      POP_TOP                         
                        32      POP_BLOCK                       
                        34      LOAD_CONST                      0: None
                        36      DUP_TOP                         
                        38      DUP_TOP                         
                        40      CALL_FUNCTION                   3
                        42      POP_TOP                         
                        44      JUMP_FORWARD                    8 (to 62)
                        46      WITH_EXCEPT_START               
                        48      POP_JUMP_IF_TRUE                26 (to 52)
                        50      RERAISE                         1
                        52      POP_TOP                         
                        54      POP_TOP                         
                        56      POP_TOP                         
                        58      POP_EXCEPT                      
                        60      POP_TOP                         
                        62      LOAD_FAST                       1: node
                        64      LOAD_ATTR                       4: handlers
                        66      GET_ITER                        
                        68      FOR_ITER                        7 (to 84)
                        70      STORE_FAST                      2: ex
                        72      LOAD_FAST                       0: self
                        74      LOAD_METHOD                     2: traverse
                        76      LOAD_FAST                       2: ex
                        78      CALL_METHOD                     1
                        80      POP_TOP                         
                        82      JUMP_ABSOLUTE                   34 (to 68)
                        84      LOAD_FAST                       1: node
                        86      LOAD_ATTR                       5: orelse
                        88      POP_JUMP_IF_FALSE               76 (to 152)
                        90      LOAD_FAST                       0: self
                        92      LOAD_METHOD                     0: fill
                        94      LOAD_CONST                      2: 'else'
                        96      CALL_METHOD                     1
                        98      POP_TOP                         
                        100     LOAD_FAST                       0: self
                        102     LOAD_METHOD                     1: block
                        104     CALL_METHOD                     0
                        106     SETUP_WITH                      14 (to 136)
                        108     POP_TOP                         
                        110     LOAD_FAST                       0: self
                        112     LOAD_METHOD                     2: traverse
                        114     LOAD_FAST                       1: node
                        116     LOAD_ATTR                       5: orelse
                        118     CALL_METHOD                     1
                        120     POP_TOP                         
                        122     POP_BLOCK                       
                        124     LOAD_CONST                      0: None
                        126     DUP_TOP                         
                        128     DUP_TOP                         
                        130     CALL_FUNCTION                   3
                        132     POP_TOP                         
                        134     JUMP_FORWARD                    8 (to 152)
                        136     WITH_EXCEPT_START               
                        138     POP_JUMP_IF_TRUE                71 (to 142)
                        140     RERAISE                         1
                        142     POP_TOP                         
                        144     POP_TOP                         
                        146     POP_TOP                         
                        148     POP_EXCEPT                      
                        150     POP_TOP                         
                        152     LOAD_FAST                       1: node
                        154     LOAD_ATTR                       6: finalbody
                        156     POP_JUMP_IF_FALSE               113 (to 226)
                        158     LOAD_FAST                       0: self
                        160     LOAD_METHOD                     0: fill
                        162     LOAD_CONST                      3: 'finally'
                        164     CALL_METHOD                     1
                        166     POP_TOP                         
                        168     LOAD_FAST                       0: self
                        170     LOAD_METHOD                     1: block
                        172     CALL_METHOD                     0
                        174     SETUP_WITH                      15 (to 206)
                        176     POP_TOP                         
                        178     LOAD_FAST                       0: self
                        180     LOAD_METHOD                     2: traverse
                        182     LOAD_FAST                       1: node
                        184     LOAD_ATTR                       6: finalbody
                        186     CALL_METHOD                     1
                        188     POP_TOP                         
                        190     POP_BLOCK                       
                        192     LOAD_CONST                      0: None
                        194     DUP_TOP                         
                        196     DUP_TOP                         
                        198     CALL_FUNCTION                   3
                        200     POP_TOP                         
                        202     LOAD_CONST                      0: None
                        204     RETURN_VALUE                    
                        206     WITH_EXCEPT_START               
                        208     POP_JUMP_IF_TRUE                106 (to 212)
                        210     RERAISE                         1
                        212     POP_TOP                         
                        214     POP_TOP                         
                        216     POP_TOP                         
                        218     POP_EXCEPT                      
                        220     POP_TOP                         
                        222     LOAD_CONST                      0: None
                        224     RETURN_VALUE                    
                        226     LOAD_CONST                      0: None
                        228     RETURN_VALUE                    
                '_Unparser.visit_Try'
                [Code]
                    File Name: ast.py
                    Object Name: visit_ExceptHandler
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'type'
                        'write'
                        'traverse'
                        'name'
                        'block'
                        'body'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'except'
                        ' '
                        ' as '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'except'
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       1: node
                        12      LOAD_ATTR                       1: type
                        14      POP_JUMP_IF_FALSE               19 (to 38)
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     2: write
                        20      LOAD_CONST                      2: ' '
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     3: traverse
                        30      LOAD_FAST                       1: node
                        32      LOAD_ATTR                       1: type
                        34      CALL_METHOD                     1
                        36      POP_TOP                         
                        38      LOAD_FAST                       1: node
                        40      LOAD_ATTR                       4: name
                        42      POP_JUMP_IF_FALSE               33 (to 66)
                        44      LOAD_FAST                       0: self
                        46      LOAD_METHOD                     2: write
                        48      LOAD_CONST                      3: ' as '
                        50      CALL_METHOD                     1
                        52      POP_TOP                         
                        54      LOAD_FAST                       0: self
                        56      LOAD_METHOD                     2: write
                        58      LOAD_FAST                       1: node
                        60      LOAD_ATTR                       4: name
                        62      CALL_METHOD                     1
                        64      POP_TOP                         
                        66      LOAD_FAST                       0: self
                        68      LOAD_METHOD                     5: block
                        70      CALL_METHOD                     0
                        72      SETUP_WITH                      15 (to 104)
                        74      POP_TOP                         
                        76      LOAD_FAST                       0: self
                        78      LOAD_METHOD                     3: traverse
                        80      LOAD_FAST                       1: node
                        82      LOAD_ATTR                       6: body
                        84      CALL_METHOD                     1
                        86      POP_TOP                         
                        88      POP_BLOCK                       
                        90      LOAD_CONST                      0: None
                        92      DUP_TOP                         
                        94      DUP_TOP                         
                        96      CALL_FUNCTION                   3
                        98      POP_TOP                         
                        100     LOAD_CONST                      0: None
                        102     RETURN_VALUE                    
                        104     WITH_EXCEPT_START               
                        106     POP_JUMP_IF_TRUE                55 (to 110)
                        108     RERAISE                         1
                        110     POP_TOP                         
                        112     POP_TOP                         
                        114     POP_TOP                         
                        116     POP_EXCEPT                      
                        118     POP_TOP                         
                        120     LOAD_CONST                      0: None
                        122     RETURN_VALUE                    
                '_Unparser.visit_ExceptHandler'
                [Code]
                    File Name: ast.py
                    Object Name: visit_ClassDef
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'maybe_newline'
                        'decorator_list'
                        'fill'
                        'traverse'
                        'name'
                        'delimit_if'
                        'bases'
                        'keywords'
                        'write'
                        'block'
                        '_write_docstring_and_traverse_body'
                    [Var Names]
                        'self'
                        'node'
                        'deco'
                        'comma'
                        'e'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '@'
                        'class '
                        '('
                        ')'
                        (
                            'condition'
                        )
                        False
                        ', '
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: maybe_newline
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       1: node
                        10      LOAD_ATTR                       1: decorator_list
                        12      GET_ITER                        
                        14      FOR_ITER                        12 (to 40)
                        16      STORE_FAST                      2: deco
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     2: fill
                        22      LOAD_CONST                      1: '@'
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     3: traverse
                        32      LOAD_FAST                       2: deco
                        34      CALL_METHOD                     1
                        36      POP_TOP                         
                        38      JUMP_ABSOLUTE                   7 (to 14)
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     2: fill
                        44      LOAD_CONST                      2: 'class '
                        46      LOAD_FAST                       1: node
                        48      LOAD_ATTR                       4: name
                        50      BINARY_ADD                      
                        52      CALL_METHOD                     1
                        54      POP_TOP                         
                        56      LOAD_FAST                       0: self
                        58      LOAD_ATTR                       5: delimit_if
                        60      LOAD_CONST                      3: '('
                        62      LOAD_CONST                      4: ')'
                        64      LOAD_FAST                       1: node
                        66      LOAD_ATTR                       6: bases
                        68      JUMP_IF_TRUE_OR_POP             37 (to 74)
                        70      LOAD_FAST                       1: node
                        72      LOAD_ATTR                       7: keywords
                        74      LOAD_CONST                      5: ('condition',)
                        76      CALL_FUNCTION_KW                3
                        78      SETUP_WITH                      52 (to 184)
                        80      POP_TOP                         
                        82      LOAD_CONST                      6: False
                        84      STORE_FAST                      3: comma
                        86      LOAD_FAST                       1: node
                        88      LOAD_ATTR                       6: bases
                        90      GET_ITER                        
                        92      FOR_ITER                        17 (to 128)
                        94      STORE_FAST                      4: e
                        96      LOAD_FAST                       3: comma
                        98      POP_JUMP_IF_FALSE               56 (to 112)
                        100     LOAD_FAST                       0: self
                        102     LOAD_METHOD                     8: write
                        104     LOAD_CONST                      7: ', '
                        106     CALL_METHOD                     1
                        108     POP_TOP                         
                        110     JUMP_FORWARD                    2 (to 116)
                        112     LOAD_CONST                      8: True
                        114     STORE_FAST                      3: comma
                        116     LOAD_FAST                       0: self
                        118     LOAD_METHOD                     3: traverse
                        120     LOAD_FAST                       4: e
                        122     CALL_METHOD                     1
                        124     POP_TOP                         
                        126     JUMP_ABSOLUTE                   46 (to 92)
                        128     LOAD_FAST                       1: node
                        130     LOAD_ATTR                       7: keywords
                        132     GET_ITER                        
                        134     FOR_ITER                        17 (to 170)
                        136     STORE_FAST                      4: e
                        138     LOAD_FAST                       3: comma
                        140     POP_JUMP_IF_FALSE               77 (to 154)
                        142     LOAD_FAST                       0: self
                        144     LOAD_METHOD                     8: write
                        146     LOAD_CONST                      7: ', '
                        148     CALL_METHOD                     1
                        150     POP_TOP                         
                        152     JUMP_FORWARD                    2 (to 158)
                        154     LOAD_CONST                      8: True
                        156     STORE_FAST                      3: comma
                        158     LOAD_FAST                       0: self
                        160     LOAD_METHOD                     3: traverse
                        162     LOAD_FAST                       4: e
                        164     CALL_METHOD                     1
                        166     POP_TOP                         
                        168     JUMP_ABSOLUTE                   67 (to 134)
                        170     POP_BLOCK                       
                        172     LOAD_CONST                      0: None
                        174     DUP_TOP                         
                        176     DUP_TOP                         
                        178     CALL_FUNCTION                   3
                        180     POP_TOP                         
                        182     JUMP_FORWARD                    8 (to 200)
                        184     WITH_EXCEPT_START               
                        186     POP_JUMP_IF_TRUE                95 (to 190)
                        188     RERAISE                         1
                        190     POP_TOP                         
                        192     POP_TOP                         
                        194     POP_TOP                         
                        196     POP_EXCEPT                      
                        198     POP_TOP                         
                        200     LOAD_FAST                       0: self
                        202     LOAD_METHOD                     9: block
                        204     CALL_METHOD                     0
                        206     SETUP_WITH                      14 (to 236)
                        208     POP_TOP                         
                        210     LOAD_FAST                       0: self
                        212     LOAD_METHOD                     10: _write_docstring_and_traverse_body
                        214     LOAD_FAST                       1: node
                        216     CALL_METHOD                     1
                        218     POP_TOP                         
                        220     POP_BLOCK                       
                        222     LOAD_CONST                      0: None
                        224     DUP_TOP                         
                        226     DUP_TOP                         
                        228     CALL_FUNCTION                   3
                        230     POP_TOP                         
                        232     LOAD_CONST                      0: None
                        234     RETURN_VALUE                    
                        236     WITH_EXCEPT_START               
                        238     POP_JUMP_IF_TRUE                121 (to 242)
                        240     RERAISE                         1
                        242     POP_TOP                         
                        244     POP_TOP                         
                        246     POP_TOP                         
                        248     POP_EXCEPT                      
                        250     POP_TOP                         
                        252     LOAD_CONST                      0: None
                        254     RETURN_VALUE                    
                '_Unparser.visit_ClassDef'
                [Code]
                    File Name: ast.py
                    Object Name: visit_FunctionDef
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_function_helper'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'def'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _function_helper
                        4       LOAD_FAST                       1: node
                        6       LOAD_CONST                      1: 'def'
                        8       CALL_METHOD                     2
                        10      POP_TOP                         
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                '_Unparser.visit_FunctionDef'
                [Code]
                    File Name: ast.py
                    Object Name: visit_AsyncFunctionDef
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_function_helper'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'async def'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _function_helper
                        4       LOAD_FAST                       1: node
                        6       LOAD_CONST                      1: 'async def'
                        8       CALL_METHOD                     2
                        10      POP_TOP                         
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                '_Unparser.visit_AsyncFunctionDef'
                [Code]
                    File Name: ast.py
                    Object Name: _function_helper
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'maybe_newline'
                        'decorator_list'
                        'fill'
                        'traverse'
                        'name'
                        'delimit'
                        'args'
                        'returns'
                        'write'
                        'block'
                        'get_type_comment'
                        '_write_docstring_and_traverse_body'
                    [Var Names]
                        'self'
                        'node'
                        'fill_suffix'
                        'deco'
                        'def_str'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '@'
                        ' '
                        '('
                        ')'
                        ' -> '
                        (
                            'extra'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: maybe_newline
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       1: node
                        10      LOAD_ATTR                       1: decorator_list
                        12      GET_ITER                        
                        14      FOR_ITER                        12 (to 40)
                        16      STORE_FAST                      3: deco
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     2: fill
                        22      LOAD_CONST                      1: '@'
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     3: traverse
                        32      LOAD_FAST                       3: deco
                        34      CALL_METHOD                     1
                        36      POP_TOP                         
                        38      JUMP_ABSOLUTE                   7 (to 14)
                        40      LOAD_FAST                       2: fill_suffix
                        42      LOAD_CONST                      2: ' '
                        44      BINARY_ADD                      
                        46      LOAD_FAST                       1: node
                        48      LOAD_ATTR                       4: name
                        50      BINARY_ADD                      
                        52      STORE_FAST                      4: def_str
                        54      LOAD_FAST                       0: self
                        56      LOAD_METHOD                     2: fill
                        58      LOAD_FAST                       4: def_str
                        60      CALL_METHOD                     1
                        62      POP_TOP                         
                        64      LOAD_FAST                       0: self
                        66      LOAD_METHOD                     5: delimit
                        68      LOAD_CONST                      3: '('
                        70      LOAD_CONST                      4: ')'
                        72      CALL_METHOD                     2
                        74      SETUP_WITH                      14 (to 104)
                        76      POP_TOP                         
                        78      LOAD_FAST                       0: self
                        80      LOAD_METHOD                     3: traverse
                        82      LOAD_FAST                       1: node
                        84      LOAD_ATTR                       6: args
                        86      CALL_METHOD                     1
                        88      POP_TOP                         
                        90      POP_BLOCK                       
                        92      LOAD_CONST                      0: None
                        94      DUP_TOP                         
                        96      DUP_TOP                         
                        98      CALL_FUNCTION                   3
                        100     POP_TOP                         
                        102     JUMP_FORWARD                    8 (to 120)
                        104     WITH_EXCEPT_START               
                        106     POP_JUMP_IF_TRUE                55 (to 110)
                        108     RERAISE                         1
                        110     POP_TOP                         
                        112     POP_TOP                         
                        114     POP_TOP                         
                        116     POP_EXCEPT                      
                        118     POP_TOP                         
                        120     LOAD_FAST                       1: node
                        122     LOAD_ATTR                       7: returns
                        124     POP_JUMP_IF_FALSE               74 (to 148)
                        126     LOAD_FAST                       0: self
                        128     LOAD_METHOD                     8: write
                        130     LOAD_CONST                      5: ' -> '
                        132     CALL_METHOD                     1
                        134     POP_TOP                         
                        136     LOAD_FAST                       0: self
                        138     LOAD_METHOD                     3: traverse
                        140     LOAD_FAST                       1: node
                        142     LOAD_ATTR                       7: returns
                        144     CALL_METHOD                     1
                        146     POP_TOP                         
                        148     LOAD_FAST                       0: self
                        150     LOAD_ATTR                       9: block
                        152     LOAD_FAST                       0: self
                        154     LOAD_METHOD                     10: get_type_comment
                        156     LOAD_FAST                       1: node
                        158     CALL_METHOD                     1
                        160     LOAD_CONST                      6: ('extra',)
                        162     CALL_FUNCTION_KW                1
                        164     SETUP_WITH                      14 (to 194)
                        166     POP_TOP                         
                        168     LOAD_FAST                       0: self
                        170     LOAD_METHOD                     11: _write_docstring_and_traverse_body
                        172     LOAD_FAST                       1: node
                        174     CALL_METHOD                     1
                        176     POP_TOP                         
                        178     POP_BLOCK                       
                        180     LOAD_CONST                      0: None
                        182     DUP_TOP                         
                        184     DUP_TOP                         
                        186     CALL_FUNCTION                   3
                        188     POP_TOP                         
                        190     LOAD_CONST                      0: None
                        192     RETURN_VALUE                    
                        194     WITH_EXCEPT_START               
                        196     POP_JUMP_IF_TRUE                100 (to 200)
                        198     RERAISE                         1
                        200     POP_TOP                         
                        202     POP_TOP                         
                        204     POP_TOP                         
                        206     POP_EXCEPT                      
                        208     POP_TOP                         
                        210     LOAD_CONST                      0: None
                        212     RETURN_VALUE                    
                '_Unparser._function_helper'
                [Code]
                    File Name: ast.py
                    Object Name: visit_For
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_for_helper'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'for '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _for_helper
                        4       LOAD_CONST                      1: 'for '
                        6       LOAD_FAST                       1: node
                        8       CALL_METHOD                     2
                        10      POP_TOP                         
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                '_Unparser.visit_For'
                [Code]
                    File Name: ast.py
                    Object Name: visit_AsyncFor
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_for_helper'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'async for '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _for_helper
                        4       LOAD_CONST                      1: 'async for '
                        6       LOAD_FAST                       1: node
                        8       CALL_METHOD                     2
                        10      POP_TOP                         
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                '_Unparser.visit_AsyncFor'
                [Code]
                    File Name: ast.py
                    Object Name: _for_helper
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'traverse'
                        'target'
                        'write'
                        'iter'
                        'block'
                        'get_type_comment'
                        'body'
                        'orelse'
                    [Var Names]
                        'self'
                        'fill'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' in '
                        (
                            'extra'
                        )
                        'else'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_FAST                       1: fill
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: traverse
                        14      LOAD_FAST                       2: node
                        16      LOAD_ATTR                       2: target
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_FAST                       0: self
                        24      LOAD_METHOD                     3: write
                        26      LOAD_CONST                      1: ' in '
                        28      CALL_METHOD                     1
                        30      POP_TOP                         
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     1: traverse
                        36      LOAD_FAST                       2: node
                        38      LOAD_ATTR                       4: iter
                        40      CALL_METHOD                     1
                        42      POP_TOP                         
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       5: block
                        48      LOAD_FAST                       0: self
                        50      LOAD_METHOD                     6: get_type_comment
                        52      LOAD_FAST                       2: node
                        54      CALL_METHOD                     1
                        56      LOAD_CONST                      2: ('extra',)
                        58      CALL_FUNCTION_KW                1
                        60      SETUP_WITH                      14 (to 90)
                        62      POP_TOP                         
                        64      LOAD_FAST                       0: self
                        66      LOAD_METHOD                     1: traverse
                        68      LOAD_FAST                       2: node
                        70      LOAD_ATTR                       7: body
                        72      CALL_METHOD                     1
                        74      POP_TOP                         
                        76      POP_BLOCK                       
                        78      LOAD_CONST                      0: None
                        80      DUP_TOP                         
                        82      DUP_TOP                         
                        84      CALL_FUNCTION                   3
                        86      POP_TOP                         
                        88      JUMP_FORWARD                    8 (to 106)
                        90      WITH_EXCEPT_START               
                        92      POP_JUMP_IF_TRUE                48 (to 96)
                        94      RERAISE                         1
                        96      POP_TOP                         
                        98      POP_TOP                         
                        100     POP_TOP                         
                        102     POP_EXCEPT                      
                        104     POP_TOP                         
                        106     LOAD_FAST                       2: node
                        108     LOAD_ATTR                       8: orelse
                        110     POP_JUMP_IF_FALSE               90 (to 180)
                        112     LOAD_FAST                       0: self
                        114     LOAD_METHOD                     0: fill
                        116     LOAD_CONST                      3: 'else'
                        118     CALL_METHOD                     1
                        120     POP_TOP                         
                        122     LOAD_FAST                       0: self
                        124     LOAD_METHOD                     5: block
                        126     CALL_METHOD                     0
                        128     SETUP_WITH                      15 (to 160)
                        130     POP_TOP                         
                        132     LOAD_FAST                       0: self
                        134     LOAD_METHOD                     1: traverse
                        136     LOAD_FAST                       2: node
                        138     LOAD_ATTR                       8: orelse
                        140     CALL_METHOD                     1
                        142     POP_TOP                         
                        144     POP_BLOCK                       
                        146     LOAD_CONST                      0: None
                        148     DUP_TOP                         
                        150     DUP_TOP                         
                        152     CALL_FUNCTION                   3
                        154     POP_TOP                         
                        156     LOAD_CONST                      0: None
                        158     RETURN_VALUE                    
                        160     WITH_EXCEPT_START               
                        162     POP_JUMP_IF_TRUE                83 (to 166)
                        164     RERAISE                         1
                        166     POP_TOP                         
                        168     POP_TOP                         
                        170     POP_TOP                         
                        172     POP_EXCEPT                      
                        174     POP_TOP                         
                        176     LOAD_CONST                      0: None
                        178     RETURN_VALUE                    
                        180     LOAD_CONST                      0: None
                        182     RETURN_VALUE                    
                '_Unparser._for_helper'
                [Code]
                    File Name: ast.py
                    Object Name: visit_If
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'traverse'
                        'test'
                        'block'
                        'body'
                        'orelse'
                        'len'
                        'isinstance'
                        'If'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'if '
                        1
                        0
                        'elif '
                        'else'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'if '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: traverse
                        14      LOAD_FAST                       1: node
                        16      LOAD_ATTR                       2: test
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_FAST                       0: self
                        24      LOAD_METHOD                     3: block
                        26      CALL_METHOD                     0
                        28      SETUP_WITH                      14 (to 58)
                        30      POP_TOP                         
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     1: traverse
                        36      LOAD_FAST                       1: node
                        38      LOAD_ATTR                       4: body
                        40      CALL_METHOD                     1
                        42      POP_TOP                         
                        44      POP_BLOCK                       
                        46      LOAD_CONST                      0: None
                        48      DUP_TOP                         
                        50      DUP_TOP                         
                        52      CALL_FUNCTION                   3
                        54      POP_TOP                         
                        56      JUMP_FORWARD                    8 (to 74)
                        58      WITH_EXCEPT_START               
                        60      POP_JUMP_IF_TRUE                32 (to 64)
                        62      RERAISE                         1
                        64      POP_TOP                         
                        66      POP_TOP                         
                        68      POP_TOP                         
                        70      POP_EXCEPT                      
                        72      POP_TOP                         
                        74      LOAD_FAST                       1: node
                        76      LOAD_ATTR                       5: orelse
                        78      POP_JUMP_IF_FALSE               115 (to 230)
                        80      LOAD_GLOBAL                     6: len
                        82      LOAD_FAST                       1: node
                        84      LOAD_ATTR                       5: orelse
                        86      CALL_FUNCTION                   1
                        88      LOAD_CONST                      2: 1
                        90      COMPARE_OP                      2 (==)
                        92      POP_JUMP_IF_FALSE               115 (to 230)
                        94      LOAD_GLOBAL                     7: isinstance
                        96      LOAD_FAST                       1: node
                        98      LOAD_ATTR                       5: orelse
                        100     LOAD_CONST                      3: 0
                        102     BINARY_SUBSCR                   
                        104     LOAD_GLOBAL                     8: If
                        106     CALL_FUNCTION                   2
                        108     POP_JUMP_IF_FALSE               115 (to 230)
                        110     LOAD_FAST                       1: node
                        112     LOAD_ATTR                       5: orelse
                        114     LOAD_CONST                      3: 0
                        116     BINARY_SUBSCR                   
                        118     STORE_FAST                      1: node
                        120     LOAD_FAST                       0: self
                        122     LOAD_METHOD                     0: fill
                        124     LOAD_CONST                      4: 'elif '
                        126     CALL_METHOD                     1
                        128     POP_TOP                         
                        130     LOAD_FAST                       0: self
                        132     LOAD_METHOD                     1: traverse
                        134     LOAD_FAST                       1: node
                        136     LOAD_ATTR                       2: test
                        138     CALL_METHOD                     1
                        140     POP_TOP                         
                        142     LOAD_FAST                       0: self
                        144     LOAD_METHOD                     3: block
                        146     CALL_METHOD                     0
                        148     SETUP_WITH                      14 (to 178)
                        150     POP_TOP                         
                        152     LOAD_FAST                       0: self
                        154     LOAD_METHOD                     1: traverse
                        156     LOAD_FAST                       1: node
                        158     LOAD_ATTR                       4: body
                        160     CALL_METHOD                     1
                        162     POP_TOP                         
                        164     POP_BLOCK                       
                        166     LOAD_CONST                      0: None
                        168     DUP_TOP                         
                        170     DUP_TOP                         
                        172     CALL_FUNCTION                   3
                        174     POP_TOP                         
                        176     JUMP_FORWARD                    8 (to 194)
                        178     WITH_EXCEPT_START               
                        180     POP_JUMP_IF_TRUE                92 (to 184)
                        182     RERAISE                         1
                        184     POP_TOP                         
                        186     POP_TOP                         
                        188     POP_TOP                         
                        190     POP_EXCEPT                      
                        192     POP_TOP                         
                        194     LOAD_FAST                       1: node
                        196     LOAD_ATTR                       5: orelse
                        198     POP_JUMP_IF_FALSE               115 (to 230)
                        200     LOAD_GLOBAL                     6: len
                        202     LOAD_FAST                       1: node
                        204     LOAD_ATTR                       5: orelse
                        206     CALL_FUNCTION                   1
                        208     LOAD_CONST                      2: 1
                        210     COMPARE_OP                      2 (==)
                        212     POP_JUMP_IF_FALSE               115 (to 230)
                        214     LOAD_GLOBAL                     7: isinstance
                        216     LOAD_FAST                       1: node
                        218     LOAD_ATTR                       5: orelse
                        220     LOAD_CONST                      3: 0
                        222     BINARY_SUBSCR                   
                        224     LOAD_GLOBAL                     8: If
                        226     CALL_FUNCTION                   2
                        228     POP_JUMP_IF_TRUE                55 (to 110)
                        230     LOAD_FAST                       1: node
                        232     LOAD_ATTR                       5: orelse
                        234     POP_JUMP_IF_FALSE               152 (to 304)
                        236     LOAD_FAST                       0: self
                        238     LOAD_METHOD                     0: fill
                        240     LOAD_CONST                      5: 'else'
                        242     CALL_METHOD                     1
                        244     POP_TOP                         
                        246     LOAD_FAST                       0: self
                        248     LOAD_METHOD                     3: block
                        250     CALL_METHOD                     0
                        252     SETUP_WITH                      15 (to 284)
                        254     POP_TOP                         
                        256     LOAD_FAST                       0: self
                        258     LOAD_METHOD                     1: traverse
                        260     LOAD_FAST                       1: node
                        262     LOAD_ATTR                       5: orelse
                        264     CALL_METHOD                     1
                        266     POP_TOP                         
                        268     POP_BLOCK                       
                        270     LOAD_CONST                      0: None
                        272     DUP_TOP                         
                        274     DUP_TOP                         
                        276     CALL_FUNCTION                   3
                        278     POP_TOP                         
                        280     LOAD_CONST                      0: None
                        282     RETURN_VALUE                    
                        284     WITH_EXCEPT_START               
                        286     POP_JUMP_IF_TRUE                145 (to 290)
                        288     RERAISE                         1
                        290     POP_TOP                         
                        292     POP_TOP                         
                        294     POP_TOP                         
                        296     POP_EXCEPT                      
                        298     POP_TOP                         
                        300     LOAD_CONST                      0: None
                        302     RETURN_VALUE                    
                        304     LOAD_CONST                      0: None
                        306     RETURN_VALUE                    
                '_Unparser.visit_If'
                [Code]
                    File Name: ast.py
                    Object Name: visit_While
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'traverse'
                        'test'
                        'block'
                        'body'
                        'orelse'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'while '
                        'else'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'while '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: traverse
                        14      LOAD_FAST                       1: node
                        16      LOAD_ATTR                       2: test
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_FAST                       0: self
                        24      LOAD_METHOD                     3: block
                        26      CALL_METHOD                     0
                        28      SETUP_WITH                      14 (to 58)
                        30      POP_TOP                         
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     1: traverse
                        36      LOAD_FAST                       1: node
                        38      LOAD_ATTR                       4: body
                        40      CALL_METHOD                     1
                        42      POP_TOP                         
                        44      POP_BLOCK                       
                        46      LOAD_CONST                      0: None
                        48      DUP_TOP                         
                        50      DUP_TOP                         
                        52      CALL_FUNCTION                   3
                        54      POP_TOP                         
                        56      JUMP_FORWARD                    8 (to 74)
                        58      WITH_EXCEPT_START               
                        60      POP_JUMP_IF_TRUE                32 (to 64)
                        62      RERAISE                         1
                        64      POP_TOP                         
                        66      POP_TOP                         
                        68      POP_TOP                         
                        70      POP_EXCEPT                      
                        72      POP_TOP                         
                        74      LOAD_FAST                       1: node
                        76      LOAD_ATTR                       5: orelse
                        78      POP_JUMP_IF_FALSE               74 (to 148)
                        80      LOAD_FAST                       0: self
                        82      LOAD_METHOD                     0: fill
                        84      LOAD_CONST                      2: 'else'
                        86      CALL_METHOD                     1
                        88      POP_TOP                         
                        90      LOAD_FAST                       0: self
                        92      LOAD_METHOD                     3: block
                        94      CALL_METHOD                     0
                        96      SETUP_WITH                      15 (to 128)
                        98      POP_TOP                         
                        100     LOAD_FAST                       0: self
                        102     LOAD_METHOD                     1: traverse
                        104     LOAD_FAST                       1: node
                        106     LOAD_ATTR                       5: orelse
                        108     CALL_METHOD                     1
                        110     POP_TOP                         
                        112     POP_BLOCK                       
                        114     LOAD_CONST                      0: None
                        116     DUP_TOP                         
                        118     DUP_TOP                         
                        120     CALL_FUNCTION                   3
                        122     POP_TOP                         
                        124     LOAD_CONST                      0: None
                        126     RETURN_VALUE                    
                        128     WITH_EXCEPT_START               
                        130     POP_JUMP_IF_TRUE                67 (to 134)
                        132     RERAISE                         1
                        134     POP_TOP                         
                        136     POP_TOP                         
                        138     POP_TOP                         
                        140     POP_EXCEPT                      
                        142     POP_TOP                         
                        144     LOAD_CONST                      0: None
                        146     RETURN_VALUE                    
                        148     LOAD_CONST                      0: None
                        150     RETURN_VALUE                    
                '_Unparser.visit_While'
                [Code]
                    File Name: ast.py
                    Object Name: visit_With
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'fill'
                        'interleave'
                        'traverse'
                        'items'
                        'block'
                        'get_type_comment'
                        'body'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        'with '
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_With.<locals>.<lambda>'
                        (
                            'extra'
                        )
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'with '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_DEREF                      0: self
                        12      LOAD_METHOD                     1: interleave
                        14      LOAD_CLOSURE                    0: self
                        16      BUILD_TUPLE                     1
                        18      LOAD_CONST                      2: <CODE> <lambda>
                        20      LOAD_CONST                      3: '_Unparser.visit_With.<locals>.<lambda>'
                        22      MAKE_FUNCTION                   8
                        24      LOAD_DEREF                      0: self
                        26      LOAD_ATTR                       2: traverse
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       3: items
                        32      CALL_METHOD                     3
                        34      POP_TOP                         
                        36      LOAD_DEREF                      0: self
                        38      LOAD_ATTR                       4: block
                        40      LOAD_DEREF                      0: self
                        42      LOAD_METHOD                     5: get_type_comment
                        44      LOAD_FAST                       1: node
                        46      CALL_METHOD                     1
                        48      LOAD_CONST                      4: ('extra',)
                        50      CALL_FUNCTION_KW                1
                        52      SETUP_WITH                      15 (to 84)
                        54      POP_TOP                         
                        56      LOAD_DEREF                      0: self
                        58      LOAD_METHOD                     2: traverse
                        60      LOAD_FAST                       1: node
                        62      LOAD_ATTR                       6: body
                        64      CALL_METHOD                     1
                        66      POP_TOP                         
                        68      POP_BLOCK                       
                        70      LOAD_CONST                      0: None
                        72      DUP_TOP                         
                        74      DUP_TOP                         
                        76      CALL_FUNCTION                   3
                        78      POP_TOP                         
                        80      LOAD_CONST                      0: None
                        82      RETURN_VALUE                    
                        84      WITH_EXCEPT_START               
                        86      POP_JUMP_IF_TRUE                45 (to 90)
                        88      RERAISE                         1
                        90      POP_TOP                         
                        92      POP_TOP                         
                        94      POP_TOP                         
                        96      POP_EXCEPT                      
                        98      POP_TOP                         
                        100     LOAD_CONST                      0: None
                        102     RETURN_VALUE                    
                '_Unparser.visit_With'
                [Code]
                    File Name: ast.py
                    Object Name: visit_AsyncWith
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'fill'
                        'interleave'
                        'traverse'
                        'items'
                        'block'
                        'get_type_comment'
                        'body'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        'async with '
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_AsyncWith.<locals>.<lambda>'
                        (
                            'extra'
                        )
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'async with '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_DEREF                      0: self
                        12      LOAD_METHOD                     1: interleave
                        14      LOAD_CLOSURE                    0: self
                        16      BUILD_TUPLE                     1
                        18      LOAD_CONST                      2: <CODE> <lambda>
                        20      LOAD_CONST                      3: '_Unparser.visit_AsyncWith.<locals>.<lambda>'
                        22      MAKE_FUNCTION                   8
                        24      LOAD_DEREF                      0: self
                        26      LOAD_ATTR                       2: traverse
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       3: items
                        32      CALL_METHOD                     3
                        34      POP_TOP                         
                        36      LOAD_DEREF                      0: self
                        38      LOAD_ATTR                       4: block
                        40      LOAD_DEREF                      0: self
                        42      LOAD_METHOD                     5: get_type_comment
                        44      LOAD_FAST                       1: node
                        46      CALL_METHOD                     1
                        48      LOAD_CONST                      4: ('extra',)
                        50      CALL_FUNCTION_KW                1
                        52      SETUP_WITH                      15 (to 84)
                        54      POP_TOP                         
                        56      LOAD_DEREF                      0: self
                        58      LOAD_METHOD                     2: traverse
                        60      LOAD_FAST                       1: node
                        62      LOAD_ATTR                       6: body
                        64      CALL_METHOD                     1
                        66      POP_TOP                         
                        68      POP_BLOCK                       
                        70      LOAD_CONST                      0: None
                        72      DUP_TOP                         
                        74      DUP_TOP                         
                        76      CALL_FUNCTION                   3
                        78      POP_TOP                         
                        80      LOAD_CONST                      0: None
                        82      RETURN_VALUE                    
                        84      WITH_EXCEPT_START               
                        86      POP_JUMP_IF_TRUE                45 (to 90)
                        88      RERAISE                         1
                        90      POP_TOP                         
                        92      POP_TOP                         
                        94      POP_TOP                         
                        96      POP_EXCEPT                      
                        98      POP_TOP                         
                        100     LOAD_CONST                      0: None
                        102     RETURN_VALUE                    
                '_Unparser.visit_AsyncWith'
                (
                    'quote_types'
                    'escape_special_whitespace'
                )
                [Code]
                    File Name: ast.py
                    Object Name: _str_literal_helper
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 2
                    Locals: 7
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'join'
                        'map'
                        'repr'
                        'next'
                        'sort'
                        'len'
                    [Var Names]
                        'self'
                        'string'
                        'quote_types'
                        'escape_special_whitespace'
                        'escape_char'
                        'possible_quotes'
                        'quote'
                    [Free Vars]
                    [Cell Vars]
                        'escape_special_whitespace'
                        'escaped_string'
                        'string'
                    [Constants]
                        'Helper for writing string literals, minimizing escapes.\n        Returns the tuple (string literal to write, possible quote types).\n        '
                        [Code]
                            File Name: ast.py
                            Object Name: escape_char
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 1
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'isprintable'
                                'encode'
                                'decode'
                            [Var Names]
                                'c'
                            [Free Vars]
                                'escape_special_whitespace'
                            [Cell Vars]
                            [Constants]
                                None
                                '\n\t'
                                '\\'
                                'unicode_escape'
                                'ascii'
                            [Disassembly]
                                0       LOAD_DEREF                      0: escape_special_whitespace
                                2       POP_JUMP_IF_TRUE                8 (to 16)
                                4       LOAD_FAST                       0: c
                                6       LOAD_CONST                      1: '\n\t'
                                8       CONTAINS_OP                     0 (in)
                                10      POP_JUMP_IF_FALSE               8 (to 16)
                                12      LOAD_FAST                       0: c
                                14      RETURN_VALUE                    
                                16      LOAD_FAST                       0: c
                                18      LOAD_CONST                      2: '\\'
                                20      COMPARE_OP                      2 (==)
                                22      POP_JUMP_IF_TRUE                16 (to 32)
                                24      LOAD_FAST                       0: c
                                26      LOAD_METHOD                     0: isprintable
                                28      CALL_METHOD                     0
                                30      POP_JUMP_IF_TRUE                24 (to 48)
                                32      LOAD_FAST                       0: c
                                34      LOAD_METHOD                     1: encode
                                36      LOAD_CONST                      3: 'unicode_escape'
                                38      CALL_METHOD                     1
                                40      LOAD_METHOD                     2: decode
                                42      LOAD_CONST                      4: 'ascii'
                                44      CALL_METHOD                     1
                                46      RETURN_VALUE                    
                                48      LOAD_FAST                       0: c
                                50      RETURN_VALUE                    
                        '_Unparser._str_literal_helper.<locals>.escape_char'
                        ''
                        '\n'
                        [Code]
                            File Name: ast.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                '_MULTI_QUOTES'
                            [Var Names]
                                '.0'
                                'q'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: q
                                8       LOAD_FAST                       1: q
                                10      LOAD_GLOBAL                     0: _MULTI_QUOTES
                                12      CONTAINS_OP                     0 (in)
                                14      POP_JUMP_IF_FALSE               2 (to 4)
                                16      LOAD_FAST                       1: q
                                18      LIST_APPEND                     2
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      RETURN_VALUE                    
                        '_Unparser._str_literal_helper.<locals>.<listcomp>'
                        [Code]
                            File Name: ast.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                            [Var Names]
                                '.0'
                                'q'
                            [Free Vars]
                                'escaped_string'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: q
                                8       LOAD_FAST                       1: q
                                10      LOAD_DEREF                      0: escaped_string
                                12      CONTAINS_OP                     1 (not in)
                                14      POP_JUMP_IF_FALSE               2 (to 4)
                                16      LOAD_FAST                       1: q
                                18      LIST_APPEND                     2
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      RETURN_VALUE                    
                        [Code]
                            File Name: ast.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                            [Var Names]
                                '.0'
                                'q'
                            [Free Vars]
                                'string'
                            [Cell Vars]
                            [Constants]
                                0
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        11 (to 28)
                                6       STORE_FAST                      1: q
                                8       LOAD_DEREF                      0: string
                                10      LOAD_CONST                      0: 0
                                12      BINARY_SUBSCR                   
                                14      LOAD_FAST                       1: q
                                16      CONTAINS_OP                     0 (in)
                                18      POP_JUMP_IF_FALSE               2 (to 4)
                                20      LOAD_FAST                       1: q
                                22      YIELD_VALUE                     
                                24      POP_TOP                         
                                26      JUMP_ABSOLUTE                   2 (to 4)
                                28      LOAD_CONST                      1: None
                                30      RETURN_VALUE                    
                        '_Unparser._str_literal_helper.<locals>.<genexpr>'
                        0
                        1
                        -1
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 1
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                            [Var Names]
                                'q'
                            [Free Vars]
                                'escaped_string'
                            [Cell Vars]
                            [Constants]
                                None
                                0
                                -1
                            [Disassembly]
                                0       LOAD_FAST                       0: q
                                2       LOAD_CONST                      1: 0
                                4       BINARY_SUBSCR                   
                                6       LOAD_DEREF                      0: escaped_string
                                8       LOAD_CONST                      2: -1
                                10      BINARY_SUBSCR                   
                                12      COMPARE_OP                      2 (==)
                                14      RETURN_VALUE                    
                        '_Unparser._str_literal_helper.<locals>.<lambda>'
                        (
                            'key'
                        )
                        3
                        None
                        '\\'
                    [Disassembly]
                        0       LOAD_CLOSURE                    0: escape_special_whitespace
                        2       BUILD_TUPLE                     1
                        4       LOAD_CONST                      1: <CODE> escape_char
                        6       LOAD_CONST                      2: '_Unparser._str_literal_helper.<locals>.escape_char'
                        8       MAKE_FUNCTION                   8
                        10      STORE_FAST                      4: escape_char
                        12      LOAD_CONST                      3: ''
                        14      LOAD_METHOD                     0: join
                        16      LOAD_GLOBAL                     1: map
                        18      LOAD_FAST                       4: escape_char
                        20      LOAD_DEREF                      2: string
                        22      CALL_FUNCTION                   2
                        24      CALL_METHOD                     1
                        26      STORE_DEREF                     1: escaped_string
                        28      LOAD_FAST                       2: quote_types
                        30      STORE_FAST                      5: possible_quotes
                        32      LOAD_CONST                      4: '\n'
                        34      LOAD_DEREF                      1: escaped_string
                        36      CONTAINS_OP                     0 (in)
                        38      POP_JUMP_IF_FALSE               27 (to 54)
                        40      LOAD_CONST                      5: <CODE> <listcomp>
                        42      LOAD_CONST                      6: '_Unparser._str_literal_helper.<locals>.<listcomp>'
                        44      MAKE_FUNCTION                   0
                        46      LOAD_FAST                       5: possible_quotes
                        48      GET_ITER                        
                        50      CALL_FUNCTION                   1
                        52      STORE_FAST                      5: possible_quotes
                        54      LOAD_CLOSURE                    1: escaped_string
                        56      BUILD_TUPLE                     1
                        58      LOAD_CONST                      7: <CODE> <listcomp>
                        60      LOAD_CONST                      6: '_Unparser._str_literal_helper.<locals>.<listcomp>'
                        62      MAKE_FUNCTION                   8
                        64      LOAD_FAST                       5: possible_quotes
                        66      GET_ITER                        
                        68      CALL_FUNCTION                   1
                        70      STORE_FAST                      5: possible_quotes
                        72      LOAD_FAST                       5: possible_quotes
                        74      POP_JUMP_IF_TRUE                65 (to 130)
                        76      LOAD_GLOBAL                     2: repr
                        78      LOAD_DEREF                      2: string
                        80      CALL_FUNCTION                   1
                        82      STORE_DEREF                     2: string
                        84      LOAD_GLOBAL                     3: next
                        86      LOAD_CLOSURE                    2: string
                        88      BUILD_TUPLE                     1
                        90      LOAD_CONST                      8: <CODE> <genexpr>
                        92      LOAD_CONST                      9: '_Unparser._str_literal_helper.<locals>.<genexpr>'
                        94      MAKE_FUNCTION                   8
                        96      LOAD_FAST                       2: quote_types
                        98      GET_ITER                        
                        100     CALL_FUNCTION                   1
                        102     LOAD_DEREF                      2: string
                        104     LOAD_CONST                      10: 0
                        106     BINARY_SUBSCR                   
                        108     CALL_FUNCTION                   2
                        110     STORE_FAST                      6: quote
                        112     LOAD_DEREF                      2: string
                        114     LOAD_CONST                      11: 1
                        116     LOAD_CONST                      12: -1
                        118     BUILD_SLICE                     2
                        120     BINARY_SUBSCR                   
                        122     LOAD_FAST                       6: quote
                        124     BUILD_LIST                      1
                        126     BUILD_TUPLE                     2
                        128     RETURN_VALUE                    
                        130     LOAD_DEREF                      1: escaped_string
                        132     POP_JUMP_IF_FALSE               109 (to 218)
                        134     LOAD_FAST                       5: possible_quotes
                        136     LOAD_ATTR                       4: sort
                        138     LOAD_CLOSURE                    1: escaped_string
                        140     BUILD_TUPLE                     1
                        142     LOAD_CONST                      13: <CODE> <lambda>
                        144     LOAD_CONST                      14: '_Unparser._str_literal_helper.<locals>.<lambda>'
                        146     MAKE_FUNCTION                   8
                        148     LOAD_CONST                      15: ('key',)
                        150     CALL_FUNCTION_KW                1
                        152     POP_TOP                         
                        154     LOAD_FAST                       5: possible_quotes
                        156     LOAD_CONST                      10: 0
                        158     BINARY_SUBSCR                   
                        160     LOAD_CONST                      10: 0
                        162     BINARY_SUBSCR                   
                        164     LOAD_DEREF                      1: escaped_string
                        166     LOAD_CONST                      12: -1
                        168     BINARY_SUBSCR                   
                        170     COMPARE_OP                      2 (==)
                        172     POP_JUMP_IF_FALSE               109 (to 218)
                        174     LOAD_GLOBAL                     5: len
                        176     LOAD_FAST                       5: possible_quotes
                        178     LOAD_CONST                      10: 0
                        180     BINARY_SUBSCR                   
                        182     CALL_FUNCTION                   1
                        184     LOAD_CONST                      16: 3
                        186     COMPARE_OP                      2 (==)
                        188     POP_JUMP_IF_TRUE                97 (to 194)
                        190     LOAD_ASSERTION_ERROR            
                        192     RAISE_VARARGS                   1
                        194     LOAD_DEREF                      1: escaped_string
                        196     LOAD_CONST                      17: None
                        198     LOAD_CONST                      12: -1
                        200     BUILD_SLICE                     2
                        202     BINARY_SUBSCR                   
                        204     LOAD_CONST                      18: '\\'
                        206     BINARY_ADD                      
                        208     LOAD_DEREF                      1: escaped_string
                        210     LOAD_CONST                      12: -1
                        212     BINARY_SUBSCR                   
                        214     BINARY_ADD                      
                        216     STORE_DEREF                     1: escaped_string
                        218     LOAD_DEREF                      1: escaped_string
                        220     LOAD_FAST                       5: possible_quotes
                        222     BUILD_TUPLE                     2
                        224     RETURN_VALUE                    
                '_Unparser._str_literal_helper'
                (
                    'quote_types'
                )
                [Code]
                    File Name: ast.py
                    Object Name: _write_str_avoiding_backslashes
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_str_literal_helper'
                        'write'
                    [Var Names]
                        'self'
                        'string'
                        'quote_types'
                        'quote_type'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Write string literal value with a best effort attempt to avoid backslashes.'
                        (
                            'quote_types'
                        )
                        0
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _str_literal_helper
                        4       LOAD_FAST                       1: string
                        6       LOAD_FAST                       2: quote_types
                        8       LOAD_CONST                      1: ('quote_types',)
                        10      CALL_FUNCTION_KW                2
                        12      UNPACK_SEQUENCE                 2
                        14      STORE_FAST                      1: string
                        16      STORE_FAST                      2: quote_types
                        18      LOAD_FAST                       2: quote_types
                        20      LOAD_CONST                      2: 0
                        22      BINARY_SUBSCR                   
                        24      STORE_FAST                      3: quote_type
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     1: write
                        30      LOAD_FAST                       3: quote_type
                        32      FORMAT_VALUE                    0 (FVC_NONE)
                        34      LOAD_FAST                       1: string
                        36      FORMAT_VALUE                    0 (FVC_NONE)
                        38      LOAD_FAST                       3: quote_type
                        40      FORMAT_VALUE                    0 (FVC_NONE)
                        42      BUILD_STRING                    3
                        44      CALL_METHOD                     1
                        46      POP_TOP                         
                        48      LOAD_CONST                      3: None
                        50      RETURN_VALUE                    
                '_Unparser._write_str_avoiding_backslashes'
                [Code]
                    File Name: ast.py
                    Object Name: visit_JoinedStr
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'write'
                        '_avoid_backslashes'
                        '_fstring_JoinedStr'
                        'buffer_writer'
                        '_write_str_avoiding_backslashes'
                        'buffer'
                        'values'
                        'getattr'
                        'type'
                        '__name__'
                        'append'
                        'isinstance'
                        'Constant'
                        '_ALL_QUOTES'
                        '_str_literal_helper'
                        'join'
                    [Var Names]
                        'self'
                        'node'
                        'buffer'
                        'value'
                        'meth'
                        'new_buffer'
                        'quote_types'
                        'is_constant'
                        'quote_type'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'f'
                        '_fstring_'
                        (
                            'quote_types'
                            'escape_special_whitespace'
                        )
                        ''
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: write
                        4       LOAD_CONST                      1: 'f'
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: _avoid_backslashes
                        14      POP_JUMP_IF_FALSE               23 (to 46)
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     2: _fstring_JoinedStr
                        20      LOAD_FAST                       1: node
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       3: buffer_writer
                        26      CALL_METHOD                     2
                        28      POP_TOP                         
                        30      LOAD_FAST                       0: self
                        32      LOAD_METHOD                     4: _write_str_avoiding_backslashes
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       5: buffer
                        38      CALL_METHOD                     1
                        40      POP_TOP                         
                        42      LOAD_CONST                      0: None
                        44      RETURN_VALUE                    
                        46      BUILD_LIST                      0
                        48      STORE_FAST                      2: buffer
                        50      LOAD_FAST                       1: node
                        52      LOAD_ATTR                       6: values
                        54      GET_ITER                        
                        56      FOR_ITER                        29 (to 116)
                        58      STORE_FAST                      3: value
                        60      LOAD_GLOBAL                     7: getattr
                        62      LOAD_FAST                       0: self
                        64      LOAD_CONST                      2: '_fstring_'
                        66      LOAD_GLOBAL                     8: type
                        68      LOAD_FAST                       3: value
                        70      CALL_FUNCTION                   1
                        72      LOAD_ATTR                       9: __name__
                        74      BINARY_ADD                      
                        76      CALL_FUNCTION                   2
                        78      STORE_FAST                      4: meth
                        80      LOAD_FAST                       4: meth
                        82      LOAD_FAST                       3: value
                        84      LOAD_FAST                       0: self
                        86      LOAD_ATTR                       3: buffer_writer
                        88      CALL_FUNCTION                   2
                        90      POP_TOP                         
                        92      LOAD_FAST                       2: buffer
                        94      LOAD_METHOD                     10: append
                        96      LOAD_FAST                       0: self
                        98      LOAD_ATTR                       5: buffer
                        100     LOAD_GLOBAL                     11: isinstance
                        102     LOAD_FAST                       3: value
                        104     LOAD_GLOBAL                     12: Constant
                        106     CALL_FUNCTION                   2
                        108     BUILD_TUPLE                     2
                        110     CALL_METHOD                     1
                        112     POP_TOP                         
                        114     JUMP_ABSOLUTE                   28 (to 56)
                        116     BUILD_LIST                      0
                        118     STORE_FAST                      5: new_buffer
                        120     LOAD_GLOBAL                     13: _ALL_QUOTES
                        122     STORE_FAST                      6: quote_types
                        124     LOAD_FAST                       2: buffer
                        126     GET_ITER                        
                        128     FOR_ITER                        19 (to 168)
                        130     UNPACK_SEQUENCE                 2
                        132     STORE_FAST                      3: value
                        134     STORE_FAST                      7: is_constant
                        136     LOAD_FAST                       0: self
                        138     LOAD_ATTR                       14: _str_literal_helper
                        140     LOAD_FAST                       3: value
                        142     LOAD_FAST                       6: quote_types
                        144     LOAD_FAST                       7: is_constant
                        146     LOAD_CONST                      3: ('quote_types', 'escape_special_whitespace')
                        148     CALL_FUNCTION_KW                3
                        150     UNPACK_SEQUENCE                 2
                        152     STORE_FAST                      3: value
                        154     STORE_FAST                      6: quote_types
                        156     LOAD_FAST                       5: new_buffer
                        158     LOAD_METHOD                     10: append
                        160     LOAD_FAST                       3: value
                        162     CALL_METHOD                     1
                        164     POP_TOP                         
                        166     JUMP_ABSOLUTE                   64 (to 128)
                        168     LOAD_CONST                      4: ''
                        170     LOAD_METHOD                     15: join
                        172     LOAD_FAST                       5: new_buffer
                        174     CALL_METHOD                     1
                        176     STORE_FAST                      3: value
                        178     LOAD_FAST                       6: quote_types
                        180     LOAD_CONST                      5: 0
                        182     BINARY_SUBSCR                   
                        184     STORE_FAST                      8: quote_type
                        186     LOAD_FAST                       0: self
                        188     LOAD_METHOD                     0: write
                        190     LOAD_FAST                       8: quote_type
                        192     FORMAT_VALUE                    0 (FVC_NONE)
                        194     LOAD_FAST                       3: value
                        196     FORMAT_VALUE                    0 (FVC_NONE)
                        198     LOAD_FAST                       8: quote_type
                        200     FORMAT_VALUE                    0 (FVC_NONE)
                        202     BUILD_STRING                    3
                        204     CALL_METHOD                     1
                        206     POP_TOP                         
                        208     LOAD_CONST                      0: None
                        210     RETURN_VALUE                    
                '_Unparser.visit_JoinedStr'
                [Code]
                    File Name: ast.py
                    Object Name: visit_FormattedValue
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'write'
                        '_fstring_FormattedValue'
                        'buffer_writer'
                        '_write_str_avoiding_backslashes'
                        'buffer'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'f'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: write
                        4       LOAD_CONST                      1: 'f'
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: _fstring_FormattedValue
                        14      LOAD_FAST                       1: node
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       2: buffer_writer
                        20      CALL_METHOD                     2
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     3: _write_str_avoiding_backslashes
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       4: buffer
                        32      CALL_METHOD                     1
                        34      POP_TOP                         
                        36      LOAD_CONST                      0: None
                        38      RETURN_VALUE                    
                '_Unparser.visit_FormattedValue'
                [Code]
                    File Name: ast.py
                    Object Name: _fstring_JoinedStr
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'values'
                        'getattr'
                        'type'
                        '__name__'
                    [Var Names]
                        'self'
                        'node'
                        'write'
                        'value'
                        'meth'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '_fstring_'
                    [Disassembly]
                        0       LOAD_FAST                       1: node
                        2       LOAD_ATTR                       0: values
                        4       GET_ITER                        
                        6       FOR_ITER                        17 (to 42)
                        8       STORE_FAST                      3: value
                        10      LOAD_GLOBAL                     1: getattr
                        12      LOAD_FAST                       0: self
                        14      LOAD_CONST                      1: '_fstring_'
                        16      LOAD_GLOBAL                     2: type
                        18      LOAD_FAST                       3: value
                        20      CALL_FUNCTION                   1
                        22      LOAD_ATTR                       3: __name__
                        24      BINARY_ADD                      
                        26      CALL_FUNCTION                   2
                        28      STORE_FAST                      4: meth
                        30      LOAD_FAST                       4: meth
                        32      LOAD_FAST                       3: value
                        34      LOAD_FAST                       2: write
                        36      CALL_FUNCTION                   2
                        38      POP_TOP                         
                        40      JUMP_ABSOLUTE                   3 (to 6)
                        42      LOAD_CONST                      0: None
                        44      RETURN_VALUE                    
                '_Unparser._fstring_JoinedStr'
                [Code]
                    File Name: ast.py
                    Object Name: _fstring_Constant
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'value'
                        'str'
                        'ValueError'
                        'replace'
                    [Var Names]
                        'self'
                        'node'
                        'write'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Constants inside JoinedStr should be a string.'
                        '{'
                        '{{'
                        '}'
                        '}}'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: node
                        4       LOAD_ATTR                       1: value
                        6       LOAD_GLOBAL                     2: str
                        8       CALL_FUNCTION                   2
                        10      POP_JUMP_IF_TRUE                10 (to 20)
                        12      LOAD_GLOBAL                     3: ValueError
                        14      LOAD_CONST                      1: 'Constants inside JoinedStr should be a string.'
                        16      CALL_FUNCTION                   1
                        18      RAISE_VARARGS                   1
                        20      LOAD_FAST                       1: node
                        22      LOAD_ATTR                       1: value
                        24      LOAD_METHOD                     4: replace
                        26      LOAD_CONST                      2: '{'
                        28      LOAD_CONST                      3: '{{'
                        30      CALL_METHOD                     2
                        32      LOAD_METHOD                     4: replace
                        34      LOAD_CONST                      4: '}'
                        36      LOAD_CONST                      5: '}}'
                        38      CALL_METHOD                     2
                        40      STORE_FAST                      3: value
                        42      LOAD_FAST                       2: write
                        44      LOAD_FAST                       3: value
                        46      CALL_FUNCTION                   1
                        48      POP_TOP                         
                        50      LOAD_CONST                      0: None
                        52      RETURN_VALUE                    
                '_Unparser._fstring_Constant'
                [Code]
                    File Name: ast.py
                    Object Name: _fstring_FormattedValue
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        'set_precedence'
                        '_Precedence'
                        'TEST'
                        'next'
                        'value'
                        'visit'
                        'startswith'
                        'ValueError'
                        'conversion'
                        'chr'
                        'format_spec'
                        'getattr'
                        '__name__'
                    [Var Names]
                        'self'
                        'node'
                        'write'
                        'unparser'
                        'expr'
                        'conversion'
                        'meth'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '{'
                        True
                        (
                            '_avoid_backslashes'
                        )
                        ' '
                        '\\'
                        'Unable to avoid backslash in f-string expression part'
                        -1
                        'sra'
                        'Unknown f-string conversion.'
                        '!'
                        ':'
                        '_fstring_'
                        '}'
                    [Disassembly]
                        0       LOAD_FAST                       2: write
                        2       LOAD_CONST                      1: '{'
                        4       CALL_FUNCTION                   1
                        6       POP_TOP                         
                        8       LOAD_GLOBAL                     0: type
                        10      LOAD_FAST                       0: self
                        12      CALL_FUNCTION                   1
                        14      LOAD_CONST                      2: True
                        16      LOAD_CONST                      3: ('_avoid_backslashes',)
                        18      CALL_FUNCTION_KW                1
                        20      STORE_FAST                      3: unparser
                        22      LOAD_FAST                       3: unparser
                        24      LOAD_METHOD                     1: set_precedence
                        26      LOAD_GLOBAL                     2: _Precedence
                        28      LOAD_ATTR                       3: TEST
                        30      LOAD_METHOD                     4: next
                        32      CALL_METHOD                     0
                        34      LOAD_FAST                       1: node
                        36      LOAD_ATTR                       5: value
                        38      CALL_METHOD                     2
                        40      POP_TOP                         
                        42      LOAD_FAST                       3: unparser
                        44      LOAD_METHOD                     6: visit
                        46      LOAD_FAST                       1: node
                        48      LOAD_ATTR                       5: value
                        50      CALL_METHOD                     1
                        52      STORE_FAST                      4: expr
                        54      LOAD_FAST                       4: expr
                        56      LOAD_METHOD                     7: startswith
                        58      LOAD_CONST                      1: '{'
                        60      CALL_METHOD                     1
                        62      POP_JUMP_IF_FALSE               36 (to 72)
                        64      LOAD_FAST                       2: write
                        66      LOAD_CONST                      4: ' '
                        68      CALL_FUNCTION                   1
                        70      POP_TOP                         
                        72      LOAD_CONST                      5: '\\'
                        74      LOAD_FAST                       4: expr
                        76      CONTAINS_OP                     0 (in)
                        78      POP_JUMP_IF_FALSE               44 (to 88)
                        80      LOAD_GLOBAL                     8: ValueError
                        82      LOAD_CONST                      6: 'Unable to avoid backslash in f-string expression part'
                        84      CALL_FUNCTION                   1
                        86      RAISE_VARARGS                   1
                        88      LOAD_FAST                       2: write
                        90      LOAD_FAST                       4: expr
                        92      CALL_FUNCTION                   1
                        94      POP_TOP                         
                        96      LOAD_FAST                       1: node
                        98      LOAD_ATTR                       9: conversion
                        100     LOAD_CONST                      7: -1
                        102     COMPARE_OP                      3 (!=)
                        104     POP_JUMP_IF_FALSE               73 (to 146)
                        106     LOAD_GLOBAL                     10: chr
                        108     LOAD_FAST                       1: node
                        110     LOAD_ATTR                       9: conversion
                        112     CALL_FUNCTION                   1
                        114     STORE_FAST                      5: conversion
                        116     LOAD_FAST                       5: conversion
                        118     LOAD_CONST                      8: 'sra'
                        120     CONTAINS_OP                     1 (not in)
                        122     POP_JUMP_IF_FALSE               66 (to 132)
                        124     LOAD_GLOBAL                     8: ValueError
                        126     LOAD_CONST                      9: 'Unknown f-string conversion.'
                        128     CALL_FUNCTION                   1
                        130     RAISE_VARARGS                   1
                        132     LOAD_FAST                       2: write
                        134     LOAD_CONST                      10: '!'
                        136     LOAD_FAST                       5: conversion
                        138     FORMAT_VALUE                    0 (FVC_NONE)
                        140     BUILD_STRING                    2
                        142     CALL_FUNCTION                   1
                        144     POP_TOP                         
                        146     LOAD_FAST                       1: node
                        148     LOAD_ATTR                       11: format_spec
                        150     POP_JUMP_IF_FALSE               97 (to 194)
                        152     LOAD_FAST                       2: write
                        154     LOAD_CONST                      11: ':'
                        156     CALL_FUNCTION                   1
                        158     POP_TOP                         
                        160     LOAD_GLOBAL                     12: getattr
                        162     LOAD_FAST                       0: self
                        164     LOAD_CONST                      12: '_fstring_'
                        166     LOAD_GLOBAL                     0: type
                        168     LOAD_FAST                       1: node
                        170     LOAD_ATTR                       11: format_spec
                        172     CALL_FUNCTION                   1
                        174     LOAD_ATTR                       13: __name__
                        176     BINARY_ADD                      
                        178     CALL_FUNCTION                   2
                        180     STORE_FAST                      6: meth
                        182     LOAD_FAST                       6: meth
                        184     LOAD_FAST                       1: node
                        186     LOAD_ATTR                       11: format_spec
                        188     LOAD_FAST                       2: write
                        190     CALL_FUNCTION                   2
                        192     POP_TOP                         
                        194     LOAD_FAST                       2: write
                        196     LOAD_CONST                      13: '}'
                        198     CALL_FUNCTION                   1
                        200     POP_TOP                         
                        202     LOAD_CONST                      0: None
                        204     RETURN_VALUE                    
                '_Unparser._fstring_FormattedValue'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Name
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'write'
                        'id'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: write
                        4       LOAD_FAST                       1: node
                        6       LOAD_ATTR                       1: id
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                '_Unparser.visit_Name'
                [Code]
                    File Name: ast.py
                    Object Name: _write_docstring
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'kind'
                        'write'
                        '_write_str_avoiding_backslashes'
                        'value'
                        '_MULTI_QUOTES'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'u'
                        (
                            'quote_types'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       1: node
                        10      LOAD_ATTR                       1: kind
                        12      LOAD_CONST                      1: 'u'
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               14 (to 28)
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     2: write
                        22      LOAD_CONST                      1: 'u'
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       3: _write_str_avoiding_backslashes
                        32      LOAD_FAST                       1: node
                        34      LOAD_ATTR                       4: value
                        36      LOAD_GLOBAL                     5: _MULTI_QUOTES
                        38      LOAD_CONST                      2: ('quote_types',)
                        40      CALL_FUNCTION_KW                2
                        42      POP_TOP                         
                        44      LOAD_CONST                      0: None
                        46      RETURN_VALUE                    
                '_Unparser._write_docstring'
                [Code]
                    File Name: ast.py
                    Object Name: _write_constant
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'float'
                        'complex'
                        'write'
                        'repr'
                        'replace'
                        '_INFSTR'
                        '_avoid_backslashes'
                        'str'
                        '_write_str_avoiding_backslashes'
                    [Var Names]
                        'self'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'inf'
                        'nan'
                        '('
                        '-'
                        ')'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: value
                        4       LOAD_GLOBAL                     1: float
                        6       LOAD_GLOBAL                     2: complex
                        8       BUILD_TUPLE                     2
                        10      CALL_FUNCTION                   2
                        12      POP_JUMP_IF_FALSE               31 (to 62)
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     3: write
                        18      LOAD_GLOBAL                     4: repr
                        20      LOAD_FAST                       1: value
                        22      CALL_FUNCTION                   1
                        24      LOAD_METHOD                     5: replace
                        26      LOAD_CONST                      1: 'inf'
                        28      LOAD_GLOBAL                     6: _INFSTR
                        30      CALL_METHOD                     2
                        32      LOAD_METHOD                     5: replace
                        34      LOAD_CONST                      2: 'nan'
                        36      LOAD_CONST                      3: '('
                        38      LOAD_GLOBAL                     6: _INFSTR
                        40      FORMAT_VALUE                    0 (FVC_NONE)
                        42      LOAD_CONST                      4: '-'
                        44      LOAD_GLOBAL                     6: _INFSTR
                        46      FORMAT_VALUE                    0 (FVC_NONE)
                        48      LOAD_CONST                      5: ')'
                        50      BUILD_STRING                    5
                        52      CALL_METHOD                     2
                        54      CALL_METHOD                     1
                        56      POP_TOP                         
                        58      LOAD_CONST                      0: None
                        60      RETURN_VALUE                    
                        62      LOAD_FAST                       0: self
                        64      LOAD_ATTR                       7: _avoid_backslashes
                        66      POP_JUMP_IF_FALSE               46 (to 92)
                        68      LOAD_GLOBAL                     0: isinstance
                        70      LOAD_FAST                       1: value
                        72      LOAD_GLOBAL                     8: str
                        74      CALL_FUNCTION                   2
                        76      POP_JUMP_IF_FALSE               46 (to 92)
                        78      LOAD_FAST                       0: self
                        80      LOAD_METHOD                     9: _write_str_avoiding_backslashes
                        82      LOAD_FAST                       1: value
                        84      CALL_METHOD                     1
                        86      POP_TOP                         
                        88      LOAD_CONST                      0: None
                        90      RETURN_VALUE                    
                        92      LOAD_FAST                       0: self
                        94      LOAD_METHOD                     3: write
                        96      LOAD_GLOBAL                     4: repr
                        98      LOAD_FAST                       1: value
                        100     CALL_FUNCTION                   1
                        102     CALL_METHOD                     1
                        104     POP_TOP                         
                        106     LOAD_CONST                      0: None
                        108     RETURN_VALUE                    
                '_Unparser._write_constant'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Constant
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'value'
                        'isinstance'
                        'tuple'
                        'delimit'
                        'items_view'
                        '_write_constant'
                        'write'
                        'kind'
                    [Var Names]
                        'self'
                        'node'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '('
                        ')'
                        ...
                        '...'
                        'u'
                    [Disassembly]
                        0       LOAD_FAST                       1: node
                        2       LOAD_ATTR                       0: value
                        4       STORE_FAST                      2: value
                        6       LOAD_GLOBAL                     1: isinstance
                        8       LOAD_FAST                       2: value
                        10      LOAD_GLOBAL                     2: tuple
                        12      CALL_FUNCTION                   2
                        14      POP_JUMP_IF_FALSE               40 (to 80)
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     3: delimit
                        20      LOAD_CONST                      1: '('
                        22      LOAD_CONST                      2: ')'
                        24      CALL_METHOD                     2
                        26      SETUP_WITH                      16 (to 60)
                        28      POP_TOP                         
                        30      LOAD_FAST                       0: self
                        32      LOAD_METHOD                     4: items_view
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       5: _write_constant
                        38      LOAD_FAST                       2: value
                        40      CALL_METHOD                     2
                        42      POP_TOP                         
                        44      POP_BLOCK                       
                        46      LOAD_CONST                      0: None
                        48      DUP_TOP                         
                        50      DUP_TOP                         
                        52      CALL_FUNCTION                   3
                        54      POP_TOP                         
                        56      LOAD_CONST                      0: None
                        58      RETURN_VALUE                    
                        60      WITH_EXCEPT_START               
                        62      POP_JUMP_IF_TRUE                33 (to 66)
                        64      RERAISE                         1
                        66      POP_TOP                         
                        68      POP_TOP                         
                        70      POP_TOP                         
                        72      POP_EXCEPT                      
                        74      POP_TOP                         
                        76      LOAD_CONST                      0: None
                        78      RETURN_VALUE                    
                        80      LOAD_FAST                       2: value
                        82      LOAD_CONST                      3: ...
                        84      IS_OP                           0 (is)
                        86      POP_JUMP_IF_FALSE               51 (to 102)
                        88      LOAD_FAST                       0: self
                        90      LOAD_METHOD                     6: write
                        92      LOAD_CONST                      4: '...'
                        94      CALL_METHOD                     1
                        96      POP_TOP                         
                        98      LOAD_CONST                      0: None
                        100     RETURN_VALUE                    
                        102     LOAD_FAST                       1: node
                        104     LOAD_ATTR                       7: kind
                        106     LOAD_CONST                      5: 'u'
                        108     COMPARE_OP                      2 (==)
                        110     POP_JUMP_IF_FALSE               61 (to 122)
                        112     LOAD_FAST                       0: self
                        114     LOAD_METHOD                     6: write
                        116     LOAD_CONST                      5: 'u'
                        118     CALL_METHOD                     1
                        120     POP_TOP                         
                        122     LOAD_FAST                       0: self
                        124     LOAD_METHOD                     5: _write_constant
                        126     LOAD_FAST                       1: node
                        128     LOAD_ATTR                       0: value
                        130     CALL_METHOD                     1
                        132     POP_TOP                         
                        134     LOAD_CONST                      0: None
                        136     RETURN_VALUE                    
                '_Unparser.visit_Constant'
                [Code]
                    File Name: ast.py
                    Object Name: visit_List
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'delimit'
                        'interleave'
                        'traverse'
                        'elts'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        '['
                        ']'
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_List.<locals>.<lambda>'
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: delimit
                        4       LOAD_CONST                      1: '['
                        6       LOAD_CONST                      2: ']'
                        8       CALL_METHOD                     2
                        10      SETUP_WITH                      22 (to 56)
                        12      POP_TOP                         
                        14      LOAD_DEREF                      0: self
                        16      LOAD_METHOD                     1: interleave
                        18      LOAD_CLOSURE                    0: self
                        20      BUILD_TUPLE                     1
                        22      LOAD_CONST                      3: <CODE> <lambda>
                        24      LOAD_CONST                      4: '_Unparser.visit_List.<locals>.<lambda>'
                        26      MAKE_FUNCTION                   8
                        28      LOAD_DEREF                      0: self
                        30      LOAD_ATTR                       2: traverse
                        32      LOAD_FAST                       1: node
                        34      LOAD_ATTR                       3: elts
                        36      CALL_METHOD                     3
                        38      POP_TOP                         
                        40      POP_BLOCK                       
                        42      LOAD_CONST                      0: None
                        44      DUP_TOP                         
                        46      DUP_TOP                         
                        48      CALL_FUNCTION                   3
                        50      POP_TOP                         
                        52      LOAD_CONST                      0: None
                        54      RETURN_VALUE                    
                        56      WITH_EXCEPT_START               
                        58      POP_JUMP_IF_TRUE                31 (to 62)
                        60      RERAISE                         1
                        62      POP_TOP                         
                        64      POP_TOP                         
                        66      POP_TOP                         
                        68      POP_EXCEPT                      
                        70      POP_TOP                         
                        72      LOAD_CONST                      0: None
                        74      RETURN_VALUE                    
                '_Unparser.visit_List'
                [Code]
                    File Name: ast.py
                    Object Name: visit_ListComp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'delimit'
                        'traverse'
                        'elt'
                        'generators'
                    [Var Names]
                        'self'
                        'node'
                        'gen'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '['
                        ']'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: delimit
                        4       LOAD_CONST                      1: '['
                        6       LOAD_CONST                      2: ']'
                        8       CALL_METHOD                     2
                        10      SETUP_WITH                      26 (to 64)
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     1: traverse
                        18      LOAD_FAST                       1: node
                        20      LOAD_ATTR                       2: elt
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       1: node
                        28      LOAD_ATTR                       3: generators
                        30      GET_ITER                        
                        32      FOR_ITER                        7 (to 48)
                        34      STORE_FAST                      2: gen
                        36      LOAD_FAST                       0: self
                        38      LOAD_METHOD                     1: traverse
                        40      LOAD_FAST                       2: gen
                        42      CALL_METHOD                     1
                        44      POP_TOP                         
                        46      JUMP_ABSOLUTE                   16 (to 32)
                        48      POP_BLOCK                       
                        50      LOAD_CONST                      0: None
                        52      DUP_TOP                         
                        54      DUP_TOP                         
                        56      CALL_FUNCTION                   3
                        58      POP_TOP                         
                        60      LOAD_CONST                      0: None
                        62      RETURN_VALUE                    
                        64      WITH_EXCEPT_START               
                        66      POP_JUMP_IF_TRUE                35 (to 70)
                        68      RERAISE                         1
                        70      POP_TOP                         
                        72      POP_TOP                         
                        74      POP_TOP                         
                        76      POP_EXCEPT                      
                        78      POP_TOP                         
                        80      LOAD_CONST                      0: None
                        82      RETURN_VALUE                    
                '_Unparser.visit_ListComp'
                [Code]
                    File Name: ast.py
                    Object Name: visit_GeneratorExp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'delimit'
                        'traverse'
                        'elt'
                        'generators'
                    [Var Names]
                        'self'
                        'node'
                        'gen'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '('
                        ')'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: delimit
                        4       LOAD_CONST                      1: '('
                        6       LOAD_CONST                      2: ')'
                        8       CALL_METHOD                     2
                        10      SETUP_WITH                      26 (to 64)
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     1: traverse
                        18      LOAD_FAST                       1: node
                        20      LOAD_ATTR                       2: elt
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       1: node
                        28      LOAD_ATTR                       3: generators
                        30      GET_ITER                        
                        32      FOR_ITER                        7 (to 48)
                        34      STORE_FAST                      2: gen
                        36      LOAD_FAST                       0: self
                        38      LOAD_METHOD                     1: traverse
                        40      LOAD_FAST                       2: gen
                        42      CALL_METHOD                     1
                        44      POP_TOP                         
                        46      JUMP_ABSOLUTE                   16 (to 32)
                        48      POP_BLOCK                       
                        50      LOAD_CONST                      0: None
                        52      DUP_TOP                         
                        54      DUP_TOP                         
                        56      CALL_FUNCTION                   3
                        58      POP_TOP                         
                        60      LOAD_CONST                      0: None
                        62      RETURN_VALUE                    
                        64      WITH_EXCEPT_START               
                        66      POP_JUMP_IF_TRUE                35 (to 70)
                        68      RERAISE                         1
                        70      POP_TOP                         
                        72      POP_TOP                         
                        74      POP_TOP                         
                        76      POP_EXCEPT                      
                        78      POP_TOP                         
                        80      LOAD_CONST                      0: None
                        82      RETURN_VALUE                    
                '_Unparser.visit_GeneratorExp'
                [Code]
                    File Name: ast.py
                    Object Name: visit_SetComp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'delimit'
                        'traverse'
                        'elt'
                        'generators'
                    [Var Names]
                        'self'
                        'node'
                        'gen'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '{'
                        '}'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: delimit
                        4       LOAD_CONST                      1: '{'
                        6       LOAD_CONST                      2: '}'
                        8       CALL_METHOD                     2
                        10      SETUP_WITH                      26 (to 64)
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     1: traverse
                        18      LOAD_FAST                       1: node
                        20      LOAD_ATTR                       2: elt
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       1: node
                        28      LOAD_ATTR                       3: generators
                        30      GET_ITER                        
                        32      FOR_ITER                        7 (to 48)
                        34      STORE_FAST                      2: gen
                        36      LOAD_FAST                       0: self
                        38      LOAD_METHOD                     1: traverse
                        40      LOAD_FAST                       2: gen
                        42      CALL_METHOD                     1
                        44      POP_TOP                         
                        46      JUMP_ABSOLUTE                   16 (to 32)
                        48      POP_BLOCK                       
                        50      LOAD_CONST                      0: None
                        52      DUP_TOP                         
                        54      DUP_TOP                         
                        56      CALL_FUNCTION                   3
                        58      POP_TOP                         
                        60      LOAD_CONST                      0: None
                        62      RETURN_VALUE                    
                        64      WITH_EXCEPT_START               
                        66      POP_JUMP_IF_TRUE                35 (to 70)
                        68      RERAISE                         1
                        70      POP_TOP                         
                        72      POP_TOP                         
                        74      POP_TOP                         
                        76      POP_EXCEPT                      
                        78      POP_TOP                         
                        80      LOAD_CONST                      0: None
                        82      RETURN_VALUE                    
                '_Unparser.visit_SetComp'
                [Code]
                    File Name: ast.py
                    Object Name: visit_DictComp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'delimit'
                        'traverse'
                        'key'
                        'write'
                        'value'
                        'generators'
                    [Var Names]
                        'self'
                        'node'
                        'gen'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '{'
                        '}'
                        ': '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: delimit
                        4       LOAD_CONST                      1: '{'
                        6       LOAD_CONST                      2: '}'
                        8       CALL_METHOD                     2
                        10      SETUP_WITH                      37 (to 86)
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     1: traverse
                        18      LOAD_FAST                       1: node
                        20      LOAD_ATTR                       2: key
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     3: write
                        30      LOAD_CONST                      3: ': '
                        32      CALL_METHOD                     1
                        34      POP_TOP                         
                        36      LOAD_FAST                       0: self
                        38      LOAD_METHOD                     1: traverse
                        40      LOAD_FAST                       1: node
                        42      LOAD_ATTR                       4: value
                        44      CALL_METHOD                     1
                        46      POP_TOP                         
                        48      LOAD_FAST                       1: node
                        50      LOAD_ATTR                       5: generators
                        52      GET_ITER                        
                        54      FOR_ITER                        7 (to 70)
                        56      STORE_FAST                      2: gen
                        58      LOAD_FAST                       0: self
                        60      LOAD_METHOD                     1: traverse
                        62      LOAD_FAST                       2: gen
                        64      CALL_METHOD                     1
                        66      POP_TOP                         
                        68      JUMP_ABSOLUTE                   27 (to 54)
                        70      POP_BLOCK                       
                        72      LOAD_CONST                      0: None
                        74      DUP_TOP                         
                        76      DUP_TOP                         
                        78      CALL_FUNCTION                   3
                        80      POP_TOP                         
                        82      LOAD_CONST                      0: None
                        84      RETURN_VALUE                    
                        86      WITH_EXCEPT_START               
                        88      POP_JUMP_IF_TRUE                46 (to 92)
                        90      RERAISE                         1
                        92      POP_TOP                         
                        94      POP_TOP                         
                        96      POP_TOP                         
                        98      POP_EXCEPT                      
                        100     POP_TOP                         
                        102     LOAD_CONST                      0: None
                        104     RETURN_VALUE                    
                '_Unparser.visit_DictComp'
                [Code]
                    File Name: ast.py
                    Object Name: visit_comprehension
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'is_async'
                        'write'
                        'set_precedence'
                        '_Precedence'
                        'TUPLE'
                        'target'
                        'traverse'
                        'TEST'
                        'next'
                        'iter'
                        'ifs'
                    [Var Names]
                        'self'
                        'node'
                        'if_clause'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' async for '
                        ' for '
                        ' in '
                        ' if '
                    [Disassembly]
                        0       LOAD_FAST                       1: node
                        2       LOAD_ATTR                       0: is_async
                        4       POP_JUMP_IF_FALSE               9 (to 18)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: write
                        10      LOAD_CONST                      1: ' async for '
                        12      CALL_METHOD                     1
                        14      POP_TOP                         
                        16      JUMP_FORWARD                    5 (to 28)
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     1: write
                        22      LOAD_CONST                      2: ' for '
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     2: set_precedence
                        32      LOAD_GLOBAL                     3: _Precedence
                        34      LOAD_ATTR                       4: TUPLE
                        36      LOAD_FAST                       1: node
                        38      LOAD_ATTR                       5: target
                        40      CALL_METHOD                     2
                        42      POP_TOP                         
                        44      LOAD_FAST                       0: self
                        46      LOAD_METHOD                     6: traverse
                        48      LOAD_FAST                       1: node
                        50      LOAD_ATTR                       5: target
                        52      CALL_METHOD                     1
                        54      POP_TOP                         
                        56      LOAD_FAST                       0: self
                        58      LOAD_METHOD                     1: write
                        60      LOAD_CONST                      3: ' in '
                        62      CALL_METHOD                     1
                        64      POP_TOP                         
                        66      LOAD_FAST                       0: self
                        68      LOAD_ATTR                       2: set_precedence
                        70      LOAD_GLOBAL                     3: _Precedence
                        72      LOAD_ATTR                       7: TEST
                        74      LOAD_METHOD                     8: next
                        76      CALL_METHOD                     0
                        78      LOAD_FAST                       1: node
                        80      LOAD_ATTR                       9: iter
                        82      BUILD_LIST                      2
                        84      LOAD_FAST                       1: node
                        86      LOAD_ATTR                       10: ifs
                        88      LIST_EXTEND                     1
                        90      LIST_TO_TUPLE                   
                        92      CALL_FUNCTION_EX                0
                        94      POP_TOP                         
                        96      LOAD_FAST                       0: self
                        98      LOAD_METHOD                     6: traverse
                        100     LOAD_FAST                       1: node
                        102     LOAD_ATTR                       9: iter
                        104     CALL_METHOD                     1
                        106     POP_TOP                         
                        108     LOAD_FAST                       1: node
                        110     LOAD_ATTR                       10: ifs
                        112     GET_ITER                        
                        114     FOR_ITER                        12 (to 140)
                        116     STORE_FAST                      2: if_clause
                        118     LOAD_FAST                       0: self
                        120     LOAD_METHOD                     1: write
                        122     LOAD_CONST                      4: ' if '
                        124     CALL_METHOD                     1
                        126     POP_TOP                         
                        128     LOAD_FAST                       0: self
                        130     LOAD_METHOD                     6: traverse
                        132     LOAD_FAST                       2: if_clause
                        134     CALL_METHOD                     1
                        136     POP_TOP                         
                        138     JUMP_ABSOLUTE                   57 (to 114)
                        140     LOAD_CONST                      0: None
                        142     RETURN_VALUE                    
                '_Unparser.visit_comprehension'
                [Code]
                    File Name: ast.py
                    Object Name: visit_IfExp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'require_parens'
                        '_Precedence'
                        'TEST'
                        'set_precedence'
                        'next'
                        'body'
                        'test'
                        'traverse'
                        'write'
                        'orelse'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' if '
                        ' else '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: require_parens
                        4       LOAD_GLOBAL                     1: _Precedence
                        6       LOAD_ATTR                       2: TEST
                        8       LOAD_FAST                       1: node
                        10      CALL_METHOD                     2
                        12      SETUP_WITH                      57 (to 128)
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     3: set_precedence
                        20      LOAD_GLOBAL                     1: _Precedence
                        22      LOAD_ATTR                       2: TEST
                        24      LOAD_METHOD                     4: next
                        26      CALL_METHOD                     0
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       5: body
                        32      LOAD_FAST                       1: node
                        34      LOAD_ATTR                       6: test
                        36      CALL_METHOD                     3
                        38      POP_TOP                         
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     7: traverse
                        44      LOAD_FAST                       1: node
                        46      LOAD_ATTR                       5: body
                        48      CALL_METHOD                     1
                        50      POP_TOP                         
                        52      LOAD_FAST                       0: self
                        54      LOAD_METHOD                     8: write
                        56      LOAD_CONST                      1: ' if '
                        58      CALL_METHOD                     1
                        60      POP_TOP                         
                        62      LOAD_FAST                       0: self
                        64      LOAD_METHOD                     7: traverse
                        66      LOAD_FAST                       1: node
                        68      LOAD_ATTR                       6: test
                        70      CALL_METHOD                     1
                        72      POP_TOP                         
                        74      LOAD_FAST                       0: self
                        76      LOAD_METHOD                     8: write
                        78      LOAD_CONST                      2: ' else '
                        80      CALL_METHOD                     1
                        82      POP_TOP                         
                        84      LOAD_FAST                       0: self
                        86      LOAD_METHOD                     3: set_precedence
                        88      LOAD_GLOBAL                     1: _Precedence
                        90      LOAD_ATTR                       2: TEST
                        92      LOAD_FAST                       1: node
                        94      LOAD_ATTR                       9: orelse
                        96      CALL_METHOD                     2
                        98      POP_TOP                         
                        100     LOAD_FAST                       0: self
                        102     LOAD_METHOD                     7: traverse
                        104     LOAD_FAST                       1: node
                        106     LOAD_ATTR                       9: orelse
                        108     CALL_METHOD                     1
                        110     POP_TOP                         
                        112     POP_BLOCK                       
                        114     LOAD_CONST                      0: None
                        116     DUP_TOP                         
                        118     DUP_TOP                         
                        120     CALL_FUNCTION                   3
                        122     POP_TOP                         
                        124     LOAD_CONST                      0: None
                        126     RETURN_VALUE                    
                        128     WITH_EXCEPT_START               
                        130     POP_JUMP_IF_TRUE                67 (to 134)
                        132     RERAISE                         1
                        134     POP_TOP                         
                        136     POP_TOP                         
                        138     POP_TOP                         
                        140     POP_EXCEPT                      
                        142     POP_TOP                         
                        144     LOAD_CONST                      0: None
                        146     RETURN_VALUE                    
                '_Unparser.visit_IfExp'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Set
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'elts'
                        'delimit'
                        'interleave'
                        'traverse'
                        'write'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        '{'
                        '}'
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_Set.<locals>.<lambda>'
                        '{*()}'
                    [Disassembly]
                        0       LOAD_FAST                       1: node
                        2       LOAD_ATTR                       0: elts
                        4       POP_JUMP_IF_FALSE               41 (to 82)
                        6       LOAD_DEREF                      0: self
                        8       LOAD_METHOD                     1: delimit
                        10      LOAD_CONST                      1: '{'
                        12      LOAD_CONST                      2: '}'
                        14      CALL_METHOD                     2
                        16      SETUP_WITH                      22 (to 62)
                        18      POP_TOP                         
                        20      LOAD_DEREF                      0: self
                        22      LOAD_METHOD                     2: interleave
                        24      LOAD_CLOSURE                    0: self
                        26      BUILD_TUPLE                     1
                        28      LOAD_CONST                      3: <CODE> <lambda>
                        30      LOAD_CONST                      4: '_Unparser.visit_Set.<locals>.<lambda>'
                        32      MAKE_FUNCTION                   8
                        34      LOAD_DEREF                      0: self
                        36      LOAD_ATTR                       3: traverse
                        38      LOAD_FAST                       1: node
                        40      LOAD_ATTR                       0: elts
                        42      CALL_METHOD                     3
                        44      POP_TOP                         
                        46      POP_BLOCK                       
                        48      LOAD_CONST                      0: None
                        50      DUP_TOP                         
                        52      DUP_TOP                         
                        54      CALL_FUNCTION                   3
                        56      POP_TOP                         
                        58      LOAD_CONST                      0: None
                        60      RETURN_VALUE                    
                        62      WITH_EXCEPT_START               
                        64      POP_JUMP_IF_TRUE                34 (to 68)
                        66      RERAISE                         1
                        68      POP_TOP                         
                        70      POP_TOP                         
                        72      POP_TOP                         
                        74      POP_EXCEPT                      
                        76      POP_TOP                         
                        78      LOAD_CONST                      0: None
                        80      RETURN_VALUE                    
                        82      LOAD_DEREF                      0: self
                        84      LOAD_METHOD                     4: write
                        86      LOAD_CONST                      5: '{*()}'
                        88      CALL_METHOD                     1
                        90      POP_TOP                         
                        92      LOAD_CONST                      0: None
                        94      RETURN_VALUE                    
                '_Unparser.visit_Set'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Dict
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'delimit'
                        'interleave'
                        'zip'
                        'keys'
                        'values'
                    [Var Names]
                        'self'
                        'node'
                        'write_item'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                        'write_key_value_pair'
                    [Constants]
                        None
                        [Code]
                            File Name: ast.py
                            Object Name: write_key_value_pair
                            Arg Count: 2
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'traverse'
                                'write'
                            [Var Names]
                                'k'
                                'v'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ': '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: traverse
                                4       LOAD_FAST                       0: k
                                6       CALL_METHOD                     1
                                8       POP_TOP                         
                                10      LOAD_DEREF                      0: self
                                12      LOAD_METHOD                     1: write
                                14      LOAD_CONST                      1: ': '
                                16      CALL_METHOD                     1
                                18      POP_TOP                         
                                20      LOAD_DEREF                      0: self
                                22      LOAD_METHOD                     0: traverse
                                24      LOAD_FAST                       1: v
                                26      CALL_METHOD                     1
                                28      POP_TOP                         
                                30      LOAD_CONST                      0: None
                                32      RETURN_VALUE                    
                        '_Unparser.visit_Dict.<locals>.write_key_value_pair'
                        [Code]
                            File Name: ast.py
                            Object Name: write_item
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 4
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                                'set_precedence'
                                '_Precedence'
                                'EXPR'
                                'traverse'
                            [Var Names]
                                'item'
                                'k'
                                'v'
                            [Free Vars]
                                'self'
                                'write_key_value_pair'
                            [Cell Vars]
                            [Constants]
                                None
                                '**'
                            [Disassembly]
                                0       LOAD_FAST                       0: item
                                2       UNPACK_SEQUENCE                 2
                                4       STORE_FAST                      1: k
                                6       STORE_FAST                      2: v
                                8       LOAD_FAST                       1: k
                                10      LOAD_CONST                      0: None
                                12      IS_OP                           0 (is)
                                14      POP_JUMP_IF_FALSE               27 (to 54)
                                16      LOAD_DEREF                      0: self
                                18      LOAD_METHOD                     0: write
                                20      LOAD_CONST                      1: '**'
                                22      CALL_METHOD                     1
                                24      POP_TOP                         
                                26      LOAD_DEREF                      0: self
                                28      LOAD_METHOD                     1: set_precedence
                                30      LOAD_GLOBAL                     2: _Precedence
                                32      LOAD_ATTR                       3: EXPR
                                34      LOAD_FAST                       2: v
                                36      CALL_METHOD                     2
                                38      POP_TOP                         
                                40      LOAD_DEREF                      0: self
                                42      LOAD_METHOD                     4: traverse
                                44      LOAD_FAST                       2: v
                                46      CALL_METHOD                     1
                                48      POP_TOP                         
                                50      LOAD_CONST                      0: None
                                52      RETURN_VALUE                    
                                54      LOAD_DEREF                      1: write_key_value_pair
                                56      LOAD_FAST                       1: k
                                58      LOAD_FAST                       2: v
                                60      CALL_FUNCTION                   2
                                62      POP_TOP                         
                                64      LOAD_CONST                      0: None
                                66      RETURN_VALUE                    
                        '_Unparser.visit_Dict.<locals>.write_item'
                        '{'
                        '}'
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_Dict.<locals>.<lambda>'
                    [Disassembly]
                        0       LOAD_CLOSURE                    0: self
                        2       BUILD_TUPLE                     1
                        4       LOAD_CONST                      1: <CODE> write_key_value_pair
                        6       LOAD_CONST                      2: '_Unparser.visit_Dict.<locals>.write_key_value_pair'
                        8       MAKE_FUNCTION                   8
                        10      STORE_DEREF                     1: write_key_value_pair
                        12      LOAD_CLOSURE                    0: self
                        14      LOAD_CLOSURE                    1: write_key_value_pair
                        16      BUILD_TUPLE                     2
                        18      LOAD_CONST                      3: <CODE> write_item
                        20      LOAD_CONST                      4: '_Unparser.visit_Dict.<locals>.write_item'
                        22      MAKE_FUNCTION                   8
                        24      STORE_FAST                      2: write_item
                        26      LOAD_DEREF                      0: self
                        28      LOAD_METHOD                     0: delimit
                        30      LOAD_CONST                      5: '{'
                        32      LOAD_CONST                      6: '}'
                        34      CALL_METHOD                     2
                        36      SETUP_WITH                      25 (to 88)
                        38      POP_TOP                         
                        40      LOAD_DEREF                      0: self
                        42      LOAD_METHOD                     1: interleave
                        44      LOAD_CLOSURE                    0: self
                        46      BUILD_TUPLE                     1
                        48      LOAD_CONST                      7: <CODE> <lambda>
                        50      LOAD_CONST                      8: '_Unparser.visit_Dict.<locals>.<lambda>'
                        52      MAKE_FUNCTION                   8
                        54      LOAD_FAST                       2: write_item
                        56      LOAD_GLOBAL                     2: zip
                        58      LOAD_FAST                       1: node
                        60      LOAD_ATTR                       3: keys
                        62      LOAD_FAST                       1: node
                        64      LOAD_ATTR                       4: values
                        66      CALL_FUNCTION                   2
                        68      CALL_METHOD                     3
                        70      POP_TOP                         
                        72      POP_BLOCK                       
                        74      LOAD_CONST                      0: None
                        76      DUP_TOP                         
                        78      DUP_TOP                         
                        80      CALL_FUNCTION                   3
                        82      POP_TOP                         
                        84      LOAD_CONST                      0: None
                        86      RETURN_VALUE                    
                        88      WITH_EXCEPT_START               
                        90      POP_JUMP_IF_TRUE                47 (to 94)
                        92      RERAISE                         1
                        94      POP_TOP                         
                        96      POP_TOP                         
                        98      POP_TOP                         
                        100     POP_EXCEPT                      
                        102     POP_TOP                         
                        104     LOAD_CONST                      0: None
                        106     RETURN_VALUE                    
                '_Unparser.visit_Dict'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Tuple
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'delimit'
                        'items_view'
                        'traverse'
                        'elts'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '('
                        ')'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: delimit
                        4       LOAD_CONST                      1: '('
                        6       LOAD_CONST                      2: ')'
                        8       CALL_METHOD                     2
                        10      SETUP_WITH                      17 (to 46)
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     1: items_view
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       2: traverse
                        22      LOAD_FAST                       1: node
                        24      LOAD_ATTR                       3: elts
                        26      CALL_METHOD                     2
                        28      POP_TOP                         
                        30      POP_BLOCK                       
                        32      LOAD_CONST                      0: None
                        34      DUP_TOP                         
                        36      DUP_TOP                         
                        38      CALL_FUNCTION                   3
                        40      POP_TOP                         
                        42      LOAD_CONST                      0: None
                        44      RETURN_VALUE                    
                        46      WITH_EXCEPT_START               
                        48      POP_JUMP_IF_TRUE                26 (to 52)
                        50      RERAISE                         1
                        52      POP_TOP                         
                        54      POP_TOP                         
                        56      POP_TOP                         
                        58      POP_EXCEPT                      
                        60      POP_TOP                         
                        62      LOAD_CONST                      0: None
                        64      RETURN_VALUE                    
                '_Unparser.visit_Tuple'
                '~'
                'not'
                '+'
                '-'
                (
                    'Invert'
                    'Not'
                    'UAdd'
                    'USub'
                )
                (
                    'not'
                    '~'
                    '+'
                    '-'
                )
                [Code]
                    File Name: ast.py
                    Object Name: visit_UnaryOp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'unop'
                        'op'
                        '__class__'
                        '__name__'
                        'unop_precedence'
                        'require_parens'
                        'write'
                        '_Precedence'
                        'FACTOR'
                        'set_precedence'
                        'operand'
                        'traverse'
                    [Var Names]
                        'self'
                        'node'
                        'operator'
                        'operator_precedence'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: unop
                        4       LOAD_FAST                       1: node
                        6       LOAD_ATTR                       1: op
                        8       LOAD_ATTR                       2: __class__
                        10      LOAD_ATTR                       3: __name__
                        12      BINARY_SUBSCR                   
                        14      STORE_FAST                      2: operator
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       4: unop_precedence
                        20      LOAD_FAST                       2: operator
                        22      BINARY_SUBSCR                   
                        24      STORE_FAST                      3: operator_precedence
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     5: require_parens
                        30      LOAD_FAST                       3: operator_precedence
                        32      LOAD_FAST                       1: node
                        34      CALL_METHOD                     2
                        36      SETUP_WITH                      37 (to 112)
                        38      POP_TOP                         
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     6: write
                        44      LOAD_FAST                       2: operator
                        46      CALL_METHOD                     1
                        48      POP_TOP                         
                        50      LOAD_FAST                       3: operator_precedence
                        52      LOAD_GLOBAL                     7: _Precedence
                        54      LOAD_ATTR                       8: FACTOR
                        56      IS_OP                           1 (is not)
                        58      POP_JUMP_IF_FALSE               35 (to 70)
                        60      LOAD_FAST                       0: self
                        62      LOAD_METHOD                     6: write
                        64      LOAD_CONST                      1: ' '
                        66      CALL_METHOD                     1
                        68      POP_TOP                         
                        70      LOAD_FAST                       0: self
                        72      LOAD_METHOD                     9: set_precedence
                        74      LOAD_FAST                       3: operator_precedence
                        76      LOAD_FAST                       1: node
                        78      LOAD_ATTR                       10: operand
                        80      CALL_METHOD                     2
                        82      POP_TOP                         
                        84      LOAD_FAST                       0: self
                        86      LOAD_METHOD                     11: traverse
                        88      LOAD_FAST                       1: node
                        90      LOAD_ATTR                       10: operand
                        92      CALL_METHOD                     1
                        94      POP_TOP                         
                        96      POP_BLOCK                       
                        98      LOAD_CONST                      0: None
                        100     DUP_TOP                         
                        102     DUP_TOP                         
                        104     CALL_FUNCTION                   3
                        106     POP_TOP                         
                        108     LOAD_CONST                      0: None
                        110     RETURN_VALUE                    
                        112     WITH_EXCEPT_START               
                        114     POP_JUMP_IF_TRUE                59 (to 118)
                        116     RERAISE                         1
                        118     POP_TOP                         
                        120     POP_TOP                         
                        122     POP_TOP                         
                        124     POP_EXCEPT                      
                        126     POP_TOP                         
                        128     LOAD_CONST                      0: None
                        130     RETURN_VALUE                    
                '_Unparser.visit_UnaryOp'
                '*'
                '@'
                '/'
                '%'
                '<<'
                '>>'
                '|'
                '^'
                '&'
                '//'
                '**'
                (
                    'Add'
                    'Sub'
                    'Mult'
                    'MatMult'
                    'Div'
                    'Mod'
                    'LShift'
                    'RShift'
                    'BitOr'
                    'BitXor'
                    'BitAnd'
                    'FloorDiv'
                    'Pow'
                )
                (
                    '+'
                    '-'
                    '*'
                    '@'
                    '/'
                    '%'
                    '<<'
                    '>>'
                    '|'
                    '^'
                    '&'
                    '//'
                    '**'
                )
                (
                    '**'
                )
                [Code]
                    File Name: ast.py
                    Object Name: visit_BinOp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'binop'
                        'op'
                        '__class__'
                        '__name__'
                        'binop_precedence'
                        'require_parens'
                        'binop_rassoc'
                        'next'
                        'set_precedence'
                        'left'
                        'traverse'
                        'write'
                        'right'
                    [Var Names]
                        'self'
                        'node'
                        'operator'
                        'operator_precedence'
                        'left_precedence'
                        'right_precedence'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: binop
                        4       LOAD_FAST                       1: node
                        6       LOAD_ATTR                       1: op
                        8       LOAD_ATTR                       2: __class__
                        10      LOAD_ATTR                       3: __name__
                        12      BINARY_SUBSCR                   
                        14      STORE_FAST                      2: operator
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       4: binop_precedence
                        20      LOAD_FAST                       2: operator
                        22      BINARY_SUBSCR                   
                        24      STORE_FAST                      3: operator_precedence
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     5: require_parens
                        30      LOAD_FAST                       3: operator_precedence
                        32      LOAD_FAST                       1: node
                        34      CALL_METHOD                     2
                        36      SETUP_WITH                      62 (to 162)
                        38      POP_TOP                         
                        40      LOAD_FAST                       2: operator
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       6: binop_rassoc
                        46      CONTAINS_OP                     0 (in)
                        48      POP_JUMP_IF_FALSE               32 (to 64)
                        50      LOAD_FAST                       3: operator_precedence
                        52      LOAD_METHOD                     7: next
                        54      CALL_METHOD                     0
                        56      STORE_FAST                      4: left_precedence
                        58      LOAD_FAST                       3: operator_precedence
                        60      STORE_FAST                      5: right_precedence
                        62      JUMP_FORWARD                    6 (to 76)
                        64      LOAD_FAST                       3: operator_precedence
                        66      STORE_FAST                      4: left_precedence
                        68      LOAD_FAST                       3: operator_precedence
                        70      LOAD_METHOD                     7: next
                        72      CALL_METHOD                     0
                        74      STORE_FAST                      5: right_precedence
                        76      LOAD_FAST                       0: self
                        78      LOAD_METHOD                     8: set_precedence
                        80      LOAD_FAST                       4: left_precedence
                        82      LOAD_FAST                       1: node
                        84      LOAD_ATTR                       9: left
                        86      CALL_METHOD                     2
                        88      POP_TOP                         
                        90      LOAD_FAST                       0: self
                        92      LOAD_METHOD                     10: traverse
                        94      LOAD_FAST                       1: node
                        96      LOAD_ATTR                       9: left
                        98      CALL_METHOD                     1
                        100     POP_TOP                         
                        102     LOAD_FAST                       0: self
                        104     LOAD_METHOD                     11: write
                        106     LOAD_CONST                      1: ' '
                        108     LOAD_FAST                       2: operator
                        110     FORMAT_VALUE                    0 (FVC_NONE)
                        112     LOAD_CONST                      1: ' '
                        114     BUILD_STRING                    3
                        116     CALL_METHOD                     1
                        118     POP_TOP                         
                        120     LOAD_FAST                       0: self
                        122     LOAD_METHOD                     8: set_precedence
                        124     LOAD_FAST                       5: right_precedence
                        126     LOAD_FAST                       1: node
                        128     LOAD_ATTR                       12: right
                        130     CALL_METHOD                     2
                        132     POP_TOP                         
                        134     LOAD_FAST                       0: self
                        136     LOAD_METHOD                     10: traverse
                        138     LOAD_FAST                       1: node
                        140     LOAD_ATTR                       12: right
                        142     CALL_METHOD                     1
                        144     POP_TOP                         
                        146     POP_BLOCK                       
                        148     LOAD_CONST                      0: None
                        150     DUP_TOP                         
                        152     DUP_TOP                         
                        154     CALL_FUNCTION                   3
                        156     POP_TOP                         
                        158     LOAD_CONST                      0: None
                        160     RETURN_VALUE                    
                        162     WITH_EXCEPT_START               
                        164     POP_JUMP_IF_TRUE                84 (to 168)
                        166     RERAISE                         1
                        168     POP_TOP                         
                        170     POP_TOP                         
                        172     POP_TOP                         
                        174     POP_EXCEPT                      
                        176     POP_TOP                         
                        178     LOAD_CONST                      0: None
                        180     RETURN_VALUE                    
                '_Unparser.visit_BinOp'
                '=='
                '!='
                '<'
                '<='
                '>'
                '>='
                'is'
                'is not'
                'in'
                'not in'
                (
                    'Eq'
                    'NotEq'
                    'Lt'
                    'LtE'
                    'Gt'
                    'GtE'
                    'Is'
                    'IsNot'
                    'In'
                    'NotIn'
                )
                [Code]
                    File Name: ast.py
                    Object Name: visit_Compare
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'require_parens'
                        '_Precedence'
                        'CMP'
                        'set_precedence'
                        'next'
                        'left'
                        'comparators'
                        'traverse'
                        'zip'
                        'ops'
                        'write'
                        'cmpops'
                        '__class__'
                        '__name__'
                    [Var Names]
                        'self'
                        'node'
                        'o'
                        'e'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: require_parens
                        4       LOAD_GLOBAL                     1: _Precedence
                        6       LOAD_ATTR                       2: CMP
                        8       LOAD_FAST                       1: node
                        10      CALL_METHOD                     2
                        12      SETUP_WITH                      61 (to 136)
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       3: set_precedence
                        20      LOAD_GLOBAL                     1: _Precedence
                        22      LOAD_ATTR                       2: CMP
                        24      LOAD_METHOD                     4: next
                        26      CALL_METHOD                     0
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       5: left
                        32      BUILD_LIST                      2
                        34      LOAD_FAST                       1: node
                        36      LOAD_ATTR                       6: comparators
                        38      LIST_EXTEND                     1
                        40      LIST_TO_TUPLE                   
                        42      CALL_FUNCTION_EX                0
                        44      POP_TOP                         
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     7: traverse
                        50      LOAD_FAST                       1: node
                        52      LOAD_ATTR                       5: left
                        54      CALL_METHOD                     1
                        56      POP_TOP                         
                        58      LOAD_GLOBAL                     8: zip
                        60      LOAD_FAST                       1: node
                        62      LOAD_ATTR                       9: ops
                        64      LOAD_FAST                       1: node
                        66      LOAD_ATTR                       6: comparators
                        68      CALL_FUNCTION                   2
                        70      GET_ITER                        
                        72      FOR_ITER                        23 (to 120)
                        74      UNPACK_SEQUENCE                 2
                        76      STORE_FAST                      2: o
                        78      STORE_FAST                      3: e
                        80      LOAD_FAST                       0: self
                        82      LOAD_METHOD                     10: write
                        84      LOAD_CONST                      1: ' '
                        86      LOAD_FAST                       0: self
                        88      LOAD_ATTR                       11: cmpops
                        90      LOAD_FAST                       2: o
                        92      LOAD_ATTR                       12: __class__
                        94      LOAD_ATTR                       13: __name__
                        96      BINARY_SUBSCR                   
                        98      BINARY_ADD                      
                        100     LOAD_CONST                      1: ' '
                        102     BINARY_ADD                      
                        104     CALL_METHOD                     1
                        106     POP_TOP                         
                        108     LOAD_FAST                       0: self
                        110     LOAD_METHOD                     7: traverse
                        112     LOAD_FAST                       3: e
                        114     CALL_METHOD                     1
                        116     POP_TOP                         
                        118     JUMP_ABSOLUTE                   36 (to 72)
                        120     POP_BLOCK                       
                        122     LOAD_CONST                      0: None
                        124     DUP_TOP                         
                        126     DUP_TOP                         
                        128     CALL_FUNCTION                   3
                        130     POP_TOP                         
                        132     LOAD_CONST                      0: None
                        134     RETURN_VALUE                    
                        136     WITH_EXCEPT_START               
                        138     POP_JUMP_IF_TRUE                71 (to 142)
                        140     RERAISE                         1
                        142     POP_TOP                         
                        144     POP_TOP                         
                        146     POP_TOP                         
                        148     POP_EXCEPT                      
                        150     POP_TOP                         
                        152     LOAD_CONST                      0: None
                        154     RETURN_VALUE                    
                '_Unparser.visit_Compare'
                'and'
                'or'
                (
                    'And'
                    'Or'
                )
                (
                    'and'
                    'or'
                )
                [Code]
                    File Name: ast.py
                    Object Name: visit_BoolOp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'boolops'
                        'op'
                        '__class__'
                        '__name__'
                        'boolop_precedence'
                        'require_parens'
                        'interleave'
                        'values'
                    [Var Names]
                        'self'
                        'node'
                        'operator'
                        'increasing_level_traverse'
                    [Free Vars]
                    [Cell Vars]
                        'operator_precedence'
                        's'
                        'self'
                    [Constants]
                        None
                        [Code]
                            File Name: ast.py
                            Object Name: increasing_level_traverse
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 1
                            Stack Size: 4
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'next'
                                'set_precedence'
                                'traverse'
                            [Var Names]
                                'node'
                            [Free Vars]
                                'operator_precedence'
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_DEREF                      0: operator_precedence
                                2       LOAD_METHOD                     0: next
                                4       CALL_METHOD                     0
                                6       STORE_DEREF                     0: operator_precedence
                                8       LOAD_DEREF                      1: self
                                10      LOAD_METHOD                     1: set_precedence
                                12      LOAD_DEREF                      0: operator_precedence
                                14      LOAD_FAST                       0: node
                                16      CALL_METHOD                     2
                                18      POP_TOP                         
                                20      LOAD_DEREF                      1: self
                                22      LOAD_METHOD                     2: traverse
                                24      LOAD_FAST                       0: node
                                26      CALL_METHOD                     1
                                28      POP_TOP                         
                                30      LOAD_CONST                      0: None
                                32      RETURN_VALUE                    
                        '_Unparser.visit_BoolOp.<locals>.increasing_level_traverse'
                        ' '
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                's'
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_DEREF                      1: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_DEREF                      0: s
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_BoolOp.<locals>.<lambda>'
                    [Disassembly]
                        0       LOAD_DEREF                      2: self
                        2       LOAD_ATTR                       0: boolops
                        4       LOAD_FAST                       1: node
                        6       LOAD_ATTR                       1: op
                        8       LOAD_ATTR                       2: __class__
                        10      LOAD_ATTR                       3: __name__
                        12      BINARY_SUBSCR                   
                        14      STORE_FAST                      2: operator
                        16      LOAD_DEREF                      2: self
                        18      LOAD_ATTR                       4: boolop_precedence
                        20      LOAD_FAST                       2: operator
                        22      BINARY_SUBSCR                   
                        24      STORE_DEREF                     0: operator_precedence
                        26      LOAD_CLOSURE                    0: operator_precedence
                        28      LOAD_CLOSURE                    2: self
                        30      BUILD_TUPLE                     2
                        32      LOAD_CONST                      1: <CODE> increasing_level_traverse
                        34      LOAD_CONST                      2: '_Unparser.visit_BoolOp.<locals>.increasing_level_traverse'
                        36      MAKE_FUNCTION                   8
                        38      STORE_FAST                      3: increasing_level_traverse
                        40      LOAD_DEREF                      2: self
                        42      LOAD_METHOD                     5: require_parens
                        44      LOAD_DEREF                      0: operator_precedence
                        46      LOAD_FAST                       1: node
                        48      CALL_METHOD                     2
                        50      SETUP_WITH                      28 (to 108)
                        52      POP_TOP                         
                        54      LOAD_CONST                      3: ' '
                        56      LOAD_FAST                       2: operator
                        58      FORMAT_VALUE                    0 (FVC_NONE)
                        60      LOAD_CONST                      3: ' '
                        62      BUILD_STRING                    3
                        64      STORE_DEREF                     1: s
                        66      LOAD_DEREF                      2: self
                        68      LOAD_METHOD                     6: interleave
                        70      LOAD_CLOSURE                    1: s
                        72      LOAD_CLOSURE                    2: self
                        74      BUILD_TUPLE                     2
                        76      LOAD_CONST                      4: <CODE> <lambda>
                        78      LOAD_CONST                      5: '_Unparser.visit_BoolOp.<locals>.<lambda>'
                        80      MAKE_FUNCTION                   8
                        82      LOAD_FAST                       3: increasing_level_traverse
                        84      LOAD_FAST                       1: node
                        86      LOAD_ATTR                       7: values
                        88      CALL_METHOD                     3
                        90      POP_TOP                         
                        92      POP_BLOCK                       
                        94      LOAD_CONST                      0: None
                        96      DUP_TOP                         
                        98      DUP_TOP                         
                        100     CALL_FUNCTION                   3
                        102     POP_TOP                         
                        104     LOAD_CONST                      0: None
                        106     RETURN_VALUE                    
                        108     WITH_EXCEPT_START               
                        110     POP_JUMP_IF_TRUE                57 (to 114)
                        112     RERAISE                         1
                        114     POP_TOP                         
                        116     POP_TOP                         
                        118     POP_TOP                         
                        120     POP_EXCEPT                      
                        122     POP_TOP                         
                        124     LOAD_CONST                      0: None
                        126     RETURN_VALUE                    
                '_Unparser.visit_BoolOp'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Attribute
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'set_precedence'
                        '_Precedence'
                        'ATOM'
                        'value'
                        'traverse'
                        'isinstance'
                        'Constant'
                        'int'
                        'write'
                        'attr'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' '
                        '.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: set_precedence
                        4       LOAD_GLOBAL                     1: _Precedence
                        6       LOAD_ATTR                       2: ATOM
                        8       LOAD_FAST                       1: node
                        10      LOAD_ATTR                       3: value
                        12      CALL_METHOD                     2
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     4: traverse
                        20      LOAD_FAST                       1: node
                        22      LOAD_ATTR                       3: value
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_GLOBAL                     5: isinstance
                        30      LOAD_FAST                       1: node
                        32      LOAD_ATTR                       3: value
                        34      LOAD_GLOBAL                     6: Constant
                        36      CALL_FUNCTION                   2
                        38      POP_JUMP_IF_FALSE               32 (to 64)
                        40      LOAD_GLOBAL                     5: isinstance
                        42      LOAD_FAST                       1: node
                        44      LOAD_ATTR                       3: value
                        46      LOAD_ATTR                       3: value
                        48      LOAD_GLOBAL                     7: int
                        50      CALL_FUNCTION                   2
                        52      POP_JUMP_IF_FALSE               32 (to 64)
                        54      LOAD_FAST                       0: self
                        56      LOAD_METHOD                     8: write
                        58      LOAD_CONST                      1: ' '
                        60      CALL_METHOD                     1
                        62      POP_TOP                         
                        64      LOAD_FAST                       0: self
                        66      LOAD_METHOD                     8: write
                        68      LOAD_CONST                      2: '.'
                        70      CALL_METHOD                     1
                        72      POP_TOP                         
                        74      LOAD_FAST                       0: self
                        76      LOAD_METHOD                     8: write
                        78      LOAD_FAST                       1: node
                        80      LOAD_ATTR                       9: attr
                        82      CALL_METHOD                     1
                        84      POP_TOP                         
                        86      LOAD_CONST                      0: None
                        88      RETURN_VALUE                    
                '_Unparser.visit_Attribute'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Call
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'set_precedence'
                        '_Precedence'
                        'ATOM'
                        'func'
                        'traverse'
                        'delimit'
                        'args'
                        'write'
                        'keywords'
                    [Var Names]
                        'self'
                        'node'
                        'comma'
                        'e'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '('
                        ')'
                        False
                        ', '
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: set_precedence
                        4       LOAD_GLOBAL                     1: _Precedence
                        6       LOAD_ATTR                       2: ATOM
                        8       LOAD_FAST                       1: node
                        10      LOAD_ATTR                       3: func
                        12      CALL_METHOD                     2
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     4: traverse
                        20      LOAD_FAST                       1: node
                        22      LOAD_ATTR                       3: func
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     5: delimit
                        32      LOAD_CONST                      1: '('
                        34      LOAD_CONST                      2: ')'
                        36      CALL_METHOD                     2
                        38      SETUP_WITH                      53 (to 146)
                        40      POP_TOP                         
                        42      LOAD_CONST                      3: False
                        44      STORE_FAST                      2: comma
                        46      LOAD_FAST                       1: node
                        48      LOAD_ATTR                       6: args
                        50      GET_ITER                        
                        52      FOR_ITER                        17 (to 88)
                        54      STORE_FAST                      3: e
                        56      LOAD_FAST                       2: comma
                        58      POP_JUMP_IF_FALSE               36 (to 72)
                        60      LOAD_FAST                       0: self
                        62      LOAD_METHOD                     7: write
                        64      LOAD_CONST                      4: ', '
                        66      CALL_METHOD                     1
                        68      POP_TOP                         
                        70      JUMP_FORWARD                    2 (to 76)
                        72      LOAD_CONST                      5: True
                        74      STORE_FAST                      2: comma
                        76      LOAD_FAST                       0: self
                        78      LOAD_METHOD                     4: traverse
                        80      LOAD_FAST                       3: e
                        82      CALL_METHOD                     1
                        84      POP_TOP                         
                        86      JUMP_ABSOLUTE                   26 (to 52)
                        88      LOAD_FAST                       1: node
                        90      LOAD_ATTR                       8: keywords
                        92      GET_ITER                        
                        94      FOR_ITER                        17 (to 130)
                        96      STORE_FAST                      3: e
                        98      LOAD_FAST                       2: comma
                        100     POP_JUMP_IF_FALSE               57 (to 114)
                        102     LOAD_FAST                       0: self
                        104     LOAD_METHOD                     7: write
                        106     LOAD_CONST                      4: ', '
                        108     CALL_METHOD                     1
                        110     POP_TOP                         
                        112     JUMP_FORWARD                    2 (to 118)
                        114     LOAD_CONST                      5: True
                        116     STORE_FAST                      2: comma
                        118     LOAD_FAST                       0: self
                        120     LOAD_METHOD                     4: traverse
                        122     LOAD_FAST                       3: e
                        124     CALL_METHOD                     1
                        126     POP_TOP                         
                        128     JUMP_ABSOLUTE                   47 (to 94)
                        130     POP_BLOCK                       
                        132     LOAD_CONST                      0: None
                        134     DUP_TOP                         
                        136     DUP_TOP                         
                        138     CALL_FUNCTION                   3
                        140     POP_TOP                         
                        142     LOAD_CONST                      0: None
                        144     RETURN_VALUE                    
                        146     WITH_EXCEPT_START               
                        148     POP_JUMP_IF_TRUE                76 (to 152)
                        150     RERAISE                         1
                        152     POP_TOP                         
                        154     POP_TOP                         
                        156     POP_TOP                         
                        158     POP_EXCEPT                      
                        160     POP_TOP                         
                        162     LOAD_CONST                      0: None
                        164     RETURN_VALUE                    
                '_Unparser.visit_Call'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Subscript
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'set_precedence'
                        '_Precedence'
                        'ATOM'
                        'value'
                        'traverse'
                        'delimit'
                        'slice'
                        'items_view'
                        'elts'
                    [Var Names]
                        'self'
                        'node'
                        'is_simple_tuple'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: ast.py
                            Object Name: is_simple_tuple
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 1
                            Stack Size: 3
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'isinstance'
                                'Tuple'
                                'elts'
                                'any'
                            [Var Names]
                                'slice_value'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                                [Code]
                                    File Name: ast.py
                                    Object Name: <genexpr>
                                    Arg Count: 1
                                    Pos Only Arg Count: 0
                                    KW Only Arg Count: 0
                                    Locals: 2
                                    Stack Size: 4
                                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                                    [Names]
                                        'isinstance'
                                        'Starred'
                                    [Var Names]
                                        '.0'
                                        'elt'
                                    [Free Vars]
                                    [Cell Vars]
                                    [Constants]
                                        None
                                    [Disassembly]
                                        0       GEN_START                       0
                                        2       LOAD_FAST                       0: .0
                                        4       FOR_ITER                        8 (to 22)
                                        6       STORE_FAST                      1: elt
                                        8       LOAD_GLOBAL                     0: isinstance
                                        10      LOAD_FAST                       1: elt
                                        12      LOAD_GLOBAL                     1: Starred
                                        14      CALL_FUNCTION                   2
                                        16      YIELD_VALUE                     
                                        18      POP_TOP                         
                                        20      JUMP_ABSOLUTE                   2 (to 4)
                                        22      LOAD_CONST                      0: None
                                        24      RETURN_VALUE                    
                                '_Unparser.visit_Subscript.<locals>.is_simple_tuple.<locals>.<genexpr>'
                            [Disassembly]
                                0       LOAD_GLOBAL                     0: isinstance
                                2       LOAD_FAST                       0: slice_value
                                4       LOAD_GLOBAL                     1: Tuple
                                6       CALL_FUNCTION                   2
                                8       JUMP_IF_FALSE_OR_POP            18 (to 36)
                                10      LOAD_FAST                       0: slice_value
                                12      LOAD_ATTR                       2: elts
                                14      JUMP_IF_FALSE_OR_POP            18 (to 36)
                                16      LOAD_GLOBAL                     3: any
                                18      LOAD_CONST                      1: <CODE> <genexpr>
                                20      LOAD_CONST                      2: '_Unparser.visit_Subscript.<locals>.is_simple_tuple.<locals>.<genexpr>'
                                22      MAKE_FUNCTION                   0
                                24      LOAD_FAST                       0: slice_value
                                26      LOAD_ATTR                       2: elts
                                28      GET_ITER                        
                                30      CALL_FUNCTION                   1
                                32      CALL_FUNCTION                   1
                                34      UNARY_NOT                       
                                36      RETURN_VALUE                    
                        '_Unparser.visit_Subscript.<locals>.is_simple_tuple'
                        '['
                        ']'
                    [Disassembly]
                        0       LOAD_CONST                      1: <CODE> is_simple_tuple
                        2       LOAD_CONST                      2: '_Unparser.visit_Subscript.<locals>.is_simple_tuple'
                        4       MAKE_FUNCTION                   0
                        6       STORE_FAST                      2: is_simple_tuple
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     0: set_precedence
                        12      LOAD_GLOBAL                     1: _Precedence
                        14      LOAD_ATTR                       2: ATOM
                        16      LOAD_FAST                       1: node
                        18      LOAD_ATTR                       3: value
                        20      CALL_METHOD                     2
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     4: traverse
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       3: value
                        32      CALL_METHOD                     1
                        34      POP_TOP                         
                        36      LOAD_FAST                       0: self
                        38      LOAD_METHOD                     5: delimit
                        40      LOAD_CONST                      3: '['
                        42      LOAD_CONST                      4: ']'
                        44      CALL_METHOD                     2
                        46      SETUP_WITH                      38 (to 124)
                        48      POP_TOP                         
                        50      LOAD_FAST                       2: is_simple_tuple
                        52      LOAD_FAST                       1: node
                        54      LOAD_ATTR                       6: slice
                        56      CALL_FUNCTION                   1
                        58      POP_JUMP_IF_FALSE               40 (to 80)
                        60      LOAD_FAST                       0: self
                        62      LOAD_METHOD                     7: items_view
                        64      LOAD_FAST                       0: self
                        66      LOAD_ATTR                       4: traverse
                        68      LOAD_FAST                       1: node
                        70      LOAD_ATTR                       6: slice
                        72      LOAD_ATTR                       8: elts
                        74      CALL_METHOD                     2
                        76      POP_TOP                         
                        78      JUMP_FORWARD                    14 (to 108)
                        80      LOAD_FAST                       0: self
                        82      LOAD_METHOD                     4: traverse
                        84      LOAD_FAST                       1: node
                        86      LOAD_ATTR                       6: slice
                        88      CALL_METHOD                     1
                        90      POP_TOP                         
                        92      POP_BLOCK                       
                        94      LOAD_CONST                      0: None
                        96      DUP_TOP                         
                        98      DUP_TOP                         
                        100     CALL_FUNCTION                   3
                        102     POP_TOP                         
                        104     LOAD_CONST                      0: None
                        106     RETURN_VALUE                    
                        108     POP_BLOCK                       
                        110     LOAD_CONST                      0: None
                        112     DUP_TOP                         
                        114     DUP_TOP                         
                        116     CALL_FUNCTION                   3
                        118     POP_TOP                         
                        120     LOAD_CONST                      0: None
                        122     RETURN_VALUE                    
                        124     WITH_EXCEPT_START               
                        126     POP_JUMP_IF_TRUE                65 (to 130)
                        128     RERAISE                         1
                        130     POP_TOP                         
                        132     POP_TOP                         
                        134     POP_TOP                         
                        136     POP_EXCEPT                      
                        138     POP_TOP                         
                        140     LOAD_CONST                      0: None
                        142     RETURN_VALUE                    
                '_Unparser.visit_Subscript'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Starred
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'write'
                        'set_precedence'
                        '_Precedence'
                        'EXPR'
                        'value'
                        'traverse'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '*'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: write
                        4       LOAD_CONST                      1: '*'
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: set_precedence
                        14      LOAD_GLOBAL                     2: _Precedence
                        16      LOAD_ATTR                       3: EXPR
                        18      LOAD_FAST                       1: node
                        20      LOAD_ATTR                       4: value
                        22      CALL_METHOD                     2
                        24      POP_TOP                         
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     5: traverse
                        30      LOAD_FAST                       1: node
                        32      LOAD_ATTR                       4: value
                        34      CALL_METHOD                     1
                        36      POP_TOP                         
                        38      LOAD_CONST                      0: None
                        40      RETURN_VALUE                    
                '_Unparser.visit_Starred'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Ellipsis
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'write'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '...'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: write
                        4       LOAD_CONST                      1: '...'
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                '_Unparser.visit_Ellipsis'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Slice
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'lower'
                        'traverse'
                        'write'
                        'upper'
                        'step'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ':'
                    [Disassembly]
                        0       LOAD_FAST                       1: node
                        2       LOAD_ATTR                       0: lower
                        4       POP_JUMP_IF_FALSE               9 (to 18)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: traverse
                        10      LOAD_FAST                       1: node
                        12      LOAD_ATTR                       0: lower
                        14      CALL_METHOD                     1
                        16      POP_TOP                         
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     2: write
                        22      LOAD_CONST                      1: ':'
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       3: upper
                        32      POP_JUMP_IF_FALSE               23 (to 46)
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     1: traverse
                        38      LOAD_FAST                       1: node
                        40      LOAD_ATTR                       3: upper
                        42      CALL_METHOD                     1
                        44      POP_TOP                         
                        46      LOAD_FAST                       1: node
                        48      LOAD_ATTR                       4: step
                        50      POP_JUMP_IF_FALSE               39 (to 78)
                        52      LOAD_FAST                       0: self
                        54      LOAD_METHOD                     2: write
                        56      LOAD_CONST                      1: ':'
                        58      CALL_METHOD                     1
                        60      POP_TOP                         
                        62      LOAD_FAST                       0: self
                        64      LOAD_METHOD                     1: traverse
                        66      LOAD_FAST                       1: node
                        68      LOAD_ATTR                       4: step
                        70      CALL_METHOD                     1
                        72      POP_TOP                         
                        74      LOAD_CONST                      0: None
                        76      RETURN_VALUE                    
                        78      LOAD_CONST                      0: None
                        80      RETURN_VALUE                    
                '_Unparser.visit_Slice'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Match
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'traverse'
                        'subject'
                        'block'
                        'cases'
                    [Var Names]
                        'self'
                        'node'
                        'case'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'match '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'match '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: traverse
                        14      LOAD_FAST                       1: node
                        16      LOAD_ATTR                       2: subject
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_FAST                       0: self
                        24      LOAD_METHOD                     3: block
                        26      CALL_METHOD                     0
                        28      SETUP_WITH                      20 (to 70)
                        30      POP_TOP                         
                        32      LOAD_FAST                       1: node
                        34      LOAD_ATTR                       4: cases
                        36      GET_ITER                        
                        38      FOR_ITER                        7 (to 54)
                        40      STORE_FAST                      2: case
                        42      LOAD_FAST                       0: self
                        44      LOAD_METHOD                     1: traverse
                        46      LOAD_FAST                       2: case
                        48      CALL_METHOD                     1
                        50      POP_TOP                         
                        52      JUMP_ABSOLUTE                   19 (to 38)
                        54      POP_BLOCK                       
                        56      LOAD_CONST                      0: None
                        58      DUP_TOP                         
                        60      DUP_TOP                         
                        62      CALL_FUNCTION                   3
                        64      POP_TOP                         
                        66      LOAD_CONST                      0: None
                        68      RETURN_VALUE                    
                        70      WITH_EXCEPT_START               
                        72      POP_JUMP_IF_TRUE                38 (to 76)
                        74      RERAISE                         1
                        76      POP_TOP                         
                        78      POP_TOP                         
                        80      POP_TOP                         
                        82      POP_EXCEPT                      
                        84      POP_TOP                         
                        86      LOAD_CONST                      0: None
                        88      RETURN_VALUE                    
                '_Unparser.visit_Match'
                [Code]
                    File Name: ast.py
                    Object Name: visit_arg
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'write'
                        'arg'
                        'annotation'
                        'traverse'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ': '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: write
                        4       LOAD_FAST                       1: node
                        6       LOAD_ATTR                       1: arg
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_FAST                       1: node
                        14      LOAD_ATTR                       2: annotation
                        16      POP_JUMP_IF_FALSE               22 (to 44)
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     0: write
                        22      LOAD_CONST                      1: ': '
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     3: traverse
                        32      LOAD_FAST                       1: node
                        34      LOAD_ATTR                       2: annotation
                        36      CALL_METHOD                     1
                        38      POP_TOP                         
                        40      LOAD_CONST                      0: None
                        42      RETURN_VALUE                    
                        44      LOAD_CONST                      0: None
                        46      RETURN_VALUE                    
                '_Unparser.visit_arg'
                [Code]
                    File Name: ast.py
                    Object Name: visit_arguments
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'posonlyargs'
                        'args'
                        'len'
                        'defaults'
                        'enumerate'
                        'zip'
                        'write'
                        'traverse'
                        'vararg'
                        'kwonlyargs'
                        'arg'
                        'annotation'
                        'kw_defaults'
                        'kwarg'
                    [Var Names]
                        'self'
                        'node'
                        'first'
                        'all_args'
                        'defaults'
                        'index'
                        'elements'
                        'a'
                        'd'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                        1
                        False
                        ', '
                        '='
                        ', /'
                        '*'
                        ': '
                        '**'
                    [Disassembly]
                        0       LOAD_CONST                      1: True
                        2       STORE_FAST                      2: first
                        4       LOAD_FAST                       1: node
                        6       LOAD_ATTR                       0: posonlyargs
                        8       LOAD_FAST                       1: node
                        10      LOAD_ATTR                       1: args
                        12      BINARY_ADD                      
                        14      STORE_FAST                      3: all_args
                        16      LOAD_CONST                      0: None
                        18      BUILD_LIST                      1
                        20      LOAD_GLOBAL                     2: len
                        22      LOAD_FAST                       3: all_args
                        24      CALL_FUNCTION                   1
                        26      LOAD_GLOBAL                     2: len
                        28      LOAD_FAST                       1: node
                        30      LOAD_ATTR                       3: defaults
                        32      CALL_FUNCTION                   1
                        34      BINARY_SUBTRACT                 
                        36      BINARY_MULTIPLY                 
                        38      LOAD_FAST                       1: node
                        40      LOAD_ATTR                       3: defaults
                        42      BINARY_ADD                      
                        44      STORE_FAST                      4: defaults
                        46      LOAD_GLOBAL                     4: enumerate
                        48      LOAD_GLOBAL                     5: zip
                        50      LOAD_FAST                       3: all_args
                        52      LOAD_FAST                       4: defaults
                        54      CALL_FUNCTION                   2
                        56      LOAD_CONST                      2: 1
                        58      CALL_FUNCTION                   2
                        60      GET_ITER                        
                        62      FOR_ITER                        47 (to 158)
                        64      UNPACK_SEQUENCE                 2
                        66      STORE_FAST                      5: index
                        68      STORE_FAST                      6: elements
                        70      LOAD_FAST                       6: elements
                        72      UNPACK_SEQUENCE                 2
                        74      STORE_FAST                      7: a
                        76      STORE_FAST                      8: d
                        78      LOAD_FAST                       2: first
                        80      POP_JUMP_IF_FALSE               44 (to 88)
                        82      LOAD_CONST                      3: False
                        84      STORE_FAST                      2: first
                        86      JUMP_FORWARD                    5 (to 98)
                        88      LOAD_FAST                       0: self
                        90      LOAD_METHOD                     6: write
                        92      LOAD_CONST                      4: ', '
                        94      CALL_METHOD                     1
                        96      POP_TOP                         
                        98      LOAD_FAST                       0: self
                        100     LOAD_METHOD                     7: traverse
                        102     LOAD_FAST                       7: a
                        104     CALL_METHOD                     1
                        106     POP_TOP                         
                        108     LOAD_FAST                       8: d
                        110     POP_JUMP_IF_FALSE               66 (to 132)
                        112     LOAD_FAST                       0: self
                        114     LOAD_METHOD                     6: write
                        116     LOAD_CONST                      5: '='
                        118     CALL_METHOD                     1
                        120     POP_TOP                         
                        122     LOAD_FAST                       0: self
                        124     LOAD_METHOD                     7: traverse
                        126     LOAD_FAST                       8: d
                        128     CALL_METHOD                     1
                        130     POP_TOP                         
                        132     LOAD_FAST                       5: index
                        134     LOAD_GLOBAL                     2: len
                        136     LOAD_FAST                       1: node
                        138     LOAD_ATTR                       0: posonlyargs
                        140     CALL_FUNCTION                   1
                        142     COMPARE_OP                      2 (==)
                        144     POP_JUMP_IF_FALSE               78 (to 156)
                        146     LOAD_FAST                       0: self
                        148     LOAD_METHOD                     6: write
                        150     LOAD_CONST                      6: ', /'
                        152     CALL_METHOD                     1
                        154     POP_TOP                         
                        156     JUMP_ABSOLUTE                   31 (to 62)
                        158     LOAD_FAST                       1: node
                        160     LOAD_ATTR                       8: vararg
                        162     POP_JUMP_IF_TRUE                85 (to 170)
                        164     LOAD_FAST                       1: node
                        166     LOAD_ATTR                       9: kwonlyargs
                        168     POP_JUMP_IF_FALSE               126 (to 252)
                        170     LOAD_FAST                       2: first
                        172     POP_JUMP_IF_FALSE               90 (to 180)
                        174     LOAD_CONST                      3: False
                        176     STORE_FAST                      2: first
                        178     JUMP_FORWARD                    5 (to 190)
                        180     LOAD_FAST                       0: self
                        182     LOAD_METHOD                     6: write
                        184     LOAD_CONST                      4: ', '
                        186     CALL_METHOD                     1
                        188     POP_TOP                         
                        190     LOAD_FAST                       0: self
                        192     LOAD_METHOD                     6: write
                        194     LOAD_CONST                      7: '*'
                        196     CALL_METHOD                     1
                        198     POP_TOP                         
                        200     LOAD_FAST                       1: node
                        202     LOAD_ATTR                       8: vararg
                        204     POP_JUMP_IF_FALSE               126 (to 252)
                        206     LOAD_FAST                       0: self
                        208     LOAD_METHOD                     6: write
                        210     LOAD_FAST                       1: node
                        212     LOAD_ATTR                       8: vararg
                        214     LOAD_ATTR                       10: arg
                        216     CALL_METHOD                     1
                        218     POP_TOP                         
                        220     LOAD_FAST                       1: node
                        222     LOAD_ATTR                       8: vararg
                        224     LOAD_ATTR                       11: annotation
                        226     POP_JUMP_IF_FALSE               126 (to 252)
                        228     LOAD_FAST                       0: self
                        230     LOAD_METHOD                     6: write
                        232     LOAD_CONST                      8: ': '
                        234     CALL_METHOD                     1
                        236     POP_TOP                         
                        238     LOAD_FAST                       0: self
                        240     LOAD_METHOD                     7: traverse
                        242     LOAD_FAST                       1: node
                        244     LOAD_ATTR                       8: vararg
                        246     LOAD_ATTR                       11: annotation
                        248     CALL_METHOD                     1
                        250     POP_TOP                         
                        252     LOAD_FAST                       1: node
                        254     LOAD_ATTR                       9: kwonlyargs
                        256     POP_JUMP_IF_FALSE               163 (to 326)
                        258     LOAD_GLOBAL                     5: zip
                        260     LOAD_FAST                       1: node
                        262     LOAD_ATTR                       9: kwonlyargs
                        264     LOAD_FAST                       1: node
                        266     LOAD_ATTR                       12: kw_defaults
                        268     CALL_FUNCTION                   2
                        270     GET_ITER                        
                        272     FOR_ITER                        26 (to 326)
                        274     UNPACK_SEQUENCE                 2
                        276     STORE_FAST                      7: a
                        278     STORE_FAST                      8: d
                        280     LOAD_FAST                       0: self
                        282     LOAD_METHOD                     6: write
                        284     LOAD_CONST                      4: ', '
                        286     CALL_METHOD                     1
                        288     POP_TOP                         
                        290     LOAD_FAST                       0: self
                        292     LOAD_METHOD                     7: traverse
                        294     LOAD_FAST                       7: a
                        296     CALL_METHOD                     1
                        298     POP_TOP                         
                        300     LOAD_FAST                       8: d
                        302     POP_JUMP_IF_FALSE               162 (to 324)
                        304     LOAD_FAST                       0: self
                        306     LOAD_METHOD                     6: write
                        308     LOAD_CONST                      5: '='
                        310     CALL_METHOD                     1
                        312     POP_TOP                         
                        314     LOAD_FAST                       0: self
                        316     LOAD_METHOD                     7: traverse
                        318     LOAD_FAST                       8: d
                        320     CALL_METHOD                     1
                        322     POP_TOP                         
                        324     JUMP_ABSOLUTE                   136 (to 272)
                        326     LOAD_FAST                       1: node
                        328     LOAD_ATTR                       13: kwarg
                        330     POP_JUMP_IF_FALSE               203 (to 406)
                        332     LOAD_FAST                       2: first
                        334     POP_JUMP_IF_FALSE               171 (to 342)
                        336     LOAD_CONST                      3: False
                        338     STORE_FAST                      2: first
                        340     JUMP_FORWARD                    5 (to 352)
                        342     LOAD_FAST                       0: self
                        344     LOAD_METHOD                     6: write
                        346     LOAD_CONST                      4: ', '
                        348     CALL_METHOD                     1
                        350     POP_TOP                         
                        352     LOAD_FAST                       0: self
                        354     LOAD_METHOD                     6: write
                        356     LOAD_CONST                      9: '**'
                        358     LOAD_FAST                       1: node
                        360     LOAD_ATTR                       13: kwarg
                        362     LOAD_ATTR                       10: arg
                        364     BINARY_ADD                      
                        366     CALL_METHOD                     1
                        368     POP_TOP                         
                        370     LOAD_FAST                       1: node
                        372     LOAD_ATTR                       13: kwarg
                        374     LOAD_ATTR                       11: annotation
                        376     POP_JUMP_IF_FALSE               205 (to 410)
                        378     LOAD_FAST                       0: self
                        380     LOAD_METHOD                     6: write
                        382     LOAD_CONST                      8: ': '
                        384     CALL_METHOD                     1
                        386     POP_TOP                         
                        388     LOAD_FAST                       0: self
                        390     LOAD_METHOD                     7: traverse
                        392     LOAD_FAST                       1: node
                        394     LOAD_ATTR                       13: kwarg
                        396     LOAD_ATTR                       11: annotation
                        398     CALL_METHOD                     1
                        400     POP_TOP                         
                        402     LOAD_CONST                      0: None
                        404     RETURN_VALUE                    
                        406     LOAD_CONST                      0: None
                        408     RETURN_VALUE                    
                        410     LOAD_CONST                      0: None
                        412     RETURN_VALUE                    
                '_Unparser.visit_arguments'
                [Code]
                    File Name: ast.py
                    Object Name: visit_keyword
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'arg'
                        'write'
                        'traverse'
                        'value'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '**'
                        '='
                    [Disassembly]
                        0       LOAD_FAST                       1: node
                        2       LOAD_ATTR                       0: arg
                        4       LOAD_CONST                      0: None
                        6       IS_OP                           0 (is)
                        8       POP_JUMP_IF_FALSE               11 (to 22)
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: write
                        14      LOAD_CONST                      1: '**'
                        16      CALL_METHOD                     1
                        18      POP_TOP                         
                        20      JUMP_FORWARD                    11 (to 44)
                        22      LOAD_FAST                       0: self
                        24      LOAD_METHOD                     1: write
                        26      LOAD_FAST                       1: node
                        28      LOAD_ATTR                       0: arg
                        30      CALL_METHOD                     1
                        32      POP_TOP                         
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     1: write
                        38      LOAD_CONST                      2: '='
                        40      CALL_METHOD                     1
                        42      POP_TOP                         
                        44      LOAD_FAST                       0: self
                        46      LOAD_METHOD                     2: traverse
                        48      LOAD_FAST                       1: node
                        50      LOAD_ATTR                       3: value
                        52      CALL_METHOD                     1
                        54      POP_TOP                         
                        56      LOAD_CONST                      0: None
                        58      RETURN_VALUE                    
                '_Unparser.visit_keyword'
                [Code]
                    File Name: ast.py
                    Object Name: visit_Lambda
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'require_parens'
                        '_Precedence'
                        'TEST'
                        'write'
                        'traverse'
                        'args'
                        'set_precedence'
                        'body'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'lambda '
                        ': '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: require_parens
                        4       LOAD_GLOBAL                     1: _Precedence
                        6       LOAD_ATTR                       2: TEST
                        8       LOAD_FAST                       1: node
                        10      CALL_METHOD                     2
                        12      SETUP_WITH                      39 (to 92)
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     3: write
                        20      LOAD_CONST                      1: 'lambda '
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     4: traverse
                        30      LOAD_FAST                       1: node
                        32      LOAD_ATTR                       5: args
                        34      CALL_METHOD                     1
                        36      POP_TOP                         
                        38      LOAD_FAST                       0: self
                        40      LOAD_METHOD                     3: write
                        42      LOAD_CONST                      2: ': '
                        44      CALL_METHOD                     1
                        46      POP_TOP                         
                        48      LOAD_FAST                       0: self
                        50      LOAD_METHOD                     6: set_precedence
                        52      LOAD_GLOBAL                     1: _Precedence
                        54      LOAD_ATTR                       2: TEST
                        56      LOAD_FAST                       1: node
                        58      LOAD_ATTR                       7: body
                        60      CALL_METHOD                     2
                        62      POP_TOP                         
                        64      LOAD_FAST                       0: self
                        66      LOAD_METHOD                     4: traverse
                        68      LOAD_FAST                       1: node
                        70      LOAD_ATTR                       7: body
                        72      CALL_METHOD                     1
                        74      POP_TOP                         
                        76      POP_BLOCK                       
                        78      LOAD_CONST                      0: None
                        80      DUP_TOP                         
                        82      DUP_TOP                         
                        84      CALL_FUNCTION                   3
                        86      POP_TOP                         
                        88      LOAD_CONST                      0: None
                        90      RETURN_VALUE                    
                        92      WITH_EXCEPT_START               
                        94      POP_JUMP_IF_TRUE                49 (to 98)
                        96      RERAISE                         1
                        98      POP_TOP                         
                        100     POP_TOP                         
                        102     POP_TOP                         
                        104     POP_EXCEPT                      
                        106     POP_TOP                         
                        108     LOAD_CONST                      0: None
                        110     RETURN_VALUE                    
                '_Unparser.visit_Lambda'
                [Code]
                    File Name: ast.py
                    Object Name: visit_alias
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'write'
                        'name'
                        'asname'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' as '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: write
                        4       LOAD_FAST                       1: node
                        6       LOAD_ATTR                       1: name
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_FAST                       1: node
                        14      LOAD_ATTR                       2: asname
                        16      POP_JUMP_IF_FALSE               19 (to 38)
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     0: write
                        22      LOAD_CONST                      1: ' as '
                        24      LOAD_FAST                       1: node
                        26      LOAD_ATTR                       2: asname
                        28      BINARY_ADD                      
                        30      CALL_METHOD                     1
                        32      POP_TOP                         
                        34      LOAD_CONST                      0: None
                        36      RETURN_VALUE                    
                        38      LOAD_CONST                      0: None
                        40      RETURN_VALUE                    
                '_Unparser.visit_alias'
                [Code]
                    File Name: ast.py
                    Object Name: visit_withitem
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'traverse'
                        'context_expr'
                        'optional_vars'
                        'write'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' as '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: traverse
                        4       LOAD_FAST                       1: node
                        6       LOAD_ATTR                       1: context_expr
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_FAST                       1: node
                        14      LOAD_ATTR                       2: optional_vars
                        16      POP_JUMP_IF_FALSE               22 (to 44)
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     3: write
                        22      LOAD_CONST                      1: ' as '
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     0: traverse
                        32      LOAD_FAST                       1: node
                        34      LOAD_ATTR                       2: optional_vars
                        36      CALL_METHOD                     1
                        38      POP_TOP                         
                        40      LOAD_CONST                      0: None
                        42      RETURN_VALUE                    
                        44      LOAD_CONST                      0: None
                        46      RETURN_VALUE                    
                '_Unparser.visit_withitem'
                [Code]
                    File Name: ast.py
                    Object Name: visit_match_case
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fill'
                        'traverse'
                        'pattern'
                        'guard'
                        'write'
                        'block'
                        'body'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'case '
                        ' if '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: fill
                        4       LOAD_CONST                      1: 'case '
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: traverse
                        14      LOAD_FAST                       1: node
                        16      LOAD_ATTR                       2: pattern
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_FAST                       1: node
                        24      LOAD_ATTR                       3: guard
                        26      POP_JUMP_IF_FALSE               25 (to 50)
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     4: write
                        32      LOAD_CONST                      2: ' if '
                        34      CALL_METHOD                     1
                        36      POP_TOP                         
                        38      LOAD_FAST                       0: self
                        40      LOAD_METHOD                     1: traverse
                        42      LOAD_FAST                       1: node
                        44      LOAD_ATTR                       3: guard
                        46      CALL_METHOD                     1
                        48      POP_TOP                         
                        50      LOAD_FAST                       0: self
                        52      LOAD_METHOD                     5: block
                        54      CALL_METHOD                     0
                        56      SETUP_WITH                      15 (to 88)
                        58      POP_TOP                         
                        60      LOAD_FAST                       0: self
                        62      LOAD_METHOD                     1: traverse
                        64      LOAD_FAST                       1: node
                        66      LOAD_ATTR                       6: body
                        68      CALL_METHOD                     1
                        70      POP_TOP                         
                        72      POP_BLOCK                       
                        74      LOAD_CONST                      0: None
                        76      DUP_TOP                         
                        78      DUP_TOP                         
                        80      CALL_FUNCTION                   3
                        82      POP_TOP                         
                        84      LOAD_CONST                      0: None
                        86      RETURN_VALUE                    
                        88      WITH_EXCEPT_START               
                        90      POP_JUMP_IF_TRUE                47 (to 94)
                        92      RERAISE                         1
                        94      POP_TOP                         
                        96      POP_TOP                         
                        98      POP_TOP                         
                        100     POP_EXCEPT                      
                        102     POP_TOP                         
                        104     LOAD_CONST                      0: None
                        106     RETURN_VALUE                    
                '_Unparser.visit_match_case'
                [Code]
                    File Name: ast.py
                    Object Name: visit_MatchValue
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'traverse'
                        'value'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: traverse
                        4       LOAD_FAST                       1: node
                        6       LOAD_ATTR                       1: value
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                '_Unparser.visit_MatchValue'
                [Code]
                    File Name: ast.py
                    Object Name: visit_MatchSingleton
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_write_constant'
                        'value'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _write_constant
                        4       LOAD_FAST                       1: node
                        6       LOAD_ATTR                       1: value
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                '_Unparser.visit_MatchSingleton'
                [Code]
                    File Name: ast.py
                    Object Name: visit_MatchSequence
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'delimit'
                        'interleave'
                        'traverse'
                        'patterns'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        '['
                        ']'
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_MatchSequence.<locals>.<lambda>'
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: delimit
                        4       LOAD_CONST                      1: '['
                        6       LOAD_CONST                      2: ']'
                        8       CALL_METHOD                     2
                        10      SETUP_WITH                      22 (to 56)
                        12      POP_TOP                         
                        14      LOAD_DEREF                      0: self
                        16      LOAD_METHOD                     1: interleave
                        18      LOAD_CLOSURE                    0: self
                        20      BUILD_TUPLE                     1
                        22      LOAD_CONST                      3: <CODE> <lambda>
                        24      LOAD_CONST                      4: '_Unparser.visit_MatchSequence.<locals>.<lambda>'
                        26      MAKE_FUNCTION                   8
                        28      LOAD_DEREF                      0: self
                        30      LOAD_ATTR                       2: traverse
                        32      LOAD_FAST                       1: node
                        34      LOAD_ATTR                       3: patterns
                        36      CALL_METHOD                     3
                        38      POP_TOP                         
                        40      POP_BLOCK                       
                        42      LOAD_CONST                      0: None
                        44      DUP_TOP                         
                        46      DUP_TOP                         
                        48      CALL_FUNCTION                   3
                        50      POP_TOP                         
                        52      LOAD_CONST                      0: None
                        54      RETURN_VALUE                    
                        56      WITH_EXCEPT_START               
                        58      POP_JUMP_IF_TRUE                31 (to 62)
                        60      RERAISE                         1
                        62      POP_TOP                         
                        64      POP_TOP                         
                        66      POP_TOP                         
                        68      POP_EXCEPT                      
                        70      POP_TOP                         
                        72      LOAD_CONST                      0: None
                        74      RETURN_VALUE                    
                '_Unparser.visit_MatchSequence'
                [Code]
                    File Name: ast.py
                    Object Name: visit_MatchStar
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'name'
                        'write'
                    [Var Names]
                        'self'
                        'node'
                        'name'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '_'
                        '*'
                    [Disassembly]
                        0       LOAD_FAST                       1: node
                        2       LOAD_ATTR                       0: name
                        4       STORE_FAST                      2: name
                        6       LOAD_FAST                       2: name
                        8       LOAD_CONST                      0: None
                        10      IS_OP                           0 (is)
                        12      POP_JUMP_IF_FALSE               9 (to 18)
                        14      LOAD_CONST                      1: '_'
                        16      STORE_FAST                      2: name
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     1: write
                        22      LOAD_CONST                      2: '*'
                        24      LOAD_FAST                       2: name
                        26      FORMAT_VALUE                    0 (FVC_NONE)
                        28      BUILD_STRING                    2
                        30      CALL_METHOD                     1
                        32      POP_TOP                         
                        34      LOAD_CONST                      0: None
                        36      RETURN_VALUE                    
                '_Unparser.visit_MatchStar'
                [Code]
                    File Name: ast.py
                    Object Name: visit_MatchMapping
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 10
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'delimit'
                        'keys'
                        'interleave'
                        'zip'
                        'patterns'
                        'rest'
                        'write'
                    [Var Names]
                        'self'
                        'node'
                        'write_key_pattern_pair'
                        'keys'
                        'rest'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        [Code]
                            File Name: ast.py
                            Object Name: write_key_pattern_pair
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'traverse'
                                'write'
                            [Var Names]
                                'pair'
                                'k'
                                'p'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ': '
                            [Disassembly]
                                0       LOAD_FAST                       0: pair
                                2       UNPACK_SEQUENCE                 2
                                4       STORE_FAST                      1: k
                                6       STORE_FAST                      2: p
                                8       LOAD_DEREF                      0: self
                                10      LOAD_METHOD                     0: traverse
                                12      LOAD_FAST                       1: k
                                14      CALL_METHOD                     1
                                16      POP_TOP                         
                                18      LOAD_DEREF                      0: self
                                20      LOAD_METHOD                     1: write
                                22      LOAD_CONST                      1: ': '
                                24      CALL_METHOD                     1
                                26      POP_TOP                         
                                28      LOAD_DEREF                      0: self
                                30      LOAD_METHOD                     0: traverse
                                32      LOAD_FAST                       2: p
                                34      CALL_METHOD                     1
                                36      POP_TOP                         
                                38      LOAD_CONST                      0: None
                                40      RETURN_VALUE                    
                        '_Unparser.visit_MatchMapping.<locals>.write_key_pattern_pair'
                        '{'
                        '}'
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_MatchMapping.<locals>.<lambda>'
                        True
                        (
                            'strict'
                        )
                        ', '
                        '**'
                    [Disassembly]
                        0       LOAD_CLOSURE                    0: self
                        2       BUILD_TUPLE                     1
                        4       LOAD_CONST                      1: <CODE> write_key_pattern_pair
                        6       LOAD_CONST                      2: '_Unparser.visit_MatchMapping.<locals>.write_key_pattern_pair'
                        8       MAKE_FUNCTION                   8
                        10      STORE_FAST                      2: write_key_pattern_pair
                        12      LOAD_DEREF                      0: self
                        14      LOAD_METHOD                     0: delimit
                        16      LOAD_CONST                      3: '{'
                        18      LOAD_CONST                      4: '}'
                        20      CALL_METHOD                     2
                        22      SETUP_WITH                      59 (to 142)
                        24      POP_TOP                         
                        26      LOAD_FAST                       1: node
                        28      LOAD_ATTR                       1: keys
                        30      STORE_FAST                      3: keys
                        32      LOAD_DEREF                      0: self
                        34      LOAD_METHOD                     2: interleave
                        36      LOAD_CLOSURE                    0: self
                        38      BUILD_TUPLE                     1
                        40      LOAD_CONST                      5: <CODE> <lambda>
                        42      LOAD_CONST                      6: '_Unparser.visit_MatchMapping.<locals>.<lambda>'
                        44      MAKE_FUNCTION                   8
                        46      LOAD_FAST                       2: write_key_pattern_pair
                        48      LOAD_GLOBAL                     3: zip
                        50      LOAD_FAST                       3: keys
                        52      LOAD_FAST                       1: node
                        54      LOAD_ATTR                       4: patterns
                        56      LOAD_CONST                      7: True
                        58      LOAD_CONST                      8: ('strict',)
                        60      CALL_FUNCTION_KW                3
                        62      CALL_METHOD                     3
                        64      POP_TOP                         
                        66      LOAD_FAST                       1: node
                        68      LOAD_ATTR                       5: rest
                        70      STORE_FAST                      4: rest
                        72      LOAD_FAST                       4: rest
                        74      LOAD_CONST                      0: None
                        76      IS_OP                           1 (is not)
                        78      POP_JUMP_IF_FALSE               63 (to 126)
                        80      LOAD_FAST                       3: keys
                        82      POP_JUMP_IF_FALSE               47 (to 94)
                        84      LOAD_DEREF                      0: self
                        86      LOAD_METHOD                     6: write
                        88      LOAD_CONST                      9: ', '
                        90      CALL_METHOD                     1
                        92      POP_TOP                         
                        94      LOAD_DEREF                      0: self
                        96      LOAD_METHOD                     6: write
                        98      LOAD_CONST                      10: '**'
                        100     LOAD_FAST                       4: rest
                        102     FORMAT_VALUE                    0 (FVC_NONE)
                        104     BUILD_STRING                    2
                        106     CALL_METHOD                     1
                        108     POP_TOP                         
                        110     POP_BLOCK                       
                        112     LOAD_CONST                      0: None
                        114     DUP_TOP                         
                        116     DUP_TOP                         
                        118     CALL_FUNCTION                   3
                        120     POP_TOP                         
                        122     LOAD_CONST                      0: None
                        124     RETURN_VALUE                    
                        126     POP_BLOCK                       
                        128     LOAD_CONST                      0: None
                        130     DUP_TOP                         
                        132     DUP_TOP                         
                        134     CALL_FUNCTION                   3
                        136     POP_TOP                         
                        138     LOAD_CONST                      0: None
                        140     RETURN_VALUE                    
                        142     WITH_EXCEPT_START               
                        144     POP_JUMP_IF_TRUE                74 (to 148)
                        146     RERAISE                         1
                        148     POP_TOP                         
                        150     POP_TOP                         
                        152     POP_TOP                         
                        154     POP_EXCEPT                      
                        156     POP_TOP                         
                        158     LOAD_CONST                      0: None
                        160     RETURN_VALUE                    
                '_Unparser.visit_MatchMapping'
                [Code]
                    File Name: ast.py
                    Object Name: visit_MatchClass
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 10
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'set_precedence'
                        '_Precedence'
                        'ATOM'
                        'cls'
                        'traverse'
                        'delimit'
                        'patterns'
                        'interleave'
                        'kwd_attrs'
                        'write'
                        'zip'
                        'kwd_patterns'
                    [Var Names]
                        'self'
                        'node'
                        'patterns'
                        'attrs'
                        'write_attr_pattern'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        '('
                        ')'
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_MatchClass.<locals>.<lambda>'
                        [Code]
                            File Name: ast.py
                            Object Name: write_attr_pattern
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 4
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                                'traverse'
                            [Var Names]
                                'pair'
                                'attr'
                                'pattern'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                '='
                            [Disassembly]
                                0       LOAD_FAST                       0: pair
                                2       UNPACK_SEQUENCE                 2
                                4       STORE_FAST                      1: attr
                                6       STORE_FAST                      2: pattern
                                8       LOAD_DEREF                      0: self
                                10      LOAD_METHOD                     0: write
                                12      LOAD_FAST                       1: attr
                                14      FORMAT_VALUE                    0 (FVC_NONE)
                                16      LOAD_CONST                      1: '='
                                18      BUILD_STRING                    2
                                20      CALL_METHOD                     1
                                22      POP_TOP                         
                                24      LOAD_DEREF                      0: self
                                26      LOAD_METHOD                     1: traverse
                                28      LOAD_FAST                       2: pattern
                                30      CALL_METHOD                     1
                                32      POP_TOP                         
                                34      LOAD_CONST                      0: None
                                36      RETURN_VALUE                    
                        '_Unparser.visit_MatchClass.<locals>.write_attr_pattern'
                        ', '
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ', '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ', '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        True
                        (
                            'strict'
                        )
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: set_precedence
                        4       LOAD_GLOBAL                     1: _Precedence
                        6       LOAD_ATTR                       2: ATOM
                        8       LOAD_FAST                       1: node
                        10      LOAD_ATTR                       3: cls
                        12      CALL_METHOD                     2
                        14      POP_TOP                         
                        16      LOAD_DEREF                      0: self
                        18      LOAD_METHOD                     4: traverse
                        20      LOAD_FAST                       1: node
                        22      LOAD_ATTR                       3: cls
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_DEREF                      0: self
                        30      LOAD_METHOD                     5: delimit
                        32      LOAD_CONST                      1: '('
                        34      LOAD_CONST                      2: ')'
                        36      CALL_METHOD                     2
                        38      SETUP_WITH                      67 (to 174)
                        40      POP_TOP                         
                        42      LOAD_FAST                       1: node
                        44      LOAD_ATTR                       6: patterns
                        46      STORE_FAST                      2: patterns
                        48      LOAD_DEREF                      0: self
                        50      LOAD_METHOD                     7: interleave
                        52      LOAD_CLOSURE                    0: self
                        54      BUILD_TUPLE                     1
                        56      LOAD_CONST                      3: <CODE> <lambda>
                        58      LOAD_CONST                      4: '_Unparser.visit_MatchClass.<locals>.<lambda>'
                        60      MAKE_FUNCTION                   8
                        62      LOAD_DEREF                      0: self
                        64      LOAD_ATTR                       4: traverse
                        66      LOAD_FAST                       2: patterns
                        68      CALL_METHOD                     3
                        70      POP_TOP                         
                        72      LOAD_FAST                       1: node
                        74      LOAD_ATTR                       8: kwd_attrs
                        76      STORE_FAST                      3: attrs
                        78      LOAD_FAST                       3: attrs
                        80      POP_JUMP_IF_FALSE               79 (to 158)
                        82      LOAD_CLOSURE                    0: self
                        84      BUILD_TUPLE                     1
                        86      LOAD_CONST                      5: <CODE> write_attr_pattern
                        88      LOAD_CONST                      6: '_Unparser.visit_MatchClass.<locals>.write_attr_pattern'
                        90      MAKE_FUNCTION                   8
                        92      STORE_FAST                      4: write_attr_pattern
                        94      LOAD_FAST                       2: patterns
                        96      POP_JUMP_IF_FALSE               54 (to 108)
                        98      LOAD_DEREF                      0: self
                        100     LOAD_METHOD                     9: write
                        102     LOAD_CONST                      7: ', '
                        104     CALL_METHOD                     1
                        106     POP_TOP                         
                        108     LOAD_DEREF                      0: self
                        110     LOAD_METHOD                     7: interleave
                        112     LOAD_CLOSURE                    0: self
                        114     BUILD_TUPLE                     1
                        116     LOAD_CONST                      8: <CODE> <lambda>
                        118     LOAD_CONST                      4: '_Unparser.visit_MatchClass.<locals>.<lambda>'
                        120     MAKE_FUNCTION                   8
                        122     LOAD_FAST                       4: write_attr_pattern
                        124     LOAD_GLOBAL                     10: zip
                        126     LOAD_FAST                       3: attrs
                        128     LOAD_FAST                       1: node
                        130     LOAD_ATTR                       11: kwd_patterns
                        132     LOAD_CONST                      9: True
                        134     LOAD_CONST                      10: ('strict',)
                        136     CALL_FUNCTION_KW                3
                        138     CALL_METHOD                     3
                        140     POP_TOP                         
                        142     POP_BLOCK                       
                        144     LOAD_CONST                      0: None
                        146     DUP_TOP                         
                        148     DUP_TOP                         
                        150     CALL_FUNCTION                   3
                        152     POP_TOP                         
                        154     LOAD_CONST                      0: None
                        156     RETURN_VALUE                    
                        158     POP_BLOCK                       
                        160     LOAD_CONST                      0: None
                        162     DUP_TOP                         
                        164     DUP_TOP                         
                        166     CALL_FUNCTION                   3
                        168     POP_TOP                         
                        170     LOAD_CONST                      0: None
                        172     RETURN_VALUE                    
                        174     WITH_EXCEPT_START               
                        176     POP_JUMP_IF_TRUE                90 (to 180)
                        178     RERAISE                         1
                        180     POP_TOP                         
                        182     POP_TOP                         
                        184     POP_TOP                         
                        186     POP_EXCEPT                      
                        188     POP_TOP                         
                        190     LOAD_CONST                      0: None
                        192     RETURN_VALUE                    
                '_Unparser.visit_MatchClass'
                [Code]
                    File Name: ast.py
                    Object Name: visit_MatchAs
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'name'
                        'pattern'
                        'write'
                        'require_parens'
                        '_Precedence'
                        'TEST'
                        'set_precedence'
                        'BOR'
                        'traverse'
                    [Var Names]
                        'self'
                        'node'
                        'name'
                        'pattern'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '_'
                        ' as '
                    [Disassembly]
                        0       LOAD_FAST                       1: node
                        2       LOAD_ATTR                       0: name
                        4       STORE_FAST                      2: name
                        6       LOAD_FAST                       1: node
                        8       LOAD_ATTR                       1: pattern
                        10      STORE_FAST                      3: pattern
                        12      LOAD_FAST                       2: name
                        14      LOAD_CONST                      0: None
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_FALSE               17 (to 34)
                        20      LOAD_FAST                       0: self
                        22      LOAD_METHOD                     2: write
                        24      LOAD_CONST                      1: '_'
                        26      CALL_METHOD                     1
                        28      POP_TOP                         
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                        34      LOAD_FAST                       3: pattern
                        36      LOAD_CONST                      0: None
                        38      IS_OP                           0 (is)
                        40      POP_JUMP_IF_FALSE               29 (to 58)
                        42      LOAD_FAST                       0: self
                        44      LOAD_METHOD                     2: write
                        46      LOAD_FAST                       1: node
                        48      LOAD_ATTR                       0: name
                        50      CALL_METHOD                     1
                        52      POP_TOP                         
                        54      LOAD_CONST                      0: None
                        56      RETURN_VALUE                    
                        58      LOAD_FAST                       0: self
                        60      LOAD_METHOD                     3: require_parens
                        62      LOAD_GLOBAL                     4: _Precedence
                        64      LOAD_ATTR                       5: TEST
                        66      LOAD_FAST                       1: node
                        68      CALL_METHOD                     2
                        70      SETUP_WITH                      32 (to 136)
                        72      POP_TOP                         
                        74      LOAD_FAST                       0: self
                        76      LOAD_METHOD                     6: set_precedence
                        78      LOAD_GLOBAL                     4: _Precedence
                        80      LOAD_ATTR                       7: BOR
                        82      LOAD_FAST                       1: node
                        84      LOAD_ATTR                       1: pattern
                        86      CALL_METHOD                     2
                        88      POP_TOP                         
                        90      LOAD_FAST                       0: self
                        92      LOAD_METHOD                     8: traverse
                        94      LOAD_FAST                       1: node
                        96      LOAD_ATTR                       1: pattern
                        98      CALL_METHOD                     1
                        100     POP_TOP                         
                        102     LOAD_FAST                       0: self
                        104     LOAD_METHOD                     2: write
                        106     LOAD_CONST                      2: ' as '
                        108     LOAD_FAST                       1: node
                        110     LOAD_ATTR                       0: name
                        112     FORMAT_VALUE                    0 (FVC_NONE)
                        114     BUILD_STRING                    2
                        116     CALL_METHOD                     1
                        118     POP_TOP                         
                        120     POP_BLOCK                       
                        122     LOAD_CONST                      0: None
                        124     DUP_TOP                         
                        126     DUP_TOP                         
                        128     CALL_FUNCTION                   3
                        130     POP_TOP                         
                        132     LOAD_CONST                      0: None
                        134     RETURN_VALUE                    
                        136     WITH_EXCEPT_START               
                        138     POP_JUMP_IF_TRUE                71 (to 142)
                        140     RERAISE                         1
                        142     POP_TOP                         
                        144     POP_TOP                         
                        146     POP_TOP                         
                        148     POP_EXCEPT                      
                        150     POP_TOP                         
                        152     LOAD_CONST                      0: None
                        154     RETURN_VALUE                    
                '_Unparser.visit_MatchAs'
                [Code]
                    File Name: ast.py
                    Object Name: visit_MatchOr
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'require_parens'
                        '_Precedence'
                        'BOR'
                        'set_precedence'
                        'next'
                        'patterns'
                        'interleave'
                        'traverse'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        [Code]
                            File Name: ast.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'write'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                ' | '
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_METHOD                     0: write
                                4       LOAD_CONST                      1: ' | '
                                6       CALL_METHOD                     1
                                8       RETURN_VALUE                    
                        '_Unparser.visit_MatchOr.<locals>.<lambda>'
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_METHOD                     0: require_parens
                        4       LOAD_GLOBAL                     1: _Precedence
                        6       LOAD_ATTR                       2: BOR
                        8       LOAD_FAST                       1: node
                        10      CALL_METHOD                     2
                        12      SETUP_WITH                      35 (to 84)
                        14      POP_TOP                         
                        16      LOAD_DEREF                      0: self
                        18      LOAD_ATTR                       3: set_precedence
                        20      LOAD_GLOBAL                     1: _Precedence
                        22      LOAD_ATTR                       2: BOR
                        24      LOAD_METHOD                     4: next
                        26      CALL_METHOD                     0
                        28      BUILD_LIST                      1
                        30      LOAD_FAST                       1: node
                        32      LOAD_ATTR                       5: patterns
                        34      LIST_EXTEND                     1
                        36      LIST_TO_TUPLE                   
                        38      CALL_FUNCTION_EX                0
                        40      POP_TOP                         
                        42      LOAD_DEREF                      0: self
                        44      LOAD_METHOD                     6: interleave
                        46      LOAD_CLOSURE                    0: self
                        48      BUILD_TUPLE                     1
                        50      LOAD_CONST                      1: <CODE> <lambda>
                        52      LOAD_CONST                      2: '_Unparser.visit_MatchOr.<locals>.<lambda>'
                        54      MAKE_FUNCTION                   8
                        56      LOAD_DEREF                      0: self
                        58      LOAD_ATTR                       7: traverse
                        60      LOAD_FAST                       1: node
                        62      LOAD_ATTR                       5: patterns
                        64      CALL_METHOD                     3
                        66      POP_TOP                         
                        68      POP_BLOCK                       
                        70      LOAD_CONST                      0: None
                        72      DUP_TOP                         
                        74      DUP_TOP                         
                        76      CALL_FUNCTION                   3
                        78      POP_TOP                         
                        80      LOAD_CONST                      0: None
                        82      RETURN_VALUE                    
                        84      WITH_EXCEPT_START               
                        86      POP_JUMP_IF_TRUE                45 (to 90)
                        88      RERAISE                         1
                        90      POP_TOP                         
                        92      POP_TOP                         
                        94      POP_TOP                         
                        96      POP_EXCEPT                      
                        98      POP_TOP                         
                        100     LOAD_CONST                      0: None
                        102     RETURN_VALUE                    
                '_Unparser.visit_MatchOr'
                (
                    ''
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_Unparser'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Methods in this class recursively traverse an AST and\n    output source code for the abstract syntax; original formatting\n    is disregarded.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: False
                14      LOAD_CONST                      3: ('_avoid_backslashes',)
                16      BUILD_CONST_KEY_MAP             1
                18      LOAD_CONST                      4: <CODE> __init__
                20      LOAD_CONST                      5: '_Unparser.__init__'
                22      MAKE_FUNCTION                   2
                24      STORE_NAME                      4: __init__
                26      LOAD_CONST                      6: <CODE> interleave
                28      LOAD_CONST                      7: '_Unparser.interleave'
                30      MAKE_FUNCTION                   0
                32      STORE_NAME                      5: interleave
                34      LOAD_CONST                      8: <CODE> items_view
                36      LOAD_CONST                      9: '_Unparser.items_view'
                38      MAKE_FUNCTION                   0
                40      STORE_NAME                      6: items_view
                42      LOAD_CONST                      10: <CODE> maybe_newline
                44      LOAD_CONST                      11: '_Unparser.maybe_newline'
                46      MAKE_FUNCTION                   0
                48      STORE_NAME                      7: maybe_newline
                50      LOAD_CONST                      244: ('',)
                52      LOAD_CONST                      13: <CODE> fill
                54      LOAD_CONST                      14: '_Unparser.fill'
                56      MAKE_FUNCTION                   1
                58      STORE_NAME                      8: fill
                60      LOAD_CONST                      15: <CODE> write
                62      LOAD_CONST                      16: '_Unparser.write'
                64      MAKE_FUNCTION                   0
                66      STORE_NAME                      9: write
                68      LOAD_CONST                      17: <CODE> buffer_writer
                70      LOAD_CONST                      18: '_Unparser.buffer_writer'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      10: buffer_writer
                76      LOAD_NAME                       11: property
                78      LOAD_CONST                      19: <CODE> buffer
                80      LOAD_CONST                      20: '_Unparser.buffer'
                82      MAKE_FUNCTION                   0
                84      CALL_FUNCTION                   1
                86      STORE_NAME                      12: buffer
                88      LOAD_NAME                       13: contextmanager
                90      LOAD_CONST                      21: None
                92      LOAD_CONST                      22: ('extra',)
                94      BUILD_CONST_KEY_MAP             1
                96      LOAD_CONST                      23: <CODE> block
                98      LOAD_CONST                      24: '_Unparser.block'
                100     MAKE_FUNCTION                   2
                102     CALL_FUNCTION                   1
                104     STORE_NAME                      14: block
                106     LOAD_NAME                       13: contextmanager
                108     LOAD_CONST                      25: <CODE> delimit
                110     LOAD_CONST                      26: '_Unparser.delimit'
                112     MAKE_FUNCTION                   0
                114     CALL_FUNCTION                   1
                116     STORE_NAME                      15: delimit
                118     LOAD_CONST                      27: <CODE> delimit_if
                120     LOAD_CONST                      28: '_Unparser.delimit_if'
                122     MAKE_FUNCTION                   0
                124     STORE_NAME                      16: delimit_if
                126     LOAD_CONST                      29: <CODE> require_parens
                128     LOAD_CONST                      30: '_Unparser.require_parens'
                130     MAKE_FUNCTION                   0
                132     STORE_NAME                      17: require_parens
                134     LOAD_CONST                      31: <CODE> get_precedence
                136     LOAD_CONST                      32: '_Unparser.get_precedence'
                138     MAKE_FUNCTION                   0
                140     STORE_NAME                      18: get_precedence
                142     LOAD_CONST                      33: <CODE> set_precedence
                144     LOAD_CONST                      34: '_Unparser.set_precedence'
                146     MAKE_FUNCTION                   0
                148     STORE_NAME                      19: set_precedence
                150     LOAD_CONST                      35: <CODE> get_raw_docstring
                152     LOAD_CONST                      36: '_Unparser.get_raw_docstring'
                154     MAKE_FUNCTION                   0
                156     STORE_NAME                      20: get_raw_docstring
                158     LOAD_CONST                      37: <CODE> get_type_comment
                160     LOAD_CONST                      38: '_Unparser.get_type_comment'
                162     MAKE_FUNCTION                   0
                164     STORE_NAME                      21: get_type_comment
                166     LOAD_CLOSURE                    0: __class__
                168     BUILD_TUPLE                     1
                170     LOAD_CONST                      39: <CODE> traverse
                172     LOAD_CONST                      40: '_Unparser.traverse'
                174     MAKE_FUNCTION                   8
                176     STORE_NAME                      22: traverse
                178     LOAD_CONST                      41: <CODE> visit
                180     LOAD_CONST                      42: '_Unparser.visit'
                182     MAKE_FUNCTION                   0
                184     STORE_NAME                      23: visit
                186     LOAD_CONST                      43: <CODE> _write_docstring_and_traverse_body
                188     LOAD_CONST                      44: '_Unparser._write_docstring_and_traverse_body'
                190     MAKE_FUNCTION                   0
                192     STORE_NAME                      24: _write_docstring_and_traverse_body
                194     LOAD_CONST                      45: <CODE> visit_Module
                196     LOAD_CONST                      46: '_Unparser.visit_Module'
                198     MAKE_FUNCTION                   0
                200     STORE_NAME                      25: visit_Module
                202     LOAD_CONST                      47: <CODE> visit_FunctionType
                204     LOAD_CONST                      48: '_Unparser.visit_FunctionType'
                206     MAKE_FUNCTION                   0
                208     STORE_NAME                      26: visit_FunctionType
                210     LOAD_CONST                      49: <CODE> visit_Expr
                212     LOAD_CONST                      50: '_Unparser.visit_Expr'
                214     MAKE_FUNCTION                   0
                216     STORE_NAME                      27: visit_Expr
                218     LOAD_CONST                      51: <CODE> visit_NamedExpr
                220     LOAD_CONST                      52: '_Unparser.visit_NamedExpr'
                222     MAKE_FUNCTION                   0
                224     STORE_NAME                      28: visit_NamedExpr
                226     LOAD_CONST                      53: <CODE> visit_Import
                228     LOAD_CONST                      54: '_Unparser.visit_Import'
                230     MAKE_FUNCTION                   0
                232     STORE_NAME                      29: visit_Import
                234     LOAD_CONST                      55: <CODE> visit_ImportFrom
                236     LOAD_CONST                      56: '_Unparser.visit_ImportFrom'
                238     MAKE_FUNCTION                   0
                240     STORE_NAME                      30: visit_ImportFrom
                242     LOAD_CONST                      57: <CODE> visit_Assign
                244     LOAD_CONST                      58: '_Unparser.visit_Assign'
                246     MAKE_FUNCTION                   0
                248     STORE_NAME                      31: visit_Assign
                250     LOAD_CONST                      59: <CODE> visit_AugAssign
                252     LOAD_CONST                      60: '_Unparser.visit_AugAssign'
                254     MAKE_FUNCTION                   0
                256     STORE_NAME                      32: visit_AugAssign
                258     LOAD_CONST                      61: <CODE> visit_AnnAssign
                260     LOAD_CONST                      62: '_Unparser.visit_AnnAssign'
                262     MAKE_FUNCTION                   0
                264     STORE_NAME                      33: visit_AnnAssign
                266     LOAD_CONST                      63: <CODE> visit_Return
                268     LOAD_CONST                      64: '_Unparser.visit_Return'
                270     MAKE_FUNCTION                   0
                272     STORE_NAME                      34: visit_Return
                274     LOAD_CONST                      65: <CODE> visit_Pass
                276     LOAD_CONST                      66: '_Unparser.visit_Pass'
                278     MAKE_FUNCTION                   0
                280     STORE_NAME                      35: visit_Pass
                282     LOAD_CONST                      67: <CODE> visit_Break
                284     LOAD_CONST                      68: '_Unparser.visit_Break'
                286     MAKE_FUNCTION                   0
                288     STORE_NAME                      36: visit_Break
                290     LOAD_CONST                      69: <CODE> visit_Continue
                292     LOAD_CONST                      70: '_Unparser.visit_Continue'
                294     MAKE_FUNCTION                   0
                296     STORE_NAME                      37: visit_Continue
                298     LOAD_CONST                      71: <CODE> visit_Delete
                300     LOAD_CONST                      72: '_Unparser.visit_Delete'
                302     MAKE_FUNCTION                   0
                304     STORE_NAME                      38: visit_Delete
                306     LOAD_CONST                      73: <CODE> visit_Assert
                308     LOAD_CONST                      74: '_Unparser.visit_Assert'
                310     MAKE_FUNCTION                   0
                312     STORE_NAME                      39: visit_Assert
                314     LOAD_CONST                      75: <CODE> visit_Global
                316     LOAD_CONST                      76: '_Unparser.visit_Global'
                318     MAKE_FUNCTION                   0
                320     STORE_NAME                      40: visit_Global
                322     LOAD_CONST                      77: <CODE> visit_Nonlocal
                324     LOAD_CONST                      78: '_Unparser.visit_Nonlocal'
                326     MAKE_FUNCTION                   0
                328     STORE_NAME                      41: visit_Nonlocal
                330     LOAD_CONST                      79: <CODE> visit_Await
                332     LOAD_CONST                      80: '_Unparser.visit_Await'
                334     MAKE_FUNCTION                   0
                336     STORE_NAME                      42: visit_Await
                338     LOAD_CONST                      81: <CODE> visit_Yield
                340     LOAD_CONST                      82: '_Unparser.visit_Yield'
                342     MAKE_FUNCTION                   0
                344     STORE_NAME                      43: visit_Yield
                346     LOAD_CONST                      83: <CODE> visit_YieldFrom
                348     LOAD_CONST                      84: '_Unparser.visit_YieldFrom'
                350     MAKE_FUNCTION                   0
                352     STORE_NAME                      44: visit_YieldFrom
                354     LOAD_CONST                      85: <CODE> visit_Raise
                356     LOAD_CONST                      86: '_Unparser.visit_Raise'
                358     MAKE_FUNCTION                   0
                360     STORE_NAME                      45: visit_Raise
                362     LOAD_CONST                      87: <CODE> visit_Try
                364     LOAD_CONST                      88: '_Unparser.visit_Try'
                366     MAKE_FUNCTION                   0
                368     STORE_NAME                      46: visit_Try
                370     LOAD_CONST                      89: <CODE> visit_ExceptHandler
                372     LOAD_CONST                      90: '_Unparser.visit_ExceptHandler'
                374     MAKE_FUNCTION                   0
                376     STORE_NAME                      47: visit_ExceptHandler
                378     LOAD_CONST                      91: <CODE> visit_ClassDef
                380     LOAD_CONST                      92: '_Unparser.visit_ClassDef'
                382     MAKE_FUNCTION                   0
                384     STORE_NAME                      48: visit_ClassDef
                386     LOAD_CONST                      93: <CODE> visit_FunctionDef
                388     LOAD_CONST                      94: '_Unparser.visit_FunctionDef'
                390     MAKE_FUNCTION                   0
                392     STORE_NAME                      49: visit_FunctionDef
                394     LOAD_CONST                      95: <CODE> visit_AsyncFunctionDef
                396     LOAD_CONST                      96: '_Unparser.visit_AsyncFunctionDef'
                398     MAKE_FUNCTION                   0
                400     STORE_NAME                      50: visit_AsyncFunctionDef
                402     LOAD_CONST                      97: <CODE> _function_helper
                404     LOAD_CONST                      98: '_Unparser._function_helper'
                406     MAKE_FUNCTION                   0
                408     STORE_NAME                      51: _function_helper
                410     LOAD_CONST                      99: <CODE> visit_For
                412     LOAD_CONST                      100: '_Unparser.visit_For'
                414     MAKE_FUNCTION                   0
                416     STORE_NAME                      52: visit_For
                418     LOAD_CONST                      101: <CODE> visit_AsyncFor
                420     LOAD_CONST                      102: '_Unparser.visit_AsyncFor'
                422     MAKE_FUNCTION                   0
                424     STORE_NAME                      53: visit_AsyncFor
                426     LOAD_CONST                      103: <CODE> _for_helper
                428     LOAD_CONST                      104: '_Unparser._for_helper'
                430     MAKE_FUNCTION                   0
                432     STORE_NAME                      54: _for_helper
                434     LOAD_CONST                      105: <CODE> visit_If
                436     LOAD_CONST                      106: '_Unparser.visit_If'
                438     MAKE_FUNCTION                   0
                440     STORE_NAME                      55: visit_If
                442     LOAD_CONST                      107: <CODE> visit_While
                444     LOAD_CONST                      108: '_Unparser.visit_While'
                446     MAKE_FUNCTION                   0
                448     STORE_NAME                      56: visit_While
                450     LOAD_CONST                      109: <CODE> visit_With
                452     LOAD_CONST                      110: '_Unparser.visit_With'
                454     MAKE_FUNCTION                   0
                456     STORE_NAME                      57: visit_With
                458     LOAD_CONST                      111: <CODE> visit_AsyncWith
                460     LOAD_CONST                      112: '_Unparser.visit_AsyncWith'
                462     MAKE_FUNCTION                   0
                464     STORE_NAME                      58: visit_AsyncWith
                466     LOAD_NAME                       59: _ALL_QUOTES
                468     LOAD_CONST                      2: False
                470     LOAD_CONST                      113: ('quote_types', 'escape_special_whitespace')
                472     BUILD_CONST_KEY_MAP             2
                474     LOAD_CONST                      114: <CODE> _str_literal_helper
                476     LOAD_CONST                      115: '_Unparser._str_literal_helper'
                478     MAKE_FUNCTION                   2
                480     STORE_NAME                      60: _str_literal_helper
                482     LOAD_NAME                       59: _ALL_QUOTES
                484     LOAD_CONST                      116: ('quote_types',)
                486     BUILD_CONST_KEY_MAP             1
                488     LOAD_CONST                      117: <CODE> _write_str_avoiding_backslashes
                490     LOAD_CONST                      118: '_Unparser._write_str_avoiding_backslashes'
                492     MAKE_FUNCTION                   2
                494     STORE_NAME                      61: _write_str_avoiding_backslashes
                496     LOAD_CONST                      119: <CODE> visit_JoinedStr
                498     LOAD_CONST                      120: '_Unparser.visit_JoinedStr'
                500     MAKE_FUNCTION                   0
                502     STORE_NAME                      62: visit_JoinedStr
                504     LOAD_CONST                      121: <CODE> visit_FormattedValue
                506     LOAD_CONST                      122: '_Unparser.visit_FormattedValue'
                508     MAKE_FUNCTION                   0
                510     STORE_NAME                      63: visit_FormattedValue
                512     LOAD_CONST                      123: <CODE> _fstring_JoinedStr
                514     LOAD_CONST                      124: '_Unparser._fstring_JoinedStr'
                516     MAKE_FUNCTION                   0
                518     STORE_NAME                      64: _fstring_JoinedStr
                520     LOAD_CONST                      125: <CODE> _fstring_Constant
                522     LOAD_CONST                      126: '_Unparser._fstring_Constant'
                524     MAKE_FUNCTION                   0
                526     STORE_NAME                      65: _fstring_Constant
                528     LOAD_CONST                      127: <CODE> _fstring_FormattedValue
                530     LOAD_CONST                      128: '_Unparser._fstring_FormattedValue'
                532     MAKE_FUNCTION                   0
                534     STORE_NAME                      66: _fstring_FormattedValue
                536     LOAD_CONST                      129: <CODE> visit_Name
                538     LOAD_CONST                      130: '_Unparser.visit_Name'
                540     MAKE_FUNCTION                   0
                542     STORE_NAME                      67: visit_Name
                544     LOAD_CONST                      131: <CODE> _write_docstring
                546     LOAD_CONST                      132: '_Unparser._write_docstring'
                548     MAKE_FUNCTION                   0
                550     STORE_NAME                      68: _write_docstring
                552     LOAD_CONST                      133: <CODE> _write_constant
                554     LOAD_CONST                      134: '_Unparser._write_constant'
                556     MAKE_FUNCTION                   0
                558     STORE_NAME                      69: _write_constant
                560     LOAD_CONST                      135: <CODE> visit_Constant
                562     LOAD_CONST                      136: '_Unparser.visit_Constant'
                564     MAKE_FUNCTION                   0
                566     STORE_NAME                      70: visit_Constant
                568     LOAD_CONST                      137: <CODE> visit_List
                570     LOAD_CONST                      138: '_Unparser.visit_List'
                572     MAKE_FUNCTION                   0
                574     STORE_NAME                      71: visit_List
                576     LOAD_CONST                      139: <CODE> visit_ListComp
                578     LOAD_CONST                      140: '_Unparser.visit_ListComp'
                580     MAKE_FUNCTION                   0
                582     STORE_NAME                      72: visit_ListComp
                584     LOAD_CONST                      141: <CODE> visit_GeneratorExp
                586     LOAD_CONST                      142: '_Unparser.visit_GeneratorExp'
                588     MAKE_FUNCTION                   0
                590     STORE_NAME                      73: visit_GeneratorExp
                592     LOAD_CONST                      143: <CODE> visit_SetComp
                594     LOAD_CONST                      144: '_Unparser.visit_SetComp'
                596     MAKE_FUNCTION                   0
                598     STORE_NAME                      74: visit_SetComp
                600     LOAD_CONST                      145: <CODE> visit_DictComp
                602     LOAD_CONST                      146: '_Unparser.visit_DictComp'
                604     MAKE_FUNCTION                   0
                606     STORE_NAME                      75: visit_DictComp
                608     LOAD_CONST                      147: <CODE> visit_comprehension
                610     LOAD_CONST                      148: '_Unparser.visit_comprehension'
                612     MAKE_FUNCTION                   0
                614     STORE_NAME                      76: visit_comprehension
                616     LOAD_CONST                      149: <CODE> visit_IfExp
                618     LOAD_CONST                      150: '_Unparser.visit_IfExp'
                620     MAKE_FUNCTION                   0
                622     STORE_NAME                      77: visit_IfExp
                624     LOAD_CONST                      151: <CODE> visit_Set
                626     LOAD_CONST                      152: '_Unparser.visit_Set'
                628     MAKE_FUNCTION                   0
                630     STORE_NAME                      78: visit_Set
                632     LOAD_CONST                      153: <CODE> visit_Dict
                634     LOAD_CONST                      154: '_Unparser.visit_Dict'
                636     MAKE_FUNCTION                   0
                638     STORE_NAME                      79: visit_Dict
                640     LOAD_CONST                      155: <CODE> visit_Tuple
                642     LOAD_CONST                      156: '_Unparser.visit_Tuple'
                644     MAKE_FUNCTION                   0
                646     STORE_NAME                      80: visit_Tuple
                648     LOAD_CONST                      157: '~'
                650     LOAD_CONST                      158: 'not'
                652     LOAD_CONST                      159: '+'
                654     LOAD_CONST                      160: '-'
                656     LOAD_CONST                      161: ('Invert', 'Not', 'UAdd', 'USub')
                658     BUILD_CONST_KEY_MAP             4
                660     STORE_NAME                      81: unop
                662     LOAD_NAME                       82: _Precedence
                664     LOAD_ATTR                       83: NOT
                666     LOAD_NAME                       82: _Precedence
                668     LOAD_ATTR                       84: FACTOR
                670     LOAD_NAME                       82: _Precedence
                672     LOAD_ATTR                       84: FACTOR
                674     LOAD_NAME                       82: _Precedence
                676     LOAD_ATTR                       84: FACTOR
                678     LOAD_CONST                      162: ('not', '~', '+', '-')
                680     BUILD_CONST_KEY_MAP             4
                682     STORE_NAME                      85: unop_precedence
                684     LOAD_CONST                      163: <CODE> visit_UnaryOp
                686     LOAD_CONST                      164: '_Unparser.visit_UnaryOp'
                688     MAKE_FUNCTION                   0
                690     STORE_NAME                      86: visit_UnaryOp
                692     LOAD_CONST                      159: '+'
                694     LOAD_CONST                      160: '-'
                696     LOAD_CONST                      165: '*'
                698     LOAD_CONST                      166: '@'
                700     LOAD_CONST                      167: '/'
                702     LOAD_CONST                      168: '%'
                704     LOAD_CONST                      169: '<<'
                706     LOAD_CONST                      170: '>>'
                708     LOAD_CONST                      171: '|'
                710     LOAD_CONST                      172: '^'
                712     LOAD_CONST                      173: '&'
                714     LOAD_CONST                      174: '//'
                716     LOAD_CONST                      175: '**'
                718     LOAD_CONST                      176: ('Add', 'Sub', 'Mult', 'MatMult', 'Div', 'Mod', 'LShift', 'RShift', 'BitOr', 'BitXor', 'BitAnd', 'FloorDiv', 'Pow')
                720     BUILD_CONST_KEY_MAP             13
                722     STORE_NAME                      87: binop
                724     LOAD_NAME                       82: _Precedence
                726     LOAD_ATTR                       88: ARITH
                728     LOAD_NAME                       82: _Precedence
                730     LOAD_ATTR                       88: ARITH
                732     LOAD_NAME                       82: _Precedence
                734     LOAD_ATTR                       89: TERM
                736     LOAD_NAME                       82: _Precedence
                738     LOAD_ATTR                       89: TERM
                740     LOAD_NAME                       82: _Precedence
                742     LOAD_ATTR                       89: TERM
                744     LOAD_NAME                       82: _Precedence
                746     LOAD_ATTR                       89: TERM
                748     LOAD_NAME                       82: _Precedence
                750     LOAD_ATTR                       90: SHIFT
                752     LOAD_NAME                       82: _Precedence
                754     LOAD_ATTR                       90: SHIFT
                756     LOAD_NAME                       82: _Precedence
                758     LOAD_ATTR                       91: BOR
                760     LOAD_NAME                       82: _Precedence
                762     LOAD_ATTR                       92: BXOR
                764     LOAD_NAME                       82: _Precedence
                766     LOAD_ATTR                       93: BAND
                768     LOAD_NAME                       82: _Precedence
                770     LOAD_ATTR                       89: TERM
                772     LOAD_NAME                       82: _Precedence
                774     LOAD_ATTR                       94: POWER
                776     LOAD_CONST                      177: ('+', '-', '*', '@', '/', '%', '<<', '>>', '|', '^', '&', '//', '**')
                778     BUILD_CONST_KEY_MAP             13
                780     STORE_NAME                      95: binop_precedence
                782     LOAD_NAME                       96: frozenset
                784     LOAD_CONST                      178: ('**',)
                786     CALL_FUNCTION                   1
                788     STORE_NAME                      97: binop_rassoc
                790     LOAD_CONST                      179: <CODE> visit_BinOp
                792     LOAD_CONST                      180: '_Unparser.visit_BinOp'
                794     MAKE_FUNCTION                   0
                796     STORE_NAME                      98: visit_BinOp
                798     LOAD_CONST                      181: '=='
                800     LOAD_CONST                      182: '!='
                802     LOAD_CONST                      183: '<'
                804     LOAD_CONST                      184: '<='
                806     LOAD_CONST                      185: '>'
                808     LOAD_CONST                      186: '>='
                810     LOAD_CONST                      187: 'is'
                812     LOAD_CONST                      188: 'is not'
                814     LOAD_CONST                      189: 'in'
                816     LOAD_CONST                      190: 'not in'
                818     LOAD_CONST                      191: ('Eq', 'NotEq', 'Lt', 'LtE', 'Gt', 'GtE', 'Is', 'IsNot', 'In', 'NotIn')
                820     BUILD_CONST_KEY_MAP             10
                822     STORE_NAME                      99: cmpops
                824     LOAD_CONST                      192: <CODE> visit_Compare
                826     LOAD_CONST                      193: '_Unparser.visit_Compare'
                828     MAKE_FUNCTION                   0
                830     STORE_NAME                      100: visit_Compare
                832     LOAD_CONST                      194: 'and'
                834     LOAD_CONST                      195: 'or'
                836     LOAD_CONST                      196: ('And', 'Or')
                838     BUILD_CONST_KEY_MAP             2
                840     STORE_NAME                      101: boolops
                842     LOAD_NAME                       82: _Precedence
                844     LOAD_ATTR                       102: AND
                846     LOAD_NAME                       82: _Precedence
                848     LOAD_ATTR                       103: OR
                850     LOAD_CONST                      197: ('and', 'or')
                852     BUILD_CONST_KEY_MAP             2
                854     STORE_NAME                      104: boolop_precedence
                856     LOAD_CONST                      198: <CODE> visit_BoolOp
                858     LOAD_CONST                      199: '_Unparser.visit_BoolOp'
                860     MAKE_FUNCTION                   0
                862     STORE_NAME                      105: visit_BoolOp
                864     LOAD_CONST                      200: <CODE> visit_Attribute
                866     LOAD_CONST                      201: '_Unparser.visit_Attribute'
                868     MAKE_FUNCTION                   0
                870     STORE_NAME                      106: visit_Attribute
                872     LOAD_CONST                      202: <CODE> visit_Call
                874     LOAD_CONST                      203: '_Unparser.visit_Call'
                876     MAKE_FUNCTION                   0
                878     STORE_NAME                      107: visit_Call
                880     LOAD_CONST                      204: <CODE> visit_Subscript
                882     LOAD_CONST                      205: '_Unparser.visit_Subscript'
                884     MAKE_FUNCTION                   0
                886     STORE_NAME                      108: visit_Subscript
                888     LOAD_CONST                      206: <CODE> visit_Starred
                890     LOAD_CONST                      207: '_Unparser.visit_Starred'
                892     MAKE_FUNCTION                   0
                894     STORE_NAME                      109: visit_Starred
                896     LOAD_CONST                      208: <CODE> visit_Ellipsis
                898     LOAD_CONST                      209: '_Unparser.visit_Ellipsis'
                900     MAKE_FUNCTION                   0
                902     STORE_NAME                      110: visit_Ellipsis
                904     LOAD_CONST                      210: <CODE> visit_Slice
                906     LOAD_CONST                      211: '_Unparser.visit_Slice'
                908     MAKE_FUNCTION                   0
                910     STORE_NAME                      111: visit_Slice
                912     LOAD_CONST                      212: <CODE> visit_Match
                914     LOAD_CONST                      213: '_Unparser.visit_Match'
                916     MAKE_FUNCTION                   0
                918     STORE_NAME                      112: visit_Match
                920     LOAD_CONST                      214: <CODE> visit_arg
                922     LOAD_CONST                      215: '_Unparser.visit_arg'
                924     MAKE_FUNCTION                   0
                926     STORE_NAME                      113: visit_arg
                928     LOAD_CONST                      216: <CODE> visit_arguments
                930     LOAD_CONST                      217: '_Unparser.visit_arguments'
                932     MAKE_FUNCTION                   0
                934     STORE_NAME                      114: visit_arguments
                936     LOAD_CONST                      218: <CODE> visit_keyword
                938     LOAD_CONST                      219: '_Unparser.visit_keyword'
                940     MAKE_FUNCTION                   0
                942     STORE_NAME                      115: visit_keyword
                944     LOAD_CONST                      220: <CODE> visit_Lambda
                946     LOAD_CONST                      221: '_Unparser.visit_Lambda'
                948     MAKE_FUNCTION                   0
                950     STORE_NAME                      116: visit_Lambda
                952     LOAD_CONST                      222: <CODE> visit_alias
                954     LOAD_CONST                      223: '_Unparser.visit_alias'
                956     MAKE_FUNCTION                   0
                958     STORE_NAME                      117: visit_alias
                960     LOAD_CONST                      224: <CODE> visit_withitem
                962     LOAD_CONST                      225: '_Unparser.visit_withitem'
                964     MAKE_FUNCTION                   0
                966     STORE_NAME                      118: visit_withitem
                968     LOAD_CONST                      226: <CODE> visit_match_case
                970     LOAD_CONST                      227: '_Unparser.visit_match_case'
                972     MAKE_FUNCTION                   0
                974     STORE_NAME                      119: visit_match_case
                976     LOAD_CONST                      228: <CODE> visit_MatchValue
                978     LOAD_CONST                      229: '_Unparser.visit_MatchValue'
                980     MAKE_FUNCTION                   0
                982     STORE_NAME                      120: visit_MatchValue
                984     LOAD_CONST                      230: <CODE> visit_MatchSingleton
                986     LOAD_CONST                      231: '_Unparser.visit_MatchSingleton'
                988     MAKE_FUNCTION                   0
                990     STORE_NAME                      121: visit_MatchSingleton
                992     LOAD_CONST                      232: <CODE> visit_MatchSequence
                994     LOAD_CONST                      233: '_Unparser.visit_MatchSequence'
                996     MAKE_FUNCTION                   0
                998     STORE_NAME                      122: visit_MatchSequence
                1000    LOAD_CONST                      234: <CODE> visit_MatchStar
                1002    LOAD_CONST                      235: '_Unparser.visit_MatchStar'
                1004    MAKE_FUNCTION                   0
                1006    STORE_NAME                      123: visit_MatchStar
                1008    LOAD_CONST                      236: <CODE> visit_MatchMapping
                1010    LOAD_CONST                      237: '_Unparser.visit_MatchMapping'
                1012    MAKE_FUNCTION                   0
                1014    STORE_NAME                      124: visit_MatchMapping
                1016    LOAD_CONST                      238: <CODE> visit_MatchClass
                1018    LOAD_CONST                      239: '_Unparser.visit_MatchClass'
                1020    MAKE_FUNCTION                   0
                1022    STORE_NAME                      125: visit_MatchClass
                1024    LOAD_CONST                      240: <CODE> visit_MatchAs
                1026    LOAD_CONST                      241: '_Unparser.visit_MatchAs'
                1028    MAKE_FUNCTION                   0
                1030    STORE_NAME                      126: visit_MatchAs
                1032    LOAD_CONST                      242: <CODE> visit_MatchOr
                1034    LOAD_CONST                      243: '_Unparser.visit_MatchOr'
                1036    MAKE_FUNCTION                   0
                1038    STORE_NAME                      127: visit_MatchOr
                1040    LOAD_CLOSURE                    0: __class__
                1042    DUP_TOP                         
                1044    STORE_NAME                      128: __classcell__
                1046    RETURN_VALUE                    
        '_Unparser'
        [Code]
            File Name: ast.py
            Object Name: unparse
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_Unparser'
                'visit'
            [Var Names]
                'ast_obj'
                'unparser'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _Unparser
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: unparser
                6       LOAD_FAST                       1: unparser
                8       LOAD_METHOD                     1: visit
                10      LOAD_FAST                       0: ast_obj
                12      CALL_METHOD                     1
                14      RETURN_VALUE                    
        'unparse'
        [Code]
            File Name: ast.py
            Object Name: main
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 6
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'argparse'
                'ArgumentParser'
                'add_argument'
                'FileType'
                'int'
                'parse_args'
                'infile'
                'read'
                'parse'
                'name'
                'mode'
                'no_type_comments'
                'print'
                'dump'
                'include_attributes'
                'indent'
            [Var Names]
                'argparse'
                'parser'
                'args'
                'infile'
                'source'
                'tree'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                0
                'python -m ast'
                (
                    'prog'
                )
                'infile'
                'rb'
                (
                    'mode'
                )
                '?'
                '-'
                'the file to parse; defaults to stdin'
                (
                    'type'
                    'nargs'
                    'default'
                    'help'
                )
                '-m'
                '--mode'
                'exec'
                (
                    'exec'
                    'single'
                    'eval'
                    'func_type'
                )
                'specify what kind of code must be parsed'
                (
                    'default'
                    'choices'
                    'help'
                )
                '--no-type-comments'
                True
                'store_false'
                "don't add information about type comments"
                (
                    'default'
                    'action'
                    'help'
                )
                '-a'
                '--include-attributes'
                'store_true'
                'include attributes such as line numbers and column offsets'
                (
                    'action'
                    'help'
                )
                '-i'
                '--indent'
                3
                'indentation of nodes (number of spaces)'
                (
                    'type'
                    'default'
                    'help'
                )
                (
                    'type_comments'
                )
                (
                    'include_attributes'
                    'indent'
                )
            [Disassembly]
                0       LOAD_CONST                      1: 0
                2       LOAD_CONST                      0: None
                4       IMPORT_NAME                     0: argparse
                6       STORE_FAST                      0: argparse
                8       LOAD_FAST                       0: argparse
                10      LOAD_ATTR                       1: ArgumentParser
                12      LOAD_CONST                      2: 'python -m ast'
                14      LOAD_CONST                      3: ('prog',)
                16      CALL_FUNCTION_KW                1
                18      STORE_FAST                      1: parser
                20      LOAD_FAST                       1: parser
                22      LOAD_ATTR                       2: add_argument
                24      LOAD_CONST                      4: 'infile'
                26      LOAD_FAST                       0: argparse
                28      LOAD_ATTR                       3: FileType
                30      LOAD_CONST                      5: 'rb'
                32      LOAD_CONST                      6: ('mode',)
                34      CALL_FUNCTION_KW                1
                36      LOAD_CONST                      7: '?'
                38      LOAD_CONST                      8: '-'
                40      LOAD_CONST                      9: 'the file to parse; defaults to stdin'
                42      LOAD_CONST                      10: ('type', 'nargs', 'default', 'help')
                44      CALL_FUNCTION_KW                5
                46      POP_TOP                         
                48      LOAD_FAST                       1: parser
                50      LOAD_ATTR                       2: add_argument
                52      LOAD_CONST                      11: '-m'
                54      LOAD_CONST                      12: '--mode'
                56      LOAD_CONST                      13: 'exec'
                58      LOAD_CONST                      14: ('exec', 'single', 'eval', 'func_type')
                60      LOAD_CONST                      15: 'specify what kind of code must be parsed'
                62      LOAD_CONST                      16: ('default', 'choices', 'help')
                64      CALL_FUNCTION_KW                5
                66      POP_TOP                         
                68      LOAD_FAST                       1: parser
                70      LOAD_ATTR                       2: add_argument
                72      LOAD_CONST                      17: '--no-type-comments'
                74      LOAD_CONST                      18: True
                76      LOAD_CONST                      19: 'store_false'
                78      LOAD_CONST                      20: "don't add information about type comments"
                80      LOAD_CONST                      21: ('default', 'action', 'help')
                82      CALL_FUNCTION_KW                4
                84      POP_TOP                         
                86      LOAD_FAST                       1: parser
                88      LOAD_ATTR                       2: add_argument
                90      LOAD_CONST                      22: '-a'
                92      LOAD_CONST                      23: '--include-attributes'
                94      LOAD_CONST                      24: 'store_true'
                96      LOAD_CONST                      25: 'include attributes such as line numbers and column offsets'
                98      LOAD_CONST                      26: ('action', 'help')
                100     CALL_FUNCTION_KW                4
                102     POP_TOP                         
                104     LOAD_FAST                       1: parser
                106     LOAD_ATTR                       2: add_argument
                108     LOAD_CONST                      27: '-i'
                110     LOAD_CONST                      28: '--indent'
                112     LOAD_GLOBAL                     4: int
                114     LOAD_CONST                      29: 3
                116     LOAD_CONST                      30: 'indentation of nodes (number of spaces)'
                118     LOAD_CONST                      31: ('type', 'default', 'help')
                120     CALL_FUNCTION_KW                5
                122     POP_TOP                         
                124     LOAD_FAST                       1: parser
                126     LOAD_METHOD                     5: parse_args
                128     CALL_METHOD                     0
                130     STORE_FAST                      2: args
                132     LOAD_FAST                       2: args
                134     LOAD_ATTR                       6: infile
                136     SETUP_WITH                      12 (to 162)
                138     STORE_FAST                      3: infile
                140     LOAD_FAST                       3: infile
                142     LOAD_METHOD                     7: read
                144     CALL_METHOD                     0
                146     STORE_FAST                      4: source
                148     POP_BLOCK                       
                150     LOAD_CONST                      0: None
                152     DUP_TOP                         
                154     DUP_TOP                         
                156     CALL_FUNCTION                   3
                158     POP_TOP                         
                160     JUMP_FORWARD                    8 (to 178)
                162     WITH_EXCEPT_START               
                164     POP_JUMP_IF_TRUE                84 (to 168)
                166     RERAISE                         1
                168     POP_TOP                         
                170     POP_TOP                         
                172     POP_TOP                         
                174     POP_EXCEPT                      
                176     POP_TOP                         
                178     LOAD_GLOBAL                     8: parse
                180     LOAD_FAST                       4: source
                182     LOAD_FAST                       2: args
                184     LOAD_ATTR                       6: infile
                186     LOAD_ATTR                       9: name
                188     LOAD_FAST                       2: args
                190     LOAD_ATTR                       10: mode
                192     LOAD_FAST                       2: args
                194     LOAD_ATTR                       11: no_type_comments
                196     LOAD_CONST                      32: ('type_comments',)
                198     CALL_FUNCTION_KW                4
                200     STORE_FAST                      5: tree
                202     LOAD_GLOBAL                     12: print
                204     LOAD_GLOBAL                     13: dump
                206     LOAD_FAST                       5: tree
                208     LOAD_FAST                       2: args
                210     LOAD_ATTR                       14: include_attributes
                212     LOAD_FAST                       2: args
                214     LOAD_ATTR                       15: indent
                216     LOAD_CONST                      33: ('include_attributes', 'indent')
                218     CALL_FUNCTION_KW                3
                220     CALL_FUNCTION                   1
                222     POP_TOP                         
                224     LOAD_CONST                      0: None
                226     RETURN_VALUE                    
        'main'
        '__main__'
        (
            '<unknown>'
            'exec'
        )
        (
            True
            False
        )
        (
            1
        )
        (
            True
        )
    [Disassembly]
        0       LOAD_CONST                      0: '\n    ast\n    ~~~\n\n    The `ast` module helps Python applications to process trees of the Python\n    abstract syntax grammar.  The abstract syntax itself might change with\n    each Python release; this module helps to find out programmatically what\n    the current grammar looks like and allows modifications of it.\n\n    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as\n    a flag to the `compile()` builtin function or by using the `parse()`\n    function from this module.  The result will be a tree of objects whose\n    classes all inherit from `ast.AST`.\n\n    A modified abstract syntax tree can be compiled into a Python code object\n    using the built-in `compile()` function.\n\n    Additionally various helper functions are provided that make working with\n    the trees simpler.  The main intention of the helper functions and this\n    module in general is to provide an easy to use interface for libraries\n    that work tightly with the python syntax (template engines for example).\n\n\n    :copyright: Copyright 2008 by Armin Ronacher.\n    :license: Python License.\n'
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: 0
        6       LOAD_CONST                      2: None
        8       IMPORT_NAME                     1: sys
        10      STORE_NAME                      1: sys
        12      LOAD_CONST                      1: 0
        14      LOAD_CONST                      3: ('*',)
        16      IMPORT_NAME                     2: _ast
        18      IMPORT_STAR                     
        20      LOAD_CONST                      1: 0
        22      LOAD_CONST                      4: ('contextmanager', 'nullcontext')
        24      IMPORT_NAME                     3: contextlib
        26      IMPORT_FROM                     4: contextmanager
        28      STORE_NAME                      4: contextmanager
        30      IMPORT_FROM                     5: nullcontext
        32      STORE_NAME                      5: nullcontext
        34      POP_TOP                         
        36      LOAD_CONST                      1: 0
        38      LOAD_CONST                      5: ('IntEnum', 'auto')
        40      IMPORT_NAME                     6: enum
        42      IMPORT_FROM                     7: IntEnum
        44      STORE_NAME                      7: IntEnum
        46      IMPORT_FROM                     8: auto
        48      STORE_NAME                      8: auto
        50      POP_TOP                         
        52      LOAD_CONST                      96: ('<unknown>', 'exec')
        54      LOAD_CONST                      8: False
        56      LOAD_CONST                      2: None
        58      LOAD_CONST                      9: ('type_comments', 'feature_version')
        60      BUILD_CONST_KEY_MAP             2
        62      LOAD_CONST                      10: <CODE> parse
        64      LOAD_CONST                      11: 'parse'
        66      MAKE_FUNCTION                   3
        68      STORE_NAME                      9: parse
        70      LOAD_CONST                      12: <CODE> literal_eval
        72      LOAD_CONST                      13: 'literal_eval'
        74      MAKE_FUNCTION                   0
        76      STORE_NAME                      10: literal_eval
        78      LOAD_CONST                      97: (True, False)
        80      LOAD_CONST                      2: None
        82      LOAD_CONST                      15: ('indent',)
        84      BUILD_CONST_KEY_MAP             1
        86      LOAD_CONST                      16: <CODE> dump
        88      LOAD_CONST                      17: 'dump'
        90      MAKE_FUNCTION                   3
        92      STORE_NAME                      11: dump
        94      LOAD_CONST                      18: <CODE> copy_location
        96      LOAD_CONST                      19: 'copy_location'
        98      MAKE_FUNCTION                   0
        100     STORE_NAME                      12: copy_location
        102     LOAD_CONST                      20: <CODE> fix_missing_locations
        104     LOAD_CONST                      21: 'fix_missing_locations'
        106     MAKE_FUNCTION                   0
        108     STORE_NAME                      13: fix_missing_locations
        110     LOAD_CONST                      98: (1,)
        112     LOAD_CONST                      23: <CODE> increment_lineno
        114     LOAD_CONST                      24: 'increment_lineno'
        116     MAKE_FUNCTION                   1
        118     STORE_NAME                      14: increment_lineno
        120     LOAD_CONST                      25: <CODE> iter_fields
        122     LOAD_CONST                      26: 'iter_fields'
        124     MAKE_FUNCTION                   0
        126     STORE_NAME                      15: iter_fields
        128     LOAD_CONST                      27: <CODE> iter_child_nodes
        130     LOAD_CONST                      28: 'iter_child_nodes'
        132     MAKE_FUNCTION                   0
        134     STORE_NAME                      16: iter_child_nodes
        136     LOAD_CONST                      99: (True,)
        138     LOAD_CONST                      29: <CODE> get_docstring
        140     LOAD_CONST                      30: 'get_docstring'
        142     MAKE_FUNCTION                   1
        144     STORE_NAME                      17: get_docstring
        146     LOAD_CONST                      31: <CODE> _splitlines_no_ff
        148     LOAD_CONST                      32: '_splitlines_no_ff'
        150     MAKE_FUNCTION                   0
        152     STORE_NAME                      18: _splitlines_no_ff
        154     LOAD_CONST                      33: <CODE> _pad_whitespace
        156     LOAD_CONST                      34: '_pad_whitespace'
        158     MAKE_FUNCTION                   0
        160     STORE_NAME                      19: _pad_whitespace
        162     LOAD_CONST                      8: False
        164     LOAD_CONST                      35: ('padded',)
        166     BUILD_CONST_KEY_MAP             1
        168     LOAD_CONST                      36: <CODE> get_source_segment
        170     LOAD_CONST                      37: 'get_source_segment'
        172     MAKE_FUNCTION                   2
        174     STORE_NAME                      20: get_source_segment
        176     LOAD_CONST                      38: <CODE> walk
        178     LOAD_CONST                      39: 'walk'
        180     MAKE_FUNCTION                   0
        182     STORE_NAME                      21: walk
        184     LOAD_BUILD_CLASS                
        186     LOAD_CONST                      40: <CODE> NodeVisitor
        188     LOAD_CONST                      41: 'NodeVisitor'
        190     MAKE_FUNCTION                   0
        192     LOAD_CONST                      41: 'NodeVisitor'
        194     LOAD_NAME                       22: object
        196     CALL_FUNCTION                   3
        198     STORE_NAME                      23: NodeVisitor
        200     LOAD_BUILD_CLASS                
        202     LOAD_CONST                      42: <CODE> NodeTransformer
        204     LOAD_CONST                      43: 'NodeTransformer'
        206     MAKE_FUNCTION                   0
        208     LOAD_CONST                      43: 'NodeTransformer'
        210     LOAD_NAME                       23: NodeVisitor
        212     CALL_FUNCTION                   3
        214     STORE_NAME                      24: NodeTransformer
        216     LOAD_NAME                       25: hasattr
        218     LOAD_NAME                       26: Constant
        220     LOAD_CONST                      44: 'n'
        222     CALL_FUNCTION                   2
        224     POP_JUMP_IF_TRUE                133 (to 266)
        226     LOAD_CONST                      45: <CODE> _getter
        228     LOAD_CONST                      46: '_getter'
        230     MAKE_FUNCTION                   0
        232     STORE_NAME                      27: _getter
        234     LOAD_CONST                      47: <CODE> _setter
        236     LOAD_CONST                      48: '_setter'
        238     MAKE_FUNCTION                   0
        240     STORE_NAME                      28: _setter
        242     LOAD_NAME                       29: property
        244     LOAD_NAME                       27: _getter
        246     LOAD_NAME                       28: _setter
        248     CALL_FUNCTION                   2
        250     LOAD_NAME                       26: Constant
        252     STORE_ATTR                      30: n
        254     LOAD_NAME                       29: property
        256     LOAD_NAME                       27: _getter
        258     LOAD_NAME                       28: _setter
        260     CALL_FUNCTION                   2
        262     LOAD_NAME                       26: Constant
        264     STORE_ATTR                      31: s
        266     LOAD_BUILD_CLASS                
        268     LOAD_CONST                      49: <CODE> _ABC
        270     LOAD_CONST                      50: '_ABC'
        272     MAKE_FUNCTION                   0
        274     LOAD_CONST                      50: '_ABC'
        276     LOAD_NAME                       32: type
        278     CALL_FUNCTION                   3
        280     STORE_NAME                      33: _ABC
        282     LOAD_CONST                      51: <CODE> _new
        284     LOAD_CONST                      52: '_new'
        286     MAKE_FUNCTION                   0
        288     STORE_NAME                      34: _new
        290     LOAD_BUILD_CLASS                
        292     LOAD_CONST                      53: <CODE> Num
        294     LOAD_CONST                      54: 'Num'
        296     MAKE_FUNCTION                   0
        298     LOAD_CONST                      54: 'Num'
        300     LOAD_NAME                       26: Constant
        302     LOAD_NAME                       33: _ABC
        304     LOAD_CONST                      55: ('metaclass',)
        306     CALL_FUNCTION_KW                4
        308     STORE_NAME                      35: Num
        310     LOAD_BUILD_CLASS                
        312     LOAD_CONST                      56: <CODE> Str
        314     LOAD_CONST                      57: 'Str'
        316     MAKE_FUNCTION                   0
        318     LOAD_CONST                      57: 'Str'
        320     LOAD_NAME                       26: Constant
        322     LOAD_NAME                       33: _ABC
        324     LOAD_CONST                      55: ('metaclass',)
        326     CALL_FUNCTION_KW                4
        328     STORE_NAME                      36: Str
        330     LOAD_BUILD_CLASS                
        332     LOAD_CONST                      58: <CODE> Bytes
        334     LOAD_CONST                      59: 'Bytes'
        336     MAKE_FUNCTION                   0
        338     LOAD_CONST                      59: 'Bytes'
        340     LOAD_NAME                       26: Constant
        342     LOAD_NAME                       33: _ABC
        344     LOAD_CONST                      55: ('metaclass',)
        346     CALL_FUNCTION_KW                4
        348     STORE_NAME                      37: Bytes
        350     LOAD_BUILD_CLASS                
        352     LOAD_CONST                      60: <CODE> NameConstant
        354     LOAD_CONST                      61: 'NameConstant'
        356     MAKE_FUNCTION                   0
        358     LOAD_CONST                      61: 'NameConstant'
        360     LOAD_NAME                       26: Constant
        362     LOAD_NAME                       33: _ABC
        364     LOAD_CONST                      55: ('metaclass',)
        366     CALL_FUNCTION_KW                4
        368     STORE_NAME                      38: NameConstant
        370     LOAD_BUILD_CLASS                
        372     LOAD_CONST                      62: <CODE> Ellipsis
        374     LOAD_CONST                      63: 'Ellipsis'
        376     MAKE_FUNCTION                   0
        378     LOAD_CONST                      63: 'Ellipsis'
        380     LOAD_NAME                       26: Constant
        382     LOAD_NAME                       33: _ABC
        384     LOAD_CONST                      55: ('metaclass',)
        386     CALL_FUNCTION_KW                4
        388     STORE_NAME                      39: Ellipsis
        390     LOAD_NAME                       35: Num
        392     LOAD_NAME                       40: int
        394     LOAD_NAME                       41: float
        396     LOAD_NAME                       42: complex
        398     BUILD_TUPLE                     3
        400     LOAD_NAME                       36: Str
        402     LOAD_NAME                       43: str
        404     BUILD_TUPLE                     1
        406     LOAD_NAME                       37: Bytes
        408     LOAD_NAME                       44: bytes
        410     BUILD_TUPLE                     1
        412     LOAD_NAME                       38: NameConstant
        414     LOAD_NAME                       32: type
        416     LOAD_CONST                      2: None
        418     CALL_FUNCTION                   1
        420     LOAD_NAME                       45: bool
        422     BUILD_TUPLE                     2
        424     LOAD_NAME                       39: Ellipsis
        426     LOAD_NAME                       32: type
        428     LOAD_CONST                      64: ...
        430     CALL_FUNCTION                   1
        432     BUILD_TUPLE                     1
        434     BUILD_MAP                       5
        436     STORE_NAME                      46: _const_types
        438     LOAD_NAME                       35: Num
        440     LOAD_NAME                       45: bool
        442     BUILD_TUPLE                     1
        444     BUILD_MAP                       1
        446     STORE_NAME                      47: _const_types_not
        448     LOAD_NAME                       45: bool
        450     LOAD_CONST                      61: 'NameConstant'
        452     LOAD_NAME                       32: type
        454     LOAD_CONST                      2: None
        456     CALL_FUNCTION                   1
        458     LOAD_CONST                      61: 'NameConstant'
        460     LOAD_NAME                       40: int
        462     LOAD_CONST                      54: 'Num'
        464     LOAD_NAME                       41: float
        466     LOAD_CONST                      54: 'Num'
        468     LOAD_NAME                       42: complex
        470     LOAD_CONST                      54: 'Num'
        472     LOAD_NAME                       43: str
        474     LOAD_CONST                      57: 'Str'
        476     LOAD_NAME                       44: bytes
        478     LOAD_CONST                      59: 'Bytes'
        480     LOAD_NAME                       32: type
        482     LOAD_CONST                      64: ...
        484     CALL_FUNCTION                   1
        486     LOAD_CONST                      63: 'Ellipsis'
        488     BUILD_MAP                       8
        490     STORE_NAME                      48: _const_node_type_names
        492     LOAD_BUILD_CLASS                
        494     LOAD_CONST                      65: <CODE> slice
        496     LOAD_CONST                      66: 'slice'
        498     MAKE_FUNCTION                   0
        500     LOAD_CONST                      66: 'slice'
        502     LOAD_NAME                       49: AST
        504     CALL_FUNCTION                   3
        506     STORE_NAME                      50: slice
        508     LOAD_BUILD_CLASS                
        510     LOAD_CONST                      67: <CODE> Index
        512     LOAD_CONST                      68: 'Index'
        514     MAKE_FUNCTION                   0
        516     LOAD_CONST                      68: 'Index'
        518     LOAD_NAME                       50: slice
        520     CALL_FUNCTION                   3
        522     STORE_NAME                      51: Index
        524     LOAD_BUILD_CLASS                
        526     LOAD_CONST                      69: <CODE> ExtSlice
        528     LOAD_CONST                      70: 'ExtSlice'
        530     MAKE_FUNCTION                   0
        532     LOAD_CONST                      70: 'ExtSlice'
        534     LOAD_NAME                       50: slice
        536     CALL_FUNCTION                   3
        538     STORE_NAME                      52: ExtSlice
        540     LOAD_NAME                       25: hasattr
        542     LOAD_NAME                       53: Tuple
        544     LOAD_CONST                      71: 'dims'
        546     CALL_FUNCTION                   2
        548     POP_JUMP_IF_TRUE                290 (to 580)
        552     LOAD_CONST                      72: <CODE> _dims_getter
        554     LOAD_CONST                      73: '_dims_getter'
        556     MAKE_FUNCTION                   0
        558     STORE_NAME                      54: _dims_getter
        560     LOAD_CONST                      74: <CODE> _dims_setter
        562     LOAD_CONST                      75: '_dims_setter'
        564     MAKE_FUNCTION                   0
        566     STORE_NAME                      55: _dims_setter
        568     LOAD_NAME                       29: property
        570     LOAD_NAME                       54: _dims_getter
        572     LOAD_NAME                       55: _dims_setter
        574     CALL_FUNCTION                   2
        576     LOAD_NAME                       53: Tuple
        578     STORE_ATTR                      56: dims
        580     LOAD_BUILD_CLASS                
        582     LOAD_CONST                      76: <CODE> Suite
        584     LOAD_CONST                      77: 'Suite'
        586     MAKE_FUNCTION                   0
        588     LOAD_CONST                      77: 'Suite'
        590     LOAD_NAME                       57: mod
        592     CALL_FUNCTION                   3
        594     STORE_NAME                      58: Suite
        596     LOAD_BUILD_CLASS                
        598     LOAD_CONST                      78: <CODE> AugLoad
        600     LOAD_CONST                      79: 'AugLoad'
        602     MAKE_FUNCTION                   0
        604     LOAD_CONST                      79: 'AugLoad'
        606     LOAD_NAME                       59: expr_context
        608     CALL_FUNCTION                   3
        610     STORE_NAME                      60: AugLoad
        612     LOAD_BUILD_CLASS                
        614     LOAD_CONST                      80: <CODE> AugStore
        616     LOAD_CONST                      81: 'AugStore'
        618     MAKE_FUNCTION                   0
        620     LOAD_CONST                      81: 'AugStore'
        622     LOAD_NAME                       59: expr_context
        624     CALL_FUNCTION                   3
        626     STORE_NAME                      61: AugStore
        628     LOAD_BUILD_CLASS                
        630     LOAD_CONST                      82: <CODE> Param
        632     LOAD_CONST                      83: 'Param'
        634     MAKE_FUNCTION                   0
        636     LOAD_CONST                      83: 'Param'
        638     LOAD_NAME                       59: expr_context
        640     CALL_FUNCTION                   3
        642     STORE_NAME                      62: Param
        644     LOAD_CONST                      84: '1e'
        646     LOAD_NAME                       63: repr
        648     LOAD_NAME                       1: sys
        650     LOAD_ATTR                       64: float_info
        652     LOAD_ATTR                       65: max_10_exp
        654     LOAD_CONST                      22: 1
        656     BINARY_ADD                      
        658     CALL_FUNCTION                   1
        660     BINARY_ADD                      
        662     STORE_NAME                      66: _INFSTR
        664     LOAD_BUILD_CLASS                
        666     LOAD_CONST                      85: <CODE> _Precedence
        668     LOAD_CONST                      86: '_Precedence'
        670     MAKE_FUNCTION                   0
        672     LOAD_CONST                      86: '_Precedence'
        674     LOAD_NAME                       7: IntEnum
        676     CALL_FUNCTION                   3
        678     STORE_NAME                      67: _Precedence
        680     LOAD_CONST                      87: ("'", '"')
        682     STORE_NAME                      68: _SINGLE_QUOTES
        684     LOAD_CONST                      88: ('"""', "'''")
        686     STORE_NAME                      69: _MULTI_QUOTES
        688     BUILD_LIST                      0
        690     LOAD_NAME                       68: _SINGLE_QUOTES
        692     LIST_EXTEND                     1
        694     LOAD_NAME                       69: _MULTI_QUOTES
        696     LIST_EXTEND                     1
        698     LIST_TO_TUPLE                   
        700     STORE_NAME                      70: _ALL_QUOTES
        702     LOAD_BUILD_CLASS                
        704     LOAD_CONST                      89: <CODE> _Unparser
        706     LOAD_CONST                      90: '_Unparser'
        708     MAKE_FUNCTION                   0
        710     LOAD_CONST                      90: '_Unparser'
        712     LOAD_NAME                       23: NodeVisitor
        714     CALL_FUNCTION                   3
        716     STORE_NAME                      71: _Unparser
        718     LOAD_CONST                      91: <CODE> unparse
        720     LOAD_CONST                      92: 'unparse'
        722     MAKE_FUNCTION                   0
        724     STORE_NAME                      72: unparse
        726     LOAD_CONST                      93: <CODE> main
        728     LOAD_CONST                      94: 'main'
        730     MAKE_FUNCTION                   0
        732     STORE_NAME                      73: main
        734     LOAD_NAME                       74: __name__
        736     LOAD_CONST                      95: '__main__'
        738     COMPARE_OP                      2 (==)
        740     POP_JUMP_IF_FALSE               377 (to 754)
        744     LOAD_NAME                       73: main
        746     CALL_FUNCTION                   0
        748     POP_TOP                         
        750     LOAD_CONST                      2: None
        752     RETURN_VALUE                    
        754     LOAD_CONST                      2: None
        756     RETURN_VALUE                    
