contextlib.pyc (Python 3.10)
[Code]
    File Name: contextlib.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 6
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        'abc'
        'sys'
        '_collections_abc'
        'collections'
        'deque'
        'functools'
        'wraps'
        'types'
        'MethodType'
        'GenericAlias'
        '__all__'
        'ABC'
        'AbstractContextManager'
        'AbstractAsyncContextManager'
        'object'
        'ContextDecorator'
        'AsyncContextDecorator'
        '_GeneratorContextManagerBase'
        '_GeneratorContextManager'
        '_AsyncGeneratorContextManager'
        'contextmanager'
        'asynccontextmanager'
        'closing'
        'aclosing'
        '_RedirectStream'
        'redirect_stdout'
        'redirect_stderr'
        'suppress'
        '_BaseExitStack'
        'ExitStack'
        'AsyncExitStack'
        'nullcontext'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        'Utilities for with-statement contexts.  See PEP 343.'
        0
        None
        (
            'deque'
        )
        (
            'wraps'
        )
        (
            'MethodType'
            'GenericAlias'
        )
        (
            'asynccontextmanager'
            'contextmanager'
            'closing'
            'nullcontext'
            'AbstractContextManager'
            'AbstractAsyncContextManager'
            'AsyncExitStack'
            'ContextDecorator'
            'ExitStack'
            'redirect_stdout'
            'redirect_stderr'
            'suppress'
            'aclosing'
        )
        [Code]
            File Name: contextlib.py
            Object Name: AbstractContextManager
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'classmethod'
                'GenericAlias'
                '__class_getitem__'
                '__enter__'
                'abc'
                'abstractmethod'
                '__exit__'
                '__subclasshook__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'AbstractContextManager'
                'An abstract base class for context managers.'
                [Code]
                    File Name: contextlib.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return `self` upon entering the runtime context.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       RETURN_VALUE                    
                'AbstractContextManager.__enter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __exit__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'exc_type'
                        'exc_value'
                        'traceback'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Raise any exception triggered within the runtime context.'
                        None
                    [Disassembly]
                        0       LOAD_CONST                      1: None
                        2       RETURN_VALUE                    
                'AbstractContextManager.__exit__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __subclasshook__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'AbstractContextManager'
                        '_collections_abc'
                        '_check_methods'
                        'NotImplemented'
                    [Var Names]
                        'cls'
                        'C'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '__enter__'
                        '__exit__'
                    [Disassembly]
                        0       LOAD_FAST                       0: cls
                        2       LOAD_GLOBAL                     0: AbstractContextManager
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               11 (to 22)
                        8       LOAD_GLOBAL                     1: _collections_abc
                        10      LOAD_METHOD                     2: _check_methods
                        12      LOAD_FAST                       1: C
                        14      LOAD_CONST                      1: '__enter__'
                        16      LOAD_CONST                      2: '__exit__'
                        18      CALL_METHOD                     3
                        20      RETURN_VALUE                    
                        22      LOAD_GLOBAL                     3: NotImplemented
                        24      RETURN_VALUE                    
                'AbstractContextManager.__subclasshook__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'AbstractContextManager'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An abstract base class for context managers.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: classmethod
                14      LOAD_NAME                       5: GenericAlias
                16      CALL_FUNCTION                   1
                18      STORE_NAME                      6: __class_getitem__
                20      LOAD_CONST                      2: <CODE> __enter__
                22      LOAD_CONST                      3: 'AbstractContextManager.__enter__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      7: __enter__
                28      LOAD_NAME                       8: abc
                30      LOAD_ATTR                       9: abstractmethod
                32      LOAD_CONST                      4: <CODE> __exit__
                34      LOAD_CONST                      5: 'AbstractContextManager.__exit__'
                36      MAKE_FUNCTION                   0
                38      CALL_FUNCTION                   1
                40      STORE_NAME                      10: __exit__
                42      LOAD_NAME                       4: classmethod
                44      LOAD_CONST                      6: <CODE> __subclasshook__
                46      LOAD_CONST                      7: 'AbstractContextManager.__subclasshook__'
                48      MAKE_FUNCTION                   0
                50      CALL_FUNCTION                   1
                52      STORE_NAME                      11: __subclasshook__
                54      LOAD_CONST                      8: None
                56      RETURN_VALUE                    
        'AbstractContextManager'
        [Code]
            File Name: contextlib.py
            Object Name: AbstractAsyncContextManager
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'classmethod'
                'GenericAlias'
                '__class_getitem__'
                '__aenter__'
                'abc'
                'abstractmethod'
                '__aexit__'
                '__subclasshook__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'AbstractAsyncContextManager'
                'An abstract base class for asynchronous context managers.'
                [Code]
                    File Name: contextlib.py
                    Object Name: __aenter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x000000C3 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_COROUTINE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return `self` upon entering the runtime context.'
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_FAST                       0: self
                        4       RETURN_VALUE                    
                'AbstractAsyncContextManager.__aenter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __aexit__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 1
                    Flags: 0x000000C3 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_COROUTINE)
                    [Names]
                    [Var Names]
                        'self'
                        'exc_type'
                        'exc_value'
                        'traceback'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Raise any exception triggered within the runtime context.'
                        None
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_CONST                      1: None
                        4       RETURN_VALUE                    
                'AbstractAsyncContextManager.__aexit__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __subclasshook__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'AbstractAsyncContextManager'
                        '_collections_abc'
                        '_check_methods'
                        'NotImplemented'
                    [Var Names]
                        'cls'
                        'C'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '__aenter__'
                        '__aexit__'
                    [Disassembly]
                        0       LOAD_FAST                       0: cls
                        2       LOAD_GLOBAL                     0: AbstractAsyncContextManager
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               11 (to 22)
                        8       LOAD_GLOBAL                     1: _collections_abc
                        10      LOAD_METHOD                     2: _check_methods
                        12      LOAD_FAST                       1: C
                        14      LOAD_CONST                      1: '__aenter__'
                        16      LOAD_CONST                      2: '__aexit__'
                        18      CALL_METHOD                     3
                        20      RETURN_VALUE                    
                        22      LOAD_GLOBAL                     3: NotImplemented
                        24      RETURN_VALUE                    
                'AbstractAsyncContextManager.__subclasshook__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'AbstractAsyncContextManager'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An abstract base class for asynchronous context managers.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: classmethod
                14      LOAD_NAME                       5: GenericAlias
                16      CALL_FUNCTION                   1
                18      STORE_NAME                      6: __class_getitem__
                20      LOAD_CONST                      2: <CODE> __aenter__
                22      LOAD_CONST                      3: 'AbstractAsyncContextManager.__aenter__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      7: __aenter__
                28      LOAD_NAME                       8: abc
                30      LOAD_ATTR                       9: abstractmethod
                32      LOAD_CONST                      4: <CODE> __aexit__
                34      LOAD_CONST                      5: 'AbstractAsyncContextManager.__aexit__'
                36      MAKE_FUNCTION                   0
                38      CALL_FUNCTION                   1
                40      STORE_NAME                      10: __aexit__
                42      LOAD_NAME                       4: classmethod
                44      LOAD_CONST                      6: <CODE> __subclasshook__
                46      LOAD_CONST                      7: 'AbstractAsyncContextManager.__subclasshook__'
                48      MAKE_FUNCTION                   0
                50      CALL_FUNCTION                   1
                52      STORE_NAME                      11: __subclasshook__
                54      LOAD_CONST                      8: None
                56      RETURN_VALUE                    
        'AbstractAsyncContextManager'
        [Code]
            File Name: contextlib.py
            Object Name: ContextDecorator
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '_recreate_cm'
                '__call__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ContextDecorator'
                'A base class or mixin that enables context managers to work as decorators.'
                [Code]
                    File Name: contextlib.py
                    Object Name: _recreate_cm
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return a recreated instance of self.\n\n        Allows an otherwise one-shot context manager like\n        _GeneratorContextManager to support use as\n        a decorator via implicit recreation.\n\n        This is a private interface just for _GeneratorContextManager.\n        See issue #11647 for details.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       RETURN_VALUE                    
                'ContextDecorator._recreate_cm'
                [Code]
                    File Name: contextlib.py
                    Object Name: __call__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'wraps'
                    [Var Names]
                        'self'
                        'func'
                        'inner'
                    [Free Vars]
                    [Cell Vars]
                        'func'
                        'self'
                    [Constants]
                        None
                        [Code]
                            File Name: contextlib.py
                            Object Name: inner
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 8
                            Flags: 0x0000001F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NESTED)
                            [Names]
                                '_recreate_cm'
                            [Var Names]
                                'args'
                                'kwds'
                            [Free Vars]
                                'func'
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_DEREF                      1: self
                                2       LOAD_METHOD                     0: _recreate_cm
                                4       CALL_METHOD                     0
                                6       SETUP_WITH                      15 (to 38)
                                8       POP_TOP                         
                                10      LOAD_DEREF                      0: func
                                12      LOAD_FAST                       0: args
                                14      BUILD_MAP                       0
                                16      LOAD_FAST                       1: kwds
                                18      DICT_MERGE                      1
                                20      CALL_FUNCTION_EX                1
                                22      POP_BLOCK                       
                                24      ROT_TWO                         
                                26      LOAD_CONST                      0: None
                                28      DUP_TOP                         
                                30      DUP_TOP                         
                                32      CALL_FUNCTION                   3
                                34      POP_TOP                         
                                36      RETURN_VALUE                    
                                38      WITH_EXCEPT_START               
                                40      POP_JUMP_IF_TRUE                22 (to 44)
                                42      RERAISE                         1
                                44      POP_TOP                         
                                46      POP_TOP                         
                                48      POP_TOP                         
                                50      POP_EXCEPT                      
                                52      POP_TOP                         
                                54      LOAD_CONST                      0: None
                                56      RETURN_VALUE                    
                        'ContextDecorator.__call__.<locals>.inner'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: wraps
                        2       LOAD_DEREF                      0: func
                        4       CALL_FUNCTION                   1
                        6       LOAD_CLOSURE                    0: func
                        8       LOAD_CLOSURE                    1: self
                        10      BUILD_TUPLE                     2
                        12      LOAD_CONST                      1: <CODE> inner
                        14      LOAD_CONST                      2: 'ContextDecorator.__call__.<locals>.inner'
                        16      MAKE_FUNCTION                   8
                        18      CALL_FUNCTION                   1
                        20      STORE_FAST                      2: inner
                        22      LOAD_FAST                       2: inner
                        24      RETURN_VALUE                    
                'ContextDecorator.__call__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ContextDecorator'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A base class or mixin that enables context managers to work as decorators.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> _recreate_cm
                14      LOAD_CONST                      3: 'ContextDecorator._recreate_cm'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: _recreate_cm
                20      LOAD_CONST                      4: <CODE> __call__
                22      LOAD_CONST                      5: 'ContextDecorator.__call__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __call__
                28      LOAD_CONST                      6: None
                30      RETURN_VALUE                    
        'ContextDecorator'
        [Code]
            File Name: contextlib.py
            Object Name: AsyncContextDecorator
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '_recreate_cm'
                '__call__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'AsyncContextDecorator'
                'A base class or mixin that enables async context managers to work as decorators.'
                [Code]
                    File Name: contextlib.py
                    Object Name: _recreate_cm
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return a recreated instance of self.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       RETURN_VALUE                    
                'AsyncContextDecorator._recreate_cm'
                [Code]
                    File Name: contextlib.py
                    Object Name: __call__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'wraps'
                    [Var Names]
                        'self'
                        'func'
                        'inner'
                    [Free Vars]
                    [Cell Vars]
                        'func'
                        'self'
                    [Constants]
                        None
                        [Code]
                            File Name: contextlib.py
                            Object Name: inner
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 9
                            Flags: 0x0000009F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NESTED | CO_COROUTINE)
                            [Names]
                                '_recreate_cm'
                            [Var Names]
                                'args'
                                'kwds'
                            [Free Vars]
                                'func'
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       1
                                2       LOAD_DEREF                      1: self
                                4       LOAD_METHOD                     0: _recreate_cm
                                6       CALL_METHOD                     0
                                8       BEFORE_ASYNC_WITH               
                                10      GET_AWAITABLE                   
                                12      LOAD_CONST                      0: None
                                14      YIELD_FROM                      
                                16      SETUP_ASYNC_WITH                21 (to 60)
                                18      POP_TOP                         
                                20      LOAD_DEREF                      0: func
                                22      LOAD_FAST                       0: args
                                24      BUILD_MAP                       0
                                26      LOAD_FAST                       1: kwds
                                28      DICT_MERGE                      1
                                30      CALL_FUNCTION_EX                1
                                32      GET_AWAITABLE                   
                                34      LOAD_CONST                      0: None
                                36      YIELD_FROM                      
                                38      POP_BLOCK                       
                                40      ROT_TWO                         
                                42      LOAD_CONST                      0: None
                                44      DUP_TOP                         
                                46      DUP_TOP                         
                                48      CALL_FUNCTION                   3
                                50      GET_AWAITABLE                   
                                52      LOAD_CONST                      0: None
                                54      YIELD_FROM                      
                                56      POP_TOP                         
                                58      RETURN_VALUE                    
                                60      WITH_EXCEPT_START               
                                62      GET_AWAITABLE                   
                                64      LOAD_CONST                      0: None
                                66      YIELD_FROM                      
                                68      POP_JUMP_IF_TRUE                36 (to 72)
                                70      RERAISE                         1
                                72      POP_TOP                         
                                74      POP_TOP                         
                                76      POP_TOP                         
                                78      POP_EXCEPT                      
                                80      POP_TOP                         
                                82      LOAD_CONST                      0: None
                                84      RETURN_VALUE                    
                        'AsyncContextDecorator.__call__.<locals>.inner'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: wraps
                        2       LOAD_DEREF                      0: func
                        4       CALL_FUNCTION                   1
                        6       LOAD_CLOSURE                    0: func
                        8       LOAD_CLOSURE                    1: self
                        10      BUILD_TUPLE                     2
                        12      LOAD_CONST                      1: <CODE> inner
                        14      LOAD_CONST                      2: 'AsyncContextDecorator.__call__.<locals>.inner'
                        16      MAKE_FUNCTION                   8
                        18      CALL_FUNCTION                   1
                        20      STORE_FAST                      2: inner
                        22      LOAD_FAST                       2: inner
                        24      RETURN_VALUE                    
                'AsyncContextDecorator.__call__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'AsyncContextDecorator'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A base class or mixin that enables async context managers to work as decorators.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> _recreate_cm
                14      LOAD_CONST                      3: 'AsyncContextDecorator._recreate_cm'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: _recreate_cm
                20      LOAD_CONST                      4: <CODE> __call__
                22      LOAD_CONST                      5: 'AsyncContextDecorator.__call__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __call__
                28      LOAD_CONST                      6: None
                30      RETURN_VALUE                    
        'AsyncContextDecorator'
        [Code]
            File Name: contextlib.py
            Object Name: _GeneratorContextManagerBase
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '_recreate_cm'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_GeneratorContextManagerBase'
                'Shared functionality for @contextmanager and @asynccontextmanager.'
                [Code]
                    File Name: contextlib.py
                    Object Name: __init__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'gen'
                        'func'
                        'args'
                        'kwds'
                        'getattr'
                        'type'
                        '__doc__'
                    [Var Names]
                        'self'
                        'func'
                        'args'
                        'kwds'
                        'doc'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '__doc__'
                    [Disassembly]
                        0       LOAD_FAST                       1: func
                        2       LOAD_FAST                       2: args
                        4       BUILD_MAP                       0
                        6       LOAD_FAST                       3: kwds
                        8       DICT_MERGE                      1
                        10      CALL_FUNCTION_EX                1
                        12      LOAD_FAST                       0: self
                        14      STORE_ATTR                      0: gen
                        16      LOAD_FAST                       1: func
                        18      LOAD_FAST                       2: args
                        20      LOAD_FAST                       3: kwds
                        22      ROT_THREE                       
                        24      ROT_TWO                         
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      1: func
                        30      LOAD_FAST                       0: self
                        32      STORE_ATTR                      2: args
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      3: kwds
                        38      LOAD_GLOBAL                     4: getattr
                        40      LOAD_FAST                       1: func
                        42      LOAD_CONST                      1: '__doc__'
                        44      LOAD_CONST                      0: None
                        46      CALL_FUNCTION                   3
                        48      STORE_FAST                      4: doc
                        50      LOAD_FAST                       4: doc
                        52      LOAD_CONST                      0: None
                        54      IS_OP                           0 (is)
                        56      POP_JUMP_IF_FALSE               34 (to 68)
                        58      LOAD_GLOBAL                     5: type
                        60      LOAD_FAST                       0: self
                        62      CALL_FUNCTION                   1
                        64      LOAD_ATTR                       6: __doc__
                        66      STORE_FAST                      4: doc
                        68      LOAD_FAST                       4: doc
                        70      LOAD_FAST                       0: self
                        72      STORE_ATTR                      6: __doc__
                        74      LOAD_CONST                      0: None
                        76      RETURN_VALUE                    
                '_GeneratorContextManagerBase.__init__'
                [Code]
                    File Name: contextlib.py
                    Object Name: _recreate_cm
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__class__'
                        'func'
                        'args'
                        'kwds'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: __class__
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: func
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: args
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: kwds
                        16      CALL_METHOD                     3
                        18      RETURN_VALUE                    
                '_GeneratorContextManagerBase._recreate_cm'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_GeneratorContextManagerBase'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Shared functionality for @contextmanager and @asynccontextmanager.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: '_GeneratorContextManagerBase.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> _recreate_cm
                22      LOAD_CONST                      5: '_GeneratorContextManagerBase._recreate_cm'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: _recreate_cm
                28      LOAD_CONST                      6: None
                30      RETURN_VALUE                    
        '_GeneratorContextManagerBase'
        [Code]
            File Name: contextlib.py
            Object Name: _GeneratorContextManager
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__enter__'
                '__exit__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_GeneratorContextManager'
                'Helper for @contextmanager decorator.'
                [Code]
                    File Name: contextlib.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'args'
                        'kwds'
                        'func'
                        'next'
                        'gen'
                        'StopIteration'
                        'RuntimeError'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        "generator didn't yield"
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       DELETE_ATTR                     0: args
                        4       LOAD_FAST                       0: self
                        6       DELETE_ATTR                     1: kwds
                        8       LOAD_FAST                       0: self
                        10      DELETE_ATTR                     2: func
                        12      SETUP_FINALLY                   6 (to 26)
                        14      LOAD_GLOBAL                     3: next
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       4: gen
                        20      CALL_FUNCTION                   1
                        22      POP_BLOCK                       
                        24      RETURN_VALUE                    
                        26      DUP_TOP                         
                        28      LOAD_GLOBAL                     5: StopIteration
                        30      JUMP_IF_NOT_EXC_MATCH           24 (to 48)
                        32      POP_TOP                         
                        34      POP_TOP                         
                        36      POP_TOP                         
                        38      LOAD_GLOBAL                     6: RuntimeError
                        40      LOAD_CONST                      1: "generator didn't yield"
                        42      CALL_FUNCTION                   1
                        44      LOAD_CONST                      0: None
                        46      RAISE_VARARGS                   2
                        48      RERAISE                         0
                '_GeneratorContextManager.__enter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __exit__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'next'
                        'gen'
                        'StopIteration'
                        'RuntimeError'
                        'throw'
                        'isinstance'
                        '__cause__'
                        'BaseException'
                    [Var Names]
                        'self'
                        'typ'
                        'value'
                        'traceback'
                        'exc'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        "generator didn't stop"
                        "generator didn't stop after throw()"
                    [Disassembly]
                        0       LOAD_FAST                       1: typ
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               25 (to 50)
                        8       SETUP_FINALLY                   10 (to 30)
                        10      LOAD_GLOBAL                     0: next
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: gen
                        16      CALL_FUNCTION                   1
                        18      POP_TOP                         
                        20      POP_BLOCK                       
                        22      LOAD_GLOBAL                     3: RuntimeError
                        24      LOAD_CONST                      2: "generator didn't stop"
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      DUP_TOP                         
                        32      LOAD_GLOBAL                     2: StopIteration
                        34      JUMP_IF_NOT_EXC_MATCH           24 (to 48)
                        36      POP_TOP                         
                        38      POP_TOP                         
                        40      POP_TOP                         
                        42      POP_EXCEPT                      
                        44      LOAD_CONST                      1: False
                        46      RETURN_VALUE                    
                        48      RERAISE                         0
                        50      LOAD_FAST                       2: value
                        52      LOAD_CONST                      0: None
                        54      IS_OP                           0 (is)
                        56      POP_JUMP_IF_FALSE               32 (to 64)
                        58      LOAD_FAST                       1: typ
                        60      CALL_FUNCTION                   0
                        62      STORE_FAST                      2: value
                        64      SETUP_FINALLY                   13 (to 92)
                        66      LOAD_FAST                       0: self
                        68      LOAD_ATTR                       1: gen
                        70      LOAD_METHOD                     4: throw
                        72      LOAD_FAST                       1: typ
                        74      LOAD_FAST                       2: value
                        76      LOAD_FAST                       3: traceback
                        78      CALL_METHOD                     3
                        80      POP_TOP                         
                        82      POP_BLOCK                       
                        84      LOAD_GLOBAL                     3: RuntimeError
                        86      LOAD_CONST                      3: "generator didn't stop after throw()"
                        88      CALL_FUNCTION                   1
                        90      RAISE_VARARGS                   1
                        92      DUP_TOP                         
                        94      LOAD_GLOBAL                     2: StopIteration
                        96      JUMP_IF_NOT_EXC_MATCH           67 (to 134)
                        98      POP_TOP                         
                        100     STORE_FAST                      4: exc
                        102     POP_TOP                         
                        104     SETUP_FINALLY                   10 (to 126)
                        106     LOAD_FAST                       4: exc
                        108     LOAD_FAST                       2: value
                        110     IS_OP                           1 (is not)
                        112     POP_BLOCK                       
                        114     ROT_FOUR                        
                        116     POP_EXCEPT                      
                        118     LOAD_CONST                      0: None
                        120     STORE_FAST                      4: exc
                        122     DELETE_FAST                     4: exc
                        124     RETURN_VALUE                    
                        126     LOAD_CONST                      0: None
                        128     STORE_FAST                      4: exc
                        130     DELETE_FAST                     4: exc
                        132     RERAISE                         1
                        134     DUP_TOP                         
                        136     LOAD_GLOBAL                     3: RuntimeError
                        138     JUMP_IF_NOT_EXC_MATCH           107 (to 214)
                        140     POP_TOP                         
                        142     STORE_FAST                      4: exc
                        144     POP_TOP                         
                        146     SETUP_FINALLY                   29 (to 206)
                        148     LOAD_FAST                       4: exc
                        150     LOAD_FAST                       2: value
                        152     IS_OP                           0 (is)
                        154     POP_JUMP_IF_FALSE               85 (to 170)
                        156     POP_BLOCK                       
                        158     POP_EXCEPT                      
                        160     LOAD_CONST                      0: None
                        162     STORE_FAST                      4: exc
                        164     DELETE_FAST                     4: exc
                        166     LOAD_CONST                      1: False
                        168     RETURN_VALUE                    
                        170     LOAD_GLOBAL                     5: isinstance
                        172     LOAD_FAST                       2: value
                        174     LOAD_GLOBAL                     2: StopIteration
                        176     CALL_FUNCTION                   2
                        178     POP_JUMP_IF_FALSE               102 (to 204)
                        180     LOAD_FAST                       4: exc
                        182     LOAD_ATTR                       6: __cause__
                        184     LOAD_FAST                       2: value
                        186     IS_OP                           0 (is)
                        188     POP_JUMP_IF_FALSE               102 (to 204)
                        190     POP_BLOCK                       
                        192     POP_EXCEPT                      
                        194     LOAD_CONST                      0: None
                        196     STORE_FAST                      4: exc
                        198     DELETE_FAST                     4: exc
                        200     LOAD_CONST                      1: False
                        202     RETURN_VALUE                    
                        204     RAISE_VARARGS                   0
                        206     LOAD_CONST                      0: None
                        208     STORE_FAST                      4: exc
                        210     DELETE_FAST                     4: exc
                        212     RERAISE                         1
                        214     DUP_TOP                         
                        216     LOAD_GLOBAL                     7: BaseException
                        218     JUMP_IF_NOT_EXC_MATCH           130 (to 260)
                        220     POP_TOP                         
                        222     STORE_FAST                      4: exc
                        224     POP_TOP                         
                        226     SETUP_FINALLY                   12 (to 252)
                        228     LOAD_FAST                       4: exc
                        230     LOAD_FAST                       2: value
                        232     IS_OP                           1 (is not)
                        234     POP_JUMP_IF_FALSE               119 (to 238)
                        236     RAISE_VARARGS                   0
                        238     POP_BLOCK                       
                        240     POP_EXCEPT                      
                        242     LOAD_CONST                      0: None
                        244     STORE_FAST                      4: exc
                        246     DELETE_FAST                     4: exc
                        248     LOAD_CONST                      1: False
                        250     RETURN_VALUE                    
                        252     LOAD_CONST                      0: None
                        254     STORE_FAST                      4: exc
                        256     DELETE_FAST                     4: exc
                        258     RERAISE                         1
                        260     RERAISE                         0
                '_GeneratorContextManager.__exit__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_GeneratorContextManager'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Helper for @contextmanager decorator.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __enter__
                14      LOAD_CONST                      3: '_GeneratorContextManager.__enter__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __enter__
                20      LOAD_CONST                      4: <CODE> __exit__
                22      LOAD_CONST                      5: '_GeneratorContextManager.__exit__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __exit__
                28      LOAD_CONST                      6: None
                30      RETURN_VALUE                    
        '_GeneratorContextManager'
        [Code]
            File Name: contextlib.py
            Object Name: _AsyncGeneratorContextManager
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__aenter__'
                '__aexit__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_AsyncGeneratorContextManager'
                'Helper for @asynccontextmanager decorator.'
                [Code]
                    File Name: contextlib.py
                    Object Name: __aenter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x000000C3 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_COROUTINE)
                    [Names]
                        'args'
                        'kwds'
                        'func'
                        'anext'
                        'gen'
                        'StopAsyncIteration'
                        'RuntimeError'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        "generator didn't yield"
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_FAST                       0: self
                        4       DELETE_ATTR                     0: args
                        6       LOAD_FAST                       0: self
                        8       DELETE_ATTR                     1: kwds
                        10      LOAD_FAST                       0: self
                        12      DELETE_ATTR                     2: func
                        14      SETUP_FINALLY                   9 (to 34)
                        16      LOAD_GLOBAL                     3: anext
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       4: gen
                        22      CALL_FUNCTION                   1
                        24      GET_AWAITABLE                   
                        26      LOAD_CONST                      0: None
                        28      YIELD_FROM                      
                        30      POP_BLOCK                       
                        32      RETURN_VALUE                    
                        34      DUP_TOP                         
                        36      LOAD_GLOBAL                     5: StopAsyncIteration
                        38      JUMP_IF_NOT_EXC_MATCH           28 (to 56)
                        40      POP_TOP                         
                        42      POP_TOP                         
                        44      POP_TOP                         
                        46      LOAD_GLOBAL                     6: RuntimeError
                        48      LOAD_CONST                      1: "generator didn't yield"
                        50      CALL_FUNCTION                   1
                        52      LOAD_CONST                      0: None
                        54      RAISE_VARARGS                   2
                        56      RERAISE                         0
                '_AsyncGeneratorContextManager.__aenter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __aexit__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 10
                    Flags: 0x000000C3 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_COROUTINE)
                    [Names]
                        'anext'
                        'gen'
                        'StopAsyncIteration'
                        'RuntimeError'
                        'athrow'
                        'isinstance'
                        'StopIteration'
                        '__cause__'
                        'BaseException'
                    [Var Names]
                        'self'
                        'typ'
                        'value'
                        'traceback'
                        'exc'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        "generator didn't stop"
                        "generator didn't stop after athrow()"
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_FAST                       1: typ
                        4       LOAD_CONST                      0: None
                        6       IS_OP                           0 (is)
                        8       POP_JUMP_IF_FALSE               29 (to 58)
                        10      SETUP_FINALLY                   13 (to 38)
                        12      LOAD_GLOBAL                     0: anext
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: gen
                        18      CALL_FUNCTION                   1
                        20      GET_AWAITABLE                   
                        22      LOAD_CONST                      0: None
                        24      YIELD_FROM                      
                        26      POP_TOP                         
                        28      POP_BLOCK                       
                        30      LOAD_GLOBAL                     3: RuntimeError
                        32      LOAD_CONST                      2: "generator didn't stop"
                        34      CALL_FUNCTION                   1
                        36      RAISE_VARARGS                   1
                        38      DUP_TOP                         
                        40      LOAD_GLOBAL                     2: StopAsyncIteration
                        42      JUMP_IF_NOT_EXC_MATCH           28 (to 56)
                        44      POP_TOP                         
                        46      POP_TOP                         
                        48      POP_TOP                         
                        50      POP_EXCEPT                      
                        52      LOAD_CONST                      1: False
                        54      RETURN_VALUE                    
                        56      RERAISE                         0
                        58      LOAD_FAST                       2: value
                        60      LOAD_CONST                      0: None
                        62      IS_OP                           0 (is)
                        64      POP_JUMP_IF_FALSE               36 (to 72)
                        66      LOAD_FAST                       1: typ
                        68      CALL_FUNCTION                   0
                        70      STORE_FAST                      2: value
                        72      SETUP_FINALLY                   16 (to 106)
                        74      LOAD_FAST                       0: self
                        76      LOAD_ATTR                       1: gen
                        78      LOAD_METHOD                     4: athrow
                        80      LOAD_FAST                       1: typ
                        82      LOAD_FAST                       2: value
                        84      LOAD_FAST                       3: traceback
                        86      CALL_METHOD                     3
                        88      GET_AWAITABLE                   
                        90      LOAD_CONST                      0: None
                        92      YIELD_FROM                      
                        94      POP_TOP                         
                        96      POP_BLOCK                       
                        98      LOAD_GLOBAL                     3: RuntimeError
                        100     LOAD_CONST                      3: "generator didn't stop after athrow()"
                        102     CALL_FUNCTION                   1
                        104     RAISE_VARARGS                   1
                        106     DUP_TOP                         
                        108     LOAD_GLOBAL                     2: StopAsyncIteration
                        110     JUMP_IF_NOT_EXC_MATCH           74 (to 148)
                        112     POP_TOP                         
                        114     STORE_FAST                      4: exc
                        116     POP_TOP                         
                        118     SETUP_FINALLY                   10 (to 140)
                        120     LOAD_FAST                       4: exc
                        122     LOAD_FAST                       2: value
                        124     IS_OP                           1 (is not)
                        126     POP_BLOCK                       
                        128     ROT_FOUR                        
                        130     POP_EXCEPT                      
                        132     LOAD_CONST                      0: None
                        134     STORE_FAST                      4: exc
                        136     DELETE_FAST                     4: exc
                        138     RETURN_VALUE                    
                        140     LOAD_CONST                      0: None
                        142     STORE_FAST                      4: exc
                        144     DELETE_FAST                     4: exc
                        146     RERAISE                         1
                        148     DUP_TOP                         
                        150     LOAD_GLOBAL                     3: RuntimeError
                        152     JUMP_IF_NOT_EXC_MATCH           116 (to 232)
                        154     POP_TOP                         
                        156     STORE_FAST                      4: exc
                        158     POP_TOP                         
                        160     SETUP_FINALLY                   31 (to 224)
                        162     LOAD_FAST                       4: exc
                        164     LOAD_FAST                       2: value
                        166     IS_OP                           0 (is)
                        168     POP_JUMP_IF_FALSE               92 (to 184)
                        170     POP_BLOCK                       
                        172     POP_EXCEPT                      
                        174     LOAD_CONST                      0: None
                        176     STORE_FAST                      4: exc
                        178     DELETE_FAST                     4: exc
                        180     LOAD_CONST                      1: False
                        182     RETURN_VALUE                    
                        184     LOAD_GLOBAL                     5: isinstance
                        186     LOAD_FAST                       2: value
                        188     LOAD_GLOBAL                     6: StopIteration
                        190     LOAD_GLOBAL                     2: StopAsyncIteration
                        192     BUILD_TUPLE                     2
                        194     CALL_FUNCTION                   2
                        196     POP_JUMP_IF_FALSE               111 (to 222)
                        198     LOAD_FAST                       4: exc
                        200     LOAD_ATTR                       7: __cause__
                        202     LOAD_FAST                       2: value
                        204     IS_OP                           0 (is)
                        206     POP_JUMP_IF_FALSE               111 (to 222)
                        208     POP_BLOCK                       
                        210     POP_EXCEPT                      
                        212     LOAD_CONST                      0: None
                        214     STORE_FAST                      4: exc
                        216     DELETE_FAST                     4: exc
                        218     LOAD_CONST                      1: False
                        220     RETURN_VALUE                    
                        222     RAISE_VARARGS                   0
                        224     LOAD_CONST                      0: None
                        226     STORE_FAST                      4: exc
                        228     DELETE_FAST                     4: exc
                        230     RERAISE                         1
                        232     DUP_TOP                         
                        234     LOAD_GLOBAL                     8: BaseException
                        236     JUMP_IF_NOT_EXC_MATCH           139 (to 278)
                        238     POP_TOP                         
                        240     STORE_FAST                      4: exc
                        242     POP_TOP                         
                        244     SETUP_FINALLY                   12 (to 270)
                        246     LOAD_FAST                       4: exc
                        248     LOAD_FAST                       2: value
                        250     IS_OP                           1 (is not)
                        252     POP_JUMP_IF_FALSE               128 (to 256)
                        254     RAISE_VARARGS                   0
                        256     POP_BLOCK                       
                        258     POP_EXCEPT                      
                        260     LOAD_CONST                      0: None
                        262     STORE_FAST                      4: exc
                        264     DELETE_FAST                     4: exc
                        266     LOAD_CONST                      1: False
                        268     RETURN_VALUE                    
                        270     LOAD_CONST                      0: None
                        272     STORE_FAST                      4: exc
                        274     DELETE_FAST                     4: exc
                        276     RERAISE                         1
                        278     RERAISE                         0
                '_AsyncGeneratorContextManager.__aexit__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_AsyncGeneratorContextManager'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Helper for @asynccontextmanager decorator.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __aenter__
                14      LOAD_CONST                      3: '_AsyncGeneratorContextManager.__aenter__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __aenter__
                20      LOAD_CONST                      4: <CODE> __aexit__
                22      LOAD_CONST                      5: '_AsyncGeneratorContextManager.__aexit__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __aexit__
                28      LOAD_CONST                      6: None
                30      RETURN_VALUE                    
        '_AsyncGeneratorContextManager'
        [Code]
            File Name: contextlib.py
            Object Name: contextmanager
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'wraps'
            [Var Names]
                'func'
                'helper'
            [Free Vars]
            [Cell Vars]
                'func'
            [Constants]
                '@contextmanager decorator.\n\n    Typical usage:\n\n        @contextmanager\n        def some_generator(<arguments>):\n            <setup>\n            try:\n                yield <value>\n            finally:\n                <cleanup>\n\n    This makes this:\n\n        with some_generator(<arguments>) as <variable>:\n            <body>\n\n    equivalent to this:\n\n        <setup>\n        try:\n            <variable> = <value>\n            <body>\n        finally:\n            <cleanup>\n    '
                [Code]
                    File Name: contextlib.py
                    Object Name: helper
                    Arg Count: 0
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x0000001F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NESTED)
                    [Names]
                        '_GeneratorContextManager'
                    [Var Names]
                        'args'
                        'kwds'
                    [Free Vars]
                        'func'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _GeneratorContextManager
                        2       LOAD_DEREF                      0: func
                        4       LOAD_FAST                       0: args
                        6       LOAD_FAST                       1: kwds
                        8       CALL_FUNCTION                   3
                        10      RETURN_VALUE                    
                'contextmanager.<locals>.helper'
            [Disassembly]
                0       LOAD_GLOBAL                     0: wraps
                2       LOAD_DEREF                      0: func
                4       CALL_FUNCTION                   1
                6       LOAD_CLOSURE                    0: func
                8       BUILD_TUPLE                     1
                10      LOAD_CONST                      1: <CODE> helper
                12      LOAD_CONST                      2: 'contextmanager.<locals>.helper'
                14      MAKE_FUNCTION                   8
                16      CALL_FUNCTION                   1
                18      STORE_FAST                      1: helper
                20      LOAD_FAST                       1: helper
                22      RETURN_VALUE                    
        'contextmanager'
        [Code]
            File Name: contextlib.py
            Object Name: asynccontextmanager
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'wraps'
            [Var Names]
                'func'
                'helper'
            [Free Vars]
            [Cell Vars]
                'func'
            [Constants]
                '@asynccontextmanager decorator.\n\n    Typical usage:\n\n        @asynccontextmanager\n        async def some_async_generator(<arguments>):\n            <setup>\n            try:\n                yield <value>\n            finally:\n                <cleanup>\n\n    This makes this:\n\n        async with some_async_generator(<arguments>) as <variable>:\n            <body>\n\n    equivalent to this:\n\n        <setup>\n        try:\n            <variable> = <value>\n            <body>\n        finally:\n            <cleanup>\n    '
                [Code]
                    File Name: contextlib.py
                    Object Name: helper
                    Arg Count: 0
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x0000001F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NESTED)
                    [Names]
                        '_AsyncGeneratorContextManager'
                    [Var Names]
                        'args'
                        'kwds'
                    [Free Vars]
                        'func'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _AsyncGeneratorContextManager
                        2       LOAD_DEREF                      0: func
                        4       LOAD_FAST                       0: args
                        6       LOAD_FAST                       1: kwds
                        8       CALL_FUNCTION                   3
                        10      RETURN_VALUE                    
                'asynccontextmanager.<locals>.helper'
            [Disassembly]
                0       LOAD_GLOBAL                     0: wraps
                2       LOAD_DEREF                      0: func
                4       CALL_FUNCTION                   1
                6       LOAD_CLOSURE                    0: func
                8       BUILD_TUPLE                     1
                10      LOAD_CONST                      1: <CODE> helper
                12      LOAD_CONST                      2: 'asynccontextmanager.<locals>.helper'
                14      MAKE_FUNCTION                   8
                16      CALL_FUNCTION                   1
                18      STORE_FAST                      1: helper
                20      LOAD_FAST                       1: helper
                22      RETURN_VALUE                    
        'asynccontextmanager'
        [Code]
            File Name: contextlib.py
            Object Name: closing
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__enter__'
                '__exit__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'closing'
                'Context to automatically close something at the end of a block.\n\n    Code like this:\n\n        with closing(<module>.open(<arguments>)) as f:\n            <block>\n\n    is equivalent to this:\n\n        f = <module>.open(<arguments>)\n        try:\n            <block>\n        finally:\n            f.close()\n\n    '
                [Code]
                    File Name: contextlib.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'thing'
                    [Var Names]
                        'self'
                        'thing'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: thing
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: thing
                        6       LOAD_CONST                      0: None
                        8       RETURN_VALUE                    
                'closing.__init__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'thing'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: thing
                        4       RETURN_VALUE                    
                'closing.__enter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __exit__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        'thing'
                        'close'
                    [Var Names]
                        'self'
                        'exc_info'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: thing
                        4       LOAD_METHOD                     1: close
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                'closing.__exit__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'closing'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Context to automatically close something at the end of a block.\n\n    Code like this:\n\n        with closing(<module>.open(<arguments>)) as f:\n            <block>\n\n    is equivalent to this:\n\n        f = <module>.open(<arguments>)\n        try:\n            <block>\n        finally:\n            f.close()\n\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'closing.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __enter__
                22      LOAD_CONST                      5: 'closing.__enter__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __enter__
                28      LOAD_CONST                      6: <CODE> __exit__
                30      LOAD_CONST                      7: 'closing.__exit__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __exit__
                36      LOAD_CONST                      8: None
                38      RETURN_VALUE                    
        'closing'
        [Code]
            File Name: contextlib.py
            Object Name: aclosing
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__aenter__'
                '__aexit__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'aclosing'
                'Async context manager for safely finalizing an asynchronously cleaned-up\n    resource such as an async generator, calling its ``aclose()`` method.\n\n    Code like this:\n\n        async with aclosing(<module>.fetch(<arguments>)) as agen:\n            <block>\n\n    is equivalent to this:\n\n        agen = <module>.fetch(<arguments>)\n        try:\n            <block>\n        finally:\n            await agen.aclose()\n\n    '
                [Code]
                    File Name: contextlib.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'thing'
                    [Var Names]
                        'self'
                        'thing'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: thing
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: thing
                        6       LOAD_CONST                      0: None
                        8       RETURN_VALUE                    
                'aclosing.__init__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __aenter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x000000C3 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_COROUTINE)
                    [Names]
                        'thing'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: thing
                        6       RETURN_VALUE                    
                'aclosing.__aenter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __aexit__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x000000C7 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE | CO_COROUTINE)
                    [Names]
                        'thing'
                        'aclose'
                    [Var Names]
                        'self'
                        'exc_info'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: thing
                        6       LOAD_METHOD                     1: aclose
                        8       CALL_METHOD                     0
                        10      GET_AWAITABLE                   
                        12      LOAD_CONST                      0: None
                        14      YIELD_FROM                      
                        16      POP_TOP                         
                        18      LOAD_CONST                      0: None
                        20      RETURN_VALUE                    
                'aclosing.__aexit__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'aclosing'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Async context manager for safely finalizing an asynchronously cleaned-up\n    resource such as an async generator, calling its ``aclose()`` method.\n\n    Code like this:\n\n        async with aclosing(<module>.fetch(<arguments>)) as agen:\n            <block>\n\n    is equivalent to this:\n\n        agen = <module>.fetch(<arguments>)\n        try:\n            <block>\n        finally:\n            await agen.aclose()\n\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'aclosing.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __aenter__
                22      LOAD_CONST                      5: 'aclosing.__aenter__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __aenter__
                28      LOAD_CONST                      6: <CODE> __aexit__
                30      LOAD_CONST                      7: 'aclosing.__aexit__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __aexit__
                36      LOAD_CONST                      8: None
                38      RETURN_VALUE                    
        'aclosing'
        [Code]
            File Name: contextlib.py
            Object Name: _RedirectStream
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '_stream'
                '__init__'
                '__enter__'
                '__exit__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_RedirectStream'
                None
                [Code]
                    File Name: contextlib.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_new_target'
                        '_old_targets'
                    [Var Names]
                        'self'
                        'new_target'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: new_target
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _new_target
                        6       BUILD_LIST                      0
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _old_targets
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                '_RedirectStream.__init__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_old_targets'
                        'append'
                        'getattr'
                        'sys'
                        '_stream'
                        'setattr'
                        '_new_target'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _old_targets
                        4       LOAD_METHOD                     1: append
                        6       LOAD_GLOBAL                     2: getattr
                        8       LOAD_GLOBAL                     3: sys
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       4: _stream
                        14      CALL_FUNCTION                   2
                        16      CALL_METHOD                     1
                        18      POP_TOP                         
                        20      LOAD_GLOBAL                     5: setattr
                        22      LOAD_GLOBAL                     3: sys
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       4: _stream
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       6: _new_target
                        32      CALL_FUNCTION                   3
                        34      POP_TOP                         
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       6: _new_target
                        40      RETURN_VALUE                    
                '_RedirectStream.__enter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __exit__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'setattr'
                        'sys'
                        '_stream'
                        '_old_targets'
                        'pop'
                    [Var Names]
                        'self'
                        'exctype'
                        'excinst'
                        'exctb'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: setattr
                        2       LOAD_GLOBAL                     1: sys
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       2: _stream
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       3: _old_targets
                        12      LOAD_METHOD                     4: pop
                        14      CALL_METHOD                     0
                        16      CALL_FUNCTION                   3
                        18      POP_TOP                         
                        20      LOAD_CONST                      0: None
                        22      RETURN_VALUE                    
                '_RedirectStream.__exit__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_RedirectStream'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: None
                10      STORE_NAME                      3: _stream
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: '_RedirectStream.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __enter__
                22      LOAD_CONST                      5: '_RedirectStream.__enter__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __enter__
                28      LOAD_CONST                      6: <CODE> __exit__
                30      LOAD_CONST                      7: '_RedirectStream.__exit__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __exit__
                36      LOAD_CONST                      1: None
                38      RETURN_VALUE                    
        '_RedirectStream'
        [Code]
            File Name: contextlib.py
            Object Name: redirect_stdout
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '_stream'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'redirect_stdout'
                "Context manager for temporarily redirecting stdout to another file.\n\n        # How to send help() to stderr\n        with redirect_stdout(sys.stderr):\n            help(dir)\n\n        # How to write help() to a file\n        with open('help.txt', 'w') as f:\n            with redirect_stdout(f):\n                help(pow)\n    "
                'stdout'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'redirect_stdout'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Context manager for temporarily redirecting stdout to another file.\n\n        # How to send help() to stderr\n        with redirect_stdout(sys.stderr):\n            help(dir)\n\n        # How to write help() to a file\n        with open('help.txt', 'w') as f:\n            with redirect_stdout(f):\n                help(pow)\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: 'stdout'
                14      STORE_NAME                      4: _stream
                16      LOAD_CONST                      3: None
                18      RETURN_VALUE                    
        'redirect_stdout'
        [Code]
            File Name: contextlib.py
            Object Name: redirect_stderr
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '_stream'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'redirect_stderr'
                'Context manager for temporarily redirecting stderr to another file.'
                'stderr'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'redirect_stderr'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Context manager for temporarily redirecting stderr to another file.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: 'stderr'
                14      STORE_NAME                      4: _stream
                16      LOAD_CONST                      3: None
                18      RETURN_VALUE                    
        'redirect_stderr'
        [Code]
            File Name: contextlib.py
            Object Name: suppress
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__enter__'
                '__exit__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'suppress'
                'Context manager to suppress specified exceptions\n\n    After the exception is suppressed, execution proceeds with the next\n    statement following the with statement.\n\n         with suppress(FileNotFoundError):\n             os.remove(somefile)\n         # Execution still resumes here if the file was already removed\n    '
                [Code]
                    File Name: contextlib.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_exceptions'
                    [Var Names]
                        'self'
                        'exceptions'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: exceptions
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _exceptions
                        6       LOAD_CONST                      0: None
                        8       RETURN_VALUE                    
                'suppress.__init__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'suppress.__enter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __exit__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'issubclass'
                        '_exceptions'
                    [Var Names]
                        'self'
                        'exctype'
                        'excinst'
                        'exctb'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: exctype
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           1 (is not)
                        6       JUMP_IF_FALSE_OR_POP            9 (to 18)
                        8       LOAD_GLOBAL                     0: issubclass
                        10      LOAD_FAST                       1: exctype
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: _exceptions
                        16      CALL_FUNCTION                   2
                        18      RETURN_VALUE                    
                'suppress.__exit__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'suppress'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Context manager to suppress specified exceptions\n\n    After the exception is suppressed, execution proceeds with the next\n    statement following the with statement.\n\n         with suppress(FileNotFoundError):\n             os.remove(somefile)\n         # Execution still resumes here if the file was already removed\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'suppress.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __enter__
                22      LOAD_CONST                      5: 'suppress.__enter__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __enter__
                28      LOAD_CONST                      6: <CODE> __exit__
                30      LOAD_CONST                      7: 'suppress.__exit__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __exit__
                36      LOAD_CONST                      8: None
                38      RETURN_VALUE                    
        'suppress'
        [Code]
            File Name: contextlib.py
            Object Name: _BaseExitStack
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'staticmethod'
                '_create_exit_wrapper'
                '_create_cb_wrapper'
                '__init__'
                'pop_all'
                'push'
                'enter_context'
                'callback'
                '_push_cm_exit'
                '_push_exit_callback'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_BaseExitStack'
                'A base class for ExitStack and AsyncExitStack.'
                [Code]
                    File Name: contextlib.py
                    Object Name: _create_exit_wrapper
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'MethodType'
                    [Var Names]
                        'cm'
                        'cm_exit'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: MethodType
                        2       LOAD_FAST                       1: cm_exit
                        4       LOAD_FAST                       0: cm
                        6       CALL_FUNCTION                   2
                        8       RETURN_VALUE                    
                '_BaseExitStack._create_exit_wrapper'
                [Code]
                    File Name: contextlib.py
                    Object Name: _create_cb_wrapper
                    Arg Count: 1
                    Pos Only Arg Count: 1
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 3
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                    [Var Names]
                        'callback'
                        'args'
                        'kwds'
                        '_exit_wrapper'
                    [Free Vars]
                    [Cell Vars]
                        'args'
                        'callback'
                        'kwds'
                    [Constants]
                        None
                        [Code]
                            File Name: contextlib.py
                            Object Name: _exit_wrapper
                            Arg Count: 3
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 4
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                            [Var Names]
                                'exc_type'
                                'exc'
                                'tb'
                            [Free Vars]
                                'args'
                                'callback'
                                'kwds'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_DEREF                      1: callback
                                2       LOAD_DEREF                      0: args
                                4       BUILD_MAP                       0
                                6       LOAD_DEREF                      2: kwds
                                8       DICT_MERGE                      1
                                10      CALL_FUNCTION_EX                1
                                12      POP_TOP                         
                                14      LOAD_CONST                      0: None
                                16      RETURN_VALUE                    
                        '_BaseExitStack._create_cb_wrapper.<locals>._exit_wrapper'
                    [Disassembly]
                        0       LOAD_CLOSURE                    0: args
                        2       LOAD_CLOSURE                    1: callback
                        4       LOAD_CLOSURE                    2: kwds
                        6       BUILD_TUPLE                     3
                        8       LOAD_CONST                      1: <CODE> _exit_wrapper
                        10      LOAD_CONST                      2: '_BaseExitStack._create_cb_wrapper.<locals>._exit_wrapper'
                        12      MAKE_FUNCTION                   8
                        14      STORE_FAST                      3: _exit_wrapper
                        16      LOAD_FAST                       3: _exit_wrapper
                        18      RETURN_VALUE                    
                '_BaseExitStack._create_cb_wrapper'
                [Code]
                    File Name: contextlib.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'deque'
                        '_exit_callbacks'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: deque
                        2       CALL_FUNCTION                   0
                        4       LOAD_FAST                       0: self
                        6       STORE_ATTR                      1: _exit_callbacks
                        8       LOAD_CONST                      0: None
                        10      RETURN_VALUE                    
                '_BaseExitStack.__init__'
                [Code]
                    File Name: contextlib.py
                    Object Name: pop_all
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        '_exit_callbacks'
                        'deque'
                    [Var Names]
                        'self'
                        'new_stack'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Preserve the context stack by transferring it to a new instance.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: type
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       CALL_FUNCTION                   0
                        8       STORE_FAST                      1: new_stack
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: _exit_callbacks
                        14      LOAD_FAST                       1: new_stack
                        16      STORE_ATTR                      1: _exit_callbacks
                        18      LOAD_GLOBAL                     2: deque
                        20      CALL_FUNCTION                   0
                        22      LOAD_FAST                       0: self
                        24      STORE_ATTR                      1: _exit_callbacks
                        26      LOAD_FAST                       1: new_stack
                        28      RETURN_VALUE                    
                '_BaseExitStack.pop_all'
                [Code]
                    File Name: contextlib.py
                    Object Name: push
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        '__exit__'
                        'AttributeError'
                        '_push_exit_callback'
                        '_push_cm_exit'
                    [Var Names]
                        'self'
                        'exit'
                        '_cb_type'
                        'exit_method'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Registers a callback with the standard __exit__ method signature.\n\n        Can suppress exceptions the same way __exit__ method can.\n        Also accepts any object with an __exit__ method (registering a call\n        to the method instead of the object itself).\n        '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: type
                        2       LOAD_FAST                       1: exit
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      2: _cb_type
                        8       SETUP_FINALLY                   5 (to 20)
                        10      LOAD_FAST                       2: _cb_type
                        12      LOAD_ATTR                       1: __exit__
                        14      STORE_FAST                      3: exit_method
                        16      POP_BLOCK                       
                        18      JUMP_FORWARD                    15 (to 50)
                        20      DUP_TOP                         
                        22      LOAD_GLOBAL                     2: AttributeError
                        24      JUMP_IF_NOT_EXC_MATCH           24 (to 48)
                        26      POP_TOP                         
                        28      POP_TOP                         
                        30      POP_TOP                         
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     3: _push_exit_callback
                        36      LOAD_FAST                       1: exit
                        38      CALL_METHOD                     1
                        40      POP_TOP                         
                        42      POP_EXCEPT                      
                        44      LOAD_FAST                       1: exit
                        46      RETURN_VALUE                    
                        48      RERAISE                         0
                        50      LOAD_FAST                       0: self
                        52      LOAD_METHOD                     4: _push_cm_exit
                        54      LOAD_FAST                       1: exit
                        56      LOAD_FAST                       3: exit_method
                        58      CALL_METHOD                     2
                        60      POP_TOP                         
                        62      LOAD_FAST                       1: exit
                        64      RETURN_VALUE                    
                '_BaseExitStack.push'
                [Code]
                    File Name: contextlib.py
                    Object Name: enter_context
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        '__exit__'
                        '__enter__'
                        '_push_cm_exit'
                    [Var Names]
                        'self'
                        'cm'
                        '_cm_type'
                        '_exit'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Enters the supplied context manager.\n\n        If successful, also pushes its __exit__ method as a callback and\n        returns the result of the __enter__ method.\n        '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: type
                        2       LOAD_FAST                       1: cm
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      2: _cm_type
                        8       LOAD_FAST                       2: _cm_type
                        10      LOAD_ATTR                       1: __exit__
                        12      STORE_FAST                      3: _exit
                        14      LOAD_FAST                       2: _cm_type
                        16      LOAD_METHOD                     2: __enter__
                        18      LOAD_FAST                       1: cm
                        20      CALL_METHOD                     1
                        22      STORE_FAST                      4: result
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     3: _push_cm_exit
                        28      LOAD_FAST                       1: cm
                        30      LOAD_FAST                       3: _exit
                        32      CALL_METHOD                     2
                        34      POP_TOP                         
                        36      LOAD_FAST                       4: result
                        38      RETURN_VALUE                    
                '_BaseExitStack.enter_context'
                [Code]
                    File Name: contextlib.py
                    Object Name: callback
                    Arg Count: 2
                    Pos Only Arg Count: 2
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        '_create_cb_wrapper'
                        '__wrapped__'
                        '_push_exit_callback'
                    [Var Names]
                        'self'
                        'callback'
                        'args'
                        'kwds'
                        '_exit_wrapper'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Registers an arbitrary callback and arguments.\n\n        Cannot suppress exceptions.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _create_cb_wrapper
                        4       LOAD_FAST                       1: callback
                        6       BUILD_LIST                      1
                        8       LOAD_FAST                       2: args
                        10      LIST_EXTEND                     1
                        12      LIST_TO_TUPLE                   
                        14      BUILD_MAP                       0
                        16      LOAD_FAST                       3: kwds
                        18      DICT_MERGE                      1
                        20      CALL_FUNCTION_EX                1
                        22      STORE_FAST                      4: _exit_wrapper
                        24      LOAD_FAST                       1: callback
                        26      LOAD_FAST                       4: _exit_wrapper
                        28      STORE_ATTR                      1: __wrapped__
                        30      LOAD_FAST                       0: self
                        32      LOAD_METHOD                     2: _push_exit_callback
                        34      LOAD_FAST                       4: _exit_wrapper
                        36      CALL_METHOD                     1
                        38      POP_TOP                         
                        40      LOAD_FAST                       1: callback
                        42      RETURN_VALUE                    
                '_BaseExitStack.callback'
                [Code]
                    File Name: contextlib.py
                    Object Name: _push_cm_exit
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_create_exit_wrapper'
                        '_push_exit_callback'
                    [Var Names]
                        'self'
                        'cm'
                        'cm_exit'
                        '_exit_wrapper'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Helper to correctly register callbacks to __exit__ methods.'
                        True
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _create_exit_wrapper
                        4       LOAD_FAST                       1: cm
                        6       LOAD_FAST                       2: cm_exit
                        8       CALL_METHOD                     2
                        10      STORE_FAST                      3: _exit_wrapper
                        12      LOAD_FAST                       0: self
                        14      LOAD_METHOD                     1: _push_exit_callback
                        16      LOAD_FAST                       3: _exit_wrapper
                        18      LOAD_CONST                      1: True
                        20      CALL_METHOD                     2
                        22      POP_TOP                         
                        24      LOAD_CONST                      2: None
                        26      RETURN_VALUE                    
                '_BaseExitStack._push_cm_exit'
                True
                [Code]
                    File Name: contextlib.py
                    Object Name: _push_exit_callback
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exit_callbacks'
                        'append'
                    [Var Names]
                        'self'
                        'callback'
                        'is_sync'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _exit_callbacks
                        4       LOAD_METHOD                     1: append
                        6       LOAD_FAST                       2: is_sync
                        8       LOAD_FAST                       1: callback
                        10      BUILD_TUPLE                     2
                        12      CALL_METHOD                     1
                        14      POP_TOP                         
                        16      LOAD_CONST                      0: None
                        18      RETURN_VALUE                    
                '_BaseExitStack._push_exit_callback'
                None
                (
                    True
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_BaseExitStack'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A base class for ExitStack and AsyncExitStack.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: staticmethod
                14      LOAD_CONST                      2: <CODE> _create_exit_wrapper
                16      LOAD_CONST                      3: '_BaseExitStack._create_exit_wrapper'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: _create_exit_wrapper
                24      LOAD_NAME                       4: staticmethod
                26      LOAD_CONST                      4: <CODE> _create_cb_wrapper
                28      LOAD_CONST                      5: '_BaseExitStack._create_cb_wrapper'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: _create_cb_wrapper
                36      LOAD_CONST                      6: <CODE> __init__
                38      LOAD_CONST                      7: '_BaseExitStack.__init__'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: __init__
                44      LOAD_CONST                      8: <CODE> pop_all
                46      LOAD_CONST                      9: '_BaseExitStack.pop_all'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      8: pop_all
                52      LOAD_CONST                      10: <CODE> push
                54      LOAD_CONST                      11: '_BaseExitStack.push'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      9: push
                60      LOAD_CONST                      12: <CODE> enter_context
                62      LOAD_CONST                      13: '_BaseExitStack.enter_context'
                64      MAKE_FUNCTION                   0
                66      STORE_NAME                      10: enter_context
                68      LOAD_CONST                      14: <CODE> callback
                70      LOAD_CONST                      15: '_BaseExitStack.callback'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      11: callback
                76      LOAD_CONST                      16: <CODE> _push_cm_exit
                78      LOAD_CONST                      17: '_BaseExitStack._push_cm_exit'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      12: _push_cm_exit
                84      LOAD_CONST                      22: (True,)
                86      LOAD_CONST                      19: <CODE> _push_exit_callback
                88      LOAD_CONST                      20: '_BaseExitStack._push_exit_callback'
                90      MAKE_FUNCTION                   1
                92      STORE_NAME                      13: _push_exit_callback
                94      LOAD_CONST                      21: None
                96      RETURN_VALUE                    
        '_BaseExitStack'
        [Code]
            File Name: contextlib.py
            Object Name: ExitStack
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__enter__'
                '__exit__'
                'close'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ExitStack'
                'Context manager for dynamic management of a stack of exit callbacks.\n\n    For example:\n        with ExitStack() as stack:\n            files = [stack.enter_context(open(fname)) for fname in filenames]\n            # All opened files will automatically be closed at the end of\n            # the with statement, even if attempts to open files later\n            # in the list raise an exception.\n    '
                [Code]
                    File Name: contextlib.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       RETURN_VALUE                    
                'ExitStack.__enter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __exit__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 10
                    Stack Size: 8
                    Flags: 0x00000007 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS)
                    [Names]
                        'sys'
                        'exc_info'
                        '_exit_callbacks'
                        'pop'
                        '__context__'
                        'BaseException'
                    [Var Names]
                        'self'
                        'exc_details'
                        'received_exc'
                        '_fix_exception_context'
                        'suppressed_exc'
                        'pending_raise'
                        'is_sync'
                        'cb'
                        'new_exc_details'
                        'fixed_ctx'
                    [Free Vars]
                    [Cell Vars]
                        'frame_exc'
                    [Constants]
                        None
                        0
                        1
                        [Code]
                            File Name: contextlib.py
                            Object Name: _fix_exception_context
                            Arg Count: 2
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 2
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '__context__'
                            [Var Names]
                                'new_exc'
                                'old_exc'
                                'exc_context'
                            [Free Vars]
                                'frame_exc'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       NOP                             
                                2       LOAD_FAST                       0: new_exc
                                4       LOAD_ATTR                       0: __context__
                                6       STORE_FAST                      2: exc_context
                                8       LOAD_FAST                       2: exc_context
                                10      LOAD_CONST                      0: None
                                12      IS_OP                           0 (is)
                                14      POP_JUMP_IF_TRUE                12 (to 24)
                                16      LOAD_FAST                       2: exc_context
                                18      LOAD_FAST                       1: old_exc
                                20      IS_OP                           0 (is)
                                22      POP_JUMP_IF_FALSE               14 (to 28)
                                24      LOAD_CONST                      0: None
                                26      RETURN_VALUE                    
                                28      LOAD_FAST                       2: exc_context
                                30      LOAD_DEREF                      0: frame_exc
                                32      IS_OP                           0 (is)
                                34      POP_JUMP_IF_FALSE               19 (to 38)
                                36      JUMP_FORWARD                    3 (to 44)
                                38      LOAD_FAST                       2: exc_context
                                40      STORE_FAST                      0: new_exc
                                42      JUMP_ABSOLUTE                   1 (to 2)
                                44      LOAD_FAST                       1: old_exc
                                46      LOAD_FAST                       0: new_exc
                                48      STORE_ATTR                      0: __context__
                                50      LOAD_CONST                      0: None
                                52      RETURN_VALUE                    
                        'ExitStack.__exit__.<locals>._fix_exception_context'
                        False
                        True
                        (
                            None
                            None
                            None
                        )
                    [Disassembly]
                        0       LOAD_FAST                       1: exc_details
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_CONST                      0: None
                        8       IS_OP                           1 (is not)
                        10      STORE_FAST                      2: received_exc
                        12      LOAD_GLOBAL                     0: sys
                        14      LOAD_METHOD                     1: exc_info
                        16      CALL_METHOD                     0
                        18      LOAD_CONST                      2: 1
                        20      BINARY_SUBSCR                   
                        22      STORE_DEREF                     0: frame_exc
                        24      LOAD_CLOSURE                    0: frame_exc
                        26      BUILD_TUPLE                     1
                        28      LOAD_CONST                      3: <CODE> _fix_exception_context
                        30      LOAD_CONST                      4: 'ExitStack.__exit__.<locals>._fix_exception_context'
                        32      MAKE_FUNCTION                   8
                        34      STORE_FAST                      3: _fix_exception_context
                        36      LOAD_CONST                      5: False
                        38      STORE_FAST                      4: suppressed_exc
                        40      LOAD_CONST                      5: False
                        42      STORE_FAST                      5: pending_raise
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       2: _exit_callbacks
                        48      POP_JUMP_IF_FALSE               73 (to 146)
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       2: _exit_callbacks
                        54      LOAD_METHOD                     3: pop
                        56      CALL_METHOD                     0
                        58      UNPACK_SEQUENCE                 2
                        60      STORE_FAST                      6: is_sync
                        62      STORE_FAST                      7: cb
                        64      LOAD_FAST                       6: is_sync
                        66      POP_JUMP_IF_TRUE                36 (to 72)
                        68      LOAD_ASSERTION_ERROR            
                        70      RAISE_VARARGS                   1
                        72      SETUP_FINALLY                   12 (to 98)
                        74      LOAD_FAST                       7: cb
                        76      LOAD_FAST                       1: exc_details
                        78      CALL_FUNCTION_EX                0
                        80      POP_JUMP_IF_FALSE               47 (to 94)
                        82      LOAD_CONST                      6: True
                        84      STORE_FAST                      4: suppressed_exc
                        86      LOAD_CONST                      5: False
                        88      STORE_FAST                      5: pending_raise
                        90      LOAD_CONST                      7: (None, None, None)
                        92      STORE_FAST                      1: exc_details
                        94      POP_BLOCK                       
                        96      JUMP_FORWARD                    21 (to 140)
                        98      POP_TOP                         
                        100     POP_TOP                         
                        102     POP_TOP                         
                        104     LOAD_GLOBAL                     0: sys
                        106     LOAD_METHOD                     1: exc_info
                        108     CALL_METHOD                     0
                        110     STORE_FAST                      8: new_exc_details
                        112     LOAD_FAST                       3: _fix_exception_context
                        114     LOAD_FAST                       8: new_exc_details
                        116     LOAD_CONST                      2: 1
                        118     BINARY_SUBSCR                   
                        120     LOAD_FAST                       1: exc_details
                        122     LOAD_CONST                      2: 1
                        124     BINARY_SUBSCR                   
                        126     CALL_FUNCTION                   2
                        128     POP_TOP                         
                        130     LOAD_CONST                      6: True
                        132     STORE_FAST                      5: pending_raise
                        134     LOAD_FAST                       8: new_exc_details
                        136     STORE_FAST                      1: exc_details
                        138     POP_EXCEPT                      
                        140     LOAD_FAST                       0: self
                        142     LOAD_ATTR                       2: _exit_callbacks
                        144     POP_JUMP_IF_TRUE                25 (to 50)
                        146     LOAD_FAST                       5: pending_raise
                        148     POP_JUMP_IF_FALSE               98 (to 196)
                        150     SETUP_FINALLY                   9 (to 170)
                        152     LOAD_FAST                       1: exc_details
                        154     LOAD_CONST                      2: 1
                        156     BINARY_SUBSCR                   
                        158     LOAD_ATTR                       4: __context__
                        160     STORE_FAST                      9: fixed_ctx
                        162     LOAD_FAST                       1: exc_details
                        164     LOAD_CONST                      2: 1
                        166     BINARY_SUBSCR                   
                        168     RAISE_VARARGS                   1
                        170     DUP_TOP                         
                        172     LOAD_GLOBAL                     5: BaseException
                        174     JUMP_IF_NOT_EXC_MATCH           97 (to 194)
                        176     POP_TOP                         
                        178     POP_TOP                         
                        180     POP_TOP                         
                        182     LOAD_FAST                       9: fixed_ctx
                        184     LOAD_FAST                       1: exc_details
                        186     LOAD_CONST                      2: 1
                        188     BINARY_SUBSCR                   
                        190     STORE_ATTR                      4: __context__
                        192     RAISE_VARARGS                   0
                        194     RERAISE                         0
                        196     LOAD_FAST                       2: received_exc
                        198     JUMP_IF_FALSE_OR_POP            101 (to 202)
                        200     LOAD_FAST                       4: suppressed_exc
                        202     RETURN_VALUE                    
                'ExitStack.__exit__'
                [Code]
                    File Name: contextlib.py
                    Object Name: close
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__exit__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Immediately unwind the context stack.'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: __exit__
                        4       LOAD_CONST                      1: None
                        6       LOAD_CONST                      1: None
                        8       LOAD_CONST                      1: None
                        10      CALL_METHOD                     3
                        12      POP_TOP                         
                        14      LOAD_CONST                      1: None
                        16      RETURN_VALUE                    
                'ExitStack.close'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ExitStack'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Context manager for dynamic management of a stack of exit callbacks.\n\n    For example:\n        with ExitStack() as stack:\n            files = [stack.enter_context(open(fname)) for fname in filenames]\n            # All opened files will automatically be closed at the end of\n            # the with statement, even if attempts to open files later\n            # in the list raise an exception.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __enter__
                14      LOAD_CONST                      3: 'ExitStack.__enter__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __enter__
                20      LOAD_CONST                      4: <CODE> __exit__
                22      LOAD_CONST                      5: 'ExitStack.__exit__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __exit__
                28      LOAD_CONST                      6: <CODE> close
                30      LOAD_CONST                      7: 'ExitStack.close'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: close
                36      LOAD_CONST                      8: None
                38      RETURN_VALUE                    
        'ExitStack'
        [Code]
            File Name: contextlib.py
            Object Name: AsyncExitStack
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'staticmethod'
                '_create_async_exit_wrapper'
                '_create_async_cb_wrapper'
                'enter_async_context'
                'push_async_exit'
                'push_async_callback'
                'aclose'
                '_push_async_cm_exit'
                '__aenter__'
                '__aexit__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'AsyncExitStack'
                'Async context manager for dynamic management of a stack of exit\n    callbacks.\n\n    For example:\n        async with AsyncExitStack() as stack:\n            connections = [await stack.enter_async_context(get_connection())\n                for i in range(5)]\n            # All opened connections will automatically be released at the\n            # end of the async with statement, even if attempts to open a\n            # connection later in the list raise an exception.\n    '
                [Code]
                    File Name: contextlib.py
                    Object Name: _create_async_exit_wrapper
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'MethodType'
                    [Var Names]
                        'cm'
                        'cm_exit'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: MethodType
                        2       LOAD_FAST                       1: cm_exit
                        4       LOAD_FAST                       0: cm
                        6       CALL_FUNCTION                   2
                        8       RETURN_VALUE                    
                'AsyncExitStack._create_async_exit_wrapper'
                [Code]
                    File Name: contextlib.py
                    Object Name: _create_async_cb_wrapper
                    Arg Count: 1
                    Pos Only Arg Count: 1
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 3
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                    [Var Names]
                        'callback'
                        'args'
                        'kwds'
                        '_exit_wrapper'
                    [Free Vars]
                    [Cell Vars]
                        'args'
                        'callback'
                        'kwds'
                    [Constants]
                        None
                        [Code]
                            File Name: contextlib.py
                            Object Name: _exit_wrapper
                            Arg Count: 3
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 4
                            Flags: 0x00000093 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_COROUTINE)
                            [Names]
                            [Var Names]
                                'exc_type'
                                'exc'
                                'tb'
                            [Free Vars]
                                'args'
                                'callback'
                                'kwds'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       1
                                2       LOAD_DEREF                      1: callback
                                4       LOAD_DEREF                      0: args
                                6       BUILD_MAP                       0
                                8       LOAD_DEREF                      2: kwds
                                10      DICT_MERGE                      1
                                12      CALL_FUNCTION_EX                1
                                14      GET_AWAITABLE                   
                                16      LOAD_CONST                      0: None
                                18      YIELD_FROM                      
                                20      POP_TOP                         
                                22      LOAD_CONST                      0: None
                                24      RETURN_VALUE                    
                        'AsyncExitStack._create_async_cb_wrapper.<locals>._exit_wrapper'
                    [Disassembly]
                        0       LOAD_CLOSURE                    0: args
                        2       LOAD_CLOSURE                    1: callback
                        4       LOAD_CLOSURE                    2: kwds
                        6       BUILD_TUPLE                     3
                        8       LOAD_CONST                      1: <CODE> _exit_wrapper
                        10      LOAD_CONST                      2: 'AsyncExitStack._create_async_cb_wrapper.<locals>._exit_wrapper'
                        12      MAKE_FUNCTION                   8
                        14      STORE_FAST                      3: _exit_wrapper
                        16      LOAD_FAST                       3: _exit_wrapper
                        18      RETURN_VALUE                    
                'AsyncExitStack._create_async_cb_wrapper'
                [Code]
                    File Name: contextlib.py
                    Object Name: enter_async_context
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x000000C3 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_COROUTINE)
                    [Names]
                        'type'
                        '__aexit__'
                        '__aenter__'
                        '_push_async_cm_exit'
                    [Var Names]
                        'self'
                        'cm'
                        '_cm_type'
                        '_exit'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Enters the supplied async context manager.\n\n        If successful, also pushes its __aexit__ method as a callback and\n        returns the result of the __aenter__ method.\n        '
                        None
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_GLOBAL                     0: type
                        4       LOAD_FAST                       1: cm
                        6       CALL_FUNCTION                   1
                        8       STORE_FAST                      2: _cm_type
                        10      LOAD_FAST                       2: _cm_type
                        12      LOAD_ATTR                       1: __aexit__
                        14      STORE_FAST                      3: _exit
                        16      LOAD_FAST                       2: _cm_type
                        18      LOAD_METHOD                     2: __aenter__
                        20      LOAD_FAST                       1: cm
                        22      CALL_METHOD                     1
                        24      GET_AWAITABLE                   
                        26      LOAD_CONST                      1: None
                        28      YIELD_FROM                      
                        30      STORE_FAST                      4: result
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     3: _push_async_cm_exit
                        36      LOAD_FAST                       1: cm
                        38      LOAD_FAST                       3: _exit
                        40      CALL_METHOD                     2
                        42      POP_TOP                         
                        44      LOAD_FAST                       4: result
                        46      RETURN_VALUE                    
                'AsyncExitStack.enter_async_context'
                [Code]
                    File Name: contextlib.py
                    Object Name: push_async_exit
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        '__aexit__'
                        'AttributeError'
                        '_push_exit_callback'
                        '_push_async_cm_exit'
                    [Var Names]
                        'self'
                        'exit'
                        '_cb_type'
                        'exit_method'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Registers a coroutine function with the standard __aexit__ method\n        signature.\n\n        Can suppress exceptions the same way __aexit__ method can.\n        Also accepts any object with an __aexit__ method (registering a call\n        to the method instead of the object itself).\n        '
                        False
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: type
                        2       LOAD_FAST                       1: exit
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      2: _cb_type
                        8       SETUP_FINALLY                   5 (to 20)
                        10      LOAD_FAST                       2: _cb_type
                        12      LOAD_ATTR                       1: __aexit__
                        14      STORE_FAST                      3: exit_method
                        16      POP_BLOCK                       
                        18      JUMP_FORWARD                    16 (to 52)
                        20      DUP_TOP                         
                        22      LOAD_GLOBAL                     2: AttributeError
                        24      JUMP_IF_NOT_EXC_MATCH           25 (to 50)
                        26      POP_TOP                         
                        28      POP_TOP                         
                        30      POP_TOP                         
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     3: _push_exit_callback
                        36      LOAD_FAST                       1: exit
                        38      LOAD_CONST                      1: False
                        40      CALL_METHOD                     2
                        42      POP_TOP                         
                        44      POP_EXCEPT                      
                        46      LOAD_FAST                       1: exit
                        48      RETURN_VALUE                    
                        50      RERAISE                         0
                        52      LOAD_FAST                       0: self
                        54      LOAD_METHOD                     4: _push_async_cm_exit
                        56      LOAD_FAST                       1: exit
                        58      LOAD_FAST                       3: exit_method
                        60      CALL_METHOD                     2
                        62      POP_TOP                         
                        64      LOAD_FAST                       1: exit
                        66      RETURN_VALUE                    
                'AsyncExitStack.push_async_exit'
                [Code]
                    File Name: contextlib.py
                    Object Name: push_async_callback
                    Arg Count: 2
                    Pos Only Arg Count: 2
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        '_create_async_cb_wrapper'
                        '__wrapped__'
                        '_push_exit_callback'
                    [Var Names]
                        'self'
                        'callback'
                        'args'
                        'kwds'
                        '_exit_wrapper'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Registers an arbitrary coroutine function and arguments.\n\n        Cannot suppress exceptions.\n        '
                        False
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _create_async_cb_wrapper
                        4       LOAD_FAST                       1: callback
                        6       BUILD_LIST                      1
                        8       LOAD_FAST                       2: args
                        10      LIST_EXTEND                     1
                        12      LIST_TO_TUPLE                   
                        14      BUILD_MAP                       0
                        16      LOAD_FAST                       3: kwds
                        18      DICT_MERGE                      1
                        20      CALL_FUNCTION_EX                1
                        22      STORE_FAST                      4: _exit_wrapper
                        24      LOAD_FAST                       1: callback
                        26      LOAD_FAST                       4: _exit_wrapper
                        28      STORE_ATTR                      1: __wrapped__
                        30      LOAD_FAST                       0: self
                        32      LOAD_METHOD                     2: _push_exit_callback
                        34      LOAD_FAST                       4: _exit_wrapper
                        36      LOAD_CONST                      1: False
                        38      CALL_METHOD                     2
                        40      POP_TOP                         
                        42      LOAD_FAST                       1: callback
                        44      RETURN_VALUE                    
                'AsyncExitStack.push_async_callback'
                [Code]
                    File Name: contextlib.py
                    Object Name: aclose
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x000000C3 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_COROUTINE)
                    [Names]
                        '__aexit__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Immediately unwind the context stack.'
                        None
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: __aexit__
                        6       LOAD_CONST                      1: None
                        8       LOAD_CONST                      1: None
                        10      LOAD_CONST                      1: None
                        12      CALL_METHOD                     3
                        14      GET_AWAITABLE                   
                        16      LOAD_CONST                      1: None
                        18      YIELD_FROM                      
                        20      POP_TOP                         
                        22      LOAD_CONST                      1: None
                        24      RETURN_VALUE                    
                'AsyncExitStack.aclose'
                [Code]
                    File Name: contextlib.py
                    Object Name: _push_async_cm_exit
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_create_async_exit_wrapper'
                        '_push_exit_callback'
                    [Var Names]
                        'self'
                        'cm'
                        'cm_exit'
                        '_exit_wrapper'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Helper to correctly register coroutine function to __aexit__\n        method.'
                        False
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _create_async_exit_wrapper
                        4       LOAD_FAST                       1: cm
                        6       LOAD_FAST                       2: cm_exit
                        8       CALL_METHOD                     2
                        10      STORE_FAST                      3: _exit_wrapper
                        12      LOAD_FAST                       0: self
                        14      LOAD_METHOD                     1: _push_exit_callback
                        16      LOAD_FAST                       3: _exit_wrapper
                        18      LOAD_CONST                      1: False
                        20      CALL_METHOD                     2
                        22      POP_TOP                         
                        24      LOAD_CONST                      2: None
                        26      RETURN_VALUE                    
                'AsyncExitStack._push_async_cm_exit'
                [Code]
                    File Name: contextlib.py
                    Object Name: __aenter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x000000C3 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_COROUTINE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_FAST                       0: self
                        4       RETURN_VALUE                    
                'AsyncExitStack.__aenter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __aexit__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 8
                    Flags: 0x00000087 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_COROUTINE)
                    [Names]
                        'sys'
                        'exc_info'
                        '_exit_callbacks'
                        'pop'
                        '__context__'
                        'BaseException'
                    [Var Names]
                        'self'
                        'exc_details'
                        'received_exc'
                        '_fix_exception_context'
                        'suppressed_exc'
                        'pending_raise'
                        'is_sync'
                        'cb'
                        'cb_suppress'
                        'new_exc_details'
                        'fixed_ctx'
                    [Free Vars]
                    [Cell Vars]
                        'frame_exc'
                    [Constants]
                        None
                        0
                        1
                        [Code]
                            File Name: contextlib.py
                            Object Name: _fix_exception_context
                            Arg Count: 2
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 2
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '__context__'
                            [Var Names]
                                'new_exc'
                                'old_exc'
                                'exc_context'
                            [Free Vars]
                                'frame_exc'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       NOP                             
                                2       LOAD_FAST                       0: new_exc
                                4       LOAD_ATTR                       0: __context__
                                6       STORE_FAST                      2: exc_context
                                8       LOAD_FAST                       2: exc_context
                                10      LOAD_CONST                      0: None
                                12      IS_OP                           0 (is)
                                14      POP_JUMP_IF_TRUE                12 (to 24)
                                16      LOAD_FAST                       2: exc_context
                                18      LOAD_FAST                       1: old_exc
                                20      IS_OP                           0 (is)
                                22      POP_JUMP_IF_FALSE               14 (to 28)
                                24      LOAD_CONST                      0: None
                                26      RETURN_VALUE                    
                                28      LOAD_FAST                       2: exc_context
                                30      LOAD_DEREF                      0: frame_exc
                                32      IS_OP                           0 (is)
                                34      POP_JUMP_IF_FALSE               19 (to 38)
                                36      JUMP_FORWARD                    3 (to 44)
                                38      LOAD_FAST                       2: exc_context
                                40      STORE_FAST                      0: new_exc
                                42      JUMP_ABSOLUTE                   1 (to 2)
                                44      LOAD_FAST                       1: old_exc
                                46      LOAD_FAST                       0: new_exc
                                48      STORE_ATTR                      0: __context__
                                50      LOAD_CONST                      0: None
                                52      RETURN_VALUE                    
                        'AsyncExitStack.__aexit__.<locals>._fix_exception_context'
                        False
                        True
                        (
                            None
                            None
                            None
                        )
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_FAST                       1: exc_details
                        4       LOAD_CONST                      1: 0
                        6       BINARY_SUBSCR                   
                        8       LOAD_CONST                      0: None
                        10      IS_OP                           1 (is not)
                        12      STORE_FAST                      2: received_exc
                        14      LOAD_GLOBAL                     0: sys
                        16      LOAD_METHOD                     1: exc_info
                        18      CALL_METHOD                     0
                        20      LOAD_CONST                      2: 1
                        22      BINARY_SUBSCR                   
                        24      STORE_DEREF                     0: frame_exc
                        26      LOAD_CLOSURE                    0: frame_exc
                        28      BUILD_TUPLE                     1
                        30      LOAD_CONST                      3: <CODE> _fix_exception_context
                        32      LOAD_CONST                      4: 'AsyncExitStack.__aexit__.<locals>._fix_exception_context'
                        34      MAKE_FUNCTION                   8
                        36      STORE_FAST                      3: _fix_exception_context
                        38      LOAD_CONST                      5: False
                        40      STORE_FAST                      4: suppressed_exc
                        42      LOAD_CONST                      5: False
                        44      STORE_FAST                      5: pending_raise
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       2: _exit_callbacks
                        50      POP_JUMP_IF_FALSE               82 (to 164)
                        52      LOAD_FAST                       0: self
                        54      LOAD_ATTR                       2: _exit_callbacks
                        56      LOAD_METHOD                     3: pop
                        58      CALL_METHOD                     0
                        60      UNPACK_SEQUENCE                 2
                        62      STORE_FAST                      6: is_sync
                        64      STORE_FAST                      7: cb
                        66      SETUP_FINALLY                   24 (to 116)
                        68      LOAD_FAST                       6: is_sync
                        70      POP_JUMP_IF_FALSE               41 (to 82)
                        72      LOAD_FAST                       7: cb
                        74      LOAD_FAST                       1: exc_details
                        76      CALL_FUNCTION_EX                0
                        78      STORE_FAST                      8: cb_suppress
                        80      JUMP_FORWARD                    7 (to 96)
                        82      LOAD_FAST                       7: cb
                        84      LOAD_FAST                       1: exc_details
                        86      CALL_FUNCTION_EX                0
                        88      GET_AWAITABLE                   
                        90      LOAD_CONST                      0: None
                        92      YIELD_FROM                      
                        94      STORE_FAST                      8: cb_suppress
                        96      LOAD_FAST                       8: cb_suppress
                        98      POP_JUMP_IF_FALSE               56 (to 112)
                        100     LOAD_CONST                      6: True
                        102     STORE_FAST                      4: suppressed_exc
                        104     LOAD_CONST                      5: False
                        106     STORE_FAST                      5: pending_raise
                        108     LOAD_CONST                      7: (None, None, None)
                        110     STORE_FAST                      1: exc_details
                        112     POP_BLOCK                       
                        114     JUMP_FORWARD                    21 (to 158)
                        116     POP_TOP                         
                        118     POP_TOP                         
                        120     POP_TOP                         
                        122     LOAD_GLOBAL                     0: sys
                        124     LOAD_METHOD                     1: exc_info
                        126     CALL_METHOD                     0
                        128     STORE_FAST                      9: new_exc_details
                        130     LOAD_FAST                       3: _fix_exception_context
                        132     LOAD_FAST                       9: new_exc_details
                        134     LOAD_CONST                      2: 1
                        136     BINARY_SUBSCR                   
                        138     LOAD_FAST                       1: exc_details
                        140     LOAD_CONST                      2: 1
                        142     BINARY_SUBSCR                   
                        144     CALL_FUNCTION                   2
                        146     POP_TOP                         
                        148     LOAD_CONST                      6: True
                        150     STORE_FAST                      5: pending_raise
                        152     LOAD_FAST                       9: new_exc_details
                        154     STORE_FAST                      1: exc_details
                        156     POP_EXCEPT                      
                        158     LOAD_FAST                       0: self
                        160     LOAD_ATTR                       2: _exit_callbacks
                        162     POP_JUMP_IF_TRUE                26 (to 52)
                        164     LOAD_FAST                       5: pending_raise
                        166     POP_JUMP_IF_FALSE               107 (to 214)
                        168     SETUP_FINALLY                   9 (to 188)
                        170     LOAD_FAST                       1: exc_details
                        172     LOAD_CONST                      2: 1
                        174     BINARY_SUBSCR                   
                        176     LOAD_ATTR                       4: __context__
                        178     STORE_FAST                      10: fixed_ctx
                        180     LOAD_FAST                       1: exc_details
                        182     LOAD_CONST                      2: 1
                        184     BINARY_SUBSCR                   
                        186     RAISE_VARARGS                   1
                        188     DUP_TOP                         
                        190     LOAD_GLOBAL                     5: BaseException
                        192     JUMP_IF_NOT_EXC_MATCH           106 (to 212)
                        194     POP_TOP                         
                        196     POP_TOP                         
                        198     POP_TOP                         
                        200     LOAD_FAST                       10: fixed_ctx
                        202     LOAD_FAST                       1: exc_details
                        204     LOAD_CONST                      2: 1
                        206     BINARY_SUBSCR                   
                        208     STORE_ATTR                      4: __context__
                        210     RAISE_VARARGS                   0
                        212     RERAISE                         0
                        214     LOAD_FAST                       2: received_exc
                        216     JUMP_IF_FALSE_OR_POP            110 (to 220)
                        218     LOAD_FAST                       4: suppressed_exc
                        220     RETURN_VALUE                    
                'AsyncExitStack.__aexit__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'AsyncExitStack'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Async context manager for dynamic management of a stack of exit\n    callbacks.\n\n    For example:\n        async with AsyncExitStack() as stack:\n            connections = [await stack.enter_async_context(get_connection())\n                for i in range(5)]\n            # All opened connections will automatically be released at the\n            # end of the async with statement, even if attempts to open a\n            # connection later in the list raise an exception.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: staticmethod
                14      LOAD_CONST                      2: <CODE> _create_async_exit_wrapper
                16      LOAD_CONST                      3: 'AsyncExitStack._create_async_exit_wrapper'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: _create_async_exit_wrapper
                24      LOAD_NAME                       4: staticmethod
                26      LOAD_CONST                      4: <CODE> _create_async_cb_wrapper
                28      LOAD_CONST                      5: 'AsyncExitStack._create_async_cb_wrapper'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: _create_async_cb_wrapper
                36      LOAD_CONST                      6: <CODE> enter_async_context
                38      LOAD_CONST                      7: 'AsyncExitStack.enter_async_context'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: enter_async_context
                44      LOAD_CONST                      8: <CODE> push_async_exit
                46      LOAD_CONST                      9: 'AsyncExitStack.push_async_exit'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      8: push_async_exit
                52      LOAD_CONST                      10: <CODE> push_async_callback
                54      LOAD_CONST                      11: 'AsyncExitStack.push_async_callback'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      9: push_async_callback
                60      LOAD_CONST                      12: <CODE> aclose
                62      LOAD_CONST                      13: 'AsyncExitStack.aclose'
                64      MAKE_FUNCTION                   0
                66      STORE_NAME                      10: aclose
                68      LOAD_CONST                      14: <CODE> _push_async_cm_exit
                70      LOAD_CONST                      15: 'AsyncExitStack._push_async_cm_exit'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      11: _push_async_cm_exit
                76      LOAD_CONST                      16: <CODE> __aenter__
                78      LOAD_CONST                      17: 'AsyncExitStack.__aenter__'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      12: __aenter__
                84      LOAD_CONST                      18: <CODE> __aexit__
                86      LOAD_CONST                      19: 'AsyncExitStack.__aexit__'
                88      MAKE_FUNCTION                   0
                90      STORE_NAME                      13: __aexit__
                92      LOAD_CONST                      20: None
                94      RETURN_VALUE                    
        'AsyncExitStack'
        [Code]
            File Name: contextlib.py
            Object Name: nullcontext
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__enter__'
                '__exit__'
                '__aenter__'
                '__aexit__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'nullcontext'
                'Context manager that does no additional processing.\n\n    Used as a stand-in for a normal context manager, when a particular\n    block of code is only sometimes used with a normal context manager:\n\n    cm = optional_cm if condition else nullcontext()\n    with cm:\n        # Perform operation, using optional_cm if condition is True\n    '
                None
                [Code]
                    File Name: contextlib.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'enter_result'
                    [Var Names]
                        'self'
                        'enter_result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: enter_result
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: enter_result
                        6       LOAD_CONST                      0: None
                        8       RETURN_VALUE                    
                'nullcontext.__init__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'enter_result'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: enter_result
                        4       RETURN_VALUE                    
                'nullcontext.__enter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __exit__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'excinfo'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'nullcontext.__exit__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __aenter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x000000C3 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_COROUTINE)
                    [Names]
                        'enter_result'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: enter_result
                        6       RETURN_VALUE                    
                'nullcontext.__aenter__'
                [Code]
                    File Name: contextlib.py
                    Object Name: __aexit__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x000000C7 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE | CO_COROUTINE)
                    [Names]
                    [Var Names]
                        'self'
                        'excinfo'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       1
                        2       LOAD_CONST                      0: None
                        4       RETURN_VALUE                    
                'nullcontext.__aexit__'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'nullcontext'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Context manager that does no additional processing.\n\n    Used as a stand-in for a normal context manager, when a particular\n    block of code is only sometimes used with a normal context manager:\n\n    cm = optional_cm if condition else nullcontext()\n    with cm:\n        # Perform operation, using optional_cm if condition is True\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      13: (None,)
                14      LOAD_CONST                      3: <CODE> __init__
                16      LOAD_CONST                      4: 'nullcontext.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      5: <CODE> __enter__
                24      LOAD_CONST                      6: 'nullcontext.__enter__'
                26      MAKE_FUNCTION                   0
                28      STORE_NAME                      5: __enter__
                30      LOAD_CONST                      7: <CODE> __exit__
                32      LOAD_CONST                      8: 'nullcontext.__exit__'
                34      MAKE_FUNCTION                   0
                36      STORE_NAME                      6: __exit__
                38      LOAD_CONST                      9: <CODE> __aenter__
                40      LOAD_CONST                      10: 'nullcontext.__aenter__'
                42      MAKE_FUNCTION                   0
                44      STORE_NAME                      7: __aenter__
                46      LOAD_CONST                      11: <CODE> __aexit__
                48      LOAD_CONST                      12: 'nullcontext.__aexit__'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      8: __aexit__
                54      LOAD_CONST                      2: None
                56      RETURN_VALUE                    
        'nullcontext'
    [Disassembly]
        0       LOAD_CONST                      0: 'Utilities for with-statement contexts.  See PEP 343.'
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: 0
        6       LOAD_CONST                      2: None
        8       IMPORT_NAME                     1: abc
        10      STORE_NAME                      1: abc
        12      LOAD_CONST                      1: 0
        14      LOAD_CONST                      2: None
        16      IMPORT_NAME                     2: sys
        18      STORE_NAME                      2: sys
        20      LOAD_CONST                      1: 0
        22      LOAD_CONST                      2: None
        24      IMPORT_NAME                     3: _collections_abc
        26      STORE_NAME                      3: _collections_abc
        28      LOAD_CONST                      1: 0
        30      LOAD_CONST                      3: ('deque',)
        32      IMPORT_NAME                     4: collections
        34      IMPORT_FROM                     5: deque
        36      STORE_NAME                      5: deque
        38      POP_TOP                         
        40      LOAD_CONST                      1: 0
        42      LOAD_CONST                      4: ('wraps',)
        44      IMPORT_NAME                     6: functools
        46      IMPORT_FROM                     7: wraps
        48      STORE_NAME                      7: wraps
        50      POP_TOP                         
        52      LOAD_CONST                      1: 0
        54      LOAD_CONST                      5: ('MethodType', 'GenericAlias')
        56      IMPORT_NAME                     8: types
        58      IMPORT_FROM                     9: MethodType
        60      STORE_NAME                      9: MethodType
        62      IMPORT_FROM                     10: GenericAlias
        64      STORE_NAME                      10: GenericAlias
        66      POP_TOP                         
        68      BUILD_LIST                      0
        70      LOAD_CONST                      6: ('asynccontextmanager', 'contextmanager', 'closing', 'nullcontext', 'AbstractContextManager', 'AbstractAsyncContextManager', 'AsyncExitStack', 'ContextDecorator', 'ExitStack', 'redirect_stdout', 'redirect_stderr', 'suppress', 'aclosing')
        72      LIST_EXTEND                     1
        74      STORE_NAME                      11: __all__
        76      LOAD_BUILD_CLASS                
        78      LOAD_CONST                      7: <CODE> AbstractContextManager
        80      LOAD_CONST                      8: 'AbstractContextManager'
        82      MAKE_FUNCTION                   0
        84      LOAD_CONST                      8: 'AbstractContextManager'
        86      LOAD_NAME                       1: abc
        88      LOAD_ATTR                       12: ABC
        90      CALL_FUNCTION                   3
        92      STORE_NAME                      13: AbstractContextManager
        94      LOAD_BUILD_CLASS                
        96      LOAD_CONST                      9: <CODE> AbstractAsyncContextManager
        98      LOAD_CONST                      10: 'AbstractAsyncContextManager'
        100     MAKE_FUNCTION                   0
        102     LOAD_CONST                      10: 'AbstractAsyncContextManager'
        104     LOAD_NAME                       1: abc
        106     LOAD_ATTR                       12: ABC
        108     CALL_FUNCTION                   3
        110     STORE_NAME                      14: AbstractAsyncContextManager
        112     LOAD_BUILD_CLASS                
        114     LOAD_CONST                      11: <CODE> ContextDecorator
        116     LOAD_CONST                      12: 'ContextDecorator'
        118     MAKE_FUNCTION                   0
        120     LOAD_CONST                      12: 'ContextDecorator'
        122     LOAD_NAME                       15: object
        124     CALL_FUNCTION                   3
        126     STORE_NAME                      16: ContextDecorator
        128     LOAD_BUILD_CLASS                
        130     LOAD_CONST                      13: <CODE> AsyncContextDecorator
        132     LOAD_CONST                      14: 'AsyncContextDecorator'
        134     MAKE_FUNCTION                   0
        136     LOAD_CONST                      14: 'AsyncContextDecorator'
        138     LOAD_NAME                       15: object
        140     CALL_FUNCTION                   3
        142     STORE_NAME                      17: AsyncContextDecorator
        144     LOAD_BUILD_CLASS                
        146     LOAD_CONST                      15: <CODE> _GeneratorContextManagerBase
        148     LOAD_CONST                      16: '_GeneratorContextManagerBase'
        150     MAKE_FUNCTION                   0
        152     LOAD_CONST                      16: '_GeneratorContextManagerBase'
        154     CALL_FUNCTION                   2
        156     STORE_NAME                      18: _GeneratorContextManagerBase
        158     LOAD_BUILD_CLASS                
        160     LOAD_CONST                      17: <CODE> _GeneratorContextManager
        162     LOAD_CONST                      18: '_GeneratorContextManager'
        164     MAKE_FUNCTION                   0
        166     LOAD_CONST                      18: '_GeneratorContextManager'
        168     LOAD_NAME                       18: _GeneratorContextManagerBase
        170     LOAD_NAME                       13: AbstractContextManager
        172     LOAD_NAME                       16: ContextDecorator
        174     CALL_FUNCTION                   5
        176     STORE_NAME                      19: _GeneratorContextManager
        178     LOAD_BUILD_CLASS                
        180     LOAD_CONST                      19: <CODE> _AsyncGeneratorContextManager
        182     LOAD_CONST                      20: '_AsyncGeneratorContextManager'
        184     MAKE_FUNCTION                   0
        186     LOAD_CONST                      20: '_AsyncGeneratorContextManager'
        188     LOAD_NAME                       18: _GeneratorContextManagerBase
        190     LOAD_NAME                       14: AbstractAsyncContextManager
        192     LOAD_NAME                       17: AsyncContextDecorator
        194     CALL_FUNCTION                   5
        196     STORE_NAME                      20: _AsyncGeneratorContextManager
        198     LOAD_CONST                      21: <CODE> contextmanager
        200     LOAD_CONST                      22: 'contextmanager'
        202     MAKE_FUNCTION                   0
        204     STORE_NAME                      21: contextmanager
        206     LOAD_CONST                      23: <CODE> asynccontextmanager
        208     LOAD_CONST                      24: 'asynccontextmanager'
        210     MAKE_FUNCTION                   0
        212     STORE_NAME                      22: asynccontextmanager
        214     LOAD_BUILD_CLASS                
        216     LOAD_CONST                      25: <CODE> closing
        218     LOAD_CONST                      26: 'closing'
        220     MAKE_FUNCTION                   0
        222     LOAD_CONST                      26: 'closing'
        224     LOAD_NAME                       13: AbstractContextManager
        226     CALL_FUNCTION                   3
        228     STORE_NAME                      23: closing
        230     LOAD_BUILD_CLASS                
        232     LOAD_CONST                      27: <CODE> aclosing
        234     LOAD_CONST                      28: 'aclosing'
        236     MAKE_FUNCTION                   0
        238     LOAD_CONST                      28: 'aclosing'
        240     LOAD_NAME                       14: AbstractAsyncContextManager
        242     CALL_FUNCTION                   3
        244     STORE_NAME                      24: aclosing
        246     LOAD_BUILD_CLASS                
        248     LOAD_CONST                      29: <CODE> _RedirectStream
        250     LOAD_CONST                      30: '_RedirectStream'
        252     MAKE_FUNCTION                   0
        254     LOAD_CONST                      30: '_RedirectStream'
        256     LOAD_NAME                       13: AbstractContextManager
        258     CALL_FUNCTION                   3
        260     STORE_NAME                      25: _RedirectStream
        262     LOAD_BUILD_CLASS                
        264     LOAD_CONST                      31: <CODE> redirect_stdout
        266     LOAD_CONST                      32: 'redirect_stdout'
        268     MAKE_FUNCTION                   0
        270     LOAD_CONST                      32: 'redirect_stdout'
        272     LOAD_NAME                       25: _RedirectStream
        274     CALL_FUNCTION                   3
        276     STORE_NAME                      26: redirect_stdout
        278     LOAD_BUILD_CLASS                
        280     LOAD_CONST                      33: <CODE> redirect_stderr
        282     LOAD_CONST                      34: 'redirect_stderr'
        284     MAKE_FUNCTION                   0
        286     LOAD_CONST                      34: 'redirect_stderr'
        288     LOAD_NAME                       25: _RedirectStream
        290     CALL_FUNCTION                   3
        292     STORE_NAME                      27: redirect_stderr
        294     LOAD_BUILD_CLASS                
        296     LOAD_CONST                      35: <CODE> suppress
        298     LOAD_CONST                      36: 'suppress'
        300     MAKE_FUNCTION                   0
        302     LOAD_CONST                      36: 'suppress'
        304     LOAD_NAME                       13: AbstractContextManager
        306     CALL_FUNCTION                   3
        308     STORE_NAME                      28: suppress
        310     LOAD_BUILD_CLASS                
        312     LOAD_CONST                      37: <CODE> _BaseExitStack
        314     LOAD_CONST                      38: '_BaseExitStack'
        316     MAKE_FUNCTION                   0
        318     LOAD_CONST                      38: '_BaseExitStack'
        320     CALL_FUNCTION                   2
        322     STORE_NAME                      29: _BaseExitStack
        324     LOAD_BUILD_CLASS                
        326     LOAD_CONST                      39: <CODE> ExitStack
        328     LOAD_CONST                      40: 'ExitStack'
        330     MAKE_FUNCTION                   0
        332     LOAD_CONST                      40: 'ExitStack'
        334     LOAD_NAME                       29: _BaseExitStack
        336     LOAD_NAME                       13: AbstractContextManager
        338     CALL_FUNCTION                   4
        340     STORE_NAME                      30: ExitStack
        342     LOAD_BUILD_CLASS                
        344     LOAD_CONST                      41: <CODE> AsyncExitStack
        346     LOAD_CONST                      42: 'AsyncExitStack'
        348     MAKE_FUNCTION                   0
        350     LOAD_CONST                      42: 'AsyncExitStack'
        352     LOAD_NAME                       29: _BaseExitStack
        354     LOAD_NAME                       14: AbstractAsyncContextManager
        356     CALL_FUNCTION                   4
        358     STORE_NAME                      31: AsyncExitStack
        360     LOAD_BUILD_CLASS                
        362     LOAD_CONST                      43: <CODE> nullcontext
        364     LOAD_CONST                      44: 'nullcontext'
        366     MAKE_FUNCTION                   0
        368     LOAD_CONST                      44: 'nullcontext'
        370     LOAD_NAME                       13: AbstractContextManager
        372     LOAD_NAME                       14: AbstractAsyncContextManager
        374     CALL_FUNCTION                   4
        376     STORE_NAME                      32: nullcontext
        378     LOAD_CONST                      2: None
        380     RETURN_VALUE                    
