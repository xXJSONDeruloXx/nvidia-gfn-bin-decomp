_pydecimal.pyc (Python 3.10)
[Code]
    File Name: _pydecimal.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 10
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        '__all__'
        '__name__'
        '__xname__'
        '__version__'
        '__libmpdec_version__'
        'math'
        '_math'
        'numbers'
        '_numbers'
        'sys'
        'collections'
        'namedtuple'
        '_namedtuple'
        'DecimalTuple'
        'ImportError'
        'ROUND_DOWN'
        'ROUND_HALF_UP'
        'ROUND_HALF_EVEN'
        'ROUND_CEILING'
        'ROUND_FLOOR'
        'ROUND_UP'
        'ROUND_HALF_DOWN'
        'ROUND_05UP'
        'HAVE_THREADS'
        'HAVE_CONTEXTVAR'
        'maxsize'
        'MAX_PREC'
        'MAX_EMAX'
        'MIN_EMIN'
        'MIN_ETINY'
        'ArithmeticError'
        'DecimalException'
        'Clamped'
        'InvalidOperation'
        'ConversionSyntax'
        'ZeroDivisionError'
        'DivisionByZero'
        'DivisionImpossible'
        'DivisionUndefined'
        'Inexact'
        'InvalidContext'
        'Rounded'
        'Subnormal'
        'Overflow'
        'Underflow'
        'TypeError'
        'FloatOperation'
        '_signals'
        '_condition_map'
        '_rounding_modes'
        'contextvars'
        'ContextVar'
        '_current_context_var'
        'getcontext'
        'setcontext'
        'localcontext'
        'object'
        'Decimal'
        '_dec_from_triple'
        'Number'
        'register'
        '_ContextManager'
        'Context'
        '_WorkRep'
        '_normalize'
        'int'
        'bit_length'
        '_nbits'
        '_decimal_lshift_exact'
        '_sqrt_nearest'
        '_rshift_nearest'
        '_div_nearest'
        '_ilog'
        '_dlog10'
        '_dlog'
        '_Log10Memoize'
        'getdigits'
        '_log10_digits'
        '_iexp'
        '_dexp'
        '_dpower'
        '_log10_lb'
        '_convert_other'
        '_convert_for_comparison'
        'DefaultContext'
        'BasicContext'
        'ExtendedContext'
        're'
        'compile'
        'VERBOSE'
        'IGNORECASE'
        'match'
        '_parser'
        '_all_zeros'
        '_exact_half'
        'DOTALL'
        '_parse_format_specifier_regex'
        'locale'
        '_locale'
        '_parse_format_specifier'
        '_format_align'
        '_group_lengths'
        '_insert_thousands_sep'
        '_format_sign'
        '_format_number'
        '_Infinity'
        '_NegativeInfinity'
        '_NaN'
        '_Zero'
        '_One'
        '_NegativeOne'
        '_SignedInfinity'
        'hash_info'
        'modulus'
        '_PyHASH_MODULUS'
        'inf'
        '_PyHASH_INF'
        'nan'
        '_PyHASH_NAN'
        'pow'
        '_PyHASH_10INV'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        '\nThis is an implementation of decimal floating point arithmetic based on\nthe General Decimal Arithmetic Specification:\n\n    http://speleotrove.com/decimal/decarith.html\n\nand IEEE standard 854-1987:\n\n    http://en.wikipedia.org/wiki/IEEE_854-1987\n\nDecimal floating point has finite precision with arbitrarily large bounds.\n\nThe purpose of this module is to support arithmetic using familiar\n"schoolhouse" rules and to avoid some of the tricky representation\nissues associated with binary floating point.  The package is especially\nuseful for financial applications or for contexts where users have\nexpectations that are at odds with binary floating point (for instance,\nin binary floating point, 1.00 % 0.1 gives 0.09999999999999995 instead\nof 0.0; Decimal(\'1.00\') % Decimal(\'0.1\') returns the expected\nDecimal(\'0.00\')).\n\nHere are some examples of using the decimal module:\n\n>>> from decimal import *\n>>> setcontext(ExtendedContext)\n>>> Decimal(0)\nDecimal(\'0\')\n>>> Decimal(\'1\')\nDecimal(\'1\')\n>>> Decimal(\'-.0123\')\nDecimal(\'-0.0123\')\n>>> Decimal(123456)\nDecimal(\'123456\')\n>>> Decimal(\'123.45e12345678\')\nDecimal(\'1.2345E+12345680\')\n>>> Decimal(\'1.33\') + Decimal(\'1.27\')\nDecimal(\'2.60\')\n>>> Decimal(\'12.34\') + Decimal(\'3.87\') - Decimal(\'18.41\')\nDecimal(\'-2.20\')\n>>> dig = Decimal(1)\n>>> print(dig / Decimal(3))\n0.333333333\n>>> getcontext().prec = 18\n>>> print(dig / Decimal(3))\n0.333333333333333333\n>>> print(dig.sqrt())\n1\n>>> print(Decimal(3).sqrt())\n1.73205080756887729\n>>> print(Decimal(3) ** 123)\n4.85192780976896427E+58\n>>> inf = Decimal(1) / Decimal(0)\n>>> print(inf)\nInfinity\n>>> neginf = Decimal(-1) / Decimal(0)\n>>> print(neginf)\n-Infinity\n>>> print(neginf + inf)\nNaN\n>>> print(neginf * inf)\n-Infinity\n>>> print(dig / 0)\nInfinity\n>>> getcontext().traps[DivisionByZero] = 1\n>>> print(dig / 0)\nTraceback (most recent call last):\n  ...\n  ...\n  ...\ndecimal.DivisionByZero: x / 0\n>>> c = Context()\n>>> c.traps[InvalidOperation] = 0\n>>> print(c.flags[InvalidOperation])\n0\n>>> c.divide(Decimal(0), Decimal(0))\nDecimal(\'NaN\')\n>>> c.traps[InvalidOperation] = 1\n>>> print(c.flags[InvalidOperation])\n1\n>>> c.flags[InvalidOperation] = 0\n>>> print(c.flags[InvalidOperation])\n0\n>>> print(c.divide(Decimal(0), Decimal(0)))\nTraceback (most recent call last):\n  ...\n  ...\n  ...\ndecimal.InvalidOperation: 0 / 0\n>>> print(c.flags[InvalidOperation])\n1\n>>> c.flags[InvalidOperation] = 0\n>>> c.traps[InvalidOperation] = 0\n>>> print(c.divide(Decimal(0), Decimal(0)))\nNaN\n>>> print(c.flags[InvalidOperation])\n1\n>>>\n'
        (
            'Decimal'
            'Context'
            'DecimalTuple'
            'DefaultContext'
            'BasicContext'
            'ExtendedContext'
            'DecimalException'
            'Clamped'
            'InvalidOperation'
            'DivisionByZero'
            'Inexact'
            'Rounded'
            'Subnormal'
            'Overflow'
            'Underflow'
            'FloatOperation'
            'DivisionImpossible'
            'InvalidContext'
            'ConversionSyntax'
            'DivisionUndefined'
            'ROUND_DOWN'
            'ROUND_HALF_UP'
            'ROUND_HALF_EVEN'
            'ROUND_CEILING'
            'ROUND_FLOOR'
            'ROUND_UP'
            'ROUND_HALF_DOWN'
            'ROUND_05UP'
            'setcontext'
            'getcontext'
            'localcontext'
            'MAX_PREC'
            'MAX_EMAX'
            'MIN_EMIN'
            'MIN_ETINY'
            'HAVE_THREADS'
            'HAVE_CONTEXTVAR'
        )
        'decimal'
        '1.70'
        '2.4.2'
        0
        None
        (
            'namedtuple'
        )
        'DecimalTuple'
        'sign digits exponent'
        [Code]
            File Name: _pydecimal.py
            Object Name: <lambda>
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
            [Names]
            [Var Names]
                'args'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_FAST                       0: args
                2       RETURN_VALUE                    
        '<lambda>'
        'ROUND_DOWN'
        'ROUND_HALF_UP'
        'ROUND_HALF_EVEN'
        'ROUND_CEILING'
        'ROUND_FLOOR'
        'ROUND_UP'
        'ROUND_HALF_DOWN'
        'ROUND_05UP'
        True
        0x7FFFFFFFFFFFFFFF
        0xDE0B6B3A763FFFF
        -0xDE0B6B3A763FFFF
        425000000
        -425000000
        1
        [Code]
            File Name: _pydecimal.py
            Object Name: DecimalException
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'handle'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'DecimalException'
                "Base exception class.\n\n    Used exceptions derive from this.\n    If an exception derives from another exception besides this (such as\n    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only\n    called if the others are present.  This isn't actually used for\n    anything, though.\n\n    handle  -- Called when context._raise_error is called and the\n               trap_enabler is not set.  First argument is self, second is the\n               context.  More arguments can be given, those being after\n               the explanation in _raise_error (For example,\n               context._raise_error(NewError, '(-x)!', self._sign) would\n               call NewError().handle(context, self._sign).)\n\n    To define a new exception, it should be sufficient to have it derive\n    from DecimalException.\n    "
                [Code]
                    File Name: _pydecimal.py
                    Object Name: handle
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 1
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'context'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'DecimalException.handle'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'DecimalException'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Base exception class.\n\n    Used exceptions derive from this.\n    If an exception derives from another exception besides this (such as\n    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only\n    called if the others are present.  This isn't actually used for\n    anything, though.\n\n    handle  -- Called when context._raise_error is called and the\n               trap_enabler is not set.  First argument is self, second is the\n               context.  More arguments can be given, those being after\n               the explanation in _raise_error (For example,\n               context._raise_error(NewError, '(-x)!', self._sign) would\n               call NewError().handle(context, self._sign).)\n\n    To define a new exception, it should be sufficient to have it derive\n    from DecimalException.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> handle
                14      LOAD_CONST                      3: 'DecimalException.handle'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: handle
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'DecimalException'
        [Code]
            File Name: _pydecimal.py
            Object Name: Clamped
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Clamped'
                'Exponent of a 0 changed to fit bounds.\n\n    This occurs and signals clamped if the exponent of a result has been\n    altered in order to fit the constraints of a specific concrete\n    representation.  This may occur when the exponent of a zero result would\n    be outside the bounds of a representation, or when a large normal\n    number would have an encoded exponent that cannot be represented.  In\n    this latter case, the exponent is reduced to fit and the corresponding\n    number of zero digits are appended to the coefficient ("fold-down").\n    '
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Clamped'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Exponent of a 0 changed to fit bounds.\n\n    This occurs and signals clamped if the exponent of a result has been\n    altered in order to fit the constraints of a specific concrete\n    representation.  This may occur when the exponent of a zero result would\n    be outside the bounds of a representation, or when a large normal\n    number would have an encoded exponent that cannot be represented.  In\n    this latter case, the exponent is reduced to fit and the corresponding\n    number of zero digits are appended to the coefficient ("fold-down").\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'Clamped'
        [Code]
            File Name: _pydecimal.py
            Object Name: InvalidOperation
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'handle'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'InvalidOperation'
                'An invalid operation was performed.\n\n    Various bad things cause this:\n\n    Something creates a signaling NaN\n    -INF + INF\n    0 * (+-)INF\n    (+-)INF / (+-)INF\n    x % 0\n    (+-)INF % x\n    x._rescale( non-integer )\n    sqrt(-x) , x > 0\n    0 ** 0\n    x ** (non-integer)\n    x ** (+-)INF\n    An operand is invalid\n\n    The result of the operation after these is a quiet positive NaN,\n    except when the cause is a signaling NaN, in which case the result is\n    also a quiet NaN, but with the original sign, and an optional\n    diagnostic information.\n    '
                [Code]
                    File Name: _pydecimal.py
                    Object Name: handle
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_dec_from_triple'
                        '_sign'
                        '_int'
                        '_fix_nan'
                        '_NaN'
                    [Var Names]
                        'self'
                        'context'
                        'args'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'n'
                        True
                    [Disassembly]
                        0       LOAD_FAST                       2: args
                        2       POP_JUMP_IF_FALSE               20 (to 40)
                        4       LOAD_GLOBAL                     0: _dec_from_triple
                        6       LOAD_FAST                       2: args
                        8       LOAD_CONST                      1: 0
                        10      BINARY_SUBSCR                   
                        12      LOAD_ATTR                       1: _sign
                        14      LOAD_FAST                       2: args
                        16      LOAD_CONST                      1: 0
                        18      BINARY_SUBSCR                   
                        20      LOAD_ATTR                       2: _int
                        22      LOAD_CONST                      2: 'n'
                        24      LOAD_CONST                      3: True
                        26      CALL_FUNCTION                   4
                        28      STORE_FAST                      3: ans
                        30      LOAD_FAST                       3: ans
                        32      LOAD_METHOD                     3: _fix_nan
                        34      LOAD_FAST                       1: context
                        36      CALL_METHOD                     1
                        38      RETURN_VALUE                    
                        40      LOAD_GLOBAL                     4: _NaN
                        42      RETURN_VALUE                    
                'InvalidOperation.handle'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'InvalidOperation'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An invalid operation was performed.\n\n    Various bad things cause this:\n\n    Something creates a signaling NaN\n    -INF + INF\n    0 * (+-)INF\n    (+-)INF / (+-)INF\n    x % 0\n    (+-)INF % x\n    x._rescale( non-integer )\n    sqrt(-x) , x > 0\n    0 ** 0\n    x ** (non-integer)\n    x ** (+-)INF\n    An operand is invalid\n\n    The result of the operation after these is a quiet positive NaN,\n    except when the cause is a signaling NaN, in which case the result is\n    also a quiet NaN, but with the original sign, and an optional\n    diagnostic information.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> handle
                14      LOAD_CONST                      3: 'InvalidOperation.handle'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: handle
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'InvalidOperation'
        [Code]
            File Name: _pydecimal.py
            Object Name: ConversionSyntax
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'handle'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ConversionSyntax'
                'Trying to convert badly formed string.\n\n    This occurs and signals invalid-operation if a string is being\n    converted to a number and it does not conform to the numeric string\n    syntax.  The result is [0,qNaN].\n    '
                [Code]
                    File Name: _pydecimal.py
                    Object Name: handle
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 1
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_NaN'
                    [Var Names]
                        'self'
                        'context'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _NaN
                        2       RETURN_VALUE                    
                'ConversionSyntax.handle'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ConversionSyntax'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Trying to convert badly formed string.\n\n    This occurs and signals invalid-operation if a string is being\n    converted to a number and it does not conform to the numeric string\n    syntax.  The result is [0,qNaN].\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> handle
                14      LOAD_CONST                      3: 'ConversionSyntax.handle'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: handle
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'ConversionSyntax'
        [Code]
            File Name: _pydecimal.py
            Object Name: DivisionByZero
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'handle'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'DivisionByZero'
                'Division by 0.\n\n    This occurs and signals division-by-zero if division of a finite number\n    by zero was attempted (during a divide-integer or divide operation, or a\n    power operation with negative right-hand operand), and the dividend was\n    not zero.\n\n    The result of the operation is [sign,inf], where sign is the exclusive\n    or of the signs of the operands for divide, or is 1 for an odd power of\n    -0, for power.\n    '
                [Code]
                    File Name: _pydecimal.py
                    Object Name: handle
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 2
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_SignedInfinity'
                    [Var Names]
                        'self'
                        'context'
                        'sign'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _SignedInfinity
                        2       LOAD_FAST                       2: sign
                        4       BINARY_SUBSCR                   
                        6       RETURN_VALUE                    
                'DivisionByZero.handle'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'DivisionByZero'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Division by 0.\n\n    This occurs and signals division-by-zero if division of a finite number\n    by zero was attempted (during a divide-integer or divide operation, or a\n    power operation with negative right-hand operand), and the dividend was\n    not zero.\n\n    The result of the operation is [sign,inf], where sign is the exclusive\n    or of the signs of the operands for divide, or is 1 for an odd power of\n    -0, for power.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> handle
                14      LOAD_CONST                      3: 'DivisionByZero.handle'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: handle
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'DivisionByZero'
        [Code]
            File Name: _pydecimal.py
            Object Name: DivisionImpossible
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'handle'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'DivisionImpossible'
                'Cannot perform the division adequately.\n\n    This occurs and signals invalid-operation if the integer result of a\n    divide-integer or remainder operation had too many digits (would be\n    longer than precision).  The result is [0,qNaN].\n    '
                [Code]
                    File Name: _pydecimal.py
                    Object Name: handle
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 1
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_NaN'
                    [Var Names]
                        'self'
                        'context'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _NaN
                        2       RETURN_VALUE                    
                'DivisionImpossible.handle'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'DivisionImpossible'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Cannot perform the division adequately.\n\n    This occurs and signals invalid-operation if the integer result of a\n    divide-integer or remainder operation had too many digits (would be\n    longer than precision).  The result is [0,qNaN].\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> handle
                14      LOAD_CONST                      3: 'DivisionImpossible.handle'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: handle
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'DivisionImpossible'
        [Code]
            File Name: _pydecimal.py
            Object Name: DivisionUndefined
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'handle'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'DivisionUndefined'
                'Undefined result of division.\n\n    This occurs and signals invalid-operation if division by zero was\n    attempted (during a divide-integer, divide, or remainder operation), and\n    the dividend is also zero.  The result is [0,qNaN].\n    '
                [Code]
                    File Name: _pydecimal.py
                    Object Name: handle
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 1
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_NaN'
                    [Var Names]
                        'self'
                        'context'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _NaN
                        2       RETURN_VALUE                    
                'DivisionUndefined.handle'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'DivisionUndefined'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Undefined result of division.\n\n    This occurs and signals invalid-operation if division by zero was\n    attempted (during a divide-integer, divide, or remainder operation), and\n    the dividend is also zero.  The result is [0,qNaN].\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> handle
                14      LOAD_CONST                      3: 'DivisionUndefined.handle'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: handle
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'DivisionUndefined'
        [Code]
            File Name: _pydecimal.py
            Object Name: Inexact
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Inexact'
                'Had to round, losing information.\n\n    This occurs and signals inexact whenever the result of an operation is\n    not exact (that is, it needed to be rounded and any discarded digits\n    were non-zero), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The inexact signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) was inexact.\n    '
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Inexact'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Had to round, losing information.\n\n    This occurs and signals inexact whenever the result of an operation is\n    not exact (that is, it needed to be rounded and any discarded digits\n    were non-zero), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The inexact signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) was inexact.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'Inexact'
        [Code]
            File Name: _pydecimal.py
            Object Name: InvalidContext
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'handle'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'InvalidContext'
                'Invalid context.  Unknown rounding, for example.\n\n    This occurs and signals invalid-operation if an invalid context was\n    detected during an operation.  This can occur if contexts are not checked\n    on creation and either the precision exceeds the capability of the\n    underlying concrete representation or an unknown or unsupported rounding\n    was specified.  These aspects of the context need only be checked when\n    the values are required to be used.  The result is [0,qNaN].\n    '
                [Code]
                    File Name: _pydecimal.py
                    Object Name: handle
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 1
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_NaN'
                    [Var Names]
                        'self'
                        'context'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _NaN
                        2       RETURN_VALUE                    
                'InvalidContext.handle'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'InvalidContext'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Invalid context.  Unknown rounding, for example.\n\n    This occurs and signals invalid-operation if an invalid context was\n    detected during an operation.  This can occur if contexts are not checked\n    on creation and either the precision exceeds the capability of the\n    underlying concrete representation or an unknown or unsupported rounding\n    was specified.  These aspects of the context need only be checked when\n    the values are required to be used.  The result is [0,qNaN].\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> handle
                14      LOAD_CONST                      3: 'InvalidContext.handle'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: handle
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'InvalidContext'
        [Code]
            File Name: _pydecimal.py
            Object Name: Rounded
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Rounded'
                'Number got rounded (not  necessarily changed during rounding).\n\n    This occurs and signals rounded whenever the result of an operation is\n    rounded (that is, some zero or non-zero digits were discarded from the\n    coefficient), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The rounded signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) caused a loss of precision.\n    '
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Rounded'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Number got rounded (not  necessarily changed during rounding).\n\n    This occurs and signals rounded whenever the result of an operation is\n    rounded (that is, some zero or non-zero digits were discarded from the\n    coefficient), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The rounded signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) caused a loss of precision.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'Rounded'
        [Code]
            File Name: _pydecimal.py
            Object Name: Subnormal
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Subnormal'
                'Exponent < Emin before rounding.\n\n    This occurs and signals subnormal whenever the result of a conversion or\n    operation is subnormal (that is, its adjusted exponent is less than\n    Emin, before any rounding).  The result in all cases is unchanged.\n\n    The subnormal signal may be tested (or trapped) to determine if a given\n    or operation (or sequence of operations) yielded a subnormal result.\n    '
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Subnormal'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Exponent < Emin before rounding.\n\n    This occurs and signals subnormal whenever the result of a conversion or\n    operation is subnormal (that is, its adjusted exponent is less than\n    Emin, before any rounding).  The result in all cases is unchanged.\n\n    The subnormal signal may be tested (or trapped) to determine if a given\n    or operation (or sequence of operations) yielded a subnormal result.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'Subnormal'
        [Code]
            File Name: _pydecimal.py
            Object Name: Overflow
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'handle'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Overflow'
                'Numerical overflow.\n\n    This occurs and signals overflow if the adjusted exponent of a result\n    (from a conversion or from an operation that is not an attempt to divide\n    by zero), after rounding, would be greater than the largest value that\n    can be handled by the implementation (the value Emax).\n\n    The result depends on the rounding mode:\n\n    For round-half-up and round-half-even (and for round-half-down and\n    round-up, if implemented), the result of the operation is [sign,inf],\n    where sign is the sign of the intermediate result.  For round-down, the\n    result is the largest finite number that can be represented in the\n    current precision, with the sign of the intermediate result.  For\n    round-ceiling, the result is the same as for round-down if the sign of\n    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,\n    the result is the same as for round-down if the sign of the intermediate\n    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded\n    will also be raised.\n    '
                [Code]
                    File Name: _pydecimal.py
                    Object Name: handle
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        'rounding'
                        'ROUND_HALF_UP'
                        'ROUND_HALF_EVEN'
                        'ROUND_HALF_DOWN'
                        'ROUND_UP'
                        '_SignedInfinity'
                        'ROUND_CEILING'
                        '_dec_from_triple'
                        'prec'
                        'Emax'
                        'ROUND_FLOOR'
                    [Var Names]
                        'self'
                        'context'
                        'sign'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        '9'
                        1
                    [Disassembly]
                        0       LOAD_FAST                       1: context
                        2       LOAD_ATTR                       0: rounding
                        4       LOAD_GLOBAL                     1: ROUND_HALF_UP
                        6       LOAD_GLOBAL                     2: ROUND_HALF_EVEN
                        8       LOAD_GLOBAL                     3: ROUND_HALF_DOWN
                        10      LOAD_GLOBAL                     4: ROUND_UP
                        12      BUILD_TUPLE                     4
                        14      CONTAINS_OP                     0 (in)
                        16      POP_JUMP_IF_FALSE               13 (to 26)
                        18      LOAD_GLOBAL                     5: _SignedInfinity
                        20      LOAD_FAST                       2: sign
                        22      BINARY_SUBSCR                   
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       2: sign
                        28      LOAD_CONST                      1: 0
                        30      COMPARE_OP                      2 (==)
                        32      POP_JUMP_IF_FALSE               41 (to 82)
                        34      LOAD_FAST                       1: context
                        36      LOAD_ATTR                       0: rounding
                        38      LOAD_GLOBAL                     6: ROUND_CEILING
                        40      COMPARE_OP                      2 (==)
                        42      POP_JUMP_IF_FALSE               26 (to 52)
                        44      LOAD_GLOBAL                     5: _SignedInfinity
                        46      LOAD_FAST                       2: sign
                        48      BINARY_SUBSCR                   
                        50      RETURN_VALUE                    
                        52      LOAD_GLOBAL                     7: _dec_from_triple
                        54      LOAD_FAST                       2: sign
                        56      LOAD_CONST                      2: '9'
                        58      LOAD_FAST                       1: context
                        60      LOAD_ATTR                       8: prec
                        62      BINARY_MULTIPLY                 
                        64      LOAD_FAST                       1: context
                        66      LOAD_ATTR                       9: Emax
                        68      LOAD_FAST                       1: context
                        70      LOAD_ATTR                       8: prec
                        72      BINARY_SUBTRACT                 
                        74      LOAD_CONST                      3: 1
                        76      BINARY_ADD                      
                        78      CALL_FUNCTION                   3
                        80      RETURN_VALUE                    
                        82      LOAD_FAST                       2: sign
                        84      LOAD_CONST                      3: 1
                        86      COMPARE_OP                      2 (==)
                        88      POP_JUMP_IF_FALSE               69 (to 138)
                        90      LOAD_FAST                       1: context
                        92      LOAD_ATTR                       0: rounding
                        94      LOAD_GLOBAL                     10: ROUND_FLOOR
                        96      COMPARE_OP                      2 (==)
                        98      POP_JUMP_IF_FALSE               54 (to 108)
                        100     LOAD_GLOBAL                     5: _SignedInfinity
                        102     LOAD_FAST                       2: sign
                        104     BINARY_SUBSCR                   
                        106     RETURN_VALUE                    
                        108     LOAD_GLOBAL                     7: _dec_from_triple
                        110     LOAD_FAST                       2: sign
                        112     LOAD_CONST                      2: '9'
                        114     LOAD_FAST                       1: context
                        116     LOAD_ATTR                       8: prec
                        118     BINARY_MULTIPLY                 
                        120     LOAD_FAST                       1: context
                        122     LOAD_ATTR                       9: Emax
                        124     LOAD_FAST                       1: context
                        126     LOAD_ATTR                       8: prec
                        128     BINARY_SUBTRACT                 
                        130     LOAD_CONST                      3: 1
                        132     BINARY_ADD                      
                        134     CALL_FUNCTION                   3
                        136     RETURN_VALUE                    
                        138     LOAD_CONST                      0: None
                        140     RETURN_VALUE                    
                'Overflow.handle'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Overflow'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Numerical overflow.\n\n    This occurs and signals overflow if the adjusted exponent of a result\n    (from a conversion or from an operation that is not an attempt to divide\n    by zero), after rounding, would be greater than the largest value that\n    can be handled by the implementation (the value Emax).\n\n    The result depends on the rounding mode:\n\n    For round-half-up and round-half-even (and for round-half-down and\n    round-up, if implemented), the result of the operation is [sign,inf],\n    where sign is the sign of the intermediate result.  For round-down, the\n    result is the largest finite number that can be represented in the\n    current precision, with the sign of the intermediate result.  For\n    round-ceiling, the result is the same as for round-down if the sign of\n    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,\n    the result is the same as for round-down if the sign of the intermediate\n    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded\n    will also be raised.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> handle
                14      LOAD_CONST                      3: 'Overflow.handle'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: handle
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'Overflow'
        [Code]
            File Name: _pydecimal.py
            Object Name: Underflow
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Underflow'
                'Numerical underflow with result rounded to 0.\n\n    This occurs and signals underflow if a result is inexact and the\n    adjusted exponent of the result would be smaller (more negative) than\n    the smallest value that can be handled by the implementation (the value\n    Emin).  That is, the result is both inexact and subnormal.\n\n    The result after an underflow will be a subnormal number rounded, if\n    necessary, so that its exponent is not less than Etiny.  This may result\n    in 0 with the sign of the intermediate result and an exponent of Etiny.\n\n    In all cases, Inexact, Rounded, and Subnormal will also be raised.\n    '
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Underflow'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Numerical underflow with result rounded to 0.\n\n    This occurs and signals underflow if a result is inexact and the\n    adjusted exponent of the result would be smaller (more negative) than\n    the smallest value that can be handled by the implementation (the value\n    Emin).  That is, the result is both inexact and subnormal.\n\n    The result after an underflow will be a subnormal number rounded, if\n    necessary, so that its exponent is not less than Etiny.  This may result\n    in 0 with the sign of the intermediate result and an exponent of Etiny.\n\n    In all cases, Inexact, Rounded, and Subnormal will also be raised.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'Underflow'
        [Code]
            File Name: _pydecimal.py
            Object Name: FloatOperation
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'FloatOperation'
                'Enable stricter semantics for mixing floats and Decimals.\n\n    If the signal is not trapped (default), mixing floats and Decimals is\n    permitted in the Decimal() constructor, context.create_decimal() and\n    all comparison operators. Both conversion and comparisons are exact.\n    Any occurrence of a mixed operation is silently recorded by setting\n    FloatOperation in the context flags.  Explicit conversions with\n    Decimal.from_float() or context.create_decimal_from_float() do not\n    set the flag.\n\n    Otherwise (the signal is trapped), only equality comparisons and explicit\n    conversions are silent. All other mixed operations raise FloatOperation.\n    '
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'FloatOperation'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Enable stricter semantics for mixing floats and Decimals.\n\n    If the signal is not trapped (default), mixing floats and Decimals is\n    permitted in the Decimal() constructor, context.create_decimal() and\n    all comparison operators. Both conversion and comparisons are exact.\n    Any occurrence of a mixed operation is silently recorded by setting\n    FloatOperation in the context flags.  Explicit conversions with\n    Decimal.from_float() or context.create_decimal_from_float() do not\n    set the flag.\n\n    Otherwise (the signal is trapped), only equality comparisons and explicit\n    conversions are silent. All other mixed operations raise FloatOperation.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'FloatOperation'
        'decimal_context'
        [Code]
            File Name: _pydecimal.py
            Object Name: getcontext
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_current_context_var'
                'get'
                'LookupError'
                'Context'
                'set'
            [Var Names]
                'context'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Returns this thread's context.\n\n    If this thread does not yet have a context, returns\n    a new context and sets this thread's context.\n    New contexts are copies of DefaultContext.\n    "
            [Disassembly]
                0       SETUP_FINALLY                   5 (to 12)
                2       LOAD_GLOBAL                     0: _current_context_var
                4       LOAD_METHOD                     1: get
                6       CALL_METHOD                     0
                8       POP_BLOCK                       
                10      RETURN_VALUE                    
                12      DUP_TOP                         
                14      LOAD_GLOBAL                     2: LookupError
                16      JUMP_IF_NOT_EXC_MATCH           24 (to 48)
                18      POP_TOP                         
                20      POP_TOP                         
                22      POP_TOP                         
                24      LOAD_GLOBAL                     3: Context
                26      CALL_FUNCTION                   0
                28      STORE_FAST                      0: context
                30      LOAD_GLOBAL                     0: _current_context_var
                32      LOAD_METHOD                     4: set
                34      LOAD_FAST                       0: context
                36      CALL_METHOD                     1
                38      POP_TOP                         
                40      LOAD_FAST                       0: context
                42      ROT_FOUR                        
                44      POP_EXCEPT                      
                46      RETURN_VALUE                    
                48      RERAISE                         0
        'getcontext'
        [Code]
            File Name: _pydecimal.py
            Object Name: setcontext
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'DefaultContext'
                'BasicContext'
                'ExtendedContext'
                'copy'
                'clear_flags'
                '_current_context_var'
                'set'
            [Var Names]
                'context'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Set this thread's context to context."
                None
            [Disassembly]
                0       LOAD_FAST                       0: context
                2       LOAD_GLOBAL                     0: DefaultContext
                4       LOAD_GLOBAL                     1: BasicContext
                6       LOAD_GLOBAL                     2: ExtendedContext
                8       BUILD_TUPLE                     3
                10      CONTAINS_OP                     0 (in)
                12      POP_JUMP_IF_FALSE               15 (to 30)
                14      LOAD_FAST                       0: context
                16      LOAD_METHOD                     3: copy
                18      CALL_METHOD                     0
                20      STORE_FAST                      0: context
                22      LOAD_FAST                       0: context
                24      LOAD_METHOD                     4: clear_flags
                26      CALL_METHOD                     0
                28      POP_TOP                         
                30      LOAD_GLOBAL                     5: _current_context_var
                32      LOAD_METHOD                     6: set
                34      LOAD_FAST                       0: context
                36      CALL_METHOD                     1
                38      POP_TOP                         
                40      LOAD_CONST                      1: None
                42      RETURN_VALUE                    
        'setcontext'
        [Code]
            File Name: _pydecimal.py
            Object Name: localcontext
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getcontext'
                '_ContextManager'
            [Var Names]
                'ctx'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return a context manager for a copy of the supplied context\n\n    Uses a copy of the current context if no context is specified\n    The returned context manager creates a local decimal context\n    in a with statement:\n        def sin(x):\n             with localcontext() as ctx:\n                 ctx.prec += 2\n                 # Rest of sin calculation algorithm\n                 # uses a precision 2 greater than normal\n             return +s  # Convert result to normal precision\n\n         def sin(x):\n             with localcontext(ExtendedContext):\n                 # Rest of sin calculation algorithm\n                 # uses the Extended Context from the\n                 # General Decimal Arithmetic Specification\n             return +s  # Convert result to normal context\n\n    >>> setcontext(DefaultContext)\n    >>> print(getcontext().prec)\n    28\n    >>> with localcontext():\n    ...     ctx = getcontext()\n    ...     ctx.prec += 2\n    ...     print(ctx.prec)\n    ...\n    30\n    >>> with localcontext(ExtendedContext):\n    ...     print(getcontext().prec)\n    ...\n    9\n    >>> print(getcontext().prec)\n    28\n    '
                None
            [Disassembly]
                0       LOAD_FAST                       0: ctx
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               7 (to 14)
                8       LOAD_GLOBAL                     0: getcontext
                10      CALL_FUNCTION                   0
                12      STORE_FAST                      0: ctx
                14      LOAD_GLOBAL                     1: _ContextManager
                16      LOAD_FAST                       0: ctx
                18      CALL_FUNCTION                   1
                20      RETURN_VALUE                    
        'localcontext'
        [Code]
            File Name: _pydecimal.py
            Object Name: Decimal
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 10
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__new__'
                'classmethod'
                'from_float'
                '_isnan'
                '_isinfinity'
                '_check_nans'
                '_compare_check_nans'
                '__bool__'
                '_cmp'
                '__eq__'
                '__lt__'
                '__le__'
                '__gt__'
                '__ge__'
                'compare'
                '__hash__'
                'as_tuple'
                'as_integer_ratio'
                '__repr__'
                '__str__'
                'to_eng_string'
                '__neg__'
                '__pos__'
                '__abs__'
                '__add__'
                '__radd__'
                '__sub__'
                '__rsub__'
                '__mul__'
                '__rmul__'
                '__truediv__'
                '_divide'
                '__rtruediv__'
                '__divmod__'
                '__rdivmod__'
                '__mod__'
                '__rmod__'
                'remainder_near'
                '__floordiv__'
                '__rfloordiv__'
                '__float__'
                '__int__'
                '__trunc__'
                'property'
                'real'
                'imag'
                'conjugate'
                '__complex__'
                '_fix_nan'
                '_fix'
                '_round_down'
                '_round_up'
                '_round_half_up'
                '_round_half_down'
                '_round_half_even'
                '_round_ceiling'
                '_round_floor'
                '_round_05up'
                'dict'
                '_pick_rounding_function'
                '__round__'
                '__floor__'
                '__ceil__'
                'fma'
                '_power_modulo'
                '_power_exact'
                '__pow__'
                '__rpow__'
                'normalize'
                'quantize'
                'same_quantum'
                '_rescale'
                '_round'
                'to_integral_exact'
                'to_integral_value'
                'to_integral'
                'sqrt'
                'max'
                'min'
                '_isinteger'
                '_iseven'
                'adjusted'
                'canonical'
                'compare_signal'
                'compare_total'
                'compare_total_mag'
                'copy_abs'
                'copy_negate'
                'copy_sign'
                'exp'
                'is_canonical'
                'is_finite'
                'is_infinite'
                'is_nan'
                'is_normal'
                'is_qnan'
                'is_signed'
                'is_snan'
                'is_subnormal'
                'is_zero'
                '_ln_exp_bound'
                'ln'
                '_log10_exp_bound'
                'log10'
                'logb'
                '_islogical'
                '_fill_logical'
                'logical_and'
                'logical_invert'
                'logical_or'
                'logical_xor'
                'max_mag'
                'min_mag'
                'next_minus'
                'next_plus'
                'next_toward'
                'number_class'
                'radix'
                'rotate'
                'scaleb'
                'shift'
                '__reduce__'
                '__copy__'
                '__deepcopy__'
                '__format__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Decimal'
                'Floating point class for decimal arithmetic.'
                (
                    '_exp'
                    '_int'
                    '_sign'
                    '_is_special'
                )
                '0'
                None
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __new__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'object'
                        '__new__'
                        'isinstance'
                        'str'
                        '_parser'
                        'strip'
                        'replace'
                        'getcontext'
                        '_raise_error'
                        'ConversionSyntax'
                        'group'
                        '_sign'
                        'int'
                        '_int'
                        'len'
                        '_exp'
                        '_is_special'
                        'lstrip'
                        'abs'
                        'Decimal'
                        '_WorkRep'
                        'sign'
                        'exp'
                        'list'
                        'tuple'
                        'ValueError'
                        'append'
                        'join'
                        'map'
                        'float'
                        'FloatOperation'
                        'from_float'
                        'TypeError'
                    [Var Names]
                        'cls'
                        'value'
                        'context'
                        'self'
                        'm'
                        'intpart'
                        'fracpart'
                        'exp'
                        'diag'
                        'digits'
                        'digit'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Create a decimal point instance.\n\n        >>> Decimal('3.14')              # string input\n        Decimal('3.14')\n        >>> Decimal((0, (3, 1, 4), -2))  # tuple (sign, digit_tuple, exponent)\n        Decimal('3.14')\n        >>> Decimal(314)                 # int\n        Decimal('314')\n        >>> Decimal(Decimal(314))        # another decimal instance\n        Decimal('314')\n        >>> Decimal('  3.14  \\n')        # leading and trailing whitespace okay\n        Decimal('3.14')\n        "
                        '_'
                        ''
                        None
                        'Invalid literal for Decimal: %r'
                        'sign'
                        '-'
                        1
                        0
                        'int'
                        'frac'
                        'exp'
                        '0'
                        False
                        'diag'
                        'signal'
                        'N'
                        'n'
                        'F'
                        True
                        3
                        'Invalid tuple size in creation of Decimal from list or tuple.  The list or tuple should have exactly three elements.'
                        (
                            0
                            1
                        )
                        'Invalid sign.  The first value in the tuple should be an integer; either 0 for a positive number or 1 for a negative number.'
                        2
                        9
                        'The second value in the tuple must be composed of integers in the range 0 through 9.'
                        (
                            'n'
                            'N'
                        )
                        "The third value in the tuple must be an integer, or one of the strings 'F', 'n', 'N'."
                        'strict semantics for mixing floats and Decimals are enabled'
                        'Cannot convert %r to Decimal'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: object
                        2       LOAD_METHOD                     1: __new__
                        4       LOAD_FAST                       0: cls
                        6       CALL_METHOD                     1
                        8       STORE_FAST                      3: self
                        10      LOAD_GLOBAL                     2: isinstance
                        12      LOAD_FAST                       1: value
                        14      LOAD_GLOBAL                     3: str
                        16      CALL_FUNCTION                   2
                        18      POP_JUMP_IF_FALSE               144 (to 288)
                        20      LOAD_GLOBAL                     4: _parser
                        22      LOAD_FAST                       1: value
                        24      LOAD_METHOD                     5: strip
                        26      CALL_METHOD                     0
                        28      LOAD_METHOD                     6: replace
                        30      LOAD_CONST                      1: '_'
                        32      LOAD_CONST                      2: ''
                        34      CALL_METHOD                     2
                        36      CALL_FUNCTION                   1
                        38      STORE_FAST                      4: m
                        40      LOAD_FAST                       4: m
                        42      LOAD_CONST                      3: None
                        44      IS_OP                           0 (is)
                        46      POP_JUMP_IF_FALSE               39 (to 78)
                        48      LOAD_FAST                       2: context
                        50      LOAD_CONST                      3: None
                        52      IS_OP                           0 (is)
                        54      POP_JUMP_IF_FALSE               31 (to 62)
                        56      LOAD_GLOBAL                     7: getcontext
                        58      CALL_FUNCTION                   0
                        60      STORE_FAST                      2: context
                        62      LOAD_FAST                       2: context
                        64      LOAD_METHOD                     8: _raise_error
                        66      LOAD_GLOBAL                     9: ConversionSyntax
                        68      LOAD_CONST                      4: 'Invalid literal for Decimal: %r'
                        70      LOAD_FAST                       1: value
                        72      BINARY_MODULO                   
                        74      CALL_METHOD                     2
                        76      RETURN_VALUE                    
                        78      LOAD_FAST                       4: m
                        80      LOAD_METHOD                     10: group
                        82      LOAD_CONST                      5: 'sign'
                        84      CALL_METHOD                     1
                        86      LOAD_CONST                      6: '-'
                        88      COMPARE_OP                      2 (==)
                        90      POP_JUMP_IF_FALSE               50 (to 100)
                        92      LOAD_CONST                      7: 1
                        94      LOAD_FAST                       3: self
                        96      STORE_ATTR                      11: _sign
                        98      JUMP_FORWARD                    3 (to 106)
                        100     LOAD_CONST                      8: 0
                        102     LOAD_FAST                       3: self
                        104     STORE_ATTR                      11: _sign
                        106     LOAD_FAST                       4: m
                        108     LOAD_METHOD                     10: group
                        110     LOAD_CONST                      9: 'int'
                        112     CALL_METHOD                     1
                        114     STORE_FAST                      5: intpart
                        116     LOAD_FAST                       5: intpart
                        118     LOAD_CONST                      3: None
                        120     IS_OP                           1 (is not)
                        122     POP_JUMP_IF_FALSE               99 (to 198)
                        124     LOAD_FAST                       4: m
                        126     LOAD_METHOD                     10: group
                        128     LOAD_CONST                      10: 'frac'
                        130     CALL_METHOD                     1
                        132     JUMP_IF_TRUE_OR_POP             68 (to 136)
                        134     LOAD_CONST                      2: ''
                        136     STORE_FAST                      6: fracpart
                        138     LOAD_GLOBAL                     12: int
                        140     LOAD_FAST                       4: m
                        142     LOAD_METHOD                     10: group
                        144     LOAD_CONST                      11: 'exp'
                        146     CALL_METHOD                     1
                        148     JUMP_IF_TRUE_OR_POP             76 (to 152)
                        150     LOAD_CONST                      12: '0'
                        152     CALL_FUNCTION                   1
                        154     STORE_FAST                      7: exp
                        156     LOAD_GLOBAL                     3: str
                        158     LOAD_GLOBAL                     12: int
                        160     LOAD_FAST                       5: intpart
                        162     LOAD_FAST                       6: fracpart
                        164     BINARY_ADD                      
                        166     CALL_FUNCTION                   1
                        168     CALL_FUNCTION                   1
                        170     LOAD_FAST                       3: self
                        172     STORE_ATTR                      13: _int
                        174     LOAD_FAST                       7: exp
                        176     LOAD_GLOBAL                     14: len
                        178     LOAD_FAST                       6: fracpart
                        180     CALL_FUNCTION                   1
                        182     BINARY_SUBTRACT                 
                        184     LOAD_FAST                       3: self
                        186     STORE_ATTR                      15: _exp
                        188     LOAD_CONST                      13: False
                        190     LOAD_FAST                       3: self
                        192     STORE_ATTR                      16: _is_special
                        194     LOAD_FAST                       3: self
                        196     RETURN_VALUE                    
                        198     LOAD_FAST                       4: m
                        200     LOAD_METHOD                     10: group
                        202     LOAD_CONST                      14: 'diag'
                        204     CALL_METHOD                     1
                        206     STORE_FAST                      8: diag
                        208     LOAD_FAST                       8: diag
                        210     LOAD_CONST                      3: None
                        212     IS_OP                           1 (is not)
                        214     POP_JUMP_IF_FALSE               133 (to 266)
                        216     LOAD_GLOBAL                     3: str
                        218     LOAD_GLOBAL                     12: int
                        220     LOAD_FAST                       8: diag
                        222     JUMP_IF_TRUE_OR_POP             113 (to 226)
                        224     LOAD_CONST                      12: '0'
                        226     CALL_FUNCTION                   1
                        228     CALL_FUNCTION                   1
                        230     LOAD_METHOD                     17: lstrip
                        232     LOAD_CONST                      12: '0'
                        234     CALL_METHOD                     1
                        236     LOAD_FAST                       3: self
                        238     STORE_ATTR                      13: _int
                        240     LOAD_FAST                       4: m
                        242     LOAD_METHOD                     10: group
                        244     LOAD_CONST                      15: 'signal'
                        246     CALL_METHOD                     1
                        248     POP_JUMP_IF_FALSE               129 (to 258)
                        250     LOAD_CONST                      16: 'N'
                        252     LOAD_FAST                       3: self
                        254     STORE_ATTR                      15: _exp
                        256     JUMP_FORWARD                    10 (to 278)
                        258     LOAD_CONST                      17: 'n'
                        260     LOAD_FAST                       3: self
                        262     STORE_ATTR                      15: _exp
                        264     JUMP_FORWARD                    6 (to 278)
                        266     LOAD_CONST                      12: '0'
                        268     LOAD_FAST                       3: self
                        270     STORE_ATTR                      13: _int
                        272     LOAD_CONST                      18: 'F'
                        274     LOAD_FAST                       3: self
                        276     STORE_ATTR                      15: _exp
                        278     LOAD_CONST                      19: True
                        280     LOAD_FAST                       3: self
                        282     STORE_ATTR                      16: _is_special
                        284     LOAD_FAST                       3: self
                        286     RETURN_VALUE                    
                        288     LOAD_GLOBAL                     2: isinstance
                        290     LOAD_FAST                       1: value
                        292     LOAD_GLOBAL                     12: int
                        294     CALL_FUNCTION                   2
                        296     POP_JUMP_IF_FALSE               175 (to 350)
                        298     LOAD_FAST                       1: value
                        300     LOAD_CONST                      8: 0
                        302     COMPARE_OP                      5 (>=)
                        304     POP_JUMP_IF_FALSE               157 (to 314)
                        306     LOAD_CONST                      8: 0
                        308     LOAD_FAST                       3: self
                        310     STORE_ATTR                      11: _sign
                        312     JUMP_FORWARD                    3 (to 320)
                        314     LOAD_CONST                      7: 1
                        316     LOAD_FAST                       3: self
                        318     STORE_ATTR                      11: _sign
                        320     LOAD_CONST                      8: 0
                        322     LOAD_FAST                       3: self
                        324     STORE_ATTR                      15: _exp
                        326     LOAD_GLOBAL                     3: str
                        328     LOAD_GLOBAL                     18: abs
                        330     LOAD_FAST                       1: value
                        332     CALL_FUNCTION                   1
                        334     CALL_FUNCTION                   1
                        336     LOAD_FAST                       3: self
                        338     STORE_ATTR                      13: _int
                        340     LOAD_CONST                      13: False
                        342     LOAD_FAST                       3: self
                        344     STORE_ATTR                      16: _is_special
                        346     LOAD_FAST                       3: self
                        348     RETURN_VALUE                    
                        350     LOAD_GLOBAL                     2: isinstance
                        352     LOAD_FAST                       1: value
                        354     LOAD_GLOBAL                     19: Decimal
                        356     CALL_FUNCTION                   2
                        358     POP_JUMP_IF_FALSE               198 (to 396)
                        360     LOAD_FAST                       1: value
                        362     LOAD_ATTR                       15: _exp
                        364     LOAD_FAST                       3: self
                        366     STORE_ATTR                      15: _exp
                        368     LOAD_FAST                       1: value
                        370     LOAD_ATTR                       11: _sign
                        372     LOAD_FAST                       3: self
                        374     STORE_ATTR                      11: _sign
                        376     LOAD_FAST                       1: value
                        378     LOAD_ATTR                       13: _int
                        380     LOAD_FAST                       3: self
                        382     STORE_ATTR                      13: _int
                        384     LOAD_FAST                       1: value
                        386     LOAD_ATTR                       16: _is_special
                        388     LOAD_FAST                       3: self
                        390     STORE_ATTR                      16: _is_special
                        392     LOAD_FAST                       3: self
                        394     RETURN_VALUE                    
                        396     LOAD_GLOBAL                     2: isinstance
                        398     LOAD_FAST                       1: value
                        400     LOAD_GLOBAL                     20: _WorkRep
                        402     CALL_FUNCTION                   2
                        404     POP_JUMP_IF_FALSE               224 (to 448)
                        406     LOAD_FAST                       1: value
                        408     LOAD_ATTR                       21: sign
                        410     LOAD_FAST                       3: self
                        412     STORE_ATTR                      11: _sign
                        414     LOAD_GLOBAL                     3: str
                        416     LOAD_FAST                       1: value
                        418     LOAD_ATTR                       12: int
                        420     CALL_FUNCTION                   1
                        422     LOAD_FAST                       3: self
                        424     STORE_ATTR                      13: _int
                        426     LOAD_GLOBAL                     12: int
                        428     LOAD_FAST                       1: value
                        430     LOAD_ATTR                       22: exp
                        432     CALL_FUNCTION                   1
                        434     LOAD_FAST                       3: self
                        436     STORE_ATTR                      15: _exp
                        438     LOAD_CONST                      13: False
                        440     LOAD_FAST                       3: self
                        442     STORE_ATTR                      16: _is_special
                        444     LOAD_FAST                       3: self
                        446     RETURN_VALUE                    
                        448     LOAD_GLOBAL                     2: isinstance
                        450     LOAD_FAST                       1: value
                        452     LOAD_GLOBAL                     23: list
                        454     LOAD_GLOBAL                     24: tuple
                        456     BUILD_TUPLE                     2
                        458     CALL_FUNCTION                   2
                        460     POP_JUMP_IF_FALSE               397 (to 794)
                        464     LOAD_GLOBAL                     14: len
                        466     LOAD_FAST                       1: value
                        468     CALL_FUNCTION                   1
                        470     LOAD_CONST                      20: 3
                        472     COMPARE_OP                      3 (!=)
                        474     POP_JUMP_IF_FALSE               242 (to 484)
                        476     LOAD_GLOBAL                     25: ValueError
                        478     LOAD_CONST                      21: 'Invalid tuple size in creation of Decimal from list or tuple.  The list or tuple should have exactly three elements.'
                        480     CALL_FUNCTION                   1
                        482     RAISE_VARARGS                   1
                        484     LOAD_GLOBAL                     2: isinstance
                        486     LOAD_FAST                       1: value
                        488     LOAD_CONST                      8: 0
                        490     BINARY_SUBSCR                   
                        492     LOAD_GLOBAL                     12: int
                        494     CALL_FUNCTION                   2
                        496     POP_JUMP_IF_FALSE               257 (to 514)
                        500     LOAD_FAST                       1: value
                        502     LOAD_CONST                      8: 0
                        504     BINARY_SUBSCR                   
                        506     LOAD_CONST                      22: (0, 1)
                        508     CONTAINS_OP                     0 (in)
                        510     POP_JUMP_IF_TRUE                261 (to 522)
                        514     LOAD_GLOBAL                     25: ValueError
                        516     LOAD_CONST                      23: 'Invalid sign.  The first value in the tuple should be an integer; either 0 for a positive number or 1 for a negative number.'
                        518     CALL_FUNCTION                   1
                        520     RAISE_VARARGS                   1
                        522     LOAD_FAST                       1: value
                        524     LOAD_CONST                      8: 0
                        526     BINARY_SUBSCR                   
                        528     LOAD_FAST                       3: self
                        530     STORE_ATTR                      11: _sign
                        532     LOAD_FAST                       1: value
                        534     LOAD_CONST                      24: 2
                        536     BINARY_SUBSCR                   
                        538     LOAD_CONST                      18: 'F'
                        540     COMPARE_OP                      2 (==)
                        542     POP_JUMP_IF_FALSE               286 (to 572)
                        546     LOAD_CONST                      12: '0'
                        548     LOAD_FAST                       3: self
                        550     STORE_ATTR                      13: _int
                        552     LOAD_FAST                       1: value
                        554     LOAD_CONST                      24: 2
                        556     BINARY_SUBSCR                   
                        558     LOAD_FAST                       3: self
                        560     STORE_ATTR                      15: _exp
                        562     LOAD_CONST                      19: True
                        564     LOAD_FAST                       3: self
                        566     STORE_ATTR                      16: _is_special
                        568     LOAD_FAST                       3: self
                        570     RETURN_VALUE                    
                        572     BUILD_LIST                      0
                        574     STORE_FAST                      9: digits
                        576     LOAD_FAST                       1: value
                        578     LOAD_CONST                      7: 1
                        580     BINARY_SUBSCR                   
                        582     GET_ITER                        
                        584     FOR_ITER                        43 (to 672)
                        586     STORE_FAST                      10: digit
                        588     LOAD_GLOBAL                     2: isinstance
                        590     LOAD_FAST                       10: digit
                        592     LOAD_GLOBAL                     12: int
                        594     CALL_FUNCTION                   2
                        596     POP_JUMP_IF_FALSE               332 (to 664)
                        600     LOAD_CONST                      8: 0
                        602     LOAD_FAST                       10: digit
                        604     DUP_TOP                         
                        606     ROT_THREE                       
                        608     COMPARE_OP                      1 (<=)
                        610     POP_JUMP_IF_FALSE               312 (to 624)
                        614     LOAD_CONST                      25: 9
                        616     COMPARE_OP                      1 (<=)
                        618     POP_JUMP_IF_FALSE               332 (to 664)
                        622     JUMP_FORWARD                    5 (to 634)
                        624     POP_TOP                         
                        626     LOAD_GLOBAL                     25: ValueError
                        628     LOAD_CONST                      26: 'The second value in the tuple must be composed of integers in the range 0 through 9.'
                        630     CALL_FUNCTION                   1
                        632     RAISE_VARARGS                   1
                        634     LOAD_FAST                       9: digits
                        636     POP_JUMP_IF_TRUE                325 (to 650)
                        640     LOAD_FAST                       10: digit
                        642     LOAD_CONST                      8: 0
                        644     COMPARE_OP                      3 (!=)
                        646     POP_JUMP_IF_FALSE               330 (to 660)
                        650     LOAD_FAST                       9: digits
                        652     LOAD_METHOD                     26: append
                        654     LOAD_FAST                       10: digit
                        656     CALL_METHOD                     1
                        658     POP_TOP                         
                        660     JUMP_ABSOLUTE                   292 (to 584)
                        664     LOAD_GLOBAL                     25: ValueError
                        666     LOAD_CONST                      26: 'The second value in the tuple must be composed of integers in the range 0 through 9.'
                        668     CALL_FUNCTION                   1
                        670     RAISE_VARARGS                   1
                        672     LOAD_FAST                       1: value
                        674     LOAD_CONST                      24: 2
                        676     BINARY_SUBSCR                   
                        678     LOAD_CONST                      27: ('n', 'N')
                        680     CONTAINS_OP                     0 (in)
                        682     POP_JUMP_IF_FALSE               362 (to 724)
                        686     LOAD_CONST                      2: ''
                        688     LOAD_METHOD                     27: join
                        690     LOAD_GLOBAL                     28: map
                        692     LOAD_GLOBAL                     3: str
                        694     LOAD_FAST                       9: digits
                        696     CALL_FUNCTION                   2
                        698     CALL_METHOD                     1
                        700     LOAD_FAST                       3: self
                        702     STORE_ATTR                      13: _int
                        704     LOAD_FAST                       1: value
                        706     LOAD_CONST                      24: 2
                        708     BINARY_SUBSCR                   
                        710     LOAD_FAST                       3: self
                        712     STORE_ATTR                      15: _exp
                        714     LOAD_CONST                      19: True
                        716     LOAD_FAST                       3: self
                        718     STORE_ATTR                      16: _is_special
                        720     LOAD_FAST                       3: self
                        722     RETURN_VALUE                    
                        724     LOAD_GLOBAL                     2: isinstance
                        726     LOAD_FAST                       1: value
                        728     LOAD_CONST                      24: 2
                        730     BINARY_SUBSCR                   
                        732     LOAD_GLOBAL                     12: int
                        734     CALL_FUNCTION                   2
                        736     POP_JUMP_IF_FALSE               393 (to 786)
                        740     LOAD_CONST                      2: ''
                        742     LOAD_METHOD                     27: join
                        744     LOAD_GLOBAL                     28: map
                        746     LOAD_GLOBAL                     3: str
                        748     LOAD_FAST                       9: digits
                        750     JUMP_IF_TRUE_OR_POP             379 (to 758)
                        754     LOAD_CONST                      8: 0
                        756     BUILD_LIST                      1
                        758     CALL_FUNCTION                   2
                        760     CALL_METHOD                     1
                        762     LOAD_FAST                       3: self
                        764     STORE_ATTR                      13: _int
                        766     LOAD_FAST                       1: value
                        768     LOAD_CONST                      24: 2
                        770     BINARY_SUBSCR                   
                        772     LOAD_FAST                       3: self
                        774     STORE_ATTR                      15: _exp
                        776     LOAD_CONST                      13: False
                        778     LOAD_FAST                       3: self
                        780     STORE_ATTR                      16: _is_special
                        782     LOAD_FAST                       3: self
                        784     RETURN_VALUE                    
                        786     LOAD_GLOBAL                     25: ValueError
                        788     LOAD_CONST                      28: "The third value in the tuple must be an integer, or one of the strings 'F', 'n', 'N'."
                        790     CALL_FUNCTION                   1
                        792     RAISE_VARARGS                   1
                        794     LOAD_GLOBAL                     2: isinstance
                        796     LOAD_FAST                       1: value
                        798     LOAD_GLOBAL                     29: float
                        800     CALL_FUNCTION                   2
                        802     POP_JUMP_IF_FALSE               440 (to 880)
                        806     LOAD_FAST                       2: context
                        808     LOAD_CONST                      3: None
                        810     IS_OP                           0 (is)
                        812     POP_JUMP_IF_FALSE               411 (to 822)
                        816     LOAD_GLOBAL                     7: getcontext
                        818     CALL_FUNCTION                   0
                        820     STORE_FAST                      2: context
                        822     LOAD_FAST                       2: context
                        824     LOAD_METHOD                     8: _raise_error
                        826     LOAD_GLOBAL                     30: FloatOperation
                        828     LOAD_CONST                      29: 'strict semantics for mixing floats and Decimals are enabled'
                        830     CALL_METHOD                     2
                        832     POP_TOP                         
                        834     LOAD_GLOBAL                     19: Decimal
                        836     LOAD_METHOD                     31: from_float
                        838     LOAD_FAST                       1: value
                        840     CALL_METHOD                     1
                        842     STORE_FAST                      1: value
                        844     LOAD_FAST                       1: value
                        846     LOAD_ATTR                       15: _exp
                        848     LOAD_FAST                       3: self
                        850     STORE_ATTR                      15: _exp
                        852     LOAD_FAST                       1: value
                        854     LOAD_ATTR                       11: _sign
                        856     LOAD_FAST                       3: self
                        858     STORE_ATTR                      11: _sign
                        860     LOAD_FAST                       1: value
                        862     LOAD_ATTR                       13: _int
                        864     LOAD_FAST                       3: self
                        866     STORE_ATTR                      13: _int
                        868     LOAD_FAST                       1: value
                        870     LOAD_ATTR                       16: _is_special
                        872     LOAD_FAST                       3: self
                        874     STORE_ATTR                      16: _is_special
                        876     LOAD_FAST                       3: self
                        878     RETURN_VALUE                    
                        880     LOAD_GLOBAL                     32: TypeError
                        882     LOAD_CONST                      30: 'Cannot convert %r to Decimal'
                        884     LOAD_FAST                       1: value
                        886     BINARY_MODULO                   
                        888     CALL_FUNCTION                   1
                        890     RAISE_VARARGS                   1
                'Decimal.__new__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: from_float
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'int'
                        'str'
                        'abs'
                        'float'
                        '_math'
                        'isinf'
                        'isnan'
                        'repr'
                        'copysign'
                        'as_integer_ratio'
                        'bit_length'
                        'TypeError'
                        '_dec_from_triple'
                        'Decimal'
                    [Var Names]
                        'cls'
                        'f'
                        'sign'
                        'k'
                        'coeff'
                        'n'
                        'd'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Converts a float to a decimal number, exactly.\n\n        Note that Decimal.from_float(0.1) is not the same as Decimal('0.1').\n        Since 0.1 is not exactly representable in binary floating point, the\n        value is stored as the nearest representable value which is\n        0x1.999999999999ap-4.  The exact equivalent of the value in decimal\n        is 0.1000000000000000055511151231257827021181583404541015625.\n\n        >>> Decimal.from_float(0.1)\n        Decimal('0.1000000000000000055511151231257827021181583404541015625')\n        >>> Decimal.from_float(float('nan'))\n        Decimal('NaN')\n        >>> Decimal.from_float(float('inf'))\n        Decimal('Infinity')\n        >>> Decimal.from_float(-float('inf'))\n        Decimal('-Infinity')\n        >>> Decimal.from_float(-0.0)\n        Decimal('-0')\n\n        "
                        0
                        1
                        1
                        5
                        'argument must be int or float.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: f
                        4       LOAD_GLOBAL                     1: int
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               22 (to 44)
                        10      LOAD_FAST                       1: f
                        12      LOAD_CONST                      1: 0
                        14      COMPARE_OP                      5 (>=)
                        16      POP_JUMP_IF_FALSE               11 (to 22)
                        18      LOAD_CONST                      1: 0
                        20      JUMP_FORWARD                    1 (to 24)
                        22      LOAD_CONST                      2: 1
                        24      STORE_FAST                      2: sign
                        26      LOAD_CONST                      1: 0
                        28      STORE_FAST                      3: k
                        30      LOAD_GLOBAL                     2: str
                        32      LOAD_GLOBAL                     3: abs
                        34      LOAD_FAST                       1: f
                        36      CALL_FUNCTION                   1
                        38      CALL_FUNCTION                   1
                        40      STORE_FAST                      4: coeff
                        42      JUMP_FORWARD                    61 (to 166)
                        44      LOAD_GLOBAL                     0: isinstance
                        46      LOAD_FAST                       1: f
                        48      LOAD_GLOBAL                     4: float
                        50      CALL_FUNCTION                   2
                        52      POP_JUMP_IF_FALSE               79 (to 158)
                        54      LOAD_GLOBAL                     5: _math
                        56      LOAD_METHOD                     6: isinf
                        58      LOAD_FAST                       1: f
                        60      CALL_METHOD                     1
                        62      POP_JUMP_IF_TRUE                37 (to 74)
                        64      LOAD_GLOBAL                     5: _math
                        66      LOAD_METHOD                     7: isnan
                        68      LOAD_FAST                       1: f
                        70      CALL_METHOD                     1
                        72      POP_JUMP_IF_FALSE               43 (to 86)
                        74      LOAD_FAST                       0: cls
                        76      LOAD_GLOBAL                     8: repr
                        78      LOAD_FAST                       1: f
                        80      CALL_FUNCTION                   1
                        82      CALL_FUNCTION                   1
                        84      RETURN_VALUE                    
                        86      LOAD_GLOBAL                     5: _math
                        88      LOAD_METHOD                     9: copysign
                        90      LOAD_CONST                      3: 1
                        92      LOAD_FAST                       1: f
                        94      CALL_METHOD                     2
                        96      LOAD_CONST                      3: 1
                        98      COMPARE_OP                      2 (==)
                        100     POP_JUMP_IF_FALSE               54 (to 108)
                        102     LOAD_CONST                      1: 0
                        104     STORE_FAST                      2: sign
                        106     JUMP_FORWARD                    2 (to 112)
                        108     LOAD_CONST                      2: 1
                        110     STORE_FAST                      2: sign
                        112     LOAD_GLOBAL                     3: abs
                        114     LOAD_FAST                       1: f
                        116     CALL_FUNCTION                   1
                        118     LOAD_METHOD                     10: as_integer_ratio
                        120     CALL_METHOD                     0
                        122     UNPACK_SEQUENCE                 2
                        124     STORE_FAST                      5: n
                        126     STORE_FAST                      6: d
                        128     LOAD_FAST                       6: d
                        130     LOAD_METHOD                     11: bit_length
                        132     CALL_METHOD                     0
                        134     LOAD_CONST                      2: 1
                        136     BINARY_SUBTRACT                 
                        138     STORE_FAST                      3: k
                        140     LOAD_GLOBAL                     2: str
                        142     LOAD_FAST                       5: n
                        144     LOAD_CONST                      4: 5
                        146     LOAD_FAST                       3: k
                        148     BINARY_POWER                    
                        150     BINARY_MULTIPLY                 
                        152     CALL_FUNCTION                   1
                        154     STORE_FAST                      4: coeff
                        156     JUMP_FORWARD                    4 (to 166)
                        158     LOAD_GLOBAL                     12: TypeError
                        160     LOAD_CONST                      5: 'argument must be int or float.'
                        162     CALL_FUNCTION                   1
                        164     RAISE_VARARGS                   1
                        166     LOAD_GLOBAL                     13: _dec_from_triple
                        168     LOAD_FAST                       2: sign
                        170     LOAD_FAST                       4: coeff
                        172     LOAD_FAST                       3: k
                        174     UNARY_NEGATIVE                  
                        176     CALL_FUNCTION                   3
                        178     STORE_FAST                      7: result
                        180     LOAD_FAST                       0: cls
                        182     LOAD_GLOBAL                     14: Decimal
                        184     IS_OP                           0 (is)
                        186     POP_JUMP_IF_FALSE               96 (to 192)
                        188     LOAD_FAST                       7: result
                        190     RETURN_VALUE                    
                        192     LOAD_FAST                       0: cls
                        194     LOAD_FAST                       7: result
                        196     CALL_FUNCTION                   1
                        198     RETURN_VALUE                    
                'Decimal.from_float'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _isnan
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        '_exp'
                    [Var Names]
                        'self'
                        'exp'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns whether the number is not actually one.\n\n        0 if a number\n        1 if NaN\n        2 if sNaN\n        '
                        'n'
                        1
                        'N'
                        2
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               18 (to 36)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _exp
                        10      STORE_FAST                      1: exp
                        12      LOAD_FAST                       1: exp
                        14      LOAD_CONST                      1: 'n'
                        16      COMPARE_OP                      2 (==)
                        18      POP_JUMP_IF_FALSE               12 (to 24)
                        20      LOAD_CONST                      2: 1
                        22      RETURN_VALUE                    
                        24      LOAD_FAST                       1: exp
                        26      LOAD_CONST                      3: 'N'
                        28      COMPARE_OP                      2 (==)
                        30      POP_JUMP_IF_FALSE               18 (to 36)
                        32      LOAD_CONST                      4: 2
                        34      RETURN_VALUE                    
                        36      LOAD_CONST                      5: 0
                        38      RETURN_VALUE                    
                'Decimal._isnan'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _isinfinity
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exp'
                        '_sign'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns whether the number is infinite\n\n        0 if finite or not a number\n        1 if +INF\n        -1 if -INF\n        '
                        'F'
                        -1
                        1
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _exp
                        4       LOAD_CONST                      1: 'F'
                        6       COMPARE_OP                      2 (==)
                        8       POP_JUMP_IF_FALSE               12 (to 24)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: _sign
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_CONST                      2: -1
                        18      RETURN_VALUE                    
                        20      LOAD_CONST                      3: 1
                        22      RETURN_VALUE                    
                        24      LOAD_CONST                      4: 0
                        26      RETURN_VALUE                    
                'Decimal._isinfinity'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _check_nans
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_isnan'
                        'getcontext'
                        '_raise_error'
                        'InvalidOperation'
                        '_fix_nan'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'self_is_nan'
                        'other_is_nan'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns whether the number is not actually one.\n\n        if self, other are sNaN, signal\n        if self, other are NaN return nan\n        return 0\n\n        Done before operations.\n        '
                        None
                        False
                        2
                        'sNaN'
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _isnan
                        4       CALL_METHOD                     0
                        6       STORE_FAST                      3: self_is_nan
                        8       LOAD_FAST                       1: other
                        10      LOAD_CONST                      1: None
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               11 (to 22)
                        16      LOAD_CONST                      2: False
                        18      STORE_FAST                      4: other_is_nan
                        20      JUMP_FORWARD                    4 (to 30)
                        22      LOAD_FAST                       1: other
                        24      LOAD_METHOD                     0: _isnan
                        26      CALL_METHOD                     0
                        28      STORE_FAST                      4: other_is_nan
                        30      LOAD_FAST                       3: self_is_nan
                        32      POP_JUMP_IF_TRUE                19 (to 38)
                        34      LOAD_FAST                       4: other_is_nan
                        36      POP_JUMP_IF_FALSE               60 (to 120)
                        38      LOAD_FAST                       2: context
                        40      LOAD_CONST                      1: None
                        42      IS_OP                           0 (is)
                        44      POP_JUMP_IF_FALSE               26 (to 52)
                        46      LOAD_GLOBAL                     1: getcontext
                        48      CALL_FUNCTION                   0
                        50      STORE_FAST                      2: context
                        52      LOAD_FAST                       3: self_is_nan
                        54      LOAD_CONST                      3: 2
                        56      COMPARE_OP                      2 (==)
                        58      POP_JUMP_IF_FALSE               37 (to 74)
                        60      LOAD_FAST                       2: context
                        62      LOAD_METHOD                     2: _raise_error
                        64      LOAD_GLOBAL                     3: InvalidOperation
                        66      LOAD_CONST                      4: 'sNaN'
                        68      LOAD_FAST                       0: self
                        70      CALL_METHOD                     3
                        72      RETURN_VALUE                    
                        74      LOAD_FAST                       4: other_is_nan
                        76      LOAD_CONST                      3: 2
                        78      COMPARE_OP                      2 (==)
                        80      POP_JUMP_IF_FALSE               48 (to 96)
                        82      LOAD_FAST                       2: context
                        84      LOAD_METHOD                     2: _raise_error
                        86      LOAD_GLOBAL                     3: InvalidOperation
                        88      LOAD_CONST                      4: 'sNaN'
                        90      LOAD_FAST                       1: other
                        92      CALL_METHOD                     3
                        94      RETURN_VALUE                    
                        96      LOAD_FAST                       3: self_is_nan
                        98      POP_JUMP_IF_FALSE               55 (to 110)
                        100     LOAD_FAST                       0: self
                        102     LOAD_METHOD                     4: _fix_nan
                        104     LOAD_FAST                       2: context
                        106     CALL_METHOD                     1
                        108     RETURN_VALUE                    
                        110     LOAD_FAST                       1: other
                        112     LOAD_METHOD                     4: _fix_nan
                        114     LOAD_FAST                       2: context
                        116     CALL_METHOD                     1
                        118     RETURN_VALUE                    
                        120     LOAD_CONST                      5: 0
                        122     RETURN_VALUE                    
                'Decimal._check_nans'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _compare_check_nans
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_is_special'
                        'is_snan'
                        '_raise_error'
                        'InvalidOperation'
                        'is_qnan'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Version of _check_nans used for the signaling comparisons\n        compare_signal, __le__, __lt__, __ge__, __gt__.\n\n        Signal InvalidOperation if either self or other is a (quiet\n        or signaling) NaN.  Signaling NaNs take precedence over quiet\n        NaNs.\n\n        Return 0 if neither operand is a NaN.\n\n        '
                        None
                        'comparison involving sNaN'
                        'comparison involving NaN'
                        0
                    [Disassembly]
                        0       LOAD_FAST                       2: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      2: context
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _is_special
                        18      POP_JUMP_IF_TRUE                13 (to 26)
                        20      LOAD_FAST                       1: other
                        22      LOAD_ATTR                       1: _is_special
                        24      POP_JUMP_IF_FALSE               57 (to 114)
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: is_snan
                        30      CALL_METHOD                     0
                        32      POP_JUMP_IF_FALSE               24 (to 48)
                        34      LOAD_FAST                       2: context
                        36      LOAD_METHOD                     3: _raise_error
                        38      LOAD_GLOBAL                     4: InvalidOperation
                        40      LOAD_CONST                      2: 'comparison involving sNaN'
                        42      LOAD_FAST                       0: self
                        44      CALL_METHOD                     3
                        46      RETURN_VALUE                    
                        48      LOAD_FAST                       1: other
                        50      LOAD_METHOD                     2: is_snan
                        52      CALL_METHOD                     0
                        54      POP_JUMP_IF_FALSE               35 (to 70)
                        56      LOAD_FAST                       2: context
                        58      LOAD_METHOD                     3: _raise_error
                        60      LOAD_GLOBAL                     4: InvalidOperation
                        62      LOAD_CONST                      2: 'comparison involving sNaN'
                        64      LOAD_FAST                       1: other
                        66      CALL_METHOD                     3
                        68      RETURN_VALUE                    
                        70      LOAD_FAST                       0: self
                        72      LOAD_METHOD                     5: is_qnan
                        74      CALL_METHOD                     0
                        76      POP_JUMP_IF_FALSE               46 (to 92)
                        78      LOAD_FAST                       2: context
                        80      LOAD_METHOD                     3: _raise_error
                        82      LOAD_GLOBAL                     4: InvalidOperation
                        84      LOAD_CONST                      3: 'comparison involving NaN'
                        86      LOAD_FAST                       0: self
                        88      CALL_METHOD                     3
                        90      RETURN_VALUE                    
                        92      LOAD_FAST                       1: other
                        94      LOAD_METHOD                     5: is_qnan
                        96      CALL_METHOD                     0
                        98      POP_JUMP_IF_FALSE               57 (to 114)
                        100     LOAD_FAST                       2: context
                        102     LOAD_METHOD                     3: _raise_error
                        104     LOAD_GLOBAL                     4: InvalidOperation
                        106     LOAD_CONST                      3: 'comparison involving NaN'
                        108     LOAD_FAST                       1: other
                        110     CALL_METHOD                     3
                        112     RETURN_VALUE                    
                        114     LOAD_CONST                      4: 0
                        116     RETURN_VALUE                    
                'Decimal._compare_check_nans'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __bool__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        '_int'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is nonzero; otherwise return False.\n\n        NaNs and infinities are considered nonzero.\n        '
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       JUMP_IF_TRUE_OR_POP             7 (to 14)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _int
                        10      LOAD_CONST                      1: '0'
                        12      COMPARE_OP                      3 (!=)
                        14      RETURN_VALUE                    
                'Decimal.__bool__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _cmp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        '_isinfinity'
                        '_sign'
                        'adjusted'
                        '_int'
                        '_exp'
                    [Var Names]
                        'self'
                        'other'
                        'self_inf'
                        'other_inf'
                        'self_adjusted'
                        'other_adjusted'
                        'self_padded'
                        'other_padded'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Compare the two non-NaN decimal instances self and other.\n\n        Returns -1 if self < other, 0 if self == other and 1\n        if self > other.  This routine is for internal use only.'
                        0
                        -1
                        1
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_TRUE                6 (to 12)
                        6       LOAD_FAST                       1: other
                        8       LOAD_ATTR                       0: _is_special
                        10      POP_JUMP_IF_FALSE               28 (to 56)
                        12      LOAD_FAST                       0: self
                        14      LOAD_METHOD                     1: _isinfinity
                        16      CALL_METHOD                     0
                        18      STORE_FAST                      2: self_inf
                        20      LOAD_FAST                       1: other
                        22      LOAD_METHOD                     1: _isinfinity
                        24      CALL_METHOD                     0
                        26      STORE_FAST                      3: other_inf
                        28      LOAD_FAST                       2: self_inf
                        30      LOAD_FAST                       3: other_inf
                        32      COMPARE_OP                      2 (==)
                        34      POP_JUMP_IF_FALSE               20 (to 40)
                        36      LOAD_CONST                      1: 0
                        38      RETURN_VALUE                    
                        40      LOAD_FAST                       2: self_inf
                        42      LOAD_FAST                       3: other_inf
                        44      COMPARE_OP                      0 (<)
                        46      POP_JUMP_IF_FALSE               26 (to 52)
                        48      LOAD_CONST                      2: -1
                        50      RETURN_VALUE                    
                        52      LOAD_CONST                      3: 1
                        54      RETURN_VALUE                    
                        56      LOAD_FAST                       0: self
                        58      POP_JUMP_IF_TRUE                40 (to 80)
                        60      LOAD_FAST                       1: other
                        62      POP_JUMP_IF_TRUE                34 (to 68)
                        64      LOAD_CONST                      1: 0
                        66      RETURN_VALUE                    
                        68      LOAD_CONST                      2: -1
                        70      LOAD_FAST                       1: other
                        72      LOAD_ATTR                       2: _sign
                        74      BINARY_POWER                    
                        76      UNARY_NEGATIVE                  
                        78      RETURN_VALUE                    
                        80      LOAD_FAST                       1: other
                        82      POP_JUMP_IF_TRUE                47 (to 94)
                        84      LOAD_CONST                      2: -1
                        86      LOAD_FAST                       0: self
                        88      LOAD_ATTR                       2: _sign
                        90      BINARY_POWER                    
                        92      RETURN_VALUE                    
                        94      LOAD_FAST                       1: other
                        96      LOAD_ATTR                       2: _sign
                        98      LOAD_FAST                       0: self
                        100     LOAD_ATTR                       2: _sign
                        102     COMPARE_OP                      0 (<)
                        104     POP_JUMP_IF_FALSE               55 (to 110)
                        106     LOAD_CONST                      2: -1
                        108     RETURN_VALUE                    
                        110     LOAD_FAST                       0: self
                        112     LOAD_ATTR                       2: _sign
                        114     LOAD_FAST                       1: other
                        116     LOAD_ATTR                       2: _sign
                        118     COMPARE_OP                      0 (<)
                        120     POP_JUMP_IF_FALSE               63 (to 126)
                        122     LOAD_CONST                      3: 1
                        124     RETURN_VALUE                    
                        126     LOAD_FAST                       0: self
                        128     LOAD_METHOD                     3: adjusted
                        130     CALL_METHOD                     0
                        132     STORE_FAST                      4: self_adjusted
                        134     LOAD_FAST                       1: other
                        136     LOAD_METHOD                     3: adjusted
                        138     CALL_METHOD                     0
                        140     STORE_FAST                      5: other_adjusted
                        142     LOAD_FAST                       4: self_adjusted
                        144     LOAD_FAST                       5: other_adjusted
                        146     COMPARE_OP                      2 (==)
                        148     POP_JUMP_IF_FALSE               118 (to 236)
                        150     LOAD_FAST                       0: self
                        152     LOAD_ATTR                       4: _int
                        154     LOAD_CONST                      4: '0'
                        156     LOAD_FAST                       0: self
                        158     LOAD_ATTR                       5: _exp
                        160     LOAD_FAST                       1: other
                        162     LOAD_ATTR                       5: _exp
                        164     BINARY_SUBTRACT                 
                        166     BINARY_MULTIPLY                 
                        168     BINARY_ADD                      
                        170     STORE_FAST                      6: self_padded
                        172     LOAD_FAST                       1: other
                        174     LOAD_ATTR                       4: _int
                        176     LOAD_CONST                      4: '0'
                        178     LOAD_FAST                       1: other
                        180     LOAD_ATTR                       5: _exp
                        182     LOAD_FAST                       0: self
                        184     LOAD_ATTR                       5: _exp
                        186     BINARY_SUBTRACT                 
                        188     BINARY_MULTIPLY                 
                        190     BINARY_ADD                      
                        192     STORE_FAST                      7: other_padded
                        194     LOAD_FAST                       6: self_padded
                        196     LOAD_FAST                       7: other_padded
                        198     COMPARE_OP                      2 (==)
                        200     POP_JUMP_IF_FALSE               103 (to 206)
                        202     LOAD_CONST                      1: 0
                        204     RETURN_VALUE                    
                        206     LOAD_FAST                       6: self_padded
                        208     LOAD_FAST                       7: other_padded
                        210     COMPARE_OP                      0 (<)
                        212     POP_JUMP_IF_FALSE               113 (to 226)
                        214     LOAD_CONST                      2: -1
                        216     LOAD_FAST                       0: self
                        218     LOAD_ATTR                       2: _sign
                        220     BINARY_POWER                    
                        222     UNARY_NEGATIVE                  
                        224     RETURN_VALUE                    
                        226     LOAD_CONST                      2: -1
                        228     LOAD_FAST                       0: self
                        230     LOAD_ATTR                       2: _sign
                        232     BINARY_POWER                    
                        234     RETURN_VALUE                    
                        236     LOAD_FAST                       4: self_adjusted
                        238     LOAD_FAST                       5: other_adjusted
                        240     COMPARE_OP                      4 (>)
                        242     POP_JUMP_IF_FALSE               127 (to 254)
                        244     LOAD_CONST                      2: -1
                        246     LOAD_FAST                       0: self
                        248     LOAD_ATTR                       2: _sign
                        250     BINARY_POWER                    
                        252     RETURN_VALUE                    
                        254     LOAD_CONST                      2: -1
                        256     LOAD_FAST                       0: self
                        258     LOAD_ATTR                       2: _sign
                        260     BINARY_POWER                    
                        262     UNARY_NEGATIVE                  
                        264     RETURN_VALUE                    
                'Decimal._cmp'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __eq__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_for_comparison'
                        'NotImplemented'
                        '_check_nans'
                        '_cmp'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                        (
                            'equality_op'
                        )
                        False
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_for_comparison
                        2       LOAD_FAST                       0: self
                        4       LOAD_FAST                       1: other
                        6       LOAD_CONST                      1: True
                        8       LOAD_CONST                      2: ('equality_op',)
                        10      CALL_FUNCTION_KW                3
                        12      UNPACK_SEQUENCE                 2
                        14      STORE_FAST                      0: self
                        16      STORE_FAST                      1: other
                        18      LOAD_FAST                       1: other
                        20      LOAD_GLOBAL                     1: NotImplemented
                        22      IS_OP                           0 (is)
                        24      POP_JUMP_IF_FALSE               15 (to 30)
                        26      LOAD_FAST                       1: other
                        28      RETURN_VALUE                    
                        30      LOAD_FAST                       0: self
                        32      LOAD_METHOD                     2: _check_nans
                        34      LOAD_FAST                       1: other
                        36      LOAD_FAST                       2: context
                        38      CALL_METHOD                     2
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_CONST                      3: False
                        44      RETURN_VALUE                    
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     3: _cmp
                        50      LOAD_FAST                       1: other
                        52      CALL_METHOD                     1
                        54      LOAD_CONST                      4: 0
                        56      COMPARE_OP                      2 (==)
                        58      RETURN_VALUE                    
                'Decimal.__eq__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __lt__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_for_comparison'
                        'NotImplemented'
                        '_compare_check_nans'
                        '_cmp'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_for_comparison
                        2       LOAD_FAST                       0: self
                        4       LOAD_FAST                       1: other
                        6       CALL_FUNCTION                   2
                        8       UNPACK_SEQUENCE                 2
                        10      STORE_FAST                      0: self
                        12      STORE_FAST                      1: other
                        14      LOAD_FAST                       1: other
                        16      LOAD_GLOBAL                     1: NotImplemented
                        18      IS_OP                           0 (is)
                        20      POP_JUMP_IF_FALSE               13 (to 26)
                        22      LOAD_FAST                       1: other
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _compare_check_nans
                        30      LOAD_FAST                       1: other
                        32      LOAD_FAST                       2: context
                        34      CALL_METHOD                     2
                        36      STORE_FAST                      3: ans
                        38      LOAD_FAST                       3: ans
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_CONST                      1: False
                        44      RETURN_VALUE                    
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     3: _cmp
                        50      LOAD_FAST                       1: other
                        52      CALL_METHOD                     1
                        54      LOAD_CONST                      2: 0
                        56      COMPARE_OP                      0 (<)
                        58      RETURN_VALUE                    
                'Decimal.__lt__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __le__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_for_comparison'
                        'NotImplemented'
                        '_compare_check_nans'
                        '_cmp'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_for_comparison
                        2       LOAD_FAST                       0: self
                        4       LOAD_FAST                       1: other
                        6       CALL_FUNCTION                   2
                        8       UNPACK_SEQUENCE                 2
                        10      STORE_FAST                      0: self
                        12      STORE_FAST                      1: other
                        14      LOAD_FAST                       1: other
                        16      LOAD_GLOBAL                     1: NotImplemented
                        18      IS_OP                           0 (is)
                        20      POP_JUMP_IF_FALSE               13 (to 26)
                        22      LOAD_FAST                       1: other
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _compare_check_nans
                        30      LOAD_FAST                       1: other
                        32      LOAD_FAST                       2: context
                        34      CALL_METHOD                     2
                        36      STORE_FAST                      3: ans
                        38      LOAD_FAST                       3: ans
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_CONST                      1: False
                        44      RETURN_VALUE                    
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     3: _cmp
                        50      LOAD_FAST                       1: other
                        52      CALL_METHOD                     1
                        54      LOAD_CONST                      2: 0
                        56      COMPARE_OP                      1 (<=)
                        58      RETURN_VALUE                    
                'Decimal.__le__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __gt__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_for_comparison'
                        'NotImplemented'
                        '_compare_check_nans'
                        '_cmp'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_for_comparison
                        2       LOAD_FAST                       0: self
                        4       LOAD_FAST                       1: other
                        6       CALL_FUNCTION                   2
                        8       UNPACK_SEQUENCE                 2
                        10      STORE_FAST                      0: self
                        12      STORE_FAST                      1: other
                        14      LOAD_FAST                       1: other
                        16      LOAD_GLOBAL                     1: NotImplemented
                        18      IS_OP                           0 (is)
                        20      POP_JUMP_IF_FALSE               13 (to 26)
                        22      LOAD_FAST                       1: other
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _compare_check_nans
                        30      LOAD_FAST                       1: other
                        32      LOAD_FAST                       2: context
                        34      CALL_METHOD                     2
                        36      STORE_FAST                      3: ans
                        38      LOAD_FAST                       3: ans
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_CONST                      1: False
                        44      RETURN_VALUE                    
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     3: _cmp
                        50      LOAD_FAST                       1: other
                        52      CALL_METHOD                     1
                        54      LOAD_CONST                      2: 0
                        56      COMPARE_OP                      4 (>)
                        58      RETURN_VALUE                    
                'Decimal.__gt__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __ge__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_for_comparison'
                        'NotImplemented'
                        '_compare_check_nans'
                        '_cmp'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_for_comparison
                        2       LOAD_FAST                       0: self
                        4       LOAD_FAST                       1: other
                        6       CALL_FUNCTION                   2
                        8       UNPACK_SEQUENCE                 2
                        10      STORE_FAST                      0: self
                        12      STORE_FAST                      1: other
                        14      LOAD_FAST                       1: other
                        16      LOAD_GLOBAL                     1: NotImplemented
                        18      IS_OP                           0 (is)
                        20      POP_JUMP_IF_FALSE               13 (to 26)
                        22      LOAD_FAST                       1: other
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _compare_check_nans
                        30      LOAD_FAST                       1: other
                        32      LOAD_FAST                       2: context
                        34      CALL_METHOD                     2
                        36      STORE_FAST                      3: ans
                        38      LOAD_FAST                       3: ans
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_CONST                      1: False
                        44      RETURN_VALUE                    
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     3: _cmp
                        50      LOAD_FAST                       1: other
                        52      CALL_METHOD                     1
                        54      LOAD_CONST                      2: 0
                        56      COMPARE_OP                      5 (>=)
                        58      RETURN_VALUE                    
                'Decimal.__ge__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: compare
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '_is_special'
                        '_check_nans'
                        'Decimal'
                        '_cmp'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Compare self to other.  Return a decimal value:\n\n        a or b is a NaN ==> Decimal('NaN')\n        a < b           ==> Decimal('-1')\n        a == b          ==> Decimal('0')\n        a > b           ==> Decimal('1')\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: _is_special
                        16      POP_JUMP_IF_TRUE                14 (to 28)
                        18      LOAD_FAST                       1: other
                        20      POP_JUMP_IF_FALSE               24 (to 48)
                        22      LOAD_FAST                       1: other
                        24      LOAD_ATTR                       1: _is_special
                        26      POP_JUMP_IF_FALSE               24 (to 48)
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     2: _check_nans
                        32      LOAD_FAST                       1: other
                        34      LOAD_FAST                       2: context
                        36      CALL_METHOD                     2
                        38      STORE_FAST                      3: ans
                        40      LOAD_FAST                       3: ans
                        42      POP_JUMP_IF_FALSE               24 (to 48)
                        44      LOAD_FAST                       3: ans
                        46      RETURN_VALUE                    
                        48      LOAD_GLOBAL                     3: Decimal
                        50      LOAD_FAST                       0: self
                        52      LOAD_METHOD                     4: _cmp
                        54      LOAD_FAST                       1: other
                        56      CALL_METHOD                     1
                        58      CALL_FUNCTION                   1
                        60      RETURN_VALUE                    
                'Decimal.compare'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        'is_snan'
                        'TypeError'
                        'is_nan'
                        'object'
                        '__hash__'
                        '_sign'
                        '_PyHASH_INF'
                        '_exp'
                        'pow'
                        '_PyHASH_MODULUS'
                        '_PyHASH_10INV'
                        'int'
                        '_int'
                    [Var Names]
                        'self'
                        'exp_hash'
                        'hash_'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'x.__hash__() <==> hash(x)'
                        'Cannot hash a signaling NaN value.'
                        0
                        10
                        -1
                        -2
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               28 (to 56)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: is_snan
                        10      CALL_METHOD                     0
                        12      POP_JUMP_IF_FALSE               11 (to 22)
                        14      LOAD_GLOBAL                     2: TypeError
                        16      LOAD_CONST                      1: 'Cannot hash a signaling NaN value.'
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                        22      LOAD_FAST                       0: self
                        24      LOAD_METHOD                     3: is_nan
                        26      CALL_METHOD                     0
                        28      POP_JUMP_IF_FALSE               20 (to 40)
                        30      LOAD_GLOBAL                     4: object
                        32      LOAD_METHOD                     5: __hash__
                        34      LOAD_FAST                       0: self
                        36      CALL_METHOD                     1
                        38      RETURN_VALUE                    
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       6: _sign
                        44      POP_JUMP_IF_FALSE               26 (to 52)
                        46      LOAD_GLOBAL                     7: _PyHASH_INF
                        48      UNARY_NEGATIVE                  
                        50      RETURN_VALUE                    
                        52      LOAD_GLOBAL                     7: _PyHASH_INF
                        54      RETURN_VALUE                    
                        56      LOAD_FAST                       0: self
                        58      LOAD_ATTR                       8: _exp
                        60      LOAD_CONST                      2: 0
                        62      COMPARE_OP                      5 (>=)
                        64      POP_JUMP_IF_FALSE               41 (to 82)
                        66      LOAD_GLOBAL                     9: pow
                        68      LOAD_CONST                      3: 10
                        70      LOAD_FAST                       0: self
                        72      LOAD_ATTR                       8: _exp
                        74      LOAD_GLOBAL                     10: _PyHASH_MODULUS
                        76      CALL_FUNCTION                   3
                        78      STORE_FAST                      1: exp_hash
                        80      JUMP_FORWARD                    8 (to 98)
                        82      LOAD_GLOBAL                     9: pow
                        84      LOAD_GLOBAL                     11: _PyHASH_10INV
                        86      LOAD_FAST                       0: self
                        88      LOAD_ATTR                       8: _exp
                        90      UNARY_NEGATIVE                  
                        92      LOAD_GLOBAL                     10: _PyHASH_MODULUS
                        94      CALL_FUNCTION                   3
                        96      STORE_FAST                      1: exp_hash
                        98      LOAD_GLOBAL                     12: int
                        100     LOAD_FAST                       0: self
                        102     LOAD_ATTR                       13: _int
                        104     CALL_FUNCTION                   1
                        106     LOAD_FAST                       1: exp_hash
                        108     BINARY_MULTIPLY                 
                        110     LOAD_GLOBAL                     10: _PyHASH_MODULUS
                        112     BINARY_MODULO                   
                        114     STORE_FAST                      2: hash_
                        116     LOAD_FAST                       0: self
                        118     LOAD_CONST                      2: 0
                        120     COMPARE_OP                      5 (>=)
                        122     POP_JUMP_IF_FALSE               64 (to 128)
                        124     LOAD_FAST                       2: hash_
                        126     JUMP_FORWARD                    2 (to 132)
                        128     LOAD_FAST                       2: hash_
                        130     UNARY_NEGATIVE                  
                        132     STORE_FAST                      3: ans
                        134     LOAD_FAST                       3: ans
                        136     LOAD_CONST                      4: -1
                        138     COMPARE_OP                      2 (==)
                        140     POP_JUMP_IF_FALSE               73 (to 146)
                        142     LOAD_CONST                      5: -2
                        144     RETURN_VALUE                    
                        146     LOAD_FAST                       3: ans
                        148     RETURN_VALUE                    
                'Decimal.__hash__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: as_tuple
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'DecimalTuple'
                        '_sign'
                        'tuple'
                        'map'
                        'int'
                        '_int'
                        '_exp'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Represents the number as a triple tuple.\n\n        To show the internals exactly as they are.\n        '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: DecimalTuple
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _sign
                        6       LOAD_GLOBAL                     2: tuple
                        8       LOAD_GLOBAL                     3: map
                        10      LOAD_GLOBAL                     4: int
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       5: _int
                        16      CALL_FUNCTION                   2
                        18      CALL_FUNCTION                   1
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       6: _exp
                        24      CALL_FUNCTION                   3
                        26      RETURN_VALUE                    
                'Decimal.as_tuple'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: as_integer_ratio
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        'is_nan'
                        'ValueError'
                        'OverflowError'
                        'int'
                        '_int'
                        '_exp'
                        'min'
                        'bit_length'
                        '_sign'
                    [Var Names]
                        'self'
                        'n'
                        'd'
                        'd5'
                        'd2'
                        'shift2'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Express a finite Decimal instance in the form n / d.\n\n        Returns a pair (n, d) of integers.  When called on an infinity\n        or NaN, raises OverflowError or ValueError respectively.\n\n        >>> Decimal('3.14').as_integer_ratio()\n        (157, 50)\n        >>> Decimal('-123e5').as_integer_ratio()\n        (-12300000, 1)\n        >>> Decimal('0.00').as_integer_ratio()\n        (0, 1)\n\n        "
                        'cannot convert NaN to integer ratio'
                        'cannot convert Infinity to integer ratio'
                        (
                            0
                            1
                        )
                        0
                        10
                        1
                        5
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               15 (to 30)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: is_nan
                        10      CALL_METHOD                     0
                        12      POP_JUMP_IF_FALSE               11 (to 22)
                        14      LOAD_GLOBAL                     2: ValueError
                        16      LOAD_CONST                      1: 'cannot convert NaN to integer ratio'
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                        22      LOAD_GLOBAL                     3: OverflowError
                        24      LOAD_CONST                      2: 'cannot convert Infinity to integer ratio'
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      LOAD_FAST                       0: self
                        32      POP_JUMP_IF_TRUE                19 (to 38)
                        34      LOAD_CONST                      3: (0, 1)
                        36      RETURN_VALUE                    
                        38      LOAD_GLOBAL                     4: int
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       5: _int
                        44      CALL_FUNCTION                   1
                        46      STORE_FAST                      1: n
                        48      LOAD_FAST                       0: self
                        50      LOAD_ATTR                       6: _exp
                        52      LOAD_CONST                      4: 0
                        54      COMPARE_OP                      5 (>=)
                        56      POP_JUMP_IF_FALSE               40 (to 80)
                        58      LOAD_FAST                       1: n
                        60      LOAD_CONST                      5: 10
                        62      LOAD_FAST                       0: self
                        64      LOAD_ATTR                       6: _exp
                        66      BINARY_POWER                    
                        68      BINARY_MULTIPLY                 
                        70      LOAD_CONST                      6: 1
                        72      ROT_TWO                         
                        74      STORE_FAST                      1: n
                        76      STORE_FAST                      2: d
                        78      JUMP_FORWARD                    64 (to 208)
                        80      LOAD_FAST                       0: self
                        82      LOAD_ATTR                       6: _exp
                        84      UNARY_NEGATIVE                  
                        86      STORE_FAST                      3: d5
                        88      LOAD_FAST                       3: d5
                        90      LOAD_CONST                      4: 0
                        92      COMPARE_OP                      4 (>)
                        94      POP_JUMP_IF_FALSE               72 (to 144)
                        96      LOAD_FAST                       1: n
                        98      LOAD_CONST                      7: 5
                        100     BINARY_MODULO                   
                        102     LOAD_CONST                      4: 0
                        104     COMPARE_OP                      2 (==)
                        106     POP_JUMP_IF_FALSE               72 (to 144)
                        108     LOAD_FAST                       1: n
                        110     LOAD_CONST                      7: 5
                        112     INPLACE_FLOOR_DIVIDE            
                        114     STORE_FAST                      1: n
                        116     LOAD_FAST                       3: d5
                        118     LOAD_CONST                      6: 1
                        120     INPLACE_SUBTRACT                
                        122     STORE_FAST                      3: d5
                        124     LOAD_FAST                       3: d5
                        126     LOAD_CONST                      4: 0
                        128     COMPARE_OP                      4 (>)
                        130     POP_JUMP_IF_FALSE               72 (to 144)
                        132     LOAD_FAST                       1: n
                        134     LOAD_CONST                      7: 5
                        136     BINARY_MODULO                   
                        138     LOAD_CONST                      4: 0
                        140     COMPARE_OP                      2 (==)
                        142     POP_JUMP_IF_TRUE                54 (to 108)
                        144     LOAD_FAST                       0: self
                        146     LOAD_ATTR                       6: _exp
                        148     UNARY_NEGATIVE                  
                        150     STORE_FAST                      4: d2
                        152     LOAD_GLOBAL                     7: min
                        154     LOAD_FAST                       1: n
                        156     LOAD_FAST                       1: n
                        158     UNARY_NEGATIVE                  
                        160     BINARY_AND                      
                        162     LOAD_METHOD                     8: bit_length
                        164     CALL_METHOD                     0
                        166     LOAD_CONST                      6: 1
                        168     BINARY_SUBTRACT                 
                        170     LOAD_FAST                       4: d2
                        172     CALL_FUNCTION                   2
                        174     STORE_FAST                      5: shift2
                        176     LOAD_FAST                       5: shift2
                        178     POP_JUMP_IF_FALSE               98 (to 196)
                        180     LOAD_FAST                       1: n
                        182     LOAD_FAST                       5: shift2
                        184     INPLACE_RSHIFT                  
                        186     STORE_FAST                      1: n
                        188     LOAD_FAST                       4: d2
                        190     LOAD_FAST                       5: shift2
                        192     INPLACE_SUBTRACT                
                        194     STORE_FAST                      4: d2
                        196     LOAD_CONST                      7: 5
                        198     LOAD_FAST                       3: d5
                        200     BINARY_POWER                    
                        202     LOAD_FAST                       4: d2
                        204     BINARY_LSHIFT                   
                        206     STORE_FAST                      2: d
                        208     LOAD_FAST                       0: self
                        210     LOAD_ATTR                       9: _sign
                        212     POP_JUMP_IF_FALSE               110 (to 220)
                        214     LOAD_FAST                       1: n
                        216     UNARY_NEGATIVE                  
                        218     STORE_FAST                      1: n
                        220     LOAD_FAST                       1: n
                        222     LOAD_FAST                       2: d
                        224     BUILD_TUPLE                     2
                        226     RETURN_VALUE                    
                'Decimal.as_integer_ratio'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'str'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Represents the number as an instance of Decimal.'
                        "Decimal('%s')"
                    [Disassembly]
                        0       LOAD_CONST                      1: "Decimal('%s')"
                        2       LOAD_GLOBAL                     0: str
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   1
                        8       BINARY_MODULO                   
                        10      RETURN_VALUE                    
                'Decimal.__repr__'
                False
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __str__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sign'
                        '_is_special'
                        '_exp'
                        '_int'
                        'len'
                        'getcontext'
                        'capitals'
                    [Var Names]
                        'self'
                        'eng'
                        'context'
                        'sign'
                        'leftdigits'
                        'dotplace'
                        'intpart'
                        'fracpart'
                        'exp'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return string representation of the number in scientific notation.\n\n        Captures all of the information in the underlying representation.\n        '
                        ''
                        '-'
                        'F'
                        'Infinity'
                        'n'
                        'NaN'
                        'sNaN'
                        0
                        -6
                        1
                        '0'
                        3
                        '.'
                        None
                        'e'
                        'E'
                        '%+d'
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_CONST                      2: '-'
                        4       BUILD_LIST                      2
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       0: _sign
                        10      BINARY_SUBSCR                   
                        12      STORE_FAST                      3: sign
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _is_special
                        18      POP_JUMP_IF_FALSE               38 (to 76)
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: _exp
                        24      LOAD_CONST                      3: 'F'
                        26      COMPARE_OP                      2 (==)
                        28      POP_JUMP_IF_FALSE               19 (to 38)
                        30      LOAD_FAST                       3: sign
                        32      LOAD_CONST                      4: 'Infinity'
                        34      BINARY_ADD                      
                        36      RETURN_VALUE                    
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       2: _exp
                        42      LOAD_CONST                      5: 'n'
                        44      COMPARE_OP                      2 (==)
                        46      POP_JUMP_IF_FALSE               31 (to 62)
                        48      LOAD_FAST                       3: sign
                        50      LOAD_CONST                      6: 'NaN'
                        52      BINARY_ADD                      
                        54      LOAD_FAST                       0: self
                        56      LOAD_ATTR                       3: _int
                        58      BINARY_ADD                      
                        60      RETURN_VALUE                    
                        62      LOAD_FAST                       3: sign
                        64      LOAD_CONST                      7: 'sNaN'
                        66      BINARY_ADD                      
                        68      LOAD_FAST                       0: self
                        70      LOAD_ATTR                       3: _int
                        72      BINARY_ADD                      
                        74      RETURN_VALUE                    
                        76      LOAD_FAST                       0: self
                        78      LOAD_ATTR                       2: _exp
                        80      LOAD_GLOBAL                     4: len
                        82      LOAD_FAST                       0: self
                        84      LOAD_ATTR                       3: _int
                        86      CALL_FUNCTION                   1
                        88      BINARY_ADD                      
                        90      STORE_FAST                      4: leftdigits
                        92      LOAD_FAST                       0: self
                        94      LOAD_ATTR                       2: _exp
                        96      LOAD_CONST                      8: 0
                        98      COMPARE_OP                      1 (<=)
                        100     POP_JUMP_IF_FALSE               58 (to 116)
                        102     LOAD_FAST                       4: leftdigits
                        104     LOAD_CONST                      9: -6
                        106     COMPARE_OP                      4 (>)
                        108     POP_JUMP_IF_FALSE               58 (to 116)
                        110     LOAD_FAST                       4: leftdigits
                        112     STORE_FAST                      5: dotplace
                        114     JUMP_FORWARD                    27 (to 170)
                        116     LOAD_FAST                       1: eng
                        118     POP_JUMP_IF_TRUE                63 (to 126)
                        120     LOAD_CONST                      10: 1
                        122     STORE_FAST                      5: dotplace
                        124     JUMP_FORWARD                    22 (to 170)
                        126     LOAD_FAST                       0: self
                        128     LOAD_ATTR                       3: _int
                        130     LOAD_CONST                      11: '0'
                        132     COMPARE_OP                      2 (==)
                        134     POP_JUMP_IF_FALSE               77 (to 154)
                        136     LOAD_FAST                       4: leftdigits
                        138     LOAD_CONST                      10: 1
                        140     BINARY_ADD                      
                        142     LOAD_CONST                      12: 3
                        144     BINARY_MODULO                   
                        146     LOAD_CONST                      10: 1
                        148     BINARY_SUBTRACT                 
                        150     STORE_FAST                      5: dotplace
                        152     JUMP_FORWARD                    8 (to 170)
                        154     LOAD_FAST                       4: leftdigits
                        156     LOAD_CONST                      10: 1
                        158     BINARY_SUBTRACT                 
                        160     LOAD_CONST                      12: 3
                        162     BINARY_MODULO                   
                        164     LOAD_CONST                      10: 1
                        166     BINARY_ADD                      
                        168     STORE_FAST                      5: dotplace
                        170     LOAD_FAST                       5: dotplace
                        172     LOAD_CONST                      8: 0
                        174     COMPARE_OP                      1 (<=)
                        176     POP_JUMP_IF_FALSE               102 (to 204)
                        178     LOAD_CONST                      11: '0'
                        180     STORE_FAST                      6: intpart
                        182     LOAD_CONST                      13: '.'
                        184     LOAD_CONST                      11: '0'
                        186     LOAD_FAST                       5: dotplace
                        188     UNARY_NEGATIVE                  
                        190     BINARY_MULTIPLY                 
                        192     BINARY_ADD                      
                        194     LOAD_FAST                       0: self
                        196     LOAD_ATTR                       3: _int
                        198     BINARY_ADD                      
                        200     STORE_FAST                      7: fracpart
                        202     JUMP_FORWARD                    38 (to 280)
                        204     LOAD_FAST                       5: dotplace
                        206     LOAD_GLOBAL                     4: len
                        208     LOAD_FAST                       0: self
                        210     LOAD_ATTR                       3: _int
                        212     CALL_FUNCTION                   1
                        214     COMPARE_OP                      5 (>=)
                        216     POP_JUMP_IF_FALSE               124 (to 248)
                        218     LOAD_FAST                       0: self
                        220     LOAD_ATTR                       3: _int
                        222     LOAD_CONST                      11: '0'
                        224     LOAD_FAST                       5: dotplace
                        226     LOAD_GLOBAL                     4: len
                        228     LOAD_FAST                       0: self
                        230     LOAD_ATTR                       3: _int
                        232     CALL_FUNCTION                   1
                        234     BINARY_SUBTRACT                 
                        236     BINARY_MULTIPLY                 
                        238     BINARY_ADD                      
                        240     STORE_FAST                      6: intpart
                        242     LOAD_CONST                      1: ''
                        244     STORE_FAST                      7: fracpart
                        246     JUMP_FORWARD                    16 (to 280)
                        248     LOAD_FAST                       0: self
                        250     LOAD_ATTR                       3: _int
                        252     LOAD_CONST                      14: None
                        254     LOAD_FAST                       5: dotplace
                        256     BUILD_SLICE                     2
                        258     BINARY_SUBSCR                   
                        260     STORE_FAST                      6: intpart
                        262     LOAD_CONST                      13: '.'
                        264     LOAD_FAST                       0: self
                        266     LOAD_ATTR                       3: _int
                        268     LOAD_FAST                       5: dotplace
                        270     LOAD_CONST                      14: None
                        272     BUILD_SLICE                     2
                        274     BINARY_SUBSCR                   
                        276     BINARY_ADD                      
                        278     STORE_FAST                      7: fracpart
                        280     LOAD_FAST                       4: leftdigits
                        282     LOAD_FAST                       5: dotplace
                        284     COMPARE_OP                      2 (==)
                        286     POP_JUMP_IF_FALSE               147 (to 294)
                        288     LOAD_CONST                      1: ''
                        290     STORE_FAST                      8: exp
                        292     JUMP_FORWARD                    20 (to 334)
                        294     LOAD_FAST                       2: context
                        296     LOAD_CONST                      14: None
                        298     IS_OP                           0 (is)
                        300     POP_JUMP_IF_FALSE               154 (to 308)
                        302     LOAD_GLOBAL                     5: getcontext
                        304     CALL_FUNCTION                   0
                        306     STORE_FAST                      2: context
                        308     LOAD_CONST                      15: 'e'
                        310     LOAD_CONST                      16: 'E'
                        312     BUILD_LIST                      2
                        314     LOAD_FAST                       2: context
                        316     LOAD_ATTR                       6: capitals
                        318     BINARY_SUBSCR                   
                        320     LOAD_CONST                      17: '%+d'
                        322     LOAD_FAST                       4: leftdigits
                        324     LOAD_FAST                       5: dotplace
                        326     BINARY_SUBTRACT                 
                        328     BINARY_MODULO                   
                        330     BINARY_ADD                      
                        332     STORE_FAST                      8: exp
                        334     LOAD_FAST                       3: sign
                        336     LOAD_FAST                       6: intpart
                        338     BINARY_ADD                      
                        340     LOAD_FAST                       7: fracpart
                        342     BINARY_ADD                      
                        344     LOAD_FAST                       8: exp
                        346     BINARY_ADD                      
                        348     RETURN_VALUE                    
                'Decimal.__str__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: to_eng_string
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__str__'
                    [Var Names]
                        'self'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Convert to a string, using engineering notation if an exponent is needed.\n\n        Engineering notation has an exponent which is a multiple of 3.  This\n        can leave up to 3 digits to the left of the decimal place and may\n        require the addition of either one or two trailing zeros.\n        '
                        True
                        (
                            'eng'
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __str__
                        4       LOAD_CONST                      1: True
                        6       LOAD_FAST                       1: context
                        8       LOAD_CONST                      2: ('eng', 'context')
                        10      CALL_FUNCTION_KW                2
                        12      RETURN_VALUE                    
                'Decimal.to_eng_string'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __neg__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        '_check_nans'
                        'getcontext'
                        'rounding'
                        'ROUND_FLOOR'
                        'copy_abs'
                        'copy_negate'
                        '_fix'
                    [Var Names]
                        'self'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns a copy with the sign switched.\n\n        Rounds, if it has reason.\n        '
                        (
                            'context'
                        )
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               13 (to 26)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _check_nans
                        10      LOAD_FAST                       1: context
                        12      LOAD_CONST                      1: ('context',)
                        14      CALL_FUNCTION_KW                1
                        16      STORE_FAST                      2: ans
                        18      LOAD_FAST                       2: ans
                        20      POP_JUMP_IF_FALSE               13 (to 26)
                        22      LOAD_FAST                       2: ans
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       1: context
                        28      LOAD_CONST                      2: None
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               20 (to 40)
                        34      LOAD_GLOBAL                     2: getcontext
                        36      CALL_FUNCTION                   0
                        38      STORE_FAST                      1: context
                        40      LOAD_FAST                       0: self
                        42      POP_JUMP_IF_TRUE                32 (to 64)
                        44      LOAD_FAST                       1: context
                        46      LOAD_ATTR                       3: rounding
                        48      LOAD_GLOBAL                     4: ROUND_FLOOR
                        50      COMPARE_OP                      3 (!=)
                        52      POP_JUMP_IF_FALSE               32 (to 64)
                        54      LOAD_FAST                       0: self
                        56      LOAD_METHOD                     5: copy_abs
                        58      CALL_METHOD                     0
                        60      STORE_FAST                      2: ans
                        62      JUMP_FORWARD                    4 (to 72)
                        64      LOAD_FAST                       0: self
                        66      LOAD_METHOD                     6: copy_negate
                        68      CALL_METHOD                     0
                        70      STORE_FAST                      2: ans
                        72      LOAD_FAST                       2: ans
                        74      LOAD_METHOD                     7: _fix
                        76      LOAD_FAST                       1: context
                        78      CALL_METHOD                     1
                        80      RETURN_VALUE                    
                'Decimal.__neg__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __pos__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        '_check_nans'
                        'getcontext'
                        'rounding'
                        'ROUND_FLOOR'
                        'copy_abs'
                        'Decimal'
                        '_fix'
                    [Var Names]
                        'self'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns a copy, unless it is a sNaN.\n\n        Rounds the number (if more than precision digits)\n        '
                        (
                            'context'
                        )
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               13 (to 26)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _check_nans
                        10      LOAD_FAST                       1: context
                        12      LOAD_CONST                      1: ('context',)
                        14      CALL_FUNCTION_KW                1
                        16      STORE_FAST                      2: ans
                        18      LOAD_FAST                       2: ans
                        20      POP_JUMP_IF_FALSE               13 (to 26)
                        22      LOAD_FAST                       2: ans
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       1: context
                        28      LOAD_CONST                      2: None
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               20 (to 40)
                        34      LOAD_GLOBAL                     2: getcontext
                        36      CALL_FUNCTION                   0
                        38      STORE_FAST                      1: context
                        40      LOAD_FAST                       0: self
                        42      POP_JUMP_IF_TRUE                32 (to 64)
                        44      LOAD_FAST                       1: context
                        46      LOAD_ATTR                       3: rounding
                        48      LOAD_GLOBAL                     4: ROUND_FLOOR
                        50      COMPARE_OP                      3 (!=)
                        52      POP_JUMP_IF_FALSE               32 (to 64)
                        54      LOAD_FAST                       0: self
                        56      LOAD_METHOD                     5: copy_abs
                        58      CALL_METHOD                     0
                        60      STORE_FAST                      2: ans
                        62      JUMP_FORWARD                    4 (to 72)
                        64      LOAD_GLOBAL                     6: Decimal
                        66      LOAD_FAST                       0: self
                        68      CALL_FUNCTION                   1
                        70      STORE_FAST                      2: ans
                        72      LOAD_FAST                       2: ans
                        74      LOAD_METHOD                     7: _fix
                        76      LOAD_FAST                       1: context
                        78      CALL_METHOD                     1
                        80      RETURN_VALUE                    
                'Decimal.__pos__'
                True
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __abs__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'copy_abs'
                        '_is_special'
                        '_check_nans'
                        '_sign'
                        '__neg__'
                        '__pos__'
                    [Var Names]
                        'self'
                        'round'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns the absolute value of self.\n\n        If the keyword argument 'round' is false, do not round.  The\n        expression self.__abs__(round=False) is equivalent to\n        self.copy_abs().\n        "
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       1: round
                        2       POP_JUMP_IF_TRUE                6 (to 12)
                        4       LOAD_FAST                       0: self
                        6       LOAD_METHOD                     0: copy_abs
                        8       CALL_METHOD                     0
                        10      RETURN_VALUE                    
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: _is_special
                        16      POP_JUMP_IF_FALSE               19 (to 38)
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       2: _check_nans
                        22      LOAD_FAST                       2: context
                        24      LOAD_CONST                      1: ('context',)
                        26      CALL_FUNCTION_KW                1
                        28      STORE_FAST                      3: ans
                        30      LOAD_FAST                       3: ans
                        32      POP_JUMP_IF_FALSE               19 (to 38)
                        34      LOAD_FAST                       3: ans
                        36      RETURN_VALUE                    
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       3: _sign
                        42      POP_JUMP_IF_FALSE               30 (to 60)
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       4: __neg__
                        48      LOAD_FAST                       2: context
                        50      LOAD_CONST                      1: ('context',)
                        52      CALL_FUNCTION_KW                1
                        54      STORE_FAST                      3: ans
                        56      LOAD_FAST                       3: ans
                        58      RETURN_VALUE                    
                        60      LOAD_FAST                       0: self
                        62      LOAD_ATTR                       5: __pos__
                        64      LOAD_FAST                       2: context
                        66      LOAD_CONST                      1: ('context',)
                        68      CALL_FUNCTION_KW                1
                        70      STORE_FAST                      3: ans
                        72      LOAD_FAST                       3: ans
                        74      RETURN_VALUE                    
                'Decimal.__abs__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __add__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 10
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        'getcontext'
                        '_is_special'
                        '_check_nans'
                        '_isinfinity'
                        '_sign'
                        '_raise_error'
                        'InvalidOperation'
                        'Decimal'
                        'min'
                        '_exp'
                        'rounding'
                        'ROUND_FLOOR'
                        '_dec_from_triple'
                        '_fix'
                        'max'
                        'prec'
                        '_rescale'
                        '_WorkRep'
                        '_normalize'
                        'sign'
                        'int'
                        'exp'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                        'exp'
                        'negativezero'
                        'sign'
                        'op1'
                        'op2'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns self + other.\n\n        -INF + INF (or the reverse) cause InvalidOperation errors.\n        '
                        None
                        '-INF + INF'
                        0
                        1
                        '0'
                        (
                            0
                            0
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       2: context
                        22      LOAD_CONST                      1: None
                        24      IS_OP                           0 (is)
                        26      POP_JUMP_IF_FALSE               17 (to 34)
                        28      LOAD_GLOBAL                     2: getcontext
                        30      CALL_FUNCTION                   0
                        32      STORE_FAST                      2: context
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       3: _is_special
                        38      POP_JUMP_IF_TRUE                23 (to 46)
                        40      LOAD_FAST                       1: other
                        42      LOAD_ATTR                       3: _is_special
                        44      POP_JUMP_IF_FALSE               65 (to 130)
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     4: _check_nans
                        50      LOAD_FAST                       1: other
                        52      LOAD_FAST                       2: context
                        54      CALL_METHOD                     2
                        56      STORE_FAST                      3: ans
                        58      LOAD_FAST                       3: ans
                        60      POP_JUMP_IF_FALSE               33 (to 66)
                        62      LOAD_FAST                       3: ans
                        64      RETURN_VALUE                    
                        66      LOAD_FAST                       0: self
                        68      LOAD_METHOD                     5: _isinfinity
                        70      CALL_METHOD                     0
                        72      POP_JUMP_IF_FALSE               57 (to 114)
                        74      LOAD_FAST                       0: self
                        76      LOAD_ATTR                       6: _sign
                        78      LOAD_FAST                       1: other
                        80      LOAD_ATTR                       6: _sign
                        82      COMPARE_OP                      3 (!=)
                        84      POP_JUMP_IF_FALSE               53 (to 106)
                        86      LOAD_FAST                       1: other
                        88      LOAD_METHOD                     5: _isinfinity
                        90      CALL_METHOD                     0
                        92      POP_JUMP_IF_FALSE               53 (to 106)
                        94      LOAD_FAST                       2: context
                        96      LOAD_METHOD                     7: _raise_error
                        98      LOAD_GLOBAL                     8: InvalidOperation
                        100     LOAD_CONST                      2: '-INF + INF'
                        102     CALL_METHOD                     2
                        104     RETURN_VALUE                    
                        106     LOAD_GLOBAL                     9: Decimal
                        108     LOAD_FAST                       0: self
                        110     CALL_FUNCTION                   1
                        112     RETURN_VALUE                    
                        114     LOAD_FAST                       1: other
                        116     LOAD_METHOD                     5: _isinfinity
                        118     CALL_METHOD                     0
                        120     POP_JUMP_IF_FALSE               65 (to 130)
                        122     LOAD_GLOBAL                     9: Decimal
                        124     LOAD_FAST                       1: other
                        126     CALL_FUNCTION                   1
                        128     RETURN_VALUE                    
                        130     LOAD_GLOBAL                     10: min
                        132     LOAD_FAST                       0: self
                        134     LOAD_ATTR                       11: _exp
                        136     LOAD_FAST                       1: other
                        138     LOAD_ATTR                       11: _exp
                        140     CALL_FUNCTION                   2
                        142     STORE_FAST                      4: exp
                        144     LOAD_CONST                      3: 0
                        146     STORE_FAST                      5: negativezero
                        148     LOAD_FAST                       2: context
                        150     LOAD_ATTR                       12: rounding
                        152     LOAD_GLOBAL                     13: ROUND_FLOOR
                        154     COMPARE_OP                      2 (==)
                        156     POP_JUMP_IF_FALSE               87 (to 174)
                        158     LOAD_FAST                       0: self
                        160     LOAD_ATTR                       6: _sign
                        162     LOAD_FAST                       1: other
                        164     LOAD_ATTR                       6: _sign
                        166     COMPARE_OP                      3 (!=)
                        168     POP_JUMP_IF_FALSE               87 (to 174)
                        170     LOAD_CONST                      4: 1
                        172     STORE_FAST                      5: negativezero
                        174     LOAD_FAST                       0: self
                        176     POP_JUMP_IF_TRUE                115 (to 230)
                        178     LOAD_FAST                       1: other
                        180     POP_JUMP_IF_TRUE                115 (to 230)
                        182     LOAD_GLOBAL                     10: min
                        184     LOAD_FAST                       0: self
                        186     LOAD_ATTR                       6: _sign
                        188     LOAD_FAST                       1: other
                        190     LOAD_ATTR                       6: _sign
                        192     CALL_FUNCTION                   2
                        194     STORE_FAST                      6: sign
                        196     LOAD_FAST                       5: negativezero
                        198     POP_JUMP_IF_FALSE               102 (to 204)
                        200     LOAD_CONST                      4: 1
                        202     STORE_FAST                      6: sign
                        204     LOAD_GLOBAL                     14: _dec_from_triple
                        206     LOAD_FAST                       6: sign
                        208     LOAD_CONST                      5: '0'
                        210     LOAD_FAST                       4: exp
                        212     CALL_FUNCTION                   3
                        214     STORE_FAST                      3: ans
                        216     LOAD_FAST                       3: ans
                        218     LOAD_METHOD                     15: _fix
                        220     LOAD_FAST                       2: context
                        222     CALL_METHOD                     1
                        224     STORE_FAST                      3: ans
                        226     LOAD_FAST                       3: ans
                        228     RETURN_VALUE                    
                        230     LOAD_FAST                       0: self
                        232     POP_JUMP_IF_TRUE                142 (to 284)
                        234     LOAD_GLOBAL                     16: max
                        236     LOAD_FAST                       4: exp
                        238     LOAD_FAST                       1: other
                        240     LOAD_ATTR                       11: _exp
                        242     LOAD_FAST                       2: context
                        244     LOAD_ATTR                       17: prec
                        246     BINARY_SUBTRACT                 
                        248     LOAD_CONST                      4: 1
                        250     BINARY_SUBTRACT                 
                        252     CALL_FUNCTION                   2
                        254     STORE_FAST                      4: exp
                        256     LOAD_FAST                       1: other
                        258     LOAD_METHOD                     18: _rescale
                        260     LOAD_FAST                       4: exp
                        262     LOAD_FAST                       2: context
                        264     LOAD_ATTR                       12: rounding
                        266     CALL_METHOD                     2
                        268     STORE_FAST                      3: ans
                        270     LOAD_FAST                       3: ans
                        272     LOAD_METHOD                     15: _fix
                        274     LOAD_FAST                       2: context
                        276     CALL_METHOD                     1
                        278     STORE_FAST                      3: ans
                        280     LOAD_FAST                       3: ans
                        282     RETURN_VALUE                    
                        284     LOAD_FAST                       1: other
                        286     POP_JUMP_IF_TRUE                169 (to 338)
                        288     LOAD_GLOBAL                     16: max
                        290     LOAD_FAST                       4: exp
                        292     LOAD_FAST                       0: self
                        294     LOAD_ATTR                       11: _exp
                        296     LOAD_FAST                       2: context
                        298     LOAD_ATTR                       17: prec
                        300     BINARY_SUBTRACT                 
                        302     LOAD_CONST                      4: 1
                        304     BINARY_SUBTRACT                 
                        306     CALL_FUNCTION                   2
                        308     STORE_FAST                      4: exp
                        310     LOAD_FAST                       0: self
                        312     LOAD_METHOD                     18: _rescale
                        314     LOAD_FAST                       4: exp
                        316     LOAD_FAST                       2: context
                        318     LOAD_ATTR                       12: rounding
                        320     CALL_METHOD                     2
                        322     STORE_FAST                      3: ans
                        324     LOAD_FAST                       3: ans
                        326     LOAD_METHOD                     15: _fix
                        328     LOAD_FAST                       2: context
                        330     CALL_METHOD                     1
                        332     STORE_FAST                      3: ans
                        334     LOAD_FAST                       3: ans
                        336     RETURN_VALUE                    
                        338     LOAD_GLOBAL                     19: _WorkRep
                        340     LOAD_FAST                       0: self
                        342     CALL_FUNCTION                   1
                        344     STORE_FAST                      7: op1
                        346     LOAD_GLOBAL                     19: _WorkRep
                        348     LOAD_FAST                       1: other
                        350     CALL_FUNCTION                   1
                        352     STORE_FAST                      8: op2
                        354     LOAD_GLOBAL                     20: _normalize
                        356     LOAD_FAST                       7: op1
                        358     LOAD_FAST                       8: op2
                        360     LOAD_FAST                       2: context
                        362     LOAD_ATTR                       17: prec
                        364     CALL_FUNCTION                   3
                        366     UNPACK_SEQUENCE                 2
                        368     STORE_FAST                      7: op1
                        370     STORE_FAST                      8: op2
                        372     LOAD_GLOBAL                     19: _WorkRep
                        374     CALL_FUNCTION                   0
                        376     STORE_FAST                      9: result
                        378     LOAD_FAST                       7: op1
                        380     LOAD_ATTR                       21: sign
                        382     LOAD_FAST                       8: op2
                        384     LOAD_ATTR                       21: sign
                        386     COMPARE_OP                      3 (!=)
                        388     POP_JUMP_IF_FALSE               247 (to 494)
                        390     LOAD_FAST                       7: op1
                        392     LOAD_ATTR                       22: int
                        394     LOAD_FAST                       8: op2
                        396     LOAD_ATTR                       22: int
                        398     COMPARE_OP                      2 (==)
                        400     POP_JUMP_IF_FALSE               214 (to 428)
                        402     LOAD_GLOBAL                     14: _dec_from_triple
                        404     LOAD_FAST                       5: negativezero
                        406     LOAD_CONST                      5: '0'
                        408     LOAD_FAST                       4: exp
                        410     CALL_FUNCTION                   3
                        412     STORE_FAST                      3: ans
                        414     LOAD_FAST                       3: ans
                        416     LOAD_METHOD                     15: _fix
                        418     LOAD_FAST                       2: context
                        420     CALL_METHOD                     1
                        422     STORE_FAST                      3: ans
                        424     LOAD_FAST                       3: ans
                        426     RETURN_VALUE                    
                        428     LOAD_FAST                       7: op1
                        430     LOAD_ATTR                       22: int
                        432     LOAD_FAST                       8: op2
                        434     LOAD_ATTR                       22: int
                        436     COMPARE_OP                      0 (<)
                        438     POP_JUMP_IF_FALSE               225 (to 450)
                        440     LOAD_FAST                       8: op2
                        442     LOAD_FAST                       7: op1
                        444     ROT_TWO                         
                        446     STORE_FAST                      7: op1
                        448     STORE_FAST                      8: op2
                        450     LOAD_FAST                       7: op1
                        452     LOAD_ATTR                       21: sign
                        454     LOAD_CONST                      4: 1
                        456     COMPARE_OP                      2 (==)
                        458     POP_JUMP_IF_FALSE               243 (to 486)
                        460     LOAD_CONST                      4: 1
                        462     LOAD_FAST                       9: result
                        464     STORE_ATTR                      21: sign
                        466     LOAD_FAST                       8: op2
                        468     LOAD_ATTR                       21: sign
                        470     LOAD_FAST                       7: op1
                        472     LOAD_ATTR                       21: sign
                        474     ROT_TWO                         
                        476     LOAD_FAST                       7: op1
                        478     STORE_ATTR                      21: sign
                        480     LOAD_FAST                       8: op2
                        482     STORE_ATTR                      21: sign
                        484     JUMP_FORWARD                    23 (to 532)
                        486     LOAD_CONST                      3: 0
                        488     LOAD_FAST                       9: result
                        490     STORE_ATTR                      21: sign
                        492     JUMP_FORWARD                    19 (to 532)
                        494     LOAD_FAST                       7: op1
                        496     LOAD_ATTR                       21: sign
                        498     LOAD_CONST                      4: 1
                        500     COMPARE_OP                      2 (==)
                        502     POP_JUMP_IF_FALSE               263 (to 526)
                        506     LOAD_CONST                      4: 1
                        508     LOAD_FAST                       9: result
                        510     STORE_ATTR                      21: sign
                        512     LOAD_CONST                      6: (0, 0)
                        514     UNPACK_SEQUENCE                 2
                        516     LOAD_FAST                       7: op1
                        518     STORE_ATTR                      21: sign
                        520     LOAD_FAST                       8: op2
                        522     STORE_ATTR                      21: sign
                        524     JUMP_FORWARD                    3 (to 532)
                        526     LOAD_CONST                      3: 0
                        528     LOAD_FAST                       9: result
                        530     STORE_ATTR                      21: sign
                        532     LOAD_FAST                       8: op2
                        534     LOAD_ATTR                       21: sign
                        536     LOAD_CONST                      3: 0
                        538     COMPARE_OP                      2 (==)
                        540     POP_JUMP_IF_FALSE               280 (to 560)
                        544     LOAD_FAST                       7: op1
                        546     LOAD_ATTR                       22: int
                        548     LOAD_FAST                       8: op2
                        550     LOAD_ATTR                       22: int
                        552     BINARY_ADD                      
                        554     LOAD_FAST                       9: result
                        556     STORE_ATTR                      22: int
                        558     JUMP_FORWARD                    7 (to 574)
                        560     LOAD_FAST                       7: op1
                        562     LOAD_ATTR                       22: int
                        564     LOAD_FAST                       8: op2
                        566     LOAD_ATTR                       22: int
                        568     BINARY_SUBTRACT                 
                        570     LOAD_FAST                       9: result
                        572     STORE_ATTR                      22: int
                        574     LOAD_FAST                       7: op1
                        576     LOAD_ATTR                       23: exp
                        578     LOAD_FAST                       9: result
                        580     STORE_ATTR                      23: exp
                        582     LOAD_GLOBAL                     9: Decimal
                        584     LOAD_FAST                       9: result
                        586     CALL_FUNCTION                   1
                        588     STORE_FAST                      3: ans
                        590     LOAD_FAST                       3: ans
                        592     LOAD_METHOD                     15: _fix
                        594     LOAD_FAST                       2: context
                        596     CALL_METHOD                     1
                        598     STORE_FAST                      3: ans
                        600     LOAD_FAST                       3: ans
                        602     RETURN_VALUE                    
                'Decimal.__add__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __sub__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        '_is_special'
                        '_check_nans'
                        '__add__'
                        'copy_negate'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return self - other'
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: _is_special
                        24      POP_JUMP_IF_TRUE                16 (to 32)
                        26      LOAD_FAST                       1: other
                        28      LOAD_ATTR                       2: _is_special
                        30      POP_JUMP_IF_FALSE               27 (to 54)
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       3: _check_nans
                        36      LOAD_FAST                       1: other
                        38      LOAD_FAST                       2: context
                        40      LOAD_CONST                      1: ('context',)
                        42      CALL_FUNCTION_KW                2
                        44      STORE_FAST                      3: ans
                        46      LOAD_FAST                       3: ans
                        48      POP_JUMP_IF_FALSE               27 (to 54)
                        50      LOAD_FAST                       3: ans
                        52      RETURN_VALUE                    
                        54      LOAD_FAST                       0: self
                        56      LOAD_ATTR                       4: __add__
                        58      LOAD_FAST                       1: other
                        60      LOAD_METHOD                     5: copy_negate
                        62      CALL_METHOD                     0
                        64      LOAD_FAST                       2: context
                        66      LOAD_CONST                      1: ('context',)
                        68      CALL_FUNCTION_KW                2
                        70      RETURN_VALUE                    
                'Decimal.__sub__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __rsub__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        '__sub__'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return other - self'
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       1: other
                        22      LOAD_ATTR                       2: __sub__
                        24      LOAD_FAST                       0: self
                        26      LOAD_FAST                       2: context
                        28      LOAD_CONST                      1: ('context',)
                        30      CALL_FUNCTION_KW                2
                        32      RETURN_VALUE                    
                'Decimal.__rsub__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __mul__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        'getcontext'
                        '_sign'
                        '_is_special'
                        '_check_nans'
                        '_isinfinity'
                        '_raise_error'
                        'InvalidOperation'
                        '_SignedInfinity'
                        '_exp'
                        '_dec_from_triple'
                        '_fix'
                        '_int'
                        '_WorkRep'
                        'str'
                        'int'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'resultsign'
                        'ans'
                        'resultexp'
                        'op1'
                        'op2'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return self * other.\n\n        (+-) INF * 0 (or its reverse) raise InvalidOperation.\n        '
                        None
                        '(+-)INF * 0'
                        '0 * (+-)INF'
                        '0'
                        '1'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       2: context
                        22      LOAD_CONST                      1: None
                        24      IS_OP                           0 (is)
                        26      POP_JUMP_IF_FALSE               17 (to 34)
                        28      LOAD_GLOBAL                     2: getcontext
                        30      CALL_FUNCTION                   0
                        32      STORE_FAST                      2: context
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       3: _sign
                        38      LOAD_FAST                       1: other
                        40      LOAD_ATTR                       3: _sign
                        42      BINARY_XOR                      
                        44      STORE_FAST                      3: resultsign
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       4: _is_special
                        50      POP_JUMP_IF_TRUE                29 (to 58)
                        52      LOAD_FAST                       1: other
                        54      LOAD_ATTR                       4: _is_special
                        56      POP_JUMP_IF_FALSE               71 (to 142)
                        58      LOAD_FAST                       0: self
                        60      LOAD_METHOD                     5: _check_nans
                        62      LOAD_FAST                       1: other
                        64      LOAD_FAST                       2: context
                        66      CALL_METHOD                     2
                        68      STORE_FAST                      4: ans
                        70      LOAD_FAST                       4: ans
                        72      POP_JUMP_IF_FALSE               39 (to 78)
                        74      LOAD_FAST                       4: ans
                        76      RETURN_VALUE                    
                        78      LOAD_FAST                       0: self
                        80      LOAD_METHOD                     6: _isinfinity
                        82      CALL_METHOD                     0
                        84      POP_JUMP_IF_FALSE               55 (to 110)
                        86      LOAD_FAST                       1: other
                        88      POP_JUMP_IF_TRUE                51 (to 102)
                        90      LOAD_FAST                       2: context
                        92      LOAD_METHOD                     7: _raise_error
                        94      LOAD_GLOBAL                     8: InvalidOperation
                        96      LOAD_CONST                      2: '(+-)INF * 0'
                        98      CALL_METHOD                     2
                        100     RETURN_VALUE                    
                        102     LOAD_GLOBAL                     9: _SignedInfinity
                        104     LOAD_FAST                       3: resultsign
                        106     BINARY_SUBSCR                   
                        108     RETURN_VALUE                    
                        110     LOAD_FAST                       1: other
                        112     LOAD_METHOD                     6: _isinfinity
                        114     CALL_METHOD                     0
                        116     POP_JUMP_IF_FALSE               71 (to 142)
                        118     LOAD_FAST                       0: self
                        120     POP_JUMP_IF_TRUE                67 (to 134)
                        122     LOAD_FAST                       2: context
                        124     LOAD_METHOD                     7: _raise_error
                        126     LOAD_GLOBAL                     8: InvalidOperation
                        128     LOAD_CONST                      3: '0 * (+-)INF'
                        130     CALL_METHOD                     2
                        132     RETURN_VALUE                    
                        134     LOAD_GLOBAL                     9: _SignedInfinity
                        136     LOAD_FAST                       3: resultsign
                        138     BINARY_SUBSCR                   
                        140     RETURN_VALUE                    
                        142     LOAD_FAST                       0: self
                        144     LOAD_ATTR                       10: _exp
                        146     LOAD_FAST                       1: other
                        148     LOAD_ATTR                       10: _exp
                        150     BINARY_ADD                      
                        152     STORE_FAST                      5: resultexp
                        154     LOAD_FAST                       0: self
                        156     POP_JUMP_IF_FALSE               81 (to 162)
                        158     LOAD_FAST                       1: other
                        160     POP_JUMP_IF_TRUE                94 (to 188)
                        162     LOAD_GLOBAL                     11: _dec_from_triple
                        164     LOAD_FAST                       3: resultsign
                        166     LOAD_CONST                      4: '0'
                        168     LOAD_FAST                       5: resultexp
                        170     CALL_FUNCTION                   3
                        172     STORE_FAST                      4: ans
                        174     LOAD_FAST                       4: ans
                        176     LOAD_METHOD                     12: _fix
                        178     LOAD_FAST                       2: context
                        180     CALL_METHOD                     1
                        182     STORE_FAST                      4: ans
                        184     LOAD_FAST                       4: ans
                        186     RETURN_VALUE                    
                        188     LOAD_FAST                       0: self
                        190     LOAD_ATTR                       13: _int
                        192     LOAD_CONST                      5: '1'
                        194     COMPARE_OP                      2 (==)
                        196     POP_JUMP_IF_FALSE               113 (to 226)
                        198     LOAD_GLOBAL                     11: _dec_from_triple
                        200     LOAD_FAST                       3: resultsign
                        202     LOAD_FAST                       1: other
                        204     LOAD_ATTR                       13: _int
                        206     LOAD_FAST                       5: resultexp
                        208     CALL_FUNCTION                   3
                        210     STORE_FAST                      4: ans
                        212     LOAD_FAST                       4: ans
                        214     LOAD_METHOD                     12: _fix
                        216     LOAD_FAST                       2: context
                        218     CALL_METHOD                     1
                        220     STORE_FAST                      4: ans
                        222     LOAD_FAST                       4: ans
                        224     RETURN_VALUE                    
                        226     LOAD_FAST                       1: other
                        228     LOAD_ATTR                       13: _int
                        230     LOAD_CONST                      5: '1'
                        232     COMPARE_OP                      2 (==)
                        234     POP_JUMP_IF_FALSE               132 (to 264)
                        236     LOAD_GLOBAL                     11: _dec_from_triple
                        238     LOAD_FAST                       3: resultsign
                        240     LOAD_FAST                       0: self
                        242     LOAD_ATTR                       13: _int
                        244     LOAD_FAST                       5: resultexp
                        246     CALL_FUNCTION                   3
                        248     STORE_FAST                      4: ans
                        250     LOAD_FAST                       4: ans
                        252     LOAD_METHOD                     12: _fix
                        254     LOAD_FAST                       2: context
                        256     CALL_METHOD                     1
                        258     STORE_FAST                      4: ans
                        260     LOAD_FAST                       4: ans
                        262     RETURN_VALUE                    
                        264     LOAD_GLOBAL                     14: _WorkRep
                        266     LOAD_FAST                       0: self
                        268     CALL_FUNCTION                   1
                        270     STORE_FAST                      6: op1
                        272     LOAD_GLOBAL                     14: _WorkRep
                        274     LOAD_FAST                       1: other
                        276     CALL_FUNCTION                   1
                        278     STORE_FAST                      7: op2
                        280     LOAD_GLOBAL                     11: _dec_from_triple
                        282     LOAD_FAST                       3: resultsign
                        284     LOAD_GLOBAL                     15: str
                        286     LOAD_FAST                       6: op1
                        288     LOAD_ATTR                       16: int
                        290     LOAD_FAST                       7: op2
                        292     LOAD_ATTR                       16: int
                        294     BINARY_MULTIPLY                 
                        296     CALL_FUNCTION                   1
                        298     LOAD_FAST                       5: resultexp
                        300     CALL_FUNCTION                   3
                        302     STORE_FAST                      4: ans
                        304     LOAD_FAST                       4: ans
                        306     LOAD_METHOD                     12: _fix
                        308     LOAD_FAST                       2: context
                        310     CALL_METHOD                     1
                        312     STORE_FAST                      4: ans
                        314     LOAD_FAST                       4: ans
                        316     RETURN_VALUE                    
                'Decimal.__mul__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __truediv__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 12
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        'getcontext'
                        '_sign'
                        '_is_special'
                        '_check_nans'
                        '_isinfinity'
                        '_raise_error'
                        'InvalidOperation'
                        '_SignedInfinity'
                        'Clamped'
                        '_dec_from_triple'
                        'Etiny'
                        'DivisionUndefined'
                        'DivisionByZero'
                        '_exp'
                        'len'
                        '_int'
                        'prec'
                        '_WorkRep'
                        'divmod'
                        'int'
                        'str'
                        '_fix'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'sign'
                        'ans'
                        'exp'
                        'coeff'
                        'shift'
                        'op1'
                        'op2'
                        'remainder'
                        'ideal_exp'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return self / other.'
                        None
                        '(+-)INF/(+-)INF'
                        'Division by infinity'
                        '0'
                        '0 / 0'
                        'x / 0'
                        0
                        1
                        10
                        5
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_GLOBAL                     1: NotImplemented
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       2: context
                        22      LOAD_CONST                      1: None
                        24      IS_OP                           0 (is)
                        26      POP_JUMP_IF_FALSE               17 (to 34)
                        28      LOAD_GLOBAL                     2: getcontext
                        30      CALL_FUNCTION                   0
                        32      STORE_FAST                      2: context
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       3: _sign
                        38      LOAD_FAST                       1: other
                        40      LOAD_ATTR                       3: _sign
                        42      BINARY_XOR                      
                        44      STORE_FAST                      3: sign
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       4: _is_special
                        50      POP_JUMP_IF_TRUE                29 (to 58)
                        52      LOAD_FAST                       1: other
                        54      LOAD_ATTR                       4: _is_special
                        56      POP_JUMP_IF_FALSE               79 (to 158)
                        58      LOAD_FAST                       0: self
                        60      LOAD_METHOD                     5: _check_nans
                        62      LOAD_FAST                       1: other
                        64      LOAD_FAST                       2: context
                        66      CALL_METHOD                     2
                        68      STORE_FAST                      4: ans
                        70      LOAD_FAST                       4: ans
                        72      POP_JUMP_IF_FALSE               39 (to 78)
                        74      LOAD_FAST                       4: ans
                        76      RETURN_VALUE                    
                        78      LOAD_FAST                       0: self
                        80      LOAD_METHOD                     6: _isinfinity
                        82      CALL_METHOD                     0
                        84      POP_JUMP_IF_FALSE               53 (to 106)
                        86      LOAD_FAST                       1: other
                        88      LOAD_METHOD                     6: _isinfinity
                        90      CALL_METHOD                     0
                        92      POP_JUMP_IF_FALSE               53 (to 106)
                        94      LOAD_FAST                       2: context
                        96      LOAD_METHOD                     7: _raise_error
                        98      LOAD_GLOBAL                     8: InvalidOperation
                        100     LOAD_CONST                      2: '(+-)INF/(+-)INF'
                        102     CALL_METHOD                     2
                        104     RETURN_VALUE                    
                        106     LOAD_FAST                       0: self
                        108     LOAD_METHOD                     6: _isinfinity
                        110     CALL_METHOD                     0
                        112     POP_JUMP_IF_FALSE               61 (to 122)
                        114     LOAD_GLOBAL                     9: _SignedInfinity
                        116     LOAD_FAST                       3: sign
                        118     BINARY_SUBSCR                   
                        120     RETURN_VALUE                    
                        122     LOAD_FAST                       1: other
                        124     LOAD_METHOD                     6: _isinfinity
                        126     CALL_METHOD                     0
                        128     POP_JUMP_IF_FALSE               79 (to 158)
                        130     LOAD_FAST                       2: context
                        132     LOAD_METHOD                     7: _raise_error
                        134     LOAD_GLOBAL                     10: Clamped
                        136     LOAD_CONST                      3: 'Division by infinity'
                        138     CALL_METHOD                     2
                        140     POP_TOP                         
                        142     LOAD_GLOBAL                     11: _dec_from_triple
                        144     LOAD_FAST                       3: sign
                        146     LOAD_CONST                      4: '0'
                        148     LOAD_FAST                       2: context
                        150     LOAD_METHOD                     12: Etiny
                        152     CALL_METHOD                     0
                        154     CALL_FUNCTION                   3
                        156     RETURN_VALUE                    
                        158     LOAD_FAST                       1: other
                        160     POP_JUMP_IF_TRUE                96 (to 192)
                        162     LOAD_FAST                       0: self
                        164     POP_JUMP_IF_TRUE                89 (to 178)
                        166     LOAD_FAST                       2: context
                        168     LOAD_METHOD                     7: _raise_error
                        170     LOAD_GLOBAL                     13: DivisionUndefined
                        172     LOAD_CONST                      5: '0 / 0'
                        174     CALL_METHOD                     2
                        176     RETURN_VALUE                    
                        178     LOAD_FAST                       2: context
                        180     LOAD_METHOD                     7: _raise_error
                        182     LOAD_GLOBAL                     14: DivisionByZero
                        184     LOAD_CONST                      6: 'x / 0'
                        186     LOAD_FAST                       3: sign
                        188     CALL_METHOD                     3
                        190     RETURN_VALUE                    
                        192     LOAD_FAST                       0: self
                        194     POP_JUMP_IF_TRUE                107 (to 214)
                        196     LOAD_FAST                       0: self
                        198     LOAD_ATTR                       15: _exp
                        200     LOAD_FAST                       1: other
                        202     LOAD_ATTR                       15: _exp
                        204     BINARY_SUBTRACT                 
                        206     STORE_FAST                      5: exp
                        208     LOAD_CONST                      7: 0
                        210     STORE_FAST                      6: coeff
                        212     JUMP_FORWARD                    110 (to 434)
                        214     LOAD_GLOBAL                     16: len
                        216     LOAD_FAST                       1: other
                        218     LOAD_ATTR                       17: _int
                        220     CALL_FUNCTION                   1
                        222     LOAD_GLOBAL                     16: len
                        224     LOAD_FAST                       0: self
                        226     LOAD_ATTR                       17: _int
                        228     CALL_FUNCTION                   1
                        230     BINARY_SUBTRACT                 
                        232     LOAD_FAST                       2: context
                        234     LOAD_ATTR                       18: prec
                        236     BINARY_ADD                      
                        238     LOAD_CONST                      8: 1
                        240     BINARY_ADD                      
                        242     STORE_FAST                      7: shift
                        244     LOAD_FAST                       0: self
                        246     LOAD_ATTR                       15: _exp
                        248     LOAD_FAST                       1: other
                        250     LOAD_ATTR                       15: _exp
                        252     BINARY_SUBTRACT                 
                        254     LOAD_FAST                       7: shift
                        256     BINARY_SUBTRACT                 
                        258     STORE_FAST                      5: exp
                        260     LOAD_GLOBAL                     19: _WorkRep
                        262     LOAD_FAST                       0: self
                        264     CALL_FUNCTION                   1
                        266     STORE_FAST                      8: op1
                        268     LOAD_GLOBAL                     19: _WorkRep
                        270     LOAD_FAST                       1: other
                        272     CALL_FUNCTION                   1
                        274     STORE_FAST                      9: op2
                        276     LOAD_FAST                       7: shift
                        278     LOAD_CONST                      7: 0
                        280     COMPARE_OP                      5 (>=)
                        282     POP_JUMP_IF_FALSE               156 (to 312)
                        284     LOAD_GLOBAL                     20: divmod
                        286     LOAD_FAST                       8: op1
                        288     LOAD_ATTR                       21: int
                        290     LOAD_CONST                      9: 10
                        292     LOAD_FAST                       7: shift
                        294     BINARY_POWER                    
                        296     BINARY_MULTIPLY                 
                        298     LOAD_FAST                       9: op2
                        300     LOAD_ATTR                       21: int
                        302     CALL_FUNCTION                   2
                        304     UNPACK_SEQUENCE                 2
                        306     STORE_FAST                      6: coeff
                        308     STORE_FAST                      10: remainder
                        310     JUMP_FORWARD                    14 (to 340)
                        312     LOAD_GLOBAL                     20: divmod
                        314     LOAD_FAST                       8: op1
                        316     LOAD_ATTR                       21: int
                        318     LOAD_FAST                       9: op2
                        320     LOAD_ATTR                       21: int
                        322     LOAD_CONST                      9: 10
                        324     LOAD_FAST                       7: shift
                        326     UNARY_NEGATIVE                  
                        328     BINARY_POWER                    
                        330     BINARY_MULTIPLY                 
                        332     CALL_FUNCTION                   2
                        334     UNPACK_SEQUENCE                 2
                        336     STORE_FAST                      6: coeff
                        338     STORE_FAST                      10: remainder
                        340     LOAD_FAST                       10: remainder
                        342     POP_JUMP_IF_FALSE               183 (to 366)
                        344     LOAD_FAST                       6: coeff
                        346     LOAD_CONST                      10: 5
                        348     BINARY_MODULO                   
                        350     LOAD_CONST                      7: 0
                        352     COMPARE_OP                      2 (==)
                        354     POP_JUMP_IF_FALSE               182 (to 364)
                        356     LOAD_FAST                       6: coeff
                        358     LOAD_CONST                      8: 1
                        360     INPLACE_ADD                     
                        362     STORE_FAST                      6: coeff
                        364     JUMP_FORWARD                    34 (to 434)
                        366     LOAD_FAST                       0: self
                        368     LOAD_ATTR                       15: _exp
                        370     LOAD_FAST                       1: other
                        372     LOAD_ATTR                       15: _exp
                        374     BINARY_SUBTRACT                 
                        376     STORE_FAST                      11: ideal_exp
                        378     LOAD_FAST                       5: exp
                        380     LOAD_FAST                       11: ideal_exp
                        382     COMPARE_OP                      0 (<)
                        384     POP_JUMP_IF_FALSE               217 (to 434)
                        386     LOAD_FAST                       6: coeff
                        388     LOAD_CONST                      9: 10
                        390     BINARY_MODULO                   
                        392     LOAD_CONST                      7: 0
                        394     COMPARE_OP                      2 (==)
                        396     POP_JUMP_IF_FALSE               217 (to 434)
                        398     LOAD_FAST                       6: coeff
                        400     LOAD_CONST                      9: 10
                        402     INPLACE_FLOOR_DIVIDE            
                        404     STORE_FAST                      6: coeff
                        406     LOAD_FAST                       5: exp
                        408     LOAD_CONST                      8: 1
                        410     INPLACE_ADD                     
                        412     STORE_FAST                      5: exp
                        414     LOAD_FAST                       5: exp
                        416     LOAD_FAST                       11: ideal_exp
                        418     COMPARE_OP                      0 (<)
                        420     POP_JUMP_IF_FALSE               217 (to 434)
                        422     LOAD_FAST                       6: coeff
                        424     LOAD_CONST                      9: 10
                        426     BINARY_MODULO                   
                        428     LOAD_CONST                      7: 0
                        430     COMPARE_OP                      2 (==)
                        432     POP_JUMP_IF_TRUE                199 (to 398)
                        434     LOAD_GLOBAL                     11: _dec_from_triple
                        436     LOAD_FAST                       3: sign
                        438     LOAD_GLOBAL                     22: str
                        440     LOAD_FAST                       6: coeff
                        442     CALL_FUNCTION                   1
                        444     LOAD_FAST                       5: exp
                        446     CALL_FUNCTION                   3
                        448     STORE_FAST                      4: ans
                        450     LOAD_FAST                       4: ans
                        452     LOAD_METHOD                     23: _fix
                        454     LOAD_FAST                       2: context
                        456     CALL_METHOD                     1
                        458     RETURN_VALUE                    
                'Decimal.__truediv__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _divide
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sign'
                        '_isinfinity'
                        '_exp'
                        'min'
                        'adjusted'
                        '_dec_from_triple'
                        '_rescale'
                        'rounding'
                        'prec'
                        '_WorkRep'
                        'exp'
                        'int'
                        'divmod'
                        'str'
                        '_raise_error'
                        'DivisionImpossible'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'sign'
                        'ideal_exp'
                        'expdiff'
                        'op1'
                        'op2'
                        'q'
                        'r'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return (self // other, self % other), to context.prec precision.\n\n        Assumes that neither self nor other is a NaN, that self is not\n        infinite and that other is nonzero.\n        '
                        -2
                        '0'
                        0
                        10
                        'quotient too large in //, % or divmod'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _sign
                        4       LOAD_FAST                       1: other
                        6       LOAD_ATTR                       0: _sign
                        8       BINARY_XOR                      
                        10      STORE_FAST                      3: sign
                        12      LOAD_FAST                       1: other
                        14      LOAD_METHOD                     1: _isinfinity
                        16      CALL_METHOD                     0
                        18      POP_JUMP_IF_FALSE               14 (to 28)
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: _exp
                        24      STORE_FAST                      4: ideal_exp
                        26      JUMP_FORWARD                    7 (to 42)
                        28      LOAD_GLOBAL                     3: min
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       2: _exp
                        34      LOAD_FAST                       1: other
                        36      LOAD_ATTR                       2: _exp
                        38      CALL_FUNCTION                   2
                        40      STORE_FAST                      4: ideal_exp
                        42      LOAD_FAST                       0: self
                        44      LOAD_METHOD                     4: adjusted
                        46      CALL_METHOD                     0
                        48      LOAD_FAST                       1: other
                        50      LOAD_METHOD                     4: adjusted
                        52      CALL_METHOD                     0
                        54      BINARY_SUBTRACT                 
                        56      STORE_FAST                      5: expdiff
                        58      LOAD_FAST                       0: self
                        60      POP_JUMP_IF_FALSE               39 (to 78)
                        62      LOAD_FAST                       1: other
                        64      LOAD_METHOD                     1: _isinfinity
                        66      CALL_METHOD                     0
                        68      POP_JUMP_IF_TRUE                39 (to 78)
                        70      LOAD_FAST                       5: expdiff
                        72      LOAD_CONST                      1: -2
                        74      COMPARE_OP                      1 (<=)
                        76      POP_JUMP_IF_FALSE               52 (to 104)
                        78      LOAD_GLOBAL                     5: _dec_from_triple
                        80      LOAD_FAST                       3: sign
                        82      LOAD_CONST                      2: '0'
                        84      LOAD_CONST                      3: 0
                        86      CALL_FUNCTION                   3
                        88      LOAD_FAST                       0: self
                        90      LOAD_METHOD                     6: _rescale
                        92      LOAD_FAST                       4: ideal_exp
                        94      LOAD_FAST                       2: context
                        96      LOAD_ATTR                       7: rounding
                        98      CALL_METHOD                     2
                        100     BUILD_TUPLE                     2
                        102     RETURN_VALUE                    
                        104     LOAD_FAST                       5: expdiff
                        106     LOAD_FAST                       2: context
                        108     LOAD_ATTR                       8: prec
                        110     COMPARE_OP                      1 (<=)
                        112     POP_JUMP_IF_FALSE               131 (to 262)
                        114     LOAD_GLOBAL                     9: _WorkRep
                        116     LOAD_FAST                       0: self
                        118     CALL_FUNCTION                   1
                        120     STORE_FAST                      6: op1
                        122     LOAD_GLOBAL                     9: _WorkRep
                        124     LOAD_FAST                       1: other
                        126     CALL_FUNCTION                   1
                        128     STORE_FAST                      7: op2
                        130     LOAD_FAST                       6: op1
                        132     LOAD_ATTR                       10: exp
                        134     LOAD_FAST                       7: op2
                        136     LOAD_ATTR                       10: exp
                        138     COMPARE_OP                      5 (>=)
                        140     POP_JUMP_IF_FALSE               85 (to 170)
                        142     LOAD_FAST                       6: op1
                        144     DUP_TOP                         
                        146     LOAD_ATTR                       11: int
                        148     LOAD_CONST                      4: 10
                        150     LOAD_FAST                       6: op1
                        152     LOAD_ATTR                       10: exp
                        154     LOAD_FAST                       7: op2
                        156     LOAD_ATTR                       10: exp
                        158     BINARY_SUBTRACT                 
                        160     BINARY_POWER                    
                        162     INPLACE_MULTIPLY                
                        164     ROT_TWO                         
                        166     STORE_ATTR                      11: int
                        168     JUMP_FORWARD                    13 (to 196)
                        170     LOAD_FAST                       7: op2
                        172     DUP_TOP                         
                        174     LOAD_ATTR                       11: int
                        176     LOAD_CONST                      4: 10
                        178     LOAD_FAST                       7: op2
                        180     LOAD_ATTR                       10: exp
                        182     LOAD_FAST                       6: op1
                        184     LOAD_ATTR                       10: exp
                        186     BINARY_SUBTRACT                 
                        188     BINARY_POWER                    
                        190     INPLACE_MULTIPLY                
                        192     ROT_TWO                         
                        194     STORE_ATTR                      11: int
                        196     LOAD_GLOBAL                     12: divmod
                        198     LOAD_FAST                       6: op1
                        200     LOAD_ATTR                       11: int
                        202     LOAD_FAST                       7: op2
                        204     LOAD_ATTR                       11: int
                        206     CALL_FUNCTION                   2
                        208     UNPACK_SEQUENCE                 2
                        210     STORE_FAST                      8: q
                        212     STORE_FAST                      9: r
                        214     LOAD_FAST                       8: q
                        216     LOAD_CONST                      4: 10
                        218     LOAD_FAST                       2: context
                        220     LOAD_ATTR                       8: prec
                        222     BINARY_POWER                    
                        224     COMPARE_OP                      0 (<)
                        226     POP_JUMP_IF_FALSE               131 (to 262)
                        228     LOAD_GLOBAL                     5: _dec_from_triple
                        230     LOAD_FAST                       3: sign
                        232     LOAD_GLOBAL                     13: str
                        234     LOAD_FAST                       8: q
                        236     CALL_FUNCTION                   1
                        238     LOAD_CONST                      3: 0
                        240     CALL_FUNCTION                   3
                        242     LOAD_GLOBAL                     5: _dec_from_triple
                        244     LOAD_FAST                       0: self
                        246     LOAD_ATTR                       0: _sign
                        248     LOAD_GLOBAL                     13: str
                        250     LOAD_FAST                       9: r
                        252     CALL_FUNCTION                   1
                        254     LOAD_FAST                       4: ideal_exp
                        256     CALL_FUNCTION                   3
                        258     BUILD_TUPLE                     2
                        260     RETURN_VALUE                    
                        262     LOAD_FAST                       2: context
                        264     LOAD_METHOD                     14: _raise_error
                        266     LOAD_GLOBAL                     15: DivisionImpossible
                        268     LOAD_CONST                      5: 'quotient too large in //, % or divmod'
                        270     CALL_METHOD                     2
                        272     STORE_FAST                      10: ans
                        274     LOAD_FAST                       10: ans
                        276     LOAD_FAST                       10: ans
                        278     BUILD_TUPLE                     2
                        280     RETURN_VALUE                    
                'Decimal._divide'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __rtruediv__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        '__truediv__'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Swaps self/other and returns __truediv__.'
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       1: other
                        22      LOAD_ATTR                       2: __truediv__
                        24      LOAD_FAST                       0: self
                        26      LOAD_FAST                       2: context
                        28      LOAD_CONST                      1: ('context',)
                        30      CALL_FUNCTION_KW                2
                        32      RETURN_VALUE                    
                'Decimal.__rtruediv__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __divmod__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        'getcontext'
                        '_check_nans'
                        '_sign'
                        '_isinfinity'
                        '_raise_error'
                        'InvalidOperation'
                        '_SignedInfinity'
                        'DivisionUndefined'
                        'DivisionByZero'
                        '_divide'
                        '_fix'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                        'sign'
                        'quotient'
                        'remainder'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Return (self // other, self % other)\n        '
                        None
                        'divmod(INF, INF)'
                        'INF % x'
                        'divmod(0, 0)'
                        'x // 0'
                        'x % 0'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       2: context
                        22      LOAD_CONST                      1: None
                        24      IS_OP                           0 (is)
                        26      POP_JUMP_IF_FALSE               17 (to 34)
                        28      LOAD_GLOBAL                     2: getcontext
                        30      CALL_FUNCTION                   0
                        32      STORE_FAST                      2: context
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     3: _check_nans
                        38      LOAD_FAST                       1: other
                        40      LOAD_FAST                       2: context
                        42      CALL_METHOD                     2
                        44      STORE_FAST                      3: ans
                        46      LOAD_FAST                       3: ans
                        48      POP_JUMP_IF_FALSE               29 (to 58)
                        50      LOAD_FAST                       3: ans
                        52      LOAD_FAST                       3: ans
                        54      BUILD_TUPLE                     2
                        56      RETURN_VALUE                    
                        58      LOAD_FAST                       0: self
                        60      LOAD_ATTR                       4: _sign
                        62      LOAD_FAST                       1: other
                        64      LOAD_ATTR                       4: _sign
                        66      BINARY_XOR                      
                        68      STORE_FAST                      4: sign
                        70      LOAD_FAST                       0: self
                        72      LOAD_METHOD                     5: _isinfinity
                        74      CALL_METHOD                     0
                        76      POP_JUMP_IF_FALSE               63 (to 126)
                        78      LOAD_FAST                       1: other
                        80      LOAD_METHOD                     5: _isinfinity
                        82      CALL_METHOD                     0
                        84      POP_JUMP_IF_FALSE               53 (to 106)
                        86      LOAD_FAST                       2: context
                        88      LOAD_METHOD                     6: _raise_error
                        90      LOAD_GLOBAL                     7: InvalidOperation
                        92      LOAD_CONST                      2: 'divmod(INF, INF)'
                        94      CALL_METHOD                     2
                        96      STORE_FAST                      3: ans
                        98      LOAD_FAST                       3: ans
                        100     LOAD_FAST                       3: ans
                        102     BUILD_TUPLE                     2
                        104     RETURN_VALUE                    
                        106     LOAD_GLOBAL                     8: _SignedInfinity
                        108     LOAD_FAST                       4: sign
                        110     BINARY_SUBSCR                   
                        112     LOAD_FAST                       2: context
                        114     LOAD_METHOD                     6: _raise_error
                        116     LOAD_GLOBAL                     7: InvalidOperation
                        118     LOAD_CONST                      3: 'INF % x'
                        120     CALL_METHOD                     2
                        122     BUILD_TUPLE                     2
                        124     RETURN_VALUE                    
                        126     LOAD_FAST                       1: other
                        128     POP_JUMP_IF_TRUE                90 (to 180)
                        130     LOAD_FAST                       0: self
                        132     POP_JUMP_IF_TRUE                77 (to 154)
                        134     LOAD_FAST                       2: context
                        136     LOAD_METHOD                     6: _raise_error
                        138     LOAD_GLOBAL                     9: DivisionUndefined
                        140     LOAD_CONST                      4: 'divmod(0, 0)'
                        142     CALL_METHOD                     2
                        144     STORE_FAST                      3: ans
                        146     LOAD_FAST                       3: ans
                        148     LOAD_FAST                       3: ans
                        150     BUILD_TUPLE                     2
                        152     RETURN_VALUE                    
                        154     LOAD_FAST                       2: context
                        156     LOAD_METHOD                     6: _raise_error
                        158     LOAD_GLOBAL                     10: DivisionByZero
                        160     LOAD_CONST                      5: 'x // 0'
                        162     LOAD_FAST                       4: sign
                        164     CALL_METHOD                     3
                        166     LOAD_FAST                       2: context
                        168     LOAD_METHOD                     6: _raise_error
                        170     LOAD_GLOBAL                     7: InvalidOperation
                        172     LOAD_CONST                      6: 'x % 0'
                        174     CALL_METHOD                     2
                        176     BUILD_TUPLE                     2
                        178     RETURN_VALUE                    
                        180     LOAD_FAST                       0: self
                        182     LOAD_METHOD                     11: _divide
                        184     LOAD_FAST                       1: other
                        186     LOAD_FAST                       2: context
                        188     CALL_METHOD                     2
                        190     UNPACK_SEQUENCE                 2
                        192     STORE_FAST                      5: quotient
                        194     STORE_FAST                      6: remainder
                        196     LOAD_FAST                       6: remainder
                        198     LOAD_METHOD                     12: _fix
                        200     LOAD_FAST                       2: context
                        202     CALL_METHOD                     1
                        204     STORE_FAST                      6: remainder
                        206     LOAD_FAST                       5: quotient
                        208     LOAD_FAST                       6: remainder
                        210     BUILD_TUPLE                     2
                        212     RETURN_VALUE                    
                'Decimal.__divmod__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __rdivmod__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        '__divmod__'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Swaps self/other and returns __divmod__.'
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       1: other
                        22      LOAD_ATTR                       2: __divmod__
                        24      LOAD_FAST                       0: self
                        26      LOAD_FAST                       2: context
                        28      LOAD_CONST                      1: ('context',)
                        30      CALL_FUNCTION_KW                2
                        32      RETURN_VALUE                    
                'Decimal.__rdivmod__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __mod__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        'getcontext'
                        '_check_nans'
                        '_isinfinity'
                        '_raise_error'
                        'InvalidOperation'
                        'DivisionUndefined'
                        '_divide'
                        '_fix'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                        'remainder'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        self % other\n        '
                        None
                        'INF % x'
                        'x % 0'
                        '0 % 0'
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       2: context
                        22      LOAD_CONST                      1: None
                        24      IS_OP                           0 (is)
                        26      POP_JUMP_IF_FALSE               17 (to 34)
                        28      LOAD_GLOBAL                     2: getcontext
                        30      CALL_FUNCTION                   0
                        32      STORE_FAST                      2: context
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     3: _check_nans
                        38      LOAD_FAST                       1: other
                        40      LOAD_FAST                       2: context
                        42      CALL_METHOD                     2
                        44      STORE_FAST                      3: ans
                        46      LOAD_FAST                       3: ans
                        48      POP_JUMP_IF_FALSE               27 (to 54)
                        50      LOAD_FAST                       3: ans
                        52      RETURN_VALUE                    
                        54      LOAD_FAST                       0: self
                        56      LOAD_METHOD                     4: _isinfinity
                        58      CALL_METHOD                     0
                        60      POP_JUMP_IF_FALSE               37 (to 74)
                        62      LOAD_FAST                       2: context
                        64      LOAD_METHOD                     5: _raise_error
                        66      LOAD_GLOBAL                     6: InvalidOperation
                        68      LOAD_CONST                      2: 'INF % x'
                        70      CALL_METHOD                     2
                        72      RETURN_VALUE                    
                        74      LOAD_FAST                       1: other
                        76      POP_JUMP_IF_TRUE                53 (to 106)
                        78      LOAD_FAST                       0: self
                        80      POP_JUMP_IF_FALSE               47 (to 94)
                        82      LOAD_FAST                       2: context
                        84      LOAD_METHOD                     5: _raise_error
                        86      LOAD_GLOBAL                     6: InvalidOperation
                        88      LOAD_CONST                      3: 'x % 0'
                        90      CALL_METHOD                     2
                        92      RETURN_VALUE                    
                        94      LOAD_FAST                       2: context
                        96      LOAD_METHOD                     5: _raise_error
                        98      LOAD_GLOBAL                     7: DivisionUndefined
                        100     LOAD_CONST                      4: '0 % 0'
                        102     CALL_METHOD                     2
                        104     RETURN_VALUE                    
                        106     LOAD_FAST                       0: self
                        108     LOAD_METHOD                     8: _divide
                        110     LOAD_FAST                       1: other
                        112     LOAD_FAST                       2: context
                        114     CALL_METHOD                     2
                        116     LOAD_CONST                      5: 1
                        118     BINARY_SUBSCR                   
                        120     STORE_FAST                      4: remainder
                        122     LOAD_FAST                       4: remainder
                        124     LOAD_METHOD                     9: _fix
                        126     LOAD_FAST                       2: context
                        128     CALL_METHOD                     1
                        130     STORE_FAST                      4: remainder
                        132     LOAD_FAST                       4: remainder
                        134     RETURN_VALUE                    
                'Decimal.__mod__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __rmod__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        '__mod__'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Swaps self/other and returns __mod__.'
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       1: other
                        22      LOAD_ATTR                       2: __mod__
                        24      LOAD_FAST                       0: self
                        26      LOAD_FAST                       2: context
                        28      LOAD_CONST                      1: ('context',)
                        30      CALL_FUNCTION_KW                2
                        32      RETURN_VALUE                    
                'Decimal.__rmod__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: remainder_near
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_convert_other'
                        '_check_nans'
                        '_isinfinity'
                        '_raise_error'
                        'InvalidOperation'
                        'DivisionUndefined'
                        'Decimal'
                        '_fix'
                        'min'
                        '_exp'
                        '_dec_from_triple'
                        '_sign'
                        'adjusted'
                        'prec'
                        'DivisionImpossible'
                        '_rescale'
                        'rounding'
                        '_WorkRep'
                        'exp'
                        'int'
                        'divmod'
                        'str'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                        'ideal_exponent'
                        'expdiff'
                        'op1'
                        'op2'
                        'q'
                        'r'
                        'sign'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Remainder nearest to 0-  abs(remainder-near) <= other/2\n        '
                        None
                        True
                        (
                            'raiseit'
                        )
                        'remainder_near(infinity, x)'
                        'remainder_near(x, 0)'
                        'remainder_near(0, 0)'
                        '0'
                        1
                        -2
                        10
                        2
                        0
                    [Disassembly]
                        0       LOAD_FAST                       2: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      2: context
                        14      LOAD_GLOBAL                     1: _convert_other
                        16      LOAD_FAST                       1: other
                        18      LOAD_CONST                      2: True
                        20      LOAD_CONST                      3: ('raiseit',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      1: other
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _check_nans
                        30      LOAD_FAST                       1: other
                        32      LOAD_FAST                       2: context
                        34      CALL_METHOD                     2
                        36      STORE_FAST                      3: ans
                        38      LOAD_FAST                       3: ans
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_FAST                       3: ans
                        44      RETURN_VALUE                    
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     3: _isinfinity
                        50      CALL_METHOD                     0
                        52      POP_JUMP_IF_FALSE               33 (to 66)
                        54      LOAD_FAST                       2: context
                        56      LOAD_METHOD                     4: _raise_error
                        58      LOAD_GLOBAL                     5: InvalidOperation
                        60      LOAD_CONST                      4: 'remainder_near(infinity, x)'
                        62      CALL_METHOD                     2
                        64      RETURN_VALUE                    
                        66      LOAD_FAST                       1: other
                        68      POP_JUMP_IF_TRUE                49 (to 98)
                        70      LOAD_FAST                       0: self
                        72      POP_JUMP_IF_FALSE               43 (to 86)
                        74      LOAD_FAST                       2: context
                        76      LOAD_METHOD                     4: _raise_error
                        78      LOAD_GLOBAL                     5: InvalidOperation
                        80      LOAD_CONST                      5: 'remainder_near(x, 0)'
                        82      CALL_METHOD                     2
                        84      RETURN_VALUE                    
                        86      LOAD_FAST                       2: context
                        88      LOAD_METHOD                     4: _raise_error
                        90      LOAD_GLOBAL                     6: DivisionUndefined
                        92      LOAD_CONST                      6: 'remainder_near(0, 0)'
                        94      CALL_METHOD                     2
                        96      RETURN_VALUE                    
                        98      LOAD_FAST                       1: other
                        100     LOAD_METHOD                     3: _isinfinity
                        102     CALL_METHOD                     0
                        104     POP_JUMP_IF_FALSE               62 (to 124)
                        106     LOAD_GLOBAL                     7: Decimal
                        108     LOAD_FAST                       0: self
                        110     CALL_FUNCTION                   1
                        112     STORE_FAST                      3: ans
                        114     LOAD_FAST                       3: ans
                        116     LOAD_METHOD                     8: _fix
                        118     LOAD_FAST                       2: context
                        120     CALL_METHOD                     1
                        122     RETURN_VALUE                    
                        124     LOAD_GLOBAL                     9: min
                        126     LOAD_FAST                       0: self
                        128     LOAD_ATTR                       10: _exp
                        130     LOAD_FAST                       1: other
                        132     LOAD_ATTR                       10: _exp
                        134     CALL_FUNCTION                   2
                        136     STORE_FAST                      4: ideal_exponent
                        138     LOAD_FAST                       0: self
                        140     POP_JUMP_IF_TRUE                83 (to 166)
                        142     LOAD_GLOBAL                     11: _dec_from_triple
                        144     LOAD_FAST                       0: self
                        146     LOAD_ATTR                       12: _sign
                        148     LOAD_CONST                      7: '0'
                        150     LOAD_FAST                       4: ideal_exponent
                        152     CALL_FUNCTION                   3
                        154     STORE_FAST                      3: ans
                        156     LOAD_FAST                       3: ans
                        158     LOAD_METHOD                     8: _fix
                        160     LOAD_FAST                       2: context
                        162     CALL_METHOD                     1
                        164     RETURN_VALUE                    
                        166     LOAD_FAST                       0: self
                        168     LOAD_METHOD                     13: adjusted
                        170     CALL_METHOD                     0
                        172     LOAD_FAST                       1: other
                        174     LOAD_METHOD                     13: adjusted
                        176     CALL_METHOD                     0
                        178     BINARY_SUBTRACT                 
                        180     STORE_FAST                      5: expdiff
                        182     LOAD_FAST                       5: expdiff
                        184     LOAD_FAST                       2: context
                        186     LOAD_ATTR                       14: prec
                        188     LOAD_CONST                      8: 1
                        190     BINARY_ADD                      
                        192     COMPARE_OP                      5 (>=)
                        194     POP_JUMP_IF_FALSE               103 (to 206)
                        196     LOAD_FAST                       2: context
                        198     LOAD_METHOD                     4: _raise_error
                        200     LOAD_GLOBAL                     15: DivisionImpossible
                        202     CALL_METHOD                     1
                        204     RETURN_VALUE                    
                        206     LOAD_FAST                       5: expdiff
                        208     LOAD_CONST                      9: -2
                        210     COMPARE_OP                      1 (<=)
                        212     POP_JUMP_IF_FALSE               119 (to 238)
                        214     LOAD_FAST                       0: self
                        216     LOAD_METHOD                     16: _rescale
                        218     LOAD_FAST                       4: ideal_exponent
                        220     LOAD_FAST                       2: context
                        222     LOAD_ATTR                       17: rounding
                        224     CALL_METHOD                     2
                        226     STORE_FAST                      3: ans
                        228     LOAD_FAST                       3: ans
                        230     LOAD_METHOD                     8: _fix
                        232     LOAD_FAST                       2: context
                        234     CALL_METHOD                     1
                        236     RETURN_VALUE                    
                        238     LOAD_GLOBAL                     18: _WorkRep
                        240     LOAD_FAST                       0: self
                        242     CALL_FUNCTION                   1
                        244     STORE_FAST                      6: op1
                        246     LOAD_GLOBAL                     18: _WorkRep
                        248     LOAD_FAST                       1: other
                        250     CALL_FUNCTION                   1
                        252     STORE_FAST                      7: op2
                        254     LOAD_FAST                       6: op1
                        256     LOAD_ATTR                       19: exp
                        258     LOAD_FAST                       7: op2
                        260     LOAD_ATTR                       19: exp
                        262     COMPARE_OP                      5 (>=)
                        264     POP_JUMP_IF_FALSE               147 (to 294)
                        266     LOAD_FAST                       6: op1
                        268     DUP_TOP                         
                        270     LOAD_ATTR                       20: int
                        272     LOAD_CONST                      10: 10
                        274     LOAD_FAST                       6: op1
                        276     LOAD_ATTR                       19: exp
                        278     LOAD_FAST                       7: op2
                        280     LOAD_ATTR                       19: exp
                        282     BINARY_SUBTRACT                 
                        284     BINARY_POWER                    
                        286     INPLACE_MULTIPLY                
                        288     ROT_TWO                         
                        290     STORE_ATTR                      20: int
                        292     JUMP_FORWARD                    13 (to 320)
                        294     LOAD_FAST                       7: op2
                        296     DUP_TOP                         
                        298     LOAD_ATTR                       20: int
                        300     LOAD_CONST                      10: 10
                        302     LOAD_FAST                       7: op2
                        304     LOAD_ATTR                       19: exp
                        306     LOAD_FAST                       6: op1
                        308     LOAD_ATTR                       19: exp
                        310     BINARY_SUBTRACT                 
                        312     BINARY_POWER                    
                        314     INPLACE_MULTIPLY                
                        316     ROT_TWO                         
                        318     STORE_ATTR                      20: int
                        320     LOAD_GLOBAL                     21: divmod
                        322     LOAD_FAST                       6: op1
                        324     LOAD_ATTR                       20: int
                        326     LOAD_FAST                       7: op2
                        328     LOAD_ATTR                       20: int
                        330     CALL_FUNCTION                   2
                        332     UNPACK_SEQUENCE                 2
                        334     STORE_FAST                      8: q
                        336     STORE_FAST                      9: r
                        338     LOAD_CONST                      11: 2
                        340     LOAD_FAST                       9: r
                        342     BINARY_MULTIPLY                 
                        344     LOAD_FAST                       8: q
                        346     LOAD_CONST                      8: 1
                        348     BINARY_AND                      
                        350     BINARY_ADD                      
                        352     LOAD_FAST                       7: op2
                        354     LOAD_ATTR                       20: int
                        356     COMPARE_OP                      4 (>)
                        358     POP_JUMP_IF_FALSE               189 (to 378)
                        360     LOAD_FAST                       9: r
                        362     LOAD_FAST                       7: op2
                        364     LOAD_ATTR                       20: int
                        366     INPLACE_SUBTRACT                
                        368     STORE_FAST                      9: r
                        370     LOAD_FAST                       8: q
                        372     LOAD_CONST                      8: 1
                        374     INPLACE_ADD                     
                        376     STORE_FAST                      8: q
                        378     LOAD_FAST                       8: q
                        380     LOAD_CONST                      10: 10
                        382     LOAD_FAST                       2: context
                        384     LOAD_ATTR                       14: prec
                        386     BINARY_POWER                    
                        388     COMPARE_OP                      5 (>=)
                        390     POP_JUMP_IF_FALSE               201 (to 402)
                        392     LOAD_FAST                       2: context
                        394     LOAD_METHOD                     4: _raise_error
                        396     LOAD_GLOBAL                     15: DivisionImpossible
                        398     CALL_METHOD                     1
                        400     RETURN_VALUE                    
                        402     LOAD_FAST                       0: self
                        404     LOAD_ATTR                       12: _sign
                        406     STORE_FAST                      10: sign
                        408     LOAD_FAST                       9: r
                        410     LOAD_CONST                      12: 0
                        412     COMPARE_OP                      0 (<)
                        414     POP_JUMP_IF_FALSE               215 (to 430)
                        416     LOAD_CONST                      8: 1
                        418     LOAD_FAST                       10: sign
                        420     BINARY_SUBTRACT                 
                        422     STORE_FAST                      10: sign
                        424     LOAD_FAST                       9: r
                        426     UNARY_NEGATIVE                  
                        428     STORE_FAST                      9: r
                        430     LOAD_GLOBAL                     11: _dec_from_triple
                        432     LOAD_FAST                       10: sign
                        434     LOAD_GLOBAL                     22: str
                        436     LOAD_FAST                       9: r
                        438     CALL_FUNCTION                   1
                        440     LOAD_FAST                       4: ideal_exponent
                        442     CALL_FUNCTION                   3
                        444     STORE_FAST                      3: ans
                        446     LOAD_FAST                       3: ans
                        448     LOAD_METHOD                     8: _fix
                        450     LOAD_FAST                       2: context
                        452     CALL_METHOD                     1
                        454     RETURN_VALUE                    
                'Decimal.remainder_near'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __floordiv__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        'getcontext'
                        '_check_nans'
                        '_isinfinity'
                        '_raise_error'
                        'InvalidOperation'
                        '_SignedInfinity'
                        '_sign'
                        'DivisionByZero'
                        'DivisionUndefined'
                        '_divide'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'self // other'
                        None
                        'INF // INF'
                        'x // 0'
                        '0 // 0'
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       2: context
                        22      LOAD_CONST                      1: None
                        24      IS_OP                           0 (is)
                        26      POP_JUMP_IF_FALSE               17 (to 34)
                        28      LOAD_GLOBAL                     2: getcontext
                        30      CALL_FUNCTION                   0
                        32      STORE_FAST                      2: context
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     3: _check_nans
                        38      LOAD_FAST                       1: other
                        40      LOAD_FAST                       2: context
                        42      CALL_METHOD                     2
                        44      STORE_FAST                      3: ans
                        46      LOAD_FAST                       3: ans
                        48      POP_JUMP_IF_FALSE               27 (to 54)
                        50      LOAD_FAST                       3: ans
                        52      RETURN_VALUE                    
                        54      LOAD_FAST                       0: self
                        56      LOAD_METHOD                     4: _isinfinity
                        58      CALL_METHOD                     0
                        60      POP_JUMP_IF_FALSE               49 (to 98)
                        62      LOAD_FAST                       1: other
                        64      LOAD_METHOD                     4: _isinfinity
                        66      CALL_METHOD                     0
                        68      POP_JUMP_IF_FALSE               41 (to 82)
                        70      LOAD_FAST                       2: context
                        72      LOAD_METHOD                     5: _raise_error
                        74      LOAD_GLOBAL                     6: InvalidOperation
                        76      LOAD_CONST                      2: 'INF // INF'
                        78      CALL_METHOD                     2
                        80      RETURN_VALUE                    
                        82      LOAD_GLOBAL                     7: _SignedInfinity
                        84      LOAD_FAST                       0: self
                        86      LOAD_ATTR                       8: _sign
                        88      LOAD_FAST                       1: other
                        90      LOAD_ATTR                       8: _sign
                        92      BINARY_XOR                      
                        94      BINARY_SUBSCR                   
                        96      RETURN_VALUE                    
                        98      LOAD_FAST                       1: other
                        100     POP_JUMP_IF_TRUE                70 (to 140)
                        102     LOAD_FAST                       0: self
                        104     POP_JUMP_IF_FALSE               64 (to 128)
                        106     LOAD_FAST                       2: context
                        108     LOAD_METHOD                     5: _raise_error
                        110     LOAD_GLOBAL                     9: DivisionByZero
                        112     LOAD_CONST                      3: 'x // 0'
                        114     LOAD_FAST                       0: self
                        116     LOAD_ATTR                       8: _sign
                        118     LOAD_FAST                       1: other
                        120     LOAD_ATTR                       8: _sign
                        122     BINARY_XOR                      
                        124     CALL_METHOD                     3
                        126     RETURN_VALUE                    
                        128     LOAD_FAST                       2: context
                        130     LOAD_METHOD                     5: _raise_error
                        132     LOAD_GLOBAL                     10: DivisionUndefined
                        134     LOAD_CONST                      4: '0 // 0'
                        136     CALL_METHOD                     2
                        138     RETURN_VALUE                    
                        140     LOAD_FAST                       0: self
                        142     LOAD_METHOD                     11: _divide
                        144     LOAD_FAST                       1: other
                        146     LOAD_FAST                       2: context
                        148     CALL_METHOD                     2
                        150     LOAD_CONST                      5: 0
                        152     BINARY_SUBSCR                   
                        154     RETURN_VALUE                    
                'Decimal.__floordiv__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __rfloordiv__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        '__floordiv__'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Swaps self/other and returns __floordiv__.'
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       1: other
                        22      LOAD_ATTR                       2: __floordiv__
                        24      LOAD_FAST                       0: self
                        26      LOAD_FAST                       2: context
                        28      LOAD_CONST                      1: ('context',)
                        30      CALL_FUNCTION_KW                2
                        32      RETURN_VALUE                    
                'Decimal.__rfloordiv__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __float__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_isnan'
                        'is_snan'
                        'ValueError'
                        '_sign'
                        'str'
                        'float'
                    [Var Names]
                        'self'
                        's'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Float representation.'
                        'Cannot convert signaling NaN to float'
                        '-nan'
                        'nan'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _isnan
                        4       CALL_METHOD                     0
                        6       POP_JUMP_IF_FALSE               23 (to 46)
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     1: is_snan
                        12      CALL_METHOD                     0
                        14      POP_JUMP_IF_FALSE               12 (to 24)
                        16      LOAD_GLOBAL                     2: ValueError
                        18      LOAD_CONST                      1: 'Cannot convert signaling NaN to float'
                        20      CALL_FUNCTION                   1
                        22      RAISE_VARARGS                   1
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       3: _sign
                        28      POP_JUMP_IF_FALSE               17 (to 34)
                        30      LOAD_CONST                      2: '-nan'
                        32      JUMP_FORWARD                    1 (to 36)
                        34      LOAD_CONST                      3: 'nan'
                        36      STORE_FAST                      1: s
                        38      LOAD_GLOBAL                     5: float
                        40      LOAD_FAST                       1: s
                        42      CALL_FUNCTION                   1
                        44      RETURN_VALUE                    
                        46      LOAD_GLOBAL                     4: str
                        48      LOAD_FAST                       0: self
                        50      CALL_FUNCTION                   1
                        52      STORE_FAST                      1: s
                        54      LOAD_GLOBAL                     5: float
                        56      LOAD_FAST                       1: s
                        58      CALL_FUNCTION                   1
                        60      RETURN_VALUE                    
                'Decimal.__float__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __int__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        '_isnan'
                        'ValueError'
                        '_isinfinity'
                        'OverflowError'
                        '_sign'
                        '_exp'
                        'int'
                        '_int'
                    [Var Names]
                        'self'
                        's'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Converts self to an int, truncating if necessary.'
                        'Cannot convert NaN to integer'
                        'Cannot convert infinity to integer'
                        -1
                        0
                        10
                        None
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               19 (to 38)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: _isnan
                        10      CALL_METHOD                     0
                        12      POP_JUMP_IF_FALSE               11 (to 22)
                        14      LOAD_GLOBAL                     2: ValueError
                        16      LOAD_CONST                      1: 'Cannot convert NaN to integer'
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                        22      LOAD_FAST                       0: self
                        24      LOAD_METHOD                     3: _isinfinity
                        26      CALL_METHOD                     0
                        28      POP_JUMP_IF_FALSE               19 (to 38)
                        30      LOAD_GLOBAL                     4: OverflowError
                        32      LOAD_CONST                      2: 'Cannot convert infinity to integer'
                        34      CALL_FUNCTION                   1
                        36      RAISE_VARARGS                   1
                        38      LOAD_CONST                      3: -1
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       5: _sign
                        44      BINARY_POWER                    
                        46      STORE_FAST                      1: s
                        48      LOAD_FAST                       0: self
                        50      LOAD_ATTR                       6: _exp
                        52      LOAD_CONST                      4: 0
                        54      COMPARE_OP                      5 (>=)
                        56      POP_JUMP_IF_FALSE               41 (to 82)
                        58      LOAD_FAST                       1: s
                        60      LOAD_GLOBAL                     7: int
                        62      LOAD_FAST                       0: self
                        64      LOAD_ATTR                       8: _int
                        66      CALL_FUNCTION                   1
                        68      BINARY_MULTIPLY                 
                        70      LOAD_CONST                      5: 10
                        72      LOAD_FAST                       0: self
                        74      LOAD_ATTR                       6: _exp
                        76      BINARY_POWER                    
                        78      BINARY_MULTIPLY                 
                        80      RETURN_VALUE                    
                        82      LOAD_FAST                       1: s
                        84      LOAD_GLOBAL                     7: int
                        86      LOAD_FAST                       0: self
                        88      LOAD_ATTR                       8: _int
                        90      LOAD_CONST                      6: None
                        92      LOAD_FAST                       0: self
                        94      LOAD_ATTR                       6: _exp
                        96      BUILD_SLICE                     2
                        98      BINARY_SUBSCR                   
                        100     JUMP_IF_TRUE_OR_POP             52 (to 104)
                        102     LOAD_CONST                      7: '0'
                        104     CALL_FUNCTION                   1
                        106     BINARY_MULTIPLY                 
                        108     RETURN_VALUE                    
                'Decimal.__int__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: real
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       RETURN_VALUE                    
                'Decimal.real'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: imag
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Decimal'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Decimal
                        2       LOAD_CONST                      1: 0
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                'Decimal.imag'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: conjugate
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       RETURN_VALUE                    
                'Decimal.conjugate'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __complex__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'complex'
                        'float'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: complex
                        2       LOAD_GLOBAL                     1: float
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   1
                        8       CALL_FUNCTION                   1
                        10      RETURN_VALUE                    
                'Decimal.__complex__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _fix_nan
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_int'
                        'prec'
                        'clamp'
                        'len'
                        'lstrip'
                        '_dec_from_triple'
                        '_sign'
                        '_exp'
                        'Decimal'
                    [Var Names]
                        'self'
                        'context'
                        'payload'
                        'max_payload_len'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Decapitate the payload of a NaN to fit the context'
                        None
                        '0'
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _int
                        4       STORE_FAST                      2: payload
                        6       LOAD_FAST                       1: context
                        8       LOAD_ATTR                       1: prec
                        10      LOAD_FAST                       1: context
                        12      LOAD_ATTR                       2: clamp
                        14      BINARY_SUBTRACT                 
                        16      STORE_FAST                      3: max_payload_len
                        18      LOAD_GLOBAL                     3: len
                        20      LOAD_FAST                       2: payload
                        22      CALL_FUNCTION                   1
                        24      LOAD_FAST                       3: max_payload_len
                        26      COMPARE_OP                      4 (>)
                        28      POP_JUMP_IF_FALSE               37 (to 74)
                        30      LOAD_FAST                       2: payload
                        32      LOAD_GLOBAL                     3: len
                        34      LOAD_FAST                       2: payload
                        36      CALL_FUNCTION                   1
                        38      LOAD_FAST                       3: max_payload_len
                        40      BINARY_SUBTRACT                 
                        42      LOAD_CONST                      1: None
                        44      BUILD_SLICE                     2
                        46      BINARY_SUBSCR                   
                        48      LOAD_METHOD                     4: lstrip
                        50      LOAD_CONST                      2: '0'
                        52      CALL_METHOD                     1
                        54      STORE_FAST                      2: payload
                        56      LOAD_GLOBAL                     5: _dec_from_triple
                        58      LOAD_FAST                       0: self
                        60      LOAD_ATTR                       6: _sign
                        62      LOAD_FAST                       2: payload
                        64      LOAD_FAST                       0: self
                        66      LOAD_ATTR                       7: _exp
                        68      LOAD_CONST                      3: True
                        70      CALL_FUNCTION                   4
                        72      RETURN_VALUE                    
                        74      LOAD_GLOBAL                     8: Decimal
                        76      LOAD_FAST                       0: self
                        78      CALL_FUNCTION                   1
                        80      RETURN_VALUE                    
                'Decimal._fix_nan'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _fix
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 14
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        '_isnan'
                        '_fix_nan'
                        'Decimal'
                        'Etiny'
                        'Etop'
                        'Emax'
                        'clamp'
                        'min'
                        'max'
                        '_exp'
                        '_raise_error'
                        'Clamped'
                        '_dec_from_triple'
                        '_sign'
                        'len'
                        '_int'
                        'prec'
                        'Overflow'
                        'Inexact'
                        'Rounded'
                        '_pick_rounding_function'
                        'rounding'
                        'str'
                        'int'
                        'Underflow'
                        'Subnormal'
                    [Var Names]
                        'self'
                        'context'
                        'Etiny'
                        'Etop'
                        'exp_max'
                        'new_exp'
                        'exp_min'
                        'ans'
                        'self_is_subnormal'
                        'digits'
                        'rounding_method'
                        'changed'
                        'coeff'
                        'self_padded'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Round if it is necessary to keep self within prec precision.\n\n        Rounds and fixes the exponent.  Does not raise on a sNaN.\n\n        Arguments:\n        self - Decimal instance\n        context - context used.\n        '
                        '0'
                        'above Emax'
                        0
                        '1'
                        1
                        None
                        -1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               16 (to 32)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: _isnan
                        10      CALL_METHOD                     0
                        12      POP_JUMP_IF_FALSE               12 (to 24)
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     2: _fix_nan
                        18      LOAD_FAST                       1: context
                        20      CALL_METHOD                     1
                        22      RETURN_VALUE                    
                        24      LOAD_GLOBAL                     3: Decimal
                        26      LOAD_FAST                       0: self
                        28      CALL_FUNCTION                   1
                        30      RETURN_VALUE                    
                        32      LOAD_FAST                       1: context
                        34      LOAD_METHOD                     4: Etiny
                        36      CALL_METHOD                     0
                        38      STORE_FAST                      2: Etiny
                        40      LOAD_FAST                       1: context
                        42      LOAD_METHOD                     5: Etop
                        44      CALL_METHOD                     0
                        46      STORE_FAST                      3: Etop
                        48      LOAD_FAST                       0: self
                        50      POP_JUMP_IF_TRUE                64 (to 128)
                        52      LOAD_FAST                       1: context
                        54      LOAD_ATTR                       6: Emax
                        56      LOAD_FAST                       3: Etop
                        58      BUILD_LIST                      2
                        60      LOAD_FAST                       1: context
                        62      LOAD_ATTR                       7: clamp
                        64      BINARY_SUBSCR                   
                        66      STORE_FAST                      4: exp_max
                        68      LOAD_GLOBAL                     8: min
                        70      LOAD_GLOBAL                     9: max
                        72      LOAD_FAST                       0: self
                        74      LOAD_ATTR                       10: _exp
                        76      LOAD_FAST                       2: Etiny
                        78      CALL_FUNCTION                   2
                        80      LOAD_FAST                       4: exp_max
                        82      CALL_FUNCTION                   2
                        84      STORE_FAST                      5: new_exp
                        86      LOAD_FAST                       5: new_exp
                        88      LOAD_FAST                       0: self
                        90      LOAD_ATTR                       10: _exp
                        92      COMPARE_OP                      3 (!=)
                        94      POP_JUMP_IF_FALSE               60 (to 120)
                        96      LOAD_FAST                       1: context
                        98      LOAD_METHOD                     11: _raise_error
                        100     LOAD_GLOBAL                     12: Clamped
                        102     CALL_METHOD                     1
                        104     POP_TOP                         
                        106     LOAD_GLOBAL                     13: _dec_from_triple
                        108     LOAD_FAST                       0: self
                        110     LOAD_ATTR                       14: _sign
                        112     LOAD_CONST                      1: '0'
                        114     LOAD_FAST                       5: new_exp
                        116     CALL_FUNCTION                   3
                        118     RETURN_VALUE                    
                        120     LOAD_GLOBAL                     3: Decimal
                        122     LOAD_FAST                       0: self
                        124     CALL_FUNCTION                   1
                        126     RETURN_VALUE                    
                        128     LOAD_GLOBAL                     15: len
                        130     LOAD_FAST                       0: self
                        132     LOAD_ATTR                       16: _int
                        134     CALL_FUNCTION                   1
                        136     LOAD_FAST                       0: self
                        138     LOAD_ATTR                       10: _exp
                        140     BINARY_ADD                      
                        142     LOAD_FAST                       1: context
                        144     LOAD_ATTR                       17: prec
                        146     BINARY_SUBTRACT                 
                        148     STORE_FAST                      6: exp_min
                        150     LOAD_FAST                       6: exp_min
                        152     LOAD_FAST                       3: Etop
                        154     COMPARE_OP                      4 (>)
                        156     POP_JUMP_IF_FALSE               99 (to 198)
                        158     LOAD_FAST                       1: context
                        160     LOAD_METHOD                     11: _raise_error
                        162     LOAD_GLOBAL                     18: Overflow
                        164     LOAD_CONST                      2: 'above Emax'
                        166     LOAD_FAST                       0: self
                        168     LOAD_ATTR                       14: _sign
                        170     CALL_METHOD                     3
                        172     STORE_FAST                      7: ans
                        174     LOAD_FAST                       1: context
                        176     LOAD_METHOD                     11: _raise_error
                        178     LOAD_GLOBAL                     19: Inexact
                        180     CALL_METHOD                     1
                        182     POP_TOP                         
                        184     LOAD_FAST                       1: context
                        186     LOAD_METHOD                     11: _raise_error
                        188     LOAD_GLOBAL                     20: Rounded
                        190     CALL_METHOD                     1
                        192     POP_TOP                         
                        194     LOAD_FAST                       7: ans
                        196     RETURN_VALUE                    
                        198     LOAD_FAST                       6: exp_min
                        200     LOAD_FAST                       2: Etiny
                        202     COMPARE_OP                      0 (<)
                        204     STORE_FAST                      8: self_is_subnormal
                        206     LOAD_FAST                       8: self_is_subnormal
                        208     POP_JUMP_IF_FALSE               107 (to 214)
                        210     LOAD_FAST                       2: Etiny
                        212     STORE_FAST                      6: exp_min
                        214     LOAD_FAST                       0: self
                        216     LOAD_ATTR                       10: _exp
                        218     LOAD_FAST                       6: exp_min
                        220     COMPARE_OP                      0 (<)
                        222     POP_JUMP_IF_FALSE               243 (to 486)
                        224     LOAD_GLOBAL                     15: len
                        226     LOAD_FAST                       0: self
                        228     LOAD_ATTR                       16: _int
                        230     CALL_FUNCTION                   1
                        232     LOAD_FAST                       0: self
                        234     LOAD_ATTR                       10: _exp
                        236     BINARY_ADD                      
                        238     LOAD_FAST                       6: exp_min
                        240     BINARY_SUBTRACT                 
                        242     STORE_FAST                      9: digits
                        244     LOAD_FAST                       9: digits
                        246     LOAD_CONST                      3: 0
                        248     COMPARE_OP                      0 (<)
                        250     POP_JUMP_IF_FALSE               137 (to 274)
                        252     LOAD_GLOBAL                     13: _dec_from_triple
                        254     LOAD_FAST                       0: self
                        256     LOAD_ATTR                       14: _sign
                        258     LOAD_CONST                      4: '1'
                        260     LOAD_FAST                       6: exp_min
                        262     LOAD_CONST                      5: 1
                        264     BINARY_SUBTRACT                 
                        266     CALL_FUNCTION                   3
                        268     STORE_FAST                      0: self
                        270     LOAD_CONST                      3: 0
                        272     STORE_FAST                      9: digits
                        274     LOAD_FAST                       0: self
                        276     LOAD_ATTR                       21: _pick_rounding_function
                        278     LOAD_FAST                       1: context
                        280     LOAD_ATTR                       22: rounding
                        282     BINARY_SUBSCR                   
                        284     STORE_FAST                      10: rounding_method
                        286     LOAD_FAST                       10: rounding_method
                        288     LOAD_FAST                       0: self
                        290     LOAD_FAST                       9: digits
                        292     CALL_FUNCTION                   2
                        294     STORE_FAST                      11: changed
                        296     LOAD_FAST                       0: self
                        298     LOAD_ATTR                       16: _int
                        300     LOAD_CONST                      6: None
                        302     LOAD_FAST                       9: digits
                        304     BUILD_SLICE                     2
                        306     BINARY_SUBSCR                   
                        308     JUMP_IF_TRUE_OR_POP             156 (to 312)
                        310     LOAD_CONST                      1: '0'
                        312     STORE_FAST                      12: coeff
                        314     LOAD_FAST                       11: changed
                        316     LOAD_CONST                      3: 0
                        318     COMPARE_OP                      4 (>)
                        320     POP_JUMP_IF_FALSE               186 (to 372)
                        322     LOAD_GLOBAL                     23: str
                        324     LOAD_GLOBAL                     24: int
                        326     LOAD_FAST                       12: coeff
                        328     CALL_FUNCTION                   1
                        330     LOAD_CONST                      5: 1
                        332     BINARY_ADD                      
                        334     CALL_FUNCTION                   1
                        336     STORE_FAST                      12: coeff
                        338     LOAD_GLOBAL                     15: len
                        340     LOAD_FAST                       12: coeff
                        342     CALL_FUNCTION                   1
                        344     LOAD_FAST                       1: context
                        346     LOAD_ATTR                       17: prec
                        348     COMPARE_OP                      4 (>)
                        350     POP_JUMP_IF_FALSE               186 (to 372)
                        352     LOAD_FAST                       12: coeff
                        354     LOAD_CONST                      6: None
                        356     LOAD_CONST                      7: -1
                        358     BUILD_SLICE                     2
                        360     BINARY_SUBSCR                   
                        362     STORE_FAST                      12: coeff
                        364     LOAD_FAST                       6: exp_min
                        366     LOAD_CONST                      5: 1
                        368     INPLACE_ADD                     
                        370     STORE_FAST                      6: exp_min
                        372     LOAD_FAST                       6: exp_min
                        374     LOAD_FAST                       3: Etop
                        376     COMPARE_OP                      4 (>)
                        378     POP_JUMP_IF_FALSE               199 (to 398)
                        380     LOAD_FAST                       1: context
                        382     LOAD_METHOD                     11: _raise_error
                        384     LOAD_GLOBAL                     18: Overflow
                        386     LOAD_CONST                      2: 'above Emax'
                        388     LOAD_FAST                       0: self
                        390     LOAD_ATTR                       14: _sign
                        392     CALL_METHOD                     3
                        394     STORE_FAST                      7: ans
                        396     JUMP_FORWARD                    7 (to 412)
                        398     LOAD_GLOBAL                     13: _dec_from_triple
                        400     LOAD_FAST                       0: self
                        402     LOAD_ATTR                       14: _sign
                        404     LOAD_FAST                       12: coeff
                        406     LOAD_FAST                       6: exp_min
                        408     CALL_FUNCTION                   3
                        410     STORE_FAST                      7: ans
                        412     LOAD_FAST                       11: changed
                        414     POP_JUMP_IF_FALSE               215 (to 430)
                        416     LOAD_FAST                       8: self_is_subnormal
                        418     POP_JUMP_IF_FALSE               215 (to 430)
                        420     LOAD_FAST                       1: context
                        422     LOAD_METHOD                     11: _raise_error
                        424     LOAD_GLOBAL                     25: Underflow
                        426     CALL_METHOD                     1
                        428     POP_TOP                         
                        430     LOAD_FAST                       8: self_is_subnormal
                        432     POP_JUMP_IF_FALSE               222 (to 444)
                        434     LOAD_FAST                       1: context
                        436     LOAD_METHOD                     11: _raise_error
                        438     LOAD_GLOBAL                     26: Subnormal
                        440     CALL_METHOD                     1
                        442     POP_TOP                         
                        444     LOAD_FAST                       11: changed
                        446     POP_JUMP_IF_FALSE               229 (to 458)
                        448     LOAD_FAST                       1: context
                        450     LOAD_METHOD                     11: _raise_error
                        452     LOAD_GLOBAL                     19: Inexact
                        454     CALL_METHOD                     1
                        456     POP_TOP                         
                        458     LOAD_FAST                       1: context
                        460     LOAD_METHOD                     11: _raise_error
                        462     LOAD_GLOBAL                     20: Rounded
                        464     CALL_METHOD                     1
                        466     POP_TOP                         
                        468     LOAD_FAST                       7: ans
                        470     POP_JUMP_IF_TRUE                241 (to 482)
                        472     LOAD_FAST                       1: context
                        474     LOAD_METHOD                     11: _raise_error
                        476     LOAD_GLOBAL                     12: Clamped
                        478     CALL_METHOD                     1
                        480     POP_TOP                         
                        482     LOAD_FAST                       7: ans
                        484     RETURN_VALUE                    
                        486     LOAD_FAST                       8: self_is_subnormal
                        488     POP_JUMP_IF_FALSE               250 (to 500)
                        490     LOAD_FAST                       1: context
                        492     LOAD_METHOD                     11: _raise_error
                        494     LOAD_GLOBAL                     26: Subnormal
                        496     CALL_METHOD                     1
                        498     POP_TOP                         
                        500     LOAD_FAST                       1: context
                        502     LOAD_ATTR                       7: clamp
                        504     LOAD_CONST                      5: 1
                        506     COMPARE_OP                      2 (==)
                        508     POP_JUMP_IF_FALSE               284 (to 568)
                        512     LOAD_FAST                       0: self
                        514     LOAD_ATTR                       10: _exp
                        516     LOAD_FAST                       3: Etop
                        518     COMPARE_OP                      4 (>)
                        520     POP_JUMP_IF_FALSE               284 (to 568)
                        524     LOAD_FAST                       1: context
                        526     LOAD_METHOD                     11: _raise_error
                        528     LOAD_GLOBAL                     12: Clamped
                        530     CALL_METHOD                     1
                        532     POP_TOP                         
                        534     LOAD_FAST                       0: self
                        536     LOAD_ATTR                       16: _int
                        538     LOAD_CONST                      1: '0'
                        540     LOAD_FAST                       0: self
                        542     LOAD_ATTR                       10: _exp
                        544     LOAD_FAST                       3: Etop
                        546     BINARY_SUBTRACT                 
                        548     BINARY_MULTIPLY                 
                        550     BINARY_ADD                      
                        552     STORE_FAST                      13: self_padded
                        554     LOAD_GLOBAL                     13: _dec_from_triple
                        556     LOAD_FAST                       0: self
                        558     LOAD_ATTR                       14: _sign
                        560     LOAD_FAST                       13: self_padded
                        562     LOAD_FAST                       3: Etop
                        564     CALL_FUNCTION                   3
                        566     RETURN_VALUE                    
                        568     LOAD_GLOBAL                     3: Decimal
                        570     LOAD_FAST                       0: self
                        572     CALL_FUNCTION                   1
                        574     RETURN_VALUE                    
                'Decimal._fix'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _round_down
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_all_zeros'
                        '_int'
                    [Var Names]
                        'self'
                        'prec'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Also known as round-towards-0, truncate.'
                        0
                        -1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _all_zeros
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _int
                        6       LOAD_FAST                       1: prec
                        8       CALL_FUNCTION                   2
                        10      POP_JUMP_IF_FALSE               8 (to 16)
                        12      LOAD_CONST                      1: 0
                        14      RETURN_VALUE                    
                        16      LOAD_CONST                      2: -1
                        18      RETURN_VALUE                    
                'Decimal._round_down'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _round_up
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_round_down'
                    [Var Names]
                        'self'
                        'prec'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Rounds away from 0.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _round_down
                        4       LOAD_FAST                       1: prec
                        6       CALL_METHOD                     1
                        8       UNARY_NEGATIVE                  
                        10      RETURN_VALUE                    
                'Decimal._round_up'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _round_half_up
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_int'
                        '_all_zeros'
                    [Var Names]
                        'self'
                        'prec'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Rounds 5 up (away from 0)'
                        '56789'
                        1
                        0
                        -1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _int
                        4       LOAD_FAST                       1: prec
                        6       BINARY_SUBSCR                   
                        8       LOAD_CONST                      1: '56789'
                        10      CONTAINS_OP                     0 (in)
                        12      POP_JUMP_IF_FALSE               9 (to 18)
                        14      LOAD_CONST                      2: 1
                        16      RETURN_VALUE                    
                        18      LOAD_GLOBAL                     1: _all_zeros
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       0: _int
                        24      LOAD_FAST                       1: prec
                        26      CALL_FUNCTION                   2
                        28      POP_JUMP_IF_FALSE               17 (to 34)
                        30      LOAD_CONST                      3: 0
                        32      RETURN_VALUE                    
                        34      LOAD_CONST                      4: -1
                        36      RETURN_VALUE                    
                'Decimal._round_half_up'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _round_half_down
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exact_half'
                        '_int'
                        '_round_half_up'
                    [Var Names]
                        'self'
                        'prec'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Round 5 down'
                        -1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _exact_half
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _int
                        6       LOAD_FAST                       1: prec
                        8       CALL_FUNCTION                   2
                        10      POP_JUMP_IF_FALSE               8 (to 16)
                        12      LOAD_CONST                      1: -1
                        14      RETURN_VALUE                    
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     2: _round_half_up
                        20      LOAD_FAST                       1: prec
                        22      CALL_METHOD                     1
                        24      RETURN_VALUE                    
                'Decimal._round_half_down'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _round_half_even
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exact_half'
                        '_int'
                        '_round_half_up'
                    [Var Names]
                        'self'
                        'prec'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Round 5 to even, rest to nearest.'
                        0
                        1
                        '02468'
                        -1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _exact_half
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _int
                        6       LOAD_FAST                       1: prec
                        8       CALL_FUNCTION                   2
                        10      POP_JUMP_IF_FALSE               21 (to 42)
                        12      LOAD_FAST                       1: prec
                        14      LOAD_CONST                      1: 0
                        16      COMPARE_OP                      2 (==)
                        18      POP_JUMP_IF_TRUE                19 (to 38)
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       1: _int
                        24      LOAD_FAST                       1: prec
                        26      LOAD_CONST                      2: 1
                        28      BINARY_SUBTRACT                 
                        30      BINARY_SUBSCR                   
                        32      LOAD_CONST                      3: '02468'
                        34      CONTAINS_OP                     0 (in)
                        36      POP_JUMP_IF_FALSE               21 (to 42)
                        38      LOAD_CONST                      4: -1
                        40      RETURN_VALUE                    
                        42      LOAD_FAST                       0: self
                        44      LOAD_METHOD                     2: _round_half_up
                        46      LOAD_FAST                       1: prec
                        48      CALL_METHOD                     1
                        50      RETURN_VALUE                    
                'Decimal._round_half_even'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _round_ceiling
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sign'
                        '_round_down'
                    [Var Names]
                        'self'
                        'prec'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Rounds up (not away from 0 if negative.)'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _sign
                        4       POP_JUMP_IF_FALSE               8 (to 16)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: _round_down
                        10      LOAD_FAST                       1: prec
                        12      CALL_METHOD                     1
                        14      RETURN_VALUE                    
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     1: _round_down
                        20      LOAD_FAST                       1: prec
                        22      CALL_METHOD                     1
                        24      UNARY_NEGATIVE                  
                        26      RETURN_VALUE                    
                'Decimal._round_ceiling'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _round_floor
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sign'
                        '_round_down'
                    [Var Names]
                        'self'
                        'prec'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Rounds down (not towards 0 if negative)'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _sign
                        4       POP_JUMP_IF_TRUE                8 (to 16)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: _round_down
                        10      LOAD_FAST                       1: prec
                        12      CALL_METHOD                     1
                        14      RETURN_VALUE                    
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     1: _round_down
                        20      LOAD_FAST                       1: prec
                        22      CALL_METHOD                     1
                        24      UNARY_NEGATIVE                  
                        26      RETURN_VALUE                    
                'Decimal._round_floor'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _round_05up
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_int'
                        '_round_down'
                    [Var Names]
                        'self'
                        'prec'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Round down unless digit prec-1 is 0 or 5.'
                        1
                        '05'
                    [Disassembly]
                        0       LOAD_FAST                       1: prec
                        2       POP_JUMP_IF_FALSE               16 (to 32)
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       0: _int
                        8       LOAD_FAST                       1: prec
                        10      LOAD_CONST                      1: 1
                        12      BINARY_SUBTRACT                 
                        14      BINARY_SUBSCR                   
                        16      LOAD_CONST                      2: '05'
                        18      CONTAINS_OP                     1 (not in)
                        20      POP_JUMP_IF_FALSE               16 (to 32)
                        22      LOAD_FAST                       0: self
                        24      LOAD_METHOD                     1: _round_down
                        26      LOAD_FAST                       1: prec
                        28      CALL_METHOD                     1
                        30      RETURN_VALUE                    
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     1: _round_down
                        36      LOAD_FAST                       1: prec
                        38      CALL_METHOD                     1
                        40      UNARY_NEGATIVE                  
                        42      RETURN_VALUE                    
                'Decimal._round_05up'
                (
                    'ROUND_DOWN'
                    'ROUND_UP'
                    'ROUND_HALF_UP'
                    'ROUND_HALF_DOWN'
                    'ROUND_HALF_EVEN'
                    'ROUND_CEILING'
                    'ROUND_FLOOR'
                    'ROUND_05UP'
                )
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __round__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'int'
                        'TypeError'
                        '_dec_from_triple'
                        'quantize'
                        '_is_special'
                        'is_nan'
                        'ValueError'
                        'OverflowError'
                        '_rescale'
                        'ROUND_HALF_EVEN'
                    [Var Names]
                        'self'
                        'n'
                        'exp'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Round self to the nearest integer, or to a given precision.\n\n        If only one argument is supplied, round a finite Decimal\n        instance self to the nearest integer.  If self is infinite or\n        a NaN then a Python exception is raised.  If self is finite\n        and lies exactly halfway between two integers then it is\n        rounded to the integer with even last digit.\n\n        >>> round(Decimal('123.456'))\n        123\n        >>> round(Decimal('-456.789'))\n        -457\n        >>> round(Decimal('-3.0'))\n        -3\n        >>> round(Decimal('2.5'))\n        2\n        >>> round(Decimal('3.5'))\n        4\n        >>> round(Decimal('Inf'))\n        Traceback (most recent call last):\n          ...\n        OverflowError: cannot round an infinity\n        >>> round(Decimal('NaN'))\n        Traceback (most recent call last):\n          ...\n        ValueError: cannot round a NaN\n\n        If a second argument n is supplied, self is rounded to n\n        decimal places using the rounding mode for the current\n        context.\n\n        For an integer n, round(self, -n) is exactly equivalent to\n        self.quantize(Decimal('1En')).\n\n        >>> round(Decimal('123.456'), 0)\n        Decimal('123')\n        >>> round(Decimal('123.456'), 2)\n        Decimal('123.46')\n        >>> round(Decimal('123.456'), -2)\n        Decimal('1E+2')\n        >>> round(Decimal('-Infinity'), 37)\n        Decimal('NaN')\n        >>> round(Decimal('sNaN123'), 0)\n        Decimal('NaN123')\n\n        "
                        None
                        'Second argument to round should be integral'
                        0
                        '1'
                        'cannot round a NaN'
                        'cannot round an infinity'
                    [Disassembly]
                        0       LOAD_FAST                       1: n
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           1 (is not)
                        6       POP_JUMP_IF_FALSE               25 (to 50)
                        8       LOAD_GLOBAL                     0: isinstance
                        10      LOAD_FAST                       1: n
                        12      LOAD_GLOBAL                     1: int
                        14      CALL_FUNCTION                   2
                        16      POP_JUMP_IF_TRUE                13 (to 26)
                        18      LOAD_GLOBAL                     2: TypeError
                        20      LOAD_CONST                      2: 'Second argument to round should be integral'
                        22      CALL_FUNCTION                   1
                        24      RAISE_VARARGS                   1
                        26      LOAD_GLOBAL                     3: _dec_from_triple
                        28      LOAD_CONST                      3: 0
                        30      LOAD_CONST                      4: '1'
                        32      LOAD_FAST                       1: n
                        34      UNARY_NEGATIVE                  
                        36      CALL_FUNCTION                   3
                        38      STORE_FAST                      2: exp
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     4: quantize
                        44      LOAD_FAST                       2: exp
                        46      CALL_METHOD                     1
                        48      RETURN_VALUE                    
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       5: _is_special
                        54      POP_JUMP_IF_FALSE               40 (to 80)
                        56      LOAD_FAST                       0: self
                        58      LOAD_METHOD                     6: is_nan
                        60      CALL_METHOD                     0
                        62      POP_JUMP_IF_FALSE               36 (to 72)
                        64      LOAD_GLOBAL                     7: ValueError
                        66      LOAD_CONST                      5: 'cannot round a NaN'
                        68      CALL_FUNCTION                   1
                        70      RAISE_VARARGS                   1
                        72      LOAD_GLOBAL                     8: OverflowError
                        74      LOAD_CONST                      6: 'cannot round an infinity'
                        76      CALL_FUNCTION                   1
                        78      RAISE_VARARGS                   1
                        80      LOAD_GLOBAL                     1: int
                        82      LOAD_FAST                       0: self
                        84      LOAD_METHOD                     9: _rescale
                        86      LOAD_CONST                      3: 0
                        88      LOAD_GLOBAL                     10: ROUND_HALF_EVEN
                        90      CALL_METHOD                     2
                        92      CALL_FUNCTION                   1
                        94      RETURN_VALUE                    
                'Decimal.__round__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __floor__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        'is_nan'
                        'ValueError'
                        'OverflowError'
                        'int'
                        '_rescale'
                        'ROUND_FLOOR'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the floor of self, as an integer.\n\n        For a finite Decimal instance self, return the greatest\n        integer n such that n <= self.  If self is infinite or a NaN\n        then a Python exception is raised.\n\n        '
                        'cannot round a NaN'
                        'cannot round an infinity'
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               15 (to 30)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: is_nan
                        10      CALL_METHOD                     0
                        12      POP_JUMP_IF_FALSE               11 (to 22)
                        14      LOAD_GLOBAL                     2: ValueError
                        16      LOAD_CONST                      1: 'cannot round a NaN'
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                        22      LOAD_GLOBAL                     3: OverflowError
                        24      LOAD_CONST                      2: 'cannot round an infinity'
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      LOAD_GLOBAL                     4: int
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     5: _rescale
                        36      LOAD_CONST                      3: 0
                        38      LOAD_GLOBAL                     6: ROUND_FLOOR
                        40      CALL_METHOD                     2
                        42      CALL_FUNCTION                   1
                        44      RETURN_VALUE                    
                'Decimal.__floor__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __ceil__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        'is_nan'
                        'ValueError'
                        'OverflowError'
                        'int'
                        '_rescale'
                        'ROUND_CEILING'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the ceiling of self, as an integer.\n\n        For a finite Decimal instance self, return the least integer n\n        such that n >= self.  If self is infinite or a NaN then a\n        Python exception is raised.\n\n        '
                        'cannot round a NaN'
                        'cannot round an infinity'
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               15 (to 30)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: is_nan
                        10      CALL_METHOD                     0
                        12      POP_JUMP_IF_FALSE               11 (to 22)
                        14      LOAD_GLOBAL                     2: ValueError
                        16      LOAD_CONST                      1: 'cannot round a NaN'
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                        22      LOAD_GLOBAL                     3: OverflowError
                        24      LOAD_CONST                      2: 'cannot round an infinity'
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      LOAD_GLOBAL                     4: int
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     5: _rescale
                        36      LOAD_CONST                      3: 0
                        38      LOAD_GLOBAL                     6: ROUND_CEILING
                        40      CALL_METHOD                     2
                        42      CALL_FUNCTION                   1
                        44      RETURN_VALUE                    
                'Decimal.__ceil__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: fma
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '_is_special'
                        'getcontext'
                        '_exp'
                        '_raise_error'
                        'InvalidOperation'
                        '_SignedInfinity'
                        '_sign'
                        '_dec_from_triple'
                        'str'
                        'int'
                        '_int'
                        '__add__'
                    [Var Names]
                        'self'
                        'other'
                        'third'
                        'context'
                        'product'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Fused multiply-add.\n\n        Returns self*other+third with no rounding of the intermediate\n        product self*other.\n\n        self and other are multiplied together, with no rounding of\n        the result.  The third operand is then added to the result,\n        and a single final rounding is performed.\n        '
                        True
                        (
                            'raiseit'
                        )
                        None
                        'N'
                        'sNaN'
                        'n'
                        'F'
                        'INF * 0 in fma'
                        '0 * INF in fma'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_GLOBAL                     0: _convert_other
                        14      LOAD_FAST                       2: third
                        16      LOAD_CONST                      1: True
                        18      LOAD_CONST                      2: ('raiseit',)
                        20      CALL_FUNCTION_KW                2
                        22      STORE_FAST                      2: third
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       1: _is_special
                        28      POP_JUMP_IF_TRUE                18 (to 36)
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       1: _is_special
                        34      POP_JUMP_IF_FALSE               109 (to 218)
                        36      LOAD_FAST                       3: context
                        38      LOAD_CONST                      3: None
                        40      IS_OP                           0 (is)
                        42      POP_JUMP_IF_FALSE               25 (to 50)
                        44      LOAD_GLOBAL                     2: getcontext
                        46      CALL_FUNCTION                   0
                        48      STORE_FAST                      3: context
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       3: _exp
                        54      LOAD_CONST                      4: 'N'
                        56      COMPARE_OP                      2 (==)
                        58      POP_JUMP_IF_FALSE               37 (to 74)
                        60      LOAD_FAST                       3: context
                        62      LOAD_METHOD                     4: _raise_error
                        64      LOAD_GLOBAL                     5: InvalidOperation
                        66      LOAD_CONST                      5: 'sNaN'
                        68      LOAD_FAST                       0: self
                        70      CALL_METHOD                     3
                        72      RETURN_VALUE                    
                        74      LOAD_FAST                       1: other
                        76      LOAD_ATTR                       3: _exp
                        78      LOAD_CONST                      4: 'N'
                        80      COMPARE_OP                      2 (==)
                        82      POP_JUMP_IF_FALSE               49 (to 98)
                        84      LOAD_FAST                       3: context
                        86      LOAD_METHOD                     4: _raise_error
                        88      LOAD_GLOBAL                     5: InvalidOperation
                        90      LOAD_CONST                      5: 'sNaN'
                        92      LOAD_FAST                       1: other
                        94      CALL_METHOD                     3
                        96      RETURN_VALUE                    
                        98      LOAD_FAST                       0: self
                        100     LOAD_ATTR                       3: _exp
                        102     LOAD_CONST                      6: 'n'
                        104     COMPARE_OP                      2 (==)
                        106     POP_JUMP_IF_FALSE               57 (to 114)
                        108     LOAD_FAST                       0: self
                        110     STORE_FAST                      4: product
                        112     JUMP_FORWARD                    76 (to 266)
                        114     LOAD_FAST                       1: other
                        116     LOAD_ATTR                       3: _exp
                        118     LOAD_CONST                      6: 'n'
                        120     COMPARE_OP                      2 (==)
                        122     POP_JUMP_IF_FALSE               65 (to 130)
                        124     LOAD_FAST                       1: other
                        126     STORE_FAST                      4: product
                        128     JUMP_FORWARD                    68 (to 266)
                        130     LOAD_FAST                       0: self
                        132     LOAD_ATTR                       3: _exp
                        134     LOAD_CONST                      7: 'F'
                        136     COMPARE_OP                      2 (==)
                        138     POP_JUMP_IF_FALSE               87 (to 174)
                        140     LOAD_FAST                       1: other
                        142     POP_JUMP_IF_TRUE                78 (to 156)
                        144     LOAD_FAST                       3: context
                        146     LOAD_METHOD                     4: _raise_error
                        148     LOAD_GLOBAL                     5: InvalidOperation
                        150     LOAD_CONST                      8: 'INF * 0 in fma'
                        152     CALL_METHOD                     2
                        154     RETURN_VALUE                    
                        156     LOAD_GLOBAL                     6: _SignedInfinity
                        158     LOAD_FAST                       0: self
                        160     LOAD_ATTR                       7: _sign
                        162     LOAD_FAST                       1: other
                        164     LOAD_ATTR                       7: _sign
                        166     BINARY_XOR                      
                        168     BINARY_SUBSCR                   
                        170     STORE_FAST                      4: product
                        172     JUMP_FORWARD                    46 (to 266)
                        174     LOAD_FAST                       1: other
                        176     LOAD_ATTR                       3: _exp
                        178     LOAD_CONST                      7: 'F'
                        180     COMPARE_OP                      2 (==)
                        182     POP_JUMP_IF_FALSE               108 (to 216)
                        184     LOAD_FAST                       0: self
                        186     POP_JUMP_IF_TRUE                100 (to 200)
                        188     LOAD_FAST                       3: context
                        190     LOAD_METHOD                     4: _raise_error
                        192     LOAD_GLOBAL                     5: InvalidOperation
                        194     LOAD_CONST                      9: '0 * INF in fma'
                        196     CALL_METHOD                     2
                        198     RETURN_VALUE                    
                        200     LOAD_GLOBAL                     6: _SignedInfinity
                        202     LOAD_FAST                       0: self
                        204     LOAD_ATTR                       7: _sign
                        206     LOAD_FAST                       1: other
                        208     LOAD_ATTR                       7: _sign
                        210     BINARY_XOR                      
                        212     BINARY_SUBSCR                   
                        214     STORE_FAST                      4: product
                        216     JUMP_FORWARD                    24 (to 266)
                        218     LOAD_GLOBAL                     8: _dec_from_triple
                        220     LOAD_FAST                       0: self
                        222     LOAD_ATTR                       7: _sign
                        224     LOAD_FAST                       1: other
                        226     LOAD_ATTR                       7: _sign
                        228     BINARY_XOR                      
                        230     LOAD_GLOBAL                     9: str
                        232     LOAD_GLOBAL                     10: int
                        234     LOAD_FAST                       0: self
                        236     LOAD_ATTR                       11: _int
                        238     CALL_FUNCTION                   1
                        240     LOAD_GLOBAL                     10: int
                        242     LOAD_FAST                       1: other
                        244     LOAD_ATTR                       11: _int
                        246     CALL_FUNCTION                   1
                        248     BINARY_MULTIPLY                 
                        250     CALL_FUNCTION                   1
                        252     LOAD_FAST                       0: self
                        254     LOAD_ATTR                       3: _exp
                        256     LOAD_FAST                       1: other
                        258     LOAD_ATTR                       3: _exp
                        260     BINARY_ADD                      
                        262     CALL_FUNCTION                   3
                        264     STORE_FAST                      4: product
                        266     LOAD_FAST                       4: product
                        268     LOAD_METHOD                     12: __add__
                        270     LOAD_FAST                       2: third
                        272     LOAD_FAST                       3: context
                        274     CALL_METHOD                     2
                        276     RETURN_VALUE                    
                'Decimal.fma'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _power_modulo
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        'getcontext'
                        '_isnan'
                        '_raise_error'
                        'InvalidOperation'
                        '_fix_nan'
                        '_isinteger'
                        'adjusted'
                        'prec'
                        '_iseven'
                        '_sign'
                        'abs'
                        'int'
                        '_WorkRep'
                        'to_integral_value'
                        'pow'
                        'exp'
                        'range'
                        '_dec_from_triple'
                        'str'
                    [Var Names]
                        'self'
                        'other'
                        'modulo'
                        'context'
                        'self_is_nan'
                        'other_is_nan'
                        'modulo_is_nan'
                        'sign'
                        'base'
                        'exponent'
                        'i'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Three argument version of __pow__'
                        None
                        2
                        'sNaN'
                        'pow() 3rd argument not allowed unless all arguments are integers'
                        0
                        'pow() 2nd argument cannot be negative when 3rd argument specified'
                        'pow() 3rd argument cannot be 0'
                        'insufficient precision: pow() 3rd argument must not have more than precision digits'
                        'at least one of pow() 1st argument and 2nd argument must be nonzero; 0**0 is not defined'
                        10
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_GLOBAL                     0: _convert_other
                        22      LOAD_FAST                       2: modulo
                        24      CALL_FUNCTION                   1
                        26      STORE_FAST                      2: modulo
                        28      LOAD_FAST                       2: modulo
                        30      LOAD_GLOBAL                     1: NotImplemented
                        32      IS_OP                           0 (is)
                        34      POP_JUMP_IF_FALSE               20 (to 40)
                        36      LOAD_FAST                       2: modulo
                        38      RETURN_VALUE                    
                        40      LOAD_FAST                       3: context
                        42      LOAD_CONST                      1: None
                        44      IS_OP                           0 (is)
                        46      POP_JUMP_IF_FALSE               27 (to 54)
                        48      LOAD_GLOBAL                     2: getcontext
                        50      CALL_FUNCTION                   0
                        52      STORE_FAST                      3: context
                        54      LOAD_FAST                       0: self
                        56      LOAD_METHOD                     3: _isnan
                        58      CALL_METHOD                     0
                        60      STORE_FAST                      4: self_is_nan
                        62      LOAD_FAST                       1: other
                        64      LOAD_METHOD                     3: _isnan
                        66      CALL_METHOD                     0
                        68      STORE_FAST                      5: other_is_nan
                        70      LOAD_FAST                       2: modulo
                        72      LOAD_METHOD                     3: _isnan
                        74      CALL_METHOD                     0
                        76      STORE_FAST                      6: modulo_is_nan
                        78      LOAD_FAST                       4: self_is_nan
                        80      POP_JUMP_IF_TRUE                45 (to 90)
                        82      LOAD_FAST                       5: other_is_nan
                        84      POP_JUMP_IF_TRUE                45 (to 90)
                        86      LOAD_FAST                       6: modulo_is_nan
                        88      POP_JUMP_IF_FALSE               97 (to 194)
                        90      LOAD_FAST                       4: self_is_nan
                        92      LOAD_CONST                      2: 2
                        94      COMPARE_OP                      2 (==)
                        96      POP_JUMP_IF_FALSE               56 (to 112)
                        98      LOAD_FAST                       3: context
                        100     LOAD_METHOD                     4: _raise_error
                        102     LOAD_GLOBAL                     5: InvalidOperation
                        104     LOAD_CONST                      3: 'sNaN'
                        106     LOAD_FAST                       0: self
                        108     CALL_METHOD                     3
                        110     RETURN_VALUE                    
                        112     LOAD_FAST                       5: other_is_nan
                        114     LOAD_CONST                      2: 2
                        116     COMPARE_OP                      2 (==)
                        118     POP_JUMP_IF_FALSE               67 (to 134)
                        120     LOAD_FAST                       3: context
                        122     LOAD_METHOD                     4: _raise_error
                        124     LOAD_GLOBAL                     5: InvalidOperation
                        126     LOAD_CONST                      3: 'sNaN'
                        128     LOAD_FAST                       1: other
                        130     CALL_METHOD                     3
                        132     RETURN_VALUE                    
                        134     LOAD_FAST                       6: modulo_is_nan
                        136     LOAD_CONST                      2: 2
                        138     COMPARE_OP                      2 (==)
                        140     POP_JUMP_IF_FALSE               78 (to 156)
                        142     LOAD_FAST                       3: context
                        144     LOAD_METHOD                     4: _raise_error
                        146     LOAD_GLOBAL                     5: InvalidOperation
                        148     LOAD_CONST                      3: 'sNaN'
                        150     LOAD_FAST                       2: modulo
                        152     CALL_METHOD                     3
                        154     RETURN_VALUE                    
                        156     LOAD_FAST                       4: self_is_nan
                        158     POP_JUMP_IF_FALSE               85 (to 170)
                        160     LOAD_FAST                       0: self
                        162     LOAD_METHOD                     6: _fix_nan
                        164     LOAD_FAST                       3: context
                        166     CALL_METHOD                     1
                        168     RETURN_VALUE                    
                        170     LOAD_FAST                       5: other_is_nan
                        172     POP_JUMP_IF_FALSE               92 (to 184)
                        174     LOAD_FAST                       1: other
                        176     LOAD_METHOD                     6: _fix_nan
                        178     LOAD_FAST                       3: context
                        180     CALL_METHOD                     1
                        182     RETURN_VALUE                    
                        184     LOAD_FAST                       2: modulo
                        186     LOAD_METHOD                     6: _fix_nan
                        188     LOAD_FAST                       3: context
                        190     CALL_METHOD                     1
                        192     RETURN_VALUE                    
                        194     LOAD_FAST                       0: self
                        196     LOAD_METHOD                     7: _isinteger
                        198     CALL_METHOD                     0
                        200     POP_JUMP_IF_FALSE               109 (to 218)
                        202     LOAD_FAST                       1: other
                        204     LOAD_METHOD                     7: _isinteger
                        206     CALL_METHOD                     0
                        208     POP_JUMP_IF_FALSE               109 (to 218)
                        210     LOAD_FAST                       2: modulo
                        212     LOAD_METHOD                     7: _isinteger
                        214     CALL_METHOD                     0
                        216     POP_JUMP_IF_TRUE                115 (to 230)
                        218     LOAD_FAST                       3: context
                        220     LOAD_METHOD                     4: _raise_error
                        222     LOAD_GLOBAL                     5: InvalidOperation
                        224     LOAD_CONST                      4: 'pow() 3rd argument not allowed unless all arguments are integers'
                        226     CALL_METHOD                     2
                        228     RETURN_VALUE                    
                        230     LOAD_FAST                       1: other
                        232     LOAD_CONST                      5: 0
                        234     COMPARE_OP                      0 (<)
                        236     POP_JUMP_IF_FALSE               125 (to 250)
                        238     LOAD_FAST                       3: context
                        240     LOAD_METHOD                     4: _raise_error
                        242     LOAD_GLOBAL                     5: InvalidOperation
                        244     LOAD_CONST                      6: 'pow() 2nd argument cannot be negative when 3rd argument specified'
                        246     CALL_METHOD                     2
                        248     RETURN_VALUE                    
                        250     LOAD_FAST                       2: modulo
                        252     POP_JUMP_IF_TRUE                133 (to 266)
                        254     LOAD_FAST                       3: context
                        256     LOAD_METHOD                     4: _raise_error
                        258     LOAD_GLOBAL                     5: InvalidOperation
                        260     LOAD_CONST                      7: 'pow() 3rd argument cannot be 0'
                        262     CALL_METHOD                     2
                        264     RETURN_VALUE                    
                        266     LOAD_FAST                       2: modulo
                        268     LOAD_METHOD                     8: adjusted
                        270     CALL_METHOD                     0
                        272     LOAD_FAST                       3: context
                        274     LOAD_ATTR                       9: prec
                        276     COMPARE_OP                      5 (>=)
                        278     POP_JUMP_IF_FALSE               146 (to 292)
                        280     LOAD_FAST                       3: context
                        282     LOAD_METHOD                     4: _raise_error
                        284     LOAD_GLOBAL                     5: InvalidOperation
                        286     LOAD_CONST                      8: 'insufficient precision: pow() 3rd argument must not have more than precision digits'
                        288     CALL_METHOD                     2
                        290     RETURN_VALUE                    
                        292     LOAD_FAST                       1: other
                        294     POP_JUMP_IF_TRUE                156 (to 312)
                        296     LOAD_FAST                       0: self
                        298     POP_JUMP_IF_TRUE                156 (to 312)
                        300     LOAD_FAST                       3: context
                        302     LOAD_METHOD                     4: _raise_error
                        304     LOAD_GLOBAL                     5: InvalidOperation
                        306     LOAD_CONST                      9: 'at least one of pow() 1st argument and 2nd argument must be nonzero; 0**0 is not defined'
                        308     CALL_METHOD                     2
                        310     RETURN_VALUE                    
                        312     LOAD_FAST                       1: other
                        314     LOAD_METHOD                     10: _iseven
                        316     CALL_METHOD                     0
                        318     POP_JUMP_IF_FALSE               163 (to 326)
                        320     LOAD_CONST                      5: 0
                        322     STORE_FAST                      7: sign
                        324     JUMP_FORWARD                    3 (to 332)
                        326     LOAD_FAST                       0: self
                        328     LOAD_ATTR                       11: _sign
                        330     STORE_FAST                      7: sign
                        332     LOAD_GLOBAL                     12: abs
                        334     LOAD_GLOBAL                     13: int
                        336     LOAD_FAST                       2: modulo
                        338     CALL_FUNCTION                   1
                        340     CALL_FUNCTION                   1
                        342     STORE_FAST                      2: modulo
                        344     LOAD_GLOBAL                     14: _WorkRep
                        346     LOAD_FAST                       0: self
                        348     LOAD_METHOD                     15: to_integral_value
                        350     CALL_METHOD                     0
                        352     CALL_FUNCTION                   1
                        354     STORE_FAST                      8: base
                        356     LOAD_GLOBAL                     14: _WorkRep
                        358     LOAD_FAST                       1: other
                        360     LOAD_METHOD                     15: to_integral_value
                        362     CALL_METHOD                     0
                        364     CALL_FUNCTION                   1
                        366     STORE_FAST                      9: exponent
                        368     LOAD_FAST                       8: base
                        370     LOAD_ATTR                       13: int
                        372     LOAD_FAST                       2: modulo
                        374     BINARY_MODULO                   
                        376     LOAD_GLOBAL                     16: pow
                        378     LOAD_CONST                      10: 10
                        380     LOAD_FAST                       8: base
                        382     LOAD_ATTR                       17: exp
                        384     LOAD_FAST                       2: modulo
                        386     CALL_FUNCTION                   3
                        388     BINARY_MULTIPLY                 
                        390     LOAD_FAST                       2: modulo
                        392     BINARY_MODULO                   
                        394     STORE_FAST                      8: base
                        396     LOAD_GLOBAL                     18: range
                        398     LOAD_FAST                       9: exponent
                        400     LOAD_ATTR                       17: exp
                        402     CALL_FUNCTION                   1
                        404     GET_ITER                        
                        406     FOR_ITER                        8 (to 424)
                        408     STORE_FAST                      10: i
                        410     LOAD_GLOBAL                     16: pow
                        412     LOAD_FAST                       8: base
                        414     LOAD_CONST                      10: 10
                        416     LOAD_FAST                       2: modulo
                        418     CALL_FUNCTION                   3
                        420     STORE_FAST                      8: base
                        422     JUMP_ABSOLUTE                   203 (to 406)
                        424     LOAD_GLOBAL                     16: pow
                        426     LOAD_FAST                       8: base
                        428     LOAD_FAST                       9: exponent
                        430     LOAD_ATTR                       13: int
                        432     LOAD_FAST                       2: modulo
                        434     CALL_FUNCTION                   3
                        436     STORE_FAST                      8: base
                        438     LOAD_GLOBAL                     19: _dec_from_triple
                        440     LOAD_FAST                       7: sign
                        442     LOAD_GLOBAL                     20: str
                        444     LOAD_FAST                       8: base
                        446     CALL_FUNCTION                   1
                        448     LOAD_CONST                      5: 0
                        450     CALL_FUNCTION                   3
                        452     RETURN_VALUE                    
                'Decimal._power_modulo'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _power_exact
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 24
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_WorkRep'
                        'int'
                        'exp'
                        'sign'
                        '_isinteger'
                        '_sign'
                        '_exp'
                        'min'
                        '_dec_from_triple'
                        '_nbits'
                        'len'
                        'str'
                        '_decimal_lshift_exact'
                        'divmod'
                        'abs'
                        '_log10_lb'
                    [Var Names]
                        'self'
                        'other'
                        'p'
                        'x'
                        'xc'
                        'xe'
                        'y'
                        'yc'
                        'ye'
                        'exponent'
                        'ideal_exponent'
                        'zeros'
                        'last_digit'
                        'e'
                        'emax'
                        'remainder'
                        'm'
                        'n'
                        'xc_bits'
                        'rem'
                        'a'
                        'q'
                        'r'
                        'str_xc'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Attempt to compute self**other exactly.\n\n        Given Decimals self and other and an integer p, attempt to\n        compute an exact result for the power self**other, with p\n        digits of precision.  Return None if self**other is not\n        exactly representable in p digits.\n\n        Assumes that elimination of special cases has already been\n        performed: self and other must both be nonspecial; self must\n        be positive and not numerically equal to 1; other must be\n        nonzero.  For efficiency, other._exp should not be too large,\n        so that 10**abs(other._exp) is a feasible calculation.'
                        10
                        0
                        1
                        None
                        '1'
                        '0'
                        (
                            2
                            4
                            6
                            8
                        )
                        93
                        65
                        5
                        28
                        3
                        2
                        True
                        100
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _WorkRep
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      3: x
                        8       LOAD_FAST                       3: x
                        10      LOAD_ATTR                       1: int
                        12      LOAD_FAST                       3: x
                        14      LOAD_ATTR                       2: exp
                        16      ROT_TWO                         
                        18      STORE_FAST                      4: xc
                        20      STORE_FAST                      5: xe
                        22      LOAD_FAST                       4: xc
                        24      LOAD_CONST                      1: 10
                        26      BINARY_MODULO                   
                        28      LOAD_CONST                      2: 0
                        30      COMPARE_OP                      2 (==)
                        32      POP_JUMP_IF_FALSE               31 (to 62)
                        34      LOAD_FAST                       4: xc
                        36      LOAD_CONST                      1: 10
                        38      INPLACE_FLOOR_DIVIDE            
                        40      STORE_FAST                      4: xc
                        42      LOAD_FAST                       5: xe
                        44      LOAD_CONST                      3: 1
                        46      INPLACE_ADD                     
                        48      STORE_FAST                      5: xe
                        50      LOAD_FAST                       4: xc
                        52      LOAD_CONST                      1: 10
                        54      BINARY_MODULO                   
                        56      LOAD_CONST                      2: 0
                        58      COMPARE_OP                      2 (==)
                        60      POP_JUMP_IF_TRUE                17 (to 34)
                        62      LOAD_GLOBAL                     0: _WorkRep
                        64      LOAD_FAST                       1: other
                        66      CALL_FUNCTION                   1
                        68      STORE_FAST                      6: y
                        70      LOAD_FAST                       6: y
                        72      LOAD_ATTR                       1: int
                        74      LOAD_FAST                       6: y
                        76      LOAD_ATTR                       2: exp
                        78      ROT_TWO                         
                        80      STORE_FAST                      7: yc
                        82      STORE_FAST                      8: ye
                        84      LOAD_FAST                       7: yc
                        86      LOAD_CONST                      1: 10
                        88      BINARY_MODULO                   
                        90      LOAD_CONST                      2: 0
                        92      COMPARE_OP                      2 (==)
                        94      POP_JUMP_IF_FALSE               62 (to 124)
                        96      LOAD_FAST                       7: yc
                        98      LOAD_CONST                      1: 10
                        100     INPLACE_FLOOR_DIVIDE            
                        102     STORE_FAST                      7: yc
                        104     LOAD_FAST                       8: ye
                        106     LOAD_CONST                      3: 1
                        108     INPLACE_ADD                     
                        110     STORE_FAST                      8: ye
                        112     LOAD_FAST                       7: yc
                        114     LOAD_CONST                      1: 10
                        116     BINARY_MODULO                   
                        118     LOAD_CONST                      2: 0
                        120     COMPARE_OP                      2 (==)
                        122     POP_JUMP_IF_TRUE                48 (to 96)
                        124     LOAD_FAST                       4: xc
                        126     LOAD_CONST                      3: 1
                        128     COMPARE_OP                      2 (==)
                        130     POP_JUMP_IF_FALSE               150 (to 300)
                        132     LOAD_FAST                       5: xe
                        134     LOAD_FAST                       7: yc
                        136     INPLACE_MULTIPLY                
                        138     STORE_FAST                      5: xe
                        140     LOAD_FAST                       5: xe
                        142     LOAD_CONST                      1: 10
                        144     BINARY_MODULO                   
                        146     LOAD_CONST                      2: 0
                        148     COMPARE_OP                      2 (==)
                        150     POP_JUMP_IF_FALSE               90 (to 180)
                        152     LOAD_FAST                       5: xe
                        154     LOAD_CONST                      1: 10
                        156     INPLACE_FLOOR_DIVIDE            
                        158     STORE_FAST                      5: xe
                        160     LOAD_FAST                       8: ye
                        162     LOAD_CONST                      3: 1
                        164     INPLACE_ADD                     
                        166     STORE_FAST                      8: ye
                        168     LOAD_FAST                       5: xe
                        170     LOAD_CONST                      1: 10
                        172     BINARY_MODULO                   
                        174     LOAD_CONST                      2: 0
                        176     COMPARE_OP                      2 (==)
                        178     POP_JUMP_IF_TRUE                76 (to 152)
                        180     LOAD_FAST                       8: ye
                        182     LOAD_CONST                      2: 0
                        184     COMPARE_OP                      0 (<)
                        186     POP_JUMP_IF_FALSE               96 (to 192)
                        188     LOAD_CONST                      4: None
                        190     RETURN_VALUE                    
                        192     LOAD_FAST                       5: xe
                        194     LOAD_CONST                      1: 10
                        196     LOAD_FAST                       8: ye
                        198     BINARY_POWER                    
                        200     BINARY_MULTIPLY                 
                        202     STORE_FAST                      9: exponent
                        204     LOAD_FAST                       6: y
                        206     LOAD_ATTR                       3: sign
                        208     LOAD_CONST                      3: 1
                        210     COMPARE_OP                      2 (==)
                        212     POP_JUMP_IF_FALSE               110 (to 220)
                        214     LOAD_FAST                       9: exponent
                        216     UNARY_NEGATIVE                  
                        218     STORE_FAST                      9: exponent
                        220     LOAD_FAST                       1: other
                        222     LOAD_METHOD                     4: _isinteger
                        224     CALL_METHOD                     0
                        226     POP_JUMP_IF_FALSE               136 (to 272)
                        228     LOAD_FAST                       1: other
                        230     LOAD_ATTR                       5: _sign
                        232     LOAD_CONST                      2: 0
                        234     COMPARE_OP                      2 (==)
                        236     POP_JUMP_IF_FALSE               136 (to 272)
                        238     LOAD_FAST                       0: self
                        240     LOAD_ATTR                       6: _exp
                        242     LOAD_GLOBAL                     1: int
                        244     LOAD_FAST                       1: other
                        246     CALL_FUNCTION                   1
                        248     BINARY_MULTIPLY                 
                        250     STORE_FAST                      10: ideal_exponent
                        252     LOAD_GLOBAL                     7: min
                        254     LOAD_FAST                       9: exponent
                        256     LOAD_FAST                       10: ideal_exponent
                        258     BINARY_SUBTRACT                 
                        260     LOAD_FAST                       2: p
                        262     LOAD_CONST                      3: 1
                        264     BINARY_SUBTRACT                 
                        266     CALL_FUNCTION                   2
                        268     STORE_FAST                      11: zeros
                        270     JUMP_FORWARD                    2 (to 276)
                        272     LOAD_CONST                      2: 0
                        274     STORE_FAST                      11: zeros
                        276     LOAD_GLOBAL                     8: _dec_from_triple
                        278     LOAD_CONST                      2: 0
                        280     LOAD_CONST                      5: '1'
                        282     LOAD_CONST                      6: '0'
                        284     LOAD_FAST                       11: zeros
                        286     BINARY_MULTIPLY                 
                        288     BINARY_ADD                      
                        290     LOAD_FAST                       9: exponent
                        292     LOAD_FAST                       11: zeros
                        294     BINARY_SUBTRACT                 
                        296     CALL_FUNCTION                   3
                        298     RETURN_VALUE                    
                        300     LOAD_FAST                       6: y
                        302     LOAD_ATTR                       3: sign
                        304     LOAD_CONST                      3: 1
                        306     COMPARE_OP                      2 (==)
                        308     POP_JUMP_IF_FALSE               358 (to 716)
                        312     LOAD_FAST                       4: xc
                        314     LOAD_CONST                      1: 10
                        316     BINARY_MODULO                   
                        318     STORE_FAST                      12: last_digit
                        320     LOAD_FAST                       12: last_digit
                        322     LOAD_CONST                      7: (2, 4, 6, 8)
                        324     CONTAINS_OP                     0 (in)
                        326     POP_JUMP_IF_FALSE               230 (to 460)
                        328     LOAD_FAST                       4: xc
                        330     LOAD_FAST                       4: xc
                        332     UNARY_NEGATIVE                  
                        334     BINARY_AND                      
                        336     LOAD_FAST                       4: xc
                        338     COMPARE_OP                      3 (!=)
                        340     POP_JUMP_IF_FALSE               173 (to 346)
                        342     LOAD_CONST                      4: None
                        344     RETURN_VALUE                    
                        346     LOAD_GLOBAL                     9: _nbits
                        348     LOAD_FAST                       4: xc
                        350     CALL_FUNCTION                   1
                        352     LOAD_CONST                      3: 1
                        354     BINARY_SUBTRACT                 
                        356     STORE_FAST                      13: e
                        358     LOAD_FAST                       2: p
                        360     LOAD_CONST                      8: 93
                        362     BINARY_MULTIPLY                 
                        364     LOAD_CONST                      9: 65
                        366     BINARY_FLOOR_DIVIDE             
                        368     STORE_FAST                      14: emax
                        370     LOAD_FAST                       8: ye
                        372     LOAD_GLOBAL                     10: len
                        374     LOAD_GLOBAL                     11: str
                        376     LOAD_FAST                       14: emax
                        378     CALL_FUNCTION                   1
                        380     CALL_FUNCTION                   1
                        382     COMPARE_OP                      5 (>=)
                        384     POP_JUMP_IF_FALSE               195 (to 390)
                        386     LOAD_CONST                      4: None
                        388     RETURN_VALUE                    
                        390     LOAD_GLOBAL                     12: _decimal_lshift_exact
                        392     LOAD_FAST                       13: e
                        394     LOAD_FAST                       7: yc
                        396     BINARY_MULTIPLY                 
                        398     LOAD_FAST                       8: ye
                        400     CALL_FUNCTION                   2
                        402     STORE_FAST                      13: e
                        404     LOAD_GLOBAL                     12: _decimal_lshift_exact
                        406     LOAD_FAST                       5: xe
                        408     LOAD_FAST                       7: yc
                        410     BINARY_MULTIPLY                 
                        412     LOAD_FAST                       8: ye
                        414     CALL_FUNCTION                   2
                        416     STORE_FAST                      5: xe
                        418     LOAD_FAST                       13: e
                        420     LOAD_CONST                      4: None
                        422     IS_OP                           0 (is)
                        424     POP_JUMP_IF_TRUE                217 (to 434)
                        426     LOAD_FAST                       5: xe
                        428     LOAD_CONST                      4: None
                        430     IS_OP                           0 (is)
                        432     POP_JUMP_IF_FALSE               219 (to 438)
                        434     LOAD_CONST                      4: None
                        436     RETURN_VALUE                    
                        438     LOAD_FAST                       13: e
                        440     LOAD_FAST                       14: emax
                        442     COMPARE_OP                      4 (>)
                        444     POP_JUMP_IF_FALSE               225 (to 450)
                        446     LOAD_CONST                      4: None
                        448     RETURN_VALUE                    
                        450     LOAD_CONST                      10: 5
                        452     LOAD_FAST                       13: e
                        454     BINARY_POWER                    
                        456     STORE_FAST                      4: xc
                        458     JUMP_FORWARD                    106 (to 672)
                        460     LOAD_FAST                       12: last_digit
                        462     LOAD_CONST                      10: 5
                        464     COMPARE_OP                      2 (==)
                        466     POP_JUMP_IF_FALSE               334 (to 668)
                        470     LOAD_GLOBAL                     9: _nbits
                        472     LOAD_FAST                       4: xc
                        474     CALL_FUNCTION                   1
                        476     LOAD_CONST                      11: 28
                        478     BINARY_MULTIPLY                 
                        480     LOAD_CONST                      9: 65
                        482     BINARY_FLOOR_DIVIDE             
                        484     STORE_FAST                      13: e
                        486     LOAD_GLOBAL                     13: divmod
                        488     LOAD_CONST                      10: 5
                        490     LOAD_FAST                       13: e
                        492     BINARY_POWER                    
                        494     LOAD_FAST                       4: xc
                        496     CALL_FUNCTION                   2
                        498     UNPACK_SEQUENCE                 2
                        500     STORE_FAST                      4: xc
                        502     STORE_FAST                      15: remainder
                        504     LOAD_FAST                       15: remainder
                        506     POP_JUMP_IF_FALSE               257 (to 514)
                        510     LOAD_CONST                      4: None
                        512     RETURN_VALUE                    
                        514     LOAD_FAST                       4: xc
                        516     LOAD_CONST                      10: 5
                        518     BINARY_MODULO                   
                        520     LOAD_CONST                      2: 0
                        522     COMPARE_OP                      2 (==)
                        524     POP_JUMP_IF_FALSE               279 (to 558)
                        528     LOAD_FAST                       4: xc
                        530     LOAD_CONST                      10: 5
                        532     INPLACE_FLOOR_DIVIDE            
                        534     STORE_FAST                      4: xc
                        536     LOAD_FAST                       13: e
                        538     LOAD_CONST                      3: 1
                        540     INPLACE_SUBTRACT                
                        542     STORE_FAST                      13: e
                        544     LOAD_FAST                       4: xc
                        546     LOAD_CONST                      10: 5
                        548     BINARY_MODULO                   
                        550     LOAD_CONST                      2: 0
                        552     COMPARE_OP                      2 (==)
                        554     POP_JUMP_IF_TRUE                264 (to 528)
                        558     LOAD_FAST                       2: p
                        560     LOAD_CONST                      1: 10
                        562     BINARY_MULTIPLY                 
                        564     LOAD_CONST                      12: 3
                        566     BINARY_FLOOR_DIVIDE             
                        568     STORE_FAST                      14: emax
                        570     LOAD_FAST                       8: ye
                        572     LOAD_GLOBAL                     10: len
                        574     LOAD_GLOBAL                     11: str
                        576     LOAD_FAST                       14: emax
                        578     CALL_FUNCTION                   1
                        580     CALL_FUNCTION                   1
                        582     COMPARE_OP                      5 (>=)
                        584     POP_JUMP_IF_FALSE               296 (to 592)
                        588     LOAD_CONST                      4: None
                        590     RETURN_VALUE                    
                        592     LOAD_GLOBAL                     12: _decimal_lshift_exact
                        594     LOAD_FAST                       13: e
                        596     LOAD_FAST                       7: yc
                        598     BINARY_MULTIPLY                 
                        600     LOAD_FAST                       8: ye
                        602     CALL_FUNCTION                   2
                        604     STORE_FAST                      13: e
                        606     LOAD_GLOBAL                     12: _decimal_lshift_exact
                        608     LOAD_FAST                       5: xe
                        610     LOAD_FAST                       7: yc
                        612     BINARY_MULTIPLY                 
                        614     LOAD_FAST                       8: ye
                        616     CALL_FUNCTION                   2
                        618     STORE_FAST                      5: xe
                        620     LOAD_FAST                       13: e
                        622     LOAD_CONST                      4: None
                        624     IS_OP                           0 (is)
                        626     POP_JUMP_IF_TRUE                320 (to 640)
                        630     LOAD_FAST                       5: xe
                        632     LOAD_CONST                      4: None
                        634     IS_OP                           0 (is)
                        636     POP_JUMP_IF_FALSE               322 (to 644)
                        640     LOAD_CONST                      4: None
                        642     RETURN_VALUE                    
                        644     LOAD_FAST                       13: e
                        646     LOAD_FAST                       14: emax
                        648     COMPARE_OP                      4 (>)
                        650     POP_JUMP_IF_FALSE               329 (to 658)
                        654     LOAD_CONST                      4: None
                        656     RETURN_VALUE                    
                        658     LOAD_CONST                      13: 2
                        660     LOAD_FAST                       13: e
                        662     BINARY_POWER                    
                        664     STORE_FAST                      4: xc
                        666     JUMP_FORWARD                    2 (to 672)
                        668     LOAD_CONST                      4: None
                        670     RETURN_VALUE                    
                        672     LOAD_FAST                       4: xc
                        674     LOAD_CONST                      1: 10
                        676     LOAD_FAST                       2: p
                        678     BINARY_POWER                    
                        680     COMPARE_OP                      5 (>=)
                        682     POP_JUMP_IF_FALSE               345 (to 690)
                        686     LOAD_CONST                      4: None
                        688     RETURN_VALUE                    
                        690     LOAD_FAST                       13: e
                        692     UNARY_NEGATIVE                  
                        694     LOAD_FAST                       5: xe
                        696     BINARY_SUBTRACT                 
                        698     STORE_FAST                      5: xe
                        700     LOAD_GLOBAL                     8: _dec_from_triple
                        702     LOAD_CONST                      2: 0
                        704     LOAD_GLOBAL                     11: str
                        706     LOAD_FAST                       4: xc
                        708     CALL_FUNCTION                   1
                        710     LOAD_FAST                       5: xe
                        712     CALL_FUNCTION                   3
                        714     RETURN_VALUE                    
                        716     LOAD_FAST                       8: ye
                        718     LOAD_CONST                      2: 0
                        720     COMPARE_OP                      5 (>=)
                        722     POP_JUMP_IF_FALSE               373 (to 746)
                        726     LOAD_FAST                       7: yc
                        728     LOAD_CONST                      1: 10
                        730     LOAD_FAST                       8: ye
                        732     BINARY_POWER                    
                        734     BINARY_MULTIPLY                 
                        736     LOAD_CONST                      3: 1
                        738     ROT_TWO                         
                        740     STORE_FAST                      16: m
                        742     STORE_FAST                      17: n
                        744     JUMP_FORWARD                    140 (to 1026)
                        746     LOAD_FAST                       5: xe
                        748     LOAD_CONST                      2: 0
                        750     COMPARE_OP                      3 (!=)
                        752     POP_JUMP_IF_FALSE               394 (to 788)
                        756     LOAD_GLOBAL                     10: len
                        758     LOAD_GLOBAL                     11: str
                        760     LOAD_GLOBAL                     14: abs
                        762     LOAD_FAST                       7: yc
                        764     LOAD_FAST                       5: xe
                        766     BINARY_MULTIPLY                 
                        768     CALL_FUNCTION                   1
                        770     CALL_FUNCTION                   1
                        772     CALL_FUNCTION                   1
                        774     LOAD_FAST                       8: ye
                        776     UNARY_NEGATIVE                  
                        778     COMPARE_OP                      1 (<=)
                        780     POP_JUMP_IF_FALSE               394 (to 788)
                        784     LOAD_CONST                      4: None
                        786     RETURN_VALUE                    
                        788     LOAD_GLOBAL                     9: _nbits
                        790     LOAD_FAST                       4: xc
                        792     CALL_FUNCTION                   1
                        794     STORE_FAST                      18: xc_bits
                        796     LOAD_FAST                       4: xc
                        798     LOAD_CONST                      3: 1
                        800     COMPARE_OP                      3 (!=)
                        802     POP_JUMP_IF_FALSE               419 (to 838)
                        806     LOAD_GLOBAL                     10: len
                        808     LOAD_GLOBAL                     11: str
                        810     LOAD_GLOBAL                     14: abs
                        812     LOAD_FAST                       7: yc
                        814     CALL_FUNCTION                   1
                        816     LOAD_FAST                       18: xc_bits
                        818     BINARY_MULTIPLY                 
                        820     CALL_FUNCTION                   1
                        822     CALL_FUNCTION                   1
                        824     LOAD_FAST                       8: ye
                        826     UNARY_NEGATIVE                  
                        828     COMPARE_OP                      1 (<=)
                        830     POP_JUMP_IF_FALSE               419 (to 838)
                        834     LOAD_CONST                      4: None
                        836     RETURN_VALUE                    
                        838     LOAD_FAST                       7: yc
                        840     LOAD_CONST                      1: 10
                        842     LOAD_FAST                       8: ye
                        844     UNARY_NEGATIVE                  
                        846     BINARY_POWER                    
                        848     ROT_TWO                         
                        850     STORE_FAST                      16: m
                        852     STORE_FAST                      17: n
                        854     LOAD_FAST                       16: m
                        856     LOAD_CONST                      13: 2
                        858     BINARY_MODULO                   
                        860     LOAD_FAST                       17: n
                        862     LOAD_CONST                      13: 2
                        864     BINARY_MODULO                   
                        866     DUP_TOP                         
                        868     ROT_THREE                       
                        870     COMPARE_OP                      2 (==)
                        872     POP_JUMP_IF_FALSE               443 (to 886)
                        876     LOAD_CONST                      2: 0
                        878     COMPARE_OP                      2 (==)
                        880     POP_JUMP_IF_FALSE               470 (to 940)
                        884     JUMP_FORWARD                    2 (to 890)
                        886     POP_TOP                         
                        888     JUMP_FORWARD                    25 (to 940)
                        890     LOAD_FAST                       16: m
                        892     LOAD_CONST                      13: 2
                        894     INPLACE_FLOOR_DIVIDE            
                        896     STORE_FAST                      16: m
                        898     LOAD_FAST                       17: n
                        900     LOAD_CONST                      13: 2
                        902     INPLACE_FLOOR_DIVIDE            
                        904     STORE_FAST                      17: n
                        906     LOAD_FAST                       16: m
                        908     LOAD_CONST                      13: 2
                        910     BINARY_MODULO                   
                        912     LOAD_FAST                       17: n
                        914     LOAD_CONST                      13: 2
                        916     BINARY_MODULO                   
                        918     DUP_TOP                         
                        920     ROT_THREE                       
                        922     COMPARE_OP                      2 (==)
                        924     POP_JUMP_IF_FALSE               469 (to 938)
                        928     LOAD_CONST                      2: 0
                        930     COMPARE_OP                      2 (==)
                        932     POP_JUMP_IF_TRUE                445 (to 890)
                        936     JUMP_FORWARD                    1 (to 940)
                        938     POP_TOP                         
                        940     LOAD_FAST                       16: m
                        942     LOAD_CONST                      10: 5
                        944     BINARY_MODULO                   
                        946     LOAD_FAST                       17: n
                        948     LOAD_CONST                      10: 5
                        950     BINARY_MODULO                   
                        952     DUP_TOP                         
                        954     ROT_THREE                       
                        956     COMPARE_OP                      2 (==)
                        958     POP_JUMP_IF_FALSE               486 (to 972)
                        962     LOAD_CONST                      2: 0
                        964     COMPARE_OP                      2 (==)
                        966     POP_JUMP_IF_FALSE               513 (to 1026)
                        970     JUMP_FORWARD                    2 (to 976)
                        972     POP_TOP                         
                        974     JUMP_FORWARD                    25 (to 1026)
                        976     LOAD_FAST                       16: m
                        978     LOAD_CONST                      10: 5
                        980     INPLACE_FLOOR_DIVIDE            
                        982     STORE_FAST                      16: m
                        984     LOAD_FAST                       17: n
                        986     LOAD_CONST                      10: 5
                        988     INPLACE_FLOOR_DIVIDE            
                        990     STORE_FAST                      17: n
                        992     LOAD_FAST                       16: m
                        994     LOAD_CONST                      10: 5
                        996     BINARY_MODULO                   
                        998     LOAD_FAST                       17: n
                        1000    LOAD_CONST                      10: 5
                        1002    BINARY_MODULO                   
                        1004    DUP_TOP                         
                        1006    ROT_THREE                       
                        1008    COMPARE_OP                      2 (==)
                        1010    POP_JUMP_IF_FALSE               512 (to 1024)
                        1014    LOAD_CONST                      2: 0
                        1016    COMPARE_OP                      2 (==)
                        1018    POP_JUMP_IF_TRUE                488 (to 976)
                        1022    JUMP_FORWARD                    1 (to 1026)
                        1024    POP_TOP                         
                        1026    LOAD_FAST                       17: n
                        1028    LOAD_CONST                      3: 1
                        1030    COMPARE_OP                      4 (>)
                        1032    POP_JUMP_IF_FALSE               598 (to 1196)
                        1036    LOAD_FAST                       4: xc
                        1038    LOAD_CONST                      3: 1
                        1040    COMPARE_OP                      3 (!=)
                        1042    POP_JUMP_IF_FALSE               530 (to 1060)
                        1046    LOAD_FAST                       18: xc_bits
                        1048    LOAD_FAST                       17: n
                        1050    COMPARE_OP                      1 (<=)
                        1052    POP_JUMP_IF_FALSE               530 (to 1060)
                        1056    LOAD_CONST                      4: None
                        1058    RETURN_VALUE                    
                        1060    LOAD_GLOBAL                     13: divmod
                        1062    LOAD_FAST                       5: xe
                        1064    LOAD_FAST                       17: n
                        1066    CALL_FUNCTION                   2
                        1068    UNPACK_SEQUENCE                 2
                        1070    STORE_FAST                      5: xe
                        1072    STORE_FAST                      19: rem
                        1074    LOAD_FAST                       19: rem
                        1076    LOAD_CONST                      2: 0
                        1078    COMPARE_OP                      3 (!=)
                        1080    POP_JUMP_IF_FALSE               544 (to 1088)
                        1084    LOAD_CONST                      4: None
                        1086    RETURN_VALUE                    
                        1088    LOAD_CONST                      3: 1
                        1090    LOAD_GLOBAL                     9: _nbits
                        1092    LOAD_FAST                       4: xc
                        1094    CALL_FUNCTION                   1
                        1096    UNARY_NEGATIVE                  
                        1098    LOAD_FAST                       17: n
                        1100    BINARY_FLOOR_DIVIDE             
                        1102    UNARY_NEGATIVE                  
                        1104    BINARY_LSHIFT                   
                        1106    STORE_FAST                      20: a
                        1108    NOP                             
                        1110    LOAD_GLOBAL                     13: divmod
                        1112    LOAD_FAST                       4: xc
                        1114    LOAD_FAST                       20: a
                        1116    LOAD_FAST                       17: n
                        1118    LOAD_CONST                      3: 1
                        1120    BINARY_SUBTRACT                 
                        1122    BINARY_POWER                    
                        1124    CALL_FUNCTION                   2
                        1126    UNPACK_SEQUENCE                 2
                        1128    STORE_FAST                      21: q
                        1130    STORE_FAST                      22: r
                        1132    LOAD_FAST                       20: a
                        1134    LOAD_FAST                       21: q
                        1136    COMPARE_OP                      1 (<=)
                        1138    POP_JUMP_IF_FALSE               572 (to 1144)
                        1142    JUMP_FORWARD                    12 (to 1168)
                        1144    LOAD_FAST                       20: a
                        1146    LOAD_FAST                       17: n
                        1148    LOAD_CONST                      3: 1
                        1150    BINARY_SUBTRACT                 
                        1152    BINARY_MULTIPLY                 
                        1154    LOAD_FAST                       21: q
                        1156    BINARY_ADD                      
                        1158    LOAD_FAST                       17: n
                        1160    BINARY_FLOOR_DIVIDE             
                        1162    STORE_FAST                      20: a
                        1164    JUMP_ABSOLUTE                   555 (to 1110)
                        1168    LOAD_FAST                       20: a
                        1170    LOAD_FAST                       21: q
                        1172    COMPARE_OP                      2 (==)
                        1174    POP_JUMP_IF_FALSE               594 (to 1188)
                        1178    LOAD_FAST                       22: r
                        1180    LOAD_CONST                      2: 0
                        1182    COMPARE_OP                      2 (==)
                        1184    POP_JUMP_IF_TRUE                596 (to 1192)
                        1188    LOAD_CONST                      4: None
                        1190    RETURN_VALUE                    
                        1192    LOAD_FAST                       20: a
                        1194    STORE_FAST                      4: xc
                        1196    LOAD_FAST                       4: xc
                        1198    LOAD_CONST                      3: 1
                        1200    COMPARE_OP                      4 (>)
                        1202    POP_JUMP_IF_FALSE               616 (to 1232)
                        1206    LOAD_FAST                       16: m
                        1208    LOAD_FAST                       2: p
                        1210    LOAD_CONST                      15: 100
                        1212    BINARY_MULTIPLY                 
                        1214    LOAD_GLOBAL                     15: _log10_lb
                        1216    LOAD_FAST                       4: xc
                        1218    CALL_FUNCTION                   1
                        1220    BINARY_FLOOR_DIVIDE             
                        1222    COMPARE_OP                      4 (>)
                        1224    POP_JUMP_IF_FALSE               616 (to 1232)
                        1228    LOAD_CONST                      4: None
                        1230    RETURN_VALUE                    
                        1232    LOAD_FAST                       4: xc
                        1234    LOAD_FAST                       16: m
                        1236    BINARY_POWER                    
                        1238    STORE_FAST                      4: xc
                        1240    LOAD_FAST                       5: xe
                        1242    LOAD_FAST                       16: m
                        1244    INPLACE_MULTIPLY                
                        1246    STORE_FAST                      5: xe
                        1248    LOAD_FAST                       4: xc
                        1250    LOAD_CONST                      1: 10
                        1252    LOAD_FAST                       2: p
                        1254    BINARY_POWER                    
                        1256    COMPARE_OP                      4 (>)
                        1258    POP_JUMP_IF_FALSE               633 (to 1266)
                        1262    LOAD_CONST                      4: None
                        1264    RETURN_VALUE                    
                        1266    LOAD_GLOBAL                     11: str
                        1268    LOAD_FAST                       4: xc
                        1270    CALL_FUNCTION                   1
                        1272    STORE_FAST                      23: str_xc
                        1274    LOAD_FAST                       1: other
                        1276    LOAD_METHOD                     4: _isinteger
                        1278    CALL_METHOD                     0
                        1280    POP_JUMP_IF_FALSE               667 (to 1334)
                        1284    LOAD_FAST                       1: other
                        1286    LOAD_ATTR                       5: _sign
                        1288    LOAD_CONST                      2: 0
                        1290    COMPARE_OP                      2 (==)
                        1292    POP_JUMP_IF_FALSE               667 (to 1334)
                        1296    LOAD_FAST                       0: self
                        1298    LOAD_ATTR                       6: _exp
                        1300    LOAD_GLOBAL                     1: int
                        1302    LOAD_FAST                       1: other
                        1304    CALL_FUNCTION                   1
                        1306    BINARY_MULTIPLY                 
                        1308    STORE_FAST                      10: ideal_exponent
                        1310    LOAD_GLOBAL                     7: min
                        1312    LOAD_FAST                       5: xe
                        1314    LOAD_FAST                       10: ideal_exponent
                        1316    BINARY_SUBTRACT                 
                        1318    LOAD_FAST                       2: p
                        1320    LOAD_GLOBAL                     10: len
                        1322    LOAD_FAST                       23: str_xc
                        1324    CALL_FUNCTION                   1
                        1326    BINARY_SUBTRACT                 
                        1328    CALL_FUNCTION                   2
                        1330    STORE_FAST                      11: zeros
                        1332    JUMP_FORWARD                    2 (to 1338)
                        1334    LOAD_CONST                      2: 0
                        1336    STORE_FAST                      11: zeros
                        1338    LOAD_GLOBAL                     8: _dec_from_triple
                        1340    LOAD_CONST                      2: 0
                        1342    LOAD_FAST                       23: str_xc
                        1344    LOAD_CONST                      6: '0'
                        1346    LOAD_FAST                       11: zeros
                        1348    BINARY_MULTIPLY                 
                        1350    BINARY_ADD                      
                        1352    LOAD_FAST                       5: xe
                        1354    LOAD_FAST                       11: zeros
                        1356    BINARY_SUBTRACT                 
                        1358    CALL_FUNCTION                   3
                        1360    RETURN_VALUE                    
                'Decimal._power_exact'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __pow__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 24
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_power_modulo'
                        '_convert_other'
                        'NotImplemented'
                        'getcontext'
                        '_check_nans'
                        '_raise_error'
                        'InvalidOperation'
                        '_One'
                        '_sign'
                        '_isinteger'
                        '_iseven'
                        'copy_negate'
                        '_dec_from_triple'
                        '_SignedInfinity'
                        '_isinfinity'
                        'prec'
                        'int'
                        '_exp'
                        'Rounded'
                        'Inexact'
                        'adjusted'
                        '_log10_exp_bound'
                        'len'
                        'str'
                        'Emax'
                        'Etiny'
                        '_power_exact'
                        '_int'
                        '_WorkRep'
                        'exp'
                        'sign'
                        '_dpower'
                        'copy'
                        'clear_flags'
                        '_signals'
                        'traps'
                        '_fix'
                        'flags'
                        'Subnormal'
                        'Underflow'
                        'Overflow'
                        'Clamped'
                    [Var Names]
                        'self'
                        'other'
                        'modulo'
                        'context'
                        'ans'
                        'result_sign'
                        'multiplier'
                        'exp'
                        'self_adj'
                        'exact'
                        'bound'
                        'Etiny'
                        'p'
                        'x'
                        'xc'
                        'xe'
                        'y'
                        'yc'
                        'ye'
                        'extra'
                        'coeff'
                        'expdiff'
                        'newcontext'
                        'exception'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return self ** other [ % modulo].\n\n        With two arguments, compute self**other.\n\n        With three arguments, compute (self**other) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n\n         - all three arguments must be integral\n         - other must be nonnegative\n         - either self or other (or both) must be nonzero\n         - modulo must be nonzero and must have at most p digits,\n           where p is the context precision.\n\n        If any of these restrictions is violated the InvalidOperation\n        flag is raised.\n\n        The result of pow(self, other, modulo) is identical to the\n        result that would be obtained by computing (self**other) %\n        modulo with unbounded precision, but is computed more\n        efficiently.  It is always exact.\n        '
                        None
                        '0 ** 0'
                        0
                        1
                        'x ** y with x negative and y not an integer'
                        '0'
                        '1'
                        False
                        True
                        3
                        5
                        10
                        'above Emax'
                    [Disassembly]
                        0       LOAD_FAST                       2: modulo
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           1 (is not)
                        6       POP_JUMP_IF_FALSE               11 (to 22)
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     0: _power_modulo
                        12      LOAD_FAST                       1: other
                        14      LOAD_FAST                       2: modulo
                        16      LOAD_FAST                       3: context
                        18      CALL_METHOD                     3
                        20      RETURN_VALUE                    
                        22      LOAD_GLOBAL                     1: _convert_other
                        24      LOAD_FAST                       1: other
                        26      CALL_FUNCTION                   1
                        28      STORE_FAST                      1: other
                        30      LOAD_FAST                       1: other
                        32      LOAD_GLOBAL                     2: NotImplemented
                        34      IS_OP                           0 (is)
                        36      POP_JUMP_IF_FALSE               21 (to 42)
                        38      LOAD_FAST                       1: other
                        40      RETURN_VALUE                    
                        42      LOAD_FAST                       3: context
                        44      LOAD_CONST                      1: None
                        46      IS_OP                           0 (is)
                        48      POP_JUMP_IF_FALSE               28 (to 56)
                        50      LOAD_GLOBAL                     3: getcontext
                        52      CALL_FUNCTION                   0
                        54      STORE_FAST                      3: context
                        56      LOAD_FAST                       0: self
                        58      LOAD_METHOD                     4: _check_nans
                        60      LOAD_FAST                       1: other
                        62      LOAD_FAST                       3: context
                        64      CALL_METHOD                     2
                        66      STORE_FAST                      4: ans
                        68      LOAD_FAST                       4: ans
                        70      POP_JUMP_IF_FALSE               38 (to 76)
                        72      LOAD_FAST                       4: ans
                        74      RETURN_VALUE                    
                        76      LOAD_FAST                       1: other
                        78      POP_JUMP_IF_TRUE                50 (to 100)
                        80      LOAD_FAST                       0: self
                        82      POP_JUMP_IF_TRUE                48 (to 96)
                        84      LOAD_FAST                       3: context
                        86      LOAD_METHOD                     5: _raise_error
                        88      LOAD_GLOBAL                     6: InvalidOperation
                        90      LOAD_CONST                      2: '0 ** 0'
                        92      CALL_METHOD                     2
                        94      RETURN_VALUE                    
                        96      LOAD_GLOBAL                     7: _One
                        98      RETURN_VALUE                    
                        100     LOAD_CONST                      3: 0
                        102     STORE_FAST                      5: result_sign
                        104     LOAD_FAST                       0: self
                        106     LOAD_ATTR                       8: _sign
                        108     LOAD_CONST                      4: 1
                        110     COMPARE_OP                      2 (==)
                        112     POP_JUMP_IF_FALSE               80 (to 160)
                        114     LOAD_FAST                       1: other
                        116     LOAD_METHOD                     9: _isinteger
                        118     CALL_METHOD                     0
                        120     POP_JUMP_IF_FALSE               68 (to 136)
                        122     LOAD_FAST                       1: other
                        124     LOAD_METHOD                     10: _iseven
                        126     CALL_METHOD                     0
                        128     POP_JUMP_IF_TRUE                67 (to 134)
                        130     LOAD_CONST                      4: 1
                        132     STORE_FAST                      5: result_sign
                        134     JUMP_FORWARD                    8 (to 152)
                        136     LOAD_FAST                       0: self
                        138     POP_JUMP_IF_FALSE               76 (to 152)
                        140     LOAD_FAST                       3: context
                        142     LOAD_METHOD                     5: _raise_error
                        144     LOAD_GLOBAL                     6: InvalidOperation
                        146     LOAD_CONST                      5: 'x ** y with x negative and y not an integer'
                        148     CALL_METHOD                     2
                        150     RETURN_VALUE                    
                        152     LOAD_FAST                       0: self
                        154     LOAD_METHOD                     11: copy_negate
                        156     CALL_METHOD                     0
                        158     STORE_FAST                      0: self
                        160     LOAD_FAST                       0: self
                        162     POP_JUMP_IF_TRUE                97 (to 194)
                        164     LOAD_FAST                       1: other
                        166     LOAD_ATTR                       8: _sign
                        168     LOAD_CONST                      3: 0
                        170     COMPARE_OP                      2 (==)
                        172     POP_JUMP_IF_FALSE               93 (to 186)
                        174     LOAD_GLOBAL                     12: _dec_from_triple
                        176     LOAD_FAST                       5: result_sign
                        178     LOAD_CONST                      6: '0'
                        180     LOAD_CONST                      3: 0
                        182     CALL_FUNCTION                   3
                        184     RETURN_VALUE                    
                        186     LOAD_GLOBAL                     13: _SignedInfinity
                        188     LOAD_FAST                       5: result_sign
                        190     BINARY_SUBSCR                   
                        192     RETURN_VALUE                    
                        194     LOAD_FAST                       0: self
                        196     LOAD_METHOD                     14: _isinfinity
                        198     CALL_METHOD                     0
                        200     POP_JUMP_IF_FALSE               116 (to 232)
                        202     LOAD_FAST                       1: other
                        204     LOAD_ATTR                       8: _sign
                        206     LOAD_CONST                      3: 0
                        208     COMPARE_OP                      2 (==)
                        210     POP_JUMP_IF_FALSE               110 (to 220)
                        212     LOAD_GLOBAL                     13: _SignedInfinity
                        214     LOAD_FAST                       5: result_sign
                        216     BINARY_SUBSCR                   
                        218     RETURN_VALUE                    
                        220     LOAD_GLOBAL                     12: _dec_from_triple
                        222     LOAD_FAST                       5: result_sign
                        224     LOAD_CONST                      6: '0'
                        226     LOAD_CONST                      3: 0
                        228     CALL_FUNCTION                   3
                        230     RETURN_VALUE                    
                        232     LOAD_FAST                       0: self
                        234     LOAD_GLOBAL                     7: _One
                        236     COMPARE_OP                      2 (==)
                        238     POP_JUMP_IF_FALSE               194 (to 388)
                        240     LOAD_FAST                       1: other
                        242     LOAD_METHOD                     9: _isinteger
                        244     CALL_METHOD                     0
                        246     POP_JUMP_IF_FALSE               168 (to 336)
                        248     LOAD_FAST                       1: other
                        250     LOAD_ATTR                       8: _sign
                        252     LOAD_CONST                      4: 1
                        254     COMPARE_OP                      2 (==)
                        256     POP_JUMP_IF_FALSE               132 (to 264)
                        258     LOAD_CONST                      3: 0
                        260     STORE_FAST                      6: multiplier
                        262     JUMP_FORWARD                    13 (to 290)
                        264     LOAD_FAST                       1: other
                        266     LOAD_FAST                       3: context
                        268     LOAD_ATTR                       15: prec
                        270     COMPARE_OP                      4 (>)
                        272     POP_JUMP_IF_FALSE               141 (to 282)
                        274     LOAD_FAST                       3: context
                        276     LOAD_ATTR                       15: prec
                        278     STORE_FAST                      6: multiplier
                        280     JUMP_FORWARD                    4 (to 290)
                        282     LOAD_GLOBAL                     16: int
                        284     LOAD_FAST                       1: other
                        286     CALL_FUNCTION                   1
                        288     STORE_FAST                      6: multiplier
                        290     LOAD_FAST                       0: self
                        292     LOAD_ATTR                       17: _exp
                        294     LOAD_FAST                       6: multiplier
                        296     BINARY_MULTIPLY                 
                        298     STORE_FAST                      7: exp
                        300     LOAD_FAST                       7: exp
                        302     LOAD_CONST                      4: 1
                        304     LOAD_FAST                       3: context
                        306     LOAD_ATTR                       15: prec
                        308     BINARY_SUBTRACT                 
                        310     COMPARE_OP                      0 (<)
                        312     POP_JUMP_IF_FALSE               167 (to 334)
                        314     LOAD_CONST                      4: 1
                        316     LOAD_FAST                       3: context
                        318     LOAD_ATTR                       15: prec
                        320     BINARY_SUBTRACT                 
                        322     STORE_FAST                      7: exp
                        324     LOAD_FAST                       3: context
                        326     LOAD_METHOD                     5: _raise_error
                        328     LOAD_GLOBAL                     18: Rounded
                        330     CALL_METHOD                     1
                        332     POP_TOP                         
                        334     JUMP_FORWARD                    15 (to 366)
                        336     LOAD_FAST                       3: context
                        338     LOAD_METHOD                     5: _raise_error
                        340     LOAD_GLOBAL                     19: Inexact
                        342     CALL_METHOD                     1
                        344     POP_TOP                         
                        346     LOAD_FAST                       3: context
                        348     LOAD_METHOD                     5: _raise_error
                        350     LOAD_GLOBAL                     18: Rounded
                        352     CALL_METHOD                     1
                        354     POP_TOP                         
                        356     LOAD_CONST                      4: 1
                        358     LOAD_FAST                       3: context
                        360     LOAD_ATTR                       15: prec
                        362     BINARY_SUBTRACT                 
                        364     STORE_FAST                      7: exp
                        366     LOAD_GLOBAL                     12: _dec_from_triple
                        368     LOAD_FAST                       5: result_sign
                        370     LOAD_CONST                      7: '1'
                        372     LOAD_CONST                      6: '0'
                        374     LOAD_FAST                       7: exp
                        376     UNARY_NEGATIVE                  
                        378     BINARY_MULTIPLY                 
                        380     BINARY_ADD                      
                        382     LOAD_FAST                       7: exp
                        384     CALL_FUNCTION                   3
                        386     RETURN_VALUE                    
                        388     LOAD_FAST                       0: self
                        390     LOAD_METHOD                     20: adjusted
                        392     CALL_METHOD                     0
                        394     STORE_FAST                      8: self_adj
                        396     LOAD_FAST                       1: other
                        398     LOAD_METHOD                     14: _isinfinity
                        400     CALL_METHOD                     0
                        402     POP_JUMP_IF_FALSE               221 (to 442)
                        404     LOAD_FAST                       1: other
                        406     LOAD_ATTR                       8: _sign
                        408     LOAD_CONST                      3: 0
                        410     COMPARE_OP                      2 (==)
                        412     LOAD_FAST                       8: self_adj
                        414     LOAD_CONST                      3: 0
                        416     COMPARE_OP                      0 (<)
                        418     COMPARE_OP                      2 (==)
                        420     POP_JUMP_IF_FALSE               217 (to 434)
                        422     LOAD_GLOBAL                     12: _dec_from_triple
                        424     LOAD_FAST                       5: result_sign
                        426     LOAD_CONST                      6: '0'
                        428     LOAD_CONST                      3: 0
                        430     CALL_FUNCTION                   3
                        432     RETURN_VALUE                    
                        434     LOAD_GLOBAL                     13: _SignedInfinity
                        436     LOAD_FAST                       5: result_sign
                        438     BINARY_SUBSCR                   
                        440     RETURN_VALUE                    
                        442     LOAD_CONST                      1: None
                        444     STORE_FAST                      4: ans
                        446     LOAD_CONST                      8: False
                        448     STORE_FAST                      9: exact
                        450     LOAD_FAST                       0: self
                        452     LOAD_METHOD                     21: _log10_exp_bound
                        454     CALL_METHOD                     0
                        456     LOAD_FAST                       1: other
                        458     LOAD_METHOD                     20: adjusted
                        460     CALL_METHOD                     0
                        462     BINARY_ADD                      
                        464     STORE_FAST                      10: bound
                        466     LOAD_FAST                       8: self_adj
                        468     LOAD_CONST                      3: 0
                        470     COMPARE_OP                      5 (>=)
                        472     LOAD_FAST                       1: other
                        474     LOAD_ATTR                       8: _sign
                        476     LOAD_CONST                      3: 0
                        478     COMPARE_OP                      2 (==)
                        480     COMPARE_OP                      2 (==)
                        482     POP_JUMP_IF_FALSE               263 (to 526)
                        486     LOAD_FAST                       10: bound
                        488     LOAD_GLOBAL                     22: len
                        490     LOAD_GLOBAL                     23: str
                        492     LOAD_FAST                       3: context
                        494     LOAD_ATTR                       24: Emax
                        496     CALL_FUNCTION                   1
                        498     CALL_FUNCTION                   1
                        500     COMPARE_OP                      5 (>=)
                        502     POP_JUMP_IF_FALSE               262 (to 524)
                        506     LOAD_GLOBAL                     12: _dec_from_triple
                        508     LOAD_FAST                       5: result_sign
                        510     LOAD_CONST                      7: '1'
                        512     LOAD_FAST                       3: context
                        514     LOAD_ATTR                       24: Emax
                        516     LOAD_CONST                      4: 1
                        518     BINARY_ADD                      
                        520     CALL_FUNCTION                   3
                        522     STORE_FAST                      4: ans
                        524     JUMP_FORWARD                    22 (to 570)
                        526     LOAD_FAST                       3: context
                        528     LOAD_METHOD                     25: Etiny
                        530     CALL_METHOD                     0
                        532     STORE_FAST                      11: Etiny
                        534     LOAD_FAST                       10: bound
                        536     LOAD_GLOBAL                     22: len
                        538     LOAD_GLOBAL                     23: str
                        540     LOAD_FAST                       11: Etiny
                        542     UNARY_NEGATIVE                  
                        544     CALL_FUNCTION                   1
                        546     CALL_FUNCTION                   1
                        548     COMPARE_OP                      5 (>=)
                        550     POP_JUMP_IF_FALSE               285 (to 570)
                        554     LOAD_GLOBAL                     12: _dec_from_triple
                        556     LOAD_FAST                       5: result_sign
                        558     LOAD_CONST                      7: '1'
                        560     LOAD_FAST                       11: Etiny
                        562     LOAD_CONST                      4: 1
                        564     BINARY_SUBTRACT                 
                        566     CALL_FUNCTION                   3
                        568     STORE_FAST                      4: ans
                        570     LOAD_FAST                       4: ans
                        572     LOAD_CONST                      1: None
                        574     IS_OP                           0 (is)
                        576     POP_JUMP_IF_FALSE               319 (to 638)
                        580     LOAD_FAST                       0: self
                        582     LOAD_METHOD                     26: _power_exact
                        584     LOAD_FAST                       1: other
                        586     LOAD_FAST                       3: context
                        588     LOAD_ATTR                       15: prec
                        590     LOAD_CONST                      4: 1
                        592     BINARY_ADD                      
                        594     CALL_METHOD                     2
                        596     STORE_FAST                      4: ans
                        598     LOAD_FAST                       4: ans
                        600     LOAD_CONST                      1: None
                        602     IS_OP                           1 (is not)
                        604     POP_JUMP_IF_FALSE               319 (to 638)
                        608     LOAD_FAST                       5: result_sign
                        610     LOAD_CONST                      4: 1
                        612     COMPARE_OP                      2 (==)
                        614     POP_JUMP_IF_FALSE               317 (to 634)
                        618     LOAD_GLOBAL                     12: _dec_from_triple
                        620     LOAD_CONST                      4: 1
                        622     LOAD_FAST                       4: ans
                        624     LOAD_ATTR                       27: _int
                        626     LOAD_FAST                       4: ans
                        628     LOAD_ATTR                       17: _exp
                        630     CALL_FUNCTION                   3
                        632     STORE_FAST                      4: ans
                        634     LOAD_CONST                      9: True
                        636     STORE_FAST                      9: exact
                        638     LOAD_FAST                       4: ans
                        640     LOAD_CONST                      1: None
                        642     IS_OP                           0 (is)
                        644     POP_JUMP_IF_FALSE               405 (to 810)
                        648     LOAD_FAST                       3: context
                        650     LOAD_ATTR                       15: prec
                        652     STORE_FAST                      12: p
                        654     LOAD_GLOBAL                     28: _WorkRep
                        656     LOAD_FAST                       0: self
                        658     CALL_FUNCTION                   1
                        660     STORE_FAST                      13: x
                        662     LOAD_FAST                       13: x
                        664     LOAD_ATTR                       16: int
                        666     LOAD_FAST                       13: x
                        668     LOAD_ATTR                       29: exp
                        670     ROT_TWO                         
                        672     STORE_FAST                      14: xc
                        674     STORE_FAST                      15: xe
                        676     LOAD_GLOBAL                     28: _WorkRep
                        678     LOAD_FAST                       1: other
                        680     CALL_FUNCTION                   1
                        682     STORE_FAST                      16: y
                        684     LOAD_FAST                       16: y
                        686     LOAD_ATTR                       16: int
                        688     LOAD_FAST                       16: y
                        690     LOAD_ATTR                       29: exp
                        692     ROT_TWO                         
                        694     STORE_FAST                      17: yc
                        696     STORE_FAST                      18: ye
                        698     LOAD_FAST                       16: y
                        700     LOAD_ATTR                       30: sign
                        702     LOAD_CONST                      4: 1
                        704     COMPARE_OP                      2 (==)
                        706     POP_JUMP_IF_FALSE               358 (to 716)
                        710     LOAD_FAST                       17: yc
                        712     UNARY_NEGATIVE                  
                        714     STORE_FAST                      17: yc
                        716     LOAD_CONST                      10: 3
                        718     STORE_FAST                      19: extra
                        720     NOP                             
                        722     LOAD_GLOBAL                     31: _dpower
                        724     LOAD_FAST                       14: xc
                        726     LOAD_FAST                       15: xe
                        728     LOAD_FAST                       17: yc
                        730     LOAD_FAST                       18: ye
                        732     LOAD_FAST                       12: p
                        734     LOAD_FAST                       19: extra
                        736     BINARY_ADD                      
                        738     CALL_FUNCTION                   5
                        740     UNPACK_SEQUENCE                 2
                        742     STORE_FAST                      20: coeff
                        744     STORE_FAST                      7: exp
                        746     LOAD_FAST                       20: coeff
                        748     LOAD_CONST                      11: 5
                        750     LOAD_CONST                      12: 10
                        752     LOAD_GLOBAL                     22: len
                        754     LOAD_GLOBAL                     23: str
                        756     LOAD_FAST                       20: coeff
                        758     CALL_FUNCTION                   1
                        760     CALL_FUNCTION                   1
                        762     LOAD_FAST                       12: p
                        764     BINARY_SUBTRACT                 
                        766     LOAD_CONST                      4: 1
                        768     BINARY_SUBTRACT                 
                        770     BINARY_POWER                    
                        772     BINARY_MULTIPLY                 
                        774     BINARY_MODULO                   
                        776     POP_JUMP_IF_FALSE               391 (to 782)
                        780     JUMP_FORWARD                    6 (to 794)
                        782     LOAD_FAST                       19: extra
                        784     LOAD_CONST                      10: 3
                        786     INPLACE_ADD                     
                        788     STORE_FAST                      19: extra
                        790     JUMP_ABSOLUTE                   361 (to 722)
                        794     LOAD_GLOBAL                     12: _dec_from_triple
                        796     LOAD_FAST                       5: result_sign
                        798     LOAD_GLOBAL                     23: str
                        800     LOAD_FAST                       20: coeff
                        802     CALL_FUNCTION                   1
                        804     LOAD_FAST                       7: exp
                        806     CALL_FUNCTION                   3
                        808     STORE_FAST                      4: ans
                        810     LOAD_FAST                       9: exact
                        812     POP_JUMP_IF_FALSE               525 (to 1050)
                        816     LOAD_FAST                       1: other
                        818     LOAD_METHOD                     9: _isinteger
                        820     CALL_METHOD                     0
                        822     POP_JUMP_IF_TRUE                525 (to 1050)
                        826     LOAD_GLOBAL                     22: len
                        828     LOAD_FAST                       4: ans
                        830     LOAD_ATTR                       27: _int
                        832     CALL_FUNCTION                   1
                        834     LOAD_FAST                       3: context
                        836     LOAD_ATTR                       15: prec
                        838     COMPARE_OP                      1 (<=)
                        840     POP_JUMP_IF_FALSE               447 (to 894)
                        844     LOAD_FAST                       3: context
                        846     LOAD_ATTR                       15: prec
                        848     LOAD_CONST                      4: 1
                        850     BINARY_ADD                      
                        852     LOAD_GLOBAL                     22: len
                        854     LOAD_FAST                       4: ans
                        856     LOAD_ATTR                       27: _int
                        858     CALL_FUNCTION                   1
                        860     BINARY_SUBTRACT                 
                        862     STORE_FAST                      21: expdiff
                        864     LOAD_GLOBAL                     12: _dec_from_triple
                        866     LOAD_FAST                       4: ans
                        868     LOAD_ATTR                       8: _sign
                        870     LOAD_FAST                       4: ans
                        872     LOAD_ATTR                       27: _int
                        874     LOAD_CONST                      6: '0'
                        876     LOAD_FAST                       21: expdiff
                        878     BINARY_MULTIPLY                 
                        880     BINARY_ADD                      
                        882     LOAD_FAST                       4: ans
                        884     LOAD_ATTR                       17: _exp
                        886     LOAD_FAST                       21: expdiff
                        888     BINARY_SUBTRACT                 
                        890     CALL_FUNCTION                   3
                        892     STORE_FAST                      4: ans
                        894     LOAD_FAST                       3: context
                        896     LOAD_METHOD                     32: copy
                        898     CALL_METHOD                     0
                        900     STORE_FAST                      22: newcontext
                        902     LOAD_FAST                       22: newcontext
                        904     LOAD_METHOD                     33: clear_flags
                        906     CALL_METHOD                     0
                        908     POP_TOP                         
                        910     LOAD_GLOBAL                     34: _signals
                        912     GET_ITER                        
                        914     FOR_ITER                        8 (to 932)
                        916     STORE_FAST                      23: exception
                        918     LOAD_CONST                      3: 0
                        920     LOAD_FAST                       22: newcontext
                        922     LOAD_ATTR                       35: traps
                        924     LOAD_FAST                       23: exception
                        926     STORE_SUBSCR                    
                        928     JUMP_ABSOLUTE                   457 (to 914)
                        932     LOAD_FAST                       4: ans
                        934     LOAD_METHOD                     36: _fix
                        936     LOAD_FAST                       22: newcontext
                        938     CALL_METHOD                     1
                        940     STORE_FAST                      4: ans
                        942     LOAD_FAST                       22: newcontext
                        944     LOAD_METHOD                     5: _raise_error
                        946     LOAD_GLOBAL                     19: Inexact
                        948     CALL_METHOD                     1
                        950     POP_TOP                         
                        952     LOAD_FAST                       22: newcontext
                        954     LOAD_ATTR                       37: flags
                        956     LOAD_GLOBAL                     38: Subnormal
                        958     BINARY_SUBSCR                   
                        960     POP_JUMP_IF_FALSE               487 (to 974)
                        964     LOAD_FAST                       22: newcontext
                        966     LOAD_METHOD                     5: _raise_error
                        968     LOAD_GLOBAL                     39: Underflow
                        970     CALL_METHOD                     1
                        972     POP_TOP                         
                        974     LOAD_FAST                       22: newcontext
                        976     LOAD_ATTR                       37: flags
                        978     LOAD_GLOBAL                     40: Overflow
                        980     BINARY_SUBSCR                   
                        982     POP_JUMP_IF_FALSE               501 (to 1002)
                        986     LOAD_FAST                       3: context
                        988     LOAD_METHOD                     5: _raise_error
                        990     LOAD_GLOBAL                     40: Overflow
                        992     LOAD_CONST                      13: 'above Emax'
                        994     LOAD_FAST                       4: ans
                        996     LOAD_ATTR                       8: _sign
                        998     CALL_METHOD                     3
                        1000    POP_TOP                         
                        1002    LOAD_GLOBAL                     39: Underflow
                        1004    LOAD_GLOBAL                     38: Subnormal
                        1006    LOAD_GLOBAL                     19: Inexact
                        1008    LOAD_GLOBAL                     18: Rounded
                        1010    LOAD_GLOBAL                     41: Clamped
                        1012    BUILD_TUPLE                     5
                        1014    GET_ITER                        
                        1016    FOR_ITER                        14 (to 1046)
                        1018    STORE_FAST                      23: exception
                        1020    LOAD_FAST                       22: newcontext
                        1022    LOAD_ATTR                       37: flags
                        1024    LOAD_FAST                       23: exception
                        1026    BINARY_SUBSCR                   
                        1028    POP_JUMP_IF_FALSE               521 (to 1042)
                        1032    LOAD_FAST                       3: context
                        1034    LOAD_METHOD                     5: _raise_error
                        1036    LOAD_FAST                       23: exception
                        1038    CALL_METHOD                     1
                        1040    POP_TOP                         
                        1042    JUMP_ABSOLUTE                   508 (to 1016)
                        1046    LOAD_FAST                       4: ans
                        1048    RETURN_VALUE                    
                        1050    LOAD_FAST                       4: ans
                        1052    LOAD_METHOD                     36: _fix
                        1054    LOAD_FAST                       3: context
                        1056    CALL_METHOD                     1
                        1058    STORE_FAST                      4: ans
                        1060    LOAD_FAST                       4: ans
                        1062    RETURN_VALUE                    
                'Decimal.__pow__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __rpow__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'NotImplemented'
                        '__pow__'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Swaps self/other and returns __pow__.'
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: other
                        8       LOAD_FAST                       1: other
                        10      LOAD_GLOBAL                     1: NotImplemented
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       1: other
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       1: other
                        22      LOAD_ATTR                       2: __pow__
                        24      LOAD_FAST                       0: self
                        26      LOAD_FAST                       2: context
                        28      LOAD_CONST                      1: ('context',)
                        30      CALL_FUNCTION_KW                2
                        32      RETURN_VALUE                    
                'Decimal.__rpow__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: normalize
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_is_special'
                        '_check_nans'
                        '_fix'
                        '_isinfinity'
                        '_dec_from_triple'
                        '_sign'
                        'Emax'
                        'Etop'
                        'clamp'
                        'len'
                        '_int'
                        '_exp'
                    [Var Names]
                        'self'
                        'context'
                        'ans'
                        'dup'
                        'exp_max'
                        'end'
                        'exp'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Normalize- strip trailing 0s, change anything equal to 0 to 0e0'
                        None
                        (
                            'context'
                        )
                        '0'
                        0
                        1
                    [Disassembly]
                        0       LOAD_FAST                       1: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      1: context
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _is_special
                        18      POP_JUMP_IF_FALSE               20 (to 40)
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: _check_nans
                        24      LOAD_FAST                       1: context
                        26      LOAD_CONST                      2: ('context',)
                        28      CALL_FUNCTION_KW                1
                        30      STORE_FAST                      2: ans
                        32      LOAD_FAST                       2: ans
                        34      POP_JUMP_IF_FALSE               20 (to 40)
                        36      LOAD_FAST                       2: ans
                        38      RETURN_VALUE                    
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     3: _fix
                        44      LOAD_FAST                       1: context
                        46      CALL_METHOD                     1
                        48      STORE_FAST                      3: dup
                        50      LOAD_FAST                       3: dup
                        52      LOAD_METHOD                     4: _isinfinity
                        54      CALL_METHOD                     0
                        56      POP_JUMP_IF_FALSE               31 (to 62)
                        58      LOAD_FAST                       3: dup
                        60      RETURN_VALUE                    
                        62      LOAD_FAST                       3: dup
                        64      POP_JUMP_IF_TRUE                40 (to 80)
                        66      LOAD_GLOBAL                     5: _dec_from_triple
                        68      LOAD_FAST                       3: dup
                        70      LOAD_ATTR                       6: _sign
                        72      LOAD_CONST                      3: '0'
                        74      LOAD_CONST                      4: 0
                        76      CALL_FUNCTION                   3
                        78      RETURN_VALUE                    
                        80      LOAD_FAST                       1: context
                        82      LOAD_ATTR                       7: Emax
                        84      LOAD_FAST                       1: context
                        86      LOAD_METHOD                     8: Etop
                        88      CALL_METHOD                     0
                        90      BUILD_LIST                      2
                        92      LOAD_FAST                       1: context
                        94      LOAD_ATTR                       9: clamp
                        96      BINARY_SUBSCR                   
                        98      STORE_FAST                      4: exp_max
                        100     LOAD_GLOBAL                     10: len
                        102     LOAD_FAST                       3: dup
                        104     LOAD_ATTR                       11: _int
                        106     CALL_FUNCTION                   1
                        108     STORE_FAST                      5: end
                        110     LOAD_FAST                       3: dup
                        112     LOAD_ATTR                       12: _exp
                        114     STORE_FAST                      6: exp
                        116     LOAD_FAST                       3: dup
                        118     LOAD_ATTR                       11: _int
                        120     LOAD_FAST                       5: end
                        122     LOAD_CONST                      5: 1
                        124     BINARY_SUBTRACT                 
                        126     BINARY_SUBSCR                   
                        128     LOAD_CONST                      3: '0'
                        130     COMPARE_OP                      2 (==)
                        132     POP_JUMP_IF_FALSE               92 (to 184)
                        134     LOAD_FAST                       6: exp
                        136     LOAD_FAST                       4: exp_max
                        138     COMPARE_OP                      0 (<)
                        140     POP_JUMP_IF_FALSE               92 (to 184)
                        142     LOAD_FAST                       6: exp
                        144     LOAD_CONST                      5: 1
                        146     INPLACE_ADD                     
                        148     STORE_FAST                      6: exp
                        150     LOAD_FAST                       5: end
                        152     LOAD_CONST                      5: 1
                        154     INPLACE_SUBTRACT                
                        156     STORE_FAST                      5: end
                        158     LOAD_FAST                       3: dup
                        160     LOAD_ATTR                       11: _int
                        162     LOAD_FAST                       5: end
                        164     LOAD_CONST                      5: 1
                        166     BINARY_SUBTRACT                 
                        168     BINARY_SUBSCR                   
                        170     LOAD_CONST                      3: '0'
                        172     COMPARE_OP                      2 (==)
                        174     POP_JUMP_IF_FALSE               92 (to 184)
                        176     LOAD_FAST                       6: exp
                        178     LOAD_FAST                       4: exp_max
                        180     COMPARE_OP                      0 (<)
                        182     POP_JUMP_IF_TRUE                71 (to 142)
                        184     LOAD_GLOBAL                     5: _dec_from_triple
                        186     LOAD_FAST                       3: dup
                        188     LOAD_ATTR                       6: _sign
                        190     LOAD_FAST                       3: dup
                        192     LOAD_ATTR                       11: _int
                        194     LOAD_CONST                      1: None
                        196     LOAD_FAST                       5: end
                        198     BUILD_SLICE                     2
                        200     BINARY_SUBSCR                   
                        202     LOAD_FAST                       6: exp
                        204     CALL_FUNCTION                   3
                        206     RETURN_VALUE                    
                'Decimal.normalize'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: quantize
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'getcontext'
                        'rounding'
                        '_is_special'
                        '_check_nans'
                        '_isinfinity'
                        'Decimal'
                        '_raise_error'
                        'InvalidOperation'
                        'Etiny'
                        '_exp'
                        'Emax'
                        '_dec_from_triple'
                        '_sign'
                        '_fix'
                        'adjusted'
                        'prec'
                        '_rescale'
                        'len'
                        '_int'
                        'Emin'
                        'Subnormal'
                        'Inexact'
                        'Rounded'
                    [Var Names]
                        'self'
                        'exp'
                        'rounding'
                        'context'
                        'ans'
                        'self_adjusted'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Quantize self so its exponent is the same as that of exp.\n\n        Similar to self._rescale(exp._exp) but with error checking.\n        '
                        True
                        (
                            'raiseit'
                        )
                        None
                        'quantize with one INF'
                        'target exponent out of bounds in quantize'
                        '0'
                        'exponent of quantize result too large for current context'
                        1
                        'quantize result has too many digits for current context'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: exp
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: exp
                        12      LOAD_FAST                       3: context
                        14      LOAD_CONST                      3: None
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_FALSE               13 (to 26)
                        20      LOAD_GLOBAL                     1: getcontext
                        22      CALL_FUNCTION                   0
                        24      STORE_FAST                      3: context
                        26      LOAD_FAST                       2: rounding
                        28      LOAD_CONST                      3: None
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               20 (to 40)
                        34      LOAD_FAST                       3: context
                        36      LOAD_ATTR                       2: rounding
                        38      STORE_FAST                      2: rounding
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       3: _is_special
                        44      POP_JUMP_IF_TRUE                26 (to 52)
                        46      LOAD_FAST                       1: exp
                        48      LOAD_ATTR                       3: _is_special
                        50      POP_JUMP_IF_FALSE               62 (to 124)
                        52      LOAD_FAST                       0: self
                        54      LOAD_METHOD                     4: _check_nans
                        56      LOAD_FAST                       1: exp
                        58      LOAD_FAST                       3: context
                        60      CALL_METHOD                     2
                        62      STORE_FAST                      4: ans
                        64      LOAD_FAST                       4: ans
                        66      POP_JUMP_IF_FALSE               36 (to 72)
                        68      LOAD_FAST                       4: ans
                        70      RETURN_VALUE                    
                        72      LOAD_FAST                       1: exp
                        74      LOAD_METHOD                     5: _isinfinity
                        76      CALL_METHOD                     0
                        78      POP_JUMP_IF_TRUE                44 (to 88)
                        80      LOAD_FAST                       0: self
                        82      LOAD_METHOD                     5: _isinfinity
                        84      CALL_METHOD                     0
                        86      POP_JUMP_IF_FALSE               62 (to 124)
                        88      LOAD_FAST                       1: exp
                        90      LOAD_METHOD                     5: _isinfinity
                        92      CALL_METHOD                     0
                        94      POP_JUMP_IF_FALSE               56 (to 112)
                        96      LOAD_FAST                       0: self
                        98      LOAD_METHOD                     5: _isinfinity
                        100     CALL_METHOD                     0
                        102     POP_JUMP_IF_FALSE               56 (to 112)
                        104     LOAD_GLOBAL                     6: Decimal
                        106     LOAD_FAST                       0: self
                        108     CALL_FUNCTION                   1
                        110     RETURN_VALUE                    
                        112     LOAD_FAST                       3: context
                        114     LOAD_METHOD                     7: _raise_error
                        116     LOAD_GLOBAL                     8: InvalidOperation
                        118     LOAD_CONST                      4: 'quantize with one INF'
                        120     CALL_METHOD                     2
                        122     RETURN_VALUE                    
                        124     LOAD_FAST                       3: context
                        126     LOAD_METHOD                     9: Etiny
                        128     CALL_METHOD                     0
                        130     LOAD_FAST                       1: exp
                        132     LOAD_ATTR                       10: _exp
                        134     DUP_TOP                         
                        136     ROT_THREE                       
                        138     COMPARE_OP                      1 (<=)
                        140     POP_JUMP_IF_FALSE               76 (to 152)
                        142     LOAD_FAST                       3: context
                        144     LOAD_ATTR                       11: Emax
                        146     COMPARE_OP                      1 (<=)
                        148     POP_JUMP_IF_TRUE                83 (to 166)
                        150     JUMP_FORWARD                    1 (to 154)
                        152     POP_TOP                         
                        154     LOAD_FAST                       3: context
                        156     LOAD_METHOD                     7: _raise_error
                        158     LOAD_GLOBAL                     8: InvalidOperation
                        160     LOAD_CONST                      5: 'target exponent out of bounds in quantize'
                        162     CALL_METHOD                     2
                        164     RETURN_VALUE                    
                        166     LOAD_FAST                       0: self
                        168     POP_JUMP_IF_TRUE                98 (to 196)
                        170     LOAD_GLOBAL                     12: _dec_from_triple
                        172     LOAD_FAST                       0: self
                        174     LOAD_ATTR                       13: _sign
                        176     LOAD_CONST                      6: '0'
                        178     LOAD_FAST                       1: exp
                        180     LOAD_ATTR                       10: _exp
                        182     CALL_FUNCTION                   3
                        184     STORE_FAST                      4: ans
                        186     LOAD_FAST                       4: ans
                        188     LOAD_METHOD                     14: _fix
                        190     LOAD_FAST                       3: context
                        192     CALL_METHOD                     1
                        194     RETURN_VALUE                    
                        196     LOAD_FAST                       0: self
                        198     LOAD_METHOD                     15: adjusted
                        200     CALL_METHOD                     0
                        202     STORE_FAST                      5: self_adjusted
                        204     LOAD_FAST                       5: self_adjusted
                        206     LOAD_FAST                       3: context
                        208     LOAD_ATTR                       11: Emax
                        210     COMPARE_OP                      4 (>)
                        212     POP_JUMP_IF_FALSE               113 (to 226)
                        214     LOAD_FAST                       3: context
                        216     LOAD_METHOD                     7: _raise_error
                        218     LOAD_GLOBAL                     8: InvalidOperation
                        220     LOAD_CONST                      7: 'exponent of quantize result too large for current context'
                        222     CALL_METHOD                     2
                        224     RETURN_VALUE                    
                        226     LOAD_FAST                       5: self_adjusted
                        228     LOAD_FAST                       1: exp
                        230     LOAD_ATTR                       10: _exp
                        232     BINARY_SUBTRACT                 
                        234     LOAD_CONST                      8: 1
                        236     BINARY_ADD                      
                        238     LOAD_FAST                       3: context
                        240     LOAD_ATTR                       16: prec
                        242     COMPARE_OP                      4 (>)
                        244     POP_JUMP_IF_FALSE               129 (to 258)
                        246     LOAD_FAST                       3: context
                        248     LOAD_METHOD                     7: _raise_error
                        250     LOAD_GLOBAL                     8: InvalidOperation
                        252     LOAD_CONST                      9: 'quantize result has too many digits for current context'
                        254     CALL_METHOD                     2
                        256     RETURN_VALUE                    
                        258     LOAD_FAST                       0: self
                        260     LOAD_METHOD                     17: _rescale
                        262     LOAD_FAST                       1: exp
                        264     LOAD_ATTR                       10: _exp
                        266     LOAD_FAST                       2: rounding
                        268     CALL_METHOD                     2
                        270     STORE_FAST                      4: ans
                        272     LOAD_FAST                       4: ans
                        274     LOAD_METHOD                     15: adjusted
                        276     CALL_METHOD                     0
                        278     LOAD_FAST                       3: context
                        280     LOAD_ATTR                       11: Emax
                        282     COMPARE_OP                      4 (>)
                        284     POP_JUMP_IF_FALSE               149 (to 298)
                        286     LOAD_FAST                       3: context
                        288     LOAD_METHOD                     7: _raise_error
                        290     LOAD_GLOBAL                     8: InvalidOperation
                        292     LOAD_CONST                      7: 'exponent of quantize result too large for current context'
                        294     CALL_METHOD                     2
                        296     RETURN_VALUE                    
                        298     LOAD_GLOBAL                     18: len
                        300     LOAD_FAST                       4: ans
                        302     LOAD_ATTR                       19: _int
                        304     CALL_FUNCTION                   1
                        306     LOAD_FAST                       3: context
                        308     LOAD_ATTR                       16: prec
                        310     COMPARE_OP                      4 (>)
                        312     POP_JUMP_IF_FALSE               163 (to 326)
                        314     LOAD_FAST                       3: context
                        316     LOAD_METHOD                     7: _raise_error
                        318     LOAD_GLOBAL                     8: InvalidOperation
                        320     LOAD_CONST                      9: 'quantize result has too many digits for current context'
                        322     CALL_METHOD                     2
                        324     RETURN_VALUE                    
                        326     LOAD_FAST                       4: ans
                        328     POP_JUMP_IF_FALSE               177 (to 354)
                        330     LOAD_FAST                       4: ans
                        332     LOAD_METHOD                     15: adjusted
                        334     CALL_METHOD                     0
                        336     LOAD_FAST                       3: context
                        338     LOAD_ATTR                       20: Emin
                        340     COMPARE_OP                      0 (<)
                        342     POP_JUMP_IF_FALSE               177 (to 354)
                        344     LOAD_FAST                       3: context
                        346     LOAD_METHOD                     7: _raise_error
                        348     LOAD_GLOBAL                     21: Subnormal
                        350     CALL_METHOD                     1
                        352     POP_TOP                         
                        354     LOAD_FAST                       4: ans
                        356     LOAD_ATTR                       10: _exp
                        358     LOAD_FAST                       0: self
                        360     LOAD_ATTR                       10: _exp
                        362     COMPARE_OP                      4 (>)
                        364     POP_JUMP_IF_FALSE               197 (to 394)
                        366     LOAD_FAST                       4: ans
                        368     LOAD_FAST                       0: self
                        370     COMPARE_OP                      3 (!=)
                        372     POP_JUMP_IF_FALSE               192 (to 384)
                        374     LOAD_FAST                       3: context
                        376     LOAD_METHOD                     7: _raise_error
                        378     LOAD_GLOBAL                     22: Inexact
                        380     CALL_METHOD                     1
                        382     POP_TOP                         
                        384     LOAD_FAST                       3: context
                        386     LOAD_METHOD                     7: _raise_error
                        388     LOAD_GLOBAL                     23: Rounded
                        390     CALL_METHOD                     1
                        392     POP_TOP                         
                        394     LOAD_FAST                       4: ans
                        396     LOAD_METHOD                     14: _fix
                        398     LOAD_FAST                       3: context
                        400     CALL_METHOD                     1
                        402     STORE_FAST                      4: ans
                        404     LOAD_FAST                       4: ans
                        406     RETURN_VALUE                    
                'Decimal.quantize'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: same_quantum
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '_is_special'
                        'is_nan'
                        'is_infinite'
                        '_exp'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self and other have the same exponent; otherwise\n        return False.\n\n        If either operand is a special value, the following rules are used:\n           * return True if both operands are infinities\n           * return True if both operands are NaNs\n           * otherwise, return False.\n        '
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: _is_special
                        16      POP_JUMP_IF_TRUE                12 (to 24)
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       1: _is_special
                        22      POP_JUMP_IF_FALSE               28 (to 56)
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     2: is_nan
                        28      CALL_METHOD                     0
                        30      POP_JUMP_IF_FALSE               20 (to 40)
                        32      LOAD_FAST                       1: other
                        34      LOAD_METHOD                     2: is_nan
                        36      CALL_METHOD                     0
                        38      JUMP_IF_TRUE_OR_POP             27 (to 54)
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     3: is_infinite
                        44      CALL_METHOD                     0
                        46      JUMP_IF_FALSE_OR_POP            27 (to 54)
                        48      LOAD_FAST                       1: other
                        50      LOAD_METHOD                     3: is_infinite
                        52      CALL_METHOD                     0
                        54      RETURN_VALUE                    
                        56      LOAD_FAST                       0: self
                        58      LOAD_ATTR                       4: _exp
                        60      LOAD_FAST                       1: other
                        62      LOAD_ATTR                       4: _exp
                        64      COMPARE_OP                      2 (==)
                        66      RETURN_VALUE                    
                'Decimal.same_quantum'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _rescale
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        'Decimal'
                        '_dec_from_triple'
                        '_sign'
                        '_exp'
                        '_int'
                        'len'
                        '_pick_rounding_function'
                        'str'
                        'int'
                    [Var Names]
                        'self'
                        'exp'
                        'rounding'
                        'digits'
                        'this_function'
                        'changed'
                        'coeff'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Rescale self so that the exponent is exp, either by padding with zeros\n        or by truncating digits, using the given rounding mode.\n\n        Specials are returned without change.  This operation is\n        quiet: it raises no flags, and uses no information from the\n        context.\n\n        exp = exp to scale to (an integer)\n        rounding = rounding mode\n        '
                        '0'
                        0
                        '1'
                        1
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               7 (to 14)
                        6       LOAD_GLOBAL                     1: Decimal
                        8       LOAD_FAST                       0: self
                        10      CALL_FUNCTION                   1
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      POP_JUMP_IF_TRUE                16 (to 32)
                        18      LOAD_GLOBAL                     2: _dec_from_triple
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       3: _sign
                        24      LOAD_CONST                      1: '0'
                        26      LOAD_FAST                       1: exp
                        28      CALL_FUNCTION                   3
                        30      RETURN_VALUE                    
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       4: _exp
                        36      LOAD_FAST                       1: exp
                        38      COMPARE_OP                      5 (>=)
                        40      POP_JUMP_IF_FALSE               36 (to 72)
                        42      LOAD_GLOBAL                     2: _dec_from_triple
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       3: _sign
                        48      LOAD_FAST                       0: self
                        50      LOAD_ATTR                       5: _int
                        52      LOAD_CONST                      1: '0'
                        54      LOAD_FAST                       0: self
                        56      LOAD_ATTR                       4: _exp
                        58      LOAD_FAST                       1: exp
                        60      BINARY_SUBTRACT                 
                        62      BINARY_MULTIPLY                 
                        64      BINARY_ADD                      
                        66      LOAD_FAST                       1: exp
                        68      CALL_FUNCTION                   3
                        70      RETURN_VALUE                    
                        72      LOAD_GLOBAL                     6: len
                        74      LOAD_FAST                       0: self
                        76      LOAD_ATTR                       5: _int
                        78      CALL_FUNCTION                   1
                        80      LOAD_FAST                       0: self
                        82      LOAD_ATTR                       4: _exp
                        84      BINARY_ADD                      
                        86      LOAD_FAST                       1: exp
                        88      BINARY_SUBTRACT                 
                        90      STORE_FAST                      3: digits
                        92      LOAD_FAST                       3: digits
                        94      LOAD_CONST                      2: 0
                        96      COMPARE_OP                      0 (<)
                        98      POP_JUMP_IF_FALSE               61 (to 122)
                        100     LOAD_GLOBAL                     2: _dec_from_triple
                        102     LOAD_FAST                       0: self
                        104     LOAD_ATTR                       3: _sign
                        106     LOAD_CONST                      3: '1'
                        108     LOAD_FAST                       1: exp
                        110     LOAD_CONST                      4: 1
                        112     BINARY_SUBTRACT                 
                        114     CALL_FUNCTION                   3
                        116     STORE_FAST                      0: self
                        118     LOAD_CONST                      2: 0
                        120     STORE_FAST                      3: digits
                        122     LOAD_FAST                       0: self
                        124     LOAD_ATTR                       7: _pick_rounding_function
                        126     LOAD_FAST                       2: rounding
                        128     BINARY_SUBSCR                   
                        130     STORE_FAST                      4: this_function
                        132     LOAD_FAST                       4: this_function
                        134     LOAD_FAST                       0: self
                        136     LOAD_FAST                       3: digits
                        138     CALL_FUNCTION                   2
                        140     STORE_FAST                      5: changed
                        142     LOAD_FAST                       0: self
                        144     LOAD_ATTR                       5: _int
                        146     LOAD_CONST                      5: None
                        148     LOAD_FAST                       3: digits
                        150     BUILD_SLICE                     2
                        152     BINARY_SUBSCR                   
                        154     JUMP_IF_TRUE_OR_POP             79 (to 158)
                        156     LOAD_CONST                      1: '0'
                        158     STORE_FAST                      6: coeff
                        160     LOAD_FAST                       5: changed
                        162     LOAD_CONST                      4: 1
                        164     COMPARE_OP                      2 (==)
                        166     POP_JUMP_IF_FALSE               92 (to 184)
                        168     LOAD_GLOBAL                     8: str
                        170     LOAD_GLOBAL                     9: int
                        172     LOAD_FAST                       6: coeff
                        174     CALL_FUNCTION                   1
                        176     LOAD_CONST                      4: 1
                        178     BINARY_ADD                      
                        180     CALL_FUNCTION                   1
                        182     STORE_FAST                      6: coeff
                        184     LOAD_GLOBAL                     2: _dec_from_triple
                        186     LOAD_FAST                       0: self
                        188     LOAD_ATTR                       3: _sign
                        190     LOAD_FAST                       6: coeff
                        192     LOAD_FAST                       1: exp
                        194     CALL_FUNCTION                   3
                        196     RETURN_VALUE                    
                'Decimal._rescale'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _round
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ValueError'
                        '_is_special'
                        'Decimal'
                        '_rescale'
                        'adjusted'
                    [Var Names]
                        'self'
                        'places'
                        'rounding'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Round a nonzero, nonspecial Decimal to a fixed number of\n        significant figures, using the given rounding mode.\n\n        Infinities, NaNs and zeros are returned unaltered.\n\n        This operation is quiet: it raises no flags, and uses no\n        information from the context.\n\n        '
                        0
                        'argument should be at least 1 in _round'
                        1
                    [Disassembly]
                        0       LOAD_FAST                       1: places
                        2       LOAD_CONST                      1: 0
                        4       COMPARE_OP                      1 (<=)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: ValueError
                        10      LOAD_CONST                      2: 'argument should be at least 1 in _round'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       1: _is_special
                        20      POP_JUMP_IF_TRUE                13 (to 26)
                        22      LOAD_FAST                       0: self
                        24      POP_JUMP_IF_TRUE                17 (to 34)
                        26      LOAD_GLOBAL                     2: Decimal
                        28      LOAD_FAST                       0: self
                        30      CALL_FUNCTION                   1
                        32      RETURN_VALUE                    
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     3: _rescale
                        38      LOAD_FAST                       0: self
                        40      LOAD_METHOD                     4: adjusted
                        42      CALL_METHOD                     0
                        44      LOAD_CONST                      3: 1
                        46      BINARY_ADD                      
                        48      LOAD_FAST                       1: places
                        50      BINARY_SUBTRACT                 
                        52      LOAD_FAST                       2: rounding
                        54      CALL_METHOD                     2
                        56      STORE_FAST                      3: ans
                        58      LOAD_FAST                       3: ans
                        60      LOAD_METHOD                     4: adjusted
                        62      CALL_METHOD                     0
                        64      LOAD_FAST                       0: self
                        66      LOAD_METHOD                     4: adjusted
                        68      CALL_METHOD                     0
                        70      COMPARE_OP                      3 (!=)
                        72      POP_JUMP_IF_FALSE               49 (to 98)
                        74      LOAD_FAST                       3: ans
                        76      LOAD_METHOD                     3: _rescale
                        78      LOAD_FAST                       3: ans
                        80      LOAD_METHOD                     4: adjusted
                        82      CALL_METHOD                     0
                        84      LOAD_CONST                      3: 1
                        86      BINARY_ADD                      
                        88      LOAD_FAST                       1: places
                        90      BINARY_SUBTRACT                 
                        92      LOAD_FAST                       2: rounding
                        94      CALL_METHOD                     2
                        96      STORE_FAST                      3: ans
                        98      LOAD_FAST                       3: ans
                        100     RETURN_VALUE                    
                'Decimal._round'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: to_integral_exact
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        '_check_nans'
                        'Decimal'
                        '_exp'
                        '_dec_from_triple'
                        '_sign'
                        'getcontext'
                        'rounding'
                        '_rescale'
                        '_raise_error'
                        'Inexact'
                        'Rounded'
                    [Var Names]
                        'self'
                        'rounding'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Rounds to a nearby integer.\n\n        If no rounding mode is specified, take the rounding mode from\n        the context.  This method raises the Rounded and Inexact flags\n        when appropriate.\n\n        See also: to_integral_value, which does exactly the same as\n        this method except that it doesn't raise Inexact or Rounded.\n        "
                        (
                            'context'
                        )
                        0
                        '0'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               17 (to 34)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _check_nans
                        10      LOAD_FAST                       2: context
                        12      LOAD_CONST                      1: ('context',)
                        14      CALL_FUNCTION_KW                1
                        16      STORE_FAST                      3: ans
                        18      LOAD_FAST                       3: ans
                        20      POP_JUMP_IF_FALSE               13 (to 26)
                        22      LOAD_FAST                       3: ans
                        24      RETURN_VALUE                    
                        26      LOAD_GLOBAL                     2: Decimal
                        28      LOAD_FAST                       0: self
                        30      CALL_FUNCTION                   1
                        32      RETURN_VALUE                    
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       3: _exp
                        38      LOAD_CONST                      2: 0
                        40      COMPARE_OP                      5 (>=)
                        42      POP_JUMP_IF_FALSE               26 (to 52)
                        44      LOAD_GLOBAL                     2: Decimal
                        46      LOAD_FAST                       0: self
                        48      CALL_FUNCTION                   1
                        50      RETURN_VALUE                    
                        52      LOAD_FAST                       0: self
                        54      POP_JUMP_IF_TRUE                35 (to 70)
                        56      LOAD_GLOBAL                     4: _dec_from_triple
                        58      LOAD_FAST                       0: self
                        60      LOAD_ATTR                       5: _sign
                        62      LOAD_CONST                      3: '0'
                        64      LOAD_CONST                      2: 0
                        66      CALL_FUNCTION                   3
                        68      RETURN_VALUE                    
                        70      LOAD_FAST                       2: context
                        72      LOAD_CONST                      4: None
                        74      IS_OP                           0 (is)
                        76      POP_JUMP_IF_FALSE               42 (to 84)
                        78      LOAD_GLOBAL                     6: getcontext
                        80      CALL_FUNCTION                   0
                        82      STORE_FAST                      2: context
                        84      LOAD_FAST                       1: rounding
                        86      LOAD_CONST                      4: None
                        88      IS_OP                           0 (is)
                        90      POP_JUMP_IF_FALSE               49 (to 98)
                        92      LOAD_FAST                       2: context
                        94      LOAD_ATTR                       7: rounding
                        96      STORE_FAST                      1: rounding
                        98      LOAD_FAST                       0: self
                        100     LOAD_METHOD                     8: _rescale
                        102     LOAD_CONST                      2: 0
                        104     LOAD_FAST                       1: rounding
                        106     CALL_METHOD                     2
                        108     STORE_FAST                      3: ans
                        110     LOAD_FAST                       3: ans
                        112     LOAD_FAST                       0: self
                        114     COMPARE_OP                      3 (!=)
                        116     POP_JUMP_IF_FALSE               64 (to 128)
                        118     LOAD_FAST                       2: context
                        120     LOAD_METHOD                     9: _raise_error
                        122     LOAD_GLOBAL                     10: Inexact
                        124     CALL_METHOD                     1
                        126     POP_TOP                         
                        128     LOAD_FAST                       2: context
                        130     LOAD_METHOD                     9: _raise_error
                        132     LOAD_GLOBAL                     11: Rounded
                        134     CALL_METHOD                     1
                        136     POP_TOP                         
                        138     LOAD_FAST                       3: ans
                        140     RETURN_VALUE                    
                'Decimal.to_integral_exact'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: to_integral_value
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        'rounding'
                        '_is_special'
                        '_check_nans'
                        'Decimal'
                        '_exp'
                        '_rescale'
                    [Var Names]
                        'self'
                        'rounding'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Rounds to the nearest integer, without raising inexact, rounded.'
                        None
                        (
                            'context'
                        )
                        0
                    [Disassembly]
                        0       LOAD_FAST                       2: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      2: context
                        14      LOAD_FAST                       1: rounding
                        16      LOAD_CONST                      1: None
                        18      IS_OP                           0 (is)
                        20      POP_JUMP_IF_FALSE               14 (to 28)
                        22      LOAD_FAST                       2: context
                        24      LOAD_ATTR                       1: rounding
                        26      STORE_FAST                      1: rounding
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       2: _is_special
                        32      POP_JUMP_IF_FALSE               31 (to 62)
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       3: _check_nans
                        38      LOAD_FAST                       2: context
                        40      LOAD_CONST                      2: ('context',)
                        42      CALL_FUNCTION_KW                1
                        44      STORE_FAST                      3: ans
                        46      LOAD_FAST                       3: ans
                        48      POP_JUMP_IF_FALSE               27 (to 54)
                        50      LOAD_FAST                       3: ans
                        52      RETURN_VALUE                    
                        54      LOAD_GLOBAL                     4: Decimal
                        56      LOAD_FAST                       0: self
                        58      CALL_FUNCTION                   1
                        60      RETURN_VALUE                    
                        62      LOAD_FAST                       0: self
                        64      LOAD_ATTR                       5: _exp
                        66      LOAD_CONST                      3: 0
                        68      COMPARE_OP                      5 (>=)
                        70      POP_JUMP_IF_FALSE               40 (to 80)
                        72      LOAD_GLOBAL                     4: Decimal
                        74      LOAD_FAST                       0: self
                        76      CALL_FUNCTION                   1
                        78      RETURN_VALUE                    
                        80      LOAD_FAST                       0: self
                        82      LOAD_METHOD                     6: _rescale
                        84      LOAD_CONST                      3: 0
                        86      LOAD_FAST                       1: rounding
                        88      CALL_METHOD                     2
                        90      RETURN_VALUE                    
                'Decimal.to_integral_value'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: sqrt
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 14
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_is_special'
                        '_check_nans'
                        '_isinfinity'
                        '_sign'
                        'Decimal'
                        '_dec_from_triple'
                        '_exp'
                        '_fix'
                        '_raise_error'
                        'InvalidOperation'
                        'prec'
                        '_WorkRep'
                        'exp'
                        'int'
                        'len'
                        '_int'
                        'divmod'
                        'str'
                        '_shallow_copy'
                        '_set_rounding'
                        'ROUND_HALF_EVEN'
                        'rounding'
                    [Var Names]
                        'self'
                        'context'
                        'ans'
                        'prec'
                        'op'
                        'e'
                        'c'
                        'l'
                        'shift'
                        'exact'
                        'remainder'
                        'n'
                        'q'
                        'rounding'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the square root of self.'
                        None
                        (
                            'context'
                        )
                        0
                        '0'
                        2
                        1
                        'sqrt(-x), x > 0'
                        10
                        100
                        True
                        5
                    [Disassembly]
                        0       LOAD_FAST                       1: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      1: context
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _is_special
                        18      POP_JUMP_IF_FALSE               33 (to 66)
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: _check_nans
                        24      LOAD_FAST                       1: context
                        26      LOAD_CONST                      2: ('context',)
                        28      CALL_FUNCTION_KW                1
                        30      STORE_FAST                      2: ans
                        32      LOAD_FAST                       2: ans
                        34      POP_JUMP_IF_FALSE               20 (to 40)
                        36      LOAD_FAST                       2: ans
                        38      RETURN_VALUE                    
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     3: _isinfinity
                        44      CALL_METHOD                     0
                        46      POP_JUMP_IF_FALSE               33 (to 66)
                        48      LOAD_FAST                       0: self
                        50      LOAD_ATTR                       4: _sign
                        52      LOAD_CONST                      3: 0
                        54      COMPARE_OP                      2 (==)
                        56      POP_JUMP_IF_FALSE               33 (to 66)
                        58      LOAD_GLOBAL                     5: Decimal
                        60      LOAD_FAST                       0: self
                        62      CALL_FUNCTION                   1
                        64      RETURN_VALUE                    
                        66      LOAD_FAST                       0: self
                        68      POP_JUMP_IF_TRUE                50 (to 100)
                        70      LOAD_GLOBAL                     6: _dec_from_triple
                        72      LOAD_FAST                       0: self
                        74      LOAD_ATTR                       4: _sign
                        76      LOAD_CONST                      4: '0'
                        78      LOAD_FAST                       0: self
                        80      LOAD_ATTR                       7: _exp
                        82      LOAD_CONST                      5: 2
                        84      BINARY_FLOOR_DIVIDE             
                        86      CALL_FUNCTION                   3
                        88      STORE_FAST                      2: ans
                        90      LOAD_FAST                       2: ans
                        92      LOAD_METHOD                     8: _fix
                        94      LOAD_FAST                       1: context
                        96      CALL_METHOD                     1
                        98      RETURN_VALUE                    
                        100     LOAD_FAST                       0: self
                        102     LOAD_ATTR                       4: _sign
                        104     LOAD_CONST                      6: 1
                        106     COMPARE_OP                      2 (==)
                        108     POP_JUMP_IF_FALSE               61 (to 122)
                        110     LOAD_FAST                       1: context
                        112     LOAD_METHOD                     9: _raise_error
                        114     LOAD_GLOBAL                     10: InvalidOperation
                        116     LOAD_CONST                      7: 'sqrt(-x), x > 0'
                        118     CALL_METHOD                     2
                        120     RETURN_VALUE                    
                        122     LOAD_FAST                       1: context
                        124     LOAD_ATTR                       11: prec
                        126     LOAD_CONST                      6: 1
                        128     BINARY_ADD                      
                        130     STORE_FAST                      3: prec
                        132     LOAD_GLOBAL                     12: _WorkRep
                        134     LOAD_FAST                       0: self
                        136     CALL_FUNCTION                   1
                        138     STORE_FAST                      4: op
                        140     LOAD_FAST                       4: op
                        142     LOAD_ATTR                       13: exp
                        144     LOAD_CONST                      6: 1
                        146     BINARY_RSHIFT                   
                        148     STORE_FAST                      5: e
                        150     LOAD_FAST                       4: op
                        152     LOAD_ATTR                       13: exp
                        154     LOAD_CONST                      6: 1
                        156     BINARY_AND                      
                        158     POP_JUMP_IF_FALSE               95 (to 190)
                        160     LOAD_FAST                       4: op
                        162     LOAD_ATTR                       14: int
                        164     LOAD_CONST                      8: 10
                        166     BINARY_MULTIPLY                 
                        168     STORE_FAST                      6: c
                        170     LOAD_GLOBAL                     15: len
                        172     LOAD_FAST                       0: self
                        174     LOAD_ATTR                       16: _int
                        176     CALL_FUNCTION                   1
                        178     LOAD_CONST                      6: 1
                        180     BINARY_RSHIFT                   
                        182     LOAD_CONST                      6: 1
                        184     BINARY_ADD                      
                        186     STORE_FAST                      7: l
                        188     JUMP_FORWARD                    12 (to 214)
                        190     LOAD_FAST                       4: op
                        192     LOAD_ATTR                       14: int
                        194     STORE_FAST                      6: c
                        196     LOAD_GLOBAL                     15: len
                        198     LOAD_FAST                       0: self
                        200     LOAD_ATTR                       16: _int
                        202     CALL_FUNCTION                   1
                        204     LOAD_CONST                      6: 1
                        206     BINARY_ADD                      
                        208     LOAD_CONST                      6: 1
                        210     BINARY_RSHIFT                   
                        212     STORE_FAST                      7: l
                        214     LOAD_FAST                       3: prec
                        216     LOAD_FAST                       7: l
                        218     BINARY_SUBTRACT                 
                        220     STORE_FAST                      8: shift
                        222     LOAD_FAST                       8: shift
                        224     LOAD_CONST                      3: 0
                        226     COMPARE_OP                      5 (>=)
                        228     POP_JUMP_IF_FALSE               124 (to 248)
                        230     LOAD_FAST                       6: c
                        232     LOAD_CONST                      9: 100
                        234     LOAD_FAST                       8: shift
                        236     BINARY_POWER                    
                        238     INPLACE_MULTIPLY                
                        240     STORE_FAST                      6: c
                        242     LOAD_CONST                      10: True
                        244     STORE_FAST                      9: exact
                        246     JUMP_FORWARD                    13 (to 274)
                        248     LOAD_GLOBAL                     17: divmod
                        250     LOAD_FAST                       6: c
                        252     LOAD_CONST                      9: 100
                        254     LOAD_FAST                       8: shift
                        256     UNARY_NEGATIVE                  
                        258     BINARY_POWER                    
                        260     CALL_FUNCTION                   2
                        262     UNPACK_SEQUENCE                 2
                        264     STORE_FAST                      6: c
                        266     STORE_FAST                      10: remainder
                        268     LOAD_FAST                       10: remainder
                        270     UNARY_NOT                       
                        272     STORE_FAST                      9: exact
                        274     LOAD_FAST                       5: e
                        276     LOAD_FAST                       8: shift
                        278     INPLACE_SUBTRACT                
                        280     STORE_FAST                      5: e
                        282     LOAD_CONST                      8: 10
                        284     LOAD_FAST                       3: prec
                        286     BINARY_POWER                    
                        288     STORE_FAST                      11: n
                        290     NOP                             
                        292     LOAD_FAST                       6: c
                        294     LOAD_FAST                       11: n
                        296     BINARY_FLOOR_DIVIDE             
                        298     STORE_FAST                      12: q
                        300     LOAD_FAST                       11: n
                        302     LOAD_FAST                       12: q
                        304     COMPARE_OP                      1 (<=)
                        306     POP_JUMP_IF_FALSE               155 (to 310)
                        308     JUMP_FORWARD                    7 (to 324)
                        310     LOAD_FAST                       11: n
                        312     LOAD_FAST                       12: q
                        314     BINARY_ADD                      
                        316     LOAD_CONST                      6: 1
                        318     BINARY_RSHIFT                   
                        320     STORE_FAST                      11: n
                        322     JUMP_ABSOLUTE                   146 (to 292)
                        324     LOAD_FAST                       9: exact
                        326     JUMP_IF_FALSE_OR_POP            169 (to 338)
                        328     LOAD_FAST                       11: n
                        330     LOAD_FAST                       11: n
                        332     BINARY_MULTIPLY                 
                        334     LOAD_FAST                       6: c
                        336     COMPARE_OP                      2 (==)
                        338     STORE_FAST                      9: exact
                        340     LOAD_FAST                       9: exact
                        342     POP_JUMP_IF_FALSE               195 (to 390)
                        344     LOAD_FAST                       8: shift
                        346     LOAD_CONST                      3: 0
                        348     COMPARE_OP                      5 (>=)
                        350     POP_JUMP_IF_FALSE               183 (to 366)
                        352     LOAD_FAST                       11: n
                        354     LOAD_CONST                      8: 10
                        356     LOAD_FAST                       8: shift
                        358     BINARY_POWER                    
                        360     INPLACE_FLOOR_DIVIDE            
                        362     STORE_FAST                      11: n
                        364     JUMP_FORWARD                    7 (to 380)
                        366     LOAD_FAST                       11: n
                        368     LOAD_CONST                      8: 10
                        370     LOAD_FAST                       8: shift
                        372     UNARY_NEGATIVE                  
                        374     BINARY_POWER                    
                        376     INPLACE_MULTIPLY                
                        378     STORE_FAST                      11: n
                        380     LOAD_FAST                       5: e
                        382     LOAD_FAST                       8: shift
                        384     INPLACE_ADD                     
                        386     STORE_FAST                      5: e
                        388     JUMP_FORWARD                    10 (to 410)
                        390     LOAD_FAST                       11: n
                        392     LOAD_CONST                      11: 5
                        394     BINARY_MODULO                   
                        396     LOAD_CONST                      3: 0
                        398     COMPARE_OP                      2 (==)
                        400     POP_JUMP_IF_FALSE               205 (to 410)
                        402     LOAD_FAST                       11: n
                        404     LOAD_CONST                      6: 1
                        406     INPLACE_ADD                     
                        408     STORE_FAST                      11: n
                        410     LOAD_GLOBAL                     6: _dec_from_triple
                        412     LOAD_CONST                      3: 0
                        414     LOAD_GLOBAL                     18: str
                        416     LOAD_FAST                       11: n
                        418     CALL_FUNCTION                   1
                        420     LOAD_FAST                       5: e
                        422     CALL_FUNCTION                   3
                        424     STORE_FAST                      2: ans
                        426     LOAD_FAST                       1: context
                        428     LOAD_METHOD                     19: _shallow_copy
                        430     CALL_METHOD                     0
                        432     STORE_FAST                      1: context
                        434     LOAD_FAST                       1: context
                        436     LOAD_METHOD                     20: _set_rounding
                        438     LOAD_GLOBAL                     21: ROUND_HALF_EVEN
                        440     CALL_METHOD                     1
                        442     STORE_FAST                      13: rounding
                        444     LOAD_FAST                       2: ans
                        446     LOAD_METHOD                     8: _fix
                        448     LOAD_FAST                       1: context
                        450     CALL_METHOD                     1
                        452     STORE_FAST                      2: ans
                        454     LOAD_FAST                       13: rounding
                        456     LOAD_FAST                       1: context
                        458     STORE_ATTR                      22: rounding
                        460     LOAD_FAST                       2: ans
                        462     RETURN_VALUE                    
                'Decimal.sqrt'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: max
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'getcontext'
                        '_is_special'
                        '_isnan'
                        '_fix'
                        '_check_nans'
                        '_cmp'
                        'compare_total'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'sn'
                        'on'
                        'c'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns the larger value.\n\n        Like max(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        '
                        True
                        (
                            'raiseit'
                        )
                        None
                        1
                        0
                        -1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_FAST                       2: context
                        14      LOAD_CONST                      3: None
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_FALSE               13 (to 26)
                        20      LOAD_GLOBAL                     1: getcontext
                        22      CALL_FUNCTION                   0
                        24      STORE_FAST                      2: context
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       2: _is_special
                        30      POP_JUMP_IF_TRUE                19 (to 38)
                        32      LOAD_FAST                       1: other
                        34      LOAD_ATTR                       2: _is_special
                        36      POP_JUMP_IF_FALSE               63 (to 126)
                        38      LOAD_FAST                       0: self
                        40      LOAD_METHOD                     3: _isnan
                        42      CALL_METHOD                     0
                        44      STORE_FAST                      3: sn
                        46      LOAD_FAST                       1: other
                        48      LOAD_METHOD                     3: _isnan
                        50      CALL_METHOD                     0
                        52      STORE_FAST                      4: on
                        54      LOAD_FAST                       3: sn
                        56      POP_JUMP_IF_TRUE                31 (to 62)
                        58      LOAD_FAST                       4: on
                        60      POP_JUMP_IF_FALSE               63 (to 126)
                        62      LOAD_FAST                       4: on
                        64      LOAD_CONST                      4: 1
                        66      COMPARE_OP                      2 (==)
                        68      POP_JUMP_IF_FALSE               44 (to 88)
                        70      LOAD_FAST                       3: sn
                        72      LOAD_CONST                      5: 0
                        74      COMPARE_OP                      2 (==)
                        76      POP_JUMP_IF_FALSE               44 (to 88)
                        78      LOAD_FAST                       0: self
                        80      LOAD_METHOD                     4: _fix
                        82      LOAD_FAST                       2: context
                        84      CALL_METHOD                     1
                        86      RETURN_VALUE                    
                        88      LOAD_FAST                       3: sn
                        90      LOAD_CONST                      4: 1
                        92      COMPARE_OP                      2 (==)
                        94      POP_JUMP_IF_FALSE               57 (to 114)
                        96      LOAD_FAST                       4: on
                        98      LOAD_CONST                      5: 0
                        100     COMPARE_OP                      2 (==)
                        102     POP_JUMP_IF_FALSE               57 (to 114)
                        104     LOAD_FAST                       1: other
                        106     LOAD_METHOD                     4: _fix
                        108     LOAD_FAST                       2: context
                        110     CALL_METHOD                     1
                        112     RETURN_VALUE                    
                        114     LOAD_FAST                       0: self
                        116     LOAD_METHOD                     5: _check_nans
                        118     LOAD_FAST                       1: other
                        120     LOAD_FAST                       2: context
                        122     CALL_METHOD                     2
                        124     RETURN_VALUE                    
                        126     LOAD_FAST                       0: self
                        128     LOAD_METHOD                     6: _cmp
                        130     LOAD_FAST                       1: other
                        132     CALL_METHOD                     1
                        134     STORE_FAST                      5: c
                        136     LOAD_FAST                       5: c
                        138     LOAD_CONST                      5: 0
                        140     COMPARE_OP                      2 (==)
                        142     POP_JUMP_IF_FALSE               77 (to 154)
                        144     LOAD_FAST                       0: self
                        146     LOAD_METHOD                     7: compare_total
                        148     LOAD_FAST                       1: other
                        150     CALL_METHOD                     1
                        152     STORE_FAST                      5: c
                        154     LOAD_FAST                       5: c
                        156     LOAD_CONST                      6: -1
                        158     COMPARE_OP                      2 (==)
                        160     POP_JUMP_IF_FALSE               84 (to 168)
                        162     LOAD_FAST                       1: other
                        164     STORE_FAST                      6: ans
                        166     JUMP_FORWARD                    2 (to 172)
                        168     LOAD_FAST                       0: self
                        170     STORE_FAST                      6: ans
                        172     LOAD_FAST                       6: ans
                        174     LOAD_METHOD                     4: _fix
                        176     LOAD_FAST                       2: context
                        178     CALL_METHOD                     1
                        180     RETURN_VALUE                    
                'Decimal.max'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: min
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'getcontext'
                        '_is_special'
                        '_isnan'
                        '_fix'
                        '_check_nans'
                        '_cmp'
                        'compare_total'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'sn'
                        'on'
                        'c'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns the smaller value.\n\n        Like min(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        '
                        True
                        (
                            'raiseit'
                        )
                        None
                        1
                        0
                        -1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_FAST                       2: context
                        14      LOAD_CONST                      3: None
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_FALSE               13 (to 26)
                        20      LOAD_GLOBAL                     1: getcontext
                        22      CALL_FUNCTION                   0
                        24      STORE_FAST                      2: context
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       2: _is_special
                        30      POP_JUMP_IF_TRUE                19 (to 38)
                        32      LOAD_FAST                       1: other
                        34      LOAD_ATTR                       2: _is_special
                        36      POP_JUMP_IF_FALSE               63 (to 126)
                        38      LOAD_FAST                       0: self
                        40      LOAD_METHOD                     3: _isnan
                        42      CALL_METHOD                     0
                        44      STORE_FAST                      3: sn
                        46      LOAD_FAST                       1: other
                        48      LOAD_METHOD                     3: _isnan
                        50      CALL_METHOD                     0
                        52      STORE_FAST                      4: on
                        54      LOAD_FAST                       3: sn
                        56      POP_JUMP_IF_TRUE                31 (to 62)
                        58      LOAD_FAST                       4: on
                        60      POP_JUMP_IF_FALSE               63 (to 126)
                        62      LOAD_FAST                       4: on
                        64      LOAD_CONST                      4: 1
                        66      COMPARE_OP                      2 (==)
                        68      POP_JUMP_IF_FALSE               44 (to 88)
                        70      LOAD_FAST                       3: sn
                        72      LOAD_CONST                      5: 0
                        74      COMPARE_OP                      2 (==)
                        76      POP_JUMP_IF_FALSE               44 (to 88)
                        78      LOAD_FAST                       0: self
                        80      LOAD_METHOD                     4: _fix
                        82      LOAD_FAST                       2: context
                        84      CALL_METHOD                     1
                        86      RETURN_VALUE                    
                        88      LOAD_FAST                       3: sn
                        90      LOAD_CONST                      4: 1
                        92      COMPARE_OP                      2 (==)
                        94      POP_JUMP_IF_FALSE               57 (to 114)
                        96      LOAD_FAST                       4: on
                        98      LOAD_CONST                      5: 0
                        100     COMPARE_OP                      2 (==)
                        102     POP_JUMP_IF_FALSE               57 (to 114)
                        104     LOAD_FAST                       1: other
                        106     LOAD_METHOD                     4: _fix
                        108     LOAD_FAST                       2: context
                        110     CALL_METHOD                     1
                        112     RETURN_VALUE                    
                        114     LOAD_FAST                       0: self
                        116     LOAD_METHOD                     5: _check_nans
                        118     LOAD_FAST                       1: other
                        120     LOAD_FAST                       2: context
                        122     CALL_METHOD                     2
                        124     RETURN_VALUE                    
                        126     LOAD_FAST                       0: self
                        128     LOAD_METHOD                     6: _cmp
                        130     LOAD_FAST                       1: other
                        132     CALL_METHOD                     1
                        134     STORE_FAST                      5: c
                        136     LOAD_FAST                       5: c
                        138     LOAD_CONST                      5: 0
                        140     COMPARE_OP                      2 (==)
                        142     POP_JUMP_IF_FALSE               77 (to 154)
                        144     LOAD_FAST                       0: self
                        146     LOAD_METHOD                     7: compare_total
                        148     LOAD_FAST                       1: other
                        150     CALL_METHOD                     1
                        152     STORE_FAST                      5: c
                        154     LOAD_FAST                       5: c
                        156     LOAD_CONST                      6: -1
                        158     COMPARE_OP                      2 (==)
                        160     POP_JUMP_IF_FALSE               84 (to 168)
                        162     LOAD_FAST                       0: self
                        164     STORE_FAST                      6: ans
                        166     JUMP_FORWARD                    2 (to 172)
                        168     LOAD_FAST                       1: other
                        170     STORE_FAST                      6: ans
                        172     LOAD_FAST                       6: ans
                        174     LOAD_METHOD                     4: _fix
                        176     LOAD_FAST                       2: context
                        178     CALL_METHOD                     1
                        180     RETURN_VALUE                    
                'Decimal.min'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _isinteger
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        '_exp'
                        '_int'
                        'len'
                    [Var Names]
                        'self'
                        'rest'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns whether self is an integer'
                        False
                        0
                        True
                        None
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_FALSE               5 (to 10)
                        6       LOAD_CONST                      1: False
                        8       RETURN_VALUE                    
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: _exp
                        14      LOAD_CONST                      2: 0
                        16      COMPARE_OP                      5 (>=)
                        18      POP_JUMP_IF_FALSE               12 (to 24)
                        20      LOAD_CONST                      3: True
                        22      RETURN_VALUE                    
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       2: _int
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       1: _exp
                        32      LOAD_CONST                      4: None
                        34      BUILD_SLICE                     2
                        36      BINARY_SUBSCR                   
                        38      STORE_FAST                      1: rest
                        40      LOAD_FAST                       1: rest
                        42      LOAD_CONST                      5: '0'
                        44      LOAD_GLOBAL                     3: len
                        46      LOAD_FAST                       1: rest
                        48      CALL_FUNCTION                   1
                        50      BINARY_MULTIPLY                 
                        52      COMPARE_OP                      2 (==)
                        54      RETURN_VALUE                    
                'Decimal._isinteger'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _iseven
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exp'
                        '_int'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns True if self is even.  Assumes self is an integer.'
                        0
                        True
                        -1
                        '02468'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       POP_JUMP_IF_FALSE               7 (to 14)
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       0: _exp
                        8       LOAD_CONST                      1: 0
                        10      COMPARE_OP                      4 (>)
                        12      POP_JUMP_IF_FALSE               9 (to 18)
                        14      LOAD_CONST                      2: True
                        16      RETURN_VALUE                    
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       1: _int
                        22      LOAD_CONST                      3: -1
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       0: _exp
                        28      BINARY_ADD                      
                        30      BINARY_SUBSCR                   
                        32      LOAD_CONST                      4: '02468'
                        34      CONTAINS_OP                     0 (in)
                        36      RETURN_VALUE                    
                'Decimal._iseven'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: adjusted
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exp'
                        'len'
                        '_int'
                        'TypeError'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the adjusted exponent of self'
                        1
                        0
                    [Disassembly]
                        0       SETUP_FINALLY                   11 (to 24)
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _exp
                        6       LOAD_GLOBAL                     1: len
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: _int
                        12      CALL_FUNCTION                   1
                        14      BINARY_ADD                      
                        16      LOAD_CONST                      1: 1
                        18      BINARY_SUBTRACT                 
                        20      POP_BLOCK                       
                        22      RETURN_VALUE                    
                        24      DUP_TOP                         
                        26      LOAD_GLOBAL                     3: TypeError
                        28      JUMP_IF_NOT_EXC_MATCH           21 (to 42)
                        30      POP_TOP                         
                        32      POP_TOP                         
                        34      POP_TOP                         
                        36      POP_EXCEPT                      
                        38      LOAD_CONST                      2: 0
                        40      RETURN_VALUE                    
                        42      RERAISE                         0
                'Decimal.adjusted'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: canonical
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns the same Decimal object.\n\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       RETURN_VALUE                    
                'Decimal.canonical'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: compare_signal
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '_compare_check_nans'
                        'compare'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Compares self to the other operand numerically.\n\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_FAST                       0: self
                        14      LOAD_METHOD                     1: _compare_check_nans
                        16      LOAD_FAST                       1: other
                        18      LOAD_FAST                       2: context
                        20      CALL_METHOD                     2
                        22      STORE_FAST                      3: ans
                        24      LOAD_FAST                       3: ans
                        26      POP_JUMP_IF_FALSE               16 (to 32)
                        28      LOAD_FAST                       3: ans
                        30      RETURN_VALUE                    
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       2: compare
                        36      LOAD_FAST                       1: other
                        38      LOAD_FAST                       2: context
                        40      LOAD_CONST                      3: ('context',)
                        42      CALL_FUNCTION_KW                2
                        44      RETURN_VALUE                    
                'Decimal.compare_signal'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: compare_total
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '_sign'
                        '_NegativeOne'
                        '_One'
                        '_isnan'
                        'len'
                        '_int'
                        '_Zero'
                        '_exp'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'sign'
                        'self_nan'
                        'other_nan'
                        'self_key'
                        'other_key'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Compares self to other using the abstract representations.\n\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n        '
                        True
                        (
                            'raiseit'
                        )
                        1
                        2
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: _sign
                        16      POP_JUMP_IF_FALSE               14 (to 28)
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       1: _sign
                        22      POP_JUMP_IF_TRUE                14 (to 28)
                        24      LOAD_GLOBAL                     2: _NegativeOne
                        26      RETURN_VALUE                    
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       1: _sign
                        32      POP_JUMP_IF_TRUE                22 (to 44)
                        34      LOAD_FAST                       1: other
                        36      LOAD_ATTR                       1: _sign
                        38      POP_JUMP_IF_FALSE               22 (to 44)
                        40      LOAD_GLOBAL                     3: _One
                        42      RETURN_VALUE                    
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       1: _sign
                        48      STORE_FAST                      3: sign
                        50      LOAD_FAST                       0: self
                        52      LOAD_METHOD                     4: _isnan
                        54      CALL_METHOD                     0
                        56      STORE_FAST                      4: self_nan
                        58      LOAD_FAST                       1: other
                        60      LOAD_METHOD                     4: _isnan
                        62      CALL_METHOD                     0
                        64      STORE_FAST                      5: other_nan
                        66      LOAD_FAST                       4: self_nan
                        68      POP_JUMP_IF_TRUE                37 (to 74)
                        70      LOAD_FAST                       5: other_nan
                        72      POP_JUMP_IF_FALSE               130 (to 260)
                        74      LOAD_FAST                       4: self_nan
                        76      LOAD_FAST                       5: other_nan
                        78      COMPARE_OP                      2 (==)
                        80      POP_JUMP_IF_FALSE               79 (to 158)
                        82      LOAD_GLOBAL                     5: len
                        84      LOAD_FAST                       0: self
                        86      LOAD_ATTR                       6: _int
                        88      CALL_FUNCTION                   1
                        90      LOAD_FAST                       0: self
                        92      LOAD_ATTR                       6: _int
                        94      BUILD_TUPLE                     2
                        96      STORE_FAST                      6: self_key
                        98      LOAD_GLOBAL                     5: len
                        100     LOAD_FAST                       1: other
                        102     LOAD_ATTR                       6: _int
                        104     CALL_FUNCTION                   1
                        106     LOAD_FAST                       1: other
                        108     LOAD_ATTR                       6: _int
                        110     BUILD_TUPLE                     2
                        112     STORE_FAST                      7: other_key
                        114     LOAD_FAST                       6: self_key
                        116     LOAD_FAST                       7: other_key
                        118     COMPARE_OP                      0 (<)
                        120     POP_JUMP_IF_FALSE               67 (to 134)
                        122     LOAD_FAST                       3: sign
                        124     POP_JUMP_IF_FALSE               65 (to 130)
                        126     LOAD_GLOBAL                     3: _One
                        128     RETURN_VALUE                    
                        130     LOAD_GLOBAL                     2: _NegativeOne
                        132     RETURN_VALUE                    
                        134     LOAD_FAST                       6: self_key
                        136     LOAD_FAST                       7: other_key
                        138     COMPARE_OP                      4 (>)
                        140     POP_JUMP_IF_FALSE               77 (to 154)
                        142     LOAD_FAST                       3: sign
                        144     POP_JUMP_IF_FALSE               75 (to 150)
                        146     LOAD_GLOBAL                     2: _NegativeOne
                        148     RETURN_VALUE                    
                        150     LOAD_GLOBAL                     3: _One
                        152     RETURN_VALUE                    
                        154     LOAD_GLOBAL                     7: _Zero
                        156     RETURN_VALUE                    
                        158     LOAD_FAST                       3: sign
                        160     POP_JUMP_IF_FALSE               106 (to 212)
                        162     LOAD_FAST                       4: self_nan
                        164     LOAD_CONST                      3: 1
                        166     COMPARE_OP                      2 (==)
                        168     POP_JUMP_IF_FALSE               87 (to 174)
                        170     LOAD_GLOBAL                     2: _NegativeOne
                        172     RETURN_VALUE                    
                        174     LOAD_FAST                       5: other_nan
                        176     LOAD_CONST                      3: 1
                        178     COMPARE_OP                      2 (==)
                        180     POP_JUMP_IF_FALSE               93 (to 186)
                        182     LOAD_GLOBAL                     3: _One
                        184     RETURN_VALUE                    
                        186     LOAD_FAST                       4: self_nan
                        188     LOAD_CONST                      4: 2
                        190     COMPARE_OP                      2 (==)
                        192     POP_JUMP_IF_FALSE               99 (to 198)
                        194     LOAD_GLOBAL                     2: _NegativeOne
                        196     RETURN_VALUE                    
                        198     LOAD_FAST                       5: other_nan
                        200     LOAD_CONST                      4: 2
                        202     COMPARE_OP                      2 (==)
                        204     POP_JUMP_IF_FALSE               105 (to 210)
                        206     LOAD_GLOBAL                     3: _One
                        208     RETURN_VALUE                    
                        210     JUMP_FORWARD                    24 (to 260)
                        212     LOAD_FAST                       4: self_nan
                        214     LOAD_CONST                      3: 1
                        216     COMPARE_OP                      2 (==)
                        218     POP_JUMP_IF_FALSE               112 (to 224)
                        220     LOAD_GLOBAL                     3: _One
                        222     RETURN_VALUE                    
                        224     LOAD_FAST                       5: other_nan
                        226     LOAD_CONST                      3: 1
                        228     COMPARE_OP                      2 (==)
                        230     POP_JUMP_IF_FALSE               118 (to 236)
                        232     LOAD_GLOBAL                     2: _NegativeOne
                        234     RETURN_VALUE                    
                        236     LOAD_FAST                       4: self_nan
                        238     LOAD_CONST                      4: 2
                        240     COMPARE_OP                      2 (==)
                        242     POP_JUMP_IF_FALSE               124 (to 248)
                        244     LOAD_GLOBAL                     3: _One
                        246     RETURN_VALUE                    
                        248     LOAD_FAST                       5: other_nan
                        250     LOAD_CONST                      4: 2
                        252     COMPARE_OP                      2 (==)
                        254     POP_JUMP_IF_FALSE               130 (to 260)
                        256     LOAD_GLOBAL                     2: _NegativeOne
                        258     RETURN_VALUE                    
                        260     LOAD_FAST                       0: self
                        262     LOAD_FAST                       1: other
                        264     COMPARE_OP                      0 (<)
                        266     POP_JUMP_IF_FALSE               136 (to 272)
                        268     LOAD_GLOBAL                     2: _NegativeOne
                        270     RETURN_VALUE                    
                        272     LOAD_FAST                       0: self
                        274     LOAD_FAST                       1: other
                        276     COMPARE_OP                      4 (>)
                        278     POP_JUMP_IF_FALSE               142 (to 284)
                        280     LOAD_GLOBAL                     3: _One
                        282     RETURN_VALUE                    
                        284     LOAD_FAST                       0: self
                        286     LOAD_ATTR                       8: _exp
                        288     LOAD_FAST                       1: other
                        290     LOAD_ATTR                       8: _exp
                        292     COMPARE_OP                      0 (<)
                        294     POP_JUMP_IF_FALSE               154 (to 308)
                        296     LOAD_FAST                       3: sign
                        298     POP_JUMP_IF_FALSE               152 (to 304)
                        300     LOAD_GLOBAL                     3: _One
                        302     RETURN_VALUE                    
                        304     LOAD_GLOBAL                     2: _NegativeOne
                        306     RETURN_VALUE                    
                        308     LOAD_FAST                       0: self
                        310     LOAD_ATTR                       8: _exp
                        312     LOAD_FAST                       1: other
                        314     LOAD_ATTR                       8: _exp
                        316     COMPARE_OP                      4 (>)
                        318     POP_JUMP_IF_FALSE               166 (to 332)
                        320     LOAD_FAST                       3: sign
                        322     POP_JUMP_IF_FALSE               164 (to 328)
                        324     LOAD_GLOBAL                     2: _NegativeOne
                        326     RETURN_VALUE                    
                        328     LOAD_GLOBAL                     3: _One
                        330     RETURN_VALUE                    
                        332     LOAD_GLOBAL                     7: _Zero
                        334     RETURN_VALUE                    
                'Decimal.compare_total'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: compare_total_mag
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'copy_abs'
                        'compare_total'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        's'
                        'o'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Compares self to other using abstract repr., ignoring sign.\n\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_FAST                       0: self
                        14      LOAD_METHOD                     1: copy_abs
                        16      CALL_METHOD                     0
                        18      STORE_FAST                      3: s
                        20      LOAD_FAST                       1: other
                        22      LOAD_METHOD                     1: copy_abs
                        24      CALL_METHOD                     0
                        26      STORE_FAST                      4: o
                        28      LOAD_FAST                       3: s
                        30      LOAD_METHOD                     2: compare_total
                        32      LOAD_FAST                       4: o
                        34      CALL_METHOD                     1
                        36      RETURN_VALUE                    
                'Decimal.compare_total_mag'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: copy_abs
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_dec_from_triple'
                        '_int'
                        '_exp'
                        '_is_special'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns a copy with the sign set to 0. '
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _dec_from_triple
                        2       LOAD_CONST                      1: 0
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: _int
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: _exp
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: _is_special
                        16      CALL_FUNCTION                   4
                        18      RETURN_VALUE                    
                'Decimal.copy_abs'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: copy_negate
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sign'
                        '_dec_from_triple'
                        '_int'
                        '_exp'
                        '_is_special'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns a copy with the sign inverted.'
                        0
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _sign
                        4       POP_JUMP_IF_FALSE               13 (to 26)
                        6       LOAD_GLOBAL                     1: _dec_from_triple
                        8       LOAD_CONST                      1: 0
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _int
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: _exp
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       4: _is_special
                        22      CALL_FUNCTION                   4
                        24      RETURN_VALUE                    
                        26      LOAD_GLOBAL                     1: _dec_from_triple
                        28      LOAD_CONST                      2: 1
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       2: _int
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       3: _exp
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       4: _is_special
                        42      CALL_FUNCTION                   4
                        44      RETURN_VALUE                    
                'Decimal.copy_negate'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: copy_sign
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '_dec_from_triple'
                        '_sign'
                        '_int'
                        '_exp'
                        '_is_special'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns self with the sign of other.'
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_GLOBAL                     1: _dec_from_triple
                        14      LOAD_FAST                       1: other
                        16      LOAD_ATTR                       2: _sign
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       3: _int
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       4: _exp
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       5: _is_special
                        30      CALL_FUNCTION                   4
                        32      RETURN_VALUE                    
                'Decimal.copy_sign'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: exp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 12
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_check_nans'
                        '_isinfinity'
                        '_Zero'
                        '_One'
                        'Decimal'
                        'prec'
                        'adjusted'
                        '_sign'
                        'len'
                        'str'
                        'Emax'
                        '_dec_from_triple'
                        'Etiny'
                        '_WorkRep'
                        'int'
                        'exp'
                        'sign'
                        '_dexp'
                        '_shallow_copy'
                        '_set_rounding'
                        'ROUND_HALF_EVEN'
                        '_fix'
                        'rounding'
                    [Var Names]
                        'self'
                        'context'
                        'ans'
                        'p'
                        'adj'
                        'op'
                        'c'
                        'e'
                        'extra'
                        'coeff'
                        'exp'
                        'rounding'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns e ** self.'
                        None
                        (
                            'context'
                        )
                        -1
                        1
                        0
                        3
                        '1'
                        '0'
                        '9'
                        True
                        5
                        10
                    [Disassembly]
                        0       LOAD_FAST                       1: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      1: context
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _check_nans
                        18      LOAD_FAST                       1: context
                        20      LOAD_CONST                      2: ('context',)
                        22      CALL_FUNCTION_KW                1
                        24      STORE_FAST                      2: ans
                        26      LOAD_FAST                       2: ans
                        28      POP_JUMP_IF_FALSE               17 (to 34)
                        30      LOAD_FAST                       2: ans
                        32      RETURN_VALUE                    
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     2: _isinfinity
                        38      CALL_METHOD                     0
                        40      LOAD_CONST                      3: -1
                        42      COMPARE_OP                      2 (==)
                        44      POP_JUMP_IF_FALSE               25 (to 50)
                        46      LOAD_GLOBAL                     3: _Zero
                        48      RETURN_VALUE                    
                        50      LOAD_FAST                       0: self
                        52      POP_JUMP_IF_TRUE                29 (to 58)
                        54      LOAD_GLOBAL                     4: _One
                        56      RETURN_VALUE                    
                        58      LOAD_FAST                       0: self
                        60      LOAD_METHOD                     2: _isinfinity
                        62      CALL_METHOD                     0
                        64      LOAD_CONST                      4: 1
                        66      COMPARE_OP                      2 (==)
                        68      POP_JUMP_IF_FALSE               39 (to 78)
                        70      LOAD_GLOBAL                     5: Decimal
                        72      LOAD_FAST                       0: self
                        74      CALL_FUNCTION                   1
                        76      RETURN_VALUE                    
                        78      LOAD_FAST                       1: context
                        80      LOAD_ATTR                       6: prec
                        82      STORE_FAST                      3: p
                        84      LOAD_FAST                       0: self
                        86      LOAD_METHOD                     7: adjusted
                        88      CALL_METHOD                     0
                        90      STORE_FAST                      4: adj
                        92      LOAD_FAST                       0: self
                        94      LOAD_ATTR                       8: _sign
                        96      LOAD_CONST                      5: 0
                        98      COMPARE_OP                      2 (==)
                        100     POP_JUMP_IF_FALSE               74 (to 148)
                        102     LOAD_FAST                       4: adj
                        104     LOAD_GLOBAL                     9: len
                        106     LOAD_GLOBAL                     10: str
                        108     LOAD_FAST                       1: context
                        110     LOAD_ATTR                       11: Emax
                        112     LOAD_CONST                      4: 1
                        114     BINARY_ADD                      
                        116     LOAD_CONST                      6: 3
                        118     BINARY_MULTIPLY                 
                        120     CALL_FUNCTION                   1
                        122     CALL_FUNCTION                   1
                        124     COMPARE_OP                      4 (>)
                        126     POP_JUMP_IF_FALSE               74 (to 148)
                        128     LOAD_GLOBAL                     12: _dec_from_triple
                        130     LOAD_CONST                      5: 0
                        132     LOAD_CONST                      7: '1'
                        134     LOAD_FAST                       1: context
                        136     LOAD_ATTR                       11: Emax
                        138     LOAD_CONST                      4: 1
                        140     BINARY_ADD                      
                        142     CALL_FUNCTION                   3
                        144     STORE_FAST                      2: ans
                        146     JUMP_FORWARD                    145 (to 438)
                        148     LOAD_FAST                       0: self
                        150     LOAD_ATTR                       8: _sign
                        152     LOAD_CONST                      4: 1
                        154     COMPARE_OP                      2 (==)
                        156     POP_JUMP_IF_FALSE               105 (to 210)
                        158     LOAD_FAST                       4: adj
                        160     LOAD_GLOBAL                     9: len
                        162     LOAD_GLOBAL                     10: str
                        164     LOAD_FAST                       1: context
                        166     LOAD_METHOD                     13: Etiny
                        168     CALL_METHOD                     0
                        170     UNARY_NEGATIVE                  
                        172     LOAD_CONST                      4: 1
                        174     BINARY_ADD                      
                        176     LOAD_CONST                      6: 3
                        178     BINARY_MULTIPLY                 
                        180     CALL_FUNCTION                   1
                        182     CALL_FUNCTION                   1
                        184     COMPARE_OP                      4 (>)
                        186     POP_JUMP_IF_FALSE               105 (to 210)
                        188     LOAD_GLOBAL                     12: _dec_from_triple
                        190     LOAD_CONST                      5: 0
                        192     LOAD_CONST                      7: '1'
                        194     LOAD_FAST                       1: context
                        196     LOAD_METHOD                     13: Etiny
                        198     CALL_METHOD                     0
                        200     LOAD_CONST                      4: 1
                        202     BINARY_SUBTRACT                 
                        204     CALL_FUNCTION                   3
                        206     STORE_FAST                      2: ans
                        208     JUMP_FORWARD                    114 (to 438)
                        210     LOAD_FAST                       0: self
                        212     LOAD_ATTR                       8: _sign
                        214     LOAD_CONST                      5: 0
                        216     COMPARE_OP                      2 (==)
                        218     POP_JUMP_IF_FALSE               131 (to 262)
                        220     LOAD_FAST                       4: adj
                        222     LOAD_FAST                       3: p
                        224     UNARY_NEGATIVE                  
                        226     COMPARE_OP                      0 (<)
                        228     POP_JUMP_IF_FALSE               131 (to 262)
                        230     LOAD_GLOBAL                     12: _dec_from_triple
                        232     LOAD_CONST                      5: 0
                        234     LOAD_CONST                      7: '1'
                        236     LOAD_CONST                      8: '0'
                        238     LOAD_FAST                       3: p
                        240     LOAD_CONST                      4: 1
                        242     BINARY_SUBTRACT                 
                        244     BINARY_MULTIPLY                 
                        246     BINARY_ADD                      
                        248     LOAD_CONST                      7: '1'
                        250     BINARY_ADD                      
                        252     LOAD_FAST                       3: p
                        254     UNARY_NEGATIVE                  
                        256     CALL_FUNCTION                   3
                        258     STORE_FAST                      2: ans
                        260     JUMP_FORWARD                    88 (to 438)
                        262     LOAD_FAST                       0: self
                        264     LOAD_ATTR                       8: _sign
                        266     LOAD_CONST                      4: 1
                        268     COMPARE_OP                      2 (==)
                        270     POP_JUMP_IF_FALSE               157 (to 314)
                        272     LOAD_FAST                       4: adj
                        274     LOAD_FAST                       3: p
                        276     UNARY_NEGATIVE                  
                        278     LOAD_CONST                      4: 1
                        280     BINARY_SUBTRACT                 
                        282     COMPARE_OP                      0 (<)
                        284     POP_JUMP_IF_FALSE               157 (to 314)
                        286     LOAD_GLOBAL                     12: _dec_from_triple
                        288     LOAD_CONST                      5: 0
                        290     LOAD_CONST                      9: '9'
                        292     LOAD_FAST                       3: p
                        294     LOAD_CONST                      4: 1
                        296     BINARY_ADD                      
                        298     BINARY_MULTIPLY                 
                        300     LOAD_FAST                       3: p
                        302     UNARY_NEGATIVE                  
                        304     LOAD_CONST                      4: 1
                        306     BINARY_SUBTRACT                 
                        308     CALL_FUNCTION                   3
                        310     STORE_FAST                      2: ans
                        312     JUMP_FORWARD                    62 (to 438)
                        314     LOAD_GLOBAL                     14: _WorkRep
                        316     LOAD_FAST                       0: self
                        318     CALL_FUNCTION                   1
                        320     STORE_FAST                      5: op
                        322     LOAD_FAST                       5: op
                        324     LOAD_ATTR                       15: int
                        326     LOAD_FAST                       5: op
                        328     LOAD_ATTR                       16: exp
                        330     ROT_TWO                         
                        332     STORE_FAST                      6: c
                        334     STORE_FAST                      7: e
                        336     LOAD_FAST                       5: op
                        338     LOAD_ATTR                       17: sign
                        340     LOAD_CONST                      4: 1
                        342     COMPARE_OP                      2 (==)
                        344     POP_JUMP_IF_FALSE               176 (to 352)
                        346     LOAD_FAST                       6: c
                        348     UNARY_NEGATIVE                  
                        350     STORE_FAST                      6: c
                        352     LOAD_CONST                      6: 3
                        354     STORE_FAST                      8: extra
                        356     NOP                             
                        358     LOAD_GLOBAL                     18: _dexp
                        360     LOAD_FAST                       6: c
                        362     LOAD_FAST                       7: e
                        364     LOAD_FAST                       3: p
                        366     LOAD_FAST                       8: extra
                        368     BINARY_ADD                      
                        370     CALL_FUNCTION                   3
                        372     UNPACK_SEQUENCE                 2
                        374     STORE_FAST                      9: coeff
                        376     STORE_FAST                      10: exp
                        378     LOAD_FAST                       9: coeff
                        380     LOAD_CONST                      11: 5
                        382     LOAD_CONST                      12: 10
                        384     LOAD_GLOBAL                     9: len
                        386     LOAD_GLOBAL                     10: str
                        388     LOAD_FAST                       9: coeff
                        390     CALL_FUNCTION                   1
                        392     CALL_FUNCTION                   1
                        394     LOAD_FAST                       3: p
                        396     BINARY_SUBTRACT                 
                        398     LOAD_CONST                      4: 1
                        400     BINARY_SUBTRACT                 
                        402     BINARY_POWER                    
                        404     BINARY_MULTIPLY                 
                        406     BINARY_MODULO                   
                        408     POP_JUMP_IF_FALSE               206 (to 412)
                        410     JUMP_FORWARD                    5 (to 422)
                        412     LOAD_FAST                       8: extra
                        414     LOAD_CONST                      6: 3
                        416     INPLACE_ADD                     
                        418     STORE_FAST                      8: extra
                        420     JUMP_ABSOLUTE                   179 (to 358)
                        422     LOAD_GLOBAL                     12: _dec_from_triple
                        424     LOAD_CONST                      5: 0
                        426     LOAD_GLOBAL                     10: str
                        428     LOAD_FAST                       9: coeff
                        430     CALL_FUNCTION                   1
                        432     LOAD_FAST                       10: exp
                        434     CALL_FUNCTION                   3
                        436     STORE_FAST                      2: ans
                        438     LOAD_FAST                       1: context
                        440     LOAD_METHOD                     19: _shallow_copy
                        442     CALL_METHOD                     0
                        444     STORE_FAST                      1: context
                        446     LOAD_FAST                       1: context
                        448     LOAD_METHOD                     20: _set_rounding
                        450     LOAD_GLOBAL                     21: ROUND_HALF_EVEN
                        452     CALL_METHOD                     1
                        454     STORE_FAST                      11: rounding
                        456     LOAD_FAST                       2: ans
                        458     LOAD_METHOD                     22: _fix
                        460     LOAD_FAST                       1: context
                        462     CALL_METHOD                     1
                        464     STORE_FAST                      2: ans
                        466     LOAD_FAST                       11: rounding
                        468     LOAD_FAST                       1: context
                        470     STORE_ATTR                      23: rounding
                        472     LOAD_FAST                       2: ans
                        474     RETURN_VALUE                    
                'Decimal.exp'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_canonical
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is canonical; otherwise return False.\n\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n        '
                        True
                    [Disassembly]
                        0       LOAD_CONST                      1: True
                        2       RETURN_VALUE                    
                'Decimal.is_canonical'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_finite
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is finite; otherwise return False.\n\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       UNARY_NOT                       
                        6       RETURN_VALUE                    
                'Decimal.is_finite'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_infinite
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exp'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is infinite; otherwise return False.'
                        'F'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _exp
                        4       LOAD_CONST                      1: 'F'
                        6       COMPARE_OP                      2 (==)
                        8       RETURN_VALUE                    
                'Decimal.is_infinite'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_nan
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exp'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is a qNaN or sNaN; otherwise return False.'
                        (
                            'n'
                            'N'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _exp
                        4       LOAD_CONST                      1: ('n', 'N')
                        6       CONTAINS_OP                     0 (in)
                        8       RETURN_VALUE                    
                'Decimal.is_nan'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_normal
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        'getcontext'
                        'Emin'
                        'adjusted'
                    [Var Names]
                        'self'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is a normal number; otherwise return False.'
                        False
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_TRUE                5 (to 10)
                        6       LOAD_FAST                       0: self
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_CONST                      1: False
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       1: context
                        16      LOAD_CONST                      2: None
                        18      IS_OP                           0 (is)
                        20      POP_JUMP_IF_FALSE               14 (to 28)
                        22      LOAD_GLOBAL                     1: getcontext
                        24      CALL_FUNCTION                   0
                        26      STORE_FAST                      1: context
                        28      LOAD_FAST                       1: context
                        30      LOAD_ATTR                       2: Emin
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     3: adjusted
                        36      CALL_METHOD                     0
                        38      COMPARE_OP                      1 (<=)
                        40      RETURN_VALUE                    
                'Decimal.is_normal'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_qnan
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exp'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is a quiet NaN; otherwise return False.'
                        'n'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _exp
                        4       LOAD_CONST                      1: 'n'
                        6       COMPARE_OP                      2 (==)
                        8       RETURN_VALUE                    
                'Decimal.is_qnan'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_signed
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sign'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is negative; otherwise return False.'
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _sign
                        4       LOAD_CONST                      1: 1
                        6       COMPARE_OP                      2 (==)
                        8       RETURN_VALUE                    
                'Decimal.is_signed'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_snan
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exp'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is a signaling NaN; otherwise return False.'
                        'N'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _exp
                        4       LOAD_CONST                      1: 'N'
                        6       COMPARE_OP                      2 (==)
                        8       RETURN_VALUE                    
                'Decimal.is_snan'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_subnormal
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        'getcontext'
                        'adjusted'
                        'Emin'
                    [Var Names]
                        'self'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is subnormal; otherwise return False.'
                        False
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       POP_JUMP_IF_TRUE                5 (to 10)
                        6       LOAD_FAST                       0: self
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_CONST                      1: False
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       1: context
                        16      LOAD_CONST                      2: None
                        18      IS_OP                           0 (is)
                        20      POP_JUMP_IF_FALSE               14 (to 28)
                        22      LOAD_GLOBAL                     1: getcontext
                        24      CALL_FUNCTION                   0
                        26      STORE_FAST                      1: context
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     2: adjusted
                        32      CALL_METHOD                     0
                        34      LOAD_FAST                       1: context
                        36      LOAD_ATTR                       3: Emin
                        38      COMPARE_OP                      0 (<)
                        40      RETURN_VALUE                    
                'Decimal.is_subnormal'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_zero
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_special'
                        '_int'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is a zero; otherwise return False.'
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_special
                        4       UNARY_NOT                       
                        6       JUMP_IF_FALSE_OR_POP            8 (to 16)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: _int
                        12      LOAD_CONST                      1: '0'
                        14      COMPARE_OP                      2 (==)
                        16      RETURN_VALUE                    
                'Decimal.is_zero'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _ln_exp_bound
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exp'
                        'len'
                        '_int'
                        'str'
                        '_WorkRep'
                        'int'
                        'exp'
                    [Var Names]
                        'self'
                        'adj'
                        'op'
                        'c'
                        'e'
                        'num'
                        'den'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Compute a lower bound for the adjusted exponent of self.ln().\n        In other words, compute r such that self.ln() >= 10**r.  Assumes\n        that self is finite and positive and that self != 1.\n        '
                        1
                        23
                        10
                        -2
                        -1
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _exp
                        4       LOAD_GLOBAL                     1: len
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: _int
                        10      CALL_FUNCTION                   1
                        12      BINARY_ADD                      
                        14      LOAD_CONST                      1: 1
                        16      BINARY_SUBTRACT                 
                        18      STORE_FAST                      1: adj
                        20      LOAD_FAST                       1: adj
                        22      LOAD_CONST                      1: 1
                        24      COMPARE_OP                      5 (>=)
                        26      POP_JUMP_IF_FALSE               26 (to 52)
                        28      LOAD_GLOBAL                     1: len
                        30      LOAD_GLOBAL                     3: str
                        32      LOAD_FAST                       1: adj
                        34      LOAD_CONST                      2: 23
                        36      BINARY_MULTIPLY                 
                        38      LOAD_CONST                      3: 10
                        40      BINARY_FLOOR_DIVIDE             
                        42      CALL_FUNCTION                   1
                        44      CALL_FUNCTION                   1
                        46      LOAD_CONST                      1: 1
                        48      BINARY_SUBTRACT                 
                        50      RETURN_VALUE                    
                        52      LOAD_FAST                       1: adj
                        54      LOAD_CONST                      4: -2
                        56      COMPARE_OP                      1 (<=)
                        58      POP_JUMP_IF_FALSE               44 (to 88)
                        60      LOAD_GLOBAL                     1: len
                        62      LOAD_GLOBAL                     3: str
                        64      LOAD_CONST                      5: -1
                        66      LOAD_FAST                       1: adj
                        68      BINARY_SUBTRACT                 
                        70      LOAD_CONST                      2: 23
                        72      BINARY_MULTIPLY                 
                        74      LOAD_CONST                      3: 10
                        76      BINARY_FLOOR_DIVIDE             
                        78      CALL_FUNCTION                   1
                        80      CALL_FUNCTION                   1
                        82      LOAD_CONST                      1: 1
                        84      BINARY_SUBTRACT                 
                        86      RETURN_VALUE                    
                        88      LOAD_GLOBAL                     4: _WorkRep
                        90      LOAD_FAST                       0: self
                        92      CALL_FUNCTION                   1
                        94      STORE_FAST                      2: op
                        96      LOAD_FAST                       2: op
                        98      LOAD_ATTR                       5: int
                        100     LOAD_FAST                       2: op
                        102     LOAD_ATTR                       6: exp
                        104     ROT_TWO                         
                        106     STORE_FAST                      3: c
                        108     STORE_FAST                      4: e
                        110     LOAD_FAST                       1: adj
                        112     LOAD_CONST                      6: 0
                        114     COMPARE_OP                      2 (==)
                        116     POP_JUMP_IF_FALSE               84 (to 168)
                        118     LOAD_GLOBAL                     3: str
                        120     LOAD_FAST                       3: c
                        122     LOAD_CONST                      3: 10
                        124     LOAD_FAST                       4: e
                        126     UNARY_NEGATIVE                  
                        128     BINARY_POWER                    
                        130     BINARY_SUBTRACT                 
                        132     CALL_FUNCTION                   1
                        134     STORE_FAST                      5: num
                        136     LOAD_GLOBAL                     3: str
                        138     LOAD_FAST                       3: c
                        140     CALL_FUNCTION                   1
                        142     STORE_FAST                      6: den
                        144     LOAD_GLOBAL                     1: len
                        146     LOAD_FAST                       5: num
                        148     CALL_FUNCTION                   1
                        150     LOAD_GLOBAL                     1: len
                        152     LOAD_FAST                       6: den
                        154     CALL_FUNCTION                   1
                        156     BINARY_SUBTRACT                 
                        158     LOAD_FAST                       5: num
                        160     LOAD_FAST                       6: den
                        162     COMPARE_OP                      0 (<)
                        164     BINARY_SUBTRACT                 
                        166     RETURN_VALUE                    
                        168     LOAD_FAST                       4: e
                        170     LOAD_GLOBAL                     1: len
                        172     LOAD_GLOBAL                     3: str
                        174     LOAD_CONST                      3: 10
                        176     LOAD_FAST                       4: e
                        178     UNARY_NEGATIVE                  
                        180     BINARY_POWER                    
                        182     LOAD_FAST                       3: c
                        184     BINARY_SUBTRACT                 
                        186     CALL_FUNCTION                   1
                        188     CALL_FUNCTION                   1
                        190     BINARY_ADD                      
                        192     LOAD_CONST                      1: 1
                        194     BINARY_SUBTRACT                 
                        196     RETURN_VALUE                    
                'Decimal._ln_exp_bound'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: ln
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 10
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_check_nans'
                        '_NegativeInfinity'
                        '_isinfinity'
                        '_Infinity'
                        '_One'
                        '_Zero'
                        '_sign'
                        '_raise_error'
                        'InvalidOperation'
                        '_WorkRep'
                        'int'
                        'exp'
                        'prec'
                        '_ln_exp_bound'
                        '_dlog'
                        'len'
                        'str'
                        'abs'
                        '_dec_from_triple'
                        '_shallow_copy'
                        '_set_rounding'
                        'ROUND_HALF_EVEN'
                        '_fix'
                        'rounding'
                    [Var Names]
                        'self'
                        'context'
                        'ans'
                        'op'
                        'c'
                        'e'
                        'p'
                        'places'
                        'coeff'
                        'rounding'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns the natural (base e) logarithm of self.'
                        None
                        (
                            'context'
                        )
                        1
                        'ln of a negative value'
                        2
                        True
                        5
                        10
                        3
                        0
                    [Disassembly]
                        0       LOAD_FAST                       1: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      1: context
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _check_nans
                        18      LOAD_FAST                       1: context
                        20      LOAD_CONST                      2: ('context',)
                        22      CALL_FUNCTION_KW                1
                        24      STORE_FAST                      2: ans
                        26      LOAD_FAST                       2: ans
                        28      POP_JUMP_IF_FALSE               17 (to 34)
                        30      LOAD_FAST                       2: ans
                        32      RETURN_VALUE                    
                        34      LOAD_FAST                       0: self
                        36      POP_JUMP_IF_TRUE                21 (to 42)
                        38      LOAD_GLOBAL                     2: _NegativeInfinity
                        40      RETURN_VALUE                    
                        42      LOAD_FAST                       0: self
                        44      LOAD_METHOD                     3: _isinfinity
                        46      CALL_METHOD                     0
                        48      LOAD_CONST                      3: 1
                        50      COMPARE_OP                      2 (==)
                        52      POP_JUMP_IF_FALSE               29 (to 58)
                        54      LOAD_GLOBAL                     4: _Infinity
                        56      RETURN_VALUE                    
                        58      LOAD_FAST                       0: self
                        60      LOAD_GLOBAL                     5: _One
                        62      COMPARE_OP                      2 (==)
                        64      POP_JUMP_IF_FALSE               35 (to 70)
                        66      LOAD_GLOBAL                     6: _Zero
                        68      RETURN_VALUE                    
                        70      LOAD_FAST                       0: self
                        72      LOAD_ATTR                       7: _sign
                        74      LOAD_CONST                      3: 1
                        76      COMPARE_OP                      2 (==)
                        78      POP_JUMP_IF_FALSE               46 (to 92)
                        80      LOAD_FAST                       1: context
                        82      LOAD_METHOD                     8: _raise_error
                        84      LOAD_GLOBAL                     9: InvalidOperation
                        86      LOAD_CONST                      4: 'ln of a negative value'
                        88      CALL_METHOD                     2
                        90      RETURN_VALUE                    
                        92      LOAD_GLOBAL                     10: _WorkRep
                        94      LOAD_FAST                       0: self
                        96      CALL_FUNCTION                   1
                        98      STORE_FAST                      3: op
                        100     LOAD_FAST                       3: op
                        102     LOAD_ATTR                       11: int
                        104     LOAD_FAST                       3: op
                        106     LOAD_ATTR                       12: exp
                        108     ROT_TWO                         
                        110     STORE_FAST                      4: c
                        112     STORE_FAST                      5: e
                        114     LOAD_FAST                       1: context
                        116     LOAD_ATTR                       13: prec
                        118     STORE_FAST                      6: p
                        120     LOAD_FAST                       6: p
                        122     LOAD_FAST                       0: self
                        124     LOAD_METHOD                     14: _ln_exp_bound
                        126     CALL_METHOD                     0
                        128     BINARY_SUBTRACT                 
                        130     LOAD_CONST                      5: 2
                        132     BINARY_ADD                      
                        134     STORE_FAST                      7: places
                        136     NOP                             
                        138     LOAD_GLOBAL                     15: _dlog
                        140     LOAD_FAST                       4: c
                        142     LOAD_FAST                       5: e
                        144     LOAD_FAST                       7: places
                        146     CALL_FUNCTION                   3
                        148     STORE_FAST                      8: coeff
                        150     LOAD_FAST                       8: coeff
                        152     LOAD_CONST                      7: 5
                        154     LOAD_CONST                      8: 10
                        156     LOAD_GLOBAL                     16: len
                        158     LOAD_GLOBAL                     17: str
                        160     LOAD_GLOBAL                     18: abs
                        162     LOAD_FAST                       8: coeff
                        164     CALL_FUNCTION                   1
                        166     CALL_FUNCTION                   1
                        168     CALL_FUNCTION                   1
                        170     LOAD_FAST                       6: p
                        172     BINARY_SUBTRACT                 
                        174     LOAD_CONST                      3: 1
                        176     BINARY_SUBTRACT                 
                        178     BINARY_POWER                    
                        180     BINARY_MULTIPLY                 
                        182     BINARY_MODULO                   
                        184     POP_JUMP_IF_FALSE               94 (to 188)
                        186     JUMP_FORWARD                    5 (to 198)
                        188     LOAD_FAST                       7: places
                        190     LOAD_CONST                      9: 3
                        192     INPLACE_ADD                     
                        194     STORE_FAST                      7: places
                        196     JUMP_ABSOLUTE                   69 (to 138)
                        198     LOAD_GLOBAL                     19: _dec_from_triple
                        200     LOAD_GLOBAL                     11: int
                        202     LOAD_FAST                       8: coeff
                        204     LOAD_CONST                      10: 0
                        206     COMPARE_OP                      0 (<)
                        208     CALL_FUNCTION                   1
                        210     LOAD_GLOBAL                     17: str
                        212     LOAD_GLOBAL                     18: abs
                        214     LOAD_FAST                       8: coeff
                        216     CALL_FUNCTION                   1
                        218     CALL_FUNCTION                   1
                        220     LOAD_FAST                       7: places
                        222     UNARY_NEGATIVE                  
                        224     CALL_FUNCTION                   3
                        226     STORE_FAST                      2: ans
                        228     LOAD_FAST                       1: context
                        230     LOAD_METHOD                     20: _shallow_copy
                        232     CALL_METHOD                     0
                        234     STORE_FAST                      1: context
                        236     LOAD_FAST                       1: context
                        238     LOAD_METHOD                     21: _set_rounding
                        240     LOAD_GLOBAL                     22: ROUND_HALF_EVEN
                        242     CALL_METHOD                     1
                        244     STORE_FAST                      9: rounding
                        246     LOAD_FAST                       2: ans
                        248     LOAD_METHOD                     23: _fix
                        250     LOAD_FAST                       1: context
                        252     CALL_METHOD                     1
                        254     STORE_FAST                      2: ans
                        256     LOAD_FAST                       9: rounding
                        258     LOAD_FAST                       1: context
                        260     STORE_ATTR                      24: rounding
                        262     LOAD_FAST                       2: ans
                        264     RETURN_VALUE                    
                'Decimal.ln'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _log10_exp_bound
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exp'
                        'len'
                        '_int'
                        'str'
                        '_WorkRep'
                        'int'
                        'exp'
                    [Var Names]
                        'self'
                        'adj'
                        'op'
                        'c'
                        'e'
                        'num'
                        'den'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Compute a lower bound for the adjusted exponent of self.log10().\n        In other words, find r such that self.log10() >= 10**r.\n        Assumes that self is finite and positive and that self != 1.\n        '
                        1
                        -2
                        -1
                        0
                        10
                        231
                        2
                        '231'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _exp
                        4       LOAD_GLOBAL                     1: len
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: _int
                        10      CALL_FUNCTION                   1
                        12      BINARY_ADD                      
                        14      LOAD_CONST                      1: 1
                        16      BINARY_SUBTRACT                 
                        18      STORE_FAST                      1: adj
                        20      LOAD_FAST                       1: adj
                        22      LOAD_CONST                      1: 1
                        24      COMPARE_OP                      5 (>=)
                        26      POP_JUMP_IF_FALSE               22 (to 44)
                        28      LOAD_GLOBAL                     1: len
                        30      LOAD_GLOBAL                     3: str
                        32      LOAD_FAST                       1: adj
                        34      CALL_FUNCTION                   1
                        36      CALL_FUNCTION                   1
                        38      LOAD_CONST                      1: 1
                        40      BINARY_SUBTRACT                 
                        42      RETURN_VALUE                    
                        44      LOAD_FAST                       1: adj
                        46      LOAD_CONST                      2: -2
                        48      COMPARE_OP                      1 (<=)
                        50      POP_JUMP_IF_FALSE               36 (to 72)
                        52      LOAD_GLOBAL                     1: len
                        54      LOAD_GLOBAL                     3: str
                        56      LOAD_CONST                      3: -1
                        58      LOAD_FAST                       1: adj
                        60      BINARY_SUBTRACT                 
                        62      CALL_FUNCTION                   1
                        64      CALL_FUNCTION                   1
                        66      LOAD_CONST                      1: 1
                        68      BINARY_SUBTRACT                 
                        70      RETURN_VALUE                    
                        72      LOAD_GLOBAL                     4: _WorkRep
                        74      LOAD_FAST                       0: self
                        76      CALL_FUNCTION                   1
                        78      STORE_FAST                      2: op
                        80      LOAD_FAST                       2: op
                        82      LOAD_ATTR                       5: int
                        84      LOAD_FAST                       2: op
                        86      LOAD_ATTR                       6: exp
                        88      ROT_TWO                         
                        90      STORE_FAST                      3: c
                        92      STORE_FAST                      4: e
                        94      LOAD_FAST                       1: adj
                        96      LOAD_CONST                      4: 0
                        98      COMPARE_OP                      2 (==)
                        100     POP_JUMP_IF_FALSE               80 (to 160)
                        102     LOAD_GLOBAL                     3: str
                        104     LOAD_FAST                       3: c
                        106     LOAD_CONST                      5: 10
                        108     LOAD_FAST                       4: e
                        110     UNARY_NEGATIVE                  
                        112     BINARY_POWER                    
                        114     BINARY_SUBTRACT                 
                        116     CALL_FUNCTION                   1
                        118     STORE_FAST                      5: num
                        120     LOAD_GLOBAL                     3: str
                        122     LOAD_CONST                      6: 231
                        124     LOAD_FAST                       3: c
                        126     BINARY_MULTIPLY                 
                        128     CALL_FUNCTION                   1
                        130     STORE_FAST                      6: den
                        132     LOAD_GLOBAL                     1: len
                        134     LOAD_FAST                       5: num
                        136     CALL_FUNCTION                   1
                        138     LOAD_GLOBAL                     1: len
                        140     LOAD_FAST                       6: den
                        142     CALL_FUNCTION                   1
                        144     BINARY_SUBTRACT                 
                        146     LOAD_FAST                       5: num
                        148     LOAD_FAST                       6: den
                        150     COMPARE_OP                      0 (<)
                        152     BINARY_SUBTRACT                 
                        154     LOAD_CONST                      7: 2
                        156     BINARY_ADD                      
                        158     RETURN_VALUE                    
                        160     LOAD_GLOBAL                     3: str
                        162     LOAD_CONST                      5: 10
                        164     LOAD_FAST                       4: e
                        166     UNARY_NEGATIVE                  
                        168     BINARY_POWER                    
                        170     LOAD_FAST                       3: c
                        172     BINARY_SUBTRACT                 
                        174     CALL_FUNCTION                   1
                        176     STORE_FAST                      5: num
                        178     LOAD_GLOBAL                     1: len
                        180     LOAD_FAST                       5: num
                        182     CALL_FUNCTION                   1
                        184     LOAD_FAST                       4: e
                        186     BINARY_ADD                      
                        188     LOAD_FAST                       5: num
                        190     LOAD_CONST                      8: '231'
                        192     COMPARE_OP                      0 (<)
                        194     BINARY_SUBTRACT                 
                        196     LOAD_CONST                      1: 1
                        198     BINARY_SUBTRACT                 
                        200     RETURN_VALUE                    
                'Decimal._log10_exp_bound'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: log10
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 10
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_check_nans'
                        '_NegativeInfinity'
                        '_isinfinity'
                        '_Infinity'
                        '_sign'
                        '_raise_error'
                        'InvalidOperation'
                        '_int'
                        'len'
                        'Decimal'
                        '_exp'
                        '_WorkRep'
                        'int'
                        'exp'
                        'prec'
                        '_log10_exp_bound'
                        '_dlog10'
                        'str'
                        'abs'
                        '_dec_from_triple'
                        '_shallow_copy'
                        '_set_rounding'
                        'ROUND_HALF_EVEN'
                        '_fix'
                        'rounding'
                    [Var Names]
                        'self'
                        'context'
                        'ans'
                        'op'
                        'c'
                        'e'
                        'p'
                        'places'
                        'coeff'
                        'rounding'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns the base 10 logarithm of self.'
                        None
                        (
                            'context'
                        )
                        1
                        'log10 of a negative value'
                        0
                        '1'
                        '0'
                        2
                        True
                        5
                        10
                        3
                    [Disassembly]
                        0       LOAD_FAST                       1: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      1: context
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _check_nans
                        18      LOAD_FAST                       1: context
                        20      LOAD_CONST                      2: ('context',)
                        22      CALL_FUNCTION_KW                1
                        24      STORE_FAST                      2: ans
                        26      LOAD_FAST                       2: ans
                        28      POP_JUMP_IF_FALSE               17 (to 34)
                        30      LOAD_FAST                       2: ans
                        32      RETURN_VALUE                    
                        34      LOAD_FAST                       0: self
                        36      POP_JUMP_IF_TRUE                21 (to 42)
                        38      LOAD_GLOBAL                     2: _NegativeInfinity
                        40      RETURN_VALUE                    
                        42      LOAD_FAST                       0: self
                        44      LOAD_METHOD                     3: _isinfinity
                        46      CALL_METHOD                     0
                        48      LOAD_CONST                      3: 1
                        50      COMPARE_OP                      2 (==)
                        52      POP_JUMP_IF_FALSE               29 (to 58)
                        54      LOAD_GLOBAL                     4: _Infinity
                        56      RETURN_VALUE                    
                        58      LOAD_FAST                       0: self
                        60      LOAD_ATTR                       5: _sign
                        62      LOAD_CONST                      3: 1
                        64      COMPARE_OP                      2 (==)
                        66      POP_JUMP_IF_FALSE               40 (to 80)
                        68      LOAD_FAST                       1: context
                        70      LOAD_METHOD                     6: _raise_error
                        72      LOAD_GLOBAL                     7: InvalidOperation
                        74      LOAD_CONST                      4: 'log10 of a negative value'
                        76      CALL_METHOD                     2
                        78      RETURN_VALUE                    
                        80      LOAD_FAST                       0: self
                        82      LOAD_ATTR                       8: _int
                        84      LOAD_CONST                      5: 0
                        86      BINARY_SUBSCR                   
                        88      LOAD_CONST                      6: '1'
                        90      COMPARE_OP                      2 (==)
                        92      POP_JUMP_IF_FALSE               76 (to 152)
                        94      LOAD_FAST                       0: self
                        96      LOAD_ATTR                       8: _int
                        98      LOAD_CONST                      3: 1
                        100     LOAD_CONST                      1: None
                        102     BUILD_SLICE                     2
                        104     BINARY_SUBSCR                   
                        106     LOAD_CONST                      7: '0'
                        108     LOAD_GLOBAL                     9: len
                        110     LOAD_FAST                       0: self
                        112     LOAD_ATTR                       8: _int
                        114     CALL_FUNCTION                   1
                        116     LOAD_CONST                      3: 1
                        118     BINARY_SUBTRACT                 
                        120     BINARY_MULTIPLY                 
                        122     COMPARE_OP                      2 (==)
                        124     POP_JUMP_IF_FALSE               76 (to 152)
                        126     LOAD_GLOBAL                     10: Decimal
                        128     LOAD_FAST                       0: self
                        130     LOAD_ATTR                       11: _exp
                        132     LOAD_GLOBAL                     9: len
                        134     LOAD_FAST                       0: self
                        136     LOAD_ATTR                       8: _int
                        138     CALL_FUNCTION                   1
                        140     BINARY_ADD                      
                        142     LOAD_CONST                      3: 1
                        144     BINARY_SUBTRACT                 
                        146     CALL_FUNCTION                   1
                        148     STORE_FAST                      2: ans
                        150     JUMP_FORWARD                    68 (to 288)
                        152     LOAD_GLOBAL                     12: _WorkRep
                        154     LOAD_FAST                       0: self
                        156     CALL_FUNCTION                   1
                        158     STORE_FAST                      3: op
                        160     LOAD_FAST                       3: op
                        162     LOAD_ATTR                       13: int
                        164     LOAD_FAST                       3: op
                        166     LOAD_ATTR                       14: exp
                        168     ROT_TWO                         
                        170     STORE_FAST                      4: c
                        172     STORE_FAST                      5: e
                        174     LOAD_FAST                       1: context
                        176     LOAD_ATTR                       15: prec
                        178     STORE_FAST                      6: p
                        180     LOAD_FAST                       6: p
                        182     LOAD_FAST                       0: self
                        184     LOAD_METHOD                     16: _log10_exp_bound
                        186     CALL_METHOD                     0
                        188     BINARY_SUBTRACT                 
                        190     LOAD_CONST                      8: 2
                        192     BINARY_ADD                      
                        194     STORE_FAST                      7: places
                        196     NOP                             
                        198     LOAD_GLOBAL                     17: _dlog10
                        200     LOAD_FAST                       4: c
                        202     LOAD_FAST                       5: e
                        204     LOAD_FAST                       7: places
                        206     CALL_FUNCTION                   3
                        208     STORE_FAST                      8: coeff
                        210     LOAD_FAST                       8: coeff
                        212     LOAD_CONST                      10: 5
                        214     LOAD_CONST                      11: 10
                        216     LOAD_GLOBAL                     9: len
                        218     LOAD_GLOBAL                     18: str
                        220     LOAD_GLOBAL                     19: abs
                        222     LOAD_FAST                       8: coeff
                        224     CALL_FUNCTION                   1
                        226     CALL_FUNCTION                   1
                        228     CALL_FUNCTION                   1
                        230     LOAD_FAST                       6: p
                        232     BINARY_SUBTRACT                 
                        234     LOAD_CONST                      3: 1
                        236     BINARY_SUBTRACT                 
                        238     BINARY_POWER                    
                        240     BINARY_MULTIPLY                 
                        242     BINARY_MODULO                   
                        244     POP_JUMP_IF_FALSE               124 (to 248)
                        246     JUMP_FORWARD                    5 (to 258)
                        248     LOAD_FAST                       7: places
                        250     LOAD_CONST                      12: 3
                        252     INPLACE_ADD                     
                        254     STORE_FAST                      7: places
                        256     JUMP_ABSOLUTE                   99 (to 198)
                        258     LOAD_GLOBAL                     20: _dec_from_triple
                        260     LOAD_GLOBAL                     13: int
                        262     LOAD_FAST                       8: coeff
                        264     LOAD_CONST                      5: 0
                        266     COMPARE_OP                      0 (<)
                        268     CALL_FUNCTION                   1
                        270     LOAD_GLOBAL                     18: str
                        272     LOAD_GLOBAL                     19: abs
                        274     LOAD_FAST                       8: coeff
                        276     CALL_FUNCTION                   1
                        278     CALL_FUNCTION                   1
                        280     LOAD_FAST                       7: places
                        282     UNARY_NEGATIVE                  
                        284     CALL_FUNCTION                   3
                        286     STORE_FAST                      2: ans
                        288     LOAD_FAST                       1: context
                        290     LOAD_METHOD                     21: _shallow_copy
                        292     CALL_METHOD                     0
                        294     STORE_FAST                      1: context
                        296     LOAD_FAST                       1: context
                        298     LOAD_METHOD                     22: _set_rounding
                        300     LOAD_GLOBAL                     23: ROUND_HALF_EVEN
                        302     CALL_METHOD                     1
                        304     STORE_FAST                      9: rounding
                        306     LOAD_FAST                       2: ans
                        308     LOAD_METHOD                     24: _fix
                        310     LOAD_FAST                       1: context
                        312     CALL_METHOD                     1
                        314     STORE_FAST                      2: ans
                        316     LOAD_FAST                       9: rounding
                        318     LOAD_FAST                       1: context
                        320     STORE_ATTR                      25: rounding
                        322     LOAD_FAST                       2: ans
                        324     RETURN_VALUE                    
                'Decimal.log10'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: logb
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_check_nans'
                        'getcontext'
                        '_isinfinity'
                        '_Infinity'
                        '_raise_error'
                        'DivisionByZero'
                        'Decimal'
                        'adjusted'
                        '_fix'
                    [Var Names]
                        'self'
                        'context'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        " Returns the exponent of the magnitude of self's MSD.\n\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of self (as though it were truncated\n        to a single digit while maintaining the value of that digit and\n        without limiting the resulting exponent).\n        "
                        (
                            'context'
                        )
                        None
                        'logb(0)'
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _check_nans
                        4       LOAD_FAST                       1: context
                        6       LOAD_CONST                      1: ('context',)
                        8       CALL_FUNCTION_KW                1
                        10      STORE_FAST                      2: ans
                        12      LOAD_FAST                       2: ans
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_FAST                       2: ans
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       1: context
                        22      LOAD_CONST                      2: None
                        24      IS_OP                           0 (is)
                        26      POP_JUMP_IF_FALSE               17 (to 34)
                        28      LOAD_GLOBAL                     1: getcontext
                        30      CALL_FUNCTION                   0
                        32      STORE_FAST                      1: context
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     2: _isinfinity
                        38      CALL_METHOD                     0
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_GLOBAL                     3: _Infinity
                        44      RETURN_VALUE                    
                        46      LOAD_FAST                       0: self
                        48      POP_JUMP_IF_TRUE                32 (to 64)
                        50      LOAD_FAST                       1: context
                        52      LOAD_METHOD                     4: _raise_error
                        54      LOAD_GLOBAL                     5: DivisionByZero
                        56      LOAD_CONST                      3: 'logb(0)'
                        58      LOAD_CONST                      4: 1
                        60      CALL_METHOD                     3
                        62      RETURN_VALUE                    
                        64      LOAD_GLOBAL                     6: Decimal
                        66      LOAD_FAST                       0: self
                        68      LOAD_METHOD                     7: adjusted
                        70      CALL_METHOD                     0
                        72      CALL_FUNCTION                   1
                        74      STORE_FAST                      2: ans
                        76      LOAD_FAST                       2: ans
                        78      LOAD_METHOD                     8: _fix
                        80      LOAD_FAST                       1: context
                        82      CALL_METHOD                     1
                        84      RETURN_VALUE                    
                'Decimal.logb'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _islogical
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sign'
                        '_exp'
                        '_int'
                    [Var Names]
                        'self'
                        'dig'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if self is a logical operand.\n\n        For being logical, it must be a finite number with a sign of 0,\n        an exponent of 0, and a coefficient whose digits must all be\n        either 0 or 1.\n        '
                        0
                        False
                        '01'
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _sign
                        4       LOAD_CONST                      1: 0
                        6       COMPARE_OP                      3 (!=)
                        8       POP_JUMP_IF_TRUE                10 (to 20)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: _exp
                        14      LOAD_CONST                      1: 0
                        16      COMPARE_OP                      3 (!=)
                        18      POP_JUMP_IF_FALSE               12 (to 24)
                        20      LOAD_CONST                      2: False
                        22      RETURN_VALUE                    
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       2: _int
                        28      GET_ITER                        
                        30      FOR_ITER                        9 (to 50)
                        32      STORE_FAST                      1: dig
                        34      LOAD_FAST                       1: dig
                        36      LOAD_CONST                      3: '01'
                        38      CONTAINS_OP                     1 (not in)
                        40      POP_JUMP_IF_FALSE               24 (to 48)
                        42      POP_TOP                         
                        44      LOAD_CONST                      2: False
                        46      RETURN_VALUE                    
                        48      JUMP_ABSOLUTE                   15 (to 30)
                        50      LOAD_CONST                      4: True
                        52      RETURN_VALUE                    
                'Decimal._islogical'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _fill_logical
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'prec'
                        'len'
                    [Var Names]
                        'self'
                        'context'
                        'opa'
                        'opb'
                        'dif'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       1: context
                        2       LOAD_ATTR                       0: prec
                        4       LOAD_GLOBAL                     1: len
                        6       LOAD_FAST                       2: opa
                        8       CALL_FUNCTION                   1
                        10      BINARY_SUBTRACT                 
                        12      STORE_FAST                      4: dif
                        14      LOAD_FAST                       4: dif
                        16      LOAD_CONST                      1: 0
                        18      COMPARE_OP                      4 (>)
                        20      POP_JUMP_IF_FALSE               18 (to 36)
                        22      LOAD_CONST                      2: '0'
                        24      LOAD_FAST                       4: dif
                        26      BINARY_MULTIPLY                 
                        28      LOAD_FAST                       2: opa
                        30      BINARY_ADD                      
                        32      STORE_FAST                      2: opa
                        34      JUMP_FORWARD                    12 (to 60)
                        36      LOAD_FAST                       4: dif
                        38      LOAD_CONST                      1: 0
                        40      COMPARE_OP                      0 (<)
                        42      POP_JUMP_IF_FALSE               30 (to 60)
                        44      LOAD_FAST                       2: opa
                        46      LOAD_FAST                       1: context
                        48      LOAD_ATTR                       0: prec
                        50      UNARY_NEGATIVE                  
                        52      LOAD_CONST                      0: None
                        54      BUILD_SLICE                     2
                        56      BINARY_SUBSCR                   
                        58      STORE_FAST                      2: opa
                        60      LOAD_FAST                       1: context
                        62      LOAD_ATTR                       0: prec
                        64      LOAD_GLOBAL                     1: len
                        66      LOAD_FAST                       3: opb
                        68      CALL_FUNCTION                   1
                        70      BINARY_SUBTRACT                 
                        72      STORE_FAST                      4: dif
                        74      LOAD_FAST                       4: dif
                        76      LOAD_CONST                      1: 0
                        78      COMPARE_OP                      4 (>)
                        80      POP_JUMP_IF_FALSE               51 (to 102)
                        82      LOAD_CONST                      2: '0'
                        84      LOAD_FAST                       4: dif
                        86      BINARY_MULTIPLY                 
                        88      LOAD_FAST                       3: opb
                        90      BINARY_ADD                      
                        92      STORE_FAST                      3: opb
                        94      LOAD_FAST                       2: opa
                        96      LOAD_FAST                       3: opb
                        98      BUILD_TUPLE                     2
                        100     RETURN_VALUE                    
                        102     LOAD_FAST                       4: dif
                        104     LOAD_CONST                      1: 0
                        106     COMPARE_OP                      0 (<)
                        108     POP_JUMP_IF_FALSE               63 (to 126)
                        110     LOAD_FAST                       3: opb
                        112     LOAD_FAST                       1: context
                        114     LOAD_ATTR                       0: prec
                        116     UNARY_NEGATIVE                  
                        118     LOAD_CONST                      0: None
                        120     BUILD_SLICE                     2
                        122     BINARY_SUBSCR                   
                        124     STORE_FAST                      3: opb
                        126     LOAD_FAST                       2: opa
                        128     LOAD_FAST                       3: opb
                        130     BUILD_TUPLE                     2
                        132     RETURN_VALUE                    
                'Decimal._fill_logical'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: logical_and
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_convert_other'
                        '_islogical'
                        '_raise_error'
                        'InvalidOperation'
                        '_fill_logical'
                        '_int'
                        'join'
                        'zip'
                        '_dec_from_triple'
                        'lstrip'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'opa'
                        'opb'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Applies an 'and' operation between self and other's digits."
                        None
                        True
                        (
                            'raiseit'
                        )
                        ''
                        [Code]
                            File Name: _pydecimal.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 6
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'str'
                                'int'
                            [Var Names]
                                '.0'
                                'a'
                                'b'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        14 (to 34)
                                6       UNPACK_SEQUENCE                 2
                                8       STORE_FAST                      1: a
                                10      STORE_FAST                      2: b
                                12      LOAD_GLOBAL                     0: str
                                14      LOAD_GLOBAL                     1: int
                                16      LOAD_FAST                       1: a
                                18      CALL_FUNCTION                   1
                                20      LOAD_GLOBAL                     1: int
                                22      LOAD_FAST                       2: b
                                24      CALL_FUNCTION                   1
                                26      BINARY_AND                      
                                28      CALL_FUNCTION                   1
                                30      LIST_APPEND                     2
                                32      JUMP_ABSOLUTE                   2 (to 4)
                                34      RETURN_VALUE                    
                        'Decimal.logical_and.<locals>.<listcomp>'
                        0
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       2: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      2: context
                        14      LOAD_GLOBAL                     1: _convert_other
                        16      LOAD_FAST                       1: other
                        18      LOAD_CONST                      2: True
                        20      LOAD_CONST                      3: ('raiseit',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      1: other
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _islogical
                        30      CALL_METHOD                     0
                        32      POP_JUMP_IF_FALSE               21 (to 42)
                        34      LOAD_FAST                       1: other
                        36      LOAD_METHOD                     2: _islogical
                        38      CALL_METHOD                     0
                        40      POP_JUMP_IF_TRUE                26 (to 52)
                        42      LOAD_FAST                       2: context
                        44      LOAD_METHOD                     3: _raise_error
                        46      LOAD_GLOBAL                     4: InvalidOperation
                        48      CALL_METHOD                     1
                        50      RETURN_VALUE                    
                        52      LOAD_FAST                       0: self
                        54      LOAD_METHOD                     5: _fill_logical
                        56      LOAD_FAST                       2: context
                        58      LOAD_FAST                       0: self
                        60      LOAD_ATTR                       6: _int
                        62      LOAD_FAST                       1: other
                        64      LOAD_ATTR                       6: _int
                        66      CALL_METHOD                     3
                        68      UNPACK_SEQUENCE                 2
                        70      STORE_FAST                      3: opa
                        72      STORE_FAST                      4: opb
                        74      LOAD_CONST                      4: ''
                        76      LOAD_METHOD                     7: join
                        78      LOAD_CONST                      5: <CODE> <listcomp>
                        80      LOAD_CONST                      6: 'Decimal.logical_and.<locals>.<listcomp>'
                        82      MAKE_FUNCTION                   0
                        84      LOAD_GLOBAL                     8: zip
                        86      LOAD_FAST                       3: opa
                        88      LOAD_FAST                       4: opb
                        90      CALL_FUNCTION                   2
                        92      GET_ITER                        
                        94      CALL_FUNCTION                   1
                        96      CALL_METHOD                     1
                        98      STORE_FAST                      5: result
                        100     LOAD_GLOBAL                     9: _dec_from_triple
                        102     LOAD_CONST                      7: 0
                        104     LOAD_FAST                       5: result
                        106     LOAD_METHOD                     10: lstrip
                        108     LOAD_CONST                      8: '0'
                        110     CALL_METHOD                     1
                        112     JUMP_IF_TRUE_OR_POP             58 (to 116)
                        114     LOAD_CONST                      8: '0'
                        116     LOAD_CONST                      7: 0
                        118     CALL_FUNCTION                   3
                        120     RETURN_VALUE                    
                'Decimal.logical_and'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: logical_invert
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        'logical_xor'
                        '_dec_from_triple'
                        'prec'
                    [Var Names]
                        'self'
                        'context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Invert all its digits.'
                        None
                        0
                        '1'
                    [Disassembly]
                        0       LOAD_FAST                       1: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      1: context
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     1: logical_xor
                        18      LOAD_GLOBAL                     2: _dec_from_triple
                        20      LOAD_CONST                      2: 0
                        22      LOAD_CONST                      3: '1'
                        24      LOAD_FAST                       1: context
                        26      LOAD_ATTR                       3: prec
                        28      BINARY_MULTIPLY                 
                        30      LOAD_CONST                      2: 0
                        32      CALL_FUNCTION                   3
                        34      LOAD_FAST                       1: context
                        36      CALL_METHOD                     2
                        38      RETURN_VALUE                    
                'Decimal.logical_invert'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: logical_or
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_convert_other'
                        '_islogical'
                        '_raise_error'
                        'InvalidOperation'
                        '_fill_logical'
                        '_int'
                        'join'
                        'zip'
                        '_dec_from_triple'
                        'lstrip'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'opa'
                        'opb'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Applies an 'or' operation between self and other's digits."
                        None
                        True
                        (
                            'raiseit'
                        )
                        ''
                        [Code]
                            File Name: _pydecimal.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 6
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'str'
                                'int'
                            [Var Names]
                                '.0'
                                'a'
                                'b'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        14 (to 34)
                                6       UNPACK_SEQUENCE                 2
                                8       STORE_FAST                      1: a
                                10      STORE_FAST                      2: b
                                12      LOAD_GLOBAL                     0: str
                                14      LOAD_GLOBAL                     1: int
                                16      LOAD_FAST                       1: a
                                18      CALL_FUNCTION                   1
                                20      LOAD_GLOBAL                     1: int
                                22      LOAD_FAST                       2: b
                                24      CALL_FUNCTION                   1
                                26      BINARY_OR                       
                                28      CALL_FUNCTION                   1
                                30      LIST_APPEND                     2
                                32      JUMP_ABSOLUTE                   2 (to 4)
                                34      RETURN_VALUE                    
                        'Decimal.logical_or.<locals>.<listcomp>'
                        0
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       2: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      2: context
                        14      LOAD_GLOBAL                     1: _convert_other
                        16      LOAD_FAST                       1: other
                        18      LOAD_CONST                      2: True
                        20      LOAD_CONST                      3: ('raiseit',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      1: other
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _islogical
                        30      CALL_METHOD                     0
                        32      POP_JUMP_IF_FALSE               21 (to 42)
                        34      LOAD_FAST                       1: other
                        36      LOAD_METHOD                     2: _islogical
                        38      CALL_METHOD                     0
                        40      POP_JUMP_IF_TRUE                26 (to 52)
                        42      LOAD_FAST                       2: context
                        44      LOAD_METHOD                     3: _raise_error
                        46      LOAD_GLOBAL                     4: InvalidOperation
                        48      CALL_METHOD                     1
                        50      RETURN_VALUE                    
                        52      LOAD_FAST                       0: self
                        54      LOAD_METHOD                     5: _fill_logical
                        56      LOAD_FAST                       2: context
                        58      LOAD_FAST                       0: self
                        60      LOAD_ATTR                       6: _int
                        62      LOAD_FAST                       1: other
                        64      LOAD_ATTR                       6: _int
                        66      CALL_METHOD                     3
                        68      UNPACK_SEQUENCE                 2
                        70      STORE_FAST                      3: opa
                        72      STORE_FAST                      4: opb
                        74      LOAD_CONST                      4: ''
                        76      LOAD_METHOD                     7: join
                        78      LOAD_CONST                      5: <CODE> <listcomp>
                        80      LOAD_CONST                      6: 'Decimal.logical_or.<locals>.<listcomp>'
                        82      MAKE_FUNCTION                   0
                        84      LOAD_GLOBAL                     8: zip
                        86      LOAD_FAST                       3: opa
                        88      LOAD_FAST                       4: opb
                        90      CALL_FUNCTION                   2
                        92      GET_ITER                        
                        94      CALL_FUNCTION                   1
                        96      CALL_METHOD                     1
                        98      STORE_FAST                      5: result
                        100     LOAD_GLOBAL                     9: _dec_from_triple
                        102     LOAD_CONST                      7: 0
                        104     LOAD_FAST                       5: result
                        106     LOAD_METHOD                     10: lstrip
                        108     LOAD_CONST                      8: '0'
                        110     CALL_METHOD                     1
                        112     JUMP_IF_TRUE_OR_POP             58 (to 116)
                        114     LOAD_CONST                      8: '0'
                        116     LOAD_CONST                      7: 0
                        118     CALL_FUNCTION                   3
                        120     RETURN_VALUE                    
                'Decimal.logical_or'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: logical_xor
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_convert_other'
                        '_islogical'
                        '_raise_error'
                        'InvalidOperation'
                        '_fill_logical'
                        '_int'
                        'join'
                        'zip'
                        '_dec_from_triple'
                        'lstrip'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'opa'
                        'opb'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Applies an 'xor' operation between self and other's digits."
                        None
                        True
                        (
                            'raiseit'
                        )
                        ''
                        [Code]
                            File Name: _pydecimal.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 6
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'str'
                                'int'
                            [Var Names]
                                '.0'
                                'a'
                                'b'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        14 (to 34)
                                6       UNPACK_SEQUENCE                 2
                                8       STORE_FAST                      1: a
                                10      STORE_FAST                      2: b
                                12      LOAD_GLOBAL                     0: str
                                14      LOAD_GLOBAL                     1: int
                                16      LOAD_FAST                       1: a
                                18      CALL_FUNCTION                   1
                                20      LOAD_GLOBAL                     1: int
                                22      LOAD_FAST                       2: b
                                24      CALL_FUNCTION                   1
                                26      BINARY_XOR                      
                                28      CALL_FUNCTION                   1
                                30      LIST_APPEND                     2
                                32      JUMP_ABSOLUTE                   2 (to 4)
                                34      RETURN_VALUE                    
                        'Decimal.logical_xor.<locals>.<listcomp>'
                        0
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       2: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      2: context
                        14      LOAD_GLOBAL                     1: _convert_other
                        16      LOAD_FAST                       1: other
                        18      LOAD_CONST                      2: True
                        20      LOAD_CONST                      3: ('raiseit',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      1: other
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _islogical
                        30      CALL_METHOD                     0
                        32      POP_JUMP_IF_FALSE               21 (to 42)
                        34      LOAD_FAST                       1: other
                        36      LOAD_METHOD                     2: _islogical
                        38      CALL_METHOD                     0
                        40      POP_JUMP_IF_TRUE                26 (to 52)
                        42      LOAD_FAST                       2: context
                        44      LOAD_METHOD                     3: _raise_error
                        46      LOAD_GLOBAL                     4: InvalidOperation
                        48      CALL_METHOD                     1
                        50      RETURN_VALUE                    
                        52      LOAD_FAST                       0: self
                        54      LOAD_METHOD                     5: _fill_logical
                        56      LOAD_FAST                       2: context
                        58      LOAD_FAST                       0: self
                        60      LOAD_ATTR                       6: _int
                        62      LOAD_FAST                       1: other
                        64      LOAD_ATTR                       6: _int
                        66      CALL_METHOD                     3
                        68      UNPACK_SEQUENCE                 2
                        70      STORE_FAST                      3: opa
                        72      STORE_FAST                      4: opb
                        74      LOAD_CONST                      4: ''
                        76      LOAD_METHOD                     7: join
                        78      LOAD_CONST                      5: <CODE> <listcomp>
                        80      LOAD_CONST                      6: 'Decimal.logical_xor.<locals>.<listcomp>'
                        82      MAKE_FUNCTION                   0
                        84      LOAD_GLOBAL                     8: zip
                        86      LOAD_FAST                       3: opa
                        88      LOAD_FAST                       4: opb
                        90      CALL_FUNCTION                   2
                        92      GET_ITER                        
                        94      CALL_FUNCTION                   1
                        96      CALL_METHOD                     1
                        98      STORE_FAST                      5: result
                        100     LOAD_GLOBAL                     9: _dec_from_triple
                        102     LOAD_CONST                      7: 0
                        104     LOAD_FAST                       5: result
                        106     LOAD_METHOD                     10: lstrip
                        108     LOAD_CONST                      8: '0'
                        110     CALL_METHOD                     1
                        112     JUMP_IF_TRUE_OR_POP             58 (to 116)
                        114     LOAD_CONST                      8: '0'
                        116     LOAD_CONST                      7: 0
                        118     CALL_FUNCTION                   3
                        120     RETURN_VALUE                    
                'Decimal.logical_xor'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: max_mag
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'getcontext'
                        '_is_special'
                        '_isnan'
                        '_fix'
                        '_check_nans'
                        'copy_abs'
                        '_cmp'
                        'compare_total'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'sn'
                        'on'
                        'c'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Compares the values numerically with their sign ignored.'
                        True
                        (
                            'raiseit'
                        )
                        None
                        1
                        0
                        -1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_FAST                       2: context
                        14      LOAD_CONST                      3: None
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_FALSE               13 (to 26)
                        20      LOAD_GLOBAL                     1: getcontext
                        22      CALL_FUNCTION                   0
                        24      STORE_FAST                      2: context
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       2: _is_special
                        30      POP_JUMP_IF_TRUE                19 (to 38)
                        32      LOAD_FAST                       1: other
                        34      LOAD_ATTR                       2: _is_special
                        36      POP_JUMP_IF_FALSE               63 (to 126)
                        38      LOAD_FAST                       0: self
                        40      LOAD_METHOD                     3: _isnan
                        42      CALL_METHOD                     0
                        44      STORE_FAST                      3: sn
                        46      LOAD_FAST                       1: other
                        48      LOAD_METHOD                     3: _isnan
                        50      CALL_METHOD                     0
                        52      STORE_FAST                      4: on
                        54      LOAD_FAST                       3: sn
                        56      POP_JUMP_IF_TRUE                31 (to 62)
                        58      LOAD_FAST                       4: on
                        60      POP_JUMP_IF_FALSE               63 (to 126)
                        62      LOAD_FAST                       4: on
                        64      LOAD_CONST                      4: 1
                        66      COMPARE_OP                      2 (==)
                        68      POP_JUMP_IF_FALSE               44 (to 88)
                        70      LOAD_FAST                       3: sn
                        72      LOAD_CONST                      5: 0
                        74      COMPARE_OP                      2 (==)
                        76      POP_JUMP_IF_FALSE               44 (to 88)
                        78      LOAD_FAST                       0: self
                        80      LOAD_METHOD                     4: _fix
                        82      LOAD_FAST                       2: context
                        84      CALL_METHOD                     1
                        86      RETURN_VALUE                    
                        88      LOAD_FAST                       3: sn
                        90      LOAD_CONST                      4: 1
                        92      COMPARE_OP                      2 (==)
                        94      POP_JUMP_IF_FALSE               57 (to 114)
                        96      LOAD_FAST                       4: on
                        98      LOAD_CONST                      5: 0
                        100     COMPARE_OP                      2 (==)
                        102     POP_JUMP_IF_FALSE               57 (to 114)
                        104     LOAD_FAST                       1: other
                        106     LOAD_METHOD                     4: _fix
                        108     LOAD_FAST                       2: context
                        110     CALL_METHOD                     1
                        112     RETURN_VALUE                    
                        114     LOAD_FAST                       0: self
                        116     LOAD_METHOD                     5: _check_nans
                        118     LOAD_FAST                       1: other
                        120     LOAD_FAST                       2: context
                        122     CALL_METHOD                     2
                        124     RETURN_VALUE                    
                        126     LOAD_FAST                       0: self
                        128     LOAD_METHOD                     6: copy_abs
                        130     CALL_METHOD                     0
                        132     LOAD_METHOD                     7: _cmp
                        134     LOAD_FAST                       1: other
                        136     LOAD_METHOD                     6: copy_abs
                        138     CALL_METHOD                     0
                        140     CALL_METHOD                     1
                        142     STORE_FAST                      5: c
                        144     LOAD_FAST                       5: c
                        146     LOAD_CONST                      5: 0
                        148     COMPARE_OP                      2 (==)
                        150     POP_JUMP_IF_FALSE               81 (to 162)
                        152     LOAD_FAST                       0: self
                        154     LOAD_METHOD                     8: compare_total
                        156     LOAD_FAST                       1: other
                        158     CALL_METHOD                     1
                        160     STORE_FAST                      5: c
                        162     LOAD_FAST                       5: c
                        164     LOAD_CONST                      6: -1
                        166     COMPARE_OP                      2 (==)
                        168     POP_JUMP_IF_FALSE               88 (to 176)
                        170     LOAD_FAST                       1: other
                        172     STORE_FAST                      6: ans
                        174     JUMP_FORWARD                    2 (to 180)
                        176     LOAD_FAST                       0: self
                        178     STORE_FAST                      6: ans
                        180     LOAD_FAST                       6: ans
                        182     LOAD_METHOD                     4: _fix
                        184     LOAD_FAST                       2: context
                        186     CALL_METHOD                     1
                        188     RETURN_VALUE                    
                'Decimal.max_mag'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: min_mag
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'getcontext'
                        '_is_special'
                        '_isnan'
                        '_fix'
                        '_check_nans'
                        'copy_abs'
                        '_cmp'
                        'compare_total'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'sn'
                        'on'
                        'c'
                        'ans'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Compares the values numerically with their sign ignored.'
                        True
                        (
                            'raiseit'
                        )
                        None
                        1
                        0
                        -1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_FAST                       2: context
                        14      LOAD_CONST                      3: None
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_FALSE               13 (to 26)
                        20      LOAD_GLOBAL                     1: getcontext
                        22      CALL_FUNCTION                   0
                        24      STORE_FAST                      2: context
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       2: _is_special
                        30      POP_JUMP_IF_TRUE                19 (to 38)
                        32      LOAD_FAST                       1: other
                        34      LOAD_ATTR                       2: _is_special
                        36      POP_JUMP_IF_FALSE               63 (to 126)
                        38      LOAD_FAST                       0: self
                        40      LOAD_METHOD                     3: _isnan
                        42      CALL_METHOD                     0
                        44      STORE_FAST                      3: sn
                        46      LOAD_FAST                       1: other
                        48      LOAD_METHOD                     3: _isnan
                        50      CALL_METHOD                     0
                        52      STORE_FAST                      4: on
                        54      LOAD_FAST                       3: sn
                        56      POP_JUMP_IF_TRUE                31 (to 62)
                        58      LOAD_FAST                       4: on
                        60      POP_JUMP_IF_FALSE               63 (to 126)
                        62      LOAD_FAST                       4: on
                        64      LOAD_CONST                      4: 1
                        66      COMPARE_OP                      2 (==)
                        68      POP_JUMP_IF_FALSE               44 (to 88)
                        70      LOAD_FAST                       3: sn
                        72      LOAD_CONST                      5: 0
                        74      COMPARE_OP                      2 (==)
                        76      POP_JUMP_IF_FALSE               44 (to 88)
                        78      LOAD_FAST                       0: self
                        80      LOAD_METHOD                     4: _fix
                        82      LOAD_FAST                       2: context
                        84      CALL_METHOD                     1
                        86      RETURN_VALUE                    
                        88      LOAD_FAST                       3: sn
                        90      LOAD_CONST                      4: 1
                        92      COMPARE_OP                      2 (==)
                        94      POP_JUMP_IF_FALSE               57 (to 114)
                        96      LOAD_FAST                       4: on
                        98      LOAD_CONST                      5: 0
                        100     COMPARE_OP                      2 (==)
                        102     POP_JUMP_IF_FALSE               57 (to 114)
                        104     LOAD_FAST                       1: other
                        106     LOAD_METHOD                     4: _fix
                        108     LOAD_FAST                       2: context
                        110     CALL_METHOD                     1
                        112     RETURN_VALUE                    
                        114     LOAD_FAST                       0: self
                        116     LOAD_METHOD                     5: _check_nans
                        118     LOAD_FAST                       1: other
                        120     LOAD_FAST                       2: context
                        122     CALL_METHOD                     2
                        124     RETURN_VALUE                    
                        126     LOAD_FAST                       0: self
                        128     LOAD_METHOD                     6: copy_abs
                        130     CALL_METHOD                     0
                        132     LOAD_METHOD                     7: _cmp
                        134     LOAD_FAST                       1: other
                        136     LOAD_METHOD                     6: copy_abs
                        138     CALL_METHOD                     0
                        140     CALL_METHOD                     1
                        142     STORE_FAST                      5: c
                        144     LOAD_FAST                       5: c
                        146     LOAD_CONST                      5: 0
                        148     COMPARE_OP                      2 (==)
                        150     POP_JUMP_IF_FALSE               81 (to 162)
                        152     LOAD_FAST                       0: self
                        154     LOAD_METHOD                     8: compare_total
                        156     LOAD_FAST                       1: other
                        158     CALL_METHOD                     1
                        160     STORE_FAST                      5: c
                        162     LOAD_FAST                       5: c
                        164     LOAD_CONST                      6: -1
                        166     COMPARE_OP                      2 (==)
                        168     POP_JUMP_IF_FALSE               88 (to 176)
                        170     LOAD_FAST                       0: self
                        172     STORE_FAST                      6: ans
                        174     JUMP_FORWARD                    2 (to 180)
                        176     LOAD_FAST                       1: other
                        178     STORE_FAST                      6: ans
                        180     LOAD_FAST                       6: ans
                        182     LOAD_METHOD                     4: _fix
                        184     LOAD_FAST                       2: context
                        186     CALL_METHOD                     1
                        188     RETURN_VALUE                    
                'Decimal.min_mag'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: next_minus
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_check_nans'
                        '_isinfinity'
                        '_NegativeInfinity'
                        '_dec_from_triple'
                        'prec'
                        'Etop'
                        'copy'
                        '_set_rounding'
                        'ROUND_FLOOR'
                        '_ignore_all_flags'
                        '_fix'
                        '__sub__'
                        'Etiny'
                    [Var Names]
                        'self'
                        'context'
                        'ans'
                        'new_self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns the largest representable number smaller than itself.'
                        None
                        (
                            'context'
                        )
                        -1
                        1
                        0
                        '9'
                        '1'
                    [Disassembly]
                        0       LOAD_FAST                       1: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      1: context
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _check_nans
                        18      LOAD_FAST                       1: context
                        20      LOAD_CONST                      2: ('context',)
                        22      CALL_FUNCTION_KW                1
                        24      STORE_FAST                      2: ans
                        26      LOAD_FAST                       2: ans
                        28      POP_JUMP_IF_FALSE               17 (to 34)
                        30      LOAD_FAST                       2: ans
                        32      RETURN_VALUE                    
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     2: _isinfinity
                        38      CALL_METHOD                     0
                        40      LOAD_CONST                      3: -1
                        42      COMPARE_OP                      2 (==)
                        44      POP_JUMP_IF_FALSE               25 (to 50)
                        46      LOAD_GLOBAL                     3: _NegativeInfinity
                        48      RETURN_VALUE                    
                        50      LOAD_FAST                       0: self
                        52      LOAD_METHOD                     2: _isinfinity
                        54      CALL_METHOD                     0
                        56      LOAD_CONST                      4: 1
                        58      COMPARE_OP                      2 (==)
                        60      POP_JUMP_IF_FALSE               42 (to 84)
                        62      LOAD_GLOBAL                     4: _dec_from_triple
                        64      LOAD_CONST                      5: 0
                        66      LOAD_CONST                      6: '9'
                        68      LOAD_FAST                       1: context
                        70      LOAD_ATTR                       5: prec
                        72      BINARY_MULTIPLY                 
                        74      LOAD_FAST                       1: context
                        76      LOAD_METHOD                     6: Etop
                        78      CALL_METHOD                     0
                        80      CALL_FUNCTION                   3
                        82      RETURN_VALUE                    
                        84      LOAD_FAST                       1: context
                        86      LOAD_METHOD                     7: copy
                        88      CALL_METHOD                     0
                        90      STORE_FAST                      1: context
                        92      LOAD_FAST                       1: context
                        94      LOAD_METHOD                     8: _set_rounding
                        96      LOAD_GLOBAL                     9: ROUND_FLOOR
                        98      CALL_METHOD                     1
                        100     POP_TOP                         
                        102     LOAD_FAST                       1: context
                        104     LOAD_METHOD                     10: _ignore_all_flags
                        106     CALL_METHOD                     0
                        108     POP_TOP                         
                        110     LOAD_FAST                       0: self
                        112     LOAD_METHOD                     11: _fix
                        114     LOAD_FAST                       1: context
                        116     CALL_METHOD                     1
                        118     STORE_FAST                      3: new_self
                        120     LOAD_FAST                       3: new_self
                        122     LOAD_FAST                       0: self
                        124     COMPARE_OP                      3 (!=)
                        126     POP_JUMP_IF_FALSE               66 (to 132)
                        128     LOAD_FAST                       3: new_self
                        130     RETURN_VALUE                    
                        132     LOAD_FAST                       0: self
                        134     LOAD_METHOD                     12: __sub__
                        136     LOAD_GLOBAL                     4: _dec_from_triple
                        138     LOAD_CONST                      5: 0
                        140     LOAD_CONST                      7: '1'
                        142     LOAD_FAST                       1: context
                        144     LOAD_METHOD                     13: Etiny
                        146     CALL_METHOD                     0
                        148     LOAD_CONST                      4: 1
                        150     BINARY_SUBTRACT                 
                        152     CALL_FUNCTION                   3
                        154     LOAD_FAST                       1: context
                        156     CALL_METHOD                     2
                        158     RETURN_VALUE                    
                'Decimal.next_minus'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: next_plus
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_check_nans'
                        '_isinfinity'
                        '_Infinity'
                        '_dec_from_triple'
                        'prec'
                        'Etop'
                        'copy'
                        '_set_rounding'
                        'ROUND_CEILING'
                        '_ignore_all_flags'
                        '_fix'
                        '__add__'
                        'Etiny'
                    [Var Names]
                        'self'
                        'context'
                        'ans'
                        'new_self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns the smallest representable number larger than itself.'
                        None
                        (
                            'context'
                        )
                        1
                        -1
                        '9'
                        0
                        '1'
                    [Disassembly]
                        0       LOAD_FAST                       1: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      1: context
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _check_nans
                        18      LOAD_FAST                       1: context
                        20      LOAD_CONST                      2: ('context',)
                        22      CALL_FUNCTION_KW                1
                        24      STORE_FAST                      2: ans
                        26      LOAD_FAST                       2: ans
                        28      POP_JUMP_IF_FALSE               17 (to 34)
                        30      LOAD_FAST                       2: ans
                        32      RETURN_VALUE                    
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     2: _isinfinity
                        38      CALL_METHOD                     0
                        40      LOAD_CONST                      3: 1
                        42      COMPARE_OP                      2 (==)
                        44      POP_JUMP_IF_FALSE               25 (to 50)
                        46      LOAD_GLOBAL                     3: _Infinity
                        48      RETURN_VALUE                    
                        50      LOAD_FAST                       0: self
                        52      LOAD_METHOD                     2: _isinfinity
                        54      CALL_METHOD                     0
                        56      LOAD_CONST                      4: -1
                        58      COMPARE_OP                      2 (==)
                        60      POP_JUMP_IF_FALSE               42 (to 84)
                        62      LOAD_GLOBAL                     4: _dec_from_triple
                        64      LOAD_CONST                      3: 1
                        66      LOAD_CONST                      5: '9'
                        68      LOAD_FAST                       1: context
                        70      LOAD_ATTR                       5: prec
                        72      BINARY_MULTIPLY                 
                        74      LOAD_FAST                       1: context
                        76      LOAD_METHOD                     6: Etop
                        78      CALL_METHOD                     0
                        80      CALL_FUNCTION                   3
                        82      RETURN_VALUE                    
                        84      LOAD_FAST                       1: context
                        86      LOAD_METHOD                     7: copy
                        88      CALL_METHOD                     0
                        90      STORE_FAST                      1: context
                        92      LOAD_FAST                       1: context
                        94      LOAD_METHOD                     8: _set_rounding
                        96      LOAD_GLOBAL                     9: ROUND_CEILING
                        98      CALL_METHOD                     1
                        100     POP_TOP                         
                        102     LOAD_FAST                       1: context
                        104     LOAD_METHOD                     10: _ignore_all_flags
                        106     CALL_METHOD                     0
                        108     POP_TOP                         
                        110     LOAD_FAST                       0: self
                        112     LOAD_METHOD                     11: _fix
                        114     LOAD_FAST                       1: context
                        116     CALL_METHOD                     1
                        118     STORE_FAST                      3: new_self
                        120     LOAD_FAST                       3: new_self
                        122     LOAD_FAST                       0: self
                        124     COMPARE_OP                      3 (!=)
                        126     POP_JUMP_IF_FALSE               66 (to 132)
                        128     LOAD_FAST                       3: new_self
                        130     RETURN_VALUE                    
                        132     LOAD_FAST                       0: self
                        134     LOAD_METHOD                     12: __add__
                        136     LOAD_GLOBAL                     4: _dec_from_triple
                        138     LOAD_CONST                      6: 0
                        140     LOAD_CONST                      7: '1'
                        142     LOAD_FAST                       1: context
                        144     LOAD_METHOD                     13: Etiny
                        146     CALL_METHOD                     0
                        148     LOAD_CONST                      3: 1
                        150     BINARY_SUBTRACT                 
                        152     CALL_FUNCTION                   3
                        154     LOAD_FAST                       1: context
                        156     CALL_METHOD                     2
                        158     RETURN_VALUE                    
                'Decimal.next_plus'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: next_toward
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'getcontext'
                        '_check_nans'
                        '_cmp'
                        'copy_sign'
                        'next_plus'
                        'next_minus'
                        '_isinfinity'
                        '_raise_error'
                        'Overflow'
                        '_sign'
                        'Inexact'
                        'Rounded'
                        'adjusted'
                        'Emin'
                        'Underflow'
                        'Subnormal'
                        'Clamped'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                        'comparison'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns the number closest to self, in the direction towards other.\n\n        The result is the closest representable number to self\n        (excluding self) that is in the direction towards other,\n        unless both have the same value.  If the two operands are\n        numerically equal, then the result is a copy of self with the\n        sign set to be the same as the sign of other.\n        '
                        True
                        (
                            'raiseit'
                        )
                        None
                        0
                        -1
                        'Infinite result from next_toward'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: other
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: other
                        12      LOAD_FAST                       2: context
                        14      LOAD_CONST                      3: None
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_FALSE               13 (to 26)
                        20      LOAD_GLOBAL                     1: getcontext
                        22      CALL_FUNCTION                   0
                        24      STORE_FAST                      2: context
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _check_nans
                        30      LOAD_FAST                       1: other
                        32      LOAD_FAST                       2: context
                        34      CALL_METHOD                     2
                        36      STORE_FAST                      3: ans
                        38      LOAD_FAST                       3: ans
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_FAST                       3: ans
                        44      RETURN_VALUE                    
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     3: _cmp
                        50      LOAD_FAST                       1: other
                        52      CALL_METHOD                     1
                        54      STORE_FAST                      4: comparison
                        56      LOAD_FAST                       4: comparison
                        58      LOAD_CONST                      4: 0
                        60      COMPARE_OP                      2 (==)
                        62      POP_JUMP_IF_FALSE               37 (to 74)
                        64      LOAD_FAST                       0: self
                        66      LOAD_METHOD                     4: copy_sign
                        68      LOAD_FAST                       1: other
                        70      CALL_METHOD                     1
                        72      RETURN_VALUE                    
                        74      LOAD_FAST                       4: comparison
                        76      LOAD_CONST                      5: -1
                        78      COMPARE_OP                      2 (==)
                        80      POP_JUMP_IF_FALSE               47 (to 94)
                        82      LOAD_FAST                       0: self
                        84      LOAD_METHOD                     5: next_plus
                        86      LOAD_FAST                       2: context
                        88      CALL_METHOD                     1
                        90      STORE_FAST                      3: ans
                        92      JUMP_FORWARD                    5 (to 104)
                        94      LOAD_FAST                       0: self
                        96      LOAD_METHOD                     6: next_minus
                        98      LOAD_FAST                       2: context
                        100     CALL_METHOD                     1
                        102     STORE_FAST                      3: ans
                        104     LOAD_FAST                       3: ans
                        106     LOAD_METHOD                     7: _isinfinity
                        108     CALL_METHOD                     0
                        110     POP_JUMP_IF_FALSE               76 (to 152)
                        112     LOAD_FAST                       2: context
                        114     LOAD_METHOD                     8: _raise_error
                        116     LOAD_GLOBAL                     9: Overflow
                        118     LOAD_CONST                      6: 'Infinite result from next_toward'
                        120     LOAD_FAST                       3: ans
                        122     LOAD_ATTR                       10: _sign
                        124     CALL_METHOD                     3
                        126     POP_TOP                         
                        128     LOAD_FAST                       2: context
                        130     LOAD_METHOD                     8: _raise_error
                        132     LOAD_GLOBAL                     11: Inexact
                        134     CALL_METHOD                     1
                        136     POP_TOP                         
                        138     LOAD_FAST                       2: context
                        140     LOAD_METHOD                     8: _raise_error
                        142     LOAD_GLOBAL                     12: Rounded
                        144     CALL_METHOD                     1
                        146     POP_TOP                         
                        148     LOAD_FAST                       3: ans
                        150     RETURN_VALUE                    
                        152     LOAD_FAST                       3: ans
                        154     LOAD_METHOD                     13: adjusted
                        156     CALL_METHOD                     0
                        158     LOAD_FAST                       2: context
                        160     LOAD_ATTR                       14: Emin
                        162     COMPARE_OP                      0 (<)
                        164     POP_JUMP_IF_FALSE               110 (to 220)
                        166     LOAD_FAST                       2: context
                        168     LOAD_METHOD                     8: _raise_error
                        170     LOAD_GLOBAL                     15: Underflow
                        172     CALL_METHOD                     1
                        174     POP_TOP                         
                        176     LOAD_FAST                       2: context
                        178     LOAD_METHOD                     8: _raise_error
                        180     LOAD_GLOBAL                     16: Subnormal
                        182     CALL_METHOD                     1
                        184     POP_TOP                         
                        186     LOAD_FAST                       2: context
                        188     LOAD_METHOD                     8: _raise_error
                        190     LOAD_GLOBAL                     11: Inexact
                        192     CALL_METHOD                     1
                        194     POP_TOP                         
                        196     LOAD_FAST                       2: context
                        198     LOAD_METHOD                     8: _raise_error
                        200     LOAD_GLOBAL                     12: Rounded
                        202     CALL_METHOD                     1
                        204     POP_TOP                         
                        206     LOAD_FAST                       3: ans
                        208     POP_JUMP_IF_TRUE                110 (to 220)
                        210     LOAD_FAST                       2: context
                        212     LOAD_METHOD                     8: _raise_error
                        214     LOAD_GLOBAL                     17: Clamped
                        216     CALL_METHOD                     1
                        218     POP_TOP                         
                        220     LOAD_FAST                       3: ans
                        222     RETURN_VALUE                    
                'Decimal.next_toward'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: number_class
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'is_snan'
                        'is_qnan'
                        '_isinfinity'
                        'is_zero'
                        '_sign'
                        'getcontext'
                        'is_subnormal'
                    [Var Names]
                        'self'
                        'context'
                        'inf'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns an indication of the class of self.\n\n        The class is one of the following strings:\n          sNaN\n          NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n        '
                        'sNaN'
                        'NaN'
                        1
                        '+Infinity'
                        -1
                        '-Infinity'
                        '-Zero'
                        '+Zero'
                        None
                        (
                            'context'
                        )
                        '-Subnormal'
                        '+Subnormal'
                        '-Normal'
                        '+Normal'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: is_snan
                        4       CALL_METHOD                     0
                        6       POP_JUMP_IF_FALSE               6 (to 12)
                        8       LOAD_CONST                      1: 'sNaN'
                        10      RETURN_VALUE                    
                        12      LOAD_FAST                       0: self
                        14      LOAD_METHOD                     1: is_qnan
                        16      CALL_METHOD                     0
                        18      POP_JUMP_IF_FALSE               12 (to 24)
                        20      LOAD_CONST                      2: 'NaN'
                        22      RETURN_VALUE                    
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     2: _isinfinity
                        28      CALL_METHOD                     0
                        30      STORE_FAST                      2: inf
                        32      LOAD_FAST                       2: inf
                        34      LOAD_CONST                      3: 1
                        36      COMPARE_OP                      2 (==)
                        38      POP_JUMP_IF_FALSE               22 (to 44)
                        40      LOAD_CONST                      4: '+Infinity'
                        42      RETURN_VALUE                    
                        44      LOAD_FAST                       2: inf
                        46      LOAD_CONST                      5: -1
                        48      COMPARE_OP                      2 (==)
                        50      POP_JUMP_IF_FALSE               28 (to 56)
                        52      LOAD_CONST                      6: '-Infinity'
                        54      RETURN_VALUE                    
                        56      LOAD_FAST                       0: self
                        58      LOAD_METHOD                     3: is_zero
                        60      CALL_METHOD                     0
                        62      POP_JUMP_IF_FALSE               39 (to 78)
                        64      LOAD_FAST                       0: self
                        66      LOAD_ATTR                       4: _sign
                        68      POP_JUMP_IF_FALSE               37 (to 74)
                        70      LOAD_CONST                      7: '-Zero'
                        72      RETURN_VALUE                    
                        74      LOAD_CONST                      8: '+Zero'
                        76      RETURN_VALUE                    
                        78      LOAD_FAST                       1: context
                        80      LOAD_CONST                      9: None
                        82      IS_OP                           0 (is)
                        84      POP_JUMP_IF_FALSE               46 (to 92)
                        86      LOAD_GLOBAL                     5: getcontext
                        88      CALL_FUNCTION                   0
                        90      STORE_FAST                      1: context
                        92      LOAD_FAST                       0: self
                        94      LOAD_ATTR                       6: is_subnormal
                        96      LOAD_FAST                       1: context
                        98      LOAD_CONST                      10: ('context',)
                        100     CALL_FUNCTION_KW                1
                        102     POP_JUMP_IF_FALSE               59 (to 118)
                        104     LOAD_FAST                       0: self
                        106     LOAD_ATTR                       4: _sign
                        108     POP_JUMP_IF_FALSE               57 (to 114)
                        110     LOAD_CONST                      11: '-Subnormal'
                        112     RETURN_VALUE                    
                        114     LOAD_CONST                      12: '+Subnormal'
                        116     RETURN_VALUE                    
                        118     LOAD_FAST                       0: self
                        120     LOAD_ATTR                       4: _sign
                        122     POP_JUMP_IF_FALSE               64 (to 128)
                        124     LOAD_CONST                      13: '-Normal'
                        126     RETURN_VALUE                    
                        128     LOAD_CONST                      14: '+Normal'
                        130     RETURN_VALUE                    
                'Decimal.number_class'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: radix
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Decimal'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Just returns 10, as this is Decimal, :)'
                        10
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Decimal
                        2       LOAD_CONST                      1: 10
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                'Decimal.radix'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: rotate
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_convert_other'
                        '_check_nans'
                        '_exp'
                        '_raise_error'
                        'InvalidOperation'
                        'prec'
                        'int'
                        '_isinfinity'
                        'Decimal'
                        '_int'
                        'len'
                        '_dec_from_triple'
                        '_sign'
                        'lstrip'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                        'torot'
                        'rotdig'
                        'topad'
                        'rotated'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns a rotated copy of self, value-of-other times.'
                        None
                        True
                        (
                            'raiseit'
                        )
                        0
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       2: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      2: context
                        14      LOAD_GLOBAL                     1: _convert_other
                        16      LOAD_FAST                       1: other
                        18      LOAD_CONST                      2: True
                        20      LOAD_CONST                      3: ('raiseit',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      1: other
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _check_nans
                        30      LOAD_FAST                       1: other
                        32      LOAD_FAST                       2: context
                        34      CALL_METHOD                     2
                        36      STORE_FAST                      3: ans
                        38      LOAD_FAST                       3: ans
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_FAST                       3: ans
                        44      RETURN_VALUE                    
                        46      LOAD_FAST                       1: other
                        48      LOAD_ATTR                       3: _exp
                        50      LOAD_CONST                      4: 0
                        52      COMPARE_OP                      3 (!=)
                        54      POP_JUMP_IF_FALSE               33 (to 66)
                        56      LOAD_FAST                       2: context
                        58      LOAD_METHOD                     4: _raise_error
                        60      LOAD_GLOBAL                     5: InvalidOperation
                        62      CALL_METHOD                     1
                        64      RETURN_VALUE                    
                        66      LOAD_FAST                       2: context
                        68      LOAD_ATTR                       6: prec
                        70      UNARY_NEGATIVE                  
                        72      LOAD_GLOBAL                     7: int
                        74      LOAD_FAST                       1: other
                        76      CALL_FUNCTION                   1
                        78      DUP_TOP                         
                        80      ROT_THREE                       
                        82      COMPARE_OP                      1 (<=)
                        84      POP_JUMP_IF_FALSE               48 (to 96)
                        86      LOAD_FAST                       2: context
                        88      LOAD_ATTR                       6: prec
                        90      COMPARE_OP                      1 (<=)
                        92      POP_JUMP_IF_TRUE                54 (to 108)
                        94      JUMP_FORWARD                    1 (to 98)
                        96      POP_TOP                         
                        98      LOAD_FAST                       2: context
                        100     LOAD_METHOD                     4: _raise_error
                        102     LOAD_GLOBAL                     5: InvalidOperation
                        104     CALL_METHOD                     1
                        106     RETURN_VALUE                    
                        108     LOAD_FAST                       0: self
                        110     LOAD_METHOD                     8: _isinfinity
                        112     CALL_METHOD                     0
                        114     POP_JUMP_IF_FALSE               62 (to 124)
                        116     LOAD_GLOBAL                     9: Decimal
                        118     LOAD_FAST                       0: self
                        120     CALL_FUNCTION                   1
                        122     RETURN_VALUE                    
                        124     LOAD_GLOBAL                     7: int
                        126     LOAD_FAST                       1: other
                        128     CALL_FUNCTION                   1
                        130     STORE_FAST                      4: torot
                        132     LOAD_FAST                       0: self
                        134     LOAD_ATTR                       10: _int
                        136     STORE_FAST                      5: rotdig
                        138     LOAD_FAST                       2: context
                        140     LOAD_ATTR                       6: prec
                        142     LOAD_GLOBAL                     11: len
                        144     LOAD_FAST                       5: rotdig
                        146     CALL_FUNCTION                   1
                        148     BINARY_SUBTRACT                 
                        150     STORE_FAST                      6: topad
                        152     LOAD_FAST                       6: topad
                        154     LOAD_CONST                      4: 0
                        156     COMPARE_OP                      4 (>)
                        158     POP_JUMP_IF_FALSE               87 (to 174)
                        160     LOAD_CONST                      5: '0'
                        162     LOAD_FAST                       6: topad
                        164     BINARY_MULTIPLY                 
                        166     LOAD_FAST                       5: rotdig
                        168     BINARY_ADD                      
                        170     STORE_FAST                      5: rotdig
                        172     JUMP_FORWARD                    11 (to 196)
                        174     LOAD_FAST                       6: topad
                        176     LOAD_CONST                      4: 0
                        178     COMPARE_OP                      0 (<)
                        180     POP_JUMP_IF_FALSE               98 (to 196)
                        182     LOAD_FAST                       5: rotdig
                        184     LOAD_FAST                       6: topad
                        186     UNARY_NEGATIVE                  
                        188     LOAD_CONST                      1: None
                        190     BUILD_SLICE                     2
                        192     BINARY_SUBSCR                   
                        194     STORE_FAST                      5: rotdig
                        196     LOAD_FAST                       5: rotdig
                        198     LOAD_FAST                       4: torot
                        200     LOAD_CONST                      1: None
                        202     BUILD_SLICE                     2
                        204     BINARY_SUBSCR                   
                        206     LOAD_FAST                       5: rotdig
                        208     LOAD_CONST                      1: None
                        210     LOAD_FAST                       4: torot
                        212     BUILD_SLICE                     2
                        214     BINARY_SUBSCR                   
                        216     BINARY_ADD                      
                        218     STORE_FAST                      7: rotated
                        220     LOAD_GLOBAL                     12: _dec_from_triple
                        222     LOAD_FAST                       0: self
                        224     LOAD_ATTR                       13: _sign
                        226     LOAD_FAST                       7: rotated
                        228     LOAD_METHOD                     14: lstrip
                        230     LOAD_CONST                      5: '0'
                        232     CALL_METHOD                     1
                        234     JUMP_IF_TRUE_OR_POP             119 (to 238)
                        236     LOAD_CONST                      5: '0'
                        238     LOAD_FAST                       0: self
                        240     LOAD_ATTR                       3: _exp
                        242     CALL_FUNCTION                   3
                        244     RETURN_VALUE                    
                'Decimal.rotate'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: scaleb
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_convert_other'
                        '_check_nans'
                        '_exp'
                        '_raise_error'
                        'InvalidOperation'
                        'Emax'
                        'prec'
                        'int'
                        '_isinfinity'
                        'Decimal'
                        '_dec_from_triple'
                        '_sign'
                        '_int'
                        '_fix'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                        'liminf'
                        'limsup'
                        'd'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns self operand after adding the second value to its exp.'
                        None
                        True
                        (
                            'raiseit'
                        )
                        0
                        -2
                        2
                    [Disassembly]
                        0       LOAD_FAST                       2: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      2: context
                        14      LOAD_GLOBAL                     1: _convert_other
                        16      LOAD_FAST                       1: other
                        18      LOAD_CONST                      2: True
                        20      LOAD_CONST                      3: ('raiseit',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      1: other
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _check_nans
                        30      LOAD_FAST                       1: other
                        32      LOAD_FAST                       2: context
                        34      CALL_METHOD                     2
                        36      STORE_FAST                      3: ans
                        38      LOAD_FAST                       3: ans
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_FAST                       3: ans
                        44      RETURN_VALUE                    
                        46      LOAD_FAST                       1: other
                        48      LOAD_ATTR                       3: _exp
                        50      LOAD_CONST                      4: 0
                        52      COMPARE_OP                      3 (!=)
                        54      POP_JUMP_IF_FALSE               33 (to 66)
                        56      LOAD_FAST                       2: context
                        58      LOAD_METHOD                     4: _raise_error
                        60      LOAD_GLOBAL                     5: InvalidOperation
                        62      CALL_METHOD                     1
                        64      RETURN_VALUE                    
                        66      LOAD_CONST                      5: -2
                        68      LOAD_FAST                       2: context
                        70      LOAD_ATTR                       6: Emax
                        72      LOAD_FAST                       2: context
                        74      LOAD_ATTR                       7: prec
                        76      BINARY_ADD                      
                        78      BINARY_MULTIPLY                 
                        80      STORE_FAST                      4: liminf
                        82      LOAD_CONST                      6: 2
                        84      LOAD_FAST                       2: context
                        86      LOAD_ATTR                       6: Emax
                        88      LOAD_FAST                       2: context
                        90      LOAD_ATTR                       7: prec
                        92      BINARY_ADD                      
                        94      BINARY_MULTIPLY                 
                        96      STORE_FAST                      5: limsup
                        98      LOAD_FAST                       4: liminf
                        100     LOAD_GLOBAL                     8: int
                        102     LOAD_FAST                       1: other
                        104     CALL_FUNCTION                   1
                        106     DUP_TOP                         
                        108     ROT_THREE                       
                        110     COMPARE_OP                      1 (<=)
                        112     POP_JUMP_IF_FALSE               61 (to 122)
                        114     LOAD_FAST                       5: limsup
                        116     COMPARE_OP                      1 (<=)
                        118     POP_JUMP_IF_TRUE                67 (to 134)
                        120     JUMP_FORWARD                    1 (to 124)
                        122     POP_TOP                         
                        124     LOAD_FAST                       2: context
                        126     LOAD_METHOD                     4: _raise_error
                        128     LOAD_GLOBAL                     5: InvalidOperation
                        130     CALL_METHOD                     1
                        132     RETURN_VALUE                    
                        134     LOAD_FAST                       0: self
                        136     LOAD_METHOD                     9: _isinfinity
                        138     CALL_METHOD                     0
                        140     POP_JUMP_IF_FALSE               75 (to 150)
                        142     LOAD_GLOBAL                     10: Decimal
                        144     LOAD_FAST                       0: self
                        146     CALL_FUNCTION                   1
                        148     RETURN_VALUE                    
                        150     LOAD_GLOBAL                     11: _dec_from_triple
                        152     LOAD_FAST                       0: self
                        154     LOAD_ATTR                       12: _sign
                        156     LOAD_FAST                       0: self
                        158     LOAD_ATTR                       13: _int
                        160     LOAD_FAST                       0: self
                        162     LOAD_ATTR                       3: _exp
                        164     LOAD_GLOBAL                     8: int
                        166     LOAD_FAST                       1: other
                        168     CALL_FUNCTION                   1
                        170     BINARY_ADD                      
                        172     CALL_FUNCTION                   3
                        174     STORE_FAST                      6: d
                        176     LOAD_FAST                       6: d
                        178     LOAD_METHOD                     14: _fix
                        180     LOAD_FAST                       2: context
                        182     CALL_METHOD                     1
                        184     STORE_FAST                      6: d
                        186     LOAD_FAST                       6: d
                        188     RETURN_VALUE                    
                'Decimal.scaleb'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: shift
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_convert_other'
                        '_check_nans'
                        '_exp'
                        '_raise_error'
                        'InvalidOperation'
                        'prec'
                        'int'
                        '_isinfinity'
                        'Decimal'
                        '_int'
                        'len'
                        '_dec_from_triple'
                        '_sign'
                        'lstrip'
                    [Var Names]
                        'self'
                        'other'
                        'context'
                        'ans'
                        'torot'
                        'rotdig'
                        'topad'
                        'shifted'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns a shifted copy of self, value-of-other times.'
                        None
                        True
                        (
                            'raiseit'
                        )
                        0
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       2: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      2: context
                        14      LOAD_GLOBAL                     1: _convert_other
                        16      LOAD_FAST                       1: other
                        18      LOAD_CONST                      2: True
                        20      LOAD_CONST                      3: ('raiseit',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      1: other
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     2: _check_nans
                        30      LOAD_FAST                       1: other
                        32      LOAD_FAST                       2: context
                        34      CALL_METHOD                     2
                        36      STORE_FAST                      3: ans
                        38      LOAD_FAST                       3: ans
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_FAST                       3: ans
                        44      RETURN_VALUE                    
                        46      LOAD_FAST                       1: other
                        48      LOAD_ATTR                       3: _exp
                        50      LOAD_CONST                      4: 0
                        52      COMPARE_OP                      3 (!=)
                        54      POP_JUMP_IF_FALSE               33 (to 66)
                        56      LOAD_FAST                       2: context
                        58      LOAD_METHOD                     4: _raise_error
                        60      LOAD_GLOBAL                     5: InvalidOperation
                        62      CALL_METHOD                     1
                        64      RETURN_VALUE                    
                        66      LOAD_FAST                       2: context
                        68      LOAD_ATTR                       6: prec
                        70      UNARY_NEGATIVE                  
                        72      LOAD_GLOBAL                     7: int
                        74      LOAD_FAST                       1: other
                        76      CALL_FUNCTION                   1
                        78      DUP_TOP                         
                        80      ROT_THREE                       
                        82      COMPARE_OP                      1 (<=)
                        84      POP_JUMP_IF_FALSE               48 (to 96)
                        86      LOAD_FAST                       2: context
                        88      LOAD_ATTR                       6: prec
                        90      COMPARE_OP                      1 (<=)
                        92      POP_JUMP_IF_TRUE                54 (to 108)
                        94      JUMP_FORWARD                    1 (to 98)
                        96      POP_TOP                         
                        98      LOAD_FAST                       2: context
                        100     LOAD_METHOD                     4: _raise_error
                        102     LOAD_GLOBAL                     5: InvalidOperation
                        104     CALL_METHOD                     1
                        106     RETURN_VALUE                    
                        108     LOAD_FAST                       0: self
                        110     LOAD_METHOD                     8: _isinfinity
                        112     CALL_METHOD                     0
                        114     POP_JUMP_IF_FALSE               62 (to 124)
                        116     LOAD_GLOBAL                     9: Decimal
                        118     LOAD_FAST                       0: self
                        120     CALL_FUNCTION                   1
                        122     RETURN_VALUE                    
                        124     LOAD_GLOBAL                     7: int
                        126     LOAD_FAST                       1: other
                        128     CALL_FUNCTION                   1
                        130     STORE_FAST                      4: torot
                        132     LOAD_FAST                       0: self
                        134     LOAD_ATTR                       10: _int
                        136     STORE_FAST                      5: rotdig
                        138     LOAD_FAST                       2: context
                        140     LOAD_ATTR                       6: prec
                        142     LOAD_GLOBAL                     11: len
                        144     LOAD_FAST                       5: rotdig
                        146     CALL_FUNCTION                   1
                        148     BINARY_SUBTRACT                 
                        150     STORE_FAST                      6: topad
                        152     LOAD_FAST                       6: topad
                        154     LOAD_CONST                      4: 0
                        156     COMPARE_OP                      4 (>)
                        158     POP_JUMP_IF_FALSE               87 (to 174)
                        160     LOAD_CONST                      5: '0'
                        162     LOAD_FAST                       6: topad
                        164     BINARY_MULTIPLY                 
                        166     LOAD_FAST                       5: rotdig
                        168     BINARY_ADD                      
                        170     STORE_FAST                      5: rotdig
                        172     JUMP_FORWARD                    11 (to 196)
                        174     LOAD_FAST                       6: topad
                        176     LOAD_CONST                      4: 0
                        178     COMPARE_OP                      0 (<)
                        180     POP_JUMP_IF_FALSE               98 (to 196)
                        182     LOAD_FAST                       5: rotdig
                        184     LOAD_FAST                       6: topad
                        186     UNARY_NEGATIVE                  
                        188     LOAD_CONST                      1: None
                        190     BUILD_SLICE                     2
                        192     BINARY_SUBSCR                   
                        194     STORE_FAST                      5: rotdig
                        196     LOAD_FAST                       4: torot
                        198     LOAD_CONST                      4: 0
                        200     COMPARE_OP                      0 (<)
                        202     POP_JUMP_IF_FALSE               109 (to 218)
                        204     LOAD_FAST                       5: rotdig
                        206     LOAD_CONST                      1: None
                        208     LOAD_FAST                       4: torot
                        210     BUILD_SLICE                     2
                        212     BINARY_SUBSCR                   
                        214     STORE_FAST                      7: shifted
                        216     JUMP_FORWARD                    14 (to 246)
                        218     LOAD_FAST                       5: rotdig
                        220     LOAD_CONST                      5: '0'
                        222     LOAD_FAST                       4: torot
                        224     BINARY_MULTIPLY                 
                        226     BINARY_ADD                      
                        228     STORE_FAST                      7: shifted
                        230     LOAD_FAST                       7: shifted
                        232     LOAD_FAST                       2: context
                        234     LOAD_ATTR                       6: prec
                        236     UNARY_NEGATIVE                  
                        238     LOAD_CONST                      1: None
                        240     BUILD_SLICE                     2
                        242     BINARY_SUBSCR                   
                        244     STORE_FAST                      7: shifted
                        246     LOAD_GLOBAL                     12: _dec_from_triple
                        248     LOAD_FAST                       0: self
                        250     LOAD_ATTR                       13: _sign
                        252     LOAD_FAST                       7: shifted
                        254     LOAD_METHOD                     14: lstrip
                        256     LOAD_CONST                      5: '0'
                        258     CALL_METHOD                     1
                        260     JUMP_IF_TRUE_OR_POP             132 (to 264)
                        262     LOAD_CONST                      5: '0'
                        264     LOAD_FAST                       0: self
                        266     LOAD_ATTR                       3: _exp
                        268     CALL_FUNCTION                   3
                        270     RETURN_VALUE                    
                'Decimal.shift'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__class__'
                        'str'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __class__
                        4       LOAD_GLOBAL                     1: str
                        6       LOAD_FAST                       0: self
                        8       CALL_FUNCTION                   1
                        10      BUILD_TUPLE                     1
                        12      BUILD_TUPLE                     2
                        14      RETURN_VALUE                    
                'Decimal.__reduce__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __copy__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        'Decimal'
                        '__class__'
                        'str'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: type
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_GLOBAL                     1: Decimal
                        8       IS_OP                           0 (is)
                        10      POP_JUMP_IF_FALSE               8 (to 16)
                        12      LOAD_FAST                       0: self
                        14      RETURN_VALUE                    
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     2: __class__
                        20      LOAD_GLOBAL                     3: str
                        22      LOAD_FAST                       0: self
                        24      CALL_FUNCTION                   1
                        26      CALL_METHOD                     1
                        28      RETURN_VALUE                    
                'Decimal.__copy__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __deepcopy__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        'Decimal'
                        '__class__'
                        'str'
                    [Var Names]
                        'self'
                        'memo'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: type
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_GLOBAL                     1: Decimal
                        8       IS_OP                           0 (is)
                        10      POP_JUMP_IF_FALSE               8 (to 16)
                        12      LOAD_FAST                       0: self
                        14      RETURN_VALUE                    
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     2: __class__
                        20      LOAD_GLOBAL                     3: str
                        22      LOAD_FAST                       0: self
                        24      CALL_FUNCTION                   1
                        26      CALL_METHOD                     1
                        28      RETURN_VALUE                    
                'Decimal.__deepcopy__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __format__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 14
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        '_parse_format_specifier'
                        '_is_special'
                        '_format_sign'
                        '_sign'
                        'str'
                        'copy_abs'
                        '_format_align'
                        'capitals'
                        '_dec_from_triple'
                        '_int'
                        '_exp'
                        'rounding'
                        '_round'
                        '_rescale'
                        'len'
                        '_format_number'
                    [Var Names]
                        'self'
                        'specifier'
                        'context'
                        '_localeconv'
                        'spec'
                        'sign'
                        'body'
                        'rounding'
                        'precision'
                        'leftdigits'
                        'dotplace'
                        'intpart'
                        'fracpart'
                        'exp'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Format a Decimal instance according to the given specifier.\n\n        The specifier should be a standard format specifier, with the\n        form described in PEP 3101.  Formatting types 'e', 'E', 'f',\n        'F', 'g', 'G', 'n' and '%' are supported.  If the formatting\n        type is omitted it defaults to 'g' or 'G', depending on the\n        value of context.capitals.\n        "
                        None
                        (
                            '_localeconv'
                        )
                        'type'
                        '%'
                        'g'
                        'G'
                        2
                        'precision'
                        'eE'
                        1
                        'fF%'
                        'gG'
                        0
                        -6
                        '0'
                        ''
                    [Disassembly]
                        0       LOAD_FAST                       2: context
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: getcontext
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      2: context
                        14      LOAD_GLOBAL                     1: _parse_format_specifier
                        16      LOAD_FAST                       1: specifier
                        18      LOAD_FAST                       3: _localeconv
                        20      LOAD_CONST                      2: ('_localeconv',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      4: spec
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       2: _is_special
                        30      POP_JUMP_IF_FALSE               44 (to 88)
                        32      LOAD_GLOBAL                     3: _format_sign
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       4: _sign
                        38      LOAD_FAST                       4: spec
                        40      CALL_FUNCTION                   2
                        42      STORE_FAST                      5: sign
                        44      LOAD_GLOBAL                     5: str
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     6: copy_abs
                        50      CALL_METHOD                     0
                        52      CALL_FUNCTION                   1
                        54      STORE_FAST                      6: body
                        56      LOAD_FAST                       4: spec
                        58      LOAD_CONST                      3: 'type'
                        60      BINARY_SUBSCR                   
                        62      LOAD_CONST                      4: '%'
                        64      COMPARE_OP                      2 (==)
                        66      POP_JUMP_IF_FALSE               38 (to 76)
                        68      LOAD_FAST                       6: body
                        70      LOAD_CONST                      4: '%'
                        72      INPLACE_ADD                     
                        74      STORE_FAST                      6: body
                        76      LOAD_GLOBAL                     7: _format_align
                        78      LOAD_FAST                       5: sign
                        80      LOAD_FAST                       6: body
                        82      LOAD_FAST                       4: spec
                        84      CALL_FUNCTION                   3
                        86      RETURN_VALUE                    
                        88      LOAD_FAST                       4: spec
                        90      LOAD_CONST                      3: 'type'
                        92      BINARY_SUBSCR                   
                        94      LOAD_CONST                      1: None
                        96      IS_OP                           0 (is)
                        98      POP_JUMP_IF_FALSE               59 (to 118)
                        100     LOAD_CONST                      5: 'g'
                        102     LOAD_CONST                      6: 'G'
                        104     BUILD_LIST                      2
                        106     LOAD_FAST                       2: context
                        108     LOAD_ATTR                       8: capitals
                        110     BINARY_SUBSCR                   
                        112     LOAD_FAST                       4: spec
                        114     LOAD_CONST                      3: 'type'
                        116     STORE_SUBSCR                    
                        118     LOAD_FAST                       4: spec
                        120     LOAD_CONST                      3: 'type'
                        122     BINARY_SUBSCR                   
                        124     LOAD_CONST                      4: '%'
                        126     COMPARE_OP                      2 (==)
                        128     POP_JUMP_IF_FALSE               76 (to 152)
                        130     LOAD_GLOBAL                     9: _dec_from_triple
                        132     LOAD_FAST                       0: self
                        134     LOAD_ATTR                       4: _sign
                        136     LOAD_FAST                       0: self
                        138     LOAD_ATTR                       10: _int
                        140     LOAD_FAST                       0: self
                        142     LOAD_ATTR                       11: _exp
                        144     LOAD_CONST                      7: 2
                        146     BINARY_ADD                      
                        148     CALL_FUNCTION                   3
                        150     STORE_FAST                      0: self
                        152     LOAD_FAST                       2: context
                        154     LOAD_ATTR                       12: rounding
                        156     STORE_FAST                      7: rounding
                        158     LOAD_FAST                       4: spec
                        160     LOAD_CONST                      8: 'precision'
                        162     BINARY_SUBSCR                   
                        164     STORE_FAST                      8: precision
                        166     LOAD_FAST                       8: precision
                        168     LOAD_CONST                      1: None
                        170     IS_OP                           1 (is not)
                        172     POP_JUMP_IF_FALSE               135 (to 270)
                        174     LOAD_FAST                       4: spec
                        176     LOAD_CONST                      3: 'type'
                        178     BINARY_SUBSCR                   
                        180     LOAD_CONST                      9: 'eE'
                        182     CONTAINS_OP                     0 (in)
                        184     POP_JUMP_IF_FALSE               102 (to 204)
                        186     LOAD_FAST                       0: self
                        188     LOAD_METHOD                     13: _round
                        190     LOAD_FAST                       8: precision
                        192     LOAD_CONST                      10: 1
                        194     BINARY_ADD                      
                        196     LOAD_FAST                       7: rounding
                        198     CALL_METHOD                     2
                        200     STORE_FAST                      0: self
                        202     JUMP_FORWARD                    33 (to 270)
                        204     LOAD_FAST                       4: spec
                        206     LOAD_CONST                      3: 'type'
                        208     BINARY_SUBSCR                   
                        210     LOAD_CONST                      11: 'fF%'
                        212     CONTAINS_OP                     0 (in)
                        214     POP_JUMP_IF_FALSE               116 (to 232)
                        216     LOAD_FAST                       0: self
                        218     LOAD_METHOD                     14: _rescale
                        220     LOAD_FAST                       8: precision
                        222     UNARY_NEGATIVE                  
                        224     LOAD_FAST                       7: rounding
                        226     CALL_METHOD                     2
                        228     STORE_FAST                      0: self
                        230     JUMP_FORWARD                    19 (to 270)
                        232     LOAD_FAST                       4: spec
                        234     LOAD_CONST                      3: 'type'
                        236     BINARY_SUBSCR                   
                        238     LOAD_CONST                      12: 'gG'
                        240     CONTAINS_OP                     0 (in)
                        242     POP_JUMP_IF_FALSE               135 (to 270)
                        244     LOAD_GLOBAL                     15: len
                        246     LOAD_FAST                       0: self
                        248     LOAD_ATTR                       10: _int
                        250     CALL_FUNCTION                   1
                        252     LOAD_FAST                       8: precision
                        254     COMPARE_OP                      4 (>)
                        256     POP_JUMP_IF_FALSE               135 (to 270)
                        258     LOAD_FAST                       0: self
                        260     LOAD_METHOD                     13: _round
                        262     LOAD_FAST                       8: precision
                        264     LOAD_FAST                       7: rounding
                        266     CALL_METHOD                     2
                        268     STORE_FAST                      0: self
                        270     LOAD_FAST                       0: self
                        272     POP_JUMP_IF_TRUE                154 (to 308)
                        274     LOAD_FAST                       0: self
                        276     LOAD_ATTR                       11: _exp
                        278     LOAD_CONST                      13: 0
                        280     COMPARE_OP                      4 (>)
                        282     POP_JUMP_IF_FALSE               154 (to 308)
                        284     LOAD_FAST                       4: spec
                        286     LOAD_CONST                      3: 'type'
                        288     BINARY_SUBSCR                   
                        290     LOAD_CONST                      11: 'fF%'
                        292     CONTAINS_OP                     0 (in)
                        294     POP_JUMP_IF_FALSE               154 (to 308)
                        296     LOAD_FAST                       0: self
                        298     LOAD_METHOD                     14: _rescale
                        300     LOAD_CONST                      13: 0
                        302     LOAD_FAST                       7: rounding
                        304     CALL_METHOD                     2
                        306     STORE_FAST                      0: self
                        308     LOAD_FAST                       0: self
                        310     LOAD_ATTR                       11: _exp
                        312     LOAD_GLOBAL                     15: len
                        314     LOAD_FAST                       0: self
                        316     LOAD_ATTR                       10: _int
                        318     CALL_FUNCTION                   1
                        320     BINARY_ADD                      
                        322     STORE_FAST                      9: leftdigits
                        324     LOAD_FAST                       4: spec
                        326     LOAD_CONST                      3: 'type'
                        328     BINARY_SUBSCR                   
                        330     LOAD_CONST                      9: 'eE'
                        332     CONTAINS_OP                     0 (in)
                        334     POP_JUMP_IF_FALSE               182 (to 364)
                        336     LOAD_FAST                       0: self
                        338     POP_JUMP_IF_TRUE                179 (to 358)
                        340     LOAD_FAST                       8: precision
                        342     LOAD_CONST                      1: None
                        344     IS_OP                           1 (is not)
                        346     POP_JUMP_IF_FALSE               179 (to 358)
                        348     LOAD_CONST                      10: 1
                        350     LOAD_FAST                       8: precision
                        352     BINARY_SUBTRACT                 
                        354     STORE_FAST                      10: dotplace
                        356     JUMP_FORWARD                    32 (to 422)
                        358     LOAD_CONST                      10: 1
                        360     STORE_FAST                      10: dotplace
                        362     JUMP_FORWARD                    29 (to 422)
                        364     LOAD_FAST                       4: spec
                        366     LOAD_CONST                      3: 'type'
                        368     BINARY_SUBSCR                   
                        370     LOAD_CONST                      11: 'fF%'
                        372     CONTAINS_OP                     0 (in)
                        374     POP_JUMP_IF_FALSE               191 (to 382)
                        376     LOAD_FAST                       9: leftdigits
                        378     STORE_FAST                      10: dotplace
                        380     JUMP_FORWARD                    20 (to 422)
                        382     LOAD_FAST                       4: spec
                        384     LOAD_CONST                      3: 'type'
                        386     BINARY_SUBSCR                   
                        388     LOAD_CONST                      12: 'gG'
                        390     CONTAINS_OP                     0 (in)
                        392     POP_JUMP_IF_FALSE               211 (to 422)
                        394     LOAD_FAST                       0: self
                        396     LOAD_ATTR                       11: _exp
                        398     LOAD_CONST                      13: 0
                        400     COMPARE_OP                      1 (<=)
                        402     POP_JUMP_IF_FALSE               209 (to 418)
                        404     LOAD_FAST                       9: leftdigits
                        406     LOAD_CONST                      14: -6
                        408     COMPARE_OP                      4 (>)
                        410     POP_JUMP_IF_FALSE               209 (to 418)
                        412     LOAD_FAST                       9: leftdigits
                        414     STORE_FAST                      10: dotplace
                        416     JUMP_FORWARD                    2 (to 422)
                        418     LOAD_CONST                      10: 1
                        420     STORE_FAST                      10: dotplace
                        422     LOAD_FAST                       10: dotplace
                        424     LOAD_CONST                      13: 0
                        426     COMPARE_OP                      0 (<)
                        428     POP_JUMP_IF_FALSE               226 (to 452)
                        430     LOAD_CONST                      15: '0'
                        432     STORE_FAST                      11: intpart
                        434     LOAD_CONST                      15: '0'
                        436     LOAD_FAST                       10: dotplace
                        438     UNARY_NEGATIVE                  
                        440     BINARY_MULTIPLY                 
                        442     LOAD_FAST                       0: self
                        444     LOAD_ATTR                       10: _int
                        446     BINARY_ADD                      
                        448     STORE_FAST                      12: fracpart
                        450     JUMP_FORWARD                    39 (to 530)
                        452     LOAD_FAST                       10: dotplace
                        454     LOAD_GLOBAL                     15: len
                        456     LOAD_FAST                       0: self
                        458     LOAD_ATTR                       10: _int
                        460     CALL_FUNCTION                   1
                        462     COMPARE_OP                      4 (>)
                        464     POP_JUMP_IF_FALSE               248 (to 496)
                        466     LOAD_FAST                       0: self
                        468     LOAD_ATTR                       10: _int
                        470     LOAD_CONST                      15: '0'
                        472     LOAD_FAST                       10: dotplace
                        474     LOAD_GLOBAL                     15: len
                        476     LOAD_FAST                       0: self
                        478     LOAD_ATTR                       10: _int
                        480     CALL_FUNCTION                   1
                        482     BINARY_SUBTRACT                 
                        484     BINARY_MULTIPLY                 
                        486     BINARY_ADD                      
                        488     STORE_FAST                      11: intpart
                        490     LOAD_CONST                      16: ''
                        492     STORE_FAST                      12: fracpart
                        494     JUMP_FORWARD                    17 (to 530)
                        496     LOAD_FAST                       0: self
                        498     LOAD_ATTR                       10: _int
                        500     LOAD_CONST                      1: None
                        502     LOAD_FAST                       10: dotplace
                        504     BUILD_SLICE                     2
                        506     BINARY_SUBSCR                   
                        508     JUMP_IF_TRUE_OR_POP             257 (to 514)
                        512     LOAD_CONST                      15: '0'
                        514     STORE_FAST                      11: intpart
                        516     LOAD_FAST                       0: self
                        518     LOAD_ATTR                       10: _int
                        520     LOAD_FAST                       10: dotplace
                        522     LOAD_CONST                      1: None
                        524     BUILD_SLICE                     2
                        526     BINARY_SUBSCR                   
                        528     STORE_FAST                      12: fracpart
                        530     LOAD_FAST                       9: leftdigits
                        532     LOAD_FAST                       10: dotplace
                        534     BINARY_SUBTRACT                 
                        536     STORE_FAST                      13: exp
                        538     LOAD_GLOBAL                     16: _format_number
                        540     LOAD_FAST                       0: self
                        542     LOAD_ATTR                       4: _sign
                        544     LOAD_FAST                       11: intpart
                        546     LOAD_FAST                       12: fracpart
                        548     LOAD_FAST                       13: exp
                        550     LOAD_FAST                       4: spec
                        552     CALL_FUNCTION                   5
                        554     RETURN_VALUE                    
                'Decimal.__format__'
                (
                    '0'
                    None
                )
                (
                    None
                    None
                )
                (
                    None
                )
                (
                    False
                    None
                )
                (
                    True
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Decimal'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Floating point class for decimal arithmetic.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ('_exp', '_int', '_sign', '_is_special')
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      242: ('0', None)
                18      LOAD_CONST                      5: <CODE> __new__
                20      LOAD_CONST                      6: 'Decimal.__new__'
                22      MAKE_FUNCTION                   1
                24      STORE_NAME                      5: __new__
                26      LOAD_NAME                       6: classmethod
                28      LOAD_CONST                      7: <CODE> from_float
                30      LOAD_CONST                      8: 'Decimal.from_float'
                32      MAKE_FUNCTION                   0
                34      CALL_FUNCTION                   1
                36      STORE_NAME                      7: from_float
                38      LOAD_CONST                      9: <CODE> _isnan
                40      LOAD_CONST                      10: 'Decimal._isnan'
                42      MAKE_FUNCTION                   0
                44      STORE_NAME                      8: _isnan
                46      LOAD_CONST                      11: <CODE> _isinfinity
                48      LOAD_CONST                      12: 'Decimal._isinfinity'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      9: _isinfinity
                54      LOAD_CONST                      243: (None, None)
                56      LOAD_CONST                      13: <CODE> _check_nans
                58      LOAD_CONST                      14: 'Decimal._check_nans'
                60      MAKE_FUNCTION                   1
                62      STORE_NAME                      10: _check_nans
                64      LOAD_CONST                      15: <CODE> _compare_check_nans
                66      LOAD_CONST                      16: 'Decimal._compare_check_nans'
                68      MAKE_FUNCTION                   0
                70      STORE_NAME                      11: _compare_check_nans
                72      LOAD_CONST                      17: <CODE> __bool__
                74      LOAD_CONST                      18: 'Decimal.__bool__'
                76      MAKE_FUNCTION                   0
                78      STORE_NAME                      12: __bool__
                80      LOAD_CONST                      19: <CODE> _cmp
                82      LOAD_CONST                      20: 'Decimal._cmp'
                84      MAKE_FUNCTION                   0
                86      STORE_NAME                      13: _cmp
                88      LOAD_CONST                      244: (None,)
                90      LOAD_CONST                      21: <CODE> __eq__
                92      LOAD_CONST                      22: 'Decimal.__eq__'
                94      MAKE_FUNCTION                   1
                96      STORE_NAME                      14: __eq__
                98      LOAD_CONST                      244: (None,)
                100     LOAD_CONST                      23: <CODE> __lt__
                102     LOAD_CONST                      24: 'Decimal.__lt__'
                104     MAKE_FUNCTION                   1
                106     STORE_NAME                      15: __lt__
                108     LOAD_CONST                      244: (None,)
                110     LOAD_CONST                      25: <CODE> __le__
                112     LOAD_CONST                      26: 'Decimal.__le__'
                114     MAKE_FUNCTION                   1
                116     STORE_NAME                      16: __le__
                118     LOAD_CONST                      244: (None,)
                120     LOAD_CONST                      27: <CODE> __gt__
                122     LOAD_CONST                      28: 'Decimal.__gt__'
                124     MAKE_FUNCTION                   1
                126     STORE_NAME                      17: __gt__
                128     LOAD_CONST                      244: (None,)
                130     LOAD_CONST                      29: <CODE> __ge__
                132     LOAD_CONST                      30: 'Decimal.__ge__'
                134     MAKE_FUNCTION                   1
                136     STORE_NAME                      18: __ge__
                138     LOAD_CONST                      244: (None,)
                140     LOAD_CONST                      31: <CODE> compare
                142     LOAD_CONST                      32: 'Decimal.compare'
                144     MAKE_FUNCTION                   1
                146     STORE_NAME                      19: compare
                148     LOAD_CONST                      33: <CODE> __hash__
                150     LOAD_CONST                      34: 'Decimal.__hash__'
                152     MAKE_FUNCTION                   0
                154     STORE_NAME                      20: __hash__
                156     LOAD_CONST                      35: <CODE> as_tuple
                158     LOAD_CONST                      36: 'Decimal.as_tuple'
                160     MAKE_FUNCTION                   0
                162     STORE_NAME                      21: as_tuple
                164     LOAD_CONST                      37: <CODE> as_integer_ratio
                166     LOAD_CONST                      38: 'Decimal.as_integer_ratio'
                168     MAKE_FUNCTION                   0
                170     STORE_NAME                      22: as_integer_ratio
                172     LOAD_CONST                      39: <CODE> __repr__
                174     LOAD_CONST                      40: 'Decimal.__repr__'
                176     MAKE_FUNCTION                   0
                178     STORE_NAME                      23: __repr__
                180     LOAD_CONST                      245: (False, None)
                182     LOAD_CONST                      42: <CODE> __str__
                184     LOAD_CONST                      43: 'Decimal.__str__'
                186     MAKE_FUNCTION                   1
                188     STORE_NAME                      24: __str__
                190     LOAD_CONST                      244: (None,)
                192     LOAD_CONST                      44: <CODE> to_eng_string
                194     LOAD_CONST                      45: 'Decimal.to_eng_string'
                196     MAKE_FUNCTION                   1
                198     STORE_NAME                      25: to_eng_string
                200     LOAD_CONST                      244: (None,)
                202     LOAD_CONST                      46: <CODE> __neg__
                204     LOAD_CONST                      47: 'Decimal.__neg__'
                206     MAKE_FUNCTION                   1
                208     STORE_NAME                      26: __neg__
                210     LOAD_CONST                      244: (None,)
                212     LOAD_CONST                      48: <CODE> __pos__
                214     LOAD_CONST                      49: 'Decimal.__pos__'
                216     MAKE_FUNCTION                   1
                218     STORE_NAME                      27: __pos__
                220     LOAD_CONST                      246: (True, None)
                222     LOAD_CONST                      51: <CODE> __abs__
                224     LOAD_CONST                      52: 'Decimal.__abs__'
                226     MAKE_FUNCTION                   1
                228     STORE_NAME                      28: __abs__
                230     LOAD_CONST                      244: (None,)
                232     LOAD_CONST                      53: <CODE> __add__
                234     LOAD_CONST                      54: 'Decimal.__add__'
                236     MAKE_FUNCTION                   1
                238     STORE_NAME                      29: __add__
                240     LOAD_NAME                       29: __add__
                242     STORE_NAME                      30: __radd__
                244     LOAD_CONST                      244: (None,)
                246     LOAD_CONST                      55: <CODE> __sub__
                248     LOAD_CONST                      56: 'Decimal.__sub__'
                250     MAKE_FUNCTION                   1
                252     STORE_NAME                      31: __sub__
                254     LOAD_CONST                      244: (None,)
                256     LOAD_CONST                      57: <CODE> __rsub__
                258     LOAD_CONST                      58: 'Decimal.__rsub__'
                260     MAKE_FUNCTION                   1
                262     STORE_NAME                      32: __rsub__
                264     LOAD_CONST                      244: (None,)
                266     LOAD_CONST                      59: <CODE> __mul__
                268     LOAD_CONST                      60: 'Decimal.__mul__'
                270     MAKE_FUNCTION                   1
                272     STORE_NAME                      33: __mul__
                274     LOAD_NAME                       33: __mul__
                276     STORE_NAME                      34: __rmul__
                278     LOAD_CONST                      244: (None,)
                280     LOAD_CONST                      61: <CODE> __truediv__
                282     LOAD_CONST                      62: 'Decimal.__truediv__'
                284     MAKE_FUNCTION                   1
                286     STORE_NAME                      35: __truediv__
                288     LOAD_CONST                      63: <CODE> _divide
                290     LOAD_CONST                      64: 'Decimal._divide'
                292     MAKE_FUNCTION                   0
                294     STORE_NAME                      36: _divide
                296     LOAD_CONST                      244: (None,)
                298     LOAD_CONST                      65: <CODE> __rtruediv__
                300     LOAD_CONST                      66: 'Decimal.__rtruediv__'
                302     MAKE_FUNCTION                   1
                304     STORE_NAME                      37: __rtruediv__
                306     LOAD_CONST                      244: (None,)
                308     LOAD_CONST                      67: <CODE> __divmod__
                310     LOAD_CONST                      68: 'Decimal.__divmod__'
                312     MAKE_FUNCTION                   1
                314     STORE_NAME                      38: __divmod__
                316     LOAD_CONST                      244: (None,)
                318     LOAD_CONST                      69: <CODE> __rdivmod__
                320     LOAD_CONST                      70: 'Decimal.__rdivmod__'
                322     MAKE_FUNCTION                   1
                324     STORE_NAME                      39: __rdivmod__
                326     LOAD_CONST                      244: (None,)
                328     LOAD_CONST                      71: <CODE> __mod__
                330     LOAD_CONST                      72: 'Decimal.__mod__'
                332     MAKE_FUNCTION                   1
                334     STORE_NAME                      40: __mod__
                336     LOAD_CONST                      244: (None,)
                338     LOAD_CONST                      73: <CODE> __rmod__
                340     LOAD_CONST                      74: 'Decimal.__rmod__'
                342     MAKE_FUNCTION                   1
                344     STORE_NAME                      41: __rmod__
                346     LOAD_CONST                      244: (None,)
                348     LOAD_CONST                      75: <CODE> remainder_near
                350     LOAD_CONST                      76: 'Decimal.remainder_near'
                352     MAKE_FUNCTION                   1
                354     STORE_NAME                      42: remainder_near
                356     LOAD_CONST                      244: (None,)
                358     LOAD_CONST                      77: <CODE> __floordiv__
                360     LOAD_CONST                      78: 'Decimal.__floordiv__'
                362     MAKE_FUNCTION                   1
                364     STORE_NAME                      43: __floordiv__
                366     LOAD_CONST                      244: (None,)
                368     LOAD_CONST                      79: <CODE> __rfloordiv__
                370     LOAD_CONST                      80: 'Decimal.__rfloordiv__'
                372     MAKE_FUNCTION                   1
                374     STORE_NAME                      44: __rfloordiv__
                376     LOAD_CONST                      81: <CODE> __float__
                378     LOAD_CONST                      82: 'Decimal.__float__'
                380     MAKE_FUNCTION                   0
                382     STORE_NAME                      45: __float__
                384     LOAD_CONST                      83: <CODE> __int__
                386     LOAD_CONST                      84: 'Decimal.__int__'
                388     MAKE_FUNCTION                   0
                390     STORE_NAME                      46: __int__
                392     LOAD_NAME                       46: __int__
                394     STORE_NAME                      47: __trunc__
                396     LOAD_NAME                       48: property
                398     LOAD_CONST                      85: <CODE> real
                400     LOAD_CONST                      86: 'Decimal.real'
                402     MAKE_FUNCTION                   0
                404     CALL_FUNCTION                   1
                406     STORE_NAME                      49: real
                408     LOAD_NAME                       48: property
                410     LOAD_CONST                      87: <CODE> imag
                412     LOAD_CONST                      88: 'Decimal.imag'
                414     MAKE_FUNCTION                   0
                416     CALL_FUNCTION                   1
                418     STORE_NAME                      50: imag
                420     LOAD_CONST                      89: <CODE> conjugate
                422     LOAD_CONST                      90: 'Decimal.conjugate'
                424     MAKE_FUNCTION                   0
                426     STORE_NAME                      51: conjugate
                428     LOAD_CONST                      91: <CODE> __complex__
                430     LOAD_CONST                      92: 'Decimal.__complex__'
                432     MAKE_FUNCTION                   0
                434     STORE_NAME                      52: __complex__
                436     LOAD_CONST                      93: <CODE> _fix_nan
                438     LOAD_CONST                      94: 'Decimal._fix_nan'
                440     MAKE_FUNCTION                   0
                442     STORE_NAME                      53: _fix_nan
                444     LOAD_CONST                      95: <CODE> _fix
                446     LOAD_CONST                      96: 'Decimal._fix'
                448     MAKE_FUNCTION                   0
                450     STORE_NAME                      54: _fix
                452     LOAD_CONST                      97: <CODE> _round_down
                454     LOAD_CONST                      98: 'Decimal._round_down'
                456     MAKE_FUNCTION                   0
                458     STORE_NAME                      55: _round_down
                460     LOAD_CONST                      99: <CODE> _round_up
                462     LOAD_CONST                      100: 'Decimal._round_up'
                464     MAKE_FUNCTION                   0
                466     STORE_NAME                      56: _round_up
                468     LOAD_CONST                      101: <CODE> _round_half_up
                470     LOAD_CONST                      102: 'Decimal._round_half_up'
                472     MAKE_FUNCTION                   0
                474     STORE_NAME                      57: _round_half_up
                476     LOAD_CONST                      103: <CODE> _round_half_down
                478     LOAD_CONST                      104: 'Decimal._round_half_down'
                480     MAKE_FUNCTION                   0
                482     STORE_NAME                      58: _round_half_down
                484     LOAD_CONST                      105: <CODE> _round_half_even
                486     LOAD_CONST                      106: 'Decimal._round_half_even'
                488     MAKE_FUNCTION                   0
                490     STORE_NAME                      59: _round_half_even
                492     LOAD_CONST                      107: <CODE> _round_ceiling
                494     LOAD_CONST                      108: 'Decimal._round_ceiling'
                496     MAKE_FUNCTION                   0
                498     STORE_NAME                      60: _round_ceiling
                500     LOAD_CONST                      109: <CODE> _round_floor
                502     LOAD_CONST                      110: 'Decimal._round_floor'
                504     MAKE_FUNCTION                   0
                506     STORE_NAME                      61: _round_floor
                508     LOAD_CONST                      111: <CODE> _round_05up
                510     LOAD_CONST                      112: 'Decimal._round_05up'
                512     MAKE_FUNCTION                   0
                514     STORE_NAME                      62: _round_05up
                516     LOAD_NAME                       63: dict
                518     LOAD_NAME                       55: _round_down
                520     LOAD_NAME                       56: _round_up
                522     LOAD_NAME                       57: _round_half_up
                524     LOAD_NAME                       58: _round_half_down
                526     LOAD_NAME                       59: _round_half_even
                528     LOAD_NAME                       60: _round_ceiling
                530     LOAD_NAME                       61: _round_floor
                532     LOAD_NAME                       62: _round_05up
                534     LOAD_CONST                      113: ('ROUND_DOWN', 'ROUND_UP', 'ROUND_HALF_UP', 'ROUND_HALF_DOWN', 'ROUND_HALF_EVEN', 'ROUND_CEILING', 'ROUND_FLOOR', 'ROUND_05UP')
                536     CALL_FUNCTION_KW                8
                538     STORE_NAME                      64: _pick_rounding_function
                540     LOAD_CONST                      244: (None,)
                542     LOAD_CONST                      114: <CODE> __round__
                544     LOAD_CONST                      115: 'Decimal.__round__'
                546     MAKE_FUNCTION                   1
                548     STORE_NAME                      65: __round__
                550     LOAD_CONST                      116: <CODE> __floor__
                552     LOAD_CONST                      117: 'Decimal.__floor__'
                554     MAKE_FUNCTION                   0
                556     STORE_NAME                      66: __floor__
                558     LOAD_CONST                      118: <CODE> __ceil__
                560     LOAD_CONST                      119: 'Decimal.__ceil__'
                562     MAKE_FUNCTION                   0
                564     STORE_NAME                      67: __ceil__
                566     LOAD_CONST                      244: (None,)
                568     LOAD_CONST                      120: <CODE> fma
                570     LOAD_CONST                      121: 'Decimal.fma'
                572     MAKE_FUNCTION                   1
                574     STORE_NAME                      68: fma
                576     LOAD_CONST                      244: (None,)
                578     LOAD_CONST                      122: <CODE> _power_modulo
                580     LOAD_CONST                      123: 'Decimal._power_modulo'
                582     MAKE_FUNCTION                   1
                584     STORE_NAME                      69: _power_modulo
                586     LOAD_CONST                      124: <CODE> _power_exact
                588     LOAD_CONST                      125: 'Decimal._power_exact'
                590     MAKE_FUNCTION                   0
                592     STORE_NAME                      70: _power_exact
                594     LOAD_CONST                      243: (None, None)
                596     LOAD_CONST                      126: <CODE> __pow__
                598     LOAD_CONST                      127: 'Decimal.__pow__'
                600     MAKE_FUNCTION                   1
                602     STORE_NAME                      71: __pow__
                604     LOAD_CONST                      244: (None,)
                606     LOAD_CONST                      128: <CODE> __rpow__
                608     LOAD_CONST                      129: 'Decimal.__rpow__'
                610     MAKE_FUNCTION                   1
                612     STORE_NAME                      72: __rpow__
                614     LOAD_CONST                      244: (None,)
                616     LOAD_CONST                      130: <CODE> normalize
                618     LOAD_CONST                      131: 'Decimal.normalize'
                620     MAKE_FUNCTION                   1
                622     STORE_NAME                      73: normalize
                624     LOAD_CONST                      243: (None, None)
                626     LOAD_CONST                      132: <CODE> quantize
                628     LOAD_CONST                      133: 'Decimal.quantize'
                630     MAKE_FUNCTION                   1
                632     STORE_NAME                      74: quantize
                634     LOAD_CONST                      244: (None,)
                636     LOAD_CONST                      134: <CODE> same_quantum
                638     LOAD_CONST                      135: 'Decimal.same_quantum'
                640     MAKE_FUNCTION                   1
                642     STORE_NAME                      75: same_quantum
                644     LOAD_CONST                      136: <CODE> _rescale
                646     LOAD_CONST                      137: 'Decimal._rescale'
                648     MAKE_FUNCTION                   0
                650     STORE_NAME                      76: _rescale
                652     LOAD_CONST                      138: <CODE> _round
                654     LOAD_CONST                      139: 'Decimal._round'
                656     MAKE_FUNCTION                   0
                658     STORE_NAME                      77: _round
                660     LOAD_CONST                      243: (None, None)
                662     LOAD_CONST                      140: <CODE> to_integral_exact
                664     LOAD_CONST                      141: 'Decimal.to_integral_exact'
                666     MAKE_FUNCTION                   1
                668     STORE_NAME                      78: to_integral_exact
                670     LOAD_CONST                      243: (None, None)
                672     LOAD_CONST                      142: <CODE> to_integral_value
                674     LOAD_CONST                      143: 'Decimal.to_integral_value'
                676     MAKE_FUNCTION                   1
                678     STORE_NAME                      79: to_integral_value
                680     LOAD_NAME                       79: to_integral_value
                682     STORE_NAME                      80: to_integral
                684     LOAD_CONST                      244: (None,)
                686     LOAD_CONST                      144: <CODE> sqrt
                688     LOAD_CONST                      145: 'Decimal.sqrt'
                690     MAKE_FUNCTION                   1
                692     STORE_NAME                      81: sqrt
                694     LOAD_CONST                      244: (None,)
                696     LOAD_CONST                      146: <CODE> max
                698     LOAD_CONST                      147: 'Decimal.max'
                700     MAKE_FUNCTION                   1
                702     STORE_NAME                      82: max
                704     LOAD_CONST                      244: (None,)
                706     LOAD_CONST                      148: <CODE> min
                708     LOAD_CONST                      149: 'Decimal.min'
                710     MAKE_FUNCTION                   1
                712     STORE_NAME                      83: min
                714     LOAD_CONST                      150: <CODE> _isinteger
                716     LOAD_CONST                      151: 'Decimal._isinteger'
                718     MAKE_FUNCTION                   0
                720     STORE_NAME                      84: _isinteger
                722     LOAD_CONST                      152: <CODE> _iseven
                724     LOAD_CONST                      153: 'Decimal._iseven'
                726     MAKE_FUNCTION                   0
                728     STORE_NAME                      85: _iseven
                730     LOAD_CONST                      154: <CODE> adjusted
                732     LOAD_CONST                      155: 'Decimal.adjusted'
                734     MAKE_FUNCTION                   0
                736     STORE_NAME                      86: adjusted
                738     LOAD_CONST                      156: <CODE> canonical
                740     LOAD_CONST                      157: 'Decimal.canonical'
                742     MAKE_FUNCTION                   0
                744     STORE_NAME                      87: canonical
                746     LOAD_CONST                      244: (None,)
                748     LOAD_CONST                      158: <CODE> compare_signal
                750     LOAD_CONST                      159: 'Decimal.compare_signal'
                752     MAKE_FUNCTION                   1
                754     STORE_NAME                      88: compare_signal
                756     LOAD_CONST                      244: (None,)
                758     LOAD_CONST                      160: <CODE> compare_total
                760     LOAD_CONST                      161: 'Decimal.compare_total'
                762     MAKE_FUNCTION                   1
                764     STORE_NAME                      89: compare_total
                766     LOAD_CONST                      244: (None,)
                768     LOAD_CONST                      162: <CODE> compare_total_mag
                770     LOAD_CONST                      163: 'Decimal.compare_total_mag'
                772     MAKE_FUNCTION                   1
                774     STORE_NAME                      90: compare_total_mag
                776     LOAD_CONST                      164: <CODE> copy_abs
                778     LOAD_CONST                      165: 'Decimal.copy_abs'
                780     MAKE_FUNCTION                   0
                782     STORE_NAME                      91: copy_abs
                784     LOAD_CONST                      166: <CODE> copy_negate
                786     LOAD_CONST                      167: 'Decimal.copy_negate'
                788     MAKE_FUNCTION                   0
                790     STORE_NAME                      92: copy_negate
                792     LOAD_CONST                      244: (None,)
                794     LOAD_CONST                      168: <CODE> copy_sign
                796     LOAD_CONST                      169: 'Decimal.copy_sign'
                798     MAKE_FUNCTION                   1
                800     STORE_NAME                      93: copy_sign
                802     LOAD_CONST                      244: (None,)
                804     LOAD_CONST                      170: <CODE> exp
                806     LOAD_CONST                      171: 'Decimal.exp'
                808     MAKE_FUNCTION                   1
                810     STORE_NAME                      94: exp
                812     LOAD_CONST                      172: <CODE> is_canonical
                814     LOAD_CONST                      173: 'Decimal.is_canonical'
                816     MAKE_FUNCTION                   0
                818     STORE_NAME                      95: is_canonical
                820     LOAD_CONST                      174: <CODE> is_finite
                822     LOAD_CONST                      175: 'Decimal.is_finite'
                824     MAKE_FUNCTION                   0
                826     STORE_NAME                      96: is_finite
                828     LOAD_CONST                      176: <CODE> is_infinite
                830     LOAD_CONST                      177: 'Decimal.is_infinite'
                832     MAKE_FUNCTION                   0
                834     STORE_NAME                      97: is_infinite
                836     LOAD_CONST                      178: <CODE> is_nan
                838     LOAD_CONST                      179: 'Decimal.is_nan'
                840     MAKE_FUNCTION                   0
                842     STORE_NAME                      98: is_nan
                844     LOAD_CONST                      244: (None,)
                846     LOAD_CONST                      180: <CODE> is_normal
                848     LOAD_CONST                      181: 'Decimal.is_normal'
                850     MAKE_FUNCTION                   1
                852     STORE_NAME                      99: is_normal
                854     LOAD_CONST                      182: <CODE> is_qnan
                856     LOAD_CONST                      183: 'Decimal.is_qnan'
                858     MAKE_FUNCTION                   0
                860     STORE_NAME                      100: is_qnan
                862     LOAD_CONST                      184: <CODE> is_signed
                864     LOAD_CONST                      185: 'Decimal.is_signed'
                866     MAKE_FUNCTION                   0
                868     STORE_NAME                      101: is_signed
                870     LOAD_CONST                      186: <CODE> is_snan
                872     LOAD_CONST                      187: 'Decimal.is_snan'
                874     MAKE_FUNCTION                   0
                876     STORE_NAME                      102: is_snan
                878     LOAD_CONST                      244: (None,)
                880     LOAD_CONST                      188: <CODE> is_subnormal
                882     LOAD_CONST                      189: 'Decimal.is_subnormal'
                884     MAKE_FUNCTION                   1
                886     STORE_NAME                      103: is_subnormal
                888     LOAD_CONST                      190: <CODE> is_zero
                890     LOAD_CONST                      191: 'Decimal.is_zero'
                892     MAKE_FUNCTION                   0
                894     STORE_NAME                      104: is_zero
                896     LOAD_CONST                      192: <CODE> _ln_exp_bound
                898     LOAD_CONST                      193: 'Decimal._ln_exp_bound'
                900     MAKE_FUNCTION                   0
                902     STORE_NAME                      105: _ln_exp_bound
                904     LOAD_CONST                      244: (None,)
                906     LOAD_CONST                      194: <CODE> ln
                908     LOAD_CONST                      195: 'Decimal.ln'
                910     MAKE_FUNCTION                   1
                912     STORE_NAME                      106: ln
                914     LOAD_CONST                      196: <CODE> _log10_exp_bound
                916     LOAD_CONST                      197: 'Decimal._log10_exp_bound'
                918     MAKE_FUNCTION                   0
                920     STORE_NAME                      107: _log10_exp_bound
                922     LOAD_CONST                      244: (None,)
                924     LOAD_CONST                      198: <CODE> log10
                926     LOAD_CONST                      199: 'Decimal.log10'
                928     MAKE_FUNCTION                   1
                930     STORE_NAME                      108: log10
                932     LOAD_CONST                      244: (None,)
                934     LOAD_CONST                      200: <CODE> logb
                936     LOAD_CONST                      201: 'Decimal.logb'
                938     MAKE_FUNCTION                   1
                940     STORE_NAME                      109: logb
                942     LOAD_CONST                      202: <CODE> _islogical
                944     LOAD_CONST                      203: 'Decimal._islogical'
                946     MAKE_FUNCTION                   0
                948     STORE_NAME                      110: _islogical
                950     LOAD_CONST                      204: <CODE> _fill_logical
                952     LOAD_CONST                      205: 'Decimal._fill_logical'
                954     MAKE_FUNCTION                   0
                956     STORE_NAME                      111: _fill_logical
                958     LOAD_CONST                      244: (None,)
                960     LOAD_CONST                      206: <CODE> logical_and
                962     LOAD_CONST                      207: 'Decimal.logical_and'
                964     MAKE_FUNCTION                   1
                966     STORE_NAME                      112: logical_and
                968     LOAD_CONST                      244: (None,)
                970     LOAD_CONST                      208: <CODE> logical_invert
                972     LOAD_CONST                      209: 'Decimal.logical_invert'
                974     MAKE_FUNCTION                   1
                976     STORE_NAME                      113: logical_invert
                978     LOAD_CONST                      244: (None,)
                980     LOAD_CONST                      210: <CODE> logical_or
                982     LOAD_CONST                      211: 'Decimal.logical_or'
                984     MAKE_FUNCTION                   1
                986     STORE_NAME                      114: logical_or
                988     LOAD_CONST                      244: (None,)
                990     LOAD_CONST                      212: <CODE> logical_xor
                992     LOAD_CONST                      213: 'Decimal.logical_xor'
                994     MAKE_FUNCTION                   1
                996     STORE_NAME                      115: logical_xor
                998     LOAD_CONST                      244: (None,)
                1000    LOAD_CONST                      214: <CODE> max_mag
                1002    LOAD_CONST                      215: 'Decimal.max_mag'
                1004    MAKE_FUNCTION                   1
                1006    STORE_NAME                      116: max_mag
                1008    LOAD_CONST                      244: (None,)
                1010    LOAD_CONST                      216: <CODE> min_mag
                1012    LOAD_CONST                      217: 'Decimal.min_mag'
                1014    MAKE_FUNCTION                   1
                1016    STORE_NAME                      117: min_mag
                1018    LOAD_CONST                      244: (None,)
                1020    LOAD_CONST                      218: <CODE> next_minus
                1022    LOAD_CONST                      219: 'Decimal.next_minus'
                1024    MAKE_FUNCTION                   1
                1026    STORE_NAME                      118: next_minus
                1028    LOAD_CONST                      244: (None,)
                1030    LOAD_CONST                      220: <CODE> next_plus
                1032    LOAD_CONST                      221: 'Decimal.next_plus'
                1034    MAKE_FUNCTION                   1
                1036    STORE_NAME                      119: next_plus
                1038    LOAD_CONST                      244: (None,)
                1040    LOAD_CONST                      222: <CODE> next_toward
                1042    LOAD_CONST                      223: 'Decimal.next_toward'
                1044    MAKE_FUNCTION                   1
                1046    STORE_NAME                      120: next_toward
                1048    LOAD_CONST                      244: (None,)
                1050    LOAD_CONST                      224: <CODE> number_class
                1052    LOAD_CONST                      225: 'Decimal.number_class'
                1054    MAKE_FUNCTION                   1
                1056    STORE_NAME                      121: number_class
                1058    LOAD_CONST                      226: <CODE> radix
                1060    LOAD_CONST                      227: 'Decimal.radix'
                1062    MAKE_FUNCTION                   0
                1064    STORE_NAME                      122: radix
                1066    LOAD_CONST                      244: (None,)
                1068    LOAD_CONST                      228: <CODE> rotate
                1070    LOAD_CONST                      229: 'Decimal.rotate'
                1072    MAKE_FUNCTION                   1
                1074    STORE_NAME                      123: rotate
                1076    LOAD_CONST                      244: (None,)
                1078    LOAD_CONST                      230: <CODE> scaleb
                1080    LOAD_CONST                      231: 'Decimal.scaleb'
                1082    MAKE_FUNCTION                   1
                1084    STORE_NAME                      124: scaleb
                1086    LOAD_CONST                      244: (None,)
                1088    LOAD_CONST                      232: <CODE> shift
                1090    LOAD_CONST                      233: 'Decimal.shift'
                1092    MAKE_FUNCTION                   1
                1094    STORE_NAME                      125: shift
                1096    LOAD_CONST                      234: <CODE> __reduce__
                1098    LOAD_CONST                      235: 'Decimal.__reduce__'
                1100    MAKE_FUNCTION                   0
                1102    STORE_NAME                      126: __reduce__
                1104    LOAD_CONST                      236: <CODE> __copy__
                1106    LOAD_CONST                      237: 'Decimal.__copy__'
                1108    MAKE_FUNCTION                   0
                1110    STORE_NAME                      127: __copy__
                1112    LOAD_CONST                      238: <CODE> __deepcopy__
                1114    LOAD_CONST                      239: 'Decimal.__deepcopy__'
                1116    MAKE_FUNCTION                   0
                1118    STORE_NAME                      128: __deepcopy__
                1120    LOAD_CONST                      243: (None, None)
                1122    LOAD_CONST                      240: <CODE> __format__
                1124    LOAD_CONST                      241: 'Decimal.__format__'
                1126    MAKE_FUNCTION                   1
                1128    STORE_NAME                      129: __format__
                1130    LOAD_CONST                      4: None
                1132    RETURN_VALUE                    
        'Decimal'
        False
        [Code]
            File Name: _pydecimal.py
            Object Name: _dec_from_triple
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'object'
                '__new__'
                'Decimal'
                '_sign'
                '_int'
                '_exp'
                '_is_special'
            [Var Names]
                'sign'
                'coefficient'
                'exponent'
                'special'
                'self'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Create a decimal instance directly, without any validation,\n    normalization (e.g. removal of leading zeros) or argument\n    conversion.\n\n    This function is for *internal use only*.\n    '
            [Disassembly]
                0       LOAD_GLOBAL                     0: object
                2       LOAD_METHOD                     1: __new__
                4       LOAD_GLOBAL                     2: Decimal
                6       CALL_METHOD                     1
                8       STORE_FAST                      4: self
                10      LOAD_FAST                       0: sign
                12      LOAD_FAST                       4: self
                14      STORE_ATTR                      3: _sign
                16      LOAD_FAST                       1: coefficient
                18      LOAD_FAST                       4: self
                20      STORE_ATTR                      4: _int
                22      LOAD_FAST                       2: exponent
                24      LOAD_FAST                       4: self
                26      STORE_ATTR                      5: _exp
                28      LOAD_FAST                       3: special
                30      LOAD_FAST                       4: self
                32      STORE_ATTR                      6: _is_special
                34      LOAD_FAST                       4: self
                36      RETURN_VALUE                    
        '_dec_from_triple'
        [Code]
            File Name: _pydecimal.py
            Object Name: _ContextManager
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__enter__'
                '__exit__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_ContextManager'
                'Context manager class to support localcontext().\n\n      Sets a copy of the supplied context in __enter__() and restores\n      the previous decimal context in __exit__()\n    '
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'copy'
                        'new_context'
                    [Var Names]
                        'self'
                        'new_context'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: new_context
                        2       LOAD_METHOD                     0: copy
                        4       CALL_METHOD                     0
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      1: new_context
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                '_ContextManager.__init__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getcontext'
                        'saved_context'
                        'setcontext'
                        'new_context'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getcontext
                        2       CALL_FUNCTION                   0
                        4       LOAD_FAST                       0: self
                        6       STORE_ATTR                      1: saved_context
                        8       LOAD_GLOBAL                     2: setcontext
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       3: new_context
                        14      CALL_FUNCTION                   1
                        16      POP_TOP                         
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       3: new_context
                        22      RETURN_VALUE                    
                '_ContextManager.__enter__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __exit__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'setcontext'
                        'saved_context'
                    [Var Names]
                        'self'
                        't'
                        'v'
                        'tb'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: setcontext
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: saved_context
                        6       CALL_FUNCTION                   1
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                '_ContextManager.__exit__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_ContextManager'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Context manager class to support localcontext().\n\n      Sets a copy of the supplied context in __enter__() and restores\n      the previous decimal context in __exit__()\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: '_ContextManager.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __enter__
                22      LOAD_CONST                      5: '_ContextManager.__enter__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __enter__
                28      LOAD_CONST                      6: <CODE> __exit__
                30      LOAD_CONST                      7: '_ContextManager.__exit__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __exit__
                36      LOAD_CONST                      8: None
                38      RETURN_VALUE                    
        '_ContextManager'
        [Code]
            File Name: _pydecimal.py
            Object Name: Context
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '_set_integer_check'
                '_set_signal_dict'
                '__setattr__'
                '__delattr__'
                '__reduce__'
                '__repr__'
                'clear_flags'
                'clear_traps'
                '_shallow_copy'
                'copy'
                '__copy__'
                '_raise_error'
                '_ignore_all_flags'
                '_ignore_flags'
                '_regard_flags'
                '__hash__'
                'Etiny'
                'Etop'
                '_set_rounding'
                'create_decimal'
                'create_decimal_from_float'
                'abs'
                'add'
                '_apply'
                'canonical'
                'compare'
                'compare_signal'
                'compare_total'
                'compare_total_mag'
                'copy_abs'
                'copy_decimal'
                'copy_negate'
                'copy_sign'
                'divide'
                'divide_int'
                'divmod'
                'exp'
                'fma'
                'is_canonical'
                'is_finite'
                'is_infinite'
                'is_nan'
                'is_normal'
                'is_qnan'
                'is_signed'
                'is_snan'
                'is_subnormal'
                'is_zero'
                'ln'
                'log10'
                'logb'
                'logical_and'
                'logical_invert'
                'logical_or'
                'logical_xor'
                'max'
                'max_mag'
                'min'
                'min_mag'
                'minus'
                'multiply'
                'next_minus'
                'next_plus'
                'next_toward'
                'normalize'
                'number_class'
                'plus'
                'power'
                'quantize'
                'radix'
                'remainder'
                'remainder_near'
                'rotate'
                'same_quantum'
                'scaleb'
                'shift'
                'sqrt'
                'subtract'
                'to_eng_string'
                'to_sci_string'
                'to_integral_exact'
                'to_integral_value'
                'to_integral'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Context'
                'Contains the context for a Decimal instance.\n\n    Contains:\n    prec - precision (for use in rounding, division, square roots..)\n    rounding - rounding type (how you round)\n    traps - If traps[exception] = 1, then the exception is\n                    raised when it is caused.  Otherwise, a value is\n                    substituted in.\n    flags  - When an exception is caused, flags[exception] is set.\n             (Whether or not the trap_enabler is set)\n             Should be reset by user of Decimal instance.\n    Emin -   Minimum exponent\n    Emax -   Maximum exponent\n    capitals -      If 1, 1*10^1 is printed as 1E+1.\n                    If 0, printed as 1e1\n    clamp -  If 1, change exponents if too high (Default 0)\n    '
                None
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __init__
                    Arg Count: 10
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'DefaultContext'
                        'NameError'
                        'prec'
                        'rounding'
                        'Emin'
                        'Emax'
                        'capitals'
                        'clamp'
                        '_ignored_flags'
                        'traps'
                        'copy'
                        'isinstance'
                        'dict'
                        '_signals'
                        'fromkeys'
                        'flags'
                    [Var Names]
                        'self'
                        'prec'
                        'rounding'
                        'Emin'
                        'Emax'
                        'capitals'
                        'clamp'
                        'flags'
                        'traps'
                        '_ignored_flags'
                        'dc'
                    [Free Vars]
                    [Cell Vars]
                        'flags'
                        'traps'
                    [Constants]
                        None
                        [Code]
                            File Name: _pydecimal.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 5
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                                'int'
                            [Var Names]
                                '.0'
                                's'
                            [Free Vars]
                                'traps'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        11 (to 28)
                                6       STORE_FAST                      1: s
                                8       LOAD_FAST                       1: s
                                10      LOAD_GLOBAL                     0: int
                                12      LOAD_FAST                       1: s
                                14      LOAD_DEREF                      0: traps
                                16      CONTAINS_OP                     0 (in)
                                18      CALL_FUNCTION                   1
                                20      BUILD_TUPLE                     2
                                22      YIELD_VALUE                     
                                24      POP_TOP                         
                                26      JUMP_ABSOLUTE                   2 (to 4)
                                28      LOAD_CONST                      0: None
                                30      RETURN_VALUE                    
                        'Context.__init__.<locals>.<genexpr>'
                        0
                        [Code]
                            File Name: _pydecimal.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 5
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                                'int'
                            [Var Names]
                                '.0'
                                's'
                            [Free Vars]
                                'flags'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        11 (to 28)
                                6       STORE_FAST                      1: s
                                8       LOAD_FAST                       1: s
                                10      LOAD_GLOBAL                     0: int
                                12      LOAD_FAST                       1: s
                                14      LOAD_DEREF                      0: flags
                                16      CONTAINS_OP                     0 (in)
                                18      CALL_FUNCTION                   1
                                20      BUILD_TUPLE                     2
                                22      YIELD_VALUE                     
                                24      POP_TOP                         
                                26      JUMP_ABSOLUTE                   2 (to 4)
                                28      LOAD_CONST                      0: None
                                30      RETURN_VALUE                    
                    [Disassembly]
                        0       SETUP_FINALLY                   4 (to 10)
                        2       LOAD_GLOBAL                     0: DefaultContext
                        4       STORE_FAST                      10: dc
                        6       POP_BLOCK                       
                        8       JUMP_FORWARD                    9 (to 28)
                        10      DUP_TOP                         
                        12      LOAD_GLOBAL                     1: NameError
                        14      JUMP_IF_NOT_EXC_MATCH           13 (to 26)
                        16      POP_TOP                         
                        18      POP_TOP                         
                        20      POP_TOP                         
                        22      POP_EXCEPT                      
                        24      JUMP_FORWARD                    1 (to 28)
                        26      RERAISE                         0
                        28      LOAD_FAST                       1: prec
                        30      LOAD_CONST                      0: None
                        32      IS_OP                           1 (is not)
                        34      POP_JUMP_IF_FALSE               20 (to 40)
                        36      LOAD_FAST                       1: prec
                        38      JUMP_FORWARD                    2 (to 44)
                        40      LOAD_FAST                       10: dc
                        42      LOAD_ATTR                       2: prec
                        44      LOAD_FAST                       0: self
                        46      STORE_ATTR                      2: prec
                        48      LOAD_FAST                       2: rounding
                        50      LOAD_CONST                      0: None
                        52      IS_OP                           1 (is not)
                        54      POP_JUMP_IF_FALSE               30 (to 60)
                        56      LOAD_FAST                       2: rounding
                        58      JUMP_FORWARD                    2 (to 64)
                        60      LOAD_FAST                       10: dc
                        62      LOAD_ATTR                       3: rounding
                        64      LOAD_FAST                       0: self
                        66      STORE_ATTR                      3: rounding
                        68      LOAD_FAST                       3: Emin
                        70      LOAD_CONST                      0: None
                        72      IS_OP                           1 (is not)
                        74      POP_JUMP_IF_FALSE               40 (to 80)
                        76      LOAD_FAST                       3: Emin
                        78      JUMP_FORWARD                    2 (to 84)
                        80      LOAD_FAST                       10: dc
                        82      LOAD_ATTR                       4: Emin
                        84      LOAD_FAST                       0: self
                        86      STORE_ATTR                      4: Emin
                        88      LOAD_FAST                       4: Emax
                        90      LOAD_CONST                      0: None
                        92      IS_OP                           1 (is not)
                        94      POP_JUMP_IF_FALSE               50 (to 100)
                        96      LOAD_FAST                       4: Emax
                        98      JUMP_FORWARD                    2 (to 104)
                        100     LOAD_FAST                       10: dc
                        102     LOAD_ATTR                       5: Emax
                        104     LOAD_FAST                       0: self
                        106     STORE_ATTR                      5: Emax
                        108     LOAD_FAST                       5: capitals
                        110     LOAD_CONST                      0: None
                        112     IS_OP                           1 (is not)
                        114     POP_JUMP_IF_FALSE               60 (to 120)
                        116     LOAD_FAST                       5: capitals
                        118     JUMP_FORWARD                    2 (to 124)
                        120     LOAD_FAST                       10: dc
                        122     LOAD_ATTR                       6: capitals
                        124     LOAD_FAST                       0: self
                        126     STORE_ATTR                      6: capitals
                        128     LOAD_FAST                       6: clamp
                        130     LOAD_CONST                      0: None
                        132     IS_OP                           1 (is not)
                        134     POP_JUMP_IF_FALSE               70 (to 140)
                        136     LOAD_FAST                       6: clamp
                        138     JUMP_FORWARD                    2 (to 144)
                        140     LOAD_FAST                       10: dc
                        142     LOAD_ATTR                       7: clamp
                        144     LOAD_FAST                       0: self
                        146     STORE_ATTR                      7: clamp
                        148     LOAD_FAST                       9: _ignored_flags
                        150     LOAD_CONST                      0: None
                        152     IS_OP                           0 (is)
                        154     POP_JUMP_IF_FALSE               82 (to 164)
                        156     BUILD_LIST                      0
                        158     LOAD_FAST                       0: self
                        160     STORE_ATTR                      8: _ignored_flags
                        162     JUMP_FORWARD                    3 (to 170)
                        164     LOAD_FAST                       9: _ignored_flags
                        166     LOAD_FAST                       0: self
                        168     STORE_ATTR                      8: _ignored_flags
                        170     LOAD_DEREF                      1: traps
                        172     LOAD_CONST                      0: None
                        174     IS_OP                           0 (is)
                        176     POP_JUMP_IF_FALSE               96 (to 192)
                        178     LOAD_FAST                       10: dc
                        180     LOAD_ATTR                       9: traps
                        182     LOAD_METHOD                     10: copy
                        184     CALL_METHOD                     0
                        186     LOAD_FAST                       0: self
                        188     STORE_ATTR                      9: traps
                        190     JUMP_FORWARD                    23 (to 238)
                        192     LOAD_GLOBAL                     11: isinstance
                        194     LOAD_DEREF                      1: traps
                        196     LOAD_GLOBAL                     12: dict
                        198     CALL_FUNCTION                   2
                        200     POP_JUMP_IF_TRUE                116 (to 232)
                        202     LOAD_GLOBAL                     12: dict
                        204     LOAD_CLOSURE                    1: traps
                        206     BUILD_TUPLE                     1
                        208     LOAD_CONST                      1: <CODE> <genexpr>
                        210     LOAD_CONST                      2: 'Context.__init__.<locals>.<genexpr>'
                        212     MAKE_FUNCTION                   8
                        214     LOAD_GLOBAL                     13: _signals
                        216     LOAD_DEREF                      1: traps
                        218     BINARY_ADD                      
                        220     GET_ITER                        
                        222     CALL_FUNCTION                   1
                        224     CALL_FUNCTION                   1
                        226     LOAD_FAST                       0: self
                        228     STORE_ATTR                      9: traps
                        230     JUMP_FORWARD                    3 (to 238)
                        232     LOAD_DEREF                      1: traps
                        234     LOAD_FAST                       0: self
                        236     STORE_ATTR                      9: traps
                        238     LOAD_DEREF                      0: flags
                        240     LOAD_CONST                      0: None
                        242     IS_OP                           0 (is)
                        244     POP_JUMP_IF_FALSE               132 (to 264)
                        246     LOAD_GLOBAL                     12: dict
                        248     LOAD_METHOD                     14: fromkeys
                        250     LOAD_GLOBAL                     13: _signals
                        252     LOAD_CONST                      3: 0
                        254     CALL_METHOD                     2
                        256     LOAD_FAST                       0: self
                        258     STORE_ATTR                      15: flags
                        260     LOAD_CONST                      0: None
                        262     RETURN_VALUE                    
                        264     LOAD_GLOBAL                     11: isinstance
                        266     LOAD_DEREF                      0: flags
                        268     LOAD_GLOBAL                     12: dict
                        270     CALL_FUNCTION                   2
                        272     POP_JUMP_IF_TRUE                153 (to 306)
                        274     LOAD_GLOBAL                     12: dict
                        276     LOAD_CLOSURE                    0: flags
                        278     BUILD_TUPLE                     1
                        280     LOAD_CONST                      4: <CODE> <genexpr>
                        282     LOAD_CONST                      2: 'Context.__init__.<locals>.<genexpr>'
                        284     MAKE_FUNCTION                   8
                        286     LOAD_GLOBAL                     13: _signals
                        288     LOAD_DEREF                      0: flags
                        290     BINARY_ADD                      
                        292     GET_ITER                        
                        294     CALL_FUNCTION                   1
                        296     CALL_FUNCTION                   1
                        298     LOAD_FAST                       0: self
                        300     STORE_ATTR                      15: flags
                        302     LOAD_CONST                      0: None
                        304     RETURN_VALUE                    
                        306     LOAD_DEREF                      0: flags
                        308     LOAD_FAST                       0: self
                        310     STORE_ATTR                      15: flags
                        312     LOAD_CONST                      0: None
                        314     RETURN_VALUE                    
                'Context.__init__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _set_integer_check
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'int'
                        'TypeError'
                        'ValueError'
                        'object'
                        '__setattr__'
                    [Var Names]
                        'self'
                        'name'
                        'value'
                        'vmin'
                        'vmax'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s must be an integer'
                        '-inf'
                        '%s must be in [%s, %d]. got: %s'
                        'inf'
                        '%s must be in [%d, %s]. got: %s'
                        '%s must be in [%d, %d]. got %s'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       2: value
                        4       LOAD_GLOBAL                     1: int
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                11 (to 22)
                        10      LOAD_GLOBAL                     2: TypeError
                        12      LOAD_CONST                      1: '%s must be an integer'
                        14      LOAD_FAST                       1: name
                        16      BINARY_MODULO                   
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                        22      LOAD_FAST                       3: vmin
                        24      LOAD_CONST                      2: '-inf'
                        26      COMPARE_OP                      2 (==)
                        28      POP_JUMP_IF_FALSE               30 (to 60)
                        30      LOAD_FAST                       2: value
                        32      LOAD_FAST                       4: vmax
                        34      COMPARE_OP                      4 (>)
                        36      POP_JUMP_IF_FALSE               29 (to 58)
                        38      LOAD_GLOBAL                     3: ValueError
                        40      LOAD_CONST                      3: '%s must be in [%s, %d]. got: %s'
                        42      LOAD_FAST                       1: name
                        44      LOAD_FAST                       3: vmin
                        46      LOAD_FAST                       4: vmax
                        48      LOAD_FAST                       2: value
                        50      BUILD_TUPLE                     4
                        52      BINARY_MODULO                   
                        54      CALL_FUNCTION                   1
                        56      RAISE_VARARGS                   1
                        58      JUMP_FORWARD                    37 (to 134)
                        60      LOAD_FAST                       4: vmax
                        62      LOAD_CONST                      4: 'inf'
                        64      COMPARE_OP                      2 (==)
                        66      POP_JUMP_IF_FALSE               49 (to 98)
                        68      LOAD_FAST                       2: value
                        70      LOAD_FAST                       3: vmin
                        72      COMPARE_OP                      0 (<)
                        74      POP_JUMP_IF_FALSE               48 (to 96)
                        76      LOAD_GLOBAL                     3: ValueError
                        78      LOAD_CONST                      5: '%s must be in [%d, %s]. got: %s'
                        80      LOAD_FAST                       1: name
                        82      LOAD_FAST                       3: vmin
                        84      LOAD_FAST                       4: vmax
                        86      LOAD_FAST                       2: value
                        88      BUILD_TUPLE                     4
                        90      BINARY_MODULO                   
                        92      CALL_FUNCTION                   1
                        94      RAISE_VARARGS                   1
                        96      JUMP_FORWARD                    18 (to 134)
                        98      LOAD_FAST                       2: value
                        100     LOAD_FAST                       3: vmin
                        102     COMPARE_OP                      0 (<)
                        104     POP_JUMP_IF_TRUE                57 (to 114)
                        106     LOAD_FAST                       2: value
                        108     LOAD_FAST                       4: vmax
                        110     COMPARE_OP                      4 (>)
                        112     POP_JUMP_IF_FALSE               67 (to 134)
                        114     LOAD_GLOBAL                     3: ValueError
                        116     LOAD_CONST                      6: '%s must be in [%d, %d]. got %s'
                        118     LOAD_FAST                       1: name
                        120     LOAD_FAST                       3: vmin
                        122     LOAD_FAST                       4: vmax
                        124     LOAD_FAST                       2: value
                        126     BUILD_TUPLE                     4
                        128     BINARY_MODULO                   
                        130     CALL_FUNCTION                   1
                        132     RAISE_VARARGS                   1
                        134     LOAD_GLOBAL                     4: object
                        136     LOAD_METHOD                     5: __setattr__
                        138     LOAD_FAST                       0: self
                        140     LOAD_FAST                       1: name
                        142     LOAD_FAST                       2: value
                        144     CALL_METHOD                     3
                        146     RETURN_VALUE                    
                'Context._set_integer_check'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _set_signal_dict
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'dict'
                        'TypeError'
                        '_signals'
                        'KeyError'
                        'object'
                        '__setattr__'
                    [Var Names]
                        'self'
                        'name'
                        'd'
                        'key'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s must be a signal dict'
                        '%s is not a valid signal dict'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       2: d
                        4       LOAD_GLOBAL                     1: dict
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                11 (to 22)
                        10      LOAD_GLOBAL                     2: TypeError
                        12      LOAD_CONST                      1: '%s must be a signal dict'
                        14      LOAD_FAST                       2: d
                        16      BINARY_MODULO                   
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                        22      LOAD_FAST                       2: d
                        24      GET_ITER                        
                        26      FOR_ITER                        12 (to 52)
                        28      STORE_FAST                      3: key
                        30      LOAD_FAST                       3: key
                        32      LOAD_GLOBAL                     3: _signals
                        34      CONTAINS_OP                     1 (not in)
                        36      POP_JUMP_IF_FALSE               25 (to 50)
                        38      LOAD_GLOBAL                     4: KeyError
                        40      LOAD_CONST                      2: '%s is not a valid signal dict'
                        42      LOAD_FAST                       2: d
                        44      BINARY_MODULO                   
                        46      CALL_FUNCTION                   1
                        48      RAISE_VARARGS                   1
                        50      JUMP_ABSOLUTE                   13 (to 26)
                        52      LOAD_GLOBAL                     3: _signals
                        54      GET_ITER                        
                        56      FOR_ITER                        12 (to 82)
                        58      STORE_FAST                      3: key
                        60      LOAD_FAST                       3: key
                        62      LOAD_FAST                       2: d
                        64      CONTAINS_OP                     1 (not in)
                        66      POP_JUMP_IF_FALSE               40 (to 80)
                        68      LOAD_GLOBAL                     4: KeyError
                        70      LOAD_CONST                      2: '%s is not a valid signal dict'
                        72      LOAD_FAST                       2: d
                        74      BINARY_MODULO                   
                        76      CALL_FUNCTION                   1
                        78      RAISE_VARARGS                   1
                        80      JUMP_ABSOLUTE                   28 (to 56)
                        82      LOAD_GLOBAL                     5: object
                        84      LOAD_METHOD                     6: __setattr__
                        86      LOAD_FAST                       0: self
                        88      LOAD_FAST                       1: name
                        90      LOAD_FAST                       2: d
                        92      CALL_METHOD                     3
                        94      RETURN_VALUE                    
                'Context._set_signal_dict'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __setattr__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_set_integer_check'
                        '_rounding_modes'
                        'TypeError'
                        'object'
                        '__setattr__'
                        '_set_signal_dict'
                        'AttributeError'
                    [Var Names]
                        'self'
                        'name'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'prec'
                        1
                        'inf'
                        'Emin'
                        '-inf'
                        0
                        'Emax'
                        'capitals'
                        'clamp'
                        'rounding'
                        '%s: invalid rounding mode'
                        'flags'
                        'traps'
                        '_ignored_flags'
                        "'decimal.Context' object has no attribute '%s'"
                    [Disassembly]
                        0       LOAD_FAST                       1: name
                        2       LOAD_CONST                      1: 'prec'
                        4       COMPARE_OP                      2 (==)
                        6       POP_JUMP_IF_FALSE               12 (to 24)
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     0: _set_integer_check
                        12      LOAD_FAST                       1: name
                        14      LOAD_FAST                       2: value
                        16      LOAD_CONST                      2: 1
                        18      LOAD_CONST                      3: 'inf'
                        20      CALL_METHOD                     4
                        22      RETURN_VALUE                    
                        24      LOAD_FAST                       1: name
                        26      LOAD_CONST                      4: 'Emin'
                        28      COMPARE_OP                      2 (==)
                        30      POP_JUMP_IF_FALSE               24 (to 48)
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     0: _set_integer_check
                        36      LOAD_FAST                       1: name
                        38      LOAD_FAST                       2: value
                        40      LOAD_CONST                      5: '-inf'
                        42      LOAD_CONST                      6: 0
                        44      CALL_METHOD                     4
                        46      RETURN_VALUE                    
                        48      LOAD_FAST                       1: name
                        50      LOAD_CONST                      7: 'Emax'
                        52      COMPARE_OP                      2 (==)
                        54      POP_JUMP_IF_FALSE               36 (to 72)
                        56      LOAD_FAST                       0: self
                        58      LOAD_METHOD                     0: _set_integer_check
                        60      LOAD_FAST                       1: name
                        62      LOAD_FAST                       2: value
                        64      LOAD_CONST                      6: 0
                        66      LOAD_CONST                      3: 'inf'
                        68      CALL_METHOD                     4
                        70      RETURN_VALUE                    
                        72      LOAD_FAST                       1: name
                        74      LOAD_CONST                      8: 'capitals'
                        76      COMPARE_OP                      2 (==)
                        78      POP_JUMP_IF_FALSE               48 (to 96)
                        80      LOAD_FAST                       0: self
                        82      LOAD_METHOD                     0: _set_integer_check
                        84      LOAD_FAST                       1: name
                        86      LOAD_FAST                       2: value
                        88      LOAD_CONST                      6: 0
                        90      LOAD_CONST                      2: 1
                        92      CALL_METHOD                     4
                        94      RETURN_VALUE                    
                        96      LOAD_FAST                       1: name
                        98      LOAD_CONST                      9: 'clamp'
                        100     COMPARE_OP                      2 (==)
                        102     POP_JUMP_IF_FALSE               60 (to 120)
                        104     LOAD_FAST                       0: self
                        106     LOAD_METHOD                     0: _set_integer_check
                        108     LOAD_FAST                       1: name
                        110     LOAD_FAST                       2: value
                        112     LOAD_CONST                      6: 0
                        114     LOAD_CONST                      2: 1
                        116     CALL_METHOD                     4
                        118     RETURN_VALUE                    
                        120     LOAD_FAST                       1: name
                        122     LOAD_CONST                      10: 'rounding'
                        124     COMPARE_OP                      2 (==)
                        126     POP_JUMP_IF_FALSE               81 (to 162)
                        128     LOAD_FAST                       2: value
                        130     LOAD_GLOBAL                     1: _rounding_modes
                        132     CONTAINS_OP                     1 (not in)
                        134     POP_JUMP_IF_FALSE               74 (to 148)
                        136     LOAD_GLOBAL                     2: TypeError
                        138     LOAD_CONST                      11: '%s: invalid rounding mode'
                        140     LOAD_FAST                       2: value
                        142     BINARY_MODULO                   
                        144     CALL_FUNCTION                   1
                        146     RAISE_VARARGS                   1
                        148     LOAD_GLOBAL                     3: object
                        150     LOAD_METHOD                     4: __setattr__
                        152     LOAD_FAST                       0: self
                        154     LOAD_FAST                       1: name
                        156     LOAD_FAST                       2: value
                        158     CALL_METHOD                     3
                        160     RETURN_VALUE                    
                        162     LOAD_FAST                       1: name
                        164     LOAD_CONST                      12: 'flags'
                        166     COMPARE_OP                      2 (==)
                        168     POP_JUMP_IF_TRUE                89 (to 178)
                        170     LOAD_FAST                       1: name
                        172     LOAD_CONST                      13: 'traps'
                        174     COMPARE_OP                      2 (==)
                        176     POP_JUMP_IF_FALSE               95 (to 190)
                        178     LOAD_FAST                       0: self
                        180     LOAD_METHOD                     5: _set_signal_dict
                        182     LOAD_FAST                       1: name
                        184     LOAD_FAST                       2: value
                        186     CALL_METHOD                     2
                        188     RETURN_VALUE                    
                        190     LOAD_FAST                       1: name
                        192     LOAD_CONST                      14: '_ignored_flags'
                        194     COMPARE_OP                      2 (==)
                        196     POP_JUMP_IF_FALSE               106 (to 212)
                        198     LOAD_GLOBAL                     3: object
                        200     LOAD_METHOD                     4: __setattr__
                        202     LOAD_FAST                       0: self
                        204     LOAD_FAST                       1: name
                        206     LOAD_FAST                       2: value
                        208     CALL_METHOD                     3
                        210     RETURN_VALUE                    
                        212     LOAD_GLOBAL                     6: AttributeError
                        214     LOAD_CONST                      15: "'decimal.Context' object has no attribute '%s'"
                        216     LOAD_FAST                       1: name
                        218     BINARY_MODULO                   
                        220     CALL_FUNCTION                   1
                        222     RAISE_VARARGS                   1
                'Context.__setattr__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __delattr__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'AttributeError'
                    [Var Names]
                        'self'
                        'name'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s cannot be deleted'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: AttributeError
                        2       LOAD_CONST                      1: '%s cannot be deleted'
                        4       LOAD_FAST                       1: name
                        6       BINARY_MODULO                   
                        8       CALL_FUNCTION                   1
                        10      RAISE_VARARGS                   1
                'Context.__delattr__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 9
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'flags'
                        'items'
                        'traps'
                        '__class__'
                        'prec'
                        'rounding'
                        'Emin'
                        'Emax'
                        'capitals'
                        'clamp'
                    [Var Names]
                        'self'
                        'flags'
                        'traps'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: _pydecimal.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                            [Var Names]
                                '.0'
                                'sig'
                                'v'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       UNPACK_SEQUENCE                 2
                                8       STORE_FAST                      1: sig
                                10      STORE_FAST                      2: v
                                12      LOAD_FAST                       2: v
                                14      POP_JUMP_IF_FALSE               2 (to 4)
                                16      LOAD_FAST                       1: sig
                                18      LIST_APPEND                     2
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      RETURN_VALUE                    
                        'Context.__reduce__.<locals>.<listcomp>'
                        [Code]
                            File Name: _pydecimal.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                            [Var Names]
                                '.0'
                                'sig'
                                'v'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       UNPACK_SEQUENCE                 2
                                8       STORE_FAST                      1: sig
                                10      STORE_FAST                      2: v
                                12      LOAD_FAST                       2: v
                                14      POP_JUMP_IF_FALSE               2 (to 4)
                                16      LOAD_FAST                       1: sig
                                18      LIST_APPEND                     2
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      RETURN_VALUE                    
                    [Disassembly]
                        0       LOAD_CONST                      1: <CODE> <listcomp>
                        2       LOAD_CONST                      2: 'Context.__reduce__.<locals>.<listcomp>'
                        4       MAKE_FUNCTION                   0
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       0: flags
                        10      LOAD_METHOD                     1: items
                        12      CALL_METHOD                     0
                        14      GET_ITER                        
                        16      CALL_FUNCTION                   1
                        18      STORE_FAST                      1: flags
                        20      LOAD_CONST                      3: <CODE> <listcomp>
                        22      LOAD_CONST                      2: 'Context.__reduce__.<locals>.<listcomp>'
                        24      MAKE_FUNCTION                   0
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       2: traps
                        30      LOAD_METHOD                     1: items
                        32      CALL_METHOD                     0
                        34      GET_ITER                        
                        36      CALL_FUNCTION                   1
                        38      STORE_FAST                      2: traps
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       3: __class__
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       4: prec
                        48      LOAD_FAST                       0: self
                        50      LOAD_ATTR                       5: rounding
                        52      LOAD_FAST                       0: self
                        54      LOAD_ATTR                       6: Emin
                        56      LOAD_FAST                       0: self
                        58      LOAD_ATTR                       7: Emax
                        60      LOAD_FAST                       0: self
                        62      LOAD_ATTR                       8: capitals
                        64      LOAD_FAST                       0: self
                        66      LOAD_ATTR                       9: clamp
                        68      LOAD_FAST                       1: flags
                        70      LOAD_FAST                       2: traps
                        72      BUILD_TUPLE                     8
                        74      BUILD_TUPLE                     2
                        76      RETURN_VALUE                    
                'Context.__reduce__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'append'
                        'vars'
                        'flags'
                        'items'
                        'join'
                        'traps'
                    [Var Names]
                        'self'
                        's'
                        'names'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Show the current context.'
                        'Context(prec=%(prec)d, rounding=%(rounding)s, Emin=%(Emin)d, Emax=%(Emax)d, capitals=%(capitals)d, clamp=%(clamp)d'
                        [Code]
                            File Name: _pydecimal.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                '__name__'
                            [Var Names]
                                '.0'
                                'f'
                                'v'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       UNPACK_SEQUENCE                 2
                                8       STORE_FAST                      1: f
                                10      STORE_FAST                      2: v
                                12      LOAD_FAST                       2: v
                                14      POP_JUMP_IF_FALSE               2 (to 4)
                                16      LOAD_FAST                       1: f
                                18      LOAD_ATTR                       0: __name__
                                20      LIST_APPEND                     2
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      RETURN_VALUE                    
                        'Context.__repr__.<locals>.<listcomp>'
                        'flags=['
                        ', '
                        ']'
                        [Code]
                            File Name: _pydecimal.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                '__name__'
                            [Var Names]
                                '.0'
                                't'
                                'v'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       UNPACK_SEQUENCE                 2
                                8       STORE_FAST                      1: t
                                10      STORE_FAST                      2: v
                                12      LOAD_FAST                       2: v
                                14      POP_JUMP_IF_FALSE               2 (to 4)
                                16      LOAD_FAST                       1: t
                                18      LOAD_ATTR                       0: __name__
                                20      LIST_APPEND                     2
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      RETURN_VALUE                    
                        'traps=['
                        ')'
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      1: s
                        4       LOAD_FAST                       1: s
                        6       LOAD_METHOD                     0: append
                        8       LOAD_CONST                      1: 'Context(prec=%(prec)d, rounding=%(rounding)s, Emin=%(Emin)d, Emax=%(Emax)d, capitals=%(capitals)d, clamp=%(clamp)d'
                        10      LOAD_GLOBAL                     1: vars
                        12      LOAD_FAST                       0: self
                        14      CALL_FUNCTION                   1
                        16      BINARY_MODULO                   
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_CONST                      2: <CODE> <listcomp>
                        24      LOAD_CONST                      3: 'Context.__repr__.<locals>.<listcomp>'
                        26      MAKE_FUNCTION                   0
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       2: flags
                        32      LOAD_METHOD                     3: items
                        34      CALL_METHOD                     0
                        36      GET_ITER                        
                        38      CALL_FUNCTION                   1
                        40      STORE_FAST                      2: names
                        42      LOAD_FAST                       1: s
                        44      LOAD_METHOD                     0: append
                        46      LOAD_CONST                      4: 'flags=['
                        48      LOAD_CONST                      5: ', '
                        50      LOAD_METHOD                     4: join
                        52      LOAD_FAST                       2: names
                        54      CALL_METHOD                     1
                        56      BINARY_ADD                      
                        58      LOAD_CONST                      6: ']'
                        60      BINARY_ADD                      
                        62      CALL_METHOD                     1
                        64      POP_TOP                         
                        66      LOAD_CONST                      7: <CODE> <listcomp>
                        68      LOAD_CONST                      3: 'Context.__repr__.<locals>.<listcomp>'
                        70      MAKE_FUNCTION                   0
                        72      LOAD_FAST                       0: self
                        74      LOAD_ATTR                       5: traps
                        76      LOAD_METHOD                     3: items
                        78      CALL_METHOD                     0
                        80      GET_ITER                        
                        82      CALL_FUNCTION                   1
                        84      STORE_FAST                      2: names
                        86      LOAD_FAST                       1: s
                        88      LOAD_METHOD                     0: append
                        90      LOAD_CONST                      8: 'traps=['
                        92      LOAD_CONST                      5: ', '
                        94      LOAD_METHOD                     4: join
                        96      LOAD_FAST                       2: names
                        98      CALL_METHOD                     1
                        100     BINARY_ADD                      
                        102     LOAD_CONST                      6: ']'
                        104     BINARY_ADD                      
                        106     CALL_METHOD                     1
                        108     POP_TOP                         
                        110     LOAD_CONST                      5: ', '
                        112     LOAD_METHOD                     4: join
                        114     LOAD_FAST                       1: s
                        116     CALL_METHOD                     1
                        118     LOAD_CONST                      9: ')'
                        120     BINARY_ADD                      
                        122     RETURN_VALUE                    
                'Context.__repr__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: clear_flags
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'flags'
                    [Var Names]
                        'self'
                        'flag'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Reset all flags to zero'
                        0
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: flags
                        4       GET_ITER                        
                        6       FOR_ITER                        7 (to 22)
                        8       STORE_FAST                      1: flag
                        10      LOAD_CONST                      1: 0
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       0: flags
                        16      LOAD_FAST                       1: flag
                        18      STORE_SUBSCR                    
                        20      JUMP_ABSOLUTE                   3 (to 6)
                        22      LOAD_CONST                      2: None
                        24      RETURN_VALUE                    
                'Context.clear_flags'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: clear_traps
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'traps'
                    [Var Names]
                        'self'
                        'flag'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Reset all traps to zero'
                        0
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: traps
                        4       GET_ITER                        
                        6       FOR_ITER                        7 (to 22)
                        8       STORE_FAST                      1: flag
                        10      LOAD_CONST                      1: 0
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       0: traps
                        16      LOAD_FAST                       1: flag
                        18      STORE_SUBSCR                    
                        20      JUMP_ABSOLUTE                   3 (to 6)
                        22      LOAD_CONST                      2: None
                        24      RETURN_VALUE                    
                'Context.clear_traps'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _shallow_copy
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Context'
                        'prec'
                        'rounding'
                        'Emin'
                        'Emax'
                        'capitals'
                        'clamp'
                        'flags'
                        'traps'
                        '_ignored_flags'
                    [Var Names]
                        'self'
                        'nc'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns a shallow copy from self.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Context
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: prec
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: rounding
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       3: Emin
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       4: Emax
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       5: capitals
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       6: clamp
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       7: flags
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       8: traps
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       9: _ignored_flags
                        38      CALL_FUNCTION                   9
                        40      STORE_FAST                      1: nc
                        42      LOAD_FAST                       1: nc
                        44      RETURN_VALUE                    
                'Context._shallow_copy'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: copy
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Context'
                        'prec'
                        'rounding'
                        'Emin'
                        'Emax'
                        'capitals'
                        'clamp'
                        'flags'
                        'copy'
                        'traps'
                        '_ignored_flags'
                    [Var Names]
                        'self'
                        'nc'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns a deep copy from self.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Context
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: prec
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: rounding
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       3: Emin
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       4: Emax
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       5: capitals
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       6: clamp
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       7: flags
                        30      LOAD_METHOD                     8: copy
                        32      CALL_METHOD                     0
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       9: traps
                        38      LOAD_METHOD                     8: copy
                        40      CALL_METHOD                     0
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       10: _ignored_flags
                        46      CALL_FUNCTION                   9
                        48      STORE_FAST                      1: nc
                        50      LOAD_FAST                       1: nc
                        52      RETURN_VALUE                    
                'Context.copy'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _raise_error
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_condition_map'
                        'get'
                        '_ignored_flags'
                        'handle'
                        'flags'
                        'traps'
                    [Var Names]
                        'self'
                        'condition'
                        'explanation'
                        'args'
                        'error'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Handles an error\n\n        If the flag is in _ignored_flags, returns the default response.\n        Otherwise, it sets the flag, then, if the corresponding\n        trap_enabler is set, it reraises the exception.  Otherwise, it returns\n        the default value after setting the flag.\n        '
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _condition_map
                        2       LOAD_METHOD                     1: get
                        4       LOAD_FAST                       1: condition
                        6       LOAD_FAST                       1: condition
                        8       CALL_METHOD                     2
                        10      STORE_FAST                      4: error
                        12      LOAD_FAST                       4: error
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _ignored_flags
                        18      CONTAINS_OP                     0 (in)
                        20      POP_JUMP_IF_FALSE               21 (to 42)
                        22      LOAD_FAST                       4: error
                        24      CALL_FUNCTION                   0
                        26      LOAD_ATTR                       3: handle
                        28      LOAD_FAST                       0: self
                        30      BUILD_LIST                      1
                        32      LOAD_FAST                       3: args
                        34      LIST_EXTEND                     1
                        36      LIST_TO_TUPLE                   
                        38      CALL_FUNCTION_EX                0
                        40      RETURN_VALUE                    
                        42      LOAD_CONST                      1: 1
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       4: flags
                        48      LOAD_FAST                       4: error
                        50      STORE_SUBSCR                    
                        52      LOAD_FAST                       0: self
                        54      LOAD_ATTR                       5: traps
                        56      LOAD_FAST                       4: error
                        58      BINARY_SUBSCR                   
                        60      POP_JUMP_IF_TRUE                41 (to 82)
                        62      LOAD_FAST                       1: condition
                        64      CALL_FUNCTION                   0
                        66      LOAD_ATTR                       3: handle
                        68      LOAD_FAST                       0: self
                        70      BUILD_LIST                      1
                        72      LOAD_FAST                       3: args
                        74      LIST_EXTEND                     1
                        76      LIST_TO_TUPLE                   
                        78      CALL_FUNCTION_EX                0
                        80      RETURN_VALUE                    
                        82      LOAD_FAST                       4: error
                        84      LOAD_FAST                       2: explanation
                        86      CALL_FUNCTION                   1
                        88      RAISE_VARARGS                   1
                'Context._raise_error'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _ignore_all_flags
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ignore_flags'
                        '_signals'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Ignore all flags, if they are raised'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _ignore_flags
                        4       LOAD_GLOBAL                     1: _signals
                        6       CALL_FUNCTION_EX                0
                        8       RETURN_VALUE                    
                'Context._ignore_all_flags'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _ignore_flags
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_ignored_flags'
                        'list'
                    [Var Names]
                        'self'
                        'flags'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Ignore the flags, if they are raised'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _ignored_flags
                        4       LOAD_GLOBAL                     1: list
                        6       LOAD_FAST                       1: flags
                        8       CALL_FUNCTION                   1
                        10      BINARY_ADD                      
                        12      LOAD_FAST                       0: self
                        14      STORE_ATTR                      0: _ignored_flags
                        16      LOAD_GLOBAL                     1: list
                        18      LOAD_FAST                       1: flags
                        20      CALL_FUNCTION                   1
                        22      RETURN_VALUE                    
                'Context._ignore_flags'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _regard_flags
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'tuple'
                        'list'
                        '_ignored_flags'
                        'remove'
                    [Var Names]
                        'self'
                        'flags'
                        'flag'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Stop ignoring the flags, if they are raised'
                        0
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: flags
                        2       POP_JUMP_IF_FALSE               15 (to 30)
                        4       LOAD_GLOBAL                     0: isinstance
                        6       LOAD_FAST                       1: flags
                        8       LOAD_CONST                      1: 0
                        10      BINARY_SUBSCR                   
                        12      LOAD_GLOBAL                     1: tuple
                        14      LOAD_GLOBAL                     2: list
                        16      BUILD_TUPLE                     2
                        18      CALL_FUNCTION                   2
                        20      POP_JUMP_IF_FALSE               15 (to 30)
                        22      LOAD_FAST                       1: flags
                        24      LOAD_CONST                      1: 0
                        26      BINARY_SUBSCR                   
                        28      STORE_FAST                      1: flags
                        30      LOAD_FAST                       1: flags
                        32      GET_ITER                        
                        34      FOR_ITER                        8 (to 52)
                        36      STORE_FAST                      2: flag
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       3: _ignored_flags
                        42      LOAD_METHOD                     4: remove
                        44      LOAD_FAST                       2: flag
                        46      CALL_METHOD                     1
                        48      POP_TOP                         
                        50      JUMP_ABSOLUTE                   17 (to 34)
                        52      LOAD_CONST                      2: None
                        54      RETURN_VALUE                    
                'Context._regard_flags'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: Etiny
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'int'
                        'Emin'
                        'prec'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns Etiny (= Emin - prec + 1)'
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: int
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: Emin
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: prec
                        10      BINARY_SUBTRACT                 
                        12      LOAD_CONST                      1: 1
                        14      BINARY_ADD                      
                        16      CALL_FUNCTION                   1
                        18      RETURN_VALUE                    
                'Context.Etiny'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: Etop
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'int'
                        'Emax'
                        'prec'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns maximum exponent (= Emax - prec + 1)'
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: int
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: Emax
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: prec
                        10      BINARY_SUBTRACT                 
                        12      LOAD_CONST                      1: 1
                        14      BINARY_ADD                      
                        16      CALL_FUNCTION                   1
                        18      RETURN_VALUE                    
                'Context.Etop'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _set_rounding
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'rounding'
                    [Var Names]
                        'self'
                        'type'
                        'rounding'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Sets the rounding type.\n\n        Sets the rounding type, and returns the current (previous)\n        rounding type.  Often used like:\n\n        context = context.copy()\n        # so you don't change the calling context\n        # if an error occurs in the middle.\n        rounding = context._set_rounding(ROUND_UP)\n        val = self.__sub__(other, context=context)\n        context._set_rounding(rounding)\n\n        This will make it round up for that operation.\n        "
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: rounding
                        4       STORE_FAST                      2: rounding
                        6       LOAD_FAST                       1: type
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      0: rounding
                        12      LOAD_FAST                       2: rounding
                        14      RETURN_VALUE                    
                'Context._set_rounding'
                '0'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: create_decimal
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'str'
                        'strip'
                        '_raise_error'
                        'ConversionSyntax'
                        'Decimal'
                        '_isnan'
                        'len'
                        '_int'
                        'prec'
                        'clamp'
                        '_fix'
                    [Var Names]
                        'self'
                        'num'
                        'd'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Creates a new Decimal instance but using self as context.\n\n        This method implements the to-number operation of the\n        IBM Decimal specification.'
                        '_'
                        'trailing or leading whitespace and underscores are not permitted.'
                        (
                            'context'
                        )
                        'diagnostic info too long in NaN'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: num
                        4       LOAD_GLOBAL                     1: str
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               21 (to 42)
                        10      LOAD_FAST                       1: num
                        12      LOAD_FAST                       1: num
                        14      LOAD_METHOD                     2: strip
                        16      CALL_METHOD                     0
                        18      COMPARE_OP                      3 (!=)
                        20      POP_JUMP_IF_TRUE                15 (to 30)
                        22      LOAD_CONST                      1: '_'
                        24      LOAD_FAST                       1: num
                        26      CONTAINS_OP                     0 (in)
                        28      POP_JUMP_IF_FALSE               21 (to 42)
                        30      LOAD_FAST                       0: self
                        32      LOAD_METHOD                     3: _raise_error
                        34      LOAD_GLOBAL                     4: ConversionSyntax
                        36      LOAD_CONST                      2: 'trailing or leading whitespace and underscores are not permitted.'
                        38      CALL_METHOD                     2
                        40      RETURN_VALUE                    
                        42      LOAD_GLOBAL                     5: Decimal
                        44      LOAD_FAST                       1: num
                        46      LOAD_FAST                       0: self
                        48      LOAD_CONST                      3: ('context',)
                        50      CALL_FUNCTION_KW                2
                        52      STORE_FAST                      2: d
                        54      LOAD_FAST                       2: d
                        56      LOAD_METHOD                     6: _isnan
                        58      CALL_METHOD                     0
                        60      POP_JUMP_IF_FALSE               48 (to 96)
                        62      LOAD_GLOBAL                     7: len
                        64      LOAD_FAST                       2: d
                        66      LOAD_ATTR                       8: _int
                        68      CALL_FUNCTION                   1
                        70      LOAD_FAST                       0: self
                        72      LOAD_ATTR                       9: prec
                        74      LOAD_FAST                       0: self
                        76      LOAD_ATTR                       10: clamp
                        78      BINARY_SUBTRACT                 
                        80      COMPARE_OP                      4 (>)
                        82      POP_JUMP_IF_FALSE               48 (to 96)
                        84      LOAD_FAST                       0: self
                        86      LOAD_METHOD                     3: _raise_error
                        88      LOAD_GLOBAL                     4: ConversionSyntax
                        90      LOAD_CONST                      4: 'diagnostic info too long in NaN'
                        92      CALL_METHOD                     2
                        94      RETURN_VALUE                    
                        96      LOAD_FAST                       2: d
                        98      LOAD_METHOD                     11: _fix
                        100     LOAD_FAST                       0: self
                        102     CALL_METHOD                     1
                        104     RETURN_VALUE                    
                'Context.create_decimal'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: create_decimal_from_float
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Decimal'
                        'from_float'
                        '_fix'
                    [Var Names]
                        'self'
                        'f'
                        'd'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Creates a new Decimal instance from a float but rounding using self\n        as the context.\n\n        >>> context = Context(prec=5, rounding=ROUND_DOWN)\n        >>> context.create_decimal_from_float(3.1415926535897932)\n        Decimal('3.1415')\n        >>> context = Context(prec=5, traps=[Inexact])\n        >>> context.create_decimal_from_float(3.1415926535897932)\n        Traceback (most recent call last):\n            ...\n        decimal.Inexact: None\n\n        "
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Decimal
                        2       LOAD_METHOD                     1: from_float
                        4       LOAD_FAST                       1: f
                        6       CALL_METHOD                     1
                        8       STORE_FAST                      2: d
                        10      LOAD_FAST                       2: d
                        12      LOAD_METHOD                     2: _fix
                        14      LOAD_FAST                       0: self
                        16      CALL_METHOD                     1
                        18      RETURN_VALUE                    
                'Context.create_decimal_from_float'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: abs
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__abs__'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns the absolute value of the operand.\n\n        If the operand is negative, the result is the same as using the minus\n        operation on the operand.  Otherwise, the result is the same as using\n        the plus operation on the operand.\n\n        >>> ExtendedContext.abs(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.abs(Decimal('-100'))\n        Decimal('100')\n        >>> ExtendedContext.abs(Decimal('101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.abs(Decimal('-101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.abs(-1)\n        Decimal('1')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __abs__
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.abs'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: add
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__add__'
                        'NotImplemented'
                        'TypeError'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                        'r'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return the sum of the two operands.\n\n        >>> ExtendedContext.add(Decimal('12'), Decimal('7.00'))\n        Decimal('19.00')\n        >>> ExtendedContext.add(Decimal('1E+2'), Decimal('1.01E+4'))\n        Decimal('1.02E+4')\n        >>> ExtendedContext.add(1, Decimal(2))\n        Decimal('3')\n        >>> ExtendedContext.add(Decimal(8), 5)\n        Decimal('13')\n        >>> ExtendedContext.add(5, 5)\n        Decimal('10')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                        'Unable to convert %s to Decimal'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __add__
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      3: r
                        26      LOAD_FAST                       3: r
                        28      LOAD_GLOBAL                     2: NotImplemented
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               23 (to 46)
                        34      LOAD_GLOBAL                     3: TypeError
                        36      LOAD_CONST                      4: 'Unable to convert %s to Decimal'
                        38      LOAD_FAST                       2: b
                        40      BINARY_MODULO                   
                        42      CALL_FUNCTION                   1
                        44      RAISE_VARARGS                   1
                        46      LOAD_FAST                       3: r
                        48      RETURN_VALUE                    
                'Context.add'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: _apply
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'str'
                        '_fix'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: str
                        2       LOAD_FAST                       1: a
                        4       LOAD_METHOD                     1: _fix
                        6       LOAD_FAST                       0: self
                        8       CALL_METHOD                     1
                        10      CALL_FUNCTION                   1
                        12      RETURN_VALUE                    
                'Context._apply'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: canonical
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'Decimal'
                        'TypeError'
                        'canonical'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns the same Decimal object.\n\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n\n        >>> ExtendedContext.canonical(Decimal('2.50'))\n        Decimal('2.50')\n        "
                        'canonical requires a Decimal as an argument.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: a
                        4       LOAD_GLOBAL                     1: Decimal
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                9 (to 18)
                        10      LOAD_GLOBAL                     2: TypeError
                        12      LOAD_CONST                      1: 'canonical requires a Decimal as an argument.'
                        14      CALL_FUNCTION                   1
                        16      RAISE_VARARGS                   1
                        18      LOAD_FAST                       1: a
                        20      LOAD_METHOD                     3: canonical
                        22      CALL_METHOD                     0
                        24      RETURN_VALUE                    
                'Context.canonical'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: compare
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'compare'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Compares values numerically.\n\n        If the signs of the operands differ, a value representing each operand\n        ('-1' if the operand is less than zero, '0' if the operand is zero or\n        negative zero, or '1' if the operand is greater than zero) is used in\n        place of that operand for the comparison instead of the actual\n        operand.\n\n        The comparison is then effected by subtracting the second operand from\n        the first and then returning a value according to the result of the\n        subtraction: '-1' if the result is less than zero, '0' if the result is\n        zero or negative zero, or '1' if the result is greater than zero.\n\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.1'))\n        Decimal('0')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.10'))\n        Decimal('0')\n        >>> ExtendedContext.compare(Decimal('3'), Decimal('2.1'))\n        Decimal('1')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('-3'))\n        Decimal('1')\n        >>> ExtendedContext.compare(Decimal('-3'), Decimal('2.1'))\n        Decimal('-1')\n        >>> ExtendedContext.compare(1, 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare(Decimal(1), 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare(1, Decimal(2))\n        Decimal('-1')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: compare
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.compare'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: compare_signal
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'compare_signal'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Compares the values of the two operands numerically.\n\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n\n        >>> c = ExtendedContext\n        >>> c.compare_signal(Decimal('2.1'), Decimal('3'))\n        Decimal('-1')\n        >>> c.compare_signal(Decimal('2.1'), Decimal('2.1'))\n        Decimal('0')\n        >>> c.flags[InvalidOperation] = 0\n        >>> print(c.flags[InvalidOperation])\n        0\n        >>> c.compare_signal(Decimal('NaN'), Decimal('2.1'))\n        Decimal('NaN')\n        >>> print(c.flags[InvalidOperation])\n        1\n        >>> c.flags[InvalidOperation] = 0\n        >>> print(c.flags[InvalidOperation])\n        0\n        >>> c.compare_signal(Decimal('sNaN'), Decimal('2.1'))\n        Decimal('NaN')\n        >>> print(c.flags[InvalidOperation])\n        1\n        >>> c.compare_signal(-1, 2)\n        Decimal('-1')\n        >>> c.compare_signal(Decimal(-1), 2)\n        Decimal('-1')\n        >>> c.compare_signal(-1, Decimal(2))\n        Decimal('-1')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: compare_signal
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.compare_signal'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: compare_total
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'compare_total'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Compares two operands using their abstract representation.\n\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n\n        >>> ExtendedContext.compare_total(Decimal('12.73'), Decimal('127.9'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('-127'),  Decimal('12'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.3'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.30'))\n        Decimal('0')\n        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('12.300'))\n        Decimal('1')\n        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('NaN'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(1, 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal(1), 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(1, Decimal(2))\n        Decimal('-1')\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: compare_total
                        16      LOAD_FAST                       2: b
                        18      CALL_METHOD                     1
                        20      RETURN_VALUE                    
                'Context.compare_total'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: compare_total_mag
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'compare_total_mag'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Compares two operands using their abstract representation ignoring sign.\n\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: compare_total_mag
                        16      LOAD_FAST                       2: b
                        18      CALL_METHOD                     1
                        20      RETURN_VALUE                    
                'Context.compare_total_mag'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: copy_abs
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'copy_abs'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns a copy of the operand with the sign set to 0.\n\n        >>> ExtendedContext.copy_abs(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.copy_abs(Decimal('-100'))\n        Decimal('100')\n        >>> ExtendedContext.copy_abs(-1)\n        Decimal('1')\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: copy_abs
                        16      CALL_METHOD                     0
                        18      RETURN_VALUE                    
                'Context.copy_abs'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: copy_decimal
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'Decimal'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns a copy of the decimal object.\n\n        >>> ExtendedContext.copy_decimal(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.copy_decimal(Decimal('-1.00'))\n        Decimal('-1.00')\n        >>> ExtendedContext.copy_decimal(1)\n        Decimal('1')\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_GLOBAL                     1: Decimal
                        14      LOAD_FAST                       1: a
                        16      CALL_FUNCTION                   1
                        18      RETURN_VALUE                    
                'Context.copy_decimal'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: copy_negate
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'copy_negate'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns a copy of the operand with the sign inverted.\n\n        >>> ExtendedContext.copy_negate(Decimal('101.5'))\n        Decimal('-101.5')\n        >>> ExtendedContext.copy_negate(Decimal('-101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.copy_negate(1)\n        Decimal('-1')\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: copy_negate
                        16      CALL_METHOD                     0
                        18      RETURN_VALUE                    
                'Context.copy_negate'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: copy_sign
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'copy_sign'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Copies the second operand's sign to the first one.\n\n        In detail, it returns a copy of the first operand with the sign\n        equal to the sign of the second operand.\n\n        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('7.33'))\n        Decimal('1.50')\n        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('7.33'))\n        Decimal('1.50')\n        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('-7.33'))\n        Decimal('-1.50')\n        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('-7.33'))\n        Decimal('-1.50')\n        >>> ExtendedContext.copy_sign(1, -2)\n        Decimal('-1')\n        >>> ExtendedContext.copy_sign(Decimal(1), -2)\n        Decimal('-1')\n        >>> ExtendedContext.copy_sign(1, Decimal(-2))\n        Decimal('-1')\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: copy_sign
                        16      LOAD_FAST                       2: b
                        18      CALL_METHOD                     1
                        20      RETURN_VALUE                    
                'Context.copy_sign'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: divide
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__truediv__'
                        'NotImplemented'
                        'TypeError'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                        'r'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Decimal division in a specified context.\n\n        >>> ExtendedContext.divide(Decimal('1'), Decimal('3'))\n        Decimal('0.333333333')\n        >>> ExtendedContext.divide(Decimal('2'), Decimal('3'))\n        Decimal('0.666666667')\n        >>> ExtendedContext.divide(Decimal('5'), Decimal('2'))\n        Decimal('2.5')\n        >>> ExtendedContext.divide(Decimal('1'), Decimal('10'))\n        Decimal('0.1')\n        >>> ExtendedContext.divide(Decimal('12'), Decimal('12'))\n        Decimal('1')\n        >>> ExtendedContext.divide(Decimal('8.00'), Decimal('2'))\n        Decimal('4.00')\n        >>> ExtendedContext.divide(Decimal('2.400'), Decimal('2.0'))\n        Decimal('1.20')\n        >>> ExtendedContext.divide(Decimal('1000'), Decimal('100'))\n        Decimal('10')\n        >>> ExtendedContext.divide(Decimal('1000'), Decimal('1'))\n        Decimal('1000')\n        >>> ExtendedContext.divide(Decimal('2.40E+6'), Decimal('2'))\n        Decimal('1.20E+6')\n        >>> ExtendedContext.divide(5, 5)\n        Decimal('1')\n        >>> ExtendedContext.divide(Decimal(5), 5)\n        Decimal('1')\n        >>> ExtendedContext.divide(5, Decimal(5))\n        Decimal('1')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                        'Unable to convert %s to Decimal'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __truediv__
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      3: r
                        26      LOAD_FAST                       3: r
                        28      LOAD_GLOBAL                     2: NotImplemented
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               23 (to 46)
                        34      LOAD_GLOBAL                     3: TypeError
                        36      LOAD_CONST                      4: 'Unable to convert %s to Decimal'
                        38      LOAD_FAST                       2: b
                        40      BINARY_MODULO                   
                        42      CALL_FUNCTION                   1
                        44      RAISE_VARARGS                   1
                        46      LOAD_FAST                       3: r
                        48      RETURN_VALUE                    
                'Context.divide'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: divide_int
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__floordiv__'
                        'NotImplemented'
                        'TypeError'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                        'r'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Divides two numbers and returns the integer part of the result.\n\n        >>> ExtendedContext.divide_int(Decimal('2'), Decimal('3'))\n        Decimal('0')\n        >>> ExtendedContext.divide_int(Decimal('10'), Decimal('3'))\n        Decimal('3')\n        >>> ExtendedContext.divide_int(Decimal('1'), Decimal('0.3'))\n        Decimal('3')\n        >>> ExtendedContext.divide_int(10, 3)\n        Decimal('3')\n        >>> ExtendedContext.divide_int(Decimal(10), 3)\n        Decimal('3')\n        >>> ExtendedContext.divide_int(10, Decimal(3))\n        Decimal('3')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                        'Unable to convert %s to Decimal'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __floordiv__
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      3: r
                        26      LOAD_FAST                       3: r
                        28      LOAD_GLOBAL                     2: NotImplemented
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               23 (to 46)
                        34      LOAD_GLOBAL                     3: TypeError
                        36      LOAD_CONST                      4: 'Unable to convert %s to Decimal'
                        38      LOAD_FAST                       2: b
                        40      BINARY_MODULO                   
                        42      CALL_FUNCTION                   1
                        44      RAISE_VARARGS                   1
                        46      LOAD_FAST                       3: r
                        48      RETURN_VALUE                    
                'Context.divide_int'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: divmod
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__divmod__'
                        'NotImplemented'
                        'TypeError'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                        'r'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return (a // b, a % b).\n\n        >>> ExtendedContext.divmod(Decimal(8), Decimal(3))\n        (Decimal('2'), Decimal('2'))\n        >>> ExtendedContext.divmod(Decimal(8), Decimal(4))\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(8, 4)\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(Decimal(8), 4)\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(8, Decimal(4))\n        (Decimal('2'), Decimal('0'))\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                        'Unable to convert %s to Decimal'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __divmod__
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      3: r
                        26      LOAD_FAST                       3: r
                        28      LOAD_GLOBAL                     2: NotImplemented
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               23 (to 46)
                        34      LOAD_GLOBAL                     3: TypeError
                        36      LOAD_CONST                      4: 'Unable to convert %s to Decimal'
                        38      LOAD_FAST                       2: b
                        40      BINARY_MODULO                   
                        42      CALL_FUNCTION                   1
                        44      RAISE_VARARGS                   1
                        46      LOAD_FAST                       3: r
                        48      RETURN_VALUE                    
                'Context.divmod'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: exp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'exp'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns e ** a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.exp(Decimal('-Infinity'))\n        Decimal('0')\n        >>> c.exp(Decimal('-1'))\n        Decimal('0.367879441')\n        >>> c.exp(Decimal('0'))\n        Decimal('1')\n        >>> c.exp(Decimal('1'))\n        Decimal('2.71828183')\n        >>> c.exp(Decimal('0.693147181'))\n        Decimal('2.00000000')\n        >>> c.exp(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.exp(10)\n        Decimal('22026.4658')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: exp
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.exp'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: fma
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'fma'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                        'c'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns a multiplied by b, plus c.\n\n        The first two operands are multiplied together, using multiply,\n        the third operand is then added to the result of that\n        multiplication, using add, all with only one final rounding.\n\n        >>> ExtendedContext.fma(Decimal('3'), Decimal('5'), Decimal('7'))\n        Decimal('22')\n        >>> ExtendedContext.fma(Decimal('3'), Decimal('-5'), Decimal('7'))\n        Decimal('-8')\n        >>> ExtendedContext.fma(Decimal('888565290'), Decimal('1557.96930'), Decimal('-86087.7578'))\n        Decimal('1.38435736E+12')\n        >>> ExtendedContext.fma(1, 3, 4)\n        Decimal('7')\n        >>> ExtendedContext.fma(1, Decimal(3), 4)\n        Decimal('7')\n        >>> ExtendedContext.fma(1, 3, Decimal(4))\n        Decimal('7')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: fma
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       3: c
                        20      LOAD_FAST                       0: self
                        22      LOAD_CONST                      3: ('context',)
                        24      CALL_FUNCTION_KW                3
                        26      RETURN_VALUE                    
                'Context.fma'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_canonical
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'Decimal'
                        'TypeError'
                        'is_canonical'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return True if the operand is canonical; otherwise return False.\n\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n\n        >>> ExtendedContext.is_canonical(Decimal('2.50'))\n        True\n        "
                        'is_canonical requires a Decimal as an argument.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: a
                        4       LOAD_GLOBAL                     1: Decimal
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                9 (to 18)
                        10      LOAD_GLOBAL                     2: TypeError
                        12      LOAD_CONST                      1: 'is_canonical requires a Decimal as an argument.'
                        14      CALL_FUNCTION                   1
                        16      RAISE_VARARGS                   1
                        18      LOAD_FAST                       1: a
                        20      LOAD_METHOD                     3: is_canonical
                        22      CALL_METHOD                     0
                        24      RETURN_VALUE                    
                'Context.is_canonical'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_finite
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'is_finite'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return True if the operand is finite; otherwise return False.\n\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n\n        >>> ExtendedContext.is_finite(Decimal('2.50'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('-0.3'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('0'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('Inf'))\n        False\n        >>> ExtendedContext.is_finite(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_finite(1)\n        True\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: is_finite
                        16      CALL_METHOD                     0
                        18      RETURN_VALUE                    
                'Context.is_finite'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_infinite
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'is_infinite'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return True if the operand is infinite; otherwise return False.\n\n        >>> ExtendedContext.is_infinite(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_infinite(Decimal('-Inf'))\n        True\n        >>> ExtendedContext.is_infinite(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_infinite(1)\n        False\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: is_infinite
                        16      CALL_METHOD                     0
                        18      RETURN_VALUE                    
                'Context.is_infinite'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_nan
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'is_nan'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return True if the operand is a qNaN or sNaN;\n        otherwise return False.\n\n        >>> ExtendedContext.is_nan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_nan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_nan(Decimal('-sNaN'))\n        True\n        >>> ExtendedContext.is_nan(1)\n        False\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: is_nan
                        16      CALL_METHOD                     0
                        18      RETURN_VALUE                    
                'Context.is_nan'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_normal
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'is_normal'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return True if the operand is a normal number;\n        otherwise return False.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_normal(Decimal('2.50'))\n        True\n        >>> c.is_normal(Decimal('0.1E-999'))\n        False\n        >>> c.is_normal(Decimal('0.00'))\n        False\n        >>> c.is_normal(Decimal('-Inf'))\n        False\n        >>> c.is_normal(Decimal('NaN'))\n        False\n        >>> c.is_normal(1)\n        True\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: is_normal
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.is_normal'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_qnan
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'is_qnan'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return True if the operand is a quiet NaN; otherwise return False.\n\n        >>> ExtendedContext.is_qnan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_qnan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_qnan(Decimal('sNaN'))\n        False\n        >>> ExtendedContext.is_qnan(1)\n        False\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: is_qnan
                        16      CALL_METHOD                     0
                        18      RETURN_VALUE                    
                'Context.is_qnan'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_signed
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'is_signed'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return True if the operand is negative; otherwise return False.\n\n        >>> ExtendedContext.is_signed(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_signed(Decimal('-12'))\n        True\n        >>> ExtendedContext.is_signed(Decimal('-0'))\n        True\n        >>> ExtendedContext.is_signed(8)\n        False\n        >>> ExtendedContext.is_signed(-8)\n        True\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: is_signed
                        16      CALL_METHOD                     0
                        18      RETURN_VALUE                    
                'Context.is_signed'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_snan
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'is_snan'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return True if the operand is a signaling NaN;\n        otherwise return False.\n\n        >>> ExtendedContext.is_snan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('sNaN'))\n        True\n        >>> ExtendedContext.is_snan(1)\n        False\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: is_snan
                        16      CALL_METHOD                     0
                        18      RETURN_VALUE                    
                'Context.is_snan'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_subnormal
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'is_subnormal'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return True if the operand is subnormal; otherwise return False.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_subnormal(Decimal('2.50'))\n        False\n        >>> c.is_subnormal(Decimal('0.1E-999'))\n        True\n        >>> c.is_subnormal(Decimal('0.00'))\n        False\n        >>> c.is_subnormal(Decimal('-Inf'))\n        False\n        >>> c.is_subnormal(Decimal('NaN'))\n        False\n        >>> c.is_subnormal(1)\n        False\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: is_subnormal
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.is_subnormal'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: is_zero
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'is_zero'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return True if the operand is a zero; otherwise return False.\n\n        >>> ExtendedContext.is_zero(Decimal('0'))\n        True\n        >>> ExtendedContext.is_zero(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_zero(Decimal('-0E+2'))\n        True\n        >>> ExtendedContext.is_zero(1)\n        False\n        >>> ExtendedContext.is_zero(0)\n        True\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: is_zero
                        16      CALL_METHOD                     0
                        18      RETURN_VALUE                    
                'Context.is_zero'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: ln
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'ln'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns the natural (base e) logarithm of the operand.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.ln(Decimal('0'))\n        Decimal('-Infinity')\n        >>> c.ln(Decimal('1.000'))\n        Decimal('0')\n        >>> c.ln(Decimal('2.71828183'))\n        Decimal('1.00000000')\n        >>> c.ln(Decimal('10'))\n        Decimal('2.30258509')\n        >>> c.ln(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.ln(1)\n        Decimal('0')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: ln
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.ln'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: log10
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'log10'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns the base 10 logarithm of the operand.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.log10(Decimal('0'))\n        Decimal('-Infinity')\n        >>> c.log10(Decimal('0.001'))\n        Decimal('-3')\n        >>> c.log10(Decimal('1.000'))\n        Decimal('0')\n        >>> c.log10(Decimal('2'))\n        Decimal('0.301029996')\n        >>> c.log10(Decimal('10'))\n        Decimal('1')\n        >>> c.log10(Decimal('70'))\n        Decimal('1.84509804')\n        >>> c.log10(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.log10(0)\n        Decimal('-Infinity')\n        >>> c.log10(1)\n        Decimal('0')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: log10
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.log10'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: logb
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'logb'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        " Returns the exponent of the magnitude of the operand's MSD.\n\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of the operand (as though the\n        operand were truncated to a single digit while maintaining the\n        value of that digit and without limiting the resulting exponent).\n\n        >>> ExtendedContext.logb(Decimal('250'))\n        Decimal('2')\n        >>> ExtendedContext.logb(Decimal('2.50'))\n        Decimal('0')\n        >>> ExtendedContext.logb(Decimal('0.03'))\n        Decimal('-2')\n        >>> ExtendedContext.logb(Decimal('0'))\n        Decimal('-Infinity')\n        >>> ExtendedContext.logb(1)\n        Decimal('0')\n        >>> ExtendedContext.logb(10)\n        Decimal('1')\n        >>> ExtendedContext.logb(100)\n        Decimal('2')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: logb
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.logb'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: logical_and
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'logical_and'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Applies the logical operation 'and' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('1'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_and(Decimal('1100'), Decimal('1010'))\n        Decimal('1000')\n        >>> ExtendedContext.logical_and(Decimal('1111'), Decimal('10'))\n        Decimal('10')\n        >>> ExtendedContext.logical_and(110, 1101)\n        Decimal('100')\n        >>> ExtendedContext.logical_and(Decimal(110), 1101)\n        Decimal('100')\n        >>> ExtendedContext.logical_and(110, Decimal(1101))\n        Decimal('100')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: logical_and
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.logical_and'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: logical_invert
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'logical_invert'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Invert all the digits in the operand.\n\n        The operand must be a logical number.\n\n        >>> ExtendedContext.logical_invert(Decimal('0'))\n        Decimal('111111111')\n        >>> ExtendedContext.logical_invert(Decimal('1'))\n        Decimal('111111110')\n        >>> ExtendedContext.logical_invert(Decimal('111111111'))\n        Decimal('0')\n        >>> ExtendedContext.logical_invert(Decimal('101010101'))\n        Decimal('10101010')\n        >>> ExtendedContext.logical_invert(1101)\n        Decimal('111110010')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: logical_invert
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.logical_invert'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: logical_or
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'logical_or'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Applies the logical operation 'or' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('0'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1100'), Decimal('1010'))\n        Decimal('1110')\n        >>> ExtendedContext.logical_or(Decimal('1110'), Decimal('10'))\n        Decimal('1110')\n        >>> ExtendedContext.logical_or(110, 1101)\n        Decimal('1111')\n        >>> ExtendedContext.logical_or(Decimal(110), 1101)\n        Decimal('1111')\n        >>> ExtendedContext.logical_or(110, Decimal(1101))\n        Decimal('1111')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: logical_or
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.logical_or'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: logical_xor
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'logical_xor'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Applies the logical operation 'xor' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('0'))\n        Decimal('1')\n        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('1'))\n        Decimal('0')\n        >>> ExtendedContext.logical_xor(Decimal('1100'), Decimal('1010'))\n        Decimal('110')\n        >>> ExtendedContext.logical_xor(Decimal('1111'), Decimal('10'))\n        Decimal('1101')\n        >>> ExtendedContext.logical_xor(110, 1101)\n        Decimal('1011')\n        >>> ExtendedContext.logical_xor(Decimal(110), 1101)\n        Decimal('1011')\n        >>> ExtendedContext.logical_xor(110, Decimal(1101))\n        Decimal('1011')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: logical_xor
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.logical_xor'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: max
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'max'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "max compares two values numerically and returns the maximum.\n\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the maximum (closer to positive\n        infinity) of the two operands is chosen as the result.\n\n        >>> ExtendedContext.max(Decimal('3'), Decimal('2'))\n        Decimal('3')\n        >>> ExtendedContext.max(Decimal('-10'), Decimal('3'))\n        Decimal('3')\n        >>> ExtendedContext.max(Decimal('1.0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.max(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.max(1, 2)\n        Decimal('2')\n        >>> ExtendedContext.max(Decimal(1), 2)\n        Decimal('2')\n        >>> ExtendedContext.max(1, Decimal(2))\n        Decimal('2')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: max
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.max'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: max_mag
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'max_mag'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Compares the values numerically with their sign ignored.\n\n        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('-10'))\n        Decimal('-10')\n        >>> ExtendedContext.max_mag(1, -2)\n        Decimal('-2')\n        >>> ExtendedContext.max_mag(Decimal(1), -2)\n        Decimal('-2')\n        >>> ExtendedContext.max_mag(1, Decimal(-2))\n        Decimal('-2')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: max_mag
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.max_mag'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: min
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'min'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "min compares two values numerically and returns the minimum.\n\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the minimum (closer to negative\n        infinity) of the two operands is chosen as the result.\n\n        >>> ExtendedContext.min(Decimal('3'), Decimal('2'))\n        Decimal('2')\n        >>> ExtendedContext.min(Decimal('-10'), Decimal('3'))\n        Decimal('-10')\n        >>> ExtendedContext.min(Decimal('1.0'), Decimal('1'))\n        Decimal('1.0')\n        >>> ExtendedContext.min(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.min(1, 2)\n        Decimal('1')\n        >>> ExtendedContext.min(Decimal(1), 2)\n        Decimal('1')\n        >>> ExtendedContext.min(1, Decimal(29))\n        Decimal('1')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: min
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.min'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: min_mag
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'min_mag'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Compares the values numerically with their sign ignored.\n\n        >>> ExtendedContext.min_mag(Decimal('3'), Decimal('-2'))\n        Decimal('-2')\n        >>> ExtendedContext.min_mag(Decimal('-3'), Decimal('NaN'))\n        Decimal('-3')\n        >>> ExtendedContext.min_mag(1, -2)\n        Decimal('1')\n        >>> ExtendedContext.min_mag(Decimal(1), -2)\n        Decimal('1')\n        >>> ExtendedContext.min_mag(1, Decimal(-2))\n        Decimal('1')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: min_mag
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.min_mag'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: minus
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__neg__'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Minus corresponds to unary prefix minus in Python.\n\n        The operation is evaluated using the same rules as subtract; the\n        operation minus(a) is calculated as subtract('0', a) where the '0'\n        has the same exponent as the operand.\n\n        >>> ExtendedContext.minus(Decimal('1.3'))\n        Decimal('-1.3')\n        >>> ExtendedContext.minus(Decimal('-1.3'))\n        Decimal('1.3')\n        >>> ExtendedContext.minus(1)\n        Decimal('-1')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __neg__
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.minus'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: multiply
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__mul__'
                        'NotImplemented'
                        'TypeError'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                        'r'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "multiply multiplies two operands.\n\n        If either operand is a special value then the general rules apply.\n        Otherwise, the operands are multiplied together\n        ('long multiplication'), resulting in a number which may be as long as\n        the sum of the lengths of the two operands.\n\n        >>> ExtendedContext.multiply(Decimal('1.20'), Decimal('3'))\n        Decimal('3.60')\n        >>> ExtendedContext.multiply(Decimal('7'), Decimal('3'))\n        Decimal('21')\n        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('0.8'))\n        Decimal('0.72')\n        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('-0'))\n        Decimal('-0.0')\n        >>> ExtendedContext.multiply(Decimal('654321'), Decimal('654321'))\n        Decimal('4.28135971E+11')\n        >>> ExtendedContext.multiply(7, 7)\n        Decimal('49')\n        >>> ExtendedContext.multiply(Decimal(7), 7)\n        Decimal('49')\n        >>> ExtendedContext.multiply(7, Decimal(7))\n        Decimal('49')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                        'Unable to convert %s to Decimal'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __mul__
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      3: r
                        26      LOAD_FAST                       3: r
                        28      LOAD_GLOBAL                     2: NotImplemented
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               23 (to 46)
                        34      LOAD_GLOBAL                     3: TypeError
                        36      LOAD_CONST                      4: 'Unable to convert %s to Decimal'
                        38      LOAD_FAST                       2: b
                        40      BINARY_MODULO                   
                        42      CALL_FUNCTION                   1
                        44      RAISE_VARARGS                   1
                        46      LOAD_FAST                       3: r
                        48      RETURN_VALUE                    
                'Context.multiply'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: next_minus
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'next_minus'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns the largest representable number smaller than a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_minus(Decimal('1'))\n        Decimal('0.999999999')\n        >>> c.next_minus(Decimal('1E-1007'))\n        Decimal('0E-1007')\n        >>> ExtendedContext.next_minus(Decimal('-1.00000003'))\n        Decimal('-1.00000004')\n        >>> c.next_minus(Decimal('Infinity'))\n        Decimal('9.99999999E+999')\n        >>> c.next_minus(1)\n        Decimal('0.999999999')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: next_minus
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.next_minus'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: next_plus
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'next_plus'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns the smallest representable number larger than a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_plus(Decimal('1'))\n        Decimal('1.00000001')\n        >>> c.next_plus(Decimal('-1E-1007'))\n        Decimal('-0E-1007')\n        >>> ExtendedContext.next_plus(Decimal('-1.00000003'))\n        Decimal('-1.00000002')\n        >>> c.next_plus(Decimal('-Infinity'))\n        Decimal('-9.99999999E+999')\n        >>> c.next_plus(1)\n        Decimal('1.00000001')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: next_plus
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.next_plus'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: next_toward
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'next_toward'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns the number closest to a, in direction towards b.\n\n        The result is the closest representable number from the first\n        operand (but not the first operand) that is in the direction\n        towards the second operand, unless the operands have the same\n        value.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.next_toward(Decimal('1'), Decimal('2'))\n        Decimal('1.00000001')\n        >>> c.next_toward(Decimal('-1E-1007'), Decimal('1'))\n        Decimal('-0E-1007')\n        >>> c.next_toward(Decimal('-1.00000003'), Decimal('0'))\n        Decimal('-1.00000002')\n        >>> c.next_toward(Decimal('1'), Decimal('0'))\n        Decimal('0.999999999')\n        >>> c.next_toward(Decimal('1E-1007'), Decimal('-100'))\n        Decimal('0E-1007')\n        >>> c.next_toward(Decimal('-1.00000003'), Decimal('-10'))\n        Decimal('-1.00000004')\n        >>> c.next_toward(Decimal('0.00'), Decimal('-0.0000'))\n        Decimal('-0.00')\n        >>> c.next_toward(0, 1)\n        Decimal('1E-1007')\n        >>> c.next_toward(Decimal(0), 1)\n        Decimal('1E-1007')\n        >>> c.next_toward(0, Decimal(1))\n        Decimal('1E-1007')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: next_toward
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.next_toward'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: normalize
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'normalize'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "normalize reduces an operand to its simplest form.\n\n        Essentially a plus operation with all trailing zeros removed from the\n        result.\n\n        >>> ExtendedContext.normalize(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.normalize(Decimal('-2.0'))\n        Decimal('-2')\n        >>> ExtendedContext.normalize(Decimal('1.200'))\n        Decimal('1.2')\n        >>> ExtendedContext.normalize(Decimal('-120'))\n        Decimal('-1.2E+2')\n        >>> ExtendedContext.normalize(Decimal('120.00'))\n        Decimal('1.2E+2')\n        >>> ExtendedContext.normalize(Decimal('0.00'))\n        Decimal('0')\n        >>> ExtendedContext.normalize(6)\n        Decimal('6')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: normalize
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.normalize'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: number_class
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'number_class'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns an indication of the class of the operand.\n\n        The class is one of the following strings:\n          -sNaN\n          -NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.number_class(Decimal('Infinity'))\n        '+Infinity'\n        >>> c.number_class(Decimal('1E-10'))\n        '+Normal'\n        >>> c.number_class(Decimal('2.50'))\n        '+Normal'\n        >>> c.number_class(Decimal('0.1E-999'))\n        '+Subnormal'\n        >>> c.number_class(Decimal('0'))\n        '+Zero'\n        >>> c.number_class(Decimal('-0'))\n        '-Zero'\n        >>> c.number_class(Decimal('-0.1E-999'))\n        '-Subnormal'\n        >>> c.number_class(Decimal('-1E-10'))\n        '-Normal'\n        >>> c.number_class(Decimal('-2.50'))\n        '-Normal'\n        >>> c.number_class(Decimal('-Infinity'))\n        '-Infinity'\n        >>> c.number_class(Decimal('NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('-NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('sNaN'))\n        'sNaN'\n        >>> c.number_class(123)\n        '+Normal'\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: number_class
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.number_class'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: plus
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__pos__'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Plus corresponds to unary prefix plus in Python.\n\n        The operation is evaluated using the same rules as add; the\n        operation plus(a) is calculated as add('0', a) where the '0'\n        has the same exponent as the operand.\n\n        >>> ExtendedContext.plus(Decimal('1.3'))\n        Decimal('1.3')\n        >>> ExtendedContext.plus(Decimal('-1.3'))\n        Decimal('-1.3')\n        >>> ExtendedContext.plus(-1)\n        Decimal('-1')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __pos__
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.plus'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: power
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__pow__'
                        'NotImplemented'
                        'TypeError'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                        'modulo'
                        'r'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Raises a to the power of b, to modulo if given.\n\n        With two arguments, compute a**b.  If a is negative then b\n        must be integral.  The result will be inexact unless b is\n        integral and the result is finite and can be expressed exactly\n        in 'precision' digits.\n\n        With three arguments, compute (a**b) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n\n         - all three arguments must be integral\n         - b must be nonnegative\n         - at least one of a or b must be nonzero\n         - modulo must be nonzero and have at most 'precision' digits\n\n        The result of pow(a, b, modulo) is identical to the result\n        that would be obtained by computing (a**b) % modulo with\n        unbounded precision, but is computed more efficiently.  It is\n        always exact.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.power(Decimal('2'), Decimal('3'))\n        Decimal('8')\n        >>> c.power(Decimal('-2'), Decimal('3'))\n        Decimal('-8')\n        >>> c.power(Decimal('2'), Decimal('-3'))\n        Decimal('0.125')\n        >>> c.power(Decimal('1.7'), Decimal('8'))\n        Decimal('69.7575744')\n        >>> c.power(Decimal('10'), Decimal('0.301029996'))\n        Decimal('2.00000000')\n        >>> c.power(Decimal('Infinity'), Decimal('-1'))\n        Decimal('0')\n        >>> c.power(Decimal('Infinity'), Decimal('0'))\n        Decimal('1')\n        >>> c.power(Decimal('Infinity'), Decimal('1'))\n        Decimal('Infinity')\n        >>> c.power(Decimal('-Infinity'), Decimal('-1'))\n        Decimal('-0')\n        >>> c.power(Decimal('-Infinity'), Decimal('0'))\n        Decimal('1')\n        >>> c.power(Decimal('-Infinity'), Decimal('1'))\n        Decimal('-Infinity')\n        >>> c.power(Decimal('-Infinity'), Decimal('2'))\n        Decimal('Infinity')\n        >>> c.power(Decimal('0'), Decimal('0'))\n        Decimal('NaN')\n\n        >>> c.power(Decimal('3'), Decimal('7'), Decimal('16'))\n        Decimal('11')\n        >>> c.power(Decimal('-3'), Decimal('7'), Decimal('16'))\n        Decimal('-11')\n        >>> c.power(Decimal('-3'), Decimal('8'), Decimal('16'))\n        Decimal('1')\n        >>> c.power(Decimal('3'), Decimal('7'), Decimal('-16'))\n        Decimal('11')\n        >>> c.power(Decimal('23E12345'), Decimal('67E189'), Decimal('123456789'))\n        Decimal('11729830')\n        >>> c.power(Decimal('-0'), Decimal('17'), Decimal('1729'))\n        Decimal('-0')\n        >>> c.power(Decimal('-23'), Decimal('0'), Decimal('65537'))\n        Decimal('1')\n        >>> ExtendedContext.power(7, 7)\n        Decimal('823543')\n        >>> ExtendedContext.power(Decimal(7), 7)\n        Decimal('823543')\n        >>> ExtendedContext.power(7, Decimal(7), 2)\n        Decimal('1')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                        'Unable to convert %s to Decimal'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __pow__
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       3: modulo
                        20      LOAD_FAST                       0: self
                        22      LOAD_CONST                      3: ('context',)
                        24      CALL_FUNCTION_KW                3
                        26      STORE_FAST                      4: r
                        28      LOAD_FAST                       4: r
                        30      LOAD_GLOBAL                     2: NotImplemented
                        32      IS_OP                           0 (is)
                        34      POP_JUMP_IF_FALSE               24 (to 48)
                        36      LOAD_GLOBAL                     3: TypeError
                        38      LOAD_CONST                      4: 'Unable to convert %s to Decimal'
                        40      LOAD_FAST                       2: b
                        42      BINARY_MODULO                   
                        44      CALL_FUNCTION                   1
                        46      RAISE_VARARGS                   1
                        48      LOAD_FAST                       4: r
                        50      RETURN_VALUE                    
                'Context.power'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: quantize
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'quantize'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns a value equal to 'a' (rounded), having the exponent of 'b'.\n\n        The coefficient of the result is derived from that of the left-hand\n        operand.  It may be rounded using the current rounding setting (if the\n        exponent is being increased), multiplied by a positive power of ten (if\n        the exponent is being decreased), or is unchanged (if the exponent is\n        already equal to that of the right-hand operand).\n\n        Unlike other operations, if the length of the coefficient after the\n        quantize operation would be greater than precision then an Invalid\n        operation condition is raised.  This guarantees that, unless there is\n        an error condition, the exponent of the result of a quantize is always\n        equal to that of the right-hand operand.\n\n        Also unlike other operations, quantize will never raise Underflow, even\n        if the result is subnormal and inexact.\n\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.001'))\n        Decimal('2.170')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.01'))\n        Decimal('2.17')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.1'))\n        Decimal('2.2')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+0'))\n        Decimal('2')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+1'))\n        Decimal('0E+1')\n        >>> ExtendedContext.quantize(Decimal('-Inf'), Decimal('Infinity'))\n        Decimal('-Infinity')\n        >>> ExtendedContext.quantize(Decimal('2'), Decimal('Infinity'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('-0.1'), Decimal('1'))\n        Decimal('-0')\n        >>> ExtendedContext.quantize(Decimal('-0'), Decimal('1e+5'))\n        Decimal('-0E+5')\n        >>> ExtendedContext.quantize(Decimal('+35236450.6'), Decimal('1e-2'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('-35236450.6'), Decimal('1e-2'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-1'))\n        Decimal('217.0')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-0'))\n        Decimal('217')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+1'))\n        Decimal('2.2E+2')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+2'))\n        Decimal('2E+2')\n        >>> ExtendedContext.quantize(1, 2)\n        Decimal('1')\n        >>> ExtendedContext.quantize(Decimal(1), 2)\n        Decimal('1')\n        >>> ExtendedContext.quantize(1, Decimal(2))\n        Decimal('1')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: quantize
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.quantize'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: radix
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Decimal'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Just returns 10, as this is Decimal, :)\n\n        >>> ExtendedContext.radix()\n        Decimal('10')\n        "
                        10
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Decimal
                        2       LOAD_CONST                      1: 10
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                'Context.radix'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: remainder
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__mod__'
                        'NotImplemented'
                        'TypeError'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                        'r'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns the remainder from integer division.\n\n        The result is the residue of the dividend after the operation of\n        calculating integer division as described for divide-integer, rounded\n        to precision digits if necessary.  The sign of the result, if\n        non-zero, is the same as that of the original dividend.\n\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n\n        >>> ExtendedContext.remainder(Decimal('2.1'), Decimal('3'))\n        Decimal('2.1')\n        >>> ExtendedContext.remainder(Decimal('10'), Decimal('3'))\n        Decimal('1')\n        >>> ExtendedContext.remainder(Decimal('-10'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.remainder(Decimal('10.2'), Decimal('1'))\n        Decimal('0.2')\n        >>> ExtendedContext.remainder(Decimal('10'), Decimal('0.3'))\n        Decimal('0.1')\n        >>> ExtendedContext.remainder(Decimal('3.6'), Decimal('1.3'))\n        Decimal('1.0')\n        >>> ExtendedContext.remainder(22, 6)\n        Decimal('4')\n        >>> ExtendedContext.remainder(Decimal(22), 6)\n        Decimal('4')\n        >>> ExtendedContext.remainder(22, Decimal(6))\n        Decimal('4')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                        'Unable to convert %s to Decimal'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __mod__
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      3: r
                        26      LOAD_FAST                       3: r
                        28      LOAD_GLOBAL                     2: NotImplemented
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               23 (to 46)
                        34      LOAD_GLOBAL                     3: TypeError
                        36      LOAD_CONST                      4: 'Unable to convert %s to Decimal'
                        38      LOAD_FAST                       2: b
                        40      BINARY_MODULO                   
                        42      CALL_FUNCTION                   1
                        44      RAISE_VARARGS                   1
                        46      LOAD_FAST                       3: r
                        48      RETURN_VALUE                    
                'Context.remainder'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: remainder_near
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'remainder_near'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Returns to be "a - b * n", where n is the integer nearest the exact\n        value of "x / b" (if two integers are equally near then the even one\n        is chosen).  If the result is equal to 0 then its sign will be the\n        sign of a.\n\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n\n        >>> ExtendedContext.remainder_near(Decimal(\'2.1\'), Decimal(\'3\'))\n        Decimal(\'-0.9\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'6\'))\n        Decimal(\'-2\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'3\'))\n        Decimal(\'1\')\n        >>> ExtendedContext.remainder_near(Decimal(\'-10\'), Decimal(\'3\'))\n        Decimal(\'-1\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10.2\'), Decimal(\'1\'))\n        Decimal(\'0.2\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'0.3\'))\n        Decimal(\'0.1\')\n        >>> ExtendedContext.remainder_near(Decimal(\'3.6\'), Decimal(\'1.3\'))\n        Decimal(\'-0.3\')\n        >>> ExtendedContext.remainder_near(3, 11)\n        Decimal(\'3\')\n        >>> ExtendedContext.remainder_near(Decimal(3), 11)\n        Decimal(\'3\')\n        >>> ExtendedContext.remainder_near(3, Decimal(11))\n        Decimal(\'3\')\n        '
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: remainder_near
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.remainder_near'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: rotate
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'rotate'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns a rotated copy of a, b times.\n\n        The coefficient of the result is a rotated copy of the digits in\n        the coefficient of the first operand.  The number of places of\n        rotation is taken from the absolute value of the second operand,\n        with the rotation being to the left if the second operand is\n        positive or to the right otherwise.\n\n        >>> ExtendedContext.rotate(Decimal('34'), Decimal('8'))\n        Decimal('400000003')\n        >>> ExtendedContext.rotate(Decimal('12'), Decimal('9'))\n        Decimal('12')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('-2'))\n        Decimal('891234567')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('0'))\n        Decimal('123456789')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('+2'))\n        Decimal('345678912')\n        >>> ExtendedContext.rotate(1333333, 1)\n        Decimal('13333330')\n        >>> ExtendedContext.rotate(Decimal(1333333), 1)\n        Decimal('13333330')\n        >>> ExtendedContext.rotate(1333333, Decimal(1))\n        Decimal('13333330')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: rotate
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.rotate'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: same_quantum
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'same_quantum'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns True if the two operands have the same exponent.\n\n        The result is never affected by either the sign or the coefficient of\n        either operand.\n\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.001'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.01'))\n        True\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('1'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('Inf'), Decimal('-Inf'))\n        True\n        >>> ExtendedContext.same_quantum(10000, -1)\n        True\n        >>> ExtendedContext.same_quantum(Decimal(10000), -1)\n        True\n        >>> ExtendedContext.same_quantum(10000, Decimal(-1))\n        True\n        "
                        True
                        (
                            'raiseit'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_METHOD                     1: same_quantum
                        16      LOAD_FAST                       2: b
                        18      CALL_METHOD                     1
                        20      RETURN_VALUE                    
                'Context.same_quantum'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: scaleb
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'scaleb'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns the first operand after adding the second value its exp.\n\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('-2'))\n        Decimal('0.0750')\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('0'))\n        Decimal('7.50')\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('3'))\n        Decimal('7.50E+3')\n        >>> ExtendedContext.scaleb(1, 4)\n        Decimal('1E+4')\n        >>> ExtendedContext.scaleb(Decimal(1), 4)\n        Decimal('1E+4')\n        >>> ExtendedContext.scaleb(1, Decimal(4))\n        Decimal('1E+4')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: scaleb
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.scaleb'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: shift
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'shift'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Returns a shifted copy of a, b times.\n\n        The coefficient of the result is a shifted copy of the digits\n        in the coefficient of the first operand.  The number of places\n        to shift is taken from the absolute value of the second operand,\n        with the shift being to the left if the second operand is\n        positive or to the right otherwise.  Digits shifted into the\n        coefficient are zeros.\n\n        >>> ExtendedContext.shift(Decimal('34'), Decimal('8'))\n        Decimal('400000000')\n        >>> ExtendedContext.shift(Decimal('12'), Decimal('9'))\n        Decimal('0')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('-2'))\n        Decimal('1234567')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('0'))\n        Decimal('123456789')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('+2'))\n        Decimal('345678900')\n        >>> ExtendedContext.shift(88888888, 2)\n        Decimal('888888800')\n        >>> ExtendedContext.shift(Decimal(88888888), 2)\n        Decimal('888888800')\n        >>> ExtendedContext.shift(88888888, Decimal(2))\n        Decimal('888888800')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: shift
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      RETURN_VALUE                    
                'Context.shift'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: sqrt
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'sqrt'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Square root of a non-negative number to context precision.\n\n        If the result must be inexact, it is rounded using the round-half-even\n        algorithm.\n\n        >>> ExtendedContext.sqrt(Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.sqrt(Decimal('-0'))\n        Decimal('-0')\n        >>> ExtendedContext.sqrt(Decimal('0.39'))\n        Decimal('0.624499800')\n        >>> ExtendedContext.sqrt(Decimal('100'))\n        Decimal('10')\n        >>> ExtendedContext.sqrt(Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.sqrt(Decimal('1.0'))\n        Decimal('1.0')\n        >>> ExtendedContext.sqrt(Decimal('1.00'))\n        Decimal('1.0')\n        >>> ExtendedContext.sqrt(Decimal('7'))\n        Decimal('2.64575131')\n        >>> ExtendedContext.sqrt(Decimal('10'))\n        Decimal('3.16227766')\n        >>> ExtendedContext.sqrt(2)\n        Decimal('1.41421356')\n        >>> ExtendedContext.prec\n        9\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: sqrt
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.sqrt'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: subtract
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__sub__'
                        'NotImplemented'
                        'TypeError'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                        'r'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return the difference between the two operands.\n\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.07'))\n        Decimal('0.23')\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.30'))\n        Decimal('0.00')\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('2.07'))\n        Decimal('-0.77')\n        >>> ExtendedContext.subtract(8, 5)\n        Decimal('3')\n        >>> ExtendedContext.subtract(Decimal(8), 5)\n        Decimal('3')\n        >>> ExtendedContext.subtract(8, Decimal(5))\n        Decimal('3')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                        'Unable to convert %s to Decimal'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __sub__
                        16      LOAD_FAST                       2: b
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: ('context',)
                        22      CALL_FUNCTION_KW                2
                        24      STORE_FAST                      3: r
                        26      LOAD_FAST                       3: r
                        28      LOAD_GLOBAL                     2: NotImplemented
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               23 (to 46)
                        34      LOAD_GLOBAL                     3: TypeError
                        36      LOAD_CONST                      4: 'Unable to convert %s to Decimal'
                        38      LOAD_FAST                       2: b
                        40      BINARY_MODULO                   
                        42      CALL_FUNCTION                   1
                        44      RAISE_VARARGS                   1
                        46      LOAD_FAST                       3: r
                        48      RETURN_VALUE                    
                'Context.subtract'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: to_eng_string
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'to_eng_string'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Convert to a string, using engineering notation if an exponent is needed.\n\n        Engineering notation has an exponent which is a multiple of 3.  This\n        can leave up to 3 digits to the left of the decimal place and may\n        require the addition of either one or two trailing zeros.\n\n        The operation is not affected by the context.\n\n        >>> ExtendedContext.to_eng_string(Decimal('123E+1'))\n        '1.23E+3'\n        >>> ExtendedContext.to_eng_string(Decimal('123E+3'))\n        '123E+3'\n        >>> ExtendedContext.to_eng_string(Decimal('123E-10'))\n        '12.3E-9'\n        >>> ExtendedContext.to_eng_string(Decimal('-123E-12'))\n        '-123E-12'\n        >>> ExtendedContext.to_eng_string(Decimal('7E-7'))\n        '700E-9'\n        >>> ExtendedContext.to_eng_string(Decimal('7E+1'))\n        '70'\n        >>> ExtendedContext.to_eng_string(Decimal('0E+1'))\n        '0.00E+3'\n\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: to_eng_string
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.to_eng_string'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: to_sci_string
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        '__str__'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Converts a number to a string, using scientific notation.\n\n        The operation is not affected by the context.\n        '
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: __str__
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.to_sci_string'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: to_integral_exact
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'to_integral_exact'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Rounds to an integer.\n\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting; Inexact and Rounded flags\n        are allowed in this operation.  The rounding mode is taken from the\n        context.\n\n        >>> ExtendedContext.to_integral_exact(Decimal('2.1'))\n        Decimal('2')\n        >>> ExtendedContext.to_integral_exact(Decimal('100'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_exact(Decimal('100.0'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_exact(Decimal('101.5'))\n        Decimal('102')\n        >>> ExtendedContext.to_integral_exact(Decimal('-101.5'))\n        Decimal('-102')\n        >>> ExtendedContext.to_integral_exact(Decimal('10E+5'))\n        Decimal('1.0E+6')\n        >>> ExtendedContext.to_integral_exact(Decimal('7.89E+77'))\n        Decimal('7.89E+77')\n        >>> ExtendedContext.to_integral_exact(Decimal('-Inf'))\n        Decimal('-Infinity')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: to_integral_exact
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.to_integral_exact'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: to_integral_value
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_convert_other'
                        'to_integral_value'
                    [Var Names]
                        'self'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Rounds to an integer.\n\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting, except that no flags will\n        be set.  The rounding mode is taken from the context.\n\n        >>> ExtendedContext.to_integral_value(Decimal('2.1'))\n        Decimal('2')\n        >>> ExtendedContext.to_integral_value(Decimal('100'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_value(Decimal('100.0'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_value(Decimal('101.5'))\n        Decimal('102')\n        >>> ExtendedContext.to_integral_value(Decimal('-101.5'))\n        Decimal('-102')\n        >>> ExtendedContext.to_integral_value(Decimal('10E+5'))\n        Decimal('1.0E+6')\n        >>> ExtendedContext.to_integral_value(Decimal('7.89E+77'))\n        Decimal('7.89E+77')\n        >>> ExtendedContext.to_integral_value(Decimal('-Inf'))\n        Decimal('-Infinity')\n        "
                        True
                        (
                            'raiseit'
                        )
                        (
                            'context'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _convert_other
                        2       LOAD_FAST                       1: a
                        4       LOAD_CONST                      1: True
                        6       LOAD_CONST                      2: ('raiseit',)
                        8       CALL_FUNCTION_KW                2
                        10      STORE_FAST                      1: a
                        12      LOAD_FAST                       1: a
                        14      LOAD_ATTR                       1: to_integral_value
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      3: ('context',)
                        20      CALL_FUNCTION_KW                1
                        22      RETURN_VALUE                    
                'Context.to_integral_value'
                (
                    None
                    None
                    None
                    None
                    None
                    None
                    None
                    None
                    None
                )
                (
                    None
                )
                (
                    '0'
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Context'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Contains the context for a Decimal instance.\n\n    Contains:\n    prec - precision (for use in rounding, division, square roots..)\n    rounding - rounding type (how you round)\n    traps - If traps[exception] = 1, then the exception is\n                    raised when it is caused.  Otherwise, a value is\n                    substituted in.\n    flags  - When an exception is caused, flags[exception] is set.\n             (Whether or not the trap_enabler is set)\n             Should be reset by user of Decimal instance.\n    Emin -   Minimum exponent\n    Emax -   Maximum exponent\n    capitals -      If 1, 1*10^1 is printed as 1E+1.\n                    If 0, printed as 1e1\n    clamp -  If 1, change exponents if too high (Default 0)\n    '
                10      STORE_NAME                      3: __doc__
                12      NOP                             
                14      NOP                             
                16      NOP                             
                18      LOAD_CONST                      166: (None, None, None, None, None, None, None, None, None)
                20      LOAD_CONST                      3: <CODE> __init__
                22      LOAD_CONST                      4: 'Context.__init__'
                24      MAKE_FUNCTION                   1
                26      STORE_NAME                      4: __init__
                28      LOAD_CONST                      5: <CODE> _set_integer_check
                30      LOAD_CONST                      6: 'Context._set_integer_check'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      5: _set_integer_check
                36      LOAD_CONST                      7: <CODE> _set_signal_dict
                38      LOAD_CONST                      8: 'Context._set_signal_dict'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      6: _set_signal_dict
                44      LOAD_CONST                      9: <CODE> __setattr__
                46      LOAD_CONST                      10: 'Context.__setattr__'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      7: __setattr__
                52      LOAD_CONST                      11: <CODE> __delattr__
                54      LOAD_CONST                      12: 'Context.__delattr__'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      8: __delattr__
                60      LOAD_CONST                      13: <CODE> __reduce__
                62      LOAD_CONST                      14: 'Context.__reduce__'
                64      MAKE_FUNCTION                   0
                66      STORE_NAME                      9: __reduce__
                68      LOAD_CONST                      15: <CODE> __repr__
                70      LOAD_CONST                      16: 'Context.__repr__'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      10: __repr__
                76      LOAD_CONST                      17: <CODE> clear_flags
                78      LOAD_CONST                      18: 'Context.clear_flags'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      11: clear_flags
                84      LOAD_CONST                      19: <CODE> clear_traps
                86      LOAD_CONST                      20: 'Context.clear_traps'
                88      MAKE_FUNCTION                   0
                90      STORE_NAME                      12: clear_traps
                92      LOAD_CONST                      21: <CODE> _shallow_copy
                94      LOAD_CONST                      22: 'Context._shallow_copy'
                96      MAKE_FUNCTION                   0
                98      STORE_NAME                      13: _shallow_copy
                100     LOAD_CONST                      23: <CODE> copy
                102     LOAD_CONST                      24: 'Context.copy'
                104     MAKE_FUNCTION                   0
                106     STORE_NAME                      14: copy
                108     LOAD_NAME                       14: copy
                110     STORE_NAME                      15: __copy__
                112     LOAD_CONST                      167: (None,)
                114     LOAD_CONST                      25: <CODE> _raise_error
                116     LOAD_CONST                      26: 'Context._raise_error'
                118     MAKE_FUNCTION                   1
                120     STORE_NAME                      16: _raise_error
                122     LOAD_CONST                      27: <CODE> _ignore_all_flags
                124     LOAD_CONST                      28: 'Context._ignore_all_flags'
                126     MAKE_FUNCTION                   0
                128     STORE_NAME                      17: _ignore_all_flags
                130     LOAD_CONST                      29: <CODE> _ignore_flags
                132     LOAD_CONST                      30: 'Context._ignore_flags'
                134     MAKE_FUNCTION                   0
                136     STORE_NAME                      18: _ignore_flags
                138     LOAD_CONST                      31: <CODE> _regard_flags
                140     LOAD_CONST                      32: 'Context._regard_flags'
                142     MAKE_FUNCTION                   0
                144     STORE_NAME                      19: _regard_flags
                146     LOAD_CONST                      2: None
                148     STORE_NAME                      20: __hash__
                150     LOAD_CONST                      33: <CODE> Etiny
                152     LOAD_CONST                      34: 'Context.Etiny'
                154     MAKE_FUNCTION                   0
                156     STORE_NAME                      21: Etiny
                158     LOAD_CONST                      35: <CODE> Etop
                160     LOAD_CONST                      36: 'Context.Etop'
                162     MAKE_FUNCTION                   0
                164     STORE_NAME                      22: Etop
                166     LOAD_CONST                      37: <CODE> _set_rounding
                168     LOAD_CONST                      38: 'Context._set_rounding'
                170     MAKE_FUNCTION                   0
                172     STORE_NAME                      23: _set_rounding
                174     LOAD_CONST                      168: ('0',)
                176     LOAD_CONST                      40: <CODE> create_decimal
                178     LOAD_CONST                      41: 'Context.create_decimal'
                180     MAKE_FUNCTION                   1
                182     STORE_NAME                      24: create_decimal
                184     LOAD_CONST                      42: <CODE> create_decimal_from_float
                186     LOAD_CONST                      43: 'Context.create_decimal_from_float'
                188     MAKE_FUNCTION                   0
                190     STORE_NAME                      25: create_decimal_from_float
                192     LOAD_CONST                      44: <CODE> abs
                194     LOAD_CONST                      45: 'Context.abs'
                196     MAKE_FUNCTION                   0
                198     STORE_NAME                      26: abs
                200     LOAD_CONST                      46: <CODE> add
                202     LOAD_CONST                      47: 'Context.add'
                204     MAKE_FUNCTION                   0
                206     STORE_NAME                      27: add
                208     LOAD_CONST                      48: <CODE> _apply
                210     LOAD_CONST                      49: 'Context._apply'
                212     MAKE_FUNCTION                   0
                214     STORE_NAME                      28: _apply
                216     LOAD_CONST                      50: <CODE> canonical
                218     LOAD_CONST                      51: 'Context.canonical'
                220     MAKE_FUNCTION                   0
                222     STORE_NAME                      29: canonical
                224     LOAD_CONST                      52: <CODE> compare
                226     LOAD_CONST                      53: 'Context.compare'
                228     MAKE_FUNCTION                   0
                230     STORE_NAME                      30: compare
                232     LOAD_CONST                      54: <CODE> compare_signal
                234     LOAD_CONST                      55: 'Context.compare_signal'
                236     MAKE_FUNCTION                   0
                238     STORE_NAME                      31: compare_signal
                240     LOAD_CONST                      56: <CODE> compare_total
                242     LOAD_CONST                      57: 'Context.compare_total'
                244     MAKE_FUNCTION                   0
                246     STORE_NAME                      32: compare_total
                248     LOAD_CONST                      58: <CODE> compare_total_mag
                250     LOAD_CONST                      59: 'Context.compare_total_mag'
                252     MAKE_FUNCTION                   0
                254     STORE_NAME                      33: compare_total_mag
                256     LOAD_CONST                      60: <CODE> copy_abs
                258     LOAD_CONST                      61: 'Context.copy_abs'
                260     MAKE_FUNCTION                   0
                262     STORE_NAME                      34: copy_abs
                264     LOAD_CONST                      62: <CODE> copy_decimal
                266     LOAD_CONST                      63: 'Context.copy_decimal'
                268     MAKE_FUNCTION                   0
                270     STORE_NAME                      35: copy_decimal
                272     LOAD_CONST                      64: <CODE> copy_negate
                274     LOAD_CONST                      65: 'Context.copy_negate'
                276     MAKE_FUNCTION                   0
                278     STORE_NAME                      36: copy_negate
                280     LOAD_CONST                      66: <CODE> copy_sign
                282     LOAD_CONST                      67: 'Context.copy_sign'
                284     MAKE_FUNCTION                   0
                286     STORE_NAME                      37: copy_sign
                288     LOAD_CONST                      68: <CODE> divide
                290     LOAD_CONST                      69: 'Context.divide'
                292     MAKE_FUNCTION                   0
                294     STORE_NAME                      38: divide
                296     LOAD_CONST                      70: <CODE> divide_int
                298     LOAD_CONST                      71: 'Context.divide_int'
                300     MAKE_FUNCTION                   0
                302     STORE_NAME                      39: divide_int
                304     LOAD_CONST                      72: <CODE> divmod
                306     LOAD_CONST                      73: 'Context.divmod'
                308     MAKE_FUNCTION                   0
                310     STORE_NAME                      40: divmod
                312     LOAD_CONST                      74: <CODE> exp
                314     LOAD_CONST                      75: 'Context.exp'
                316     MAKE_FUNCTION                   0
                318     STORE_NAME                      41: exp
                320     LOAD_CONST                      76: <CODE> fma
                322     LOAD_CONST                      77: 'Context.fma'
                324     MAKE_FUNCTION                   0
                326     STORE_NAME                      42: fma
                328     LOAD_CONST                      78: <CODE> is_canonical
                330     LOAD_CONST                      79: 'Context.is_canonical'
                332     MAKE_FUNCTION                   0
                334     STORE_NAME                      43: is_canonical
                336     LOAD_CONST                      80: <CODE> is_finite
                338     LOAD_CONST                      81: 'Context.is_finite'
                340     MAKE_FUNCTION                   0
                342     STORE_NAME                      44: is_finite
                344     LOAD_CONST                      82: <CODE> is_infinite
                346     LOAD_CONST                      83: 'Context.is_infinite'
                348     MAKE_FUNCTION                   0
                350     STORE_NAME                      45: is_infinite
                352     LOAD_CONST                      84: <CODE> is_nan
                354     LOAD_CONST                      85: 'Context.is_nan'
                356     MAKE_FUNCTION                   0
                358     STORE_NAME                      46: is_nan
                360     LOAD_CONST                      86: <CODE> is_normal
                362     LOAD_CONST                      87: 'Context.is_normal'
                364     MAKE_FUNCTION                   0
                366     STORE_NAME                      47: is_normal
                368     LOAD_CONST                      88: <CODE> is_qnan
                370     LOAD_CONST                      89: 'Context.is_qnan'
                372     MAKE_FUNCTION                   0
                374     STORE_NAME                      48: is_qnan
                376     LOAD_CONST                      90: <CODE> is_signed
                378     LOAD_CONST                      91: 'Context.is_signed'
                380     MAKE_FUNCTION                   0
                382     STORE_NAME                      49: is_signed
                384     LOAD_CONST                      92: <CODE> is_snan
                386     LOAD_CONST                      93: 'Context.is_snan'
                388     MAKE_FUNCTION                   0
                390     STORE_NAME                      50: is_snan
                392     LOAD_CONST                      94: <CODE> is_subnormal
                394     LOAD_CONST                      95: 'Context.is_subnormal'
                396     MAKE_FUNCTION                   0
                398     STORE_NAME                      51: is_subnormal
                400     LOAD_CONST                      96: <CODE> is_zero
                402     LOAD_CONST                      97: 'Context.is_zero'
                404     MAKE_FUNCTION                   0
                406     STORE_NAME                      52: is_zero
                408     LOAD_CONST                      98: <CODE> ln
                410     LOAD_CONST                      99: 'Context.ln'
                412     MAKE_FUNCTION                   0
                414     STORE_NAME                      53: ln
                416     LOAD_CONST                      100: <CODE> log10
                418     LOAD_CONST                      101: 'Context.log10'
                420     MAKE_FUNCTION                   0
                422     STORE_NAME                      54: log10
                424     LOAD_CONST                      102: <CODE> logb
                426     LOAD_CONST                      103: 'Context.logb'
                428     MAKE_FUNCTION                   0
                430     STORE_NAME                      55: logb
                432     LOAD_CONST                      104: <CODE> logical_and
                434     LOAD_CONST                      105: 'Context.logical_and'
                436     MAKE_FUNCTION                   0
                438     STORE_NAME                      56: logical_and
                440     LOAD_CONST                      106: <CODE> logical_invert
                442     LOAD_CONST                      107: 'Context.logical_invert'
                444     MAKE_FUNCTION                   0
                446     STORE_NAME                      57: logical_invert
                448     LOAD_CONST                      108: <CODE> logical_or
                450     LOAD_CONST                      109: 'Context.logical_or'
                452     MAKE_FUNCTION                   0
                454     STORE_NAME                      58: logical_or
                456     LOAD_CONST                      110: <CODE> logical_xor
                458     LOAD_CONST                      111: 'Context.logical_xor'
                460     MAKE_FUNCTION                   0
                462     STORE_NAME                      59: logical_xor
                464     LOAD_CONST                      112: <CODE> max
                466     LOAD_CONST                      113: 'Context.max'
                468     MAKE_FUNCTION                   0
                470     STORE_NAME                      60: max
                472     LOAD_CONST                      114: <CODE> max_mag
                474     LOAD_CONST                      115: 'Context.max_mag'
                476     MAKE_FUNCTION                   0
                478     STORE_NAME                      61: max_mag
                480     LOAD_CONST                      116: <CODE> min
                482     LOAD_CONST                      117: 'Context.min'
                484     MAKE_FUNCTION                   0
                486     STORE_NAME                      62: min
                488     LOAD_CONST                      118: <CODE> min_mag
                490     LOAD_CONST                      119: 'Context.min_mag'
                492     MAKE_FUNCTION                   0
                494     STORE_NAME                      63: min_mag
                496     LOAD_CONST                      120: <CODE> minus
                498     LOAD_CONST                      121: 'Context.minus'
                500     MAKE_FUNCTION                   0
                502     STORE_NAME                      64: minus
                504     LOAD_CONST                      122: <CODE> multiply
                506     LOAD_CONST                      123: 'Context.multiply'
                508     MAKE_FUNCTION                   0
                510     STORE_NAME                      65: multiply
                512     LOAD_CONST                      124: <CODE> next_minus
                514     LOAD_CONST                      125: 'Context.next_minus'
                516     MAKE_FUNCTION                   0
                518     STORE_NAME                      66: next_minus
                520     LOAD_CONST                      126: <CODE> next_plus
                522     LOAD_CONST                      127: 'Context.next_plus'
                524     MAKE_FUNCTION                   0
                526     STORE_NAME                      67: next_plus
                528     LOAD_CONST                      128: <CODE> next_toward
                530     LOAD_CONST                      129: 'Context.next_toward'
                532     MAKE_FUNCTION                   0
                534     STORE_NAME                      68: next_toward
                536     LOAD_CONST                      130: <CODE> normalize
                538     LOAD_CONST                      131: 'Context.normalize'
                540     MAKE_FUNCTION                   0
                542     STORE_NAME                      69: normalize
                544     LOAD_CONST                      132: <CODE> number_class
                546     LOAD_CONST                      133: 'Context.number_class'
                548     MAKE_FUNCTION                   0
                550     STORE_NAME                      70: number_class
                552     LOAD_CONST                      134: <CODE> plus
                554     LOAD_CONST                      135: 'Context.plus'
                556     MAKE_FUNCTION                   0
                558     STORE_NAME                      71: plus
                560     LOAD_CONST                      167: (None,)
                562     LOAD_CONST                      136: <CODE> power
                564     LOAD_CONST                      137: 'Context.power'
                566     MAKE_FUNCTION                   1
                568     STORE_NAME                      72: power
                570     LOAD_CONST                      138: <CODE> quantize
                572     LOAD_CONST                      139: 'Context.quantize'
                574     MAKE_FUNCTION                   0
                576     STORE_NAME                      73: quantize
                578     LOAD_CONST                      140: <CODE> radix
                580     LOAD_CONST                      141: 'Context.radix'
                582     MAKE_FUNCTION                   0
                584     STORE_NAME                      74: radix
                586     LOAD_CONST                      142: <CODE> remainder
                588     LOAD_CONST                      143: 'Context.remainder'
                590     MAKE_FUNCTION                   0
                592     STORE_NAME                      75: remainder
                594     LOAD_CONST                      144: <CODE> remainder_near
                596     LOAD_CONST                      145: 'Context.remainder_near'
                598     MAKE_FUNCTION                   0
                600     STORE_NAME                      76: remainder_near
                602     LOAD_CONST                      146: <CODE> rotate
                604     LOAD_CONST                      147: 'Context.rotate'
                606     MAKE_FUNCTION                   0
                608     STORE_NAME                      77: rotate
                610     LOAD_CONST                      148: <CODE> same_quantum
                612     LOAD_CONST                      149: 'Context.same_quantum'
                614     MAKE_FUNCTION                   0
                616     STORE_NAME                      78: same_quantum
                618     LOAD_CONST                      150: <CODE> scaleb
                620     LOAD_CONST                      151: 'Context.scaleb'
                622     MAKE_FUNCTION                   0
                624     STORE_NAME                      79: scaleb
                626     LOAD_CONST                      152: <CODE> shift
                628     LOAD_CONST                      153: 'Context.shift'
                630     MAKE_FUNCTION                   0
                632     STORE_NAME                      80: shift
                634     LOAD_CONST                      154: <CODE> sqrt
                636     LOAD_CONST                      155: 'Context.sqrt'
                638     MAKE_FUNCTION                   0
                640     STORE_NAME                      81: sqrt
                642     LOAD_CONST                      156: <CODE> subtract
                644     LOAD_CONST                      157: 'Context.subtract'
                646     MAKE_FUNCTION                   0
                648     STORE_NAME                      82: subtract
                650     LOAD_CONST                      158: <CODE> to_eng_string
                652     LOAD_CONST                      159: 'Context.to_eng_string'
                654     MAKE_FUNCTION                   0
                656     STORE_NAME                      83: to_eng_string
                658     LOAD_CONST                      160: <CODE> to_sci_string
                660     LOAD_CONST                      161: 'Context.to_sci_string'
                662     MAKE_FUNCTION                   0
                664     STORE_NAME                      84: to_sci_string
                666     LOAD_CONST                      162: <CODE> to_integral_exact
                668     LOAD_CONST                      163: 'Context.to_integral_exact'
                670     MAKE_FUNCTION                   0
                672     STORE_NAME                      85: to_integral_exact
                674     LOAD_CONST                      164: <CODE> to_integral_value
                676     LOAD_CONST                      165: 'Context.to_integral_value'
                678     MAKE_FUNCTION                   0
                680     STORE_NAME                      86: to_integral_value
                682     LOAD_NAME                       86: to_integral_value
                684     STORE_NAME                      87: to_integral
                686     LOAD_CONST                      2: None
                688     RETURN_VALUE                    
        'Context'
        [Code]
            File Name: _pydecimal.py
            Object Name: _WorkRep
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__slots__'
                '__init__'
                '__repr__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_WorkRep'
                (
                    'sign'
                    'int'
                    'exp'
                )
                None
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'sign'
                        'int'
                        'exp'
                        'isinstance'
                        'Decimal'
                        '_sign'
                        '_int'
                        '_exp'
                    [Var Names]
                        'self'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        1
                        2
                    [Disassembly]
                        0       LOAD_FAST                       1: value
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               15 (to 30)
                        8       LOAD_CONST                      0: None
                        10      LOAD_FAST                       0: self
                        12      STORE_ATTR                      0: sign
                        14      LOAD_CONST                      1: 0
                        16      LOAD_FAST                       0: self
                        18      STORE_ATTR                      1: int
                        20      LOAD_CONST                      0: None
                        22      LOAD_FAST                       0: self
                        24      STORE_ATTR                      2: exp
                        26      LOAD_CONST                      0: None
                        28      RETURN_VALUE                    
                        30      LOAD_GLOBAL                     3: isinstance
                        32      LOAD_FAST                       1: value
                        34      LOAD_GLOBAL                     4: Decimal
                        36      CALL_FUNCTION                   2
                        38      POP_JUMP_IF_FALSE               36 (to 72)
                        40      LOAD_FAST                       1: value
                        42      LOAD_ATTR                       5: _sign
                        44      LOAD_FAST                       0: self
                        46      STORE_ATTR                      0: sign
                        48      LOAD_GLOBAL                     1: int
                        50      LOAD_FAST                       1: value
                        52      LOAD_ATTR                       6: _int
                        54      CALL_FUNCTION                   1
                        56      LOAD_FAST                       0: self
                        58      STORE_ATTR                      1: int
                        60      LOAD_FAST                       1: value
                        62      LOAD_ATTR                       7: _exp
                        64      LOAD_FAST                       0: self
                        66      STORE_ATTR                      2: exp
                        68      LOAD_CONST                      0: None
                        70      RETURN_VALUE                    
                        72      LOAD_FAST                       1: value
                        74      LOAD_CONST                      1: 0
                        76      BINARY_SUBSCR                   
                        78      LOAD_FAST                       0: self
                        80      STORE_ATTR                      0: sign
                        82      LOAD_FAST                       1: value
                        84      LOAD_CONST                      2: 1
                        86      BINARY_SUBSCR                   
                        88      LOAD_FAST                       0: self
                        90      STORE_ATTR                      1: int
                        92      LOAD_FAST                       1: value
                        94      LOAD_CONST                      3: 2
                        96      BINARY_SUBSCR                   
                        98      LOAD_FAST                       0: self
                        100     STORE_ATTR                      2: exp
                        102     LOAD_CONST                      0: None
                        104     RETURN_VALUE                    
                '_WorkRep.__init__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'sign'
                        'int'
                        'exp'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '(%r, %r, %r)'
                    [Disassembly]
                        0       LOAD_CONST                      1: '(%r, %r, %r)'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: sign
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: int
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: exp
                        14      BUILD_TUPLE                     3
                        16      BINARY_MODULO                   
                        18      RETURN_VALUE                    
                '_WorkRep.__repr__'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_WorkRep'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ('sign', 'int', 'exp')
                10      STORE_NAME                      3: __slots__
                12      LOAD_CONST                      7: (None,)
                14      LOAD_CONST                      3: <CODE> __init__
                16      LOAD_CONST                      4: '_WorkRep.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      5: <CODE> __repr__
                24      LOAD_CONST                      6: '_WorkRep.__repr__'
                26      MAKE_FUNCTION                   0
                28      STORE_NAME                      5: __repr__
                30      LOAD_CONST                      2: None
                32      RETURN_VALUE                    
        '_WorkRep'
        [Code]
            File Name: _pydecimal.py
            Object Name: _normalize
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'exp'
                'len'
                'str'
                'int'
                'min'
            [Var Names]
                'op1'
                'op2'
                'prec'
                'tmp'
                'other'
                'tmp_len'
                'other_len'
                'exp'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Normalizes op1, op2 to have the same exp and length of coefficient.\n\n    Done during addition.\n    '
                -1
                2
                1
                10
            [Disassembly]
                0       LOAD_FAST                       0: op1
                2       LOAD_ATTR                       0: exp
                4       LOAD_FAST                       1: op2
                6       LOAD_ATTR                       0: exp
                8       COMPARE_OP                      0 (<)
                10      POP_JUMP_IF_FALSE               11 (to 22)
                12      LOAD_FAST                       1: op2
                14      STORE_FAST                      3: tmp
                16      LOAD_FAST                       0: op1
                18      STORE_FAST                      4: other
                20      JUMP_FORWARD                    4 (to 30)
                22      LOAD_FAST                       0: op1
                24      STORE_FAST                      3: tmp
                26      LOAD_FAST                       1: op2
                28      STORE_FAST                      4: other
                30      LOAD_GLOBAL                     1: len
                32      LOAD_GLOBAL                     2: str
                34      LOAD_FAST                       3: tmp
                36      LOAD_ATTR                       3: int
                38      CALL_FUNCTION                   1
                40      CALL_FUNCTION                   1
                42      STORE_FAST                      5: tmp_len
                44      LOAD_GLOBAL                     1: len
                46      LOAD_GLOBAL                     2: str
                48      LOAD_FAST                       4: other
                50      LOAD_ATTR                       3: int
                52      CALL_FUNCTION                   1
                54      CALL_FUNCTION                   1
                56      STORE_FAST                      6: other_len
                58      LOAD_FAST                       3: tmp
                60      LOAD_ATTR                       0: exp
                62      LOAD_GLOBAL                     4: min
                64      LOAD_CONST                      1: -1
                66      LOAD_FAST                       5: tmp_len
                68      LOAD_FAST                       2: prec
                70      BINARY_SUBTRACT                 
                72      LOAD_CONST                      2: 2
                74      BINARY_SUBTRACT                 
                76      CALL_FUNCTION                   2
                78      BINARY_ADD                      
                80      STORE_FAST                      7: exp
                82      LOAD_FAST                       6: other_len
                84      LOAD_FAST                       4: other
                86      LOAD_ATTR                       0: exp
                88      BINARY_ADD                      
                90      LOAD_CONST                      3: 1
                92      BINARY_SUBTRACT                 
                94      LOAD_FAST                       7: exp
                96      COMPARE_OP                      0 (<)
                98      POP_JUMP_IF_FALSE               56 (to 112)
                100     LOAD_CONST                      3: 1
                102     LOAD_FAST                       4: other
                104     STORE_ATTR                      3: int
                106     LOAD_FAST                       7: exp
                108     LOAD_FAST                       4: other
                110     STORE_ATTR                      0: exp
                112     LOAD_FAST                       3: tmp
                114     DUP_TOP                         
                116     LOAD_ATTR                       3: int
                118     LOAD_CONST                      4: 10
                120     LOAD_FAST                       3: tmp
                122     LOAD_ATTR                       0: exp
                124     LOAD_FAST                       4: other
                126     LOAD_ATTR                       0: exp
                128     BINARY_SUBTRACT                 
                130     BINARY_POWER                    
                132     INPLACE_MULTIPLY                
                134     ROT_TWO                         
                136     STORE_ATTR                      3: int
                138     LOAD_FAST                       4: other
                140     LOAD_ATTR                       0: exp
                142     LOAD_FAST                       3: tmp
                144     STORE_ATTR                      0: exp
                146     LOAD_FAST                       0: op1
                148     LOAD_FAST                       1: op2
                150     BUILD_TUPLE                     2
                152     RETURN_VALUE                    
        '_normalize'
        [Code]
            File Name: _pydecimal.py
            Object Name: _decimal_lshift_exact
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'str'
                'abs'
                'len'
                'rstrip'
            [Var Names]
                'n'
                'e'
                'str_n'
                'val_n'
            [Free Vars]
            [Cell Vars]
            [Constants]
                " Given integers n and e, return n * 10**e if it's an integer, else None.\n\n    The computation is designed to avoid computing large powers of 10\n    unnecessarily.\n\n    >>> _decimal_lshift_exact(3, 4)\n    30000\n    >>> _decimal_lshift_exact(300, -999999999)  # returns None\n\n    "
                0
                10
                '0'
                None
            [Disassembly]
                0       LOAD_FAST                       0: n
                2       LOAD_CONST                      1: 0
                4       COMPARE_OP                      2 (==)
                6       POP_JUMP_IF_FALSE               6 (to 12)
                8       LOAD_CONST                      1: 0
                10      RETURN_VALUE                    
                12      LOAD_FAST                       1: e
                14      LOAD_CONST                      1: 0
                16      COMPARE_OP                      5 (>=)
                18      POP_JUMP_IF_FALSE               16 (to 32)
                20      LOAD_FAST                       0: n
                22      LOAD_CONST                      2: 10
                24      LOAD_FAST                       1: e
                26      BINARY_POWER                    
                28      BINARY_MULTIPLY                 
                30      RETURN_VALUE                    
                32      LOAD_GLOBAL                     0: str
                34      LOAD_GLOBAL                     1: abs
                36      LOAD_FAST                       0: n
                38      CALL_FUNCTION                   1
                40      CALL_FUNCTION                   1
                42      STORE_FAST                      2: str_n
                44      LOAD_GLOBAL                     2: len
                46      LOAD_FAST                       2: str_n
                48      CALL_FUNCTION                   1
                50      LOAD_GLOBAL                     2: len
                52      LOAD_FAST                       2: str_n
                54      LOAD_METHOD                     3: rstrip
                56      LOAD_CONST                      3: '0'
                58      CALL_METHOD                     1
                60      CALL_FUNCTION                   1
                62      BINARY_SUBTRACT                 
                64      STORE_FAST                      3: val_n
                66      LOAD_FAST                       3: val_n
                68      LOAD_FAST                       1: e
                70      UNARY_NEGATIVE                  
                72      COMPARE_OP                      0 (<)
                74      POP_JUMP_IF_FALSE               40 (to 80)
                76      LOAD_CONST                      4: None
                78      RETURN_VALUE                    
                80      LOAD_FAST                       0: n
                82      LOAD_CONST                      2: 10
                84      LOAD_FAST                       1: e
                86      UNARY_NEGATIVE                  
                88      BINARY_POWER                    
                90      BINARY_FLOOR_DIVIDE             
                92      RETURN_VALUE                    
        '_decimal_lshift_exact'
        [Code]
            File Name: _pydecimal.py
            Object Name: _sqrt_nearest
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ValueError'
            [Var Names]
                'n'
                'a'
                'b'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Closest integer to the square root of the positive integer n.  a is\n    an initial approximation to the square root.  Any positive integer\n    will do for a, but the closer a is to the square root of n the\n    faster convergence will be.\n\n    '
                0
                'Both arguments to _sqrt_nearest should be positive.'
                1
            [Disassembly]
                0       LOAD_FAST                       0: n
                2       LOAD_CONST                      1: 0
                4       COMPARE_OP                      1 (<=)
                6       POP_JUMP_IF_TRUE                8 (to 16)
                8       LOAD_FAST                       1: a
                10      LOAD_CONST                      1: 0
                12      COMPARE_OP                      1 (<=)
                14      POP_JUMP_IF_FALSE               12 (to 24)
                16      LOAD_GLOBAL                     0: ValueError
                18      LOAD_CONST                      2: 'Both arguments to _sqrt_nearest should be positive.'
                20      CALL_FUNCTION                   1
                22      RAISE_VARARGS                   1
                24      LOAD_CONST                      1: 0
                26      STORE_FAST                      2: b
                28      LOAD_FAST                       1: a
                30      LOAD_FAST                       2: b
                32      COMPARE_OP                      3 (!=)
                34      POP_JUMP_IF_FALSE               34 (to 68)
                36      LOAD_FAST                       1: a
                38      LOAD_FAST                       1: a
                40      LOAD_FAST                       0: n
                42      UNARY_NEGATIVE                  
                44      LOAD_FAST                       1: a
                46      BINARY_FLOOR_DIVIDE             
                48      BINARY_SUBTRACT                 
                50      LOAD_CONST                      3: 1
                52      BINARY_RSHIFT                   
                54      ROT_TWO                         
                56      STORE_FAST                      2: b
                58      STORE_FAST                      1: a
                60      LOAD_FAST                       1: a
                62      LOAD_FAST                       2: b
                64      COMPARE_OP                      3 (!=)
                66      POP_JUMP_IF_TRUE                18 (to 36)
                68      LOAD_FAST                       1: a
                70      RETURN_VALUE                    
        '_sqrt_nearest'
        [Code]
            File Name: _pydecimal.py
            Object Name: _rshift_nearest
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'x'
                'shift'
                'b'
                'q'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Given an integer x and a nonnegative integer shift, return closest\n    integer to x / 2**shift; use round-to-even in case of a tie.\n\n    '
                1
                2
            [Disassembly]
                0       LOAD_CONST                      1: 1
                2       LOAD_FAST                       1: shift
                4       BINARY_LSHIFT                   
                6       LOAD_FAST                       0: x
                8       LOAD_FAST                       1: shift
                10      BINARY_RSHIFT                   
                12      ROT_TWO                         
                14      STORE_FAST                      2: b
                16      STORE_FAST                      3: q
                18      LOAD_FAST                       3: q
                20      LOAD_CONST                      2: 2
                22      LOAD_FAST                       0: x
                24      LOAD_FAST                       2: b
                26      LOAD_CONST                      1: 1
                28      BINARY_SUBTRACT                 
                30      BINARY_AND                      
                32      BINARY_MULTIPLY                 
                34      LOAD_FAST                       3: q
                36      LOAD_CONST                      1: 1
                38      BINARY_AND                      
                40      BINARY_ADD                      
                42      LOAD_FAST                       2: b
                44      COMPARE_OP                      4 (>)
                46      BINARY_ADD                      
                48      RETURN_VALUE                    
        '_rshift_nearest'
        [Code]
            File Name: _pydecimal.py
            Object Name: _div_nearest
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'divmod'
            [Var Names]
                'a'
                'b'
                'q'
                'r'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Closest integer to a/b, a and b positive integers; rounds to even\n    in the case of a tie.\n\n    '
                2
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: divmod
                2       LOAD_FAST                       0: a
                4       LOAD_FAST                       1: b
                6       CALL_FUNCTION                   2
                8       UNPACK_SEQUENCE                 2
                10      STORE_FAST                      2: q
                12      STORE_FAST                      3: r
                14      LOAD_FAST                       2: q
                16      LOAD_CONST                      1: 2
                18      LOAD_FAST                       3: r
                20      BINARY_MULTIPLY                 
                22      LOAD_FAST                       2: q
                24      LOAD_CONST                      2: 1
                26      BINARY_AND                      
                28      BINARY_ADD                      
                30      LOAD_FAST                       1: b
                32      COMPARE_OP                      4 (>)
                34      BINARY_ADD                      
                36      RETURN_VALUE                    
        '_div_nearest'
        8
        [Code]
            File Name: _pydecimal.py
            Object Name: _ilog
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 9
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'abs'
                '_div_nearest'
                '_sqrt_nearest'
                '_rshift_nearest'
                'int'
                'len'
                'str'
                'range'
            [Var Names]
                'x'
                'M'
                'L'
                'y'
                'R'
                'T'
                'yshift'
                'w'
                'k'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Integer approximation to M*log(x/M), with absolute error boundable\n    in terms only of x/M.\n\n    Given positive integers x and M, return an integer approximation to\n    M * log(x/M).  For L = 8 and 0.1 <= x/M <= 10 the difference\n    between the approximation and the exact result is at most 22.  For\n    L = 8 and 1.0 <= x/M <= 10.0 the difference is at most 15.  In\n    both cases these are upper bounds on the error; it will usually be\n    much smaller.'
                0
                1
                -10
                3
                -1
            [Disassembly]
                0       LOAD_FAST                       0: x
                2       LOAD_FAST                       1: M
                4       BINARY_SUBTRACT                 
                6       STORE_FAST                      3: y
                8       LOAD_CONST                      1: 0
                10      STORE_FAST                      4: R
                12      LOAD_FAST                       4: R
                14      LOAD_FAST                       2: L
                16      COMPARE_OP                      1 (<=)
                18      POP_JUMP_IF_FALSE               20 (to 40)
                20      LOAD_GLOBAL                     0: abs
                22      LOAD_FAST                       3: y
                24      CALL_FUNCTION                   1
                26      LOAD_FAST                       2: L
                28      LOAD_FAST                       4: R
                30      BINARY_SUBTRACT                 
                32      BINARY_LSHIFT                   
                34      LOAD_FAST                       1: M
                36      COMPARE_OP                      5 (>=)
                38      POP_JUMP_IF_TRUE                34 (to 68)
                40      LOAD_FAST                       4: R
                42      LOAD_FAST                       2: L
                44      COMPARE_OP                      4 (>)
                46      POP_JUMP_IF_FALSE               87 (to 174)
                48      LOAD_GLOBAL                     0: abs
                50      LOAD_FAST                       3: y
                52      CALL_FUNCTION                   1
                54      LOAD_FAST                       4: R
                56      LOAD_FAST                       2: L
                58      BINARY_SUBTRACT                 
                60      BINARY_RSHIFT                   
                62      LOAD_FAST                       1: M
                64      COMPARE_OP                      5 (>=)
                66      POP_JUMP_IF_FALSE               87 (to 174)
                68      LOAD_GLOBAL                     1: _div_nearest
                70      LOAD_FAST                       1: M
                72      LOAD_FAST                       3: y
                74      BINARY_MULTIPLY                 
                76      LOAD_CONST                      2: 1
                78      BINARY_LSHIFT                   
                80      LOAD_FAST                       1: M
                82      LOAD_GLOBAL                     2: _sqrt_nearest
                84      LOAD_FAST                       1: M
                86      LOAD_FAST                       1: M
                88      LOAD_GLOBAL                     3: _rshift_nearest
                90      LOAD_FAST                       3: y
                92      LOAD_FAST                       4: R
                94      CALL_FUNCTION                   2
                96      BINARY_ADD                      
                98      BINARY_MULTIPLY                 
                100     LOAD_FAST                       1: M
                102     CALL_FUNCTION                   2
                104     BINARY_ADD                      
                106     CALL_FUNCTION                   2
                108     STORE_FAST                      3: y
                110     LOAD_FAST                       4: R
                112     LOAD_CONST                      2: 1
                114     INPLACE_ADD                     
                116     STORE_FAST                      4: R
                118     LOAD_FAST                       4: R
                120     LOAD_FAST                       2: L
                122     COMPARE_OP                      1 (<=)
                124     POP_JUMP_IF_FALSE               73 (to 146)
                126     LOAD_GLOBAL                     0: abs
                128     LOAD_FAST                       3: y
                130     CALL_FUNCTION                   1
                132     LOAD_FAST                       2: L
                134     LOAD_FAST                       4: R
                136     BINARY_SUBTRACT                 
                138     BINARY_LSHIFT                   
                140     LOAD_FAST                       1: M
                142     COMPARE_OP                      5 (>=)
                144     POP_JUMP_IF_TRUE                34 (to 68)
                146     LOAD_FAST                       4: R
                148     LOAD_FAST                       2: L
                150     COMPARE_OP                      4 (>)
                152     POP_JUMP_IF_FALSE               87 (to 174)
                154     LOAD_GLOBAL                     0: abs
                156     LOAD_FAST                       3: y
                158     CALL_FUNCTION                   1
                160     LOAD_FAST                       4: R
                162     LOAD_FAST                       2: L
                164     BINARY_SUBTRACT                 
                166     BINARY_RSHIFT                   
                168     LOAD_FAST                       1: M
                170     COMPARE_OP                      5 (>=)
                172     POP_JUMP_IF_TRUE                34 (to 68)
                174     LOAD_GLOBAL                     4: int
                176     LOAD_CONST                      3: -10
                178     LOAD_GLOBAL                     5: len
                180     LOAD_GLOBAL                     6: str
                182     LOAD_FAST                       1: M
                184     CALL_FUNCTION                   1
                186     CALL_FUNCTION                   1
                188     BINARY_MULTIPLY                 
                190     LOAD_CONST                      4: 3
                192     LOAD_FAST                       2: L
                194     BINARY_MULTIPLY                 
                196     BINARY_FLOOR_DIVIDE             
                198     CALL_FUNCTION                   1
                200     UNARY_NEGATIVE                  
                202     STORE_FAST                      5: T
                204     LOAD_GLOBAL                     3: _rshift_nearest
                206     LOAD_FAST                       3: y
                208     LOAD_FAST                       4: R
                210     CALL_FUNCTION                   2
                212     STORE_FAST                      6: yshift
                214     LOAD_GLOBAL                     1: _div_nearest
                216     LOAD_FAST                       1: M
                218     LOAD_FAST                       5: T
                220     CALL_FUNCTION                   2
                222     STORE_FAST                      7: w
                224     LOAD_GLOBAL                     7: range
                226     LOAD_FAST                       5: T
                228     LOAD_CONST                      2: 1
                230     BINARY_SUBTRACT                 
                232     LOAD_CONST                      1: 0
                234     LOAD_CONST                      5: -1
                236     CALL_FUNCTION                   3
                238     GET_ITER                        
                240     FOR_ITER                        14 (to 270)
                242     STORE_FAST                      8: k
                244     LOAD_GLOBAL                     1: _div_nearest
                246     LOAD_FAST                       1: M
                248     LOAD_FAST                       8: k
                250     CALL_FUNCTION                   2
                252     LOAD_GLOBAL                     1: _div_nearest
                254     LOAD_FAST                       6: yshift
                256     LOAD_FAST                       7: w
                258     BINARY_MULTIPLY                 
                260     LOAD_FAST                       1: M
                262     CALL_FUNCTION                   2
                264     BINARY_SUBTRACT                 
                266     STORE_FAST                      7: w
                268     JUMP_ABSOLUTE                   120 (to 240)
                270     LOAD_GLOBAL                     1: _div_nearest
                272     LOAD_FAST                       7: w
                274     LOAD_FAST                       3: y
                276     BINARY_MULTIPLY                 
                278     LOAD_FAST                       1: M
                280     CALL_FUNCTION                   2
                282     RETURN_VALUE                    
        '_ilog'
        [Code]
            File Name: _pydecimal.py
            Object Name: _dlog10
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 10
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'len'
                'str'
                '_div_nearest'
                '_ilog'
                '_log10_digits'
            [Var Names]
                'c'
                'e'
                'p'
                'l'
                'f'
                'M'
                'k'
                'log_d'
                'log_10'
                'log_tenpower'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Given integers c, e and p with c > 0, p >= 0, compute an integer\n    approximation to 10**p * log10(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1.'
                2
                1
                0
                10
                100
            [Disassembly]
                0       LOAD_FAST                       2: p
                2       LOAD_CONST                      1: 2
                4       INPLACE_ADD                     
                6       STORE_FAST                      2: p
                8       LOAD_GLOBAL                     0: len
                10      LOAD_GLOBAL                     1: str
                12      LOAD_FAST                       0: c
                14      CALL_FUNCTION                   1
                16      CALL_FUNCTION                   1
                18      STORE_FAST                      3: l
                20      LOAD_FAST                       1: e
                22      LOAD_FAST                       3: l
                24      BINARY_ADD                      
                26      LOAD_FAST                       1: e
                28      LOAD_FAST                       3: l
                30      BINARY_ADD                      
                32      LOAD_CONST                      2: 1
                34      COMPARE_OP                      5 (>=)
                36      BINARY_SUBTRACT                 
                38      STORE_FAST                      4: f
                40      LOAD_FAST                       2: p
                42      LOAD_CONST                      3: 0
                44      COMPARE_OP                      4 (>)
                46      POP_JUMP_IF_FALSE               74 (to 148)
                48      LOAD_CONST                      4: 10
                50      LOAD_FAST                       2: p
                52      BINARY_POWER                    
                54      STORE_FAST                      5: M
                56      LOAD_FAST                       1: e
                58      LOAD_FAST                       2: p
                60      BINARY_ADD                      
                62      LOAD_FAST                       4: f
                64      BINARY_SUBTRACT                 
                66      STORE_FAST                      6: k
                68      LOAD_FAST                       6: k
                70      LOAD_CONST                      3: 0
                72      COMPARE_OP                      5 (>=)
                74      POP_JUMP_IF_FALSE               45 (to 90)
                76      LOAD_FAST                       0: c
                78      LOAD_CONST                      4: 10
                80      LOAD_FAST                       6: k
                82      BINARY_POWER                    
                84      INPLACE_MULTIPLY                
                86      STORE_FAST                      0: c
                88      JUMP_FORWARD                    8 (to 106)
                90      LOAD_GLOBAL                     2: _div_nearest
                92      LOAD_FAST                       0: c
                94      LOAD_CONST                      4: 10
                96      LOAD_FAST                       6: k
                98      UNARY_NEGATIVE                  
                100     BINARY_POWER                    
                102     CALL_FUNCTION                   2
                104     STORE_FAST                      0: c
                106     LOAD_GLOBAL                     3: _ilog
                108     LOAD_FAST                       0: c
                110     LOAD_FAST                       5: M
                112     CALL_FUNCTION                   2
                114     STORE_FAST                      7: log_d
                116     LOAD_GLOBAL                     4: _log10_digits
                118     LOAD_FAST                       2: p
                120     CALL_FUNCTION                   1
                122     STORE_FAST                      8: log_10
                124     LOAD_GLOBAL                     2: _div_nearest
                126     LOAD_FAST                       7: log_d
                128     LOAD_FAST                       5: M
                130     BINARY_MULTIPLY                 
                132     LOAD_FAST                       8: log_10
                134     CALL_FUNCTION                   2
                136     STORE_FAST                      7: log_d
                138     LOAD_FAST                       4: f
                140     LOAD_FAST                       5: M
                142     BINARY_MULTIPLY                 
                144     STORE_FAST                      9: log_tenpower
                146     JUMP_FORWARD                    10 (to 168)
                148     LOAD_CONST                      3: 0
                150     STORE_FAST                      7: log_d
                152     LOAD_GLOBAL                     2: _div_nearest
                154     LOAD_FAST                       4: f
                156     LOAD_CONST                      4: 10
                158     LOAD_FAST                       2: p
                160     UNARY_NEGATIVE                  
                162     BINARY_POWER                    
                164     CALL_FUNCTION                   2
                166     STORE_FAST                      9: log_tenpower
                168     LOAD_GLOBAL                     2: _div_nearest
                170     LOAD_FAST                       9: log_tenpower
                172     LOAD_FAST                       7: log_d
                174     BINARY_ADD                      
                176     LOAD_CONST                      5: 100
                178     CALL_FUNCTION                   2
                180     RETURN_VALUE                    
        '_dlog10'
        [Code]
            File Name: _pydecimal.py
            Object Name: _dlog
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 9
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'len'
                'str'
                '_div_nearest'
                '_ilog'
                'abs'
                '_log10_digits'
            [Var Names]
                'c'
                'e'
                'p'
                'l'
                'f'
                'k'
                'log_d'
                'extra'
                'f_log_ten'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Given integers c, e and p with c > 0, compute an integer\n    approximation to 10**p * log(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1.'
                2
                1
                0
                10
                100
            [Disassembly]
                0       LOAD_FAST                       2: p
                2       LOAD_CONST                      1: 2
                4       INPLACE_ADD                     
                6       STORE_FAST                      2: p
                8       LOAD_GLOBAL                     0: len
                10      LOAD_GLOBAL                     1: str
                12      LOAD_FAST                       0: c
                14      CALL_FUNCTION                   1
                16      CALL_FUNCTION                   1
                18      STORE_FAST                      3: l
                20      LOAD_FAST                       1: e
                22      LOAD_FAST                       3: l
                24      BINARY_ADD                      
                26      LOAD_FAST                       1: e
                28      LOAD_FAST                       3: l
                30      BINARY_ADD                      
                32      LOAD_CONST                      2: 1
                34      COMPARE_OP                      5 (>=)
                36      BINARY_SUBTRACT                 
                38      STORE_FAST                      4: f
                40      LOAD_FAST                       2: p
                42      LOAD_CONST                      3: 0
                44      COMPARE_OP                      4 (>)
                46      POP_JUMP_IF_FALSE               57 (to 114)
                48      LOAD_FAST                       1: e
                50      LOAD_FAST                       2: p
                52      BINARY_ADD                      
                54      LOAD_FAST                       4: f
                56      BINARY_SUBTRACT                 
                58      STORE_FAST                      5: k
                60      LOAD_FAST                       5: k
                62      LOAD_CONST                      3: 0
                64      COMPARE_OP                      5 (>=)
                66      POP_JUMP_IF_FALSE               41 (to 82)
                68      LOAD_FAST                       0: c
                70      LOAD_CONST                      4: 10
                72      LOAD_FAST                       5: k
                74      BINARY_POWER                    
                76      INPLACE_MULTIPLY                
                78      STORE_FAST                      0: c
                80      JUMP_FORWARD                    8 (to 98)
                82      LOAD_GLOBAL                     2: _div_nearest
                84      LOAD_FAST                       0: c
                86      LOAD_CONST                      4: 10
                88      LOAD_FAST                       5: k
                90      UNARY_NEGATIVE                  
                92      BINARY_POWER                    
                94      CALL_FUNCTION                   2
                96      STORE_FAST                      0: c
                98      LOAD_GLOBAL                     3: _ilog
                100     LOAD_FAST                       0: c
                102     LOAD_CONST                      4: 10
                104     LOAD_FAST                       2: p
                106     BINARY_POWER                    
                108     CALL_FUNCTION                   2
                110     STORE_FAST                      6: log_d
                112     JUMP_FORWARD                    2 (to 118)
                114     LOAD_CONST                      3: 0
                116     STORE_FAST                      6: log_d
                118     LOAD_FAST                       4: f
                120     POP_JUMP_IF_FALSE               94 (to 188)
                122     LOAD_GLOBAL                     0: len
                124     LOAD_GLOBAL                     1: str
                126     LOAD_GLOBAL                     4: abs
                128     LOAD_FAST                       4: f
                130     CALL_FUNCTION                   1
                132     CALL_FUNCTION                   1
                134     CALL_FUNCTION                   1
                136     LOAD_CONST                      2: 1
                138     BINARY_SUBTRACT                 
                140     STORE_FAST                      7: extra
                142     LOAD_FAST                       2: p
                144     LOAD_FAST                       7: extra
                146     BINARY_ADD                      
                148     LOAD_CONST                      3: 0
                150     COMPARE_OP                      5 (>=)
                152     POP_JUMP_IF_FALSE               91 (to 182)
                154     LOAD_GLOBAL                     2: _div_nearest
                156     LOAD_FAST                       4: f
                158     LOAD_GLOBAL                     5: _log10_digits
                160     LOAD_FAST                       2: p
                162     LOAD_FAST                       7: extra
                164     BINARY_ADD                      
                166     CALL_FUNCTION                   1
                168     BINARY_MULTIPLY                 
                170     LOAD_CONST                      4: 10
                172     LOAD_FAST                       7: extra
                174     BINARY_POWER                    
                176     CALL_FUNCTION                   2
                178     STORE_FAST                      8: f_log_ten
                180     JUMP_FORWARD                    5 (to 192)
                182     LOAD_CONST                      3: 0
                184     STORE_FAST                      8: f_log_ten
                186     JUMP_FORWARD                    2 (to 192)
                188     LOAD_CONST                      3: 0
                190     STORE_FAST                      8: f_log_ten
                192     LOAD_GLOBAL                     2: _div_nearest
                194     LOAD_FAST                       8: f_log_ten
                196     LOAD_FAST                       6: log_d
                198     BINARY_ADD                      
                200     LOAD_CONST                      5: 100
                202     CALL_FUNCTION                   2
                204     RETURN_VALUE                    
        '_dlog'
        [Code]
            File Name: _pydecimal.py
            Object Name: _Log10Memoize
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'getdigits'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_Log10Memoize'
                'Class to compute, store, and allow retrieval of, digits of the\n    constant log(10) = 2.302585....  This constant is needed by\n    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__.'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'digits'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '23025850929940456840179914546843642076011014886'
                    [Disassembly]
                        0       LOAD_CONST                      1: '23025850929940456840179914546843642076011014886'
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: digits
                        6       LOAD_CONST                      0: None
                        8       RETURN_VALUE                    
                '_Log10Memoize.__init__'
                [Code]
                    File Name: _pydecimal.py
                    Object Name: getdigits
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ValueError'
                        'len'
                        'digits'
                        'str'
                        '_div_nearest'
                        '_ilog'
                        'rstrip'
                        'int'
                    [Var Names]
                        'self'
                        'p'
                        'extra'
                        'M'
                        'digits'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Given an integer p >= 0, return floor(10**p)*log(10).\n\n        For example, self.getdigits(3) returns 2302.\n        '
                        0
                        'p should be nonnegative'
                        3
                        True
                        10
                        2
                        100
                        None
                        '0'
                        -1
                        1
                    [Disassembly]
                        0       LOAD_FAST                       1: p
                        2       LOAD_CONST                      1: 0
                        4       COMPARE_OP                      0 (<)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: ValueError
                        10      LOAD_CONST                      2: 'p should be nonnegative'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_FAST                       1: p
                        18      LOAD_GLOBAL                     1: len
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: digits
                        24      CALL_FUNCTION                   1
                        26      COMPARE_OP                      5 (>=)
                        28      POP_JUMP_IF_FALSE               65 (to 130)
                        30      LOAD_CONST                      3: 3
                        32      STORE_FAST                      2: extra
                        34      NOP                             
                        36      LOAD_CONST                      5: 10
                        38      LOAD_FAST                       1: p
                        40      LOAD_FAST                       2: extra
                        42      BINARY_ADD                      
                        44      LOAD_CONST                      6: 2
                        46      BINARY_ADD                      
                        48      BINARY_POWER                    
                        50      STORE_FAST                      3: M
                        52      LOAD_GLOBAL                     3: str
                        54      LOAD_GLOBAL                     4: _div_nearest
                        56      LOAD_GLOBAL                     5: _ilog
                        58      LOAD_CONST                      5: 10
                        60      LOAD_FAST                       3: M
                        62      BINARY_MULTIPLY                 
                        64      LOAD_FAST                       3: M
                        66      CALL_FUNCTION                   2
                        68      LOAD_CONST                      7: 100
                        70      CALL_FUNCTION                   2
                        72      CALL_FUNCTION                   1
                        74      STORE_FAST                      4: digits
                        76      LOAD_FAST                       4: digits
                        78      LOAD_FAST                       2: extra
                        80      UNARY_NEGATIVE                  
                        82      LOAD_CONST                      8: None
                        84      BUILD_SLICE                     2
                        86      BINARY_SUBSCR                   
                        88      LOAD_CONST                      9: '0'
                        90      LOAD_FAST                       2: extra
                        92      BINARY_MULTIPLY                 
                        94      COMPARE_OP                      3 (!=)
                        96      POP_JUMP_IF_FALSE               50 (to 100)
                        98      JUMP_FORWARD                    5 (to 110)
                        100     LOAD_FAST                       2: extra
                        102     LOAD_CONST                      3: 3
                        104     INPLACE_ADD                     
                        106     STORE_FAST                      2: extra
                        108     JUMP_ABSOLUTE                   18 (to 36)
                        110     LOAD_FAST                       4: digits
                        112     LOAD_METHOD                     6: rstrip
                        114     LOAD_CONST                      9: '0'
                        116     CALL_METHOD                     1
                        118     LOAD_CONST                      8: None
                        120     LOAD_CONST                      10: -1
                        122     BUILD_SLICE                     2
                        124     BINARY_SUBSCR                   
                        126     LOAD_FAST                       0: self
                        128     STORE_ATTR                      2: digits
                        130     LOAD_GLOBAL                     7: int
                        132     LOAD_FAST                       0: self
                        134     LOAD_ATTR                       2: digits
                        136     LOAD_CONST                      8: None
                        138     LOAD_FAST                       1: p
                        140     LOAD_CONST                      11: 1
                        142     BINARY_ADD                      
                        144     BUILD_SLICE                     2
                        146     BINARY_SUBSCR                   
                        148     CALL_FUNCTION                   1
                        150     RETURN_VALUE                    
                '_Log10Memoize.getdigits'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_Log10Memoize'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Class to compute, store, and allow retrieval of, digits of the\n    constant log(10) = 2.302585....  This constant is needed by\n    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: '_Log10Memoize.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> getdigits
                22      LOAD_CONST                      5: '_Log10Memoize.getdigits'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: getdigits
                28      LOAD_CONST                      6: None
                30      RETURN_VALUE                    
        '_Log10Memoize'
        [Code]
            File Name: _pydecimal.py
            Object Name: _iexp
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 9
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_nbits'
                'int'
                'len'
                'str'
                '_div_nearest'
                'range'
            [Var Names]
                'x'
                'M'
                'L'
                'R'
                'T'
                'y'
                'Mshift'
                'i'
                'k'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Given integers x and M, M > 0, such that x/M is small in absolute\n    value, compute an integer approximation to M*exp(x/M).  For 0 <=\n    x/M <= 2.4, the absolute error in the result is bounded by 60 (and\n    is usually much smaller).'
                -10
                3
                1
                0
                -1
                2
            [Disassembly]
                0       LOAD_GLOBAL                     0: _nbits
                2       LOAD_FAST                       0: x
                4       LOAD_FAST                       2: L
                6       BINARY_LSHIFT                   
                8       LOAD_FAST                       1: M
                10      BINARY_FLOOR_DIVIDE             
                12      CALL_FUNCTION                   1
                14      STORE_FAST                      3: R
                16      LOAD_GLOBAL                     1: int
                18      LOAD_CONST                      1: -10
                20      LOAD_GLOBAL                     2: len
                22      LOAD_GLOBAL                     3: str
                24      LOAD_FAST                       1: M
                26      CALL_FUNCTION                   1
                28      CALL_FUNCTION                   1
                30      BINARY_MULTIPLY                 
                32      LOAD_CONST                      2: 3
                34      LOAD_FAST                       2: L
                36      BINARY_MULTIPLY                 
                38      BINARY_FLOOR_DIVIDE             
                40      CALL_FUNCTION                   1
                42      UNARY_NEGATIVE                  
                44      STORE_FAST                      4: T
                46      LOAD_GLOBAL                     4: _div_nearest
                48      LOAD_FAST                       0: x
                50      LOAD_FAST                       4: T
                52      CALL_FUNCTION                   2
                54      STORE_FAST                      5: y
                56      LOAD_FAST                       1: M
                58      LOAD_FAST                       3: R
                60      BINARY_LSHIFT                   
                62      STORE_FAST                      6: Mshift
                64      LOAD_GLOBAL                     5: range
                66      LOAD_FAST                       4: T
                68      LOAD_CONST                      3: 1
                70      BINARY_SUBTRACT                 
                72      LOAD_CONST                      4: 0
                74      LOAD_CONST                      5: -1
                76      CALL_FUNCTION                   3
                78      GET_ITER                        
                80      FOR_ITER                        13 (to 108)
                82      STORE_FAST                      7: i
                84      LOAD_GLOBAL                     4: _div_nearest
                86      LOAD_FAST                       0: x
                88      LOAD_FAST                       6: Mshift
                90      LOAD_FAST                       5: y
                92      BINARY_ADD                      
                94      BINARY_MULTIPLY                 
                96      LOAD_FAST                       6: Mshift
                98      LOAD_FAST                       7: i
                100     BINARY_MULTIPLY                 
                102     CALL_FUNCTION                   2
                104     STORE_FAST                      5: y
                106     JUMP_ABSOLUTE                   40 (to 80)
                108     LOAD_GLOBAL                     5: range
                110     LOAD_FAST                       3: R
                112     LOAD_CONST                      3: 1
                114     BINARY_SUBTRACT                 
                116     LOAD_CONST                      5: -1
                118     LOAD_CONST                      5: -1
                120     CALL_FUNCTION                   3
                122     GET_ITER                        
                124     FOR_ITER                        17 (to 160)
                126     STORE_FAST                      8: k
                128     LOAD_FAST                       1: M
                130     LOAD_FAST                       8: k
                132     LOAD_CONST                      6: 2
                134     BINARY_ADD                      
                136     BINARY_LSHIFT                   
                138     STORE_FAST                      6: Mshift
                140     LOAD_GLOBAL                     4: _div_nearest
                142     LOAD_FAST                       5: y
                144     LOAD_FAST                       5: y
                146     LOAD_FAST                       6: Mshift
                148     BINARY_ADD                      
                150     BINARY_MULTIPLY                 
                152     LOAD_FAST                       6: Mshift
                154     CALL_FUNCTION                   2
                156     STORE_FAST                      5: y
                158     JUMP_ABSOLUTE                   62 (to 124)
                160     LOAD_FAST                       1: M
                162     LOAD_FAST                       5: y
                164     BINARY_ADD                      
                166     RETURN_VALUE                    
        '_iexp'
        [Code]
            File Name: _pydecimal.py
            Object Name: _dexp
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 9
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'max'
                'len'
                'str'
                'divmod'
                '_log10_digits'
                '_div_nearest'
                '_iexp'
            [Var Names]
                'c'
                'e'
                'p'
                'extra'
                'q'
                'shift'
                'cshift'
                'quot'
                'rem'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Compute an approximation to exp(c*10**e), with p decimal places of\n    precision.\n\n    Returns integers d, f such that:\n\n      10**(p-1) <= d <= 10**p, and\n      (d-1)*10**f < exp(c*10**e) < (d+1)*10**f\n\n    In other words, d*10**f is an approximation to exp(c*10**e) with p\n    digits of precision, and with an error in d of at most 1.  This is\n    almost, but not quite, the same as the error being < 1ulp: when d\n    = 10**(p-1) the error could be up to 10 ulp.'
                2
                0
                1
                10
                1000
                3
            [Disassembly]
                0       LOAD_FAST                       2: p
                2       LOAD_CONST                      1: 2
                4       INPLACE_ADD                     
                6       STORE_FAST                      2: p
                8       LOAD_GLOBAL                     0: max
                10      LOAD_CONST                      2: 0
                12      LOAD_FAST                       1: e
                14      LOAD_GLOBAL                     1: len
                16      LOAD_GLOBAL                     2: str
                18      LOAD_FAST                       0: c
                20      CALL_FUNCTION                   1
                22      CALL_FUNCTION                   1
                24      BINARY_ADD                      
                26      LOAD_CONST                      3: 1
                28      BINARY_SUBTRACT                 
                30      CALL_FUNCTION                   2
                32      STORE_FAST                      3: extra
                34      LOAD_FAST                       2: p
                36      LOAD_FAST                       3: extra
                38      BINARY_ADD                      
                40      STORE_FAST                      4: q
                42      LOAD_FAST                       1: e
                44      LOAD_FAST                       4: q
                46      BINARY_ADD                      
                48      STORE_FAST                      5: shift
                50      LOAD_FAST                       5: shift
                52      LOAD_CONST                      2: 0
                54      COMPARE_OP                      5 (>=)
                56      POP_JUMP_IF_FALSE               36 (to 72)
                58      LOAD_FAST                       0: c
                60      LOAD_CONST                      4: 10
                62      LOAD_FAST                       5: shift
                64      BINARY_POWER                    
                66      BINARY_MULTIPLY                 
                68      STORE_FAST                      6: cshift
                70      JUMP_FORWARD                    7 (to 86)
                72      LOAD_FAST                       0: c
                74      LOAD_CONST                      4: 10
                76      LOAD_FAST                       5: shift
                78      UNARY_NEGATIVE                  
                80      BINARY_POWER                    
                82      BINARY_FLOOR_DIVIDE             
                84      STORE_FAST                      6: cshift
                86      LOAD_GLOBAL                     3: divmod
                88      LOAD_FAST                       6: cshift
                90      LOAD_GLOBAL                     4: _log10_digits
                92      LOAD_FAST                       4: q
                94      CALL_FUNCTION                   1
                96      CALL_FUNCTION                   2
                98      UNPACK_SEQUENCE                 2
                100     STORE_FAST                      7: quot
                102     STORE_FAST                      8: rem
                104     LOAD_GLOBAL                     5: _div_nearest
                106     LOAD_FAST                       8: rem
                108     LOAD_CONST                      4: 10
                110     LOAD_FAST                       3: extra
                112     BINARY_POWER                    
                114     CALL_FUNCTION                   2
                116     STORE_FAST                      8: rem
                118     LOAD_GLOBAL                     5: _div_nearest
                120     LOAD_GLOBAL                     6: _iexp
                122     LOAD_FAST                       8: rem
                124     LOAD_CONST                      4: 10
                126     LOAD_FAST                       2: p
                128     BINARY_POWER                    
                130     CALL_FUNCTION                   2
                132     LOAD_CONST                      5: 1000
                134     CALL_FUNCTION                   2
                136     LOAD_FAST                       7: quot
                138     LOAD_FAST                       2: p
                140     BINARY_SUBTRACT                 
                142     LOAD_CONST                      6: 3
                144     BINARY_ADD                      
                146     BUILD_TUPLE                     2
                148     RETURN_VALUE                    
        '_dexp'
        [Code]
            File Name: _pydecimal.py
            Object Name: _dpower
            Arg Count: 5
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 11
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'len'
                'str'
                'abs'
                '_dlog'
                '_div_nearest'
                '_dexp'
            [Var Names]
                'xc'
                'xe'
                'yc'
                'ye'
                'p'
                'b'
                'lxc'
                'shift'
                'pc'
                'coeff'
                'exp'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Given integers xc, xe, yc and ye representing Decimals x = xc*10**xe and\n    y = yc*10**ye, compute x**y.  Returns a pair of integers (c, e) such that:\n\n      10**(p-1) <= c <= 10**p, and\n      (c-1)*10**e < x**y < (c+1)*10**e\n\n    in other words, c*10**e is an approximation to x**y with p digits\n    of precision, and with an error in c of at most 1.  (This is\n    almost, but not quite, the same as the error being < 1ulp: when c\n    == 10**(p-1) we can only guarantee error < 10ulp.)\n\n    We assume that: x is positive and not equal to 1, and y is nonzero.\n    '
                1
                0
                10
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_GLOBAL                     1: str
                4       LOAD_GLOBAL                     2: abs
                6       LOAD_FAST                       2: yc
                8       CALL_FUNCTION                   1
                10      CALL_FUNCTION                   1
                12      CALL_FUNCTION                   1
                14      LOAD_FAST                       3: ye
                16      BINARY_ADD                      
                18      STORE_FAST                      5: b
                20      LOAD_GLOBAL                     3: _dlog
                22      LOAD_FAST                       0: xc
                24      LOAD_FAST                       1: xe
                26      LOAD_FAST                       4: p
                28      LOAD_FAST                       5: b
                30      BINARY_ADD                      
                32      LOAD_CONST                      1: 1
                34      BINARY_ADD                      
                36      CALL_FUNCTION                   3
                38      STORE_FAST                      6: lxc
                40      LOAD_FAST                       3: ye
                42      LOAD_FAST                       5: b
                44      BINARY_SUBTRACT                 
                46      STORE_FAST                      7: shift
                48      LOAD_FAST                       7: shift
                50      LOAD_CONST                      2: 0
                52      COMPARE_OP                      5 (>=)
                54      POP_JUMP_IF_FALSE               37 (to 74)
                56      LOAD_FAST                       6: lxc
                58      LOAD_FAST                       2: yc
                60      BINARY_MULTIPLY                 
                62      LOAD_CONST                      3: 10
                64      LOAD_FAST                       7: shift
                66      BINARY_POWER                    
                68      BINARY_MULTIPLY                 
                70      STORE_FAST                      8: pc
                72      JUMP_FORWARD                    10 (to 94)
                74      LOAD_GLOBAL                     4: _div_nearest
                76      LOAD_FAST                       6: lxc
                78      LOAD_FAST                       2: yc
                80      BINARY_MULTIPLY                 
                82      LOAD_CONST                      3: 10
                84      LOAD_FAST                       7: shift
                86      UNARY_NEGATIVE                  
                88      BINARY_POWER                    
                90      CALL_FUNCTION                   2
                92      STORE_FAST                      8: pc
                94      LOAD_FAST                       8: pc
                96      LOAD_CONST                      2: 0
                98      COMPARE_OP                      2 (==)
                100     POP_JUMP_IF_FALSE               96 (to 192)
                102     LOAD_GLOBAL                     0: len
                104     LOAD_GLOBAL                     1: str
                106     LOAD_FAST                       0: xc
                108     CALL_FUNCTION                   1
                110     CALL_FUNCTION                   1
                112     LOAD_FAST                       1: xe
                114     BINARY_ADD                      
                116     LOAD_CONST                      1: 1
                118     COMPARE_OP                      5 (>=)
                120     LOAD_FAST                       2: yc
                122     LOAD_CONST                      2: 0
                124     COMPARE_OP                      4 (>)
                126     COMPARE_OP                      2 (==)
                128     POP_JUMP_IF_FALSE               82 (to 164)
                130     LOAD_CONST                      3: 10
                132     LOAD_FAST                       4: p
                134     LOAD_CONST                      1: 1
                136     BINARY_SUBTRACT                 
                138     BINARY_POWER                    
                140     LOAD_CONST                      1: 1
                142     BINARY_ADD                      
                144     LOAD_CONST                      1: 1
                146     LOAD_FAST                       4: p
                148     BINARY_SUBTRACT                 
                150     ROT_TWO                         
                152     STORE_FAST                      9: coeff
                154     STORE_FAST                      10: exp
                156     LOAD_FAST                       9: coeff
                158     LOAD_FAST                       10: exp
                160     BUILD_TUPLE                     2
                162     RETURN_VALUE                    
                164     LOAD_CONST                      3: 10
                166     LOAD_FAST                       4: p
                168     BINARY_POWER                    
                170     LOAD_CONST                      1: 1
                172     BINARY_SUBTRACT                 
                174     LOAD_FAST                       4: p
                176     UNARY_NEGATIVE                  
                178     ROT_TWO                         
                180     STORE_FAST                      9: coeff
                182     STORE_FAST                      10: exp
                184     LOAD_FAST                       9: coeff
                186     LOAD_FAST                       10: exp
                188     BUILD_TUPLE                     2
                190     RETURN_VALUE                    
                192     LOAD_GLOBAL                     5: _dexp
                194     LOAD_FAST                       8: pc
                196     LOAD_FAST                       4: p
                198     LOAD_CONST                      1: 1
                200     BINARY_ADD                      
                202     UNARY_NEGATIVE                  
                204     LOAD_FAST                       4: p
                206     LOAD_CONST                      1: 1
                208     BINARY_ADD                      
                210     CALL_FUNCTION                   3
                212     UNPACK_SEQUENCE                 2
                214     STORE_FAST                      9: coeff
                216     STORE_FAST                      10: exp
                218     LOAD_GLOBAL                     4: _div_nearest
                220     LOAD_FAST                       9: coeff
                222     LOAD_CONST                      3: 10
                224     CALL_FUNCTION                   2
                226     STORE_FAST                      9: coeff
                228     LOAD_FAST                       10: exp
                230     LOAD_CONST                      1: 1
                232     INPLACE_ADD                     
                234     STORE_FAST                      10: exp
                236     LOAD_FAST                       9: coeff
                238     LOAD_FAST                       10: exp
                240     BUILD_TUPLE                     2
                242     RETURN_VALUE                    
        '_dpower'
        100
        70
        53
        40
        31
        23
        16
        10
        5
        (
            '1'
            '2'
            '3'
            '4'
            '5'
            '6'
            '7'
            '8'
            '9'
        )
        [Code]
            File Name: _pydecimal.py
            Object Name: _log10_lb
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ValueError'
                'str'
                'len'
            [Var Names]
                'c'
                'correction'
                'str_c'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Compute a lower bound for 100*log10(c) for a positive integer c.'
                0
                'The argument to _log10_lb should be nonnegative.'
                100
            [Disassembly]
                0       LOAD_FAST                       0: c
                2       LOAD_CONST                      1: 0
                4       COMPARE_OP                      1 (<=)
                6       POP_JUMP_IF_FALSE               8 (to 16)
                8       LOAD_GLOBAL                     0: ValueError
                10      LOAD_CONST                      2: 'The argument to _log10_lb should be nonnegative.'
                12      CALL_FUNCTION                   1
                14      RAISE_VARARGS                   1
                16      LOAD_GLOBAL                     1: str
                18      LOAD_FAST                       0: c
                20      CALL_FUNCTION                   1
                22      STORE_FAST                      2: str_c
                24      LOAD_CONST                      3: 100
                26      LOAD_GLOBAL                     2: len
                28      LOAD_FAST                       2: str_c
                30      CALL_FUNCTION                   1
                32      BINARY_MULTIPLY                 
                34      LOAD_FAST                       1: correction
                36      LOAD_FAST                       2: str_c
                38      LOAD_CONST                      1: 0
                40      BINARY_SUBSCR                   
                42      BINARY_SUBSCR                   
                44      BINARY_SUBTRACT                 
                46      RETURN_VALUE                    
        '_log10_lb'
        [Code]
            File Name: _pydecimal.py
            Object Name: _convert_other
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'Decimal'
                'int'
                'float'
                'from_float'
                'TypeError'
                'NotImplemented'
            [Var Names]
                'other'
                'raiseit'
                'allow_float'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Convert other to Decimal.\n\n    Verifies that it's ok to use in an implicit construction.\n    If allow_float is true, allow conversion from float;  this\n    is used in the comparison methods (__eq__ and friends).\n\n    "
                'Unable to convert %s to Decimal'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: other
                4       LOAD_GLOBAL                     1: Decimal
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               7 (to 14)
                10      LOAD_FAST                       0: other
                12      RETURN_VALUE                    
                14      LOAD_GLOBAL                     0: isinstance
                16      LOAD_FAST                       0: other
                18      LOAD_GLOBAL                     2: int
                20      CALL_FUNCTION                   2
                22      POP_JUMP_IF_FALSE               16 (to 32)
                24      LOAD_GLOBAL                     1: Decimal
                26      LOAD_FAST                       0: other
                28      CALL_FUNCTION                   1
                30      RETURN_VALUE                    
                32      LOAD_FAST                       2: allow_float
                34      POP_JUMP_IF_FALSE               28 (to 56)
                36      LOAD_GLOBAL                     0: isinstance
                38      LOAD_FAST                       0: other
                40      LOAD_GLOBAL                     3: float
                42      CALL_FUNCTION                   2
                44      POP_JUMP_IF_FALSE               28 (to 56)
                46      LOAD_GLOBAL                     1: Decimal
                48      LOAD_METHOD                     4: from_float
                50      LOAD_FAST                       0: other
                52      CALL_METHOD                     1
                54      RETURN_VALUE                    
                56      LOAD_FAST                       1: raiseit
                58      POP_JUMP_IF_FALSE               36 (to 72)
                60      LOAD_GLOBAL                     5: TypeError
                62      LOAD_CONST                      1: 'Unable to convert %s to Decimal'
                64      LOAD_FAST                       0: other
                66      BINARY_MODULO                   
                68      CALL_FUNCTION                   1
                70      RAISE_VARARGS                   1
                72      LOAD_GLOBAL                     6: NotImplemented
                74      RETURN_VALUE                    
        '_convert_other'
        [Code]
            File Name: _pydecimal.py
            Object Name: _convert_for_comparison
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'Decimal'
                '_numbers'
                'Rational'
                '_is_special'
                '_dec_from_triple'
                '_sign'
                'str'
                'int'
                '_int'
                'denominator'
                '_exp'
                'numerator'
                'Complex'
                'imag'
                'real'
                'float'
                'getcontext'
                'flags'
                'FloatOperation'
                '_raise_error'
                'from_float'
                'NotImplemented'
            [Var Names]
                'self'
                'other'
                'equality_op'
                'context'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Given a Decimal instance self and a Python object other, return\n    a pair (s, o) of Decimal instances such that "s op o" is\n    equivalent to "self op other" for any of the 6 comparison\n    operators "op".\n\n    '
                0
                1
                'strict semantics for mixing floats and Decimals are enabled'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       1: other
                4       LOAD_GLOBAL                     1: Decimal
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               9 (to 18)
                10      LOAD_FAST                       0: self
                12      LOAD_FAST                       1: other
                14      BUILD_TUPLE                     2
                16      RETURN_VALUE                    
                18      LOAD_GLOBAL                     0: isinstance
                20      LOAD_FAST                       1: other
                22      LOAD_GLOBAL                     2: _numbers
                24      LOAD_ATTR                       3: Rational
                26      CALL_FUNCTION                   2
                28      POP_JUMP_IF_FALSE               41 (to 82)
                30      LOAD_FAST                       0: self
                32      LOAD_ATTR                       4: _is_special
                34      POP_JUMP_IF_TRUE                34 (to 68)
                36      LOAD_GLOBAL                     5: _dec_from_triple
                38      LOAD_FAST                       0: self
                40      LOAD_ATTR                       6: _sign
                42      LOAD_GLOBAL                     7: str
                44      LOAD_GLOBAL                     8: int
                46      LOAD_FAST                       0: self
                48      LOAD_ATTR                       9: _int
                50      CALL_FUNCTION                   1
                52      LOAD_FAST                       1: other
                54      LOAD_ATTR                       10: denominator
                56      BINARY_MULTIPLY                 
                58      CALL_FUNCTION                   1
                60      LOAD_FAST                       0: self
                62      LOAD_ATTR                       11: _exp
                64      CALL_FUNCTION                   3
                66      STORE_FAST                      0: self
                68      LOAD_FAST                       0: self
                70      LOAD_GLOBAL                     1: Decimal
                72      LOAD_FAST                       1: other
                74      LOAD_ATTR                       12: numerator
                76      CALL_FUNCTION                   1
                78      BUILD_TUPLE                     2
                80      RETURN_VALUE                    
                82      LOAD_FAST                       2: equality_op
                84      POP_JUMP_IF_FALSE               57 (to 114)
                86      LOAD_GLOBAL                     0: isinstance
                88      LOAD_FAST                       1: other
                90      LOAD_GLOBAL                     2: _numbers
                92      LOAD_ATTR                       13: Complex
                94      CALL_FUNCTION                   2
                96      POP_JUMP_IF_FALSE               57 (to 114)
                98      LOAD_FAST                       1: other
                100     LOAD_ATTR                       14: imag
                102     LOAD_CONST                      1: 0
                104     COMPARE_OP                      2 (==)
                106     POP_JUMP_IF_FALSE               57 (to 114)
                108     LOAD_FAST                       1: other
                110     LOAD_ATTR                       15: real
                112     STORE_FAST                      1: other
                114     LOAD_GLOBAL                     0: isinstance
                116     LOAD_FAST                       1: other
                118     LOAD_GLOBAL                     16: float
                120     CALL_FUNCTION                   2
                122     POP_JUMP_IF_FALSE               86 (to 172)
                124     LOAD_GLOBAL                     17: getcontext
                126     CALL_FUNCTION                   0
                128     STORE_FAST                      3: context
                130     LOAD_FAST                       2: equality_op
                132     POP_JUMP_IF_FALSE               73 (to 146)
                134     LOAD_CONST                      2: 1
                136     LOAD_FAST                       3: context
                138     LOAD_ATTR                       18: flags
                140     LOAD_GLOBAL                     19: FloatOperation
                142     STORE_SUBSCR                    
                144     JUMP_FORWARD                    6 (to 158)
                146     LOAD_FAST                       3: context
                148     LOAD_METHOD                     20: _raise_error
                150     LOAD_GLOBAL                     19: FloatOperation
                152     LOAD_CONST                      3: 'strict semantics for mixing floats and Decimals are enabled'
                154     CALL_METHOD                     2
                156     POP_TOP                         
                158     LOAD_FAST                       0: self
                160     LOAD_GLOBAL                     1: Decimal
                162     LOAD_METHOD                     21: from_float
                164     LOAD_FAST                       1: other
                166     CALL_METHOD                     1
                168     BUILD_TUPLE                     2
                170     RETURN_VALUE                    
                172     LOAD_GLOBAL                     22: NotImplemented
                174     LOAD_GLOBAL                     22: NotImplemented
                176     BUILD_TUPLE                     2
                178     RETURN_VALUE                    
        '_convert_for_comparison'
        28
        999999
        -999999
        (
            'prec'
            'rounding'
            'traps'
            'flags'
            'Emax'
            'Emin'
            'capitals'
            'clamp'
        )
        9
        (
            'prec'
            'rounding'
            'traps'
            'flags'
        )
        '        # A numeric string consists of:\n#    \\s*\n    (?P<sign>[-+])?              # an optional sign, followed by either...\n    (\n        (?=\\d|\\.\\d)              # ...a number (with at least one digit)\n        (?P<int>\\d*)             # having a (possibly empty) integer part\n        (\\.(?P<frac>\\d*))?       # followed by an optional fractional part\n        (E(?P<exp>[-+]?\\d+))?    # followed by an optional exponent, or...\n    |\n        Inf(inity)?              # ...an infinity, or...\n    |\n        (?P<signal>s)?           # ...an (optionally signaling)\n        NaN                      # NaN\n        (?P<diag>\\d*)            # with (possibly empty) diagnostic info.\n    )\n#    \\s*\n    \\Z\n'
        '0*$'
        '50*$'
        '\\A\n(?:\n   (?P<fill>.)?\n   (?P<align>[<>=^])\n)?\n(?P<sign>[-+ ])?\n(?P<alt>\\#)?\n(?P<zeropad>0)?\n(?P<minimumwidth>(?!0)\\d+)?\n(?P<thousands_sep>,)?\n(?:\\.(?P<precision>0|(?!0)\\d+))?\n(?P<type>[eEfFgGn%])?\n\\Z\n'
        [Code]
            File Name: _pydecimal.py
            Object Name: _parse_format_specifier
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 6
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_parse_format_specifier_regex'
                'match'
                'ValueError'
                'groupdict'
                'int'
                '_locale'
                'localeconv'
            [Var Names]
                'format_spec'
                '_localeconv'
                'm'
                'format_dict'
                'fill'
                'align'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Parse and validate a format specifier.\n\n    Turns a standard numeric format specifier into a dict, with the\n    following entries:\n\n      fill: fill character to pad field to minimum width\n      align: alignment type, either '<', '>', '=' or '^'\n      sign: either '+', '-' or ' '\n      minimumwidth: nonnegative integer giving minimum width\n      zeropad: boolean, indicating whether to pad with zeros\n      thousands_sep: string to use as thousands separator, or ''\n      grouping: grouping for thousands separators, in format\n        used by localeconv\n      decimal_point: string to use for decimal point\n      precision: nonnegative integer giving precision, or None\n      type: one of the characters 'eEfFgG%', or None\n\n    "
                None
                'Invalid format specifier: '
                'fill'
                'align'
                'zeropad'
                "Fill character conflicts with '0' in format specifier: "
                "Alignment conflicts with '0' in format specifier: "
                ' '
                '>'
                'sign'
                '-'
                'minimumwidth'
                '0'
                'precision'
                0
                'type'
                'gGn'
                1
                'n'
                'g'
                'thousands_sep'
                "Explicit thousands separator conflicts with 'n' type in format specifier: "
                'grouping'
                'decimal_point'
                ''
                3
                '.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _parse_format_specifier_regex
                2       LOAD_METHOD                     1: match
                4       LOAD_FAST                       0: format_spec
                6       CALL_METHOD                     1
                8       STORE_FAST                      2: m
                10      LOAD_FAST                       2: m
                12      LOAD_CONST                      1: None
                14      IS_OP                           0 (is)
                16      POP_JUMP_IF_FALSE               15 (to 30)
                18      LOAD_GLOBAL                     2: ValueError
                20      LOAD_CONST                      2: 'Invalid format specifier: '
                22      LOAD_FAST                       0: format_spec
                24      BINARY_ADD                      
                26      CALL_FUNCTION                   1
                28      RAISE_VARARGS                   1
                30      LOAD_FAST                       2: m
                32      LOAD_METHOD                     3: groupdict
                34      CALL_METHOD                     0
                36      STORE_FAST                      3: format_dict
                38      LOAD_FAST                       3: format_dict
                40      LOAD_CONST                      3: 'fill'
                42      BINARY_SUBSCR                   
                44      STORE_FAST                      4: fill
                46      LOAD_FAST                       3: format_dict
                48      LOAD_CONST                      4: 'align'
                50      BINARY_SUBSCR                   
                52      STORE_FAST                      5: align
                54      LOAD_FAST                       3: format_dict
                56      LOAD_CONST                      5: 'zeropad'
                58      BINARY_SUBSCR                   
                60      LOAD_CONST                      1: None
                62      IS_OP                           1 (is not)
                64      LOAD_FAST                       3: format_dict
                66      LOAD_CONST                      5: 'zeropad'
                68      STORE_SUBSCR                    
                70      LOAD_FAST                       3: format_dict
                72      LOAD_CONST                      5: 'zeropad'
                74      BINARY_SUBSCR                   
                76      POP_JUMP_IF_FALSE               59 (to 118)
                78      LOAD_FAST                       4: fill
                80      LOAD_CONST                      1: None
                82      IS_OP                           1 (is not)
                84      POP_JUMP_IF_FALSE               49 (to 98)
                86      LOAD_GLOBAL                     2: ValueError
                88      LOAD_CONST                      6: "Fill character conflicts with '0' in format specifier: "
                90      LOAD_FAST                       0: format_spec
                92      BINARY_ADD                      
                94      CALL_FUNCTION                   1
                96      RAISE_VARARGS                   1
                98      LOAD_FAST                       5: align
                100     LOAD_CONST                      1: None
                102     IS_OP                           1 (is not)
                104     POP_JUMP_IF_FALSE               59 (to 118)
                106     LOAD_GLOBAL                     2: ValueError
                108     LOAD_CONST                      7: "Alignment conflicts with '0' in format specifier: "
                110     LOAD_FAST                       0: format_spec
                112     BINARY_ADD                      
                114     CALL_FUNCTION                   1
                116     RAISE_VARARGS                   1
                118     LOAD_FAST                       4: fill
                120     JUMP_IF_TRUE_OR_POP             62 (to 124)
                122     LOAD_CONST                      8: ' '
                124     LOAD_FAST                       3: format_dict
                126     LOAD_CONST                      3: 'fill'
                128     STORE_SUBSCR                    
                130     LOAD_FAST                       5: align
                132     JUMP_IF_TRUE_OR_POP             68 (to 136)
                134     LOAD_CONST                      9: '>'
                136     LOAD_FAST                       3: format_dict
                138     LOAD_CONST                      4: 'align'
                140     STORE_SUBSCR                    
                142     LOAD_FAST                       3: format_dict
                144     LOAD_CONST                      10: 'sign'
                146     BINARY_SUBSCR                   
                148     LOAD_CONST                      1: None
                150     IS_OP                           0 (is)
                152     POP_JUMP_IF_FALSE               81 (to 162)
                154     LOAD_CONST                      11: '-'
                156     LOAD_FAST                       3: format_dict
                158     LOAD_CONST                      10: 'sign'
                160     STORE_SUBSCR                    
                162     LOAD_GLOBAL                     4: int
                164     LOAD_FAST                       3: format_dict
                166     LOAD_CONST                      12: 'minimumwidth'
                168     BINARY_SUBSCR                   
                170     JUMP_IF_TRUE_OR_POP             87 (to 174)
                172     LOAD_CONST                      13: '0'
                174     CALL_FUNCTION                   1
                176     LOAD_FAST                       3: format_dict
                178     LOAD_CONST                      12: 'minimumwidth'
                180     STORE_SUBSCR                    
                182     LOAD_FAST                       3: format_dict
                184     LOAD_CONST                      14: 'precision'
                186     BINARY_SUBSCR                   
                188     LOAD_CONST                      1: None
                190     IS_OP                           1 (is not)
                192     POP_JUMP_IF_FALSE               105 (to 210)
                194     LOAD_GLOBAL                     4: int
                196     LOAD_FAST                       3: format_dict
                198     LOAD_CONST                      14: 'precision'
                200     BINARY_SUBSCR                   
                202     CALL_FUNCTION                   1
                204     LOAD_FAST                       3: format_dict
                206     LOAD_CONST                      14: 'precision'
                208     STORE_SUBSCR                    
                210     LOAD_FAST                       3: format_dict
                212     LOAD_CONST                      14: 'precision'
                214     BINARY_SUBSCR                   
                216     LOAD_CONST                      15: 0
                218     COMPARE_OP                      2 (==)
                220     POP_JUMP_IF_FALSE               127 (to 254)
                222     LOAD_FAST                       3: format_dict
                224     LOAD_CONST                      16: 'type'
                226     BINARY_SUBSCR                   
                228     LOAD_CONST                      1: None
                230     IS_OP                           0 (is)
                232     POP_JUMP_IF_TRUE                123 (to 246)
                234     LOAD_FAST                       3: format_dict
                236     LOAD_CONST                      16: 'type'
                238     BINARY_SUBSCR                   
                240     LOAD_CONST                      17: 'gGn'
                242     CONTAINS_OP                     0 (in)
                244     POP_JUMP_IF_FALSE               127 (to 254)
                246     LOAD_CONST                      18: 1
                248     LOAD_FAST                       3: format_dict
                250     LOAD_CONST                      14: 'precision'
                252     STORE_SUBSCR                    
                254     LOAD_FAST                       3: format_dict
                256     LOAD_CONST                      16: 'type'
                258     BINARY_SUBSCR                   
                260     LOAD_CONST                      19: 'n'
                262     COMPARE_OP                      2 (==)
                264     POP_JUMP_IF_FALSE               177 (to 354)
                266     LOAD_CONST                      20: 'g'
                268     LOAD_FAST                       3: format_dict
                270     LOAD_CONST                      16: 'type'
                272     STORE_SUBSCR                    
                274     LOAD_FAST                       1: _localeconv
                276     LOAD_CONST                      1: None
                278     IS_OP                           0 (is)
                280     POP_JUMP_IF_FALSE               145 (to 290)
                282     LOAD_GLOBAL                     5: _locale
                284     LOAD_METHOD                     6: localeconv
                286     CALL_METHOD                     0
                288     STORE_FAST                      1: _localeconv
                290     LOAD_FAST                       3: format_dict
                292     LOAD_CONST                      21: 'thousands_sep'
                294     BINARY_SUBSCR                   
                296     LOAD_CONST                      1: None
                298     IS_OP                           1 (is not)
                300     POP_JUMP_IF_FALSE               157 (to 314)
                302     LOAD_GLOBAL                     2: ValueError
                304     LOAD_CONST                      22: "Explicit thousands separator conflicts with 'n' type in format specifier: "
                306     LOAD_FAST                       0: format_spec
                308     BINARY_ADD                      
                310     CALL_FUNCTION                   1
                312     RAISE_VARARGS                   1
                314     LOAD_FAST                       1: _localeconv
                316     LOAD_CONST                      21: 'thousands_sep'
                318     BINARY_SUBSCR                   
                320     LOAD_FAST                       3: format_dict
                322     LOAD_CONST                      21: 'thousands_sep'
                324     STORE_SUBSCR                    
                326     LOAD_FAST                       1: _localeconv
                328     LOAD_CONST                      23: 'grouping'
                330     BINARY_SUBSCR                   
                332     LOAD_FAST                       3: format_dict
                334     LOAD_CONST                      23: 'grouping'
                336     STORE_SUBSCR                    
                338     LOAD_FAST                       1: _localeconv
                340     LOAD_CONST                      24: 'decimal_point'
                342     BINARY_SUBSCR                   
                344     LOAD_FAST                       3: format_dict
                346     LOAD_CONST                      24: 'decimal_point'
                348     STORE_SUBSCR                    
                350     LOAD_FAST                       3: format_dict
                352     RETURN_VALUE                    
                354     LOAD_FAST                       3: format_dict
                356     LOAD_CONST                      21: 'thousands_sep'
                358     BINARY_SUBSCR                   
                360     LOAD_CONST                      1: None
                362     IS_OP                           0 (is)
                364     POP_JUMP_IF_FALSE               187 (to 374)
                366     LOAD_CONST                      25: ''
                368     LOAD_FAST                       3: format_dict
                370     LOAD_CONST                      21: 'thousands_sep'
                372     STORE_SUBSCR                    
                374     LOAD_CONST                      26: 3
                376     LOAD_CONST                      15: 0
                378     BUILD_LIST                      2
                380     LOAD_FAST                       3: format_dict
                382     LOAD_CONST                      23: 'grouping'
                384     STORE_SUBSCR                    
                386     LOAD_CONST                      27: '.'
                388     LOAD_FAST                       3: format_dict
                390     LOAD_CONST                      24: 'decimal_point'
                392     STORE_SUBSCR                    
                394     LOAD_FAST                       3: format_dict
                396     RETURN_VALUE                    
        '_parse_format_specifier'
        [Code]
            File Name: _pydecimal.py
            Object Name: _format_align
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 9
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'len'
                'ValueError'
            [Var Names]
                'sign'
                'body'
                'spec'
                'minimumwidth'
                'fill'
                'padding'
                'align'
                'result'
                'half'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Given an unpadded, non-aligned numeric string 'body' and sign\n    string 'sign', add padding and alignment conforming to the given\n    format specifier dictionary 'spec' (as produced by\n    parse_format_specifier).\n\n    "
                'minimumwidth'
                'fill'
                'align'
                '<'
                '>'
                '='
                '^'
                2
                None
                'Unrecognised alignment field'
            [Disassembly]
                0       LOAD_FAST                       2: spec
                2       LOAD_CONST                      1: 'minimumwidth'
                4       BINARY_SUBSCR                   
                6       STORE_FAST                      3: minimumwidth
                8       LOAD_FAST                       2: spec
                10      LOAD_CONST                      2: 'fill'
                12      BINARY_SUBSCR                   
                14      STORE_FAST                      4: fill
                16      LOAD_FAST                       4: fill
                18      LOAD_FAST                       3: minimumwidth
                20      LOAD_GLOBAL                     0: len
                22      LOAD_FAST                       0: sign
                24      CALL_FUNCTION                   1
                26      BINARY_SUBTRACT                 
                28      LOAD_GLOBAL                     0: len
                30      LOAD_FAST                       1: body
                32      CALL_FUNCTION                   1
                34      BINARY_SUBTRACT                 
                36      BINARY_MULTIPLY                 
                38      STORE_FAST                      5: padding
                40      LOAD_FAST                       2: spec
                42      LOAD_CONST                      3: 'align'
                44      BINARY_SUBSCR                   
                46      STORE_FAST                      6: align
                48      LOAD_FAST                       6: align
                50      LOAD_CONST                      4: '<'
                52      COMPARE_OP                      2 (==)
                54      POP_JUMP_IF_FALSE               36 (to 72)
                56      LOAD_FAST                       0: sign
                58      LOAD_FAST                       1: body
                60      BINARY_ADD                      
                62      LOAD_FAST                       5: padding
                64      BINARY_ADD                      
                66      STORE_FAST                      7: result
                68      LOAD_FAST                       7: result
                70      RETURN_VALUE                    
                72      LOAD_FAST                       6: align
                74      LOAD_CONST                      5: '>'
                76      COMPARE_OP                      2 (==)
                78      POP_JUMP_IF_FALSE               48 (to 96)
                80      LOAD_FAST                       5: padding
                82      LOAD_FAST                       0: sign
                84      BINARY_ADD                      
                86      LOAD_FAST                       1: body
                88      BINARY_ADD                      
                90      STORE_FAST                      7: result
                92      LOAD_FAST                       7: result
                94      RETURN_VALUE                    
                96      LOAD_FAST                       6: align
                98      LOAD_CONST                      6: '='
                100     COMPARE_OP                      2 (==)
                102     POP_JUMP_IF_FALSE               60 (to 120)
                104     LOAD_FAST                       0: sign
                106     LOAD_FAST                       5: padding
                108     BINARY_ADD                      
                110     LOAD_FAST                       1: body
                112     BINARY_ADD                      
                114     STORE_FAST                      7: result
                116     LOAD_FAST                       7: result
                118     RETURN_VALUE                    
                120     LOAD_FAST                       6: align
                122     LOAD_CONST                      7: '^'
                124     COMPARE_OP                      2 (==)
                126     POP_JUMP_IF_FALSE               88 (to 176)
                128     LOAD_GLOBAL                     0: len
                130     LOAD_FAST                       5: padding
                132     CALL_FUNCTION                   1
                134     LOAD_CONST                      8: 2
                136     BINARY_FLOOR_DIVIDE             
                138     STORE_FAST                      8: half
                140     LOAD_FAST                       5: padding
                142     LOAD_CONST                      9: None
                144     LOAD_FAST                       8: half
                146     BUILD_SLICE                     2
                148     BINARY_SUBSCR                   
                150     LOAD_FAST                       0: sign
                152     BINARY_ADD                      
                154     LOAD_FAST                       1: body
                156     BINARY_ADD                      
                158     LOAD_FAST                       5: padding
                160     LOAD_FAST                       8: half
                162     LOAD_CONST                      9: None
                164     BUILD_SLICE                     2
                166     BINARY_SUBSCR                   
                168     BINARY_ADD                      
                170     STORE_FAST                      7: result
                172     LOAD_FAST                       7: result
                174     RETURN_VALUE                    
                176     LOAD_GLOBAL                     1: ValueError
                178     LOAD_CONST                      10: 'Unrecognised alignment field'
                180     CALL_FUNCTION                   1
                182     RAISE_VARARGS                   1
        '_format_align'
        [Code]
            File Name: _pydecimal.py
            Object Name: _group_lengths
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'itertools'
                'chain'
                'repeat'
                'len'
                '_locale'
                'CHAR_MAX'
                'ValueError'
            [Var Names]
                'grouping'
                'chain'
                'repeat'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Convert a localeconv-style grouping into a (possibly infinite)\n    iterable of integers representing group lengths.\n\n    '
                0
                (
                    'chain'
                    'repeat'
                )
                -1
                2
                None
                -2
                'unrecognised format for grouping'
            [Disassembly]
                0       LOAD_CONST                      1: 0
                2       LOAD_CONST                      2: ('chain', 'repeat')
                4       IMPORT_NAME                     0: itertools
                6       IMPORT_FROM                     1: chain
                8       STORE_FAST                      1: chain
                10      IMPORT_FROM                     2: repeat
                12      STORE_FAST                      2: repeat
                14      POP_TOP                         
                16      LOAD_FAST                       0: grouping
                18      POP_JUMP_IF_TRUE                12 (to 24)
                20      BUILD_LIST                      0
                22      RETURN_VALUE                    
                24      LOAD_FAST                       0: grouping
                26      LOAD_CONST                      3: -1
                28      BINARY_SUBSCR                   
                30      LOAD_CONST                      1: 0
                32      COMPARE_OP                      2 (==)
                34      POP_JUMP_IF_FALSE               37 (to 74)
                36      LOAD_GLOBAL                     3: len
                38      LOAD_FAST                       0: grouping
                40      CALL_FUNCTION                   1
                42      LOAD_CONST                      4: 2
                44      COMPARE_OP                      5 (>=)
                46      POP_JUMP_IF_FALSE               37 (to 74)
                48      LOAD_FAST                       1: chain
                50      LOAD_FAST                       0: grouping
                52      LOAD_CONST                      5: None
                54      LOAD_CONST                      3: -1
                56      BUILD_SLICE                     2
                58      BINARY_SUBSCR                   
                60      LOAD_FAST                       2: repeat
                62      LOAD_FAST                       0: grouping
                64      LOAD_CONST                      6: -2
                66      BINARY_SUBSCR                   
                68      CALL_FUNCTION                   1
                70      CALL_FUNCTION                   2
                72      RETURN_VALUE                    
                74      LOAD_FAST                       0: grouping
                76      LOAD_CONST                      3: -1
                78      BINARY_SUBSCR                   
                80      LOAD_GLOBAL                     4: _locale
                82      LOAD_ATTR                       5: CHAR_MAX
                84      COMPARE_OP                      2 (==)
                86      POP_JUMP_IF_FALSE               50 (to 100)
                88      LOAD_FAST                       0: grouping
                90      LOAD_CONST                      5: None
                92      LOAD_CONST                      3: -1
                94      BUILD_SLICE                     2
                96      BINARY_SUBSCR                   
                98      RETURN_VALUE                    
                100     LOAD_GLOBAL                     6: ValueError
                102     LOAD_CONST                      7: 'unrecognised format for grouping'
                104     CALL_FUNCTION                   1
                106     RAISE_VARARGS                   1
        '_group_lengths'
        [Code]
            File Name: _pydecimal.py
            Object Name: _insert_thousands_sep
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 7
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_group_lengths'
                'ValueError'
                'min'
                'max'
                'len'
                'append'
                'join'
                'reversed'
            [Var Names]
                'digits'
                'spec'
                'min_width'
                'sep'
                'grouping'
                'groups'
                'l'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Insert thousands separators into a digit string.\n\n    spec is a dictionary whose keys should include 'thousands_sep' and\n    'grouping'; typically it's the result of parsing the format\n    specifier using _parse_format_specifier.\n\n    The min_width keyword argument gives the minimum length of the\n    result, which will be padded on the left with zeros if necessary.\n\n    If necessary, the zero padding adds an extra '0' on the left to\n    avoid a leading thousands separator.  For example, inserting\n    commas every three digits in '123456', with min_width=8, gives\n    '0,123,456', even though that has length 9.\n\n    "
                'thousands_sep'
                'grouping'
                0
                'group length should be positive'
                1
                '0'
                None
            [Disassembly]
                0       LOAD_FAST                       1: spec
                2       LOAD_CONST                      1: 'thousands_sep'
                4       BINARY_SUBSCR                   
                6       STORE_FAST                      3: sep
                8       LOAD_FAST                       1: spec
                10      LOAD_CONST                      2: 'grouping'
                12      BINARY_SUBSCR                   
                14      STORE_FAST                      4: grouping
                16      BUILD_LIST                      0
                18      STORE_FAST                      5: groups
                20      LOAD_GLOBAL                     0: _group_lengths
                22      LOAD_FAST                       4: grouping
                24      CALL_FUNCTION                   1
                26      GET_ITER                        
                28      FOR_ITER                        64 (to 158)
                30      STORE_FAST                      6: l
                32      LOAD_FAST                       6: l
                34      LOAD_CONST                      3: 0
                36      COMPARE_OP                      1 (<=)
                38      POP_JUMP_IF_FALSE               24 (to 48)
                40      LOAD_GLOBAL                     1: ValueError
                42      LOAD_CONST                      4: 'group length should be positive'
                44      CALL_FUNCTION                   1
                46      RAISE_VARARGS                   1
                48      LOAD_GLOBAL                     2: min
                50      LOAD_GLOBAL                     3: max
                52      LOAD_GLOBAL                     4: len
                54      LOAD_FAST                       0: digits
                56      CALL_FUNCTION                   1
                58      LOAD_FAST                       2: min_width
                60      LOAD_CONST                      5: 1
                62      CALL_FUNCTION                   3
                64      LOAD_FAST                       6: l
                66      CALL_FUNCTION                   2
                68      STORE_FAST                      6: l
                70      LOAD_FAST                       5: groups
                72      LOAD_METHOD                     5: append
                74      LOAD_CONST                      6: '0'
                76      LOAD_FAST                       6: l
                78      LOAD_GLOBAL                     4: len
                80      LOAD_FAST                       0: digits
                82      CALL_FUNCTION                   1
                84      BINARY_SUBTRACT                 
                86      BINARY_MULTIPLY                 
                88      LOAD_FAST                       0: digits
                90      LOAD_FAST                       6: l
                92      UNARY_NEGATIVE                  
                94      LOAD_CONST                      7: None
                96      BUILD_SLICE                     2
                98      BINARY_SUBSCR                   
                100     BINARY_ADD                      
                102     CALL_METHOD                     1
                104     POP_TOP                         
                106     LOAD_FAST                       0: digits
                108     LOAD_CONST                      7: None
                110     LOAD_FAST                       6: l
                112     UNARY_NEGATIVE                  
                114     BUILD_SLICE                     2
                116     BINARY_SUBSCR                   
                118     STORE_FAST                      0: digits
                120     LOAD_FAST                       2: min_width
                122     LOAD_FAST                       6: l
                124     INPLACE_SUBTRACT                
                126     STORE_FAST                      2: min_width
                128     LOAD_FAST                       0: digits
                130     POP_JUMP_IF_TRUE                72 (to 144)
                132     LOAD_FAST                       2: min_width
                134     LOAD_CONST                      3: 0
                136     COMPARE_OP                      1 (<=)
                138     POP_JUMP_IF_FALSE               72 (to 144)
                140     POP_TOP                         
                142     JUMP_FORWARD                    33 (to 210)
                144     LOAD_FAST                       2: min_width
                146     LOAD_GLOBAL                     4: len
                148     LOAD_FAST                       3: sep
                150     CALL_FUNCTION                   1
                152     INPLACE_SUBTRACT                
                154     STORE_FAST                      2: min_width
                156     JUMP_ABSOLUTE                   14 (to 28)
                158     LOAD_GLOBAL                     3: max
                160     LOAD_GLOBAL                     4: len
                162     LOAD_FAST                       0: digits
                164     CALL_FUNCTION                   1
                166     LOAD_FAST                       2: min_width
                168     LOAD_CONST                      5: 1
                170     CALL_FUNCTION                   3
                172     STORE_FAST                      6: l
                174     LOAD_FAST                       5: groups
                176     LOAD_METHOD                     5: append
                178     LOAD_CONST                      6: '0'
                180     LOAD_FAST                       6: l
                182     LOAD_GLOBAL                     4: len
                184     LOAD_FAST                       0: digits
                186     CALL_FUNCTION                   1
                188     BINARY_SUBTRACT                 
                190     BINARY_MULTIPLY                 
                192     LOAD_FAST                       0: digits
                194     LOAD_FAST                       6: l
                196     UNARY_NEGATIVE                  
                198     LOAD_CONST                      7: None
                200     BUILD_SLICE                     2
                202     BINARY_SUBSCR                   
                204     BINARY_ADD                      
                206     CALL_METHOD                     1
                208     POP_TOP                         
                210     LOAD_FAST                       3: sep
                212     LOAD_METHOD                     6: join
                214     LOAD_GLOBAL                     7: reversed
                216     LOAD_FAST                       5: groups
                218     CALL_FUNCTION                   1
                220     CALL_METHOD                     1
                222     RETURN_VALUE                    
        '_insert_thousands_sep'
        [Code]
            File Name: _pydecimal.py
            Object Name: _format_sign
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'is_negative'
                'spec'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Determine sign character.'
                '-'
                'sign'
                ' +'
                ''
            [Disassembly]
                0       LOAD_FAST                       0: is_negative
                2       POP_JUMP_IF_FALSE               4 (to 8)
                4       LOAD_CONST                      1: '-'
                6       RETURN_VALUE                    
                8       LOAD_FAST                       1: spec
                10      LOAD_CONST                      2: 'sign'
                12      BINARY_SUBSCR                   
                14      LOAD_CONST                      3: ' +'
                16      CONTAINS_OP                     0 (in)
                18      POP_JUMP_IF_FALSE               14 (to 28)
                20      LOAD_FAST                       1: spec
                22      LOAD_CONST                      2: 'sign'
                24      BINARY_SUBSCR                   
                26      RETURN_VALUE                    
                28      LOAD_CONST                      4: ''
                30      RETURN_VALUE                    
        '_format_sign'
        [Code]
            File Name: _pydecimal.py
            Object Name: _format_number
            Arg Count: 5
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_format_sign'
                'format'
                'len'
                '_insert_thousands_sep'
                '_format_align'
            [Var Names]
                'is_negative'
                'intpart'
                'fracpart'
                'exp'
                'spec'
                'sign'
                'echar'
                'min_width'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Format a number, given the following data:\n\n    is_negative: true if the number is negative, else false\n    intpart: string of digits that must appear before the decimal point\n    fracpart: string of digits that must come after the point\n    exp: exponent, as an integer\n    spec: dictionary resulting from parsing the format specifier\n\n    This function uses the information in spec to:\n      insert separators (decimal separator and thousands separators)\n      format the sign\n      format the exponent\n      add trailing '%' for the '%' type\n      zero-pad if necessary\n      fill and align if necessary\n    "
                'alt'
                'decimal_point'
                0
                'type'
                'eE'
                'E'
                'e'
                (
                    'E'
                    'e'
                    'G'
                    'g'
                )
                '{0}{1:+}'
                '%'
                'zeropad'
                'minimumwidth'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _format_sign
                2       LOAD_FAST                       0: is_negative
                4       LOAD_FAST                       4: spec
                6       CALL_FUNCTION                   2
                8       STORE_FAST                      5: sign
                10      LOAD_FAST                       2: fracpart
                12      POP_JUMP_IF_TRUE                11 (to 22)
                14      LOAD_FAST                       4: spec
                16      LOAD_CONST                      1: 'alt'
                18      BINARY_SUBSCR                   
                20      POP_JUMP_IF_FALSE               17 (to 34)
                22      LOAD_FAST                       4: spec
                24      LOAD_CONST                      2: 'decimal_point'
                26      BINARY_SUBSCR                   
                28      LOAD_FAST                       2: fracpart
                30      BINARY_ADD                      
                32      STORE_FAST                      2: fracpart
                34      LOAD_FAST                       3: exp
                36      LOAD_CONST                      3: 0
                38      COMPARE_OP                      3 (!=)
                40      POP_JUMP_IF_TRUE                27 (to 54)
                42      LOAD_FAST                       4: spec
                44      LOAD_CONST                      4: 'type'
                46      BINARY_SUBSCR                   
                48      LOAD_CONST                      5: 'eE'
                50      CONTAINS_OP                     0 (in)
                52      POP_JUMP_IF_FALSE               46 (to 92)
                54      LOAD_CONST                      6: 'E'
                56      LOAD_CONST                      7: 'e'
                58      LOAD_CONST                      6: 'E'
                60      LOAD_CONST                      7: 'e'
                62      LOAD_CONST                      8: ('E', 'e', 'G', 'g')
                64      BUILD_CONST_KEY_MAP             4
                66      LOAD_FAST                       4: spec
                68      LOAD_CONST                      4: 'type'
                70      BINARY_SUBSCR                   
                72      BINARY_SUBSCR                   
                74      STORE_FAST                      6: echar
                76      LOAD_FAST                       2: fracpart
                78      LOAD_CONST                      9: '{0}{1:+}'
                80      LOAD_METHOD                     1: format
                82      LOAD_FAST                       6: echar
                84      LOAD_FAST                       3: exp
                86      CALL_METHOD                     2
                88      INPLACE_ADD                     
                90      STORE_FAST                      2: fracpart
                92      LOAD_FAST                       4: spec
                94      LOAD_CONST                      4: 'type'
                96      BINARY_SUBSCR                   
                98      LOAD_CONST                      10: '%'
                100     COMPARE_OP                      2 (==)
                102     POP_JUMP_IF_FALSE               56 (to 112)
                104     LOAD_FAST                       2: fracpart
                106     LOAD_CONST                      10: '%'
                108     INPLACE_ADD                     
                110     STORE_FAST                      2: fracpart
                112     LOAD_FAST                       4: spec
                114     LOAD_CONST                      11: 'zeropad'
                116     BINARY_SUBSCR                   
                118     POP_JUMP_IF_FALSE               73 (to 146)
                120     LOAD_FAST                       4: spec
                122     LOAD_CONST                      12: 'minimumwidth'
                124     BINARY_SUBSCR                   
                126     LOAD_GLOBAL                     2: len
                128     LOAD_FAST                       2: fracpart
                130     CALL_FUNCTION                   1
                132     BINARY_SUBTRACT                 
                134     LOAD_GLOBAL                     2: len
                136     LOAD_FAST                       5: sign
                138     CALL_FUNCTION                   1
                140     BINARY_SUBTRACT                 
                142     STORE_FAST                      7: min_width
                144     JUMP_FORWARD                    2 (to 150)
                146     LOAD_CONST                      3: 0
                148     STORE_FAST                      7: min_width
                150     LOAD_GLOBAL                     3: _insert_thousands_sep
                152     LOAD_FAST                       1: intpart
                154     LOAD_FAST                       4: spec
                156     LOAD_FAST                       7: min_width
                158     CALL_FUNCTION                   3
                160     STORE_FAST                      1: intpart
                162     LOAD_GLOBAL                     4: _format_align
                164     LOAD_FAST                       5: sign
                166     LOAD_FAST                       1: intpart
                168     LOAD_FAST                       2: fracpart
                170     BINARY_ADD                      
                172     LOAD_FAST                       4: spec
                174     CALL_FUNCTION                   3
                176     RETURN_VALUE                    
        '_format_number'
        'Inf'
        '-Inf'
        'NaN'
        -1
        2
        (
            None
        )
        (
            False
        )
        (
            0
        )
        (
            8
        )
        (
            False
            False
        )
        (
            1
        )
    [Disassembly]
        0       LOAD_CONST                      0: '\nThis is an implementation of decimal floating point arithmetic based on\nthe General Decimal Arithmetic Specification:\n\n    http://speleotrove.com/decimal/decarith.html\n\nand IEEE standard 854-1987:\n\n    http://en.wikipedia.org/wiki/IEEE_854-1987\n\nDecimal floating point has finite precision with arbitrarily large bounds.\n\nThe purpose of this module is to support arithmetic using familiar\n"schoolhouse" rules and to avoid some of the tricky representation\nissues associated with binary floating point.  The package is especially\nuseful for financial applications or for contexts where users have\nexpectations that are at odds with binary floating point (for instance,\nin binary floating point, 1.00 % 0.1 gives 0.09999999999999995 instead\nof 0.0; Decimal(\'1.00\') % Decimal(\'0.1\') returns the expected\nDecimal(\'0.00\')).\n\nHere are some examples of using the decimal module:\n\n>>> from decimal import *\n>>> setcontext(ExtendedContext)\n>>> Decimal(0)\nDecimal(\'0\')\n>>> Decimal(\'1\')\nDecimal(\'1\')\n>>> Decimal(\'-.0123\')\nDecimal(\'-0.0123\')\n>>> Decimal(123456)\nDecimal(\'123456\')\n>>> Decimal(\'123.45e12345678\')\nDecimal(\'1.2345E+12345680\')\n>>> Decimal(\'1.33\') + Decimal(\'1.27\')\nDecimal(\'2.60\')\n>>> Decimal(\'12.34\') + Decimal(\'3.87\') - Decimal(\'18.41\')\nDecimal(\'-2.20\')\n>>> dig = Decimal(1)\n>>> print(dig / Decimal(3))\n0.333333333\n>>> getcontext().prec = 18\n>>> print(dig / Decimal(3))\n0.333333333333333333\n>>> print(dig.sqrt())\n1\n>>> print(Decimal(3).sqrt())\n1.73205080756887729\n>>> print(Decimal(3) ** 123)\n4.85192780976896427E+58\n>>> inf = Decimal(1) / Decimal(0)\n>>> print(inf)\nInfinity\n>>> neginf = Decimal(-1) / Decimal(0)\n>>> print(neginf)\n-Infinity\n>>> print(neginf + inf)\nNaN\n>>> print(neginf * inf)\n-Infinity\n>>> print(dig / 0)\nInfinity\n>>> getcontext().traps[DivisionByZero] = 1\n>>> print(dig / 0)\nTraceback (most recent call last):\n  ...\n  ...\n  ...\ndecimal.DivisionByZero: x / 0\n>>> c = Context()\n>>> c.traps[InvalidOperation] = 0\n>>> print(c.flags[InvalidOperation])\n0\n>>> c.divide(Decimal(0), Decimal(0))\nDecimal(\'NaN\')\n>>> c.traps[InvalidOperation] = 1\n>>> print(c.flags[InvalidOperation])\n1\n>>> c.flags[InvalidOperation] = 0\n>>> print(c.flags[InvalidOperation])\n0\n>>> print(c.divide(Decimal(0), Decimal(0)))\nTraceback (most recent call last):\n  ...\n  ...\n  ...\ndecimal.InvalidOperation: 0 / 0\n>>> print(c.flags[InvalidOperation])\n1\n>>> c.flags[InvalidOperation] = 0\n>>> c.traps[InvalidOperation] = 0\n>>> print(c.divide(Decimal(0), Decimal(0)))\nNaN\n>>> print(c.flags[InvalidOperation])\n1\n>>>\n'
        2       STORE_NAME                      0: __doc__
        4       BUILD_LIST                      0
        6       LOAD_CONST                      1: ('Decimal', 'Context', 'DecimalTuple', 'DefaultContext', 'BasicContext', 'ExtendedContext', 'DecimalException', 'Clamped', 'InvalidOperation', 'DivisionByZero', 'Inexact', 'Rounded', 'Subnormal', 'Overflow', 'Underflow', 'FloatOperation', 'DivisionImpossible', 'InvalidContext', 'ConversionSyntax', 'DivisionUndefined', 'ROUND_DOWN', 'ROUND_HALF_UP', 'ROUND_HALF_EVEN', 'ROUND_CEILING', 'ROUND_FLOOR', 'ROUND_UP', 'ROUND_HALF_DOWN', 'ROUND_05UP', 'setcontext', 'getcontext', 'localcontext', 'MAX_PREC', 'MAX_EMAX', 'MIN_EMIN', 'MIN_ETINY', 'HAVE_THREADS', 'HAVE_CONTEXTVAR')
        8       LIST_EXTEND                     1
        10      STORE_NAME                      1: __all__
        12      LOAD_NAME                       2: __name__
        14      STORE_NAME                      3: __xname__
        16      LOAD_CONST                      2: 'decimal'
        18      STORE_NAME                      2: __name__
        20      LOAD_CONST                      3: '1.70'
        22      STORE_NAME                      4: __version__
        24      LOAD_CONST                      4: '2.4.2'
        26      STORE_NAME                      5: __libmpdec_version__
        28      LOAD_CONST                      5: 0
        30      LOAD_CONST                      6: None
        32      IMPORT_NAME                     6: math
        34      STORE_NAME                      7: _math
        36      LOAD_CONST                      5: 0
        38      LOAD_CONST                      6: None
        40      IMPORT_NAME                     8: numbers
        42      STORE_NAME                      9: _numbers
        44      LOAD_CONST                      5: 0
        46      LOAD_CONST                      6: None
        48      IMPORT_NAME                     10: sys
        50      STORE_NAME                      10: sys
        52      SETUP_FINALLY                   13 (to 80)
        54      LOAD_CONST                      5: 0
        56      LOAD_CONST                      7: ('namedtuple',)
        58      IMPORT_NAME                     11: collections
        60      IMPORT_FROM                     12: namedtuple
        62      STORE_NAME                      13: _namedtuple
        64      POP_TOP                         
        66      LOAD_NAME                       13: _namedtuple
        68      LOAD_CONST                      8: 'DecimalTuple'
        70      LOAD_CONST                      9: 'sign digits exponent'
        72      CALL_FUNCTION                   2
        74      STORE_NAME                      14: DecimalTuple
        76      POP_BLOCK                       
        78      JUMP_FORWARD                    13 (to 106)
        80      DUP_TOP                         
        82      LOAD_NAME                       15: ImportError
        84      JUMP_IF_NOT_EXC_MATCH           52 (to 104)
        86      POP_TOP                         
        88      POP_TOP                         
        90      POP_TOP                         
        92      LOAD_CONST                      10: <CODE> <lambda>
        94      LOAD_CONST                      11: '<lambda>'
        96      MAKE_FUNCTION                   0
        98      STORE_NAME                      14: DecimalTuple
        100     POP_EXCEPT                      
        102     JUMP_FORWARD                    1 (to 106)
        104     RERAISE                         0
        106     LOAD_CONST                      12: 'ROUND_DOWN'
        108     STORE_NAME                      16: ROUND_DOWN
        110     LOAD_CONST                      13: 'ROUND_HALF_UP'
        112     STORE_NAME                      17: ROUND_HALF_UP
        114     LOAD_CONST                      14: 'ROUND_HALF_EVEN'
        116     STORE_NAME                      18: ROUND_HALF_EVEN
        118     LOAD_CONST                      15: 'ROUND_CEILING'
        120     STORE_NAME                      19: ROUND_CEILING
        122     LOAD_CONST                      16: 'ROUND_FLOOR'
        124     STORE_NAME                      20: ROUND_FLOOR
        126     LOAD_CONST                      17: 'ROUND_UP'
        128     STORE_NAME                      21: ROUND_UP
        130     LOAD_CONST                      18: 'ROUND_HALF_DOWN'
        132     STORE_NAME                      22: ROUND_HALF_DOWN
        134     LOAD_CONST                      19: 'ROUND_05UP'
        136     STORE_NAME                      23: ROUND_05UP
        138     LOAD_CONST                      20: True
        140     STORE_NAME                      24: HAVE_THREADS
        142     LOAD_CONST                      20: True
        144     STORE_NAME                      25: HAVE_CONTEXTVAR
        146     LOAD_NAME                       10: sys
        148     LOAD_ATTR                       26: maxsize
        150     LOAD_CONST                      21: 0x7FFFFFFFFFFFFFFF
        152     COMPARE_OP                      2 (==)
        154     POP_JUMP_IF_FALSE               85 (to 170)
        156     LOAD_CONST                      22: 0xDE0B6B3A763FFFF
        158     STORE_NAME                      27: MAX_PREC
        160     LOAD_CONST                      22: 0xDE0B6B3A763FFFF
        162     STORE_NAME                      28: MAX_EMAX
        164     LOAD_CONST                      23: -0xDE0B6B3A763FFFF
        166     STORE_NAME                      29: MIN_EMIN
        168     JUMP_FORWARD                    6 (to 182)
        170     LOAD_CONST                      24: 425000000
        172     STORE_NAME                      27: MAX_PREC
        174     LOAD_CONST                      24: 425000000
        176     STORE_NAME                      28: MAX_EMAX
        178     LOAD_CONST                      25: -425000000
        180     STORE_NAME                      29: MIN_EMIN
        182     LOAD_NAME                       29: MIN_EMIN
        184     LOAD_NAME                       27: MAX_PREC
        186     LOAD_CONST                      26: 1
        188     BINARY_SUBTRACT                 
        190     BINARY_SUBTRACT                 
        192     STORE_NAME                      30: MIN_ETINY
        194     LOAD_BUILD_CLASS                
        196     LOAD_CONST                      27: <CODE> DecimalException
        198     LOAD_CONST                      28: 'DecimalException'
        200     MAKE_FUNCTION                   0
        202     LOAD_CONST                      28: 'DecimalException'
        204     LOAD_NAME                       31: ArithmeticError
        206     CALL_FUNCTION                   3
        208     STORE_NAME                      32: DecimalException
        210     LOAD_BUILD_CLASS                
        212     LOAD_CONST                      29: <CODE> Clamped
        214     LOAD_CONST                      30: 'Clamped'
        216     MAKE_FUNCTION                   0
        218     LOAD_CONST                      30: 'Clamped'
        220     LOAD_NAME                       32: DecimalException
        222     CALL_FUNCTION                   3
        224     STORE_NAME                      33: Clamped
        226     LOAD_BUILD_CLASS                
        228     LOAD_CONST                      31: <CODE> InvalidOperation
        230     LOAD_CONST                      32: 'InvalidOperation'
        232     MAKE_FUNCTION                   0
        234     LOAD_CONST                      32: 'InvalidOperation'
        236     LOAD_NAME                       32: DecimalException
        238     CALL_FUNCTION                   3
        240     STORE_NAME                      34: InvalidOperation
        242     LOAD_BUILD_CLASS                
        244     LOAD_CONST                      33: <CODE> ConversionSyntax
        246     LOAD_CONST                      34: 'ConversionSyntax'
        248     MAKE_FUNCTION                   0
        250     LOAD_CONST                      34: 'ConversionSyntax'
        252     LOAD_NAME                       34: InvalidOperation
        254     CALL_FUNCTION                   3
        256     STORE_NAME                      35: ConversionSyntax
        258     LOAD_BUILD_CLASS                
        260     LOAD_CONST                      35: <CODE> DivisionByZero
        262     LOAD_CONST                      36: 'DivisionByZero'
        264     MAKE_FUNCTION                   0
        266     LOAD_CONST                      36: 'DivisionByZero'
        268     LOAD_NAME                       32: DecimalException
        270     LOAD_NAME                       36: ZeroDivisionError
        272     CALL_FUNCTION                   4
        274     STORE_NAME                      37: DivisionByZero
        276     LOAD_BUILD_CLASS                
        278     LOAD_CONST                      37: <CODE> DivisionImpossible
        280     LOAD_CONST                      38: 'DivisionImpossible'
        282     MAKE_FUNCTION                   0
        284     LOAD_CONST                      38: 'DivisionImpossible'
        286     LOAD_NAME                       34: InvalidOperation
        288     CALL_FUNCTION                   3
        290     STORE_NAME                      38: DivisionImpossible
        292     LOAD_BUILD_CLASS                
        294     LOAD_CONST                      39: <CODE> DivisionUndefined
        296     LOAD_CONST                      40: 'DivisionUndefined'
        298     MAKE_FUNCTION                   0
        300     LOAD_CONST                      40: 'DivisionUndefined'
        302     LOAD_NAME                       34: InvalidOperation
        304     LOAD_NAME                       36: ZeroDivisionError
        306     CALL_FUNCTION                   4
        308     STORE_NAME                      39: DivisionUndefined
        310     LOAD_BUILD_CLASS                
        312     LOAD_CONST                      41: <CODE> Inexact
        314     LOAD_CONST                      42: 'Inexact'
        316     MAKE_FUNCTION                   0
        318     LOAD_CONST                      42: 'Inexact'
        320     LOAD_NAME                       32: DecimalException
        322     CALL_FUNCTION                   3
        324     STORE_NAME                      40: Inexact
        326     LOAD_BUILD_CLASS                
        328     LOAD_CONST                      43: <CODE> InvalidContext
        330     LOAD_CONST                      44: 'InvalidContext'
        332     MAKE_FUNCTION                   0
        334     LOAD_CONST                      44: 'InvalidContext'
        336     LOAD_NAME                       34: InvalidOperation
        338     CALL_FUNCTION                   3
        340     STORE_NAME                      41: InvalidContext
        342     LOAD_BUILD_CLASS                
        344     LOAD_CONST                      45: <CODE> Rounded
        346     LOAD_CONST                      46: 'Rounded'
        348     MAKE_FUNCTION                   0
        350     LOAD_CONST                      46: 'Rounded'
        352     LOAD_NAME                       32: DecimalException
        354     CALL_FUNCTION                   3
        356     STORE_NAME                      42: Rounded
        358     LOAD_BUILD_CLASS                
        360     LOAD_CONST                      47: <CODE> Subnormal
        362     LOAD_CONST                      48: 'Subnormal'
        364     MAKE_FUNCTION                   0
        366     LOAD_CONST                      48: 'Subnormal'
        368     LOAD_NAME                       32: DecimalException
        370     CALL_FUNCTION                   3
        372     STORE_NAME                      43: Subnormal
        374     LOAD_BUILD_CLASS                
        376     LOAD_CONST                      49: <CODE> Overflow
        378     LOAD_CONST                      50: 'Overflow'
        380     MAKE_FUNCTION                   0
        382     LOAD_CONST                      50: 'Overflow'
        384     LOAD_NAME                       40: Inexact
        386     LOAD_NAME                       42: Rounded
        388     CALL_FUNCTION                   4
        390     STORE_NAME                      44: Overflow
        392     LOAD_BUILD_CLASS                
        394     LOAD_CONST                      51: <CODE> Underflow
        396     LOAD_CONST                      52: 'Underflow'
        398     MAKE_FUNCTION                   0
        400     LOAD_CONST                      52: 'Underflow'
        402     LOAD_NAME                       40: Inexact
        404     LOAD_NAME                       42: Rounded
        406     LOAD_NAME                       43: Subnormal
        408     CALL_FUNCTION                   5
        410     STORE_NAME                      45: Underflow
        412     LOAD_BUILD_CLASS                
        414     LOAD_CONST                      53: <CODE> FloatOperation
        416     LOAD_CONST                      54: 'FloatOperation'
        418     MAKE_FUNCTION                   0
        420     LOAD_CONST                      54: 'FloatOperation'
        422     LOAD_NAME                       32: DecimalException
        424     LOAD_NAME                       46: TypeError
        426     CALL_FUNCTION                   4
        428     STORE_NAME                      47: FloatOperation
        430     LOAD_NAME                       33: Clamped
        432     LOAD_NAME                       37: DivisionByZero
        434     LOAD_NAME                       40: Inexact
        436     LOAD_NAME                       44: Overflow
        438     LOAD_NAME                       42: Rounded
        440     LOAD_NAME                       45: Underflow
        442     LOAD_NAME                       34: InvalidOperation
        444     LOAD_NAME                       43: Subnormal
        446     LOAD_NAME                       47: FloatOperation
        448     BUILD_LIST                      9
        450     STORE_NAME                      48: _signals
        452     LOAD_NAME                       35: ConversionSyntax
        454     LOAD_NAME                       34: InvalidOperation
        456     LOAD_NAME                       38: DivisionImpossible
        458     LOAD_NAME                       34: InvalidOperation
        460     LOAD_NAME                       39: DivisionUndefined
        462     LOAD_NAME                       34: InvalidOperation
        464     LOAD_NAME                       41: InvalidContext
        466     LOAD_NAME                       34: InvalidOperation
        468     BUILD_MAP                       4
        470     STORE_NAME                      49: _condition_map
        472     LOAD_NAME                       16: ROUND_DOWN
        474     LOAD_NAME                       17: ROUND_HALF_UP
        476     LOAD_NAME                       18: ROUND_HALF_EVEN
        478     LOAD_NAME                       19: ROUND_CEILING
        480     LOAD_NAME                       20: ROUND_FLOOR
        482     LOAD_NAME                       21: ROUND_UP
        484     LOAD_NAME                       22: ROUND_HALF_DOWN
        486     LOAD_NAME                       23: ROUND_05UP
        488     BUILD_TUPLE                     8
        490     STORE_NAME                      50: _rounding_modes
        492     LOAD_CONST                      5: 0
        494     LOAD_CONST                      6: None
        496     IMPORT_NAME                     51: contextvars
        498     STORE_NAME                      51: contextvars
        500     LOAD_NAME                       51: contextvars
        502     LOAD_METHOD                     52: ContextVar
        504     LOAD_CONST                      55: 'decimal_context'
        506     CALL_METHOD                     1
        508     STORE_NAME                      53: _current_context_var
        510     LOAD_CONST                      56: <CODE> getcontext
        512     LOAD_CONST                      57: 'getcontext'
        514     MAKE_FUNCTION                   0
        516     STORE_NAME                      54: getcontext
        518     LOAD_CONST                      58: <CODE> setcontext
        520     LOAD_CONST                      59: 'setcontext'
        522     MAKE_FUNCTION                   0
        524     STORE_NAME                      55: setcontext
        526     DELETE_NAME                     51: contextvars
        528     LOAD_CONST                      141: (None,)
        530     LOAD_CONST                      60: <CODE> localcontext
        532     LOAD_CONST                      61: 'localcontext'
        534     MAKE_FUNCTION                   1
        536     STORE_NAME                      56: localcontext
        538     LOAD_BUILD_CLASS                
        540     LOAD_CONST                      62: <CODE> Decimal
        542     LOAD_CONST                      63: 'Decimal'
        544     MAKE_FUNCTION                   0
        546     LOAD_CONST                      63: 'Decimal'
        548     LOAD_NAME                       57: object
        550     CALL_FUNCTION                   3
        552     STORE_NAME                      58: Decimal
        554     LOAD_CONST                      142: (False,)
        556     LOAD_CONST                      65: <CODE> _dec_from_triple
        558     LOAD_CONST                      66: '_dec_from_triple'
        560     MAKE_FUNCTION                   1
        562     STORE_NAME                      59: _dec_from_triple
        564     LOAD_NAME                       9: _numbers
        566     LOAD_ATTR                       60: Number
        568     LOAD_METHOD                     61: register
        570     LOAD_NAME                       58: Decimal
        572     CALL_METHOD                     1
        574     POP_TOP                         
        576     LOAD_BUILD_CLASS                
        578     LOAD_CONST                      67: <CODE> _ContextManager
        580     LOAD_CONST                      68: '_ContextManager'
        582     MAKE_FUNCTION                   0
        584     LOAD_CONST                      68: '_ContextManager'
        586     LOAD_NAME                       57: object
        588     CALL_FUNCTION                   3
        590     STORE_NAME                      62: _ContextManager
        592     LOAD_BUILD_CLASS                
        594     LOAD_CONST                      69: <CODE> Context
        596     LOAD_CONST                      70: 'Context'
        598     MAKE_FUNCTION                   0
        600     LOAD_CONST                      70: 'Context'
        602     LOAD_NAME                       57: object
        604     CALL_FUNCTION                   3
        606     STORE_NAME                      63: Context
        608     LOAD_BUILD_CLASS                
        610     LOAD_CONST                      71: <CODE> _WorkRep
        612     LOAD_CONST                      72: '_WorkRep'
        614     MAKE_FUNCTION                   0
        616     LOAD_CONST                      72: '_WorkRep'
        618     LOAD_NAME                       57: object
        620     CALL_FUNCTION                   3
        622     STORE_NAME                      64: _WorkRep
        624     LOAD_CONST                      143: (0,)
        626     LOAD_CONST                      73: <CODE> _normalize
        628     LOAD_CONST                      74: '_normalize'
        630     MAKE_FUNCTION                   1
        632     STORE_NAME                      65: _normalize
        634     LOAD_NAME                       66: int
        636     LOAD_ATTR                       67: bit_length
        638     STORE_NAME                      68: _nbits
        640     LOAD_CONST                      75: <CODE> _decimal_lshift_exact
        642     LOAD_CONST                      76: '_decimal_lshift_exact'
        644     MAKE_FUNCTION                   0
        646     STORE_NAME                      69: _decimal_lshift_exact
        648     LOAD_CONST                      77: <CODE> _sqrt_nearest
        650     LOAD_CONST                      78: '_sqrt_nearest'
        652     MAKE_FUNCTION                   0
        654     STORE_NAME                      70: _sqrt_nearest
        656     LOAD_CONST                      79: <CODE> _rshift_nearest
        658     LOAD_CONST                      80: '_rshift_nearest'
        660     MAKE_FUNCTION                   0
        662     STORE_NAME                      71: _rshift_nearest
        664     LOAD_CONST                      81: <CODE> _div_nearest
        666     LOAD_CONST                      82: '_div_nearest'
        668     MAKE_FUNCTION                   0
        670     STORE_NAME                      72: _div_nearest
        672     LOAD_CONST                      144: (8,)
        674     LOAD_CONST                      84: <CODE> _ilog
        676     LOAD_CONST                      85: '_ilog'
        678     MAKE_FUNCTION                   1
        680     STORE_NAME                      73: _ilog
        682     LOAD_CONST                      86: <CODE> _dlog10
        684     LOAD_CONST                      87: '_dlog10'
        686     MAKE_FUNCTION                   0
        688     STORE_NAME                      74: _dlog10
        690     LOAD_CONST                      88: <CODE> _dlog
        692     LOAD_CONST                      89: '_dlog'
        694     MAKE_FUNCTION                   0
        696     STORE_NAME                      75: _dlog
        698     LOAD_BUILD_CLASS                
        700     LOAD_CONST                      90: <CODE> _Log10Memoize
        702     LOAD_CONST                      91: '_Log10Memoize'
        704     MAKE_FUNCTION                   0
        706     LOAD_CONST                      91: '_Log10Memoize'
        708     LOAD_NAME                       57: object
        710     CALL_FUNCTION                   3
        712     STORE_NAME                      76: _Log10Memoize
        714     LOAD_NAME                       76: _Log10Memoize
        716     CALL_FUNCTION                   0
        718     LOAD_ATTR                       77: getdigits
        720     STORE_NAME                      78: _log10_digits
        722     LOAD_CONST                      144: (8,)
        724     LOAD_CONST                      92: <CODE> _iexp
        726     LOAD_CONST                      93: '_iexp'
        728     MAKE_FUNCTION                   1
        730     STORE_NAME                      79: _iexp
        732     LOAD_CONST                      94: <CODE> _dexp
        734     LOAD_CONST                      95: '_dexp'
        736     MAKE_FUNCTION                   0
        738     STORE_NAME                      80: _dexp
        740     LOAD_CONST                      96: <CODE> _dpower
        742     LOAD_CONST                      97: '_dpower'
        744     MAKE_FUNCTION                   0
        746     STORE_NAME                      81: _dpower
        748     LOAD_CONST                      98: 100
        750     LOAD_CONST                      99: 70
        752     LOAD_CONST                      100: 53
        754     LOAD_CONST                      101: 40
        756     LOAD_CONST                      102: 31
        758     LOAD_CONST                      103: 23
        760     LOAD_CONST                      104: 16
        762     LOAD_CONST                      105: 10
        764     LOAD_CONST                      106: 5
        766     LOAD_CONST                      107: ('1', '2', '3', '4', '5', '6', '7', '8', '9')
        768     BUILD_CONST_KEY_MAP             9
        770     BUILD_TUPLE                     1
        772     LOAD_CONST                      108: <CODE> _log10_lb
        774     LOAD_CONST                      109: '_log10_lb'
        776     MAKE_FUNCTION                   1
        778     STORE_NAME                      82: _log10_lb
        780     LOAD_CONST                      145: (False, False)
        782     LOAD_CONST                      110: <CODE> _convert_other
        784     LOAD_CONST                      111: '_convert_other'
        786     MAKE_FUNCTION                   1
        788     STORE_NAME                      83: _convert_other
        790     LOAD_CONST                      142: (False,)
        792     LOAD_CONST                      112: <CODE> _convert_for_comparison
        794     LOAD_CONST                      113: '_convert_for_comparison'
        796     MAKE_FUNCTION                   1
        798     STORE_NAME                      84: _convert_for_comparison
        800     LOAD_NAME                       63: Context
        802     LOAD_CONST                      114: 28
        804     LOAD_NAME                       18: ROUND_HALF_EVEN
        806     LOAD_NAME                       37: DivisionByZero
        808     LOAD_NAME                       44: Overflow
        810     LOAD_NAME                       34: InvalidOperation
        812     BUILD_LIST                      3
        814     BUILD_LIST                      0
        816     LOAD_CONST                      115: 999999
        818     LOAD_CONST                      116: -999999
        820     LOAD_CONST                      26: 1
        822     LOAD_CONST                      5: 0
        824     LOAD_CONST                      117: ('prec', 'rounding', 'traps', 'flags', 'Emax', 'Emin', 'capitals', 'clamp')
        826     CALL_FUNCTION_KW                8
        828     STORE_NAME                      85: DefaultContext
        830     LOAD_NAME                       63: Context
        832     LOAD_CONST                      118: 9
        834     LOAD_NAME                       17: ROUND_HALF_UP
        836     LOAD_NAME                       37: DivisionByZero
        838     LOAD_NAME                       44: Overflow
        840     LOAD_NAME                       34: InvalidOperation
        842     LOAD_NAME                       33: Clamped
        844     LOAD_NAME                       45: Underflow
        846     BUILD_LIST                      5
        848     BUILD_LIST                      0
        850     LOAD_CONST                      119: ('prec', 'rounding', 'traps', 'flags')
        852     CALL_FUNCTION_KW                4
        854     STORE_NAME                      86: BasicContext
        856     LOAD_NAME                       63: Context
        858     LOAD_CONST                      118: 9
        860     LOAD_NAME                       18: ROUND_HALF_EVEN
        862     BUILD_LIST                      0
        864     BUILD_LIST                      0
        866     LOAD_CONST                      119: ('prec', 'rounding', 'traps', 'flags')
        868     CALL_FUNCTION_KW                4
        870     STORE_NAME                      87: ExtendedContext
        872     LOAD_CONST                      5: 0
        874     LOAD_CONST                      6: None
        876     IMPORT_NAME                     88: re
        878     STORE_NAME                      88: re
        880     LOAD_NAME                       88: re
        882     LOAD_METHOD                     89: compile
        884     LOAD_CONST                      120: '        # A numeric string consists of:\n#    \\s*\n    (?P<sign>[-+])?              # an optional sign, followed by either...\n    (\n        (?=\\d|\\.\\d)              # ...a number (with at least one digit)\n        (?P<int>\\d*)             # having a (possibly empty) integer part\n        (\\.(?P<frac>\\d*))?       # followed by an optional fractional part\n        (E(?P<exp>[-+]?\\d+))?    # followed by an optional exponent, or...\n    |\n        Inf(inity)?              # ...an infinity, or...\n    |\n        (?P<signal>s)?           # ...an (optionally signaling)\n        NaN                      # NaN\n        (?P<diag>\\d*)            # with (possibly empty) diagnostic info.\n    )\n#    \\s*\n    \\Z\n'
        886     LOAD_NAME                       88: re
        888     LOAD_ATTR                       90: VERBOSE
        890     LOAD_NAME                       88: re
        892     LOAD_ATTR                       91: IGNORECASE
        894     BINARY_OR                       
        896     CALL_METHOD                     2
        898     LOAD_ATTR                       92: match
        900     STORE_NAME                      93: _parser
        902     LOAD_NAME                       88: re
        904     LOAD_METHOD                     89: compile
        906     LOAD_CONST                      121: '0*$'
        908     CALL_METHOD                     1
        910     LOAD_ATTR                       92: match
        912     STORE_NAME                      94: _all_zeros
        914     LOAD_NAME                       88: re
        916     LOAD_METHOD                     89: compile
        918     LOAD_CONST                      122: '50*$'
        920     CALL_METHOD                     1
        922     LOAD_ATTR                       92: match
        924     STORE_NAME                      95: _exact_half
        926     LOAD_NAME                       88: re
        928     LOAD_METHOD                     89: compile
        930     LOAD_CONST                      123: '\\A\n(?:\n   (?P<fill>.)?\n   (?P<align>[<>=^])\n)?\n(?P<sign>[-+ ])?\n(?P<alt>\\#)?\n(?P<zeropad>0)?\n(?P<minimumwidth>(?!0)\\d+)?\n(?P<thousands_sep>,)?\n(?:\\.(?P<precision>0|(?!0)\\d+))?\n(?P<type>[eEfFgGn%])?\n\\Z\n'
        932     LOAD_NAME                       88: re
        934     LOAD_ATTR                       90: VERBOSE
        936     LOAD_NAME                       88: re
        938     LOAD_ATTR                       96: DOTALL
        940     BINARY_OR                       
        942     CALL_METHOD                     2
        944     STORE_NAME                      97: _parse_format_specifier_regex
        946     DELETE_NAME                     88: re
        948     SETUP_FINALLY                   6 (to 962)
        950     LOAD_CONST                      5: 0
        952     LOAD_CONST                      6: None
        954     IMPORT_NAME                     98: locale
        956     STORE_NAME                      99: _locale
        958     POP_BLOCK                       
        960     JUMP_FORWARD                    10 (to 982)
        962     DUP_TOP                         
        964     LOAD_NAME                       15: ImportError
        966     JUMP_IF_NOT_EXC_MATCH           490 (to 980)
        970     POP_TOP                         
        972     POP_TOP                         
        974     POP_TOP                         
        976     POP_EXCEPT                      
        978     JUMP_FORWARD                    1 (to 982)
        980     RERAISE                         0
        982     LOAD_CONST                      141: (None,)
        984     LOAD_CONST                      124: <CODE> _parse_format_specifier
        986     LOAD_CONST                      125: '_parse_format_specifier'
        988     MAKE_FUNCTION                   1
        990     STORE_NAME                      100: _parse_format_specifier
        992     LOAD_CONST                      126: <CODE> _format_align
        994     LOAD_CONST                      127: '_format_align'
        996     MAKE_FUNCTION                   0
        998     STORE_NAME                      101: _format_align
        1000    LOAD_CONST                      128: <CODE> _group_lengths
        1002    LOAD_CONST                      129: '_group_lengths'
        1004    MAKE_FUNCTION                   0
        1006    STORE_NAME                      102: _group_lengths
        1008    LOAD_CONST                      146: (1,)
        1010    LOAD_CONST                      130: <CODE> _insert_thousands_sep
        1012    LOAD_CONST                      131: '_insert_thousands_sep'
        1014    MAKE_FUNCTION                   1
        1016    STORE_NAME                      103: _insert_thousands_sep
        1018    LOAD_CONST                      132: <CODE> _format_sign
        1020    LOAD_CONST                      133: '_format_sign'
        1022    MAKE_FUNCTION                   0
        1024    STORE_NAME                      104: _format_sign
        1026    LOAD_CONST                      134: <CODE> _format_number
        1028    LOAD_CONST                      135: '_format_number'
        1030    MAKE_FUNCTION                   0
        1032    STORE_NAME                      105: _format_number
        1034    LOAD_NAME                       58: Decimal
        1036    LOAD_CONST                      136: 'Inf'
        1038    CALL_FUNCTION                   1
        1040    STORE_NAME                      106: _Infinity
        1042    LOAD_NAME                       58: Decimal
        1044    LOAD_CONST                      137: '-Inf'
        1046    CALL_FUNCTION                   1
        1048    STORE_NAME                      107: _NegativeInfinity
        1050    LOAD_NAME                       58: Decimal
        1052    LOAD_CONST                      138: 'NaN'
        1054    CALL_FUNCTION                   1
        1056    STORE_NAME                      108: _NaN
        1058    LOAD_NAME                       58: Decimal
        1060    LOAD_CONST                      5: 0
        1062    CALL_FUNCTION                   1
        1064    STORE_NAME                      109: _Zero
        1066    LOAD_NAME                       58: Decimal
        1068    LOAD_CONST                      26: 1
        1070    CALL_FUNCTION                   1
        1072    STORE_NAME                      110: _One
        1074    LOAD_NAME                       58: Decimal
        1076    LOAD_CONST                      139: -1
        1078    CALL_FUNCTION                   1
        1080    STORE_NAME                      111: _NegativeOne
        1082    LOAD_NAME                       106: _Infinity
        1084    LOAD_NAME                       107: _NegativeInfinity
        1086    BUILD_TUPLE                     2
        1088    STORE_NAME                      112: _SignedInfinity
        1090    LOAD_NAME                       10: sys
        1092    LOAD_ATTR                       113: hash_info
        1094    LOAD_ATTR                       114: modulus
        1096    STORE_NAME                      115: _PyHASH_MODULUS
        1098    LOAD_NAME                       10: sys
        1100    LOAD_ATTR                       113: hash_info
        1102    LOAD_ATTR                       116: inf
        1104    STORE_NAME                      117: _PyHASH_INF
        1106    LOAD_NAME                       10: sys
        1108    LOAD_ATTR                       113: hash_info
        1110    LOAD_ATTR                       118: nan
        1112    STORE_NAME                      119: _PyHASH_NAN
        1114    LOAD_NAME                       120: pow
        1116    LOAD_CONST                      105: 10
        1118    LOAD_NAME                       115: _PyHASH_MODULUS
        1120    LOAD_CONST                      140: 2
        1122    BINARY_SUBTRACT                 
        1124    LOAD_NAME                       115: _PyHASH_MODULUS
        1126    CALL_FUNCTION                   3
        1128    STORE_NAME                      121: _PyHASH_10INV
        1130    DELETE_NAME                     10: sys
        1132    LOAD_CONST                      6: None
        1134    RETURN_VALUE                    
