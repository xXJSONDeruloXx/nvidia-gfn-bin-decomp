argparse.pyc (Python 3.10)
[Code]
    File Name: argparse.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 8
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        '__version__'
        '__all__'
        'os'
        '_os'
        're'
        '_re'
        'sys'
        '_sys'
        'gettext'
        '_'
        'ngettext'
        'ImportError'
        'SUPPRESS'
        'OPTIONAL'
        'ZERO_OR_MORE'
        'ONE_OR_MORE'
        'PARSER'
        'REMAINDER'
        '_UNRECOGNIZED_ARGS_ATTR'
        'object'
        '_AttributeHolder'
        '_copy_items'
        'HelpFormatter'
        'RawDescriptionHelpFormatter'
        'RawTextHelpFormatter'
        'ArgumentDefaultsHelpFormatter'
        'MetavarTypeHelpFormatter'
        '_get_action_name'
        'Exception'
        'ArgumentError'
        'ArgumentTypeError'
        'Action'
        'BooleanOptionalAction'
        '_StoreAction'
        '_StoreConstAction'
        '_StoreTrueAction'
        '_StoreFalseAction'
        '_AppendAction'
        '_AppendConstAction'
        '_CountAction'
        '_HelpAction'
        '_VersionAction'
        '_SubParsersAction'
        '_ExtendAction'
        'FileType'
        'Namespace'
        '_ActionsContainer'
        '_ArgumentGroup'
        '_MutuallyExclusiveGroup'
        'ArgumentParser'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        "Command-line parsing library\n\nThis module is an optparse-inspired command-line parsing library that:\n\n    - handles both optional and positional arguments\n    - produces highly informative usage messages\n    - supports parsers that dispatch to sub-parsers\n\nThe following is a simple usage example that sums integers from the\ncommand-line and writes the result to a file::\n\n    parser = argparse.ArgumentParser(\n        description='sum the integers at the command line')\n    parser.add_argument(\n        'integers', metavar='int', nargs='+', type=int,\n        help='an integer to be summed')\n    parser.add_argument(\n        '--log', default=sys.stdout, type=argparse.FileType('w'),\n        help='the file where the sum should be written')\n    args = parser.parse_args()\n    args.log.write('%s' % sum(args.integers))\n    args.log.close()\n\nThe module contains the following public classes:\n\n    - ArgumentParser -- The main entry point for command-line parsing. As the\n        example above shows, the add_argument() method is used to populate\n        the parser with actions for optional and positional arguments. Then\n        the parse_args() method is invoked to convert the args at the\n        command-line into an object with attributes.\n\n    - ArgumentError -- The exception raised by ArgumentParser objects when\n        there are errors with the parser's actions. Errors raised while\n        parsing the command-line are caught by ArgumentParser and emitted\n        as command-line messages.\n\n    - FileType -- A factory for defining types of files to be created. As the\n        example above shows, instances of FileType are typically passed as\n        the type= argument of add_argument() calls.\n\n    - Action -- The base class for parser actions. Typically actions are\n        selected by passing strings like 'store_true' or 'append_const' to\n        the action= argument of add_argument(). However, for greater\n        customization of ArgumentParser actions, subclasses of Action may\n        be defined and passed as the action= argument.\n\n    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,\n        ArgumentDefaultsHelpFormatter -- Formatter classes which\n        may be passed as the formatter_class= argument to the\n        ArgumentParser constructor. HelpFormatter is the default,\n        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser\n        not to change the formatting for help text, and\n        ArgumentDefaultsHelpFormatter adds information about argument defaults\n        to the help.\n\nAll other classes in this module are considered implementation details.\n(Also note that HelpFormatter and RawDescriptionHelpFormatter are only\nconsidered public as object names -- the API of the formatter objects is\nstill considered an implementation detail.)\n"
        '1.1'
        (
            'ArgumentParser'
            'ArgumentError'
            'ArgumentTypeError'
            'BooleanOptionalAction'
            'FileType'
            'HelpFormatter'
            'ArgumentDefaultsHelpFormatter'
            'RawDescriptionHelpFormatter'
            'RawTextHelpFormatter'
            'MetavarTypeHelpFormatter'
            'Namespace'
            'Action'
            'ONE_OR_MORE'
            'OPTIONAL'
            'PARSER'
            'REMAINDER'
            'SUPPRESS'
            'ZERO_OR_MORE'
        )
        0
        None
        (
            'gettext'
            'ngettext'
        )
        [Code]
            File Name: argparse.py
            Object Name: _
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'message'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_FAST                       0: message
                2       RETURN_VALUE                    
        '_'
        [Code]
            File Name: argparse.py
            Object Name: ngettext
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'singular'
                'plural'
                'n'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                1
            [Disassembly]
                0       LOAD_FAST                       2: n
                2       LOAD_CONST                      1: 1
                4       COMPARE_OP                      2 (==)
                6       POP_JUMP_IF_FALSE               6 (to 12)
                8       LOAD_FAST                       0: singular
                10      RETURN_VALUE                    
                12      LOAD_FAST                       1: plural
                14      RETURN_VALUE                    
        'ngettext'
        '==SUPPRESS=='
        '?'
        '*'
        '+'
        'A...'
        '...'
        '_unrecognized_args'
        [Code]
            File Name: argparse.py
            Object Name: _AttributeHolder
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__repr__'
                '_get_kwargs'
                '_get_args'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_AttributeHolder'
                "Abstract base class that provides __repr__.\n\n    The __repr__ method returns a string in the format::\n        ClassName(attr=name, attr=name, ...)\n    The attributes are determined either by a class-level attribute,\n    '_kwarg_names', or by inspecting the instance __dict__.\n    "
                [Code]
                    File Name: argparse.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        '__name__'
                        '_get_args'
                        'append'
                        'repr'
                        '_get_kwargs'
                        'isidentifier'
                        'join'
                    [Var Names]
                        'self'
                        'type_name'
                        'arg_strings'
                        'star_args'
                        'arg'
                        'name'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s=%r'
                        '**%s'
                        '%s(%s)'
                        ', '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: type
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_ATTR                       1: __name__
                        8       STORE_FAST                      1: type_name
                        10      BUILD_LIST                      0
                        12      STORE_FAST                      2: arg_strings
                        14      BUILD_MAP                       0
                        16      STORE_FAST                      3: star_args
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     2: _get_args
                        22      CALL_METHOD                     0
                        24      GET_ITER                        
                        26      FOR_ITER                        9 (to 46)
                        28      STORE_FAST                      4: arg
                        30      LOAD_FAST                       2: arg_strings
                        32      LOAD_METHOD                     3: append
                        34      LOAD_GLOBAL                     4: repr
                        36      LOAD_FAST                       4: arg
                        38      CALL_FUNCTION                   1
                        40      CALL_METHOD                     1
                        42      POP_TOP                         
                        44      JUMP_ABSOLUTE                   13 (to 26)
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     5: _get_kwargs
                        50      CALL_METHOD                     0
                        52      GET_ITER                        
                        54      FOR_ITER                        22 (to 100)
                        56      UNPACK_SEQUENCE                 2
                        58      STORE_FAST                      5: name
                        60      STORE_FAST                      6: value
                        62      LOAD_FAST                       5: name
                        64      LOAD_METHOD                     6: isidentifier
                        66      CALL_METHOD                     0
                        68      POP_JUMP_IF_FALSE               45 (to 90)
                        70      LOAD_FAST                       2: arg_strings
                        72      LOAD_METHOD                     3: append
                        74      LOAD_CONST                      1: '%s=%r'
                        76      LOAD_FAST                       5: name
                        78      LOAD_FAST                       6: value
                        80      BUILD_TUPLE                     2
                        82      BINARY_MODULO                   
                        84      CALL_METHOD                     1
                        86      POP_TOP                         
                        88      JUMP_ABSOLUTE                   27 (to 54)
                        90      LOAD_FAST                       6: value
                        92      LOAD_FAST                       3: star_args
                        94      LOAD_FAST                       5: name
                        96      STORE_SUBSCR                    
                        98      JUMP_ABSOLUTE                   27 (to 54)
                        100     LOAD_FAST                       3: star_args
                        102     POP_JUMP_IF_FALSE               61 (to 122)
                        104     LOAD_FAST                       2: arg_strings
                        106     LOAD_METHOD                     3: append
                        108     LOAD_CONST                      2: '**%s'
                        110     LOAD_GLOBAL                     4: repr
                        112     LOAD_FAST                       3: star_args
                        114     CALL_FUNCTION                   1
                        116     BINARY_MODULO                   
                        118     CALL_METHOD                     1
                        120     POP_TOP                         
                        122     LOAD_CONST                      3: '%s(%s)'
                        124     LOAD_FAST                       1: type_name
                        126     LOAD_CONST                      4: ', '
                        128     LOAD_METHOD                     7: join
                        130     LOAD_FAST                       2: arg_strings
                        132     CALL_METHOD                     1
                        134     BUILD_TUPLE                     2
                        136     BINARY_MODULO                   
                        138     RETURN_VALUE                    
                '_AttributeHolder.__repr__'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_kwargs
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'list'
                        '__dict__'
                        'items'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: list
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: __dict__
                        6       LOAD_METHOD                     2: items
                        8       CALL_METHOD                     0
                        10      CALL_FUNCTION                   1
                        12      RETURN_VALUE                    
                '_AttributeHolder._get_kwargs'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_args
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       RETURN_VALUE                    
                '_AttributeHolder._get_args'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_AttributeHolder'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Abstract base class that provides __repr__.\n\n    The __repr__ method returns a string in the format::\n        ClassName(attr=name, attr=name, ...)\n    The attributes are determined either by a class-level attribute,\n    '_kwarg_names', or by inspecting the instance __dict__.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __repr__
                14      LOAD_CONST                      3: '_AttributeHolder.__repr__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __repr__
                20      LOAD_CONST                      4: <CODE> _get_kwargs
                22      LOAD_CONST                      5: '_AttributeHolder._get_kwargs'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: _get_kwargs
                28      LOAD_CONST                      6: <CODE> _get_args
                30      LOAD_CONST                      7: '_AttributeHolder._get_args'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: _get_args
                36      LOAD_CONST                      8: None
                38      RETURN_VALUE                    
        '_AttributeHolder'
        [Code]
            File Name: argparse.py
            Object Name: _copy_items
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'type'
                'list'
                'copy'
            [Var Names]
                'items'
                'copy'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                0
            [Disassembly]
                0       LOAD_FAST                       0: items
                2       LOAD_CONST                      0: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               6 (to 12)
                8       BUILD_LIST                      0
                10      RETURN_VALUE                    
                12      LOAD_GLOBAL                     0: type
                14      LOAD_FAST                       0: items
                16      CALL_FUNCTION                   1
                18      LOAD_GLOBAL                     1: list
                20      IS_OP                           0 (is)
                22      POP_JUMP_IF_FALSE               18 (to 36)
                24      LOAD_FAST                       0: items
                26      LOAD_CONST                      0: None
                28      LOAD_CONST                      0: None
                30      BUILD_SLICE                     2
                32      BINARY_SUBSCR                   
                34      RETURN_VALUE                    
                36      LOAD_CONST                      1: 0
                38      LOAD_CONST                      0: None
                40      IMPORT_NAME                     2: copy
                42      STORE_FAST                      1: copy
                44      LOAD_FAST                       1: copy
                46      LOAD_METHOD                     2: copy
                48      LOAD_FAST                       0: items
                50      CALL_METHOD                     1
                52      RETURN_VALUE                    
        '_copy_items'
        [Code]
            File Name: argparse.py
            Object Name: HelpFormatter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '_indent'
                '_dedent'
                'object'
                '_Section'
                '_add_item'
                'start_section'
                'end_section'
                'add_text'
                'add_usage'
                'add_argument'
                'add_arguments'
                'format_help'
                '_join_parts'
                '_format_usage'
                '_format_actions_usage'
                '_format_text'
                '_format_action'
                '_format_action_invocation'
                '_metavar_formatter'
                '_format_args'
                '_expand_help'
                '_iter_indented_subactions'
                '_split_lines'
                '_fill_text'
                '_get_help_string'
                '_get_default_metavar_for_optional'
                '_get_default_metavar_for_positional'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'HelpFormatter'
                'Formatter for generating usage messages and argument help strings.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    '
                2
                24
                None
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'shutil'
                        'get_terminal_size'
                        'columns'
                        'ImportError'
                        '_prog'
                        '_indent_increment'
                        'min'
                        'max'
                        '_max_help_position'
                        '_width'
                        '_current_indent'
                        '_level'
                        '_action_max_length'
                        '_Section'
                        '_root_section'
                        '_current_section'
                        '_re'
                        'compile'
                        'ASCII'
                        '_whitespace_matcher'
                        '_long_break_matcher'
                    [Var Names]
                        'self'
                        'prog'
                        'indent_increment'
                        'max_help_position'
                        'width'
                        '_shutil'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        2
                        70
                        20
                        '\\s+'
                        '\\n\\n\\n+'
                    [Disassembly]
                        0       LOAD_FAST                       4: width
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               31 (to 62)
                        8       SETUP_FINALLY                   15 (to 40)
                        10      LOAD_CONST                      1: 0
                        12      LOAD_CONST                      0: None
                        14      IMPORT_NAME                     0: shutil
                        16      STORE_FAST                      5: _shutil
                        18      LOAD_FAST                       5: _shutil
                        20      LOAD_METHOD                     1: get_terminal_size
                        22      CALL_METHOD                     0
                        24      LOAD_ATTR                       2: columns
                        26      STORE_FAST                      4: width
                        28      LOAD_FAST                       4: width
                        30      LOAD_CONST                      2: 2
                        32      INPLACE_SUBTRACT                
                        34      STORE_FAST                      4: width
                        36      POP_BLOCK                       
                        38      JUMP_FORWARD                    11 (to 62)
                        40      DUP_TOP                         
                        42      LOAD_GLOBAL                     3: ImportError
                        44      JUMP_IF_NOT_EXC_MATCH           30 (to 60)
                        46      POP_TOP                         
                        48      POP_TOP                         
                        50      POP_TOP                         
                        52      LOAD_CONST                      3: 70
                        54      STORE_FAST                      4: width
                        56      POP_EXCEPT                      
                        58      JUMP_FORWARD                    1 (to 62)
                        60      RERAISE                         0
                        62      LOAD_FAST                       1: prog
                        64      LOAD_FAST                       0: self
                        66      STORE_ATTR                      4: _prog
                        68      LOAD_FAST                       2: indent_increment
                        70      LOAD_FAST                       0: self
                        72      STORE_ATTR                      5: _indent_increment
                        74      LOAD_GLOBAL                     6: min
                        76      LOAD_FAST                       3: max_help_position
                        78      LOAD_GLOBAL                     7: max
                        80      LOAD_FAST                       4: width
                        82      LOAD_CONST                      4: 20
                        84      BINARY_SUBTRACT                 
                        86      LOAD_FAST                       2: indent_increment
                        88      LOAD_CONST                      2: 2
                        90      BINARY_MULTIPLY                 
                        92      CALL_FUNCTION                   2
                        94      CALL_FUNCTION                   2
                        96      LOAD_FAST                       0: self
                        98      STORE_ATTR                      8: _max_help_position
                        100     LOAD_FAST                       4: width
                        102     LOAD_FAST                       0: self
                        104     STORE_ATTR                      9: _width
                        106     LOAD_CONST                      1: 0
                        108     LOAD_FAST                       0: self
                        110     STORE_ATTR                      10: _current_indent
                        112     LOAD_CONST                      1: 0
                        114     LOAD_FAST                       0: self
                        116     STORE_ATTR                      11: _level
                        118     LOAD_CONST                      1: 0
                        120     LOAD_FAST                       0: self
                        122     STORE_ATTR                      12: _action_max_length
                        124     LOAD_FAST                       0: self
                        126     LOAD_METHOD                     13: _Section
                        128     LOAD_FAST                       0: self
                        130     LOAD_CONST                      0: None
                        132     CALL_METHOD                     2
                        134     LOAD_FAST                       0: self
                        136     STORE_ATTR                      14: _root_section
                        138     LOAD_FAST                       0: self
                        140     LOAD_ATTR                       14: _root_section
                        142     LOAD_FAST                       0: self
                        144     STORE_ATTR                      15: _current_section
                        146     LOAD_GLOBAL                     16: _re
                        148     LOAD_METHOD                     17: compile
                        150     LOAD_CONST                      5: '\\s+'
                        152     LOAD_GLOBAL                     16: _re
                        154     LOAD_ATTR                       18: ASCII
                        156     CALL_METHOD                     2
                        158     LOAD_FAST                       0: self
                        160     STORE_ATTR                      19: _whitespace_matcher
                        162     LOAD_GLOBAL                     16: _re
                        164     LOAD_METHOD                     17: compile
                        166     LOAD_CONST                      6: '\\n\\n\\n+'
                        168     CALL_METHOD                     1
                        170     LOAD_FAST                       0: self
                        172     STORE_ATTR                      20: _long_break_matcher
                        174     LOAD_CONST                      0: None
                        176     RETURN_VALUE                    
                'HelpFormatter.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: _indent
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_current_indent'
                        '_indent_increment'
                        '_level'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       DUP_TOP                         
                        4       LOAD_ATTR                       0: _current_indent
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _indent_increment
                        10      INPLACE_ADD                     
                        12      ROT_TWO                         
                        14      STORE_ATTR                      0: _current_indent
                        16      LOAD_FAST                       0: self
                        18      DUP_TOP                         
                        20      LOAD_ATTR                       2: _level
                        22      LOAD_CONST                      1: 1
                        24      INPLACE_ADD                     
                        26      ROT_TWO                         
                        28      STORE_ATTR                      2: _level
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'HelpFormatter._indent'
                [Code]
                    File Name: argparse.py
                    Object Name: _dedent
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_current_indent'
                        '_indent_increment'
                        '_level'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'Indent decreased below 0.'
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       DUP_TOP                         
                        4       LOAD_ATTR                       0: _current_indent
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _indent_increment
                        10      INPLACE_SUBTRACT                
                        12      ROT_TWO                         
                        14      STORE_ATTR                      0: _current_indent
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       0: _current_indent
                        20      LOAD_CONST                      1: 0
                        22      COMPARE_OP                      5 (>=)
                        24      POP_JUMP_IF_TRUE                17 (to 34)
                        26      LOAD_ASSERTION_ERROR            
                        28      LOAD_CONST                      2: 'Indent decreased below 0.'
                        30      CALL_FUNCTION                   1
                        32      RAISE_VARARGS                   1
                        34      LOAD_FAST                       0: self
                        36      DUP_TOP                         
                        38      LOAD_ATTR                       2: _level
                        40      LOAD_CONST                      3: 1
                        42      INPLACE_SUBTRACT                
                        44      ROT_TWO                         
                        46      STORE_ATTR                      2: _level
                        48      LOAD_CONST                      0: None
                        50      RETURN_VALUE                    
                'HelpFormatter._dedent'
                [Code]
                    File Name: argparse.py
                    Object Name: _Section
                    Arg Count: 0
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 0
                    Stack Size: 3
                    Flags: 0x00000040 (CO_NOFREE)
                    [Names]
                        '__name__'
                        '__module__'
                        '__qualname__'
                        '__init__'
                        'format_help'
                    [Var Names]
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'HelpFormatter._Section'
                        None
                        [Code]
                            File Name: argparse.py
                            Object Name: __init__
                            Arg Count: 4
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 4
                            Stack Size: 2
                            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                            [Names]
                                'formatter'
                                'parent'
                                'heading'
                                'items'
                            [Var Names]
                                'self'
                                'formatter'
                                'parent'
                                'heading'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_FAST                       1: formatter
                                2       LOAD_FAST                       0: self
                                4       STORE_ATTR                      0: formatter
                                6       LOAD_FAST                       2: parent
                                8       LOAD_FAST                       0: self
                                10      STORE_ATTR                      1: parent
                                12      LOAD_FAST                       3: heading
                                14      LOAD_FAST                       0: self
                                16      STORE_ATTR                      2: heading
                                18      BUILD_LIST                      0
                                20      LOAD_FAST                       0: self
                                22      STORE_ATTR                      3: items
                                24      LOAD_CONST                      0: None
                                26      RETURN_VALUE                    
                        'HelpFormatter._Section.__init__'
                        [Code]
                            File Name: argparse.py
                            Object Name: format_help
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 5
                            Stack Size: 5
                            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                            [Names]
                                'parent'
                                'formatter'
                                '_indent'
                                '_join_parts'
                                'items'
                                '_dedent'
                                'heading'
                                'SUPPRESS'
                                '_current_indent'
                            [Var Names]
                                'self'
                                'join'
                                'item_help'
                                'current_indent'
                                'heading'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                                [Code]
                                    File Name: argparse.py
                                    Object Name: <listcomp>
                                    Arg Count: 1
                                    Pos Only Arg Count: 0
                                    KW Only Arg Count: 0
                                    Locals: 3
                                    Stack Size: 4
                                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                                    [Names]
                                    [Var Names]
                                        '.0'
                                        'func'
                                        'args'
                                    [Free Vars]
                                    [Cell Vars]
                                    [Constants]
                                    [Disassembly]
                                        0       BUILD_LIST                      0
                                        2       LOAD_FAST                       0: .0
                                        4       FOR_ITER                        8 (to 22)
                                        6       UNPACK_SEQUENCE                 2
                                        8       STORE_FAST                      1: func
                                        10      STORE_FAST                      2: args
                                        12      LOAD_FAST                       1: func
                                        14      LOAD_FAST                       2: args
                                        16      CALL_FUNCTION_EX                0
                                        18      LIST_APPEND                     2
                                        20      JUMP_ABSOLUTE                   2 (to 4)
                                        22      RETURN_VALUE                    
                                'HelpFormatter._Section.format_help.<locals>.<listcomp>'
                                ''
                                '%*s%s:\n'
                                '\n'
                            [Disassembly]
                                0       LOAD_FAST                       0: self
                                2       LOAD_ATTR                       0: parent
                                4       LOAD_CONST                      0: None
                                6       IS_OP                           1 (is not)
                                8       POP_JUMP_IF_FALSE               10 (to 20)
                                10      LOAD_FAST                       0: self
                                12      LOAD_ATTR                       1: formatter
                                14      LOAD_METHOD                     2: _indent
                                16      CALL_METHOD                     0
                                18      POP_TOP                         
                                20      LOAD_FAST                       0: self
                                22      LOAD_ATTR                       1: formatter
                                24      LOAD_ATTR                       3: _join_parts
                                26      STORE_FAST                      1: join
                                28      LOAD_FAST                       1: join
                                30      LOAD_CONST                      1: <CODE> <listcomp>
                                32      LOAD_CONST                      2: 'HelpFormatter._Section.format_help.<locals>.<listcomp>'
                                34      MAKE_FUNCTION                   0
                                36      LOAD_FAST                       0: self
                                38      LOAD_ATTR                       4: items
                                40      GET_ITER                        
                                42      CALL_FUNCTION                   1
                                44      CALL_FUNCTION                   1
                                46      STORE_FAST                      2: item_help
                                48      LOAD_FAST                       0: self
                                50      LOAD_ATTR                       0: parent
                                52      LOAD_CONST                      0: None
                                54      IS_OP                           1 (is not)
                                56      POP_JUMP_IF_FALSE               34 (to 68)
                                58      LOAD_FAST                       0: self
                                60      LOAD_ATTR                       1: formatter
                                62      LOAD_METHOD                     5: _dedent
                                64      CALL_METHOD                     0
                                66      POP_TOP                         
                                68      LOAD_FAST                       2: item_help
                                70      POP_JUMP_IF_TRUE                38 (to 76)
                                72      LOAD_CONST                      3: ''
                                74      RETURN_VALUE                    
                                76      LOAD_FAST                       0: self
                                78      LOAD_ATTR                       6: heading
                                80      LOAD_GLOBAL                     7: SUPPRESS
                                82      IS_OP                           1 (is not)
                                84      POP_JUMP_IF_FALSE               61 (to 122)
                                86      LOAD_FAST                       0: self
                                88      LOAD_ATTR                       6: heading
                                90      LOAD_CONST                      0: None
                                92      IS_OP                           1 (is not)
                                94      POP_JUMP_IF_FALSE               61 (to 122)
                                96      LOAD_FAST                       0: self
                                98      LOAD_ATTR                       1: formatter
                                100     LOAD_ATTR                       8: _current_indent
                                102     STORE_FAST                      3: current_indent
                                104     LOAD_CONST                      4: '%*s%s:\n'
                                106     LOAD_FAST                       3: current_indent
                                108     LOAD_CONST                      3: ''
                                110     LOAD_FAST                       0: self
                                112     LOAD_ATTR                       6: heading
                                114     BUILD_TUPLE                     3
                                116     BINARY_MODULO                   
                                118     STORE_FAST                      4: heading
                                120     JUMP_FORWARD                    2 (to 126)
                                122     LOAD_CONST                      3: ''
                                124     STORE_FAST                      4: heading
                                126     LOAD_FAST                       1: join
                                128     LOAD_CONST                      5: '\n'
                                130     LOAD_FAST                       4: heading
                                132     LOAD_FAST                       2: item_help
                                134     LOAD_CONST                      5: '\n'
                                136     BUILD_LIST                      4
                                138     CALL_FUNCTION                   1
                                140     RETURN_VALUE                    
                        'HelpFormatter._Section.format_help'
                        (
                            None
                        )
                    [Disassembly]
                        0       LOAD_NAME                       0: __name__
                        2       STORE_NAME                      1: __module__
                        4       LOAD_CONST                      0: 'HelpFormatter._Section'
                        6       STORE_NAME                      2: __qualname__
                        8       LOAD_CONST                      6: (None,)
                        10      LOAD_CONST                      2: <CODE> __init__
                        12      LOAD_CONST                      3: 'HelpFormatter._Section.__init__'
                        14      MAKE_FUNCTION                   1
                        16      STORE_NAME                      3: __init__
                        18      LOAD_CONST                      4: <CODE> format_help
                        20      LOAD_CONST                      5: 'HelpFormatter._Section.format_help'
                        22      MAKE_FUNCTION                   0
                        24      STORE_NAME                      4: format_help
                        26      LOAD_CONST                      1: None
                        28      RETURN_VALUE                    
                '_Section'
                [Code]
                    File Name: argparse.py
                    Object Name: _add_item
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_current_section'
                        'items'
                        'append'
                    [Var Names]
                        'self'
                        'func'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _current_section
                        4       LOAD_ATTR                       1: items
                        6       LOAD_METHOD                     2: append
                        8       LOAD_FAST                       1: func
                        10      LOAD_FAST                       2: args
                        12      BUILD_TUPLE                     2
                        14      CALL_METHOD                     1
                        16      POP_TOP                         
                        18      LOAD_CONST                      0: None
                        20      RETURN_VALUE                    
                'HelpFormatter._add_item'
                [Code]
                    File Name: argparse.py
                    Object Name: start_section
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_indent'
                        '_Section'
                        '_current_section'
                        '_add_item'
                        'format_help'
                    [Var Names]
                        'self'
                        'heading'
                        'section'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _indent
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     1: _Section
                        12      LOAD_FAST                       0: self
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _current_section
                        18      LOAD_FAST                       1: heading
                        20      CALL_METHOD                     3
                        22      STORE_FAST                      2: section
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     3: _add_item
                        28      LOAD_FAST                       2: section
                        30      LOAD_ATTR                       4: format_help
                        32      BUILD_LIST                      0
                        34      CALL_METHOD                     2
                        36      POP_TOP                         
                        38      LOAD_FAST                       2: section
                        40      LOAD_FAST                       0: self
                        42      STORE_ATTR                      2: _current_section
                        44      LOAD_CONST                      0: None
                        46      RETURN_VALUE                    
                'HelpFormatter.start_section'
                [Code]
                    File Name: argparse.py
                    Object Name: end_section
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_current_section'
                        'parent'
                        '_dedent'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _current_section
                        4       LOAD_ATTR                       1: parent
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      0: _current_section
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     2: _dedent
                        14      CALL_METHOD                     0
                        16      POP_TOP                         
                        18      LOAD_CONST                      0: None
                        20      RETURN_VALUE                    
                'HelpFormatter.end_section'
                [Code]
                    File Name: argparse.py
                    Object Name: add_text
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'SUPPRESS'
                        '_add_item'
                        '_format_text'
                    [Var Names]
                        'self'
                        'text'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: text
                        2       LOAD_GLOBAL                     0: SUPPRESS
                        4       IS_OP                           1 (is not)
                        6       POP_JUMP_IF_FALSE               18 (to 36)
                        8       LOAD_FAST                       1: text
                        10      LOAD_CONST                      0: None
                        12      IS_OP                           1 (is not)
                        14      POP_JUMP_IF_FALSE               20 (to 40)
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     1: _add_item
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: _format_text
                        24      LOAD_FAST                       1: text
                        26      BUILD_LIST                      1
                        28      CALL_METHOD                     2
                        30      POP_TOP                         
                        32      LOAD_CONST                      0: None
                        34      RETURN_VALUE                    
                        36      LOAD_CONST                      0: None
                        38      RETURN_VALUE                    
                        40      LOAD_CONST                      0: None
                        42      RETURN_VALUE                    
                'HelpFormatter.add_text'
                [Code]
                    File Name: argparse.py
                    Object Name: add_usage
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'SUPPRESS'
                        '_add_item'
                        '_format_usage'
                    [Var Names]
                        'self'
                        'usage'
                        'actions'
                        'groups'
                        'prefix'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: usage
                        2       LOAD_GLOBAL                     0: SUPPRESS
                        4       IS_OP                           1 (is not)
                        6       POP_JUMP_IF_FALSE               19 (to 38)
                        8       LOAD_FAST                       1: usage
                        10      LOAD_FAST                       2: actions
                        12      LOAD_FAST                       3: groups
                        14      LOAD_FAST                       4: prefix
                        16      BUILD_TUPLE                     4
                        18      STORE_FAST                      5: args
                        20      LOAD_FAST                       0: self
                        22      LOAD_METHOD                     1: _add_item
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       2: _format_usage
                        28      LOAD_FAST                       5: args
                        30      CALL_METHOD                     2
                        32      POP_TOP                         
                        34      LOAD_CONST                      0: None
                        36      RETURN_VALUE                    
                        38      LOAD_CONST                      0: None
                        40      RETURN_VALUE                    
                'HelpFormatter.add_usage'
                [Code]
                    File Name: argparse.py
                    Object Name: add_argument
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'help'
                        'SUPPRESS'
                        '_format_action_invocation'
                        '_iter_indented_subactions'
                        'append'
                        'max'
                        'map'
                        'len'
                        '_current_indent'
                        '_action_max_length'
                        '_add_item'
                        '_format_action'
                    [Var Names]
                        'self'
                        'action'
                        'get_invocation'
                        'invocations'
                        'subaction'
                        'invocation_length'
                        'action_length'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: help
                        4       LOAD_GLOBAL                     1: SUPPRESS
                        6       IS_OP                           1 (is not)
                        8       POP_JUMP_IF_FALSE               57 (to 114)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _format_action_invocation
                        14      STORE_FAST                      2: get_invocation
                        16      LOAD_FAST                       2: get_invocation
                        18      LOAD_FAST                       1: action
                        20      CALL_FUNCTION                   1
                        22      BUILD_LIST                      1
                        24      STORE_FAST                      3: invocations
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     3: _iter_indented_subactions
                        30      LOAD_FAST                       1: action
                        32      CALL_METHOD                     1
                        34      GET_ITER                        
                        36      FOR_ITER                        9 (to 56)
                        38      STORE_FAST                      4: subaction
                        40      LOAD_FAST                       3: invocations
                        42      LOAD_METHOD                     4: append
                        44      LOAD_FAST                       2: get_invocation
                        46      LOAD_FAST                       4: subaction
                        48      CALL_FUNCTION                   1
                        50      CALL_METHOD                     1
                        52      POP_TOP                         
                        54      JUMP_ABSOLUTE                   18 (to 36)
                        56      LOAD_GLOBAL                     5: max
                        58      LOAD_GLOBAL                     6: map
                        60      LOAD_GLOBAL                     7: len
                        62      LOAD_FAST                       3: invocations
                        64      CALL_FUNCTION                   2
                        66      CALL_FUNCTION                   1
                        68      STORE_FAST                      5: invocation_length
                        70      LOAD_FAST                       5: invocation_length
                        72      LOAD_FAST                       0: self
                        74      LOAD_ATTR                       8: _current_indent
                        76      BINARY_ADD                      
                        78      STORE_FAST                      6: action_length
                        80      LOAD_GLOBAL                     5: max
                        82      LOAD_FAST                       0: self
                        84      LOAD_ATTR                       9: _action_max_length
                        86      LOAD_FAST                       6: action_length
                        88      CALL_FUNCTION                   2
                        90      LOAD_FAST                       0: self
                        92      STORE_ATTR                      9: _action_max_length
                        94      LOAD_FAST                       0: self
                        96      LOAD_METHOD                     10: _add_item
                        98      LOAD_FAST                       0: self
                        100     LOAD_ATTR                       11: _format_action
                        102     LOAD_FAST                       1: action
                        104     BUILD_LIST                      1
                        106     CALL_METHOD                     2
                        108     POP_TOP                         
                        110     LOAD_CONST                      0: None
                        112     RETURN_VALUE                    
                        114     LOAD_CONST                      0: None
                        116     RETURN_VALUE                    
                'HelpFormatter.add_argument'
                [Code]
                    File Name: argparse.py
                    Object Name: add_arguments
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'add_argument'
                    [Var Names]
                        'self'
                        'actions'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: actions
                        2       GET_ITER                        
                        4       FOR_ITER                        7 (to 20)
                        6       STORE_FAST                      2: action
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     0: add_argument
                        12      LOAD_FAST                       2: action
                        14      CALL_METHOD                     1
                        16      POP_TOP                         
                        18      JUMP_ABSOLUTE                   2 (to 4)
                        20      LOAD_CONST                      0: None
                        22      RETURN_VALUE                    
                'HelpFormatter.add_arguments'
                [Code]
                    File Name: argparse.py
                    Object Name: format_help
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_root_section'
                        'format_help'
                        '_long_break_matcher'
                        'sub'
                        'strip'
                    [Var Names]
                        'self'
                        'help'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '\n\n'
                        '\n'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _root_section
                        4       LOAD_METHOD                     1: format_help
                        6       CALL_METHOD                     0
                        8       STORE_FAST                      1: help
                        10      LOAD_FAST                       1: help
                        12      POP_JUMP_IF_FALSE               21 (to 42)
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _long_break_matcher
                        18      LOAD_METHOD                     3: sub
                        20      LOAD_CONST                      1: '\n\n'
                        22      LOAD_FAST                       1: help
                        24      CALL_METHOD                     2
                        26      STORE_FAST                      1: help
                        28      LOAD_FAST                       1: help
                        30      LOAD_METHOD                     4: strip
                        32      LOAD_CONST                      2: '\n'
                        34      CALL_METHOD                     1
                        36      LOAD_CONST                      2: '\n'
                        38      BINARY_ADD                      
                        40      STORE_FAST                      1: help
                        42      LOAD_FAST                       1: help
                        44      RETURN_VALUE                    
                'HelpFormatter.format_help'
                [Code]
                    File Name: argparse.py
                    Object Name: _join_parts
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'join'
                    [Var Names]
                        'self'
                        'part_strings'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ''
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'SUPPRESS'
                            [Var Names]
                                '.0'
                                'part'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        10 (to 26)
                                6       STORE_FAST                      1: part
                                8       LOAD_FAST                       1: part
                                10      POP_JUMP_IF_FALSE               12 (to 24)
                                12      LOAD_FAST                       1: part
                                14      LOAD_GLOBAL                     0: SUPPRESS
                                16      IS_OP                           1 (is not)
                                18      POP_JUMP_IF_FALSE               2 (to 4)
                                20      LOAD_FAST                       1: part
                                22      LIST_APPEND                     2
                                24      JUMP_ABSOLUTE                   2 (to 4)
                                26      RETURN_VALUE                    
                        'HelpFormatter._join_parts.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_METHOD                     0: join
                        4       LOAD_CONST                      2: <CODE> <listcomp>
                        6       LOAD_CONST                      3: 'HelpFormatter._join_parts.<locals>.<listcomp>'
                        8       MAKE_FUNCTION                   0
                        10      LOAD_FAST                       1: part_strings
                        12      GET_ITER                        
                        14      CALL_FUNCTION                   1
                        16      CALL_METHOD                     1
                        18      RETURN_VALUE                    
                'HelpFormatter._join_parts'
                [Code]
                    File Name: argparse.py
                    Object Name: _format_usage
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 20
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_'
                        'dict'
                        '_prog'
                        'option_strings'
                        'append'
                        '_format_actions_usage'
                        'join'
                        '_width'
                        '_current_indent'
                        'len'
                        '_re'
                        'findall'
                        'extend'
                    [Var Names]
                        'self'
                        'usage'
                        'actions'
                        'groups'
                        'prefix'
                        'prog'
                        'optionals'
                        'positionals'
                        'action'
                        'format'
                        'action_usage'
                        'part_regexp'
                        'opt_usage'
                        'pos_usage'
                        'opt_parts'
                        'pos_parts'
                        'get_lines'
                        'indent'
                        'lines'
                        'parts'
                    [Free Vars]
                    [Cell Vars]
                        'text_width'
                    [Constants]
                        None
                        'usage: '
                        (
                            'prog'
                        )
                        '%(prog)s'
                        ' '
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                            [Var Names]
                                '.0'
                                's'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        6 (to 18)
                                6       STORE_FAST                      1: s
                                8       LOAD_FAST                       1: s
                                10      POP_JUMP_IF_FALSE               2 (to 4)
                                12      LOAD_FAST                       1: s
                                14      LIST_APPEND                     2
                                16      JUMP_ABSOLUTE                   2 (to 4)
                                18      RETURN_VALUE                    
                        'HelpFormatter._format_usage.<locals>.<listcomp>'
                        '\\(.*?\\)+(?=\\s|$)|\\[.*?\\]+(?=\\s|$)|\\S+'
                        [Code]
                            File Name: argparse.py
                            Object Name: get_lines
                            Arg Count: 3
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 7
                            Stack Size: 7
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'len'
                                'append'
                                'join'
                            [Var Names]
                                'parts'
                                'indent'
                                'prefix'
                                'lines'
                                'line'
                                'line_len'
                                'part'
                            [Free Vars]
                                'text_width'
                            [Cell Vars]
                            [Constants]
                                None
                                1
                                ' '
                                0
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       STORE_FAST                      3: lines
                                4       BUILD_LIST                      0
                                6       STORE_FAST                      4: line
                                8       LOAD_FAST                       2: prefix
                                10      LOAD_CONST                      0: None
                                12      IS_OP                           1 (is not)
                                14      POP_JUMP_IF_FALSE               15 (to 30)
                                16      LOAD_GLOBAL                     0: len
                                18      LOAD_FAST                       2: prefix
                                20      CALL_FUNCTION                   1
                                22      LOAD_CONST                      1: 1
                                24      BINARY_SUBTRACT                 
                                26      STORE_FAST                      5: line_len
                                28      JUMP_FORWARD                    6 (to 42)
                                30      LOAD_GLOBAL                     0: len
                                32      LOAD_FAST                       1: indent
                                34      CALL_FUNCTION                   1
                                36      LOAD_CONST                      1: 1
                                38      BINARY_SUBTRACT                 
                                40      STORE_FAST                      5: line_len
                                42      LOAD_FAST                       0: parts
                                44      GET_ITER                        
                                46      FOR_ITER                        45 (to 138)
                                48      STORE_FAST                      6: part
                                50      LOAD_FAST                       5: line_len
                                52      LOAD_CONST                      1: 1
                                54      BINARY_ADD                      
                                56      LOAD_GLOBAL                     0: len
                                58      LOAD_FAST                       6: part
                                60      CALL_FUNCTION                   1
                                62      BINARY_ADD                      
                                64      LOAD_DEREF                      0: text_width
                                66      COMPARE_OP                      4 (>)
                                68      POP_JUMP_IF_FALSE               55 (to 110)
                                70      LOAD_FAST                       4: line
                                72      POP_JUMP_IF_FALSE               55 (to 110)
                                74      LOAD_FAST                       3: lines
                                76      LOAD_METHOD                     1: append
                                78      LOAD_FAST                       1: indent
                                80      LOAD_CONST                      2: ' '
                                82      LOAD_METHOD                     2: join
                                84      LOAD_FAST                       4: line
                                86      CALL_METHOD                     1
                                88      BINARY_ADD                      
                                90      CALL_METHOD                     1
                                92      POP_TOP                         
                                94      BUILD_LIST                      0
                                96      STORE_FAST                      4: line
                                98      LOAD_GLOBAL                     0: len
                                100     LOAD_FAST                       1: indent
                                102     CALL_FUNCTION                   1
                                104     LOAD_CONST                      1: 1
                                106     BINARY_SUBTRACT                 
                                108     STORE_FAST                      5: line_len
                                110     LOAD_FAST                       4: line
                                112     LOAD_METHOD                     1: append
                                114     LOAD_FAST                       6: part
                                116     CALL_METHOD                     1
                                118     POP_TOP                         
                                120     LOAD_FAST                       5: line_len
                                122     LOAD_GLOBAL                     0: len
                                124     LOAD_FAST                       6: part
                                126     CALL_FUNCTION                   1
                                128     LOAD_CONST                      1: 1
                                130     BINARY_ADD                      
                                132     INPLACE_ADD                     
                                134     STORE_FAST                      5: line_len
                                136     JUMP_ABSOLUTE                   23 (to 46)
                                138     LOAD_FAST                       4: line
                                140     POP_JUMP_IF_FALSE               81 (to 162)
                                142     LOAD_FAST                       3: lines
                                144     LOAD_METHOD                     1: append
                                146     LOAD_FAST                       1: indent
                                148     LOAD_CONST                      2: ' '
                                150     LOAD_METHOD                     2: join
                                152     LOAD_FAST                       4: line
                                154     CALL_METHOD                     1
                                156     BINARY_ADD                      
                                158     CALL_METHOD                     1
                                160     POP_TOP                         
                                162     LOAD_FAST                       2: prefix
                                164     LOAD_CONST                      0: None
                                166     IS_OP                           1 (is not)
                                168     POP_JUMP_IF_FALSE               97 (to 194)
                                170     LOAD_FAST                       3: lines
                                172     LOAD_CONST                      3: 0
                                174     BINARY_SUBSCR                   
                                176     LOAD_GLOBAL                     0: len
                                178     LOAD_FAST                       1: indent
                                180     CALL_FUNCTION                   1
                                182     LOAD_CONST                      0: None
                                184     BUILD_SLICE                     2
                                186     BINARY_SUBSCR                   
                                188     LOAD_FAST                       3: lines
                                190     LOAD_CONST                      3: 0
                                192     STORE_SUBSCR                    
                                194     LOAD_FAST                       3: lines
                                196     RETURN_VALUE                    
                        'HelpFormatter._format_usage.<locals>.get_lines'
                        0.75
                        1
                        '\n'
                        '%s%s\n\n'
                        (
                            None
                        )
                    [Disassembly]
                        0       LOAD_FAST                       4: prefix
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: _
                        10      LOAD_CONST                      1: 'usage: '
                        12      CALL_FUNCTION                   1
                        14      STORE_FAST                      4: prefix
                        16      LOAD_FAST                       1: usage
                        18      LOAD_CONST                      0: None
                        20      IS_OP                           1 (is not)
                        22      POP_JUMP_IF_FALSE               21 (to 42)
                        24      LOAD_FAST                       1: usage
                        26      LOAD_GLOBAL                     1: dict
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       2: _prog
                        32      LOAD_CONST                      2: ('prog',)
                        34      CALL_FUNCTION_KW                1
                        36      BINARY_MODULO                   
                        38      STORE_FAST                      1: usage
                        40      JUMP_FORWARD                    249 (to 540)
                        42      LOAD_FAST                       1: usage
                        44      LOAD_CONST                      0: None
                        46      IS_OP                           0 (is)
                        48      POP_JUMP_IF_FALSE               36 (to 72)
                        50      LOAD_FAST                       2: actions
                        52      POP_JUMP_IF_TRUE                36 (to 72)
                        54      LOAD_CONST                      3: '%(prog)s'
                        56      LOAD_GLOBAL                     1: dict
                        58      LOAD_FAST                       0: self
                        60      LOAD_ATTR                       2: _prog
                        62      LOAD_CONST                      2: ('prog',)
                        64      CALL_FUNCTION_KW                1
                        66      BINARY_MODULO                   
                        68      STORE_FAST                      1: usage
                        70      JUMP_FORWARD                    234 (to 540)
                        72      LOAD_FAST                       1: usage
                        74      LOAD_CONST                      0: None
                        76      IS_OP                           0 (is)
                        78      POP_JUMP_IF_FALSE               270 (to 540)
                        82      LOAD_CONST                      3: '%(prog)s'
                        84      LOAD_GLOBAL                     1: dict
                        86      LOAD_FAST                       0: self
                        88      LOAD_ATTR                       2: _prog
                        90      LOAD_CONST                      2: ('prog',)
                        92      CALL_FUNCTION_KW                1
                        94      BINARY_MODULO                   
                        96      STORE_FAST                      5: prog
                        98      BUILD_LIST                      0
                        100     STORE_FAST                      6: optionals
                        102     BUILD_LIST                      0
                        104     STORE_FAST                      7: positionals
                        106     LOAD_FAST                       2: actions
                        108     GET_ITER                        
                        110     FOR_ITER                        16 (to 144)
                        112     STORE_FAST                      8: action
                        114     LOAD_FAST                       8: action
                        116     LOAD_ATTR                       3: option_strings
                        118     POP_JUMP_IF_FALSE               66 (to 132)
                        120     LOAD_FAST                       6: optionals
                        122     LOAD_METHOD                     4: append
                        124     LOAD_FAST                       8: action
                        126     CALL_METHOD                     1
                        128     POP_TOP                         
                        130     JUMP_ABSOLUTE                   55 (to 110)
                        132     LOAD_FAST                       7: positionals
                        134     LOAD_METHOD                     4: append
                        136     LOAD_FAST                       8: action
                        138     CALL_METHOD                     1
                        140     POP_TOP                         
                        142     JUMP_ABSOLUTE                   55 (to 110)
                        144     LOAD_FAST                       0: self
                        146     LOAD_ATTR                       5: _format_actions_usage
                        148     STORE_FAST                      9: format
                        150     LOAD_FAST                       9: format
                        152     LOAD_FAST                       6: optionals
                        154     LOAD_FAST                       7: positionals
                        156     BINARY_ADD                      
                        158     LOAD_FAST                       3: groups
                        160     CALL_FUNCTION                   2
                        162     STORE_FAST                      10: action_usage
                        164     LOAD_CONST                      4: ' '
                        166     LOAD_METHOD                     6: join
                        168     LOAD_CONST                      5: <CODE> <listcomp>
                        170     LOAD_CONST                      6: 'HelpFormatter._format_usage.<locals>.<listcomp>'
                        172     MAKE_FUNCTION                   0
                        174     LOAD_FAST                       5: prog
                        176     LOAD_FAST                       10: action_usage
                        178     BUILD_TUPLE                     2
                        180     GET_ITER                        
                        182     CALL_FUNCTION                   1
                        184     CALL_METHOD                     1
                        186     STORE_FAST                      1: usage
                        188     LOAD_FAST                       0: self
                        190     LOAD_ATTR                       7: _width
                        192     LOAD_FAST                       0: self
                        194     LOAD_ATTR                       8: _current_indent
                        196     BINARY_SUBTRACT                 
                        198     STORE_DEREF                     0: text_width
                        200     LOAD_GLOBAL                     9: len
                        202     LOAD_FAST                       4: prefix
                        204     CALL_FUNCTION                   1
                        206     LOAD_GLOBAL                     9: len
                        208     LOAD_FAST                       1: usage
                        210     CALL_FUNCTION                   1
                        212     BINARY_ADD                      
                        214     LOAD_DEREF                      0: text_width
                        216     COMPARE_OP                      4 (>)
                        218     POP_JUMP_IF_FALSE               270 (to 540)
                        222     LOAD_CONST                      7: '\\(.*?\\)+(?=\\s|$)|\\[.*?\\]+(?=\\s|$)|\\S+'
                        224     STORE_FAST                      11: part_regexp
                        226     LOAD_FAST                       9: format
                        228     LOAD_FAST                       6: optionals
                        230     LOAD_FAST                       3: groups
                        232     CALL_FUNCTION                   2
                        234     STORE_FAST                      12: opt_usage
                        236     LOAD_FAST                       9: format
                        238     LOAD_FAST                       7: positionals
                        240     LOAD_FAST                       3: groups
                        242     CALL_FUNCTION                   2
                        244     STORE_FAST                      13: pos_usage
                        246     LOAD_GLOBAL                     10: _re
                        248     LOAD_METHOD                     11: findall
                        250     LOAD_FAST                       11: part_regexp
                        252     LOAD_FAST                       12: opt_usage
                        254     CALL_METHOD                     2
                        256     STORE_FAST                      14: opt_parts
                        258     LOAD_GLOBAL                     10: _re
                        260     LOAD_METHOD                     11: findall
                        262     LOAD_FAST                       11: part_regexp
                        264     LOAD_FAST                       13: pos_usage
                        266     CALL_METHOD                     2
                        268     STORE_FAST                      15: pos_parts
                        270     LOAD_CONST                      4: ' '
                        272     LOAD_METHOD                     6: join
                        274     LOAD_FAST                       14: opt_parts
                        276     CALL_METHOD                     1
                        278     LOAD_FAST                       12: opt_usage
                        280     COMPARE_OP                      2 (==)
                        282     POP_JUMP_IF_TRUE                144 (to 288)
                        284     LOAD_ASSERTION_ERROR            
                        286     RAISE_VARARGS                   1
                        288     LOAD_CONST                      4: ' '
                        290     LOAD_METHOD                     6: join
                        292     LOAD_FAST                       15: pos_parts
                        294     CALL_METHOD                     1
                        296     LOAD_FAST                       13: pos_usage
                        298     COMPARE_OP                      2 (==)
                        300     POP_JUMP_IF_TRUE                153 (to 306)
                        302     LOAD_ASSERTION_ERROR            
                        304     RAISE_VARARGS                   1
                        306     LOAD_CONST                      14: (None,)
                        308     LOAD_CLOSURE                    0: text_width
                        310     BUILD_TUPLE                     1
                        312     LOAD_CONST                      8: <CODE> get_lines
                        314     LOAD_CONST                      9: 'HelpFormatter._format_usage.<locals>.get_lines'
                        316     MAKE_FUNCTION                   9
                        318     STORE_FAST                      16: get_lines
                        320     LOAD_GLOBAL                     9: len
                        322     LOAD_FAST                       4: prefix
                        324     CALL_FUNCTION                   1
                        326     LOAD_GLOBAL                     9: len
                        328     LOAD_FAST                       5: prog
                        330     CALL_FUNCTION                   1
                        332     BINARY_ADD                      
                        334     LOAD_CONST                      10: 0.75
                        336     LOAD_DEREF                      0: text_width
                        338     BINARY_MULTIPLY                 
                        340     COMPARE_OP                      1 (<=)
                        342     POP_JUMP_IF_FALSE               220 (to 440)
                        344     LOAD_CONST                      4: ' '
                        346     LOAD_GLOBAL                     9: len
                        348     LOAD_FAST                       4: prefix
                        350     CALL_FUNCTION                   1
                        352     LOAD_GLOBAL                     9: len
                        354     LOAD_FAST                       5: prog
                        356     CALL_FUNCTION                   1
                        358     BINARY_ADD                      
                        360     LOAD_CONST                      11: 1
                        362     BINARY_ADD                      
                        364     BINARY_MULTIPLY                 
                        366     STORE_FAST                      17: indent
                        368     LOAD_FAST                       14: opt_parts
                        370     POP_JUMP_IF_FALSE               204 (to 408)
                        372     LOAD_FAST                       16: get_lines
                        374     LOAD_FAST                       5: prog
                        376     BUILD_LIST                      1
                        378     LOAD_FAST                       14: opt_parts
                        380     BINARY_ADD                      
                        382     LOAD_FAST                       17: indent
                        384     LOAD_FAST                       4: prefix
                        386     CALL_FUNCTION                   3
                        388     STORE_FAST                      18: lines
                        390     LOAD_FAST                       18: lines
                        392     LOAD_METHOD                     12: extend
                        394     LOAD_FAST                       16: get_lines
                        396     LOAD_FAST                       15: pos_parts
                        398     LOAD_FAST                       17: indent
                        400     CALL_FUNCTION                   2
                        402     CALL_METHOD                     1
                        404     POP_TOP                         
                        406     JUMP_FORWARD                    61 (to 530)
                        408     LOAD_FAST                       15: pos_parts
                        410     POP_JUMP_IF_FALSE               216 (to 432)
                        412     LOAD_FAST                       16: get_lines
                        414     LOAD_FAST                       5: prog
                        416     BUILD_LIST                      1
                        418     LOAD_FAST                       15: pos_parts
                        420     BINARY_ADD                      
                        422     LOAD_FAST                       17: indent
                        424     LOAD_FAST                       4: prefix
                        426     CALL_FUNCTION                   3
                        428     STORE_FAST                      18: lines
                        430     JUMP_FORWARD                    49 (to 530)
                        432     LOAD_FAST                       5: prog
                        434     BUILD_LIST                      1
                        436     STORE_FAST                      18: lines
                        438     JUMP_FORWARD                    45 (to 530)
                        440     LOAD_CONST                      4: ' '
                        442     LOAD_GLOBAL                     9: len
                        444     LOAD_FAST                       4: prefix
                        446     CALL_FUNCTION                   1
                        448     BINARY_MULTIPLY                 
                        450     STORE_FAST                      17: indent
                        452     LOAD_FAST                       14: opt_parts
                        454     LOAD_FAST                       15: pos_parts
                        456     BINARY_ADD                      
                        458     STORE_FAST                      19: parts
                        460     LOAD_FAST                       16: get_lines
                        462     LOAD_FAST                       19: parts
                        464     LOAD_FAST                       17: indent
                        466     CALL_FUNCTION                   2
                        468     STORE_FAST                      18: lines
                        470     LOAD_GLOBAL                     9: len
                        472     LOAD_FAST                       18: lines
                        474     CALL_FUNCTION                   1
                        476     LOAD_CONST                      11: 1
                        478     COMPARE_OP                      4 (>)
                        480     POP_JUMP_IF_FALSE               260 (to 520)
                        484     BUILD_LIST                      0
                        486     STORE_FAST                      18: lines
                        488     LOAD_FAST                       18: lines
                        490     LOAD_METHOD                     12: extend
                        492     LOAD_FAST                       16: get_lines
                        494     LOAD_FAST                       14: opt_parts
                        496     LOAD_FAST                       17: indent
                        498     CALL_FUNCTION                   2
                        500     CALL_METHOD                     1
                        502     POP_TOP                         
                        504     LOAD_FAST                       18: lines
                        506     LOAD_METHOD                     12: extend
                        508     LOAD_FAST                       16: get_lines
                        510     LOAD_FAST                       15: pos_parts
                        512     LOAD_FAST                       17: indent
                        514     CALL_FUNCTION                   2
                        516     CALL_METHOD                     1
                        518     POP_TOP                         
                        520     LOAD_FAST                       5: prog
                        522     BUILD_LIST                      1
                        524     LOAD_FAST                       18: lines
                        526     BINARY_ADD                      
                        528     STORE_FAST                      18: lines
                        530     LOAD_CONST                      12: '\n'
                        532     LOAD_METHOD                     6: join
                        534     LOAD_FAST                       18: lines
                        536     CALL_METHOD                     1
                        538     STORE_FAST                      1: usage
                        540     LOAD_CONST                      13: '%s%s\n\n'
                        542     LOAD_FAST                       4: prefix
                        544     LOAD_FAST                       1: usage
                        546     BUILD_TUPLE                     2
                        548     BINARY_MODULO                   
                        550     RETURN_VALUE                    
                'HelpFormatter._format_usage'
                [Code]
                    File Name: argparse.py
                    Object Name: _format_actions_usage
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 21
                    Stack Size: 9
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'set'
                        '_group_actions'
                        'ValueError'
                        'index'
                        'len'
                        'add'
                        'help'
                        'SUPPRESS'
                        'required'
                        'range'
                        'enumerate'
                        'append'
                        'get'
                        'pop'
                        'option_strings'
                        '_get_default_metavar_for_positional'
                        '_format_args'
                        'nargs'
                        'format_usage'
                        '_get_default_metavar_for_optional'
                        'sorted'
                        'join'
                        '_re'
                        'sub'
                        'strip'
                    [Var Names]
                        'self'
                        'actions'
                        'groups'
                        'group_actions'
                        'inserts'
                        'group'
                        'start'
                        'group_action_count'
                        'end'
                        'suppressed_actions_count'
                        'action'
                        'exposed_actions_count'
                        'i'
                        'parts'
                        'default'
                        'part'
                        'option_string'
                        'args_string'
                        'text'
                        'open'
                        'close'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'empty group '
                        0
                        1
                        ' ['
                        '['
                        ']'
                        ' ('
                        '('
                        ')'
                        '|'
                        -1
                        '%s %s'
                        '[%s]'
                        True
                        (
                            'reverse'
                        )
                        ' '
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                            [Var Names]
                                '.0'
                                'item'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: item
                                8       LOAD_FAST                       1: item
                                10      LOAD_CONST                      0: None
                                12      IS_OP                           1 (is not)
                                14      POP_JUMP_IF_FALSE               2 (to 4)
                                16      LOAD_FAST                       1: item
                                18      LIST_APPEND                     2
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      RETURN_VALUE                    
                        'HelpFormatter._format_actions_usage.<locals>.<listcomp>'
                        '[\\[(]'
                        '[\\])]'
                        '(%s) '
                        '\\1'
                        ' (%s)'
                        '%s *%s'
                        ''
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: set
                        2       CALL_FUNCTION                   0
                        4       STORE_FAST                      3: group_actions
                        6       BUILD_MAP                       0
                        8       STORE_FAST                      4: inserts
                        10      LOAD_FAST                       2: groups
                        12      GET_ITER                        
                        14      FOR_ITER                        166 (to 348)
                        16      STORE_FAST                      5: group
                        18      LOAD_FAST                       5: group
                        20      LOAD_ATTR                       1: _group_actions
                        22      POP_JUMP_IF_TRUE                19 (to 38)
                        24      LOAD_GLOBAL                     2: ValueError
                        26      LOAD_CONST                      1: 'empty group '
                        28      LOAD_FAST                       5: group
                        30      FORMAT_VALUE                    0 (FVC_NONE)
                        32      BUILD_STRING                    2
                        34      CALL_FUNCTION                   1
                        36      RAISE_VARARGS                   1
                        38      SETUP_FINALLY                   10 (to 60)
                        40      LOAD_FAST                       1: actions
                        42      LOAD_METHOD                     3: index
                        44      LOAD_FAST                       5: group
                        46      LOAD_ATTR                       1: _group_actions
                        48      LOAD_CONST                      2: 0
                        50      BINARY_SUBSCR                   
                        52      CALL_METHOD                     1
                        54      STORE_FAST                      6: start
                        56      POP_BLOCK                       
                        58      JUMP_FORWARD                    9 (to 78)
                        60      DUP_TOP                         
                        62      LOAD_GLOBAL                     2: ValueError
                        64      JUMP_IF_NOT_EXC_MATCH           38 (to 76)
                        66      POP_TOP                         
                        68      POP_TOP                         
                        70      POP_TOP                         
                        72      POP_EXCEPT                      
                        74      JUMP_ABSOLUTE                   7 (to 14)
                        76      RERAISE                         0
                        78      LOAD_GLOBAL                     4: len
                        80      LOAD_FAST                       5: group
                        82      LOAD_ATTR                       1: _group_actions
                        84      CALL_FUNCTION                   1
                        86      STORE_FAST                      7: group_action_count
                        88      LOAD_FAST                       6: start
                        90      LOAD_FAST                       7: group_action_count
                        92      BINARY_ADD                      
                        94      STORE_FAST                      8: end
                        96      LOAD_FAST                       1: actions
                        98      LOAD_FAST                       6: start
                        100     LOAD_FAST                       8: end
                        102     BUILD_SLICE                     2
                        104     BINARY_SUBSCR                   
                        106     LOAD_FAST                       5: group
                        108     LOAD_ATTR                       1: _group_actions
                        110     COMPARE_OP                      2 (==)
                        112     POP_JUMP_IF_FALSE               173 (to 346)
                        114     LOAD_CONST                      2: 0
                        116     STORE_FAST                      9: suppressed_actions_count
                        118     LOAD_FAST                       5: group
                        120     LOAD_ATTR                       1: _group_actions
                        122     GET_ITER                        
                        124     FOR_ITER                        16 (to 158)
                        126     STORE_FAST                      10: action
                        128     LOAD_FAST                       3: group_actions
                        130     LOAD_METHOD                     5: add
                        132     LOAD_FAST                       10: action
                        134     CALL_METHOD                     1
                        136     POP_TOP                         
                        138     LOAD_FAST                       10: action
                        140     LOAD_ATTR                       6: help
                        142     LOAD_GLOBAL                     7: SUPPRESS
                        144     IS_OP                           0 (is)
                        146     POP_JUMP_IF_FALSE               78 (to 156)
                        148     LOAD_FAST                       9: suppressed_actions_count
                        150     LOAD_CONST                      3: 1
                        152     INPLACE_ADD                     
                        154     STORE_FAST                      9: suppressed_actions_count
                        156     JUMP_ABSOLUTE                   62 (to 124)
                        158     LOAD_FAST                       7: group_action_count
                        160     LOAD_FAST                       9: suppressed_actions_count
                        162     BINARY_SUBTRACT                 
                        164     STORE_FAST                      11: exposed_actions_count
                        166     LOAD_FAST                       5: group
                        168     LOAD_ATTR                       8: required
                        170     POP_JUMP_IF_TRUE                121 (to 242)
                        172     LOAD_FAST                       6: start
                        174     LOAD_FAST                       4: inserts
                        176     CONTAINS_OP                     0 (in)
                        178     POP_JUMP_IF_FALSE               99 (to 198)
                        180     LOAD_FAST                       4: inserts
                        182     LOAD_FAST                       6: start
                        184     DUP_TOP_TWO                     
                        186     BINARY_SUBSCR                   
                        188     LOAD_CONST                      4: ' ['
                        190     INPLACE_ADD                     
                        192     ROT_THREE                       
                        194     STORE_SUBSCR                    
                        196     JUMP_FORWARD                    4 (to 206)
                        198     LOAD_CONST                      5: '['
                        200     LOAD_FAST                       4: inserts
                        202     LOAD_FAST                       6: start
                        204     STORE_SUBSCR                    
                        206     LOAD_FAST                       8: end
                        208     LOAD_FAST                       4: inserts
                        210     CONTAINS_OP                     0 (in)
                        212     POP_JUMP_IF_FALSE               116 (to 232)
                        214     LOAD_FAST                       4: inserts
                        216     LOAD_FAST                       8: end
                        218     DUP_TOP_TWO                     
                        220     BINARY_SUBSCR                   
                        222     LOAD_CONST                      6: ']'
                        224     INPLACE_ADD                     
                        226     ROT_THREE                       
                        228     STORE_SUBSCR                    
                        230     JUMP_FORWARD                    43 (to 318)
                        232     LOAD_CONST                      6: ']'
                        234     LOAD_FAST                       4: inserts
                        236     LOAD_FAST                       8: end
                        238     STORE_SUBSCR                    
                        240     JUMP_FORWARD                    38 (to 318)
                        242     LOAD_FAST                       11: exposed_actions_count
                        244     LOAD_CONST                      3: 1
                        246     COMPARE_OP                      4 (>)
                        248     POP_JUMP_IF_FALSE               159 (to 318)
                        250     LOAD_FAST                       6: start
                        252     LOAD_FAST                       4: inserts
                        254     CONTAINS_OP                     0 (in)
                        256     POP_JUMP_IF_FALSE               138 (to 276)
                        258     LOAD_FAST                       4: inserts
                        260     LOAD_FAST                       6: start
                        262     DUP_TOP_TWO                     
                        264     BINARY_SUBSCR                   
                        266     LOAD_CONST                      7: ' ('
                        268     INPLACE_ADD                     
                        270     ROT_THREE                       
                        272     STORE_SUBSCR                    
                        274     JUMP_FORWARD                    4 (to 284)
                        276     LOAD_CONST                      8: '('
                        278     LOAD_FAST                       4: inserts
                        280     LOAD_FAST                       6: start
                        282     STORE_SUBSCR                    
                        284     LOAD_FAST                       8: end
                        286     LOAD_FAST                       4: inserts
                        288     CONTAINS_OP                     0 (in)
                        290     POP_JUMP_IF_FALSE               155 (to 310)
                        292     LOAD_FAST                       4: inserts
                        294     LOAD_FAST                       8: end
                        296     DUP_TOP_TWO                     
                        298     BINARY_SUBSCR                   
                        300     LOAD_CONST                      9: ')'
                        302     INPLACE_ADD                     
                        304     ROT_THREE                       
                        306     STORE_SUBSCR                    
                        308     JUMP_FORWARD                    4 (to 318)
                        310     LOAD_CONST                      9: ')'
                        312     LOAD_FAST                       4: inserts
                        314     LOAD_FAST                       8: end
                        316     STORE_SUBSCR                    
                        318     LOAD_GLOBAL                     9: range
                        320     LOAD_FAST                       6: start
                        322     LOAD_CONST                      3: 1
                        324     BINARY_ADD                      
                        326     LOAD_FAST                       8: end
                        328     CALL_FUNCTION                   2
                        330     GET_ITER                        
                        332     FOR_ITER                        6 (to 346)
                        334     STORE_FAST                      12: i
                        336     LOAD_CONST                      10: '|'
                        338     LOAD_FAST                       4: inserts
                        340     LOAD_FAST                       12: i
                        342     STORE_SUBSCR                    
                        344     JUMP_ABSOLUTE                   166 (to 332)
                        346     JUMP_ABSOLUTE                   7 (to 14)
                        348     BUILD_LIST                      0
                        350     STORE_FAST                      13: parts
                        352     LOAD_GLOBAL                     10: enumerate
                        354     LOAD_FAST                       1: actions
                        356     CALL_FUNCTION                   1
                        358     GET_ITER                        
                        360     FOR_ITER                        141 (to 644)
                        362     UNPACK_SEQUENCE                 2
                        364     STORE_FAST                      12: i
                        366     STORE_FAST                      10: action
                        368     LOAD_FAST                       10: action
                        370     LOAD_ATTR                       6: help
                        372     LOAD_GLOBAL                     7: SUPPRESS
                        374     IS_OP                           0 (is)
                        376     POP_JUMP_IF_FALSE               224 (to 448)
                        378     LOAD_FAST                       13: parts
                        380     LOAD_METHOD                     11: append
                        382     LOAD_CONST                      0: None
                        384     CALL_METHOD                     1
                        386     POP_TOP                         
                        388     LOAD_FAST                       4: inserts
                        390     LOAD_METHOD                     12: get
                        392     LOAD_FAST                       12: i
                        394     CALL_METHOD                     1
                        396     LOAD_CONST                      10: '|'
                        398     COMPARE_OP                      2 (==)
                        400     POP_JUMP_IF_FALSE               207 (to 414)
                        402     LOAD_FAST                       4: inserts
                        404     LOAD_METHOD                     13: pop
                        406     LOAD_FAST                       12: i
                        408     CALL_METHOD                     1
                        410     POP_TOP                         
                        412     JUMP_ABSOLUTE                   180 (to 360)
                        414     LOAD_FAST                       4: inserts
                        416     LOAD_METHOD                     12: get
                        418     LOAD_FAST                       12: i
                        420     LOAD_CONST                      3: 1
                        422     BINARY_ADD                      
                        424     CALL_METHOD                     1
                        426     LOAD_CONST                      10: '|'
                        428     COMPARE_OP                      2 (==)
                        430     POP_JUMP_IF_FALSE               223 (to 446)
                        432     LOAD_FAST                       4: inserts
                        434     LOAD_METHOD                     13: pop
                        436     LOAD_FAST                       12: i
                        438     LOAD_CONST                      3: 1
                        440     BINARY_ADD                      
                        442     CALL_METHOD                     1
                        444     POP_TOP                         
                        446     JUMP_ABSOLUTE                   180 (to 360)
                        448     LOAD_FAST                       10: action
                        450     LOAD_ATTR                       14: option_strings
                        452     POP_JUMP_IF_TRUE                270 (to 540)
                        456     LOAD_FAST                       0: self
                        458     LOAD_METHOD                     15: _get_default_metavar_for_positional
                        460     LOAD_FAST                       10: action
                        462     CALL_METHOD                     1
                        464     STORE_FAST                      14: default
                        466     LOAD_FAST                       0: self
                        468     LOAD_METHOD                     16: _format_args
                        470     LOAD_FAST                       10: action
                        472     LOAD_FAST                       14: default
                        474     CALL_METHOD                     2
                        476     STORE_FAST                      15: part
                        478     LOAD_FAST                       10: action
                        480     LOAD_FAST                       3: group_actions
                        482     CONTAINS_OP                     0 (in)
                        484     POP_JUMP_IF_FALSE               264 (to 528)
                        488     LOAD_FAST                       15: part
                        490     LOAD_CONST                      2: 0
                        492     BINARY_SUBSCR                   
                        494     LOAD_CONST                      5: '['
                        496     COMPARE_OP                      2 (==)
                        498     POP_JUMP_IF_FALSE               264 (to 528)
                        502     LOAD_FAST                       15: part
                        504     LOAD_CONST                      11: -1
                        506     BINARY_SUBSCR                   
                        508     LOAD_CONST                      6: ']'
                        510     COMPARE_OP                      2 (==)
                        512     POP_JUMP_IF_FALSE               264 (to 528)
                        516     LOAD_FAST                       15: part
                        518     LOAD_CONST                      3: 1
                        520     LOAD_CONST                      11: -1
                        522     BUILD_SLICE                     2
                        524     BINARY_SUBSCR                   
                        526     STORE_FAST                      15: part
                        528     LOAD_FAST                       13: parts
                        530     LOAD_METHOD                     11: append
                        532     LOAD_FAST                       15: part
                        534     CALL_METHOD                     1
                        536     POP_TOP                         
                        538     JUMP_ABSOLUTE                   180 (to 360)
                        540     LOAD_FAST                       10: action
                        542     LOAD_ATTR                       14: option_strings
                        544     LOAD_CONST                      2: 0
                        546     BINARY_SUBSCR                   
                        548     STORE_FAST                      16: option_string
                        550     LOAD_FAST                       10: action
                        552     LOAD_ATTR                       17: nargs
                        554     LOAD_CONST                      2: 0
                        556     COMPARE_OP                      2 (==)
                        558     POP_JUMP_IF_FALSE               286 (to 572)
                        562     LOAD_FAST                       10: action
                        564     LOAD_METHOD                     18: format_usage
                        566     CALL_METHOD                     0
                        568     STORE_FAST                      15: part
                        570     JUMP_FORWARD                    17 (to 606)
                        572     LOAD_FAST                       0: self
                        574     LOAD_METHOD                     19: _get_default_metavar_for_optional
                        576     LOAD_FAST                       10: action
                        578     CALL_METHOD                     1
                        580     STORE_FAST                      14: default
                        582     LOAD_FAST                       0: self
                        584     LOAD_METHOD                     16: _format_args
                        586     LOAD_FAST                       10: action
                        588     LOAD_FAST                       14: default
                        590     CALL_METHOD                     2
                        592     STORE_FAST                      17: args_string
                        594     LOAD_CONST                      12: '%s %s'
                        596     LOAD_FAST                       16: option_string
                        598     LOAD_FAST                       17: args_string
                        600     BUILD_TUPLE                     2
                        602     BINARY_MODULO                   
                        604     STORE_FAST                      15: part
                        606     LOAD_FAST                       10: action
                        608     LOAD_ATTR                       8: required
                        610     POP_JUMP_IF_TRUE                316 (to 632)
                        614     LOAD_FAST                       10: action
                        616     LOAD_FAST                       3: group_actions
                        618     CONTAINS_OP                     1 (not in)
                        620     POP_JUMP_IF_FALSE               316 (to 632)
                        624     LOAD_CONST                      13: '[%s]'
                        626     LOAD_FAST                       15: part
                        628     BINARY_MODULO                   
                        630     STORE_FAST                      15: part
                        632     LOAD_FAST                       13: parts
                        634     LOAD_METHOD                     11: append
                        636     LOAD_FAST                       15: part
                        638     CALL_METHOD                     1
                        640     POP_TOP                         
                        642     JUMP_ABSOLUTE                   180 (to 360)
                        644     LOAD_GLOBAL                     20: sorted
                        646     LOAD_FAST                       4: inserts
                        648     LOAD_CONST                      14: True
                        650     LOAD_CONST                      15: ('reverse',)
                        652     CALL_FUNCTION_KW                2
                        654     GET_ITER                        
                        656     FOR_ITER                        12 (to 682)
                        658     STORE_FAST                      12: i
                        660     LOAD_FAST                       4: inserts
                        662     LOAD_FAST                       12: i
                        664     BINARY_SUBSCR                   
                        666     BUILD_LIST                      1
                        668     LOAD_FAST                       13: parts
                        670     LOAD_FAST                       12: i
                        672     LOAD_FAST                       12: i
                        674     BUILD_SLICE                     2
                        676     STORE_SUBSCR                    
                        678     JUMP_ABSOLUTE                   328 (to 656)
                        682     LOAD_CONST                      16: ' '
                        684     LOAD_METHOD                     21: join
                        686     LOAD_CONST                      17: <CODE> <listcomp>
                        688     LOAD_CONST                      18: 'HelpFormatter._format_actions_usage.<locals>.<listcomp>'
                        690     MAKE_FUNCTION                   0
                        692     LOAD_FAST                       13: parts
                        694     GET_ITER                        
                        696     CALL_FUNCTION                   1
                        698     CALL_METHOD                     1
                        700     STORE_FAST                      18: text
                        702     LOAD_CONST                      19: '[\\[(]'
                        704     STORE_FAST                      19: open
                        706     LOAD_CONST                      20: '[\\])]'
                        708     STORE_FAST                      20: close
                        710     LOAD_GLOBAL                     22: _re
                        712     LOAD_METHOD                     23: sub
                        714     LOAD_CONST                      21: '(%s) '
                        716     LOAD_FAST                       19: open
                        718     BINARY_MODULO                   
                        720     LOAD_CONST                      22: '\\1'
                        722     LOAD_FAST                       18: text
                        724     CALL_METHOD                     3
                        726     STORE_FAST                      18: text
                        728     LOAD_GLOBAL                     22: _re
                        730     LOAD_METHOD                     23: sub
                        732     LOAD_CONST                      23: ' (%s)'
                        734     LOAD_FAST                       20: close
                        736     BINARY_MODULO                   
                        738     LOAD_CONST                      22: '\\1'
                        740     LOAD_FAST                       18: text
                        742     CALL_METHOD                     3
                        744     STORE_FAST                      18: text
                        746     LOAD_GLOBAL                     22: _re
                        748     LOAD_METHOD                     23: sub
                        750     LOAD_CONST                      24: '%s *%s'
                        752     LOAD_FAST                       19: open
                        754     LOAD_FAST                       20: close
                        756     BUILD_TUPLE                     2
                        758     BINARY_MODULO                   
                        760     LOAD_CONST                      25: ''
                        762     LOAD_FAST                       18: text
                        764     CALL_METHOD                     3
                        766     STORE_FAST                      18: text
                        768     LOAD_FAST                       18: text
                        770     LOAD_METHOD                     24: strip
                        772     CALL_METHOD                     0
                        774     STORE_FAST                      18: text
                        776     LOAD_FAST                       18: text
                        778     RETURN_VALUE                    
                'HelpFormatter._format_actions_usage'
                [Code]
                    File Name: argparse.py
                    Object Name: _format_text
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'dict'
                        '_prog'
                        'max'
                        '_width'
                        '_current_indent'
                        '_fill_text'
                    [Var Names]
                        'self'
                        'text'
                        'text_width'
                        'indent'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%(prog)'
                        (
                            'prog'
                        )
                        11
                        ' '
                        '\n\n'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%(prog)'
                        2       LOAD_FAST                       1: text
                        4       CONTAINS_OP                     0 (in)
                        6       POP_JUMP_IF_FALSE               12 (to 24)
                        8       LOAD_FAST                       1: text
                        10      LOAD_GLOBAL                     0: dict
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: _prog
                        16      LOAD_CONST                      2: ('prog',)
                        18      CALL_FUNCTION_KW                1
                        20      BINARY_MODULO                   
                        22      STORE_FAST                      1: text
                        24      LOAD_GLOBAL                     2: max
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       3: _width
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       4: _current_indent
                        34      BINARY_SUBTRACT                 
                        36      LOAD_CONST                      3: 11
                        38      CALL_FUNCTION                   2
                        40      STORE_FAST                      2: text_width
                        42      LOAD_CONST                      4: ' '
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       4: _current_indent
                        48      BINARY_MULTIPLY                 
                        50      STORE_FAST                      3: indent
                        52      LOAD_FAST                       0: self
                        54      LOAD_METHOD                     5: _fill_text
                        56      LOAD_FAST                       1: text
                        58      LOAD_FAST                       2: text_width
                        60      LOAD_FAST                       3: indent
                        62      CALL_METHOD                     3
                        64      LOAD_CONST                      5: '\n\n'
                        66      BINARY_ADD                      
                        68      RETURN_VALUE                    
                'HelpFormatter._format_text'
                [Code]
                    File Name: argparse.py
                    Object Name: _format_action
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 13
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'min'
                        '_action_max_length'
                        '_max_help_position'
                        'max'
                        '_width'
                        '_current_indent'
                        '_format_action_invocation'
                        'help'
                        'len'
                        'strip'
                        '_expand_help'
                        '_split_lines'
                        'append'
                        'endswith'
                        '_iter_indented_subactions'
                        '_format_action'
                        '_join_parts'
                    [Var Names]
                        'self'
                        'action'
                        'help_position'
                        'help_width'
                        'action_width'
                        'action_header'
                        'tup'
                        'indent_first'
                        'parts'
                        'help_text'
                        'help_lines'
                        'line'
                        'subaction'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        2
                        11
                        ''
                        '%*s%s\n'
                        '%*s%-*s  '
                        0
                        1
                        '\n'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: min
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _action_max_length
                        6       LOAD_CONST                      1: 2
                        8       BINARY_ADD                      
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _max_help_position
                        14      CALL_FUNCTION                   2
                        16      STORE_FAST                      2: help_position
                        18      LOAD_GLOBAL                     3: max
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       4: _width
                        24      LOAD_FAST                       2: help_position
                        26      BINARY_SUBTRACT                 
                        28      LOAD_CONST                      2: 11
                        30      CALL_FUNCTION                   2
                        32      STORE_FAST                      3: help_width
                        34      LOAD_FAST                       2: help_position
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       5: _current_indent
                        40      BINARY_SUBTRACT                 
                        42      LOAD_CONST                      1: 2
                        44      BINARY_SUBTRACT                 
                        46      STORE_FAST                      4: action_width
                        48      LOAD_FAST                       0: self
                        50      LOAD_METHOD                     6: _format_action_invocation
                        52      LOAD_FAST                       1: action
                        54      CALL_METHOD                     1
                        56      STORE_FAST                      5: action_header
                        58      LOAD_FAST                       1: action
                        60      LOAD_ATTR                       7: help
                        62      POP_JUMP_IF_TRUE                43 (to 86)
                        64      LOAD_FAST                       0: self
                        66      LOAD_ATTR                       5: _current_indent
                        68      LOAD_CONST                      3: ''
                        70      LOAD_FAST                       5: action_header
                        72      BUILD_TUPLE                     3
                        74      STORE_FAST                      6: tup
                        76      LOAD_CONST                      4: '%*s%s\n'
                        78      LOAD_FAST                       6: tup
                        80      BINARY_MODULO                   
                        82      STORE_FAST                      5: action_header
                        84      JUMP_FORWARD                    32 (to 150)
                        86      LOAD_GLOBAL                     8: len
                        88      LOAD_FAST                       5: action_header
                        90      CALL_FUNCTION                   1
                        92      LOAD_FAST                       4: action_width
                        94      COMPARE_OP                      1 (<=)
                        96      POP_JUMP_IF_FALSE               63 (to 126)
                        98      LOAD_FAST                       0: self
                        100     LOAD_ATTR                       5: _current_indent
                        102     LOAD_CONST                      3: ''
                        104     LOAD_FAST                       4: action_width
                        106     LOAD_FAST                       5: action_header
                        108     BUILD_TUPLE                     4
                        110     STORE_FAST                      6: tup
                        112     LOAD_CONST                      5: '%*s%-*s  '
                        114     LOAD_FAST                       6: tup
                        116     BINARY_MODULO                   
                        118     STORE_FAST                      5: action_header
                        120     LOAD_CONST                      6: 0
                        122     STORE_FAST                      7: indent_first
                        124     JUMP_FORWARD                    12 (to 150)
                        126     LOAD_FAST                       0: self
                        128     LOAD_ATTR                       5: _current_indent
                        130     LOAD_CONST                      3: ''
                        132     LOAD_FAST                       5: action_header
                        134     BUILD_TUPLE                     3
                        136     STORE_FAST                      6: tup
                        138     LOAD_CONST                      4: '%*s%s\n'
                        140     LOAD_FAST                       6: tup
                        142     BINARY_MODULO                   
                        144     STORE_FAST                      5: action_header
                        146     LOAD_FAST                       2: help_position
                        148     STORE_FAST                      7: indent_first
                        150     LOAD_FAST                       5: action_header
                        152     BUILD_LIST                      1
                        154     STORE_FAST                      8: parts
                        156     LOAD_FAST                       1: action
                        158     LOAD_ATTR                       7: help
                        160     POP_JUMP_IF_FALSE               131 (to 262)
                        162     LOAD_FAST                       1: action
                        164     LOAD_ATTR                       7: help
                        166     LOAD_METHOD                     9: strip
                        168     CALL_METHOD                     0
                        170     POP_JUMP_IF_FALSE               131 (to 262)
                        172     LOAD_FAST                       0: self
                        174     LOAD_METHOD                     10: _expand_help
                        176     LOAD_FAST                       1: action
                        178     CALL_METHOD                     1
                        180     STORE_FAST                      9: help_text
                        182     LOAD_FAST                       9: help_text
                        184     POP_JUMP_IF_FALSE               130 (to 260)
                        186     LOAD_FAST                       0: self
                        188     LOAD_METHOD                     11: _split_lines
                        190     LOAD_FAST                       9: help_text
                        192     LOAD_FAST                       3: help_width
                        194     CALL_METHOD                     2
                        196     STORE_FAST                      10: help_lines
                        198     LOAD_FAST                       8: parts
                        200     LOAD_METHOD                     12: append
                        202     LOAD_CONST                      4: '%*s%s\n'
                        204     LOAD_FAST                       7: indent_first
                        206     LOAD_CONST                      3: ''
                        208     LOAD_FAST                       10: help_lines
                        210     LOAD_CONST                      6: 0
                        212     BINARY_SUBSCR                   
                        214     BUILD_TUPLE                     3
                        216     BINARY_MODULO                   
                        218     CALL_METHOD                     1
                        220     POP_TOP                         
                        222     LOAD_FAST                       10: help_lines
                        224     LOAD_CONST                      7: 1
                        226     LOAD_CONST                      0: None
                        228     BUILD_SLICE                     2
                        230     BINARY_SUBSCR                   
                        232     GET_ITER                        
                        234     FOR_ITER                        12 (to 260)
                        236     STORE_FAST                      11: line
                        238     LOAD_FAST                       8: parts
                        240     LOAD_METHOD                     12: append
                        242     LOAD_CONST                      4: '%*s%s\n'
                        244     LOAD_FAST                       2: help_position
                        246     LOAD_CONST                      3: ''
                        248     LOAD_FAST                       11: line
                        250     BUILD_TUPLE                     3
                        252     BINARY_MODULO                   
                        254     CALL_METHOD                     1
                        256     POP_TOP                         
                        258     JUMP_ABSOLUTE                   117 (to 234)
                        260     JUMP_FORWARD                    10 (to 282)
                        262     LOAD_FAST                       5: action_header
                        264     LOAD_METHOD                     13: endswith
                        266     LOAD_CONST                      8: '\n'
                        268     CALL_METHOD                     1
                        270     POP_JUMP_IF_TRUE                141 (to 282)
                        272     LOAD_FAST                       8: parts
                        274     LOAD_METHOD                     12: append
                        276     LOAD_CONST                      8: '\n'
                        278     CALL_METHOD                     1
                        280     POP_TOP                         
                        282     LOAD_FAST                       0: self
                        284     LOAD_METHOD                     14: _iter_indented_subactions
                        286     LOAD_FAST                       1: action
                        288     CALL_METHOD                     1
                        290     GET_ITER                        
                        292     FOR_ITER                        10 (to 314)
                        294     STORE_FAST                      12: subaction
                        296     LOAD_FAST                       8: parts
                        298     LOAD_METHOD                     12: append
                        300     LOAD_FAST                       0: self
                        302     LOAD_METHOD                     15: _format_action
                        304     LOAD_FAST                       12: subaction
                        306     CALL_METHOD                     1
                        308     CALL_METHOD                     1
                        310     POP_TOP                         
                        312     JUMP_ABSOLUTE                   146 (to 292)
                        314     LOAD_FAST                       0: self
                        316     LOAD_METHOD                     16: _join_parts
                        318     LOAD_FAST                       8: parts
                        320     CALL_METHOD                     1
                        322     RETURN_VALUE                    
                'HelpFormatter._format_action'
                [Code]
                    File Name: argparse.py
                    Object Name: _format_action_invocation
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'option_strings'
                        '_get_default_metavar_for_positional'
                        '_metavar_formatter'
                        'nargs'
                        'extend'
                        '_get_default_metavar_for_optional'
                        '_format_args'
                        'append'
                        'join'
                    [Var Names]
                        'self'
                        'action'
                        'default'
                        'metavar'
                        'parts'
                        'args_string'
                        'option_string'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                        0
                        '%s %s'
                        ', '
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: option_strings
                        4       POP_JUMP_IF_TRUE                19 (to 38)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: _get_default_metavar_for_positional
                        10      LOAD_FAST                       1: action
                        12      CALL_METHOD                     1
                        14      STORE_FAST                      2: default
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     2: _metavar_formatter
                        20      LOAD_FAST                       1: action
                        22      LOAD_FAST                       2: default
                        24      CALL_METHOD                     2
                        26      LOAD_CONST                      1: 1
                        28      CALL_FUNCTION                   1
                        30      UNPACK_SEQUENCE                 1
                        32      STORE_FAST                      3: metavar
                        34      LOAD_FAST                       3: metavar
                        36      RETURN_VALUE                    
                        38      BUILD_LIST                      0
                        40      STORE_FAST                      4: parts
                        42      LOAD_FAST                       1: action
                        44      LOAD_ATTR                       3: nargs
                        46      LOAD_CONST                      2: 0
                        48      COMPARE_OP                      2 (==)
                        50      POP_JUMP_IF_FALSE               33 (to 66)
                        52      LOAD_FAST                       4: parts
                        54      LOAD_METHOD                     4: extend
                        56      LOAD_FAST                       1: action
                        58      LOAD_ATTR                       0: option_strings
                        60      CALL_METHOD                     1
                        62      POP_TOP                         
                        64      JUMP_FORWARD                    26 (to 118)
                        66      LOAD_FAST                       0: self
                        68      LOAD_METHOD                     5: _get_default_metavar_for_optional
                        70      LOAD_FAST                       1: action
                        72      CALL_METHOD                     1
                        74      STORE_FAST                      2: default
                        76      LOAD_FAST                       0: self
                        78      LOAD_METHOD                     6: _format_args
                        80      LOAD_FAST                       1: action
                        82      LOAD_FAST                       2: default
                        84      CALL_METHOD                     2
                        86      STORE_FAST                      5: args_string
                        88      LOAD_FAST                       1: action
                        90      LOAD_ATTR                       0: option_strings
                        92      GET_ITER                        
                        94      FOR_ITER                        11 (to 118)
                        96      STORE_FAST                      6: option_string
                        98      LOAD_FAST                       4: parts
                        100     LOAD_METHOD                     7: append
                        102     LOAD_CONST                      3: '%s %s'
                        104     LOAD_FAST                       6: option_string
                        106     LOAD_FAST                       5: args_string
                        108     BUILD_TUPLE                     2
                        110     BINARY_MODULO                   
                        112     CALL_METHOD                     1
                        114     POP_TOP                         
                        116     JUMP_ABSOLUTE                   47 (to 94)
                        118     LOAD_CONST                      4: ', '
                        120     LOAD_METHOD                     8: join
                        122     LOAD_FAST                       4: parts
                        124     CALL_METHOD                     1
                        126     RETURN_VALUE                    
                'HelpFormatter._format_action_invocation'
                [Code]
                    File Name: argparse.py
                    Object Name: _metavar_formatter
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'metavar'
                        'choices'
                        'join'
                    [Var Names]
                        'self'
                        'action'
                        'default_metavar'
                        'choice_strs'
                        'format'
                    [Free Vars]
                    [Cell Vars]
                        'result'
                    [Constants]
                        None
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'str'
                            [Var Names]
                                '.0'
                                'choice'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        6 (to 18)
                                6       STORE_FAST                      1: choice
                                8       LOAD_GLOBAL                     0: str
                                10      LOAD_FAST                       1: choice
                                12      CALL_FUNCTION                   1
                                14      LIST_APPEND                     2
                                16      JUMP_ABSOLUTE                   2 (to 4)
                                18      RETURN_VALUE                    
                        'HelpFormatter._metavar_formatter.<locals>.<listcomp>'
                        '{%s}'
                        ','
                        [Code]
                            File Name: argparse.py
                            Object Name: format
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 1
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'isinstance'
                                'tuple'
                            [Var Names]
                                'tuple_size'
                            [Free Vars]
                                'result'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_GLOBAL                     0: isinstance
                                2       LOAD_DEREF                      0: result
                                4       LOAD_GLOBAL                     1: tuple
                                6       CALL_FUNCTION                   2
                                8       POP_JUMP_IF_FALSE               7 (to 14)
                                10      LOAD_DEREF                      0: result
                                12      RETURN_VALUE                    
                                14      LOAD_DEREF                      0: result
                                16      BUILD_TUPLE                     1
                                18      LOAD_FAST                       0: tuple_size
                                20      BINARY_MULTIPLY                 
                                22      RETURN_VALUE                    
                        'HelpFormatter._metavar_formatter.<locals>.format'
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: metavar
                        4       LOAD_CONST                      0: None
                        6       IS_OP                           1 (is not)
                        8       POP_JUMP_IF_FALSE               9 (to 18)
                        10      LOAD_FAST                       1: action
                        12      LOAD_ATTR                       0: metavar
                        14      STORE_DEREF                     0: result
                        16      JUMP_FORWARD                    23 (to 64)
                        18      LOAD_FAST                       1: action
                        20      LOAD_ATTR                       1: choices
                        22      LOAD_CONST                      0: None
                        24      IS_OP                           1 (is not)
                        26      POP_JUMP_IF_FALSE               30 (to 60)
                        28      LOAD_CONST                      1: <CODE> <listcomp>
                        30      LOAD_CONST                      2: 'HelpFormatter._metavar_formatter.<locals>.<listcomp>'
                        32      MAKE_FUNCTION                   0
                        34      LOAD_FAST                       1: action
                        36      LOAD_ATTR                       1: choices
                        38      GET_ITER                        
                        40      CALL_FUNCTION                   1
                        42      STORE_FAST                      3: choice_strs
                        44      LOAD_CONST                      3: '{%s}'
                        46      LOAD_CONST                      4: ','
                        48      LOAD_METHOD                     2: join
                        50      LOAD_FAST                       3: choice_strs
                        52      CALL_METHOD                     1
                        54      BINARY_MODULO                   
                        56      STORE_DEREF                     0: result
                        58      JUMP_FORWARD                    2 (to 64)
                        60      LOAD_FAST                       2: default_metavar
                        62      STORE_DEREF                     0: result
                        64      LOAD_CLOSURE                    0: result
                        66      BUILD_TUPLE                     1
                        68      LOAD_CONST                      5: <CODE> format
                        70      LOAD_CONST                      6: 'HelpFormatter._metavar_formatter.<locals>.format'
                        72      MAKE_FUNCTION                   8
                        74      STORE_FAST                      4: format
                        76      LOAD_FAST                       4: format
                        78      RETURN_VALUE                    
                'HelpFormatter._metavar_formatter'
                [Code]
                    File Name: argparse.py
                    Object Name: _format_args
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_metavar_formatter'
                        'nargs'
                        'OPTIONAL'
                        'ZERO_OR_MORE'
                        'len'
                        'ONE_OR_MORE'
                        'REMAINDER'
                        'PARSER'
                        'SUPPRESS'
                        'range'
                        'TypeError'
                        'ValueError'
                        'join'
                    [Var Names]
                        'self'
                        'action'
                        'default_metavar'
                        'get_metavar'
                        'result'
                        'metavar'
                        'formats'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s'
                        1
                        '[%s]'
                        2
                        '[%s [%s ...]]'
                        '[%s ...]'
                        '%s [%s ...]'
                        '...'
                        '%s ...'
                        ''
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                            [Var Names]
                                '.0'
                                '_'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                '%s'
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        4 (to 14)
                                6       STORE_FAST                      1: _
                                8       LOAD_CONST                      0: '%s'
                                10      LIST_APPEND                     2
                                12      JUMP_ABSOLUTE                   2 (to 4)
                                14      RETURN_VALUE                    
                        'HelpFormatter._format_args.<locals>.<listcomp>'
                        'invalid nargs value'
                        ' '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _metavar_formatter
                        4       LOAD_FAST                       1: action
                        6       LOAD_FAST                       2: default_metavar
                        8       CALL_METHOD                     2
                        10      STORE_FAST                      3: get_metavar
                        12      LOAD_FAST                       1: action
                        14      LOAD_ATTR                       1: nargs
                        16      LOAD_CONST                      0: None
                        18      IS_OP                           0 (is)
                        20      POP_JUMP_IF_FALSE               19 (to 38)
                        22      LOAD_CONST                      1: '%s'
                        24      LOAD_FAST                       3: get_metavar
                        26      LOAD_CONST                      2: 1
                        28      CALL_FUNCTION                   1
                        30      BINARY_MODULO                   
                        32      STORE_FAST                      4: result
                        34      LOAD_FAST                       4: result
                        36      RETURN_VALUE                    
                        38      LOAD_FAST                       1: action
                        40      LOAD_ATTR                       1: nargs
                        42      LOAD_GLOBAL                     2: OPTIONAL
                        44      COMPARE_OP                      2 (==)
                        46      POP_JUMP_IF_FALSE               32 (to 64)
                        48      LOAD_CONST                      3: '[%s]'
                        50      LOAD_FAST                       3: get_metavar
                        52      LOAD_CONST                      2: 1
                        54      CALL_FUNCTION                   1
                        56      BINARY_MODULO                   
                        58      STORE_FAST                      4: result
                        60      LOAD_FAST                       4: result
                        62      RETURN_VALUE                    
                        64      LOAD_FAST                       1: action
                        66      LOAD_ATTR                       1: nargs
                        68      LOAD_GLOBAL                     3: ZERO_OR_MORE
                        70      COMPARE_OP                      2 (==)
                        72      POP_JUMP_IF_FALSE               59 (to 118)
                        74      LOAD_FAST                       3: get_metavar
                        76      LOAD_CONST                      2: 1
                        78      CALL_FUNCTION                   1
                        80      STORE_FAST                      5: metavar
                        82      LOAD_GLOBAL                     4: len
                        84      LOAD_FAST                       5: metavar
                        86      CALL_FUNCTION                   1
                        88      LOAD_CONST                      4: 2
                        90      COMPARE_OP                      2 (==)
                        92      POP_JUMP_IF_FALSE               53 (to 106)
                        94      LOAD_CONST                      5: '[%s [%s ...]]'
                        96      LOAD_FAST                       5: metavar
                        98      BINARY_MODULO                   
                        100     STORE_FAST                      4: result
                        102     LOAD_FAST                       4: result
                        104     RETURN_VALUE                    
                        106     LOAD_CONST                      6: '[%s ...]'
                        108     LOAD_FAST                       5: metavar
                        110     BINARY_MODULO                   
                        112     STORE_FAST                      4: result
                        114     LOAD_FAST                       4: result
                        116     RETURN_VALUE                    
                        118     LOAD_FAST                       1: action
                        120     LOAD_ATTR                       1: nargs
                        122     LOAD_GLOBAL                     5: ONE_OR_MORE
                        124     COMPARE_OP                      2 (==)
                        126     POP_JUMP_IF_FALSE               72 (to 144)
                        128     LOAD_CONST                      7: '%s [%s ...]'
                        130     LOAD_FAST                       3: get_metavar
                        132     LOAD_CONST                      4: 2
                        134     CALL_FUNCTION                   1
                        136     BINARY_MODULO                   
                        138     STORE_FAST                      4: result
                        140     LOAD_FAST                       4: result
                        142     RETURN_VALUE                    
                        144     LOAD_FAST                       1: action
                        146     LOAD_ATTR                       1: nargs
                        148     LOAD_GLOBAL                     6: REMAINDER
                        150     COMPARE_OP                      2 (==)
                        152     POP_JUMP_IF_FALSE               81 (to 162)
                        154     LOAD_CONST                      8: '...'
                        156     STORE_FAST                      4: result
                        158     LOAD_FAST                       4: result
                        160     RETURN_VALUE                    
                        162     LOAD_FAST                       1: action
                        164     LOAD_ATTR                       1: nargs
                        166     LOAD_GLOBAL                     7: PARSER
                        168     COMPARE_OP                      2 (==)
                        170     POP_JUMP_IF_FALSE               94 (to 188)
                        172     LOAD_CONST                      9: '%s ...'
                        174     LOAD_FAST                       3: get_metavar
                        176     LOAD_CONST                      2: 1
                        178     CALL_FUNCTION                   1
                        180     BINARY_MODULO                   
                        182     STORE_FAST                      4: result
                        184     LOAD_FAST                       4: result
                        186     RETURN_VALUE                    
                        188     LOAD_FAST                       1: action
                        190     LOAD_ATTR                       1: nargs
                        192     LOAD_GLOBAL                     8: SUPPRESS
                        194     COMPARE_OP                      2 (==)
                        196     POP_JUMP_IF_FALSE               103 (to 206)
                        198     LOAD_CONST                      10: ''
                        200     STORE_FAST                      4: result
                        202     LOAD_FAST                       4: result
                        204     RETURN_VALUE                    
                        206     SETUP_FINALLY                   12 (to 232)
                        208     LOAD_CONST                      11: <CODE> <listcomp>
                        210     LOAD_CONST                      12: 'HelpFormatter._format_args.<locals>.<listcomp>'
                        212     MAKE_FUNCTION                   0
                        214     LOAD_GLOBAL                     9: range
                        216     LOAD_FAST                       1: action
                        218     LOAD_ATTR                       1: nargs
                        220     CALL_FUNCTION                   1
                        222     GET_ITER                        
                        224     CALL_FUNCTION                   1
                        226     STORE_FAST                      6: formats
                        228     POP_BLOCK                       
                        230     JUMP_FORWARD                    12 (to 256)
                        232     DUP_TOP                         
                        234     LOAD_GLOBAL                     10: TypeError
                        236     JUMP_IF_NOT_EXC_MATCH           127 (to 254)
                        238     POP_TOP                         
                        240     POP_TOP                         
                        242     POP_TOP                         
                        244     LOAD_GLOBAL                     11: ValueError
                        246     LOAD_CONST                      13: 'invalid nargs value'
                        248     CALL_FUNCTION                   1
                        250     LOAD_CONST                      0: None
                        252     RAISE_VARARGS                   2
                        254     RERAISE                         0
                        256     LOAD_CONST                      14: ' '
                        258     LOAD_METHOD                     12: join
                        260     LOAD_FAST                       6: formats
                        262     CALL_METHOD                     1
                        264     LOAD_FAST                       3: get_metavar
                        266     LOAD_FAST                       1: action
                        268     LOAD_ATTR                       1: nargs
                        270     CALL_FUNCTION                   1
                        272     BINARY_MODULO                   
                        274     STORE_FAST                      4: result
                        276     LOAD_FAST                       4: result
                        278     RETURN_VALUE                    
                'HelpFormatter._format_args'
                [Code]
                    File Name: argparse.py
                    Object Name: _expand_help
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'dict'
                        'vars'
                        '_prog'
                        'list'
                        'SUPPRESS'
                        'hasattr'
                        '__name__'
                        'get'
                        'join'
                        '_get_help_string'
                    [Var Names]
                        'self'
                        'action'
                        'params'
                        'name'
                        'choices_str'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            'prog'
                        )
                        '__name__'
                        'choices'
                        ', '
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'str'
                            [Var Names]
                                '.0'
                                'c'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        6 (to 18)
                                6       STORE_FAST                      1: c
                                8       LOAD_GLOBAL                     0: str
                                10      LOAD_FAST                       1: c
                                12      CALL_FUNCTION                   1
                                14      LIST_APPEND                     2
                                16      JUMP_ABSOLUTE                   2 (to 4)
                                18      RETURN_VALUE                    
                        'HelpFormatter._expand_help.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: dict
                        2       LOAD_GLOBAL                     1: vars
                        4       LOAD_FAST                       1: action
                        6       CALL_FUNCTION                   1
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: _prog
                        12      LOAD_CONST                      1: ('prog',)
                        14      CALL_FUNCTION_KW                2
                        16      STORE_FAST                      2: params
                        18      LOAD_GLOBAL                     3: list
                        20      LOAD_FAST                       2: params
                        22      CALL_FUNCTION                   1
                        24      GET_ITER                        
                        26      FOR_ITER                        11 (to 50)
                        28      STORE_FAST                      3: name
                        30      LOAD_FAST                       2: params
                        32      LOAD_FAST                       3: name
                        34      BINARY_SUBSCR                   
                        36      LOAD_GLOBAL                     4: SUPPRESS
                        38      IS_OP                           0 (is)
                        40      POP_JUMP_IF_FALSE               24 (to 48)
                        42      LOAD_FAST                       2: params
                        44      LOAD_FAST                       3: name
                        46      DELETE_SUBSCR                   
                        48      JUMP_ABSOLUTE                   13 (to 26)
                        50      LOAD_GLOBAL                     3: list
                        52      LOAD_FAST                       2: params
                        54      CALL_FUNCTION                   1
                        56      GET_ITER                        
                        58      FOR_ITER                        16 (to 92)
                        60      STORE_FAST                      3: name
                        62      LOAD_GLOBAL                     5: hasattr
                        64      LOAD_FAST                       2: params
                        66      LOAD_FAST                       3: name
                        68      BINARY_SUBSCR                   
                        70      LOAD_CONST                      2: '__name__'
                        72      CALL_FUNCTION                   2
                        74      POP_JUMP_IF_FALSE               45 (to 90)
                        76      LOAD_FAST                       2: params
                        78      LOAD_FAST                       3: name
                        80      BINARY_SUBSCR                   
                        82      LOAD_ATTR                       6: __name__
                        84      LOAD_FAST                       2: params
                        86      LOAD_FAST                       3: name
                        88      STORE_SUBSCR                    
                        90      JUMP_ABSOLUTE                   29 (to 58)
                        92      LOAD_FAST                       2: params
                        94      LOAD_METHOD                     7: get
                        96      LOAD_CONST                      3: 'choices'
                        98      CALL_METHOD                     1
                        100     LOAD_CONST                      0: None
                        102     IS_OP                           1 (is not)
                        104     POP_JUMP_IF_FALSE               69 (to 138)
                        106     LOAD_CONST                      4: ', '
                        108     LOAD_METHOD                     8: join
                        110     LOAD_CONST                      5: <CODE> <listcomp>
                        112     LOAD_CONST                      6: 'HelpFormatter._expand_help.<locals>.<listcomp>'
                        114     MAKE_FUNCTION                   0
                        116     LOAD_FAST                       2: params
                        118     LOAD_CONST                      3: 'choices'
                        120     BINARY_SUBSCR                   
                        122     GET_ITER                        
                        124     CALL_FUNCTION                   1
                        126     CALL_METHOD                     1
                        128     STORE_FAST                      4: choices_str
                        130     LOAD_FAST                       4: choices_str
                        132     LOAD_FAST                       2: params
                        134     LOAD_CONST                      3: 'choices'
                        136     STORE_SUBSCR                    
                        138     LOAD_FAST                       0: self
                        140     LOAD_METHOD                     9: _get_help_string
                        142     LOAD_FAST                       1: action
                        144     CALL_METHOD                     1
                        146     LOAD_FAST                       2: params
                        148     BINARY_MODULO                   
                        150     RETURN_VALUE                    
                'HelpFormatter._expand_help'
                [Code]
                    File Name: argparse.py
                    Object Name: _iter_indented_subactions
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        '_get_subactions'
                        'AttributeError'
                        '_indent'
                        '_dedent'
                    [Var Names]
                        'self'
                        'action'
                        'get_subactions'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       SETUP_FINALLY                   5 (to 14)
                        4       LOAD_FAST                       1: action
                        6       LOAD_ATTR                       0: _get_subactions
                        8       STORE_FAST                      2: get_subactions
                        10      POP_BLOCK                       
                        12      JUMP_FORWARD                    10 (to 34)
                        14      DUP_TOP                         
                        16      LOAD_GLOBAL                     1: AttributeError
                        18      JUMP_IF_NOT_EXC_MATCH           16 (to 32)
                        20      POP_TOP                         
                        22      POP_TOP                         
                        24      POP_TOP                         
                        26      POP_EXCEPT                      
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                        32      RERAISE                         0
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     2: _indent
                        38      CALL_METHOD                     0
                        40      POP_TOP                         
                        42      LOAD_FAST                       2: get_subactions
                        44      CALL_FUNCTION                   0
                        46      GET_YIELD_FROM_ITER             
                        48      LOAD_CONST                      0: None
                        50      YIELD_FROM                      
                        52      POP_TOP                         
                        54      LOAD_FAST                       0: self
                        56      LOAD_METHOD                     3: _dedent
                        58      CALL_METHOD                     0
                        60      POP_TOP                         
                        62      LOAD_CONST                      0: None
                        64      RETURN_VALUE                    
                'HelpFormatter._iter_indented_subactions'
                [Code]
                    File Name: argparse.py
                    Object Name: _split_lines
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_whitespace_matcher'
                        'sub'
                        'strip'
                        'textwrap'
                        'wrap'
                    [Var Names]
                        'self'
                        'text'
                        'width'
                        'textwrap'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' '
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _whitespace_matcher
                        4       LOAD_METHOD                     1: sub
                        6       LOAD_CONST                      1: ' '
                        8       LOAD_FAST                       1: text
                        10      CALL_METHOD                     2
                        12      LOAD_METHOD                     2: strip
                        14      CALL_METHOD                     0
                        16      STORE_FAST                      1: text
                        18      LOAD_CONST                      2: 0
                        20      LOAD_CONST                      0: None
                        22      IMPORT_NAME                     3: textwrap
                        24      STORE_FAST                      3: textwrap
                        26      LOAD_FAST                       3: textwrap
                        28      LOAD_METHOD                     4: wrap
                        30      LOAD_FAST                       1: text
                        32      LOAD_FAST                       2: width
                        34      CALL_METHOD                     2
                        36      RETURN_VALUE                    
                'HelpFormatter._split_lines'
                [Code]
                    File Name: argparse.py
                    Object Name: _fill_text
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_whitespace_matcher'
                        'sub'
                        'strip'
                        'textwrap'
                        'fill'
                    [Var Names]
                        'self'
                        'text'
                        'width'
                        'indent'
                        'textwrap'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' '
                        0
                        (
                            'initial_indent'
                            'subsequent_indent'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _whitespace_matcher
                        4       LOAD_METHOD                     1: sub
                        6       LOAD_CONST                      1: ' '
                        8       LOAD_FAST                       1: text
                        10      CALL_METHOD                     2
                        12      LOAD_METHOD                     2: strip
                        14      CALL_METHOD                     0
                        16      STORE_FAST                      1: text
                        18      LOAD_CONST                      2: 0
                        20      LOAD_CONST                      0: None
                        22      IMPORT_NAME                     3: textwrap
                        24      STORE_FAST                      4: textwrap
                        26      LOAD_FAST                       4: textwrap
                        28      LOAD_ATTR                       4: fill
                        30      LOAD_FAST                       1: text
                        32      LOAD_FAST                       2: width
                        34      LOAD_FAST                       3: indent
                        36      LOAD_FAST                       3: indent
                        38      LOAD_CONST                      3: ('initial_indent', 'subsequent_indent')
                        40      CALL_FUNCTION_KW                4
                        42      RETURN_VALUE                    
                'HelpFormatter._fill_text'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_help_string
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'help'
                    [Var Names]
                        'self'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: help
                        4       RETURN_VALUE                    
                'HelpFormatter._get_help_string'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_default_metavar_for_optional
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'dest'
                        'upper'
                    [Var Names]
                        'self'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: dest
                        4       LOAD_METHOD                     1: upper
                        6       CALL_METHOD                     0
                        8       RETURN_VALUE                    
                'HelpFormatter._get_default_metavar_for_optional'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_default_metavar_for_positional
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'dest'
                    [Var Names]
                        'self'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: dest
                        4       RETURN_VALUE                    
                'HelpFormatter._get_default_metavar_for_positional'
                (
                    2
                    24
                    None
                )
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'HelpFormatter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Formatter for generating usage messages and argument help strings.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    '
                10      STORE_NAME                      3: __doc__
                12      NOP                             
                14      NOP                             
                16      NOP                             
                18      LOAD_CONST                      59: (2, 24, None)
                20      LOAD_CONST                      5: <CODE> __init__
                22      LOAD_CONST                      6: 'HelpFormatter.__init__'
                24      MAKE_FUNCTION                   1
                26      STORE_NAME                      4: __init__
                28      LOAD_CONST                      7: <CODE> _indent
                30      LOAD_CONST                      8: 'HelpFormatter._indent'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      5: _indent
                36      LOAD_CONST                      9: <CODE> _dedent
                38      LOAD_CONST                      10: 'HelpFormatter._dedent'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      6: _dedent
                44      LOAD_BUILD_CLASS                
                46      LOAD_CONST                      11: <CODE> _Section
                48      LOAD_CONST                      12: '_Section'
                50      MAKE_FUNCTION                   0
                52      LOAD_CONST                      12: '_Section'
                54      LOAD_NAME                       7: object
                56      CALL_FUNCTION                   3
                58      STORE_NAME                      8: _Section
                60      LOAD_CONST                      13: <CODE> _add_item
                62      LOAD_CONST                      14: 'HelpFormatter._add_item'
                64      MAKE_FUNCTION                   0
                66      STORE_NAME                      9: _add_item
                68      LOAD_CONST                      15: <CODE> start_section
                70      LOAD_CONST                      16: 'HelpFormatter.start_section'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      10: start_section
                76      LOAD_CONST                      17: <CODE> end_section
                78      LOAD_CONST                      18: 'HelpFormatter.end_section'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      11: end_section
                84      LOAD_CONST                      19: <CODE> add_text
                86      LOAD_CONST                      20: 'HelpFormatter.add_text'
                88      MAKE_FUNCTION                   0
                90      STORE_NAME                      12: add_text
                92      LOAD_CONST                      60: (None,)
                94      LOAD_CONST                      21: <CODE> add_usage
                96      LOAD_CONST                      22: 'HelpFormatter.add_usage'
                98      MAKE_FUNCTION                   1
                100     STORE_NAME                      13: add_usage
                102     LOAD_CONST                      23: <CODE> add_argument
                104     LOAD_CONST                      24: 'HelpFormatter.add_argument'
                106     MAKE_FUNCTION                   0
                108     STORE_NAME                      14: add_argument
                110     LOAD_CONST                      25: <CODE> add_arguments
                112     LOAD_CONST                      26: 'HelpFormatter.add_arguments'
                114     MAKE_FUNCTION                   0
                116     STORE_NAME                      15: add_arguments
                118     LOAD_CONST                      27: <CODE> format_help
                120     LOAD_CONST                      28: 'HelpFormatter.format_help'
                122     MAKE_FUNCTION                   0
                124     STORE_NAME                      16: format_help
                126     LOAD_CONST                      29: <CODE> _join_parts
                128     LOAD_CONST                      30: 'HelpFormatter._join_parts'
                130     MAKE_FUNCTION                   0
                132     STORE_NAME                      17: _join_parts
                134     LOAD_CONST                      31: <CODE> _format_usage
                136     LOAD_CONST                      32: 'HelpFormatter._format_usage'
                138     MAKE_FUNCTION                   0
                140     STORE_NAME                      18: _format_usage
                142     LOAD_CONST                      33: <CODE> _format_actions_usage
                144     LOAD_CONST                      34: 'HelpFormatter._format_actions_usage'
                146     MAKE_FUNCTION                   0
                148     STORE_NAME                      19: _format_actions_usage
                150     LOAD_CONST                      35: <CODE> _format_text
                152     LOAD_CONST                      36: 'HelpFormatter._format_text'
                154     MAKE_FUNCTION                   0
                156     STORE_NAME                      20: _format_text
                158     LOAD_CONST                      37: <CODE> _format_action
                160     LOAD_CONST                      38: 'HelpFormatter._format_action'
                162     MAKE_FUNCTION                   0
                164     STORE_NAME                      21: _format_action
                166     LOAD_CONST                      39: <CODE> _format_action_invocation
                168     LOAD_CONST                      40: 'HelpFormatter._format_action_invocation'
                170     MAKE_FUNCTION                   0
                172     STORE_NAME                      22: _format_action_invocation
                174     LOAD_CONST                      41: <CODE> _metavar_formatter
                176     LOAD_CONST                      42: 'HelpFormatter._metavar_formatter'
                178     MAKE_FUNCTION                   0
                180     STORE_NAME                      23: _metavar_formatter
                182     LOAD_CONST                      43: <CODE> _format_args
                184     LOAD_CONST                      44: 'HelpFormatter._format_args'
                186     MAKE_FUNCTION                   0
                188     STORE_NAME                      24: _format_args
                190     LOAD_CONST                      45: <CODE> _expand_help
                192     LOAD_CONST                      46: 'HelpFormatter._expand_help'
                194     MAKE_FUNCTION                   0
                196     STORE_NAME                      25: _expand_help
                198     LOAD_CONST                      47: <CODE> _iter_indented_subactions
                200     LOAD_CONST                      48: 'HelpFormatter._iter_indented_subactions'
                202     MAKE_FUNCTION                   0
                204     STORE_NAME                      26: _iter_indented_subactions
                206     LOAD_CONST                      49: <CODE> _split_lines
                208     LOAD_CONST                      50: 'HelpFormatter._split_lines'
                210     MAKE_FUNCTION                   0
                212     STORE_NAME                      27: _split_lines
                214     LOAD_CONST                      51: <CODE> _fill_text
                216     LOAD_CONST                      52: 'HelpFormatter._fill_text'
                218     MAKE_FUNCTION                   0
                220     STORE_NAME                      28: _fill_text
                222     LOAD_CONST                      53: <CODE> _get_help_string
                224     LOAD_CONST                      54: 'HelpFormatter._get_help_string'
                226     MAKE_FUNCTION                   0
                228     STORE_NAME                      29: _get_help_string
                230     LOAD_CONST                      55: <CODE> _get_default_metavar_for_optional
                232     LOAD_CONST                      56: 'HelpFormatter._get_default_metavar_for_optional'
                234     MAKE_FUNCTION                   0
                236     STORE_NAME                      30: _get_default_metavar_for_optional
                238     LOAD_CONST                      57: <CODE> _get_default_metavar_for_positional
                240     LOAD_CONST                      58: 'HelpFormatter._get_default_metavar_for_positional'
                242     MAKE_FUNCTION                   0
                244     STORE_NAME                      31: _get_default_metavar_for_positional
                246     LOAD_CONST                      4: None
                248     RETURN_VALUE                    
        'HelpFormatter'
        [Code]
            File Name: argparse.py
            Object Name: RawDescriptionHelpFormatter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '_fill_text'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'RawDescriptionHelpFormatter'
                'Help message formatter which retains any formatting in descriptions.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    '
                [Code]
                    File Name: argparse.py
                    Object Name: _fill_text
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 6
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'join'
                        'splitlines'
                    [Var Names]
                        'self'
                        'text'
                        'width'
                        'indent'
                    [Free Vars]
                    [Cell Vars]
                        'indent'
                    [Constants]
                        None
                        ''
                        [Code]
                            File Name: argparse.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                            [Var Names]
                                '.0'
                                'line'
                            [Free Vars]
                                'indent'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: line
                                8       LOAD_DEREF                      0: indent
                                10      LOAD_FAST                       1: line
                                12      BINARY_ADD                      
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'RawDescriptionHelpFormatter._fill_text.<locals>.<genexpr>'
                        True
                        (
                            'keepends'
                        )
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_METHOD                     0: join
                        4       LOAD_CLOSURE                    0: indent
                        6       BUILD_TUPLE                     1
                        8       LOAD_CONST                      2: <CODE> <genexpr>
                        10      LOAD_CONST                      3: 'RawDescriptionHelpFormatter._fill_text.<locals>.<genexpr>'
                        12      MAKE_FUNCTION                   8
                        14      LOAD_FAST                       1: text
                        16      LOAD_ATTR                       1: splitlines
                        18      LOAD_CONST                      4: True
                        20      LOAD_CONST                      5: ('keepends',)
                        22      CALL_FUNCTION_KW                1
                        24      GET_ITER                        
                        26      CALL_FUNCTION                   1
                        28      CALL_METHOD                     1
                        30      RETURN_VALUE                    
                'RawDescriptionHelpFormatter._fill_text'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'RawDescriptionHelpFormatter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Help message formatter which retains any formatting in descriptions.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> _fill_text
                14      LOAD_CONST                      3: 'RawDescriptionHelpFormatter._fill_text'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: _fill_text
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'RawDescriptionHelpFormatter'
        [Code]
            File Name: argparse.py
            Object Name: RawTextHelpFormatter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '_split_lines'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'RawTextHelpFormatter'
                'Help message formatter which retains formatting of all help text.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    '
                [Code]
                    File Name: argparse.py
                    Object Name: _split_lines
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'splitlines'
                    [Var Names]
                        'self'
                        'text'
                        'width'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: text
                        2       LOAD_METHOD                     0: splitlines
                        4       CALL_METHOD                     0
                        6       RETURN_VALUE                    
                'RawTextHelpFormatter._split_lines'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'RawTextHelpFormatter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Help message formatter which retains formatting of all help text.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> _split_lines
                14      LOAD_CONST                      3: 'RawTextHelpFormatter._split_lines'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: _split_lines
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'RawTextHelpFormatter'
        [Code]
            File Name: argparse.py
            Object Name: ArgumentDefaultsHelpFormatter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '_get_help_string'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ArgumentDefaultsHelpFormatter'
                'Help message formatter which adds default values to argument help.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    '
                [Code]
                    File Name: argparse.py
                    Object Name: _get_help_string
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'help'
                        'default'
                        'SUPPRESS'
                        'OPTIONAL'
                        'ZERO_OR_MORE'
                        'option_strings'
                        'nargs'
                    [Var Names]
                        'self'
                        'action'
                        'help'
                        'defaulting_nargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%(default)'
                        ' (default: %(default)s)'
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: help
                        4       STORE_FAST                      2: help
                        6       LOAD_CONST                      1: '%(default)'
                        8       LOAD_FAST                       1: action
                        10      LOAD_ATTR                       0: help
                        12      CONTAINS_OP                     1 (not in)
                        14      POP_JUMP_IF_FALSE               29 (to 58)
                        16      LOAD_FAST                       1: action
                        18      LOAD_ATTR                       1: default
                        20      LOAD_GLOBAL                     2: SUPPRESS
                        22      IS_OP                           1 (is not)
                        24      POP_JUMP_IF_FALSE               29 (to 58)
                        26      LOAD_GLOBAL                     3: OPTIONAL
                        28      LOAD_GLOBAL                     4: ZERO_OR_MORE
                        30      BUILD_LIST                      2
                        32      STORE_FAST                      3: defaulting_nargs
                        34      LOAD_FAST                       1: action
                        36      LOAD_ATTR                       5: option_strings
                        38      POP_JUMP_IF_TRUE                25 (to 50)
                        40      LOAD_FAST                       1: action
                        42      LOAD_ATTR                       6: nargs
                        44      LOAD_FAST                       3: defaulting_nargs
                        46      CONTAINS_OP                     0 (in)
                        48      POP_JUMP_IF_FALSE               29 (to 58)
                        50      LOAD_FAST                       2: help
                        52      LOAD_CONST                      2: ' (default: %(default)s)'
                        54      INPLACE_ADD                     
                        56      STORE_FAST                      2: help
                        58      LOAD_FAST                       2: help
                        60      RETURN_VALUE                    
                'ArgumentDefaultsHelpFormatter._get_help_string'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ArgumentDefaultsHelpFormatter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Help message formatter which adds default values to argument help.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> _get_help_string
                14      LOAD_CONST                      3: 'ArgumentDefaultsHelpFormatter._get_help_string'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: _get_help_string
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'ArgumentDefaultsHelpFormatter'
        [Code]
            File Name: argparse.py
            Object Name: MetavarTypeHelpFormatter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '_get_default_metavar_for_optional'
                '_get_default_metavar_for_positional'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'MetavarTypeHelpFormatter'
                "Help message formatter which uses the argument 'type' as the default\n    metavar value (instead of the argument 'dest')\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    "
                [Code]
                    File Name: argparse.py
                    Object Name: _get_default_metavar_for_optional
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        '__name__'
                    [Var Names]
                        'self'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: type
                        4       LOAD_ATTR                       1: __name__
                        6       RETURN_VALUE                    
                'MetavarTypeHelpFormatter._get_default_metavar_for_optional'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_default_metavar_for_positional
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        '__name__'
                    [Var Names]
                        'self'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: type
                        4       LOAD_ATTR                       1: __name__
                        6       RETURN_VALUE                    
                'MetavarTypeHelpFormatter._get_default_metavar_for_positional'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'MetavarTypeHelpFormatter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Help message formatter which uses the argument 'type' as the default\n    metavar value (instead of the argument 'dest')\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> _get_default_metavar_for_optional
                14      LOAD_CONST                      3: 'MetavarTypeHelpFormatter._get_default_metavar_for_optional'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: _get_default_metavar_for_optional
                20      LOAD_CONST                      4: <CODE> _get_default_metavar_for_positional
                22      LOAD_CONST                      5: 'MetavarTypeHelpFormatter._get_default_metavar_for_positional'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: _get_default_metavar_for_positional
                28      LOAD_CONST                      6: None
                30      RETURN_VALUE                    
        'MetavarTypeHelpFormatter'
        [Code]
            File Name: argparse.py
            Object Name: _get_action_name
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'option_strings'
                'join'
                'metavar'
                'SUPPRESS'
                'dest'
                'choices'
            [Var Names]
                'argument'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '/'
                '{'
                ','
                '}'
            [Disassembly]
                0       LOAD_FAST                       0: argument
                2       LOAD_CONST                      0: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               6 (to 12)
                8       LOAD_CONST                      0: None
                10      RETURN_VALUE                    
                12      LOAD_FAST                       0: argument
                14      LOAD_ATTR                       0: option_strings
                16      POP_JUMP_IF_FALSE               15 (to 30)
                18      LOAD_CONST                      1: '/'
                20      LOAD_METHOD                     1: join
                22      LOAD_FAST                       0: argument
                24      LOAD_ATTR                       0: option_strings
                26      CALL_METHOD                     1
                28      RETURN_VALUE                    
                30      LOAD_FAST                       0: argument
                32      LOAD_ATTR                       2: metavar
                34      LOAD_CONST                      0: None
                36      LOAD_GLOBAL                     3: SUPPRESS
                38      BUILD_TUPLE                     2
                40      CONTAINS_OP                     1 (not in)
                42      POP_JUMP_IF_FALSE               25 (to 50)
                44      LOAD_FAST                       0: argument
                46      LOAD_ATTR                       2: metavar
                48      RETURN_VALUE                    
                50      LOAD_FAST                       0: argument
                52      LOAD_ATTR                       4: dest
                54      LOAD_CONST                      0: None
                56      LOAD_GLOBAL                     3: SUPPRESS
                58      BUILD_TUPLE                     2
                60      CONTAINS_OP                     1 (not in)
                62      POP_JUMP_IF_FALSE               35 (to 70)
                64      LOAD_FAST                       0: argument
                66      LOAD_ATTR                       4: dest
                68      RETURN_VALUE                    
                70      LOAD_FAST                       0: argument
                72      LOAD_ATTR                       5: choices
                74      POP_JUMP_IF_FALSE               48 (to 96)
                76      LOAD_CONST                      2: '{'
                78      LOAD_CONST                      3: ','
                80      LOAD_METHOD                     1: join
                82      LOAD_FAST                       0: argument
                84      LOAD_ATTR                       5: choices
                86      CALL_METHOD                     1
                88      BINARY_ADD                      
                90      LOAD_CONST                      4: '}'
                92      BINARY_ADD                      
                94      RETURN_VALUE                    
                96      LOAD_CONST                      0: None
                98      RETURN_VALUE                    
        '_get_action_name'
        [Code]
            File Name: argparse.py
            Object Name: ArgumentError
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__str__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ArgumentError'
                'An error from creating or using an argument (optional or positional).\n\n    The string value of this exception is the message, augmented with\n    information about the argument that caused it.\n    '
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_get_action_name'
                        'argument_name'
                        'message'
                    [Var Names]
                        'self'
                        'argument'
                        'message'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _get_action_name
                        2       LOAD_FAST                       1: argument
                        4       CALL_FUNCTION                   1
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      1: argument_name
                        10      LOAD_FAST                       2: message
                        12      LOAD_FAST                       0: self
                        14      STORE_ATTR                      2: message
                        16      LOAD_CONST                      0: None
                        18      RETURN_VALUE                    
                'ArgumentError.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'argument_name'
                        'dict'
                        'message'
                    [Var Names]
                        'self'
                        'format'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%(message)s'
                        'argument %(argument_name)s: %(message)s'
                        (
                            'message'
                            'argument_name'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: argument_name
                        4       LOAD_CONST                      0: None
                        6       IS_OP                           0 (is)
                        8       POP_JUMP_IF_FALSE               8 (to 16)
                        10      LOAD_CONST                      1: '%(message)s'
                        12      STORE_FAST                      1: format
                        14      JUMP_FORWARD                    2 (to 20)
                        16      LOAD_CONST                      2: 'argument %(argument_name)s: %(message)s'
                        18      STORE_FAST                      1: format
                        20      LOAD_FAST                       1: format
                        22      LOAD_GLOBAL                     1: dict
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       2: message
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       0: argument_name
                        32      LOAD_CONST                      3: ('message', 'argument_name')
                        34      CALL_FUNCTION_KW                2
                        36      BINARY_MODULO                   
                        38      RETURN_VALUE                    
                'ArgumentError.__str__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ArgumentError'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An error from creating or using an argument (optional or positional).\n\n    The string value of this exception is the message, augmented with\n    information about the argument that caused it.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'ArgumentError.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __str__
                22      LOAD_CONST                      5: 'ArgumentError.__str__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __str__
                28      LOAD_CONST                      6: None
                30      RETURN_VALUE                    
        'ArgumentError'
        [Code]
            File Name: argparse.py
            Object Name: ArgumentTypeError
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ArgumentTypeError'
                'An error from trying to convert a command line string to a type.'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ArgumentTypeError'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An error from trying to convert a command line string to a type.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'ArgumentTypeError'
        [Code]
            File Name: argparse.py
            Object Name: Action
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '_get_kwargs'
                'format_usage'
                '__call__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Action'
                "Information about how to convert command line strings to Python objects.\n\n    Action objects are used by an ArgumentParser to represent the information\n    needed to parse a single argument from one or more strings from the\n    command line. The keyword arguments to the Action constructor are also\n    all attributes of Action instances.\n\n    Keyword Arguments:\n\n        - option_strings -- A list of command-line option strings which\n            should be associated with this action.\n\n        - dest -- The name of the attribute to hold the created object(s)\n\n        - nargs -- The number of command-line arguments that should be\n            consumed. By default, one argument will be consumed and a single\n            value will be produced.  Other values include:\n                - N (an integer) consumes N arguments (and produces a list)\n                - '?' consumes zero or one arguments\n                - '*' consumes zero or more arguments (and produces a list)\n                - '+' consumes one or more arguments (and produces a list)\n            Note that the difference between the default and nargs=1 is that\n            with the default, a single value will be produced, while with\n            nargs=1, a list containing a single value will be produced.\n\n        - const -- The value to be produced if the option is specified and the\n            option uses an action that takes no values.\n\n        - default -- The value to be produced if the option is not specified.\n\n        - type -- A callable that accepts a single string argument, and\n            returns the converted value.  The standard Python types str, int,\n            float, and complex are useful examples of such callables.  If None,\n            str is used.\n\n        - choices -- A container of values that should be allowed. If not None,\n            after a command-line argument has been converted to the appropriate\n            type, an exception will be raised if it is not a member of this\n            collection.\n\n        - required -- True if the action must always be specified at the\n            command line. This is only meaningful for optional command-line\n            arguments.\n\n        - help -- The help string describing the argument.\n\n        - metavar -- The name to be used for the option's argument with the\n            help string. If None, the 'dest' value will be used as the name.\n    "
                None
                False
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 11
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'option_strings'
                        'dest'
                        'nargs'
                        'const'
                        'default'
                        'type'
                        'choices'
                        'required'
                        'help'
                        'metavar'
                    [Var Names]
                        'self'
                        'option_strings'
                        'dest'
                        'nargs'
                        'const'
                        'default'
                        'type'
                        'choices'
                        'required'
                        'help'
                        'metavar'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: option_strings
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: option_strings
                        6       LOAD_FAST                       2: dest
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: dest
                        12      LOAD_FAST                       3: nargs
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: nargs
                        18      LOAD_FAST                       4: const
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      3: const
                        24      LOAD_FAST                       5: default
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      4: default
                        30      LOAD_FAST                       6: type
                        32      LOAD_FAST                       0: self
                        34      STORE_ATTR                      5: type
                        36      LOAD_FAST                       7: choices
                        38      LOAD_FAST                       0: self
                        40      STORE_ATTR                      6: choices
                        42      LOAD_FAST                       8: required
                        44      LOAD_FAST                       0: self
                        46      STORE_ATTR                      7: required
                        48      LOAD_FAST                       9: help
                        50      LOAD_FAST                       0: self
                        52      STORE_ATTR                      8: help
                        54      LOAD_FAST                       10: metavar
                        56      LOAD_FAST                       0: self
                        58      STORE_ATTR                      9: metavar
                        60      LOAD_CONST                      0: None
                        62      RETURN_VALUE                    
                'Action.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_kwargs
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                    [Var Names]
                        'self'
                        'names'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        (
                            'option_strings'
                            'dest'
                            'nargs'
                            'const'
                            'default'
                            'type'
                            'choices'
                            'required'
                            'help'
                            'metavar'
                        )
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 6
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'getattr'
                            [Var Names]
                                '.0'
                                'name'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       STORE_FAST                      1: name
                                8       LOAD_FAST                       1: name
                                10      LOAD_GLOBAL                     0: getattr
                                12      LOAD_DEREF                      0: self
                                14      LOAD_FAST                       1: name
                                16      CALL_FUNCTION                   2
                                18      BUILD_TUPLE                     2
                                20      LIST_APPEND                     2
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      RETURN_VALUE                    
                        'Action._get_kwargs.<locals>.<listcomp>'
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_CONST                      1: ('option_strings', 'dest', 'nargs', 'const', 'default', 'type', 'choices', 'required', 'help', 'metavar')
                        4       LIST_EXTEND                     1
                        6       STORE_FAST                      1: names
                        8       LOAD_CLOSURE                    0: self
                        10      BUILD_TUPLE                     1
                        12      LOAD_CONST                      2: <CODE> <listcomp>
                        14      LOAD_CONST                      3: 'Action._get_kwargs.<locals>.<listcomp>'
                        16      MAKE_FUNCTION                   8
                        18      LOAD_FAST                       1: names
                        20      GET_ITER                        
                        22      CALL_FUNCTION                   1
                        24      RETURN_VALUE                    
                'Action._get_kwargs'
                [Code]
                    File Name: argparse.py
                    Object Name: format_usage
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'option_strings'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: option_strings
                        4       LOAD_CONST                      1: 0
                        6       BINARY_SUBSCR                   
                        8       RETURN_VALUE                    
                'Action.format_usage'
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'NotImplementedError'
                        '_'
                    [Var Names]
                        'self'
                        'parser'
                        'namespace'
                        'values'
                        'option_string'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '.__call__() not defined'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: NotImplementedError
                        2       LOAD_GLOBAL                     1: _
                        4       LOAD_CONST                      1: '.__call__() not defined'
                        6       CALL_FUNCTION                   1
                        8       CALL_FUNCTION                   1
                        10      RAISE_VARARGS                   1
                'Action.__call__'
                (
                    None
                    None
                    None
                    None
                    None
                    False
                    None
                    None
                )
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Action'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Information about how to convert command line strings to Python objects.\n\n    Action objects are used by an ArgumentParser to represent the information\n    needed to parse a single argument from one or more strings from the\n    command line. The keyword arguments to the Action constructor are also\n    all attributes of Action instances.\n\n    Keyword Arguments:\n\n        - option_strings -- A list of command-line option strings which\n            should be associated with this action.\n\n        - dest -- The name of the attribute to hold the created object(s)\n\n        - nargs -- The number of command-line arguments that should be\n            consumed. By default, one argument will be consumed and a single\n            value will be produced.  Other values include:\n                - N (an integer) consumes N arguments (and produces a list)\n                - '?' consumes zero or one arguments\n                - '*' consumes zero or more arguments (and produces a list)\n                - '+' consumes one or more arguments (and produces a list)\n            Note that the difference between the default and nargs=1 is that\n            with the default, a single value will be produced, while with\n            nargs=1, a list containing a single value will be produced.\n\n        - const -- The value to be produced if the option is specified and the\n            option uses an action that takes no values.\n\n        - default -- The value to be produced if the option is not specified.\n\n        - type -- A callable that accepts a single string argument, and\n            returns the converted value.  The standard Python types str, int,\n            float, and complex are useful examples of such callables.  If None,\n            str is used.\n\n        - choices -- A container of values that should be allowed. If not None,\n            after a command-line argument has been converted to the appropriate\n            type, an exception will be raised if it is not a member of this\n            collection.\n\n        - required -- True if the action must always be specified at the\n            command line. This is only meaningful for optional command-line\n            arguments.\n\n        - help -- The help string describing the argument.\n\n        - metavar -- The name to be used for the option's argument with the\n            help string. If None, the 'dest' value will be used as the name.\n    "
                10      STORE_NAME                      3: __doc__
                12      NOP                             
                14      NOP                             
                16      NOP                             
                18      NOP                             
                20      NOP                             
                22      NOP                             
                24      NOP                             
                26      NOP                             
                28      LOAD_CONST                      12: (None, None, None, None, None, False, None, None)
                30      LOAD_CONST                      4: <CODE> __init__
                32      LOAD_CONST                      5: 'Action.__init__'
                34      MAKE_FUNCTION                   1
                36      STORE_NAME                      4: __init__
                38      LOAD_CONST                      6: <CODE> _get_kwargs
                40      LOAD_CONST                      7: 'Action._get_kwargs'
                42      MAKE_FUNCTION                   0
                44      STORE_NAME                      5: _get_kwargs
                46      LOAD_CONST                      8: <CODE> format_usage
                48      LOAD_CONST                      9: 'Action.format_usage'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      6: format_usage
                54      LOAD_CONST                      13: (None,)
                56      LOAD_CONST                      10: <CODE> __call__
                58      LOAD_CONST                      11: 'Action.__call__'
                60      MAKE_FUNCTION                   1
                62      STORE_NAME                      7: __call__
                64      LOAD_CONST                      2: None
                66      RETURN_VALUE                    
        'Action'
        [Code]
            File Name: argparse.py
            Object Name: BooleanOptionalAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '__call__'
                'format_usage'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'BooleanOptionalAction'
                None
                False
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 9
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 11
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'append'
                        'startswith'
                        'SUPPRESS'
                        'super'
                        '__init__'
                    [Var Names]
                        'self'
                        'option_strings'
                        'dest'
                        'default'
                        'type'
                        'choices'
                        'required'
                        'help'
                        'metavar'
                        '_option_strings'
                        'option_string'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        '--'
                        '--no-'
                        2
                        ' (default: %(default)s)'
                        0
                        (
                            'option_strings'
                            'dest'
                            'nargs'
                            'default'
                            'type'
                            'choices'
                            'required'
                            'help'
                            'metavar'
                        )
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      9: _option_strings
                        4       LOAD_FAST                       1: option_strings
                        6       GET_ITER                        
                        8       FOR_ITER                        25 (to 60)
                        10      STORE_FAST                      10: option_string
                        12      LOAD_FAST                       9: _option_strings
                        14      LOAD_METHOD                     0: append
                        16      LOAD_FAST                       10: option_string
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_FAST                       10: option_string
                        24      LOAD_METHOD                     1: startswith
                        26      LOAD_CONST                      1: '--'
                        28      CALL_METHOD                     1
                        30      POP_JUMP_IF_FALSE               29 (to 58)
                        32      LOAD_CONST                      2: '--no-'
                        34      LOAD_FAST                       10: option_string
                        36      LOAD_CONST                      3: 2
                        38      LOAD_CONST                      0: None
                        40      BUILD_SLICE                     2
                        42      BINARY_SUBSCR                   
                        44      BINARY_ADD                      
                        46      STORE_FAST                      10: option_string
                        48      LOAD_FAST                       9: _option_strings
                        50      LOAD_METHOD                     0: append
                        52      LOAD_FAST                       10: option_string
                        54      CALL_METHOD                     1
                        56      POP_TOP                         
                        58      JUMP_ABSOLUTE                   4 (to 8)
                        60      LOAD_FAST                       7: help
                        62      LOAD_CONST                      0: None
                        64      IS_OP                           1 (is not)
                        66      POP_JUMP_IF_FALSE               46 (to 92)
                        68      LOAD_FAST                       3: default
                        70      LOAD_CONST                      0: None
                        72      IS_OP                           1 (is not)
                        74      POP_JUMP_IF_FALSE               46 (to 92)
                        76      LOAD_FAST                       3: default
                        78      LOAD_GLOBAL                     2: SUPPRESS
                        80      IS_OP                           1 (is not)
                        82      POP_JUMP_IF_FALSE               46 (to 92)
                        84      LOAD_FAST                       7: help
                        86      LOAD_CONST                      4: ' (default: %(default)s)'
                        88      INPLACE_ADD                     
                        90      STORE_FAST                      7: help
                        92      LOAD_GLOBAL                     3: super
                        94      CALL_FUNCTION                   0
                        96      LOAD_ATTR                       4: __init__
                        98      LOAD_FAST                       9: _option_strings
                        100     LOAD_FAST                       2: dest
                        102     LOAD_CONST                      5: 0
                        104     LOAD_FAST                       3: default
                        106     LOAD_FAST                       4: type
                        108     LOAD_FAST                       5: choices
                        110     LOAD_FAST                       6: required
                        112     LOAD_FAST                       7: help
                        114     LOAD_FAST                       8: metavar
                        116     LOAD_CONST                      6: ('option_strings', 'dest', 'nargs', 'default', 'type', 'choices', 'required', 'help', 'metavar')
                        118     CALL_FUNCTION_KW                9
                        120     POP_TOP                         
                        122     LOAD_CONST                      0: None
                        124     RETURN_VALUE                    
                'BooleanOptionalAction.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'option_strings'
                        'setattr'
                        'dest'
                        'startswith'
                    [Var Names]
                        'self'
                        'parser'
                        'namespace'
                        'values'
                        'option_string'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '--no-'
                    [Disassembly]
                        0       LOAD_FAST                       4: option_string
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: option_strings
                        6       CONTAINS_OP                     0 (in)
                        8       POP_JUMP_IF_FALSE               18 (to 36)
                        10      LOAD_GLOBAL                     1: setattr
                        12      LOAD_FAST                       2: namespace
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: dest
                        18      LOAD_FAST                       4: option_string
                        20      LOAD_METHOD                     3: startswith
                        22      LOAD_CONST                      1: '--no-'
                        24      CALL_METHOD                     1
                        26      UNARY_NOT                       
                        28      CALL_FUNCTION                   3
                        30      POP_TOP                         
                        32      LOAD_CONST                      0: None
                        34      RETURN_VALUE                    
                        36      LOAD_CONST                      0: None
                        38      RETURN_VALUE                    
                'BooleanOptionalAction.__call__'
                [Code]
                    File Name: argparse.py
                    Object Name: format_usage
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'join'
                        'option_strings'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' | '
                    [Disassembly]
                        0       LOAD_CONST                      1: ' | '
                        2       LOAD_METHOD                     0: join
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: option_strings
                        8       CALL_METHOD                     1
                        10      RETURN_VALUE                    
                'BooleanOptionalAction.format_usage'
                (
                    None
                    None
                    None
                    False
                    None
                    None
                )
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'BooleanOptionalAction'
                6       STORE_NAME                      2: __qualname__
                8       NOP                             
                10      NOP                             
                12      NOP                             
                14      NOP                             
                16      NOP                             
                18      NOP                             
                20      LOAD_CONST                      9: (None, None, None, False, None, None)
                22      LOAD_CLOSURE                    0: __class__
                24      BUILD_TUPLE                     1
                26      LOAD_CONST                      3: <CODE> __init__
                28      LOAD_CONST                      4: 'BooleanOptionalAction.__init__'
                30      MAKE_FUNCTION                   9
                32      STORE_NAME                      3: __init__
                34      LOAD_CONST                      10: (None,)
                36      LOAD_CONST                      5: <CODE> __call__
                38      LOAD_CONST                      6: 'BooleanOptionalAction.__call__'
                40      MAKE_FUNCTION                   1
                42      STORE_NAME                      4: __call__
                44      LOAD_CONST                      7: <CODE> format_usage
                46      LOAD_CONST                      8: 'BooleanOptionalAction.format_usage'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      5: format_usage
                52      LOAD_CLOSURE                    0: __class__
                54      DUP_TOP                         
                56      STORE_NAME                      6: __classcell__
                58      RETURN_VALUE                    
        'BooleanOptionalAction'
        [Code]
            File Name: argparse.py
            Object Name: _StoreAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '__call__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_StoreAction'
                None
                False
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 11
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 12
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'ValueError'
                        'OPTIONAL'
                        'super'
                        '_StoreAction'
                        '__init__'
                    [Var Names]
                        'self'
                        'option_strings'
                        'dest'
                        'nargs'
                        'const'
                        'default'
                        'type'
                        'choices'
                        'required'
                        'help'
                        'metavar'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'nargs for store actions must be != 0; if you have nothing to store, actions such as store true or store const may be more appropriate'
                        'nargs must be %r to supply const'
                        (
                            'option_strings'
                            'dest'
                            'nargs'
                            'const'
                            'default'
                            'type'
                            'choices'
                            'required'
                            'help'
                            'metavar'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       3: nargs
                        2       LOAD_CONST                      1: 0
                        4       COMPARE_OP                      2 (==)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: ValueError
                        10      LOAD_CONST                      2: 'nargs for store actions must be != 0; if you have nothing to store, actions such as store true or store const may be more appropriate'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_FAST                       4: const
                        18      LOAD_CONST                      0: None
                        20      IS_OP                           1 (is not)
                        22      POP_JUMP_IF_FALSE               22 (to 44)
                        24      LOAD_FAST                       3: nargs
                        26      LOAD_GLOBAL                     1: OPTIONAL
                        28      COMPARE_OP                      3 (!=)
                        30      POP_JUMP_IF_FALSE               22 (to 44)
                        32      LOAD_GLOBAL                     0: ValueError
                        34      LOAD_CONST                      3: 'nargs must be %r to supply const'
                        36      LOAD_GLOBAL                     1: OPTIONAL
                        38      BINARY_MODULO                   
                        40      CALL_FUNCTION                   1
                        42      RAISE_VARARGS                   1
                        44      LOAD_GLOBAL                     2: super
                        46      LOAD_GLOBAL                     3: _StoreAction
                        48      LOAD_FAST                       0: self
                        50      CALL_FUNCTION                   2
                        52      LOAD_ATTR                       4: __init__
                        54      LOAD_FAST                       1: option_strings
                        56      LOAD_FAST                       2: dest
                        58      LOAD_FAST                       3: nargs
                        60      LOAD_FAST                       4: const
                        62      LOAD_FAST                       5: default
                        64      LOAD_FAST                       6: type
                        66      LOAD_FAST                       7: choices
                        68      LOAD_FAST                       8: required
                        70      LOAD_FAST                       9: help
                        72      LOAD_FAST                       10: metavar
                        74      LOAD_CONST                      4: ('option_strings', 'dest', 'nargs', 'const', 'default', 'type', 'choices', 'required', 'help', 'metavar')
                        76      CALL_FUNCTION_KW                10
                        78      POP_TOP                         
                        80      LOAD_CONST                      0: None
                        82      RETURN_VALUE                    
                '_StoreAction.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'setattr'
                        'dest'
                    [Var Names]
                        'self'
                        'parser'
                        'namespace'
                        'values'
                        'option_string'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: setattr
                        2       LOAD_FAST                       2: namespace
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: dest
                        8       LOAD_FAST                       3: values
                        10      CALL_FUNCTION                   3
                        12      POP_TOP                         
                        14      LOAD_CONST                      0: None
                        16      RETURN_VALUE                    
                '_StoreAction.__call__'
                (
                    None
                    None
                    None
                    None
                    None
                    False
                    None
                    None
                )
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_StoreAction'
                6       STORE_NAME                      2: __qualname__
                8       NOP                             
                10      NOP                             
                12      NOP                             
                14      NOP                             
                16      NOP                             
                18      NOP                             
                20      NOP                             
                22      NOP                             
                24      LOAD_CONST                      7: (None, None, None, None, None, False, None, None)
                26      LOAD_CLOSURE                    0: __class__
                28      BUILD_TUPLE                     1
                30      LOAD_CONST                      3: <CODE> __init__
                32      LOAD_CONST                      4: '_StoreAction.__init__'
                34      MAKE_FUNCTION                   9
                36      STORE_NAME                      3: __init__
                38      LOAD_CONST                      8: (None,)
                40      LOAD_CONST                      5: <CODE> __call__
                42      LOAD_CONST                      6: '_StoreAction.__call__'
                44      MAKE_FUNCTION                   1
                46      STORE_NAME                      4: __call__
                48      LOAD_CLOSURE                    0: __class__
                50      DUP_TOP                         
                52      STORE_NAME                      5: __classcell__
                54      RETURN_VALUE                    
        '_StoreAction'
        [Code]
            File Name: argparse.py
            Object Name: _StoreConstAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '__call__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_StoreConstAction'
                None
                False
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 8
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 9
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '_StoreConstAction'
                        '__init__'
                    [Var Names]
                        'self'
                        'option_strings'
                        'dest'
                        'const'
                        'default'
                        'required'
                        'help'
                        'metavar'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        (
                            'option_strings'
                            'dest'
                            'nargs'
                            'const'
                            'default'
                            'required'
                            'help'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: _StoreConstAction
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_ATTR                       2: __init__
                        10      LOAD_FAST                       1: option_strings
                        12      LOAD_FAST                       2: dest
                        14      LOAD_CONST                      1: 0
                        16      LOAD_FAST                       3: const
                        18      LOAD_FAST                       4: default
                        20      LOAD_FAST                       5: required
                        22      LOAD_FAST                       6: help
                        24      LOAD_CONST                      2: ('option_strings', 'dest', 'nargs', 'const', 'default', 'required', 'help')
                        26      CALL_FUNCTION_KW                7
                        28      POP_TOP                         
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                '_StoreConstAction.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'setattr'
                        'dest'
                        'const'
                    [Var Names]
                        'self'
                        'parser'
                        'namespace'
                        'values'
                        'option_string'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: setattr
                        2       LOAD_FAST                       2: namespace
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: dest
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: const
                        12      CALL_FUNCTION                   3
                        14      POP_TOP                         
                        16      LOAD_CONST                      0: None
                        18      RETURN_VALUE                    
                '_StoreConstAction.__call__'
                (
                    None
                    False
                    None
                    None
                )
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_StoreConstAction'
                6       STORE_NAME                      2: __qualname__
                8       NOP                             
                10      NOP                             
                12      NOP                             
                14      NOP                             
                16      LOAD_CONST                      7: (None, False, None, None)
                18      LOAD_CLOSURE                    0: __class__
                20      BUILD_TUPLE                     1
                22      LOAD_CONST                      3: <CODE> __init__
                24      LOAD_CONST                      4: '_StoreConstAction.__init__'
                26      MAKE_FUNCTION                   9
                28      STORE_NAME                      3: __init__
                30      LOAD_CONST                      8: (None,)
                32      LOAD_CONST                      5: <CODE> __call__
                34      LOAD_CONST                      6: '_StoreConstAction.__call__'
                36      MAKE_FUNCTION                   1
                38      STORE_NAME                      4: __call__
                40      LOAD_CLOSURE                    0: __class__
                42      DUP_TOP                         
                44      STORE_NAME                      5: __classcell__
                46      RETURN_VALUE                    
        '_StoreConstAction'
        [Code]
            File Name: argparse.py
            Object Name: _StoreTrueAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_StoreTrueAction'
                False
                None
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 6
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '_StoreTrueAction'
                        '__init__'
                    [Var Names]
                        'self'
                        'option_strings'
                        'dest'
                        'default'
                        'required'
                        'help'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        True
                        (
                            'option_strings'
                            'dest'
                            'const'
                            'default'
                            'required'
                            'help'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: _StoreTrueAction
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_ATTR                       2: __init__
                        10      LOAD_FAST                       1: option_strings
                        12      LOAD_FAST                       2: dest
                        14      LOAD_CONST                      1: True
                        16      LOAD_FAST                       3: default
                        18      LOAD_FAST                       4: required
                        20      LOAD_FAST                       5: help
                        22      LOAD_CONST                      2: ('option_strings', 'dest', 'const', 'default', 'required', 'help')
                        24      CALL_FUNCTION_KW                6
                        26      POP_TOP                         
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                '_StoreTrueAction.__init__'
                (
                    False
                    False
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_StoreTrueAction'
                6       STORE_NAME                      2: __qualname__
                8       NOP                             
                10      NOP                             
                12      NOP                             
                14      LOAD_CONST                      5: (False, False, None)
                16      LOAD_CLOSURE                    0: __class__
                18      BUILD_TUPLE                     1
                20      LOAD_CONST                      3: <CODE> __init__
                22      LOAD_CONST                      4: '_StoreTrueAction.__init__'
                24      MAKE_FUNCTION                   9
                26      STORE_NAME                      3: __init__
                28      LOAD_CLOSURE                    0: __class__
                30      DUP_TOP                         
                32      STORE_NAME                      4: __classcell__
                34      RETURN_VALUE                    
        '_StoreTrueAction'
        [Code]
            File Name: argparse.py
            Object Name: _StoreFalseAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_StoreFalseAction'
                True
                False
                None
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 6
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '_StoreFalseAction'
                        '__init__'
                    [Var Names]
                        'self'
                        'option_strings'
                        'dest'
                        'default'
                        'required'
                        'help'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        (
                            'option_strings'
                            'dest'
                            'const'
                            'default'
                            'required'
                            'help'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: _StoreFalseAction
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_ATTR                       2: __init__
                        10      LOAD_FAST                       1: option_strings
                        12      LOAD_FAST                       2: dest
                        14      LOAD_CONST                      1: False
                        16      LOAD_FAST                       3: default
                        18      LOAD_FAST                       4: required
                        20      LOAD_FAST                       5: help
                        22      LOAD_CONST                      2: ('option_strings', 'dest', 'const', 'default', 'required', 'help')
                        24      CALL_FUNCTION_KW                6
                        26      POP_TOP                         
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                '_StoreFalseAction.__init__'
                (
                    True
                    False
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_StoreFalseAction'
                6       STORE_NAME                      2: __qualname__
                8       NOP                             
                10      NOP                             
                12      NOP                             
                14      LOAD_CONST                      6: (True, False, None)
                16      LOAD_CLOSURE                    0: __class__
                18      BUILD_TUPLE                     1
                20      LOAD_CONST                      4: <CODE> __init__
                22      LOAD_CONST                      5: '_StoreFalseAction.__init__'
                24      MAKE_FUNCTION                   9
                26      STORE_NAME                      3: __init__
                28      LOAD_CLOSURE                    0: __class__
                30      DUP_TOP                         
                32      STORE_NAME                      4: __classcell__
                34      RETURN_VALUE                    
        '_StoreFalseAction'
        [Code]
            File Name: argparse.py
            Object Name: _AppendAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '__call__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_AppendAction'
                None
                False
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 11
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 12
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'ValueError'
                        'OPTIONAL'
                        'super'
                        '_AppendAction'
                        '__init__'
                    [Var Names]
                        'self'
                        'option_strings'
                        'dest'
                        'nargs'
                        'const'
                        'default'
                        'type'
                        'choices'
                        'required'
                        'help'
                        'metavar'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'nargs for append actions must be != 0; if arg strings are not supplying the value to append, the append const action may be more appropriate'
                        'nargs must be %r to supply const'
                        (
                            'option_strings'
                            'dest'
                            'nargs'
                            'const'
                            'default'
                            'type'
                            'choices'
                            'required'
                            'help'
                            'metavar'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       3: nargs
                        2       LOAD_CONST                      1: 0
                        4       COMPARE_OP                      2 (==)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: ValueError
                        10      LOAD_CONST                      2: 'nargs for append actions must be != 0; if arg strings are not supplying the value to append, the append const action may be more appropriate'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_FAST                       4: const
                        18      LOAD_CONST                      0: None
                        20      IS_OP                           1 (is not)
                        22      POP_JUMP_IF_FALSE               22 (to 44)
                        24      LOAD_FAST                       3: nargs
                        26      LOAD_GLOBAL                     1: OPTIONAL
                        28      COMPARE_OP                      3 (!=)
                        30      POP_JUMP_IF_FALSE               22 (to 44)
                        32      LOAD_GLOBAL                     0: ValueError
                        34      LOAD_CONST                      3: 'nargs must be %r to supply const'
                        36      LOAD_GLOBAL                     1: OPTIONAL
                        38      BINARY_MODULO                   
                        40      CALL_FUNCTION                   1
                        42      RAISE_VARARGS                   1
                        44      LOAD_GLOBAL                     2: super
                        46      LOAD_GLOBAL                     3: _AppendAction
                        48      LOAD_FAST                       0: self
                        50      CALL_FUNCTION                   2
                        52      LOAD_ATTR                       4: __init__
                        54      LOAD_FAST                       1: option_strings
                        56      LOAD_FAST                       2: dest
                        58      LOAD_FAST                       3: nargs
                        60      LOAD_FAST                       4: const
                        62      LOAD_FAST                       5: default
                        64      LOAD_FAST                       6: type
                        66      LOAD_FAST                       7: choices
                        68      LOAD_FAST                       8: required
                        70      LOAD_FAST                       9: help
                        72      LOAD_FAST                       10: metavar
                        74      LOAD_CONST                      4: ('option_strings', 'dest', 'nargs', 'const', 'default', 'type', 'choices', 'required', 'help', 'metavar')
                        76      CALL_FUNCTION_KW                10
                        78      POP_TOP                         
                        80      LOAD_CONST                      0: None
                        82      RETURN_VALUE                    
                '_AppendAction.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getattr'
                        'dest'
                        '_copy_items'
                        'append'
                        'setattr'
                    [Var Names]
                        'self'
                        'parser'
                        'namespace'
                        'values'
                        'option_string'
                        'items'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getattr
                        2       LOAD_FAST                       2: namespace
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: dest
                        8       LOAD_CONST                      0: None
                        10      CALL_FUNCTION                   3
                        12      STORE_FAST                      5: items
                        14      LOAD_GLOBAL                     2: _copy_items
                        16      LOAD_FAST                       5: items
                        18      CALL_FUNCTION                   1
                        20      STORE_FAST                      5: items
                        22      LOAD_FAST                       5: items
                        24      LOAD_METHOD                     3: append
                        26      LOAD_FAST                       3: values
                        28      CALL_METHOD                     1
                        30      POP_TOP                         
                        32      LOAD_GLOBAL                     4: setattr
                        34      LOAD_FAST                       2: namespace
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       1: dest
                        40      LOAD_FAST                       5: items
                        42      CALL_FUNCTION                   3
                        44      POP_TOP                         
                        46      LOAD_CONST                      0: None
                        48      RETURN_VALUE                    
                '_AppendAction.__call__'
                (
                    None
                    None
                    None
                    None
                    None
                    False
                    None
                    None
                )
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_AppendAction'
                6       STORE_NAME                      2: __qualname__
                8       NOP                             
                10      NOP                             
                12      NOP                             
                14      NOP                             
                16      NOP                             
                18      NOP                             
                20      NOP                             
                22      NOP                             
                24      LOAD_CONST                      7: (None, None, None, None, None, False, None, None)
                26      LOAD_CLOSURE                    0: __class__
                28      BUILD_TUPLE                     1
                30      LOAD_CONST                      3: <CODE> __init__
                32      LOAD_CONST                      4: '_AppendAction.__init__'
                34      MAKE_FUNCTION                   9
                36      STORE_NAME                      3: __init__
                38      LOAD_CONST                      8: (None,)
                40      LOAD_CONST                      5: <CODE> __call__
                42      LOAD_CONST                      6: '_AppendAction.__call__'
                44      MAKE_FUNCTION                   1
                46      STORE_NAME                      4: __call__
                48      LOAD_CLOSURE                    0: __class__
                50      DUP_TOP                         
                52      STORE_NAME                      5: __classcell__
                54      RETURN_VALUE                    
        '_AppendAction'
        [Code]
            File Name: argparse.py
            Object Name: _AppendConstAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '__call__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_AppendConstAction'
                None
                False
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 8
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 10
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '_AppendConstAction'
                        '__init__'
                    [Var Names]
                        'self'
                        'option_strings'
                        'dest'
                        'const'
                        'default'
                        'required'
                        'help'
                        'metavar'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        (
                            'option_strings'
                            'dest'
                            'nargs'
                            'const'
                            'default'
                            'required'
                            'help'
                            'metavar'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: _AppendConstAction
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_ATTR                       2: __init__
                        10      LOAD_FAST                       1: option_strings
                        12      LOAD_FAST                       2: dest
                        14      LOAD_CONST                      1: 0
                        16      LOAD_FAST                       3: const
                        18      LOAD_FAST                       4: default
                        20      LOAD_FAST                       5: required
                        22      LOAD_FAST                       6: help
                        24      LOAD_FAST                       7: metavar
                        26      LOAD_CONST                      2: ('option_strings', 'dest', 'nargs', 'const', 'default', 'required', 'help', 'metavar')
                        28      CALL_FUNCTION_KW                8
                        30      POP_TOP                         
                        32      LOAD_CONST                      0: None
                        34      RETURN_VALUE                    
                '_AppendConstAction.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getattr'
                        'dest'
                        '_copy_items'
                        'append'
                        'const'
                        'setattr'
                    [Var Names]
                        'self'
                        'parser'
                        'namespace'
                        'values'
                        'option_string'
                        'items'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getattr
                        2       LOAD_FAST                       2: namespace
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: dest
                        8       LOAD_CONST                      0: None
                        10      CALL_FUNCTION                   3
                        12      STORE_FAST                      5: items
                        14      LOAD_GLOBAL                     2: _copy_items
                        16      LOAD_FAST                       5: items
                        18      CALL_FUNCTION                   1
                        20      STORE_FAST                      5: items
                        22      LOAD_FAST                       5: items
                        24      LOAD_METHOD                     3: append
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       4: const
                        30      CALL_METHOD                     1
                        32      POP_TOP                         
                        34      LOAD_GLOBAL                     5: setattr
                        36      LOAD_FAST                       2: namespace
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       1: dest
                        42      LOAD_FAST                       5: items
                        44      CALL_FUNCTION                   3
                        46      POP_TOP                         
                        48      LOAD_CONST                      0: None
                        50      RETURN_VALUE                    
                '_AppendConstAction.__call__'
                (
                    None
                    False
                    None
                    None
                )
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_AppendConstAction'
                6       STORE_NAME                      2: __qualname__
                8       NOP                             
                10      NOP                             
                12      NOP                             
                14      NOP                             
                16      LOAD_CONST                      7: (None, False, None, None)
                18      LOAD_CLOSURE                    0: __class__
                20      BUILD_TUPLE                     1
                22      LOAD_CONST                      3: <CODE> __init__
                24      LOAD_CONST                      4: '_AppendConstAction.__init__'
                26      MAKE_FUNCTION                   9
                28      STORE_NAME                      3: __init__
                30      LOAD_CONST                      8: (None,)
                32      LOAD_CONST                      5: <CODE> __call__
                34      LOAD_CONST                      6: '_AppendConstAction.__call__'
                36      MAKE_FUNCTION                   1
                38      STORE_NAME                      4: __call__
                40      LOAD_CLOSURE                    0: __class__
                42      DUP_TOP                         
                44      STORE_NAME                      5: __classcell__
                46      RETURN_VALUE                    
        '_AppendConstAction'
        [Code]
            File Name: argparse.py
            Object Name: _CountAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '__call__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_CountAction'
                None
                False
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 6
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '_CountAction'
                        '__init__'
                    [Var Names]
                        'self'
                        'option_strings'
                        'dest'
                        'default'
                        'required'
                        'help'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        (
                            'option_strings'
                            'dest'
                            'nargs'
                            'default'
                            'required'
                            'help'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: _CountAction
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_ATTR                       2: __init__
                        10      LOAD_FAST                       1: option_strings
                        12      LOAD_FAST                       2: dest
                        14      LOAD_CONST                      1: 0
                        16      LOAD_FAST                       3: default
                        18      LOAD_FAST                       4: required
                        20      LOAD_FAST                       5: help
                        22      LOAD_CONST                      2: ('option_strings', 'dest', 'nargs', 'default', 'required', 'help')
                        24      CALL_FUNCTION_KW                6
                        26      POP_TOP                         
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                '_CountAction.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getattr'
                        'dest'
                        'setattr'
                    [Var Names]
                        'self'
                        'parser'
                        'namespace'
                        'values'
                        'option_string'
                        'count'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getattr
                        2       LOAD_FAST                       2: namespace
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: dest
                        8       LOAD_CONST                      0: None
                        10      CALL_FUNCTION                   3
                        12      STORE_FAST                      5: count
                        14      LOAD_FAST                       5: count
                        16      LOAD_CONST                      0: None
                        18      IS_OP                           0 (is)
                        20      POP_JUMP_IF_FALSE               13 (to 26)
                        22      LOAD_CONST                      1: 0
                        24      STORE_FAST                      5: count
                        26      LOAD_GLOBAL                     2: setattr
                        28      LOAD_FAST                       2: namespace
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       1: dest
                        34      LOAD_FAST                       5: count
                        36      LOAD_CONST                      2: 1
                        38      BINARY_ADD                      
                        40      CALL_FUNCTION                   3
                        42      POP_TOP                         
                        44      LOAD_CONST                      0: None
                        46      RETURN_VALUE                    
                '_CountAction.__call__'
                (
                    None
                    False
                    None
                )
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_CountAction'
                6       STORE_NAME                      2: __qualname__
                8       NOP                             
                10      NOP                             
                12      NOP                             
                14      LOAD_CONST                      7: (None, False, None)
                16      LOAD_CLOSURE                    0: __class__
                18      BUILD_TUPLE                     1
                20      LOAD_CONST                      3: <CODE> __init__
                22      LOAD_CONST                      4: '_CountAction.__init__'
                24      MAKE_FUNCTION                   9
                26      STORE_NAME                      3: __init__
                28      LOAD_CONST                      8: (None,)
                30      LOAD_CONST                      5: <CODE> __call__
                32      LOAD_CONST                      6: '_CountAction.__call__'
                34      MAKE_FUNCTION                   1
                36      STORE_NAME                      4: __call__
                38      LOAD_CLOSURE                    0: __class__
                40      DUP_TOP                         
                42      STORE_NAME                      5: __classcell__
                44      RETURN_VALUE                    
        '_CountAction'
        [Code]
            File Name: argparse.py
            Object Name: _HelpAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'SUPPRESS'
                '__init__'
                '__call__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_HelpAction'
                None
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 7
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '_HelpAction'
                        '__init__'
                    [Var Names]
                        'self'
                        'option_strings'
                        'dest'
                        'default'
                        'help'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        (
                            'option_strings'
                            'dest'
                            'default'
                            'nargs'
                            'help'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: _HelpAction
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_ATTR                       2: __init__
                        10      LOAD_FAST                       1: option_strings
                        12      LOAD_FAST                       2: dest
                        14      LOAD_FAST                       3: default
                        16      LOAD_CONST                      1: 0
                        18      LOAD_FAST                       4: help
                        20      LOAD_CONST                      2: ('option_strings', 'dest', 'default', 'nargs', 'help')
                        22      CALL_FUNCTION_KW                5
                        24      POP_TOP                         
                        26      LOAD_CONST                      0: None
                        28      RETURN_VALUE                    
                '_HelpAction.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'print_help'
                        'exit'
                    [Var Names]
                        'self'
                        'parser'
                        'namespace'
                        'values'
                        'option_string'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: parser
                        2       LOAD_METHOD                     0: print_help
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       1: parser
                        10      LOAD_METHOD                     1: exit
                        12      CALL_METHOD                     0
                        14      POP_TOP                         
                        16      LOAD_CONST                      0: None
                        18      RETURN_VALUE                    
                '_HelpAction.__call__'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_HelpAction'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: SUPPRESS
                10      LOAD_NAME                       3: SUPPRESS
                12      LOAD_CONST                      1: None
                14      BUILD_TUPLE                     3
                16      LOAD_CLOSURE                    0: __class__
                18      BUILD_TUPLE                     1
                20      LOAD_CONST                      2: <CODE> __init__
                22      LOAD_CONST                      3: '_HelpAction.__init__'
                24      MAKE_FUNCTION                   9
                26      STORE_NAME                      4: __init__
                28      LOAD_CONST                      6: (None,)
                30      LOAD_CONST                      4: <CODE> __call__
                32      LOAD_CONST                      5: '_HelpAction.__call__'
                34      MAKE_FUNCTION                   1
                36      STORE_NAME                      5: __call__
                38      LOAD_CLOSURE                    0: __class__
                40      DUP_TOP                         
                42      STORE_NAME                      6: __classcell__
                44      RETURN_VALUE                    
        '_HelpAction'
        [Code]
            File Name: argparse.py
            Object Name: _VersionAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'SUPPRESS'
                '__init__'
                '__call__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_VersionAction'
                None
                "show program's version number and exit"
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 6
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 7
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '_VersionAction'
                        '__init__'
                        'version'
                    [Var Names]
                        'self'
                        'option_strings'
                        'version'
                        'dest'
                        'default'
                        'help'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        (
                            'option_strings'
                            'dest'
                            'default'
                            'nargs'
                            'help'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: _VersionAction
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_ATTR                       2: __init__
                        10      LOAD_FAST                       1: option_strings
                        12      LOAD_FAST                       3: dest
                        14      LOAD_FAST                       4: default
                        16      LOAD_CONST                      1: 0
                        18      LOAD_FAST                       5: help
                        20      LOAD_CONST                      2: ('option_strings', 'dest', 'default', 'nargs', 'help')
                        22      CALL_FUNCTION_KW                5
                        24      POP_TOP                         
                        26      LOAD_FAST                       2: version
                        28      LOAD_FAST                       0: self
                        30      STORE_ATTR                      3: version
                        32      LOAD_CONST                      0: None
                        34      RETURN_VALUE                    
                '_VersionAction.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'version'
                        '_get_formatter'
                        'add_text'
                        '_print_message'
                        'format_help'
                        '_sys'
                        'stdout'
                        'exit'
                    [Var Names]
                        'self'
                        'parser'
                        'namespace'
                        'values'
                        'option_string'
                        'version'
                        'formatter'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: version
                        4       STORE_FAST                      5: version
                        6       LOAD_FAST                       5: version
                        8       LOAD_CONST                      0: None
                        10      IS_OP                           0 (is)
                        12      POP_JUMP_IF_FALSE               10 (to 20)
                        14      LOAD_FAST                       1: parser
                        16      LOAD_ATTR                       0: version
                        18      STORE_FAST                      5: version
                        20      LOAD_FAST                       1: parser
                        22      LOAD_METHOD                     1: _get_formatter
                        24      CALL_METHOD                     0
                        26      STORE_FAST                      6: formatter
                        28      LOAD_FAST                       6: formatter
                        30      LOAD_METHOD                     2: add_text
                        32      LOAD_FAST                       5: version
                        34      CALL_METHOD                     1
                        36      POP_TOP                         
                        38      LOAD_FAST                       1: parser
                        40      LOAD_METHOD                     3: _print_message
                        42      LOAD_FAST                       6: formatter
                        44      LOAD_METHOD                     4: format_help
                        46      CALL_METHOD                     0
                        48      LOAD_GLOBAL                     5: _sys
                        50      LOAD_ATTR                       6: stdout
                        52      CALL_METHOD                     2
                        54      POP_TOP                         
                        56      LOAD_FAST                       1: parser
                        58      LOAD_METHOD                     7: exit
                        60      CALL_METHOD                     0
                        62      POP_TOP                         
                        64      LOAD_CONST                      0: None
                        66      RETURN_VALUE                    
                '_VersionAction.__call__'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_VersionAction'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: None
                10      LOAD_NAME                       3: SUPPRESS
                12      LOAD_NAME                       3: SUPPRESS
                14      LOAD_CONST                      2: "show program's version number and exit"
                16      BUILD_TUPLE                     4
                18      LOAD_CLOSURE                    0: __class__
                20      BUILD_TUPLE                     1
                22      LOAD_CONST                      3: <CODE> __init__
                24      LOAD_CONST                      4: '_VersionAction.__init__'
                26      MAKE_FUNCTION                   9
                28      STORE_NAME                      4: __init__
                30      LOAD_CONST                      7: (None,)
                32      LOAD_CONST                      5: <CODE> __call__
                34      LOAD_CONST                      6: '_VersionAction.__call__'
                36      MAKE_FUNCTION                   1
                38      STORE_NAME                      5: __call__
                40      LOAD_CLOSURE                    0: __class__
                42      DUP_TOP                         
                44      STORE_NAME                      6: __classcell__
                46      RETURN_VALUE                    
        '_VersionAction'
        [Code]
            File Name: argparse.py
            Object Name: _SubParsersAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'Action'
                '_ChoicesPseudoAction'
                'SUPPRESS'
                '__init__'
                'add_parser'
                '_get_subactions'
                '__call__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_SubParsersAction'
                [Code]
                    File Name: argparse.py
                    Object Name: _ChoicesPseudoAction
                    Arg Count: 0
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 0
                    Stack Size: 3
                    Flags: 0x00000000
                    [Names]
                        '__name__'
                        '__module__'
                        '__qualname__'
                        '__init__'
                        '__classcell__'
                    [Var Names]
                    [Free Vars]
                    [Cell Vars]
                        '__class__'
                    [Constants]
                        '_SubParsersAction._ChoicesPseudoAction'
                        [Code]
                            File Name: argparse.py
                            Object Name: __init__
                            Arg Count: 4
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 7
                            Stack Size: 6
                            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                            [Names]
                                'join'
                                'super'
                                '_SubParsersAction'
                                '_ChoicesPseudoAction'
                                '__init__'
                            [Var Names]
                                'self'
                                'name'
                                'aliases'
                                'help'
                                'metavar'
                                'dest'
                                'sup'
                            [Free Vars]
                                '__class__'
                            [Cell Vars]
                            [Constants]
                                None
                                ' (%s)'
                                ', '
                                (
                                    'option_strings'
                                    'dest'
                                    'help'
                                    'metavar'
                                )
                            [Disassembly]
                                0       LOAD_FAST                       1: name
                                2       DUP_TOP                         
                                4       STORE_FAST                      4: metavar
                                6       STORE_FAST                      5: dest
                                8       LOAD_FAST                       2: aliases
                                10      POP_JUMP_IF_FALSE               15 (to 30)
                                12      LOAD_FAST                       4: metavar
                                14      LOAD_CONST                      1: ' (%s)'
                                16      LOAD_CONST                      2: ', '
                                18      LOAD_METHOD                     0: join
                                20      LOAD_FAST                       2: aliases
                                22      CALL_METHOD                     1
                                24      BINARY_MODULO                   
                                26      INPLACE_ADD                     
                                28      STORE_FAST                      4: metavar
                                30      LOAD_GLOBAL                     1: super
                                32      LOAD_GLOBAL                     2: _SubParsersAction
                                34      LOAD_ATTR                       3: _ChoicesPseudoAction
                                36      LOAD_FAST                       0: self
                                38      CALL_FUNCTION                   2
                                40      STORE_FAST                      6: sup
                                42      LOAD_FAST                       6: sup
                                44      LOAD_ATTR                       4: __init__
                                46      BUILD_LIST                      0
                                48      LOAD_FAST                       5: dest
                                50      LOAD_FAST                       3: help
                                52      LOAD_FAST                       4: metavar
                                54      LOAD_CONST                      3: ('option_strings', 'dest', 'help', 'metavar')
                                56      CALL_FUNCTION_KW                4
                                58      POP_TOP                         
                                60      LOAD_CONST                      0: None
                                62      RETURN_VALUE                    
                        '_SubParsersAction._ChoicesPseudoAction.__init__'
                    [Disassembly]
                        0       LOAD_NAME                       0: __name__
                        2       STORE_NAME                      1: __module__
                        4       LOAD_CONST                      0: '_SubParsersAction._ChoicesPseudoAction'
                        6       STORE_NAME                      2: __qualname__
                        8       LOAD_CLOSURE                    0: __class__
                        10      BUILD_TUPLE                     1
                        12      LOAD_CONST                      1: <CODE> __init__
                        14      LOAD_CONST                      2: '_SubParsersAction._ChoicesPseudoAction.__init__'
                        16      MAKE_FUNCTION                   8
                        18      STORE_NAME                      3: __init__
                        20      LOAD_CLOSURE                    0: __class__
                        22      DUP_TOP                         
                        24      STORE_NAME                      4: __classcell__
                        26      RETURN_VALUE                    
                '_ChoicesPseudoAction'
                False
                None
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 8
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 9
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_prog_prefix'
                        '_parser_class'
                        '_name_parser_map'
                        '_choices_actions'
                        'super'
                        '_SubParsersAction'
                        '__init__'
                        'PARSER'
                    [Var Names]
                        'self'
                        'option_strings'
                        'prog'
                        'parser_class'
                        'dest'
                        'required'
                        'help'
                        'metavar'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            'option_strings'
                            'dest'
                            'nargs'
                            'choices'
                            'required'
                            'help'
                            'metavar'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       2: prog
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _prog_prefix
                        6       LOAD_FAST                       3: parser_class
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _parser_class
                        12      BUILD_MAP                       0
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: _name_parser_map
                        18      BUILD_LIST                      0
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      3: _choices_actions
                        24      LOAD_GLOBAL                     4: super
                        26      LOAD_GLOBAL                     5: _SubParsersAction
                        28      LOAD_FAST                       0: self
                        30      CALL_FUNCTION                   2
                        32      LOAD_ATTR                       6: __init__
                        34      LOAD_FAST                       1: option_strings
                        36      LOAD_FAST                       4: dest
                        38      LOAD_GLOBAL                     7: PARSER
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       2: _name_parser_map
                        44      LOAD_FAST                       5: required
                        46      LOAD_FAST                       6: help
                        48      LOAD_FAST                       7: metavar
                        50      LOAD_CONST                      1: ('option_strings', 'dest', 'nargs', 'choices', 'required', 'help', 'metavar')
                        52      CALL_FUNCTION_KW                7
                        54      POP_TOP                         
                        56      LOAD_CONST                      0: None
                        58      RETURN_VALUE                    
                '_SubParsersAction.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: add_parser
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 5
                    Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'get'
                        '_prog_prefix'
                        'pop'
                        '_ChoicesPseudoAction'
                        '_choices_actions'
                        'append'
                        '_parser_class'
                        '_name_parser_map'
                    [Var Names]
                        'self'
                        'name'
                        'kwargs'
                        'aliases'
                        'help'
                        'choice_action'
                        'parser'
                        'alias'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'prog'
                        '%s %s'
                        'aliases'
                        (
                        )
                        'help'
                    [Disassembly]
                        0       LOAD_FAST                       2: kwargs
                        2       LOAD_METHOD                     0: get
                        4       LOAD_CONST                      1: 'prog'
                        6       CALL_METHOD                     1
                        8       LOAD_CONST                      0: None
                        10      IS_OP                           0 (is)
                        12      POP_JUMP_IF_FALSE               16 (to 32)
                        14      LOAD_CONST                      2: '%s %s'
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       1: _prog_prefix
                        20      LOAD_FAST                       1: name
                        22      BUILD_TUPLE                     2
                        24      BINARY_MODULO                   
                        26      LOAD_FAST                       2: kwargs
                        28      LOAD_CONST                      1: 'prog'
                        30      STORE_SUBSCR                    
                        32      LOAD_FAST                       2: kwargs
                        34      LOAD_METHOD                     2: pop
                        36      LOAD_CONST                      3: 'aliases'
                        38      LOAD_CONST                      4: ()
                        40      CALL_METHOD                     2
                        42      STORE_FAST                      3: aliases
                        44      LOAD_CONST                      5: 'help'
                        46      LOAD_FAST                       2: kwargs
                        48      CONTAINS_OP                     0 (in)
                        50      POP_JUMP_IF_FALSE               44 (to 88)
                        52      LOAD_FAST                       2: kwargs
                        54      LOAD_METHOD                     2: pop
                        56      LOAD_CONST                      5: 'help'
                        58      CALL_METHOD                     1
                        60      STORE_FAST                      4: help
                        62      LOAD_FAST                       0: self
                        64      LOAD_METHOD                     3: _ChoicesPseudoAction
                        66      LOAD_FAST                       1: name
                        68      LOAD_FAST                       3: aliases
                        70      LOAD_FAST                       4: help
                        72      CALL_METHOD                     3
                        74      STORE_FAST                      5: choice_action
                        76      LOAD_FAST                       0: self
                        78      LOAD_ATTR                       4: _choices_actions
                        80      LOAD_METHOD                     5: append
                        82      LOAD_FAST                       5: choice_action
                        84      CALL_METHOD                     1
                        86      POP_TOP                         
                        88      LOAD_FAST                       0: self
                        90      LOAD_ATTR                       6: _parser_class
                        92      LOAD_CONST                      4: ()
                        94      BUILD_MAP                       0
                        96      LOAD_FAST                       2: kwargs
                        98      DICT_MERGE                      1
                        100     CALL_FUNCTION_EX                1
                        102     STORE_FAST                      6: parser
                        104     LOAD_FAST                       6: parser
                        106     LOAD_FAST                       0: self
                        108     LOAD_ATTR                       7: _name_parser_map
                        110     LOAD_FAST                       1: name
                        112     STORE_SUBSCR                    
                        114     LOAD_FAST                       3: aliases
                        116     GET_ITER                        
                        118     FOR_ITER                        7 (to 134)
                        120     STORE_FAST                      7: alias
                        122     LOAD_FAST                       6: parser
                        124     LOAD_FAST                       0: self
                        126     LOAD_ATTR                       7: _name_parser_map
                        128     LOAD_FAST                       7: alias
                        130     STORE_SUBSCR                    
                        132     JUMP_ABSOLUTE                   59 (to 118)
                        134     LOAD_FAST                       6: parser
                        136     RETURN_VALUE                    
                '_SubParsersAction.add_parser'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_subactions
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_choices_actions'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _choices_actions
                        4       RETURN_VALUE                    
                '_SubParsersAction._get_subactions'
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 12
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'dest'
                        'SUPPRESS'
                        'setattr'
                        '_name_parser_map'
                        'KeyError'
                        'join'
                        '_'
                        'ArgumentError'
                        'parse_known_args'
                        'vars'
                        'items'
                        'setdefault'
                        '_UNRECOGNIZED_ARGS_ATTR'
                        'getattr'
                        'extend'
                    [Var Names]
                        'self'
                        'parser'
                        'namespace'
                        'values'
                        'option_string'
                        'parser_name'
                        'arg_strings'
                        'args'
                        'msg'
                        'subnamespace'
                        'key'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        1
                        ', '
                        (
                            'parser_name'
                            'choices'
                        )
                        'unknown parser %(parser_name)r (choices: %(choices)s)'
                    [Disassembly]
                        0       LOAD_FAST                       3: values
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       STORE_FAST                      5: parser_name
                        8       LOAD_FAST                       3: values
                        10      LOAD_CONST                      2: 1
                        12      LOAD_CONST                      0: None
                        14      BUILD_SLICE                     2
                        16      BINARY_SUBSCR                   
                        18      STORE_FAST                      6: arg_strings
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       0: dest
                        24      LOAD_GLOBAL                     1: SUPPRESS
                        26      IS_OP                           1 (is not)
                        28      POP_JUMP_IF_FALSE               22 (to 44)
                        30      LOAD_GLOBAL                     2: setattr
                        32      LOAD_FAST                       2: namespace
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       0: dest
                        38      LOAD_FAST                       5: parser_name
                        40      CALL_FUNCTION                   3
                        42      POP_TOP                         
                        44      SETUP_FINALLY                   7 (to 60)
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       3: _name_parser_map
                        50      LOAD_FAST                       5: parser_name
                        52      BINARY_SUBSCR                   
                        54      STORE_FAST                      1: parser
                        56      POP_BLOCK                       
                        58      JUMP_FORWARD                    27 (to 114)
                        60      DUP_TOP                         
                        62      LOAD_GLOBAL                     4: KeyError
                        64      JUMP_IF_NOT_EXC_MATCH           56 (to 112)
                        66      POP_TOP                         
                        68      POP_TOP                         
                        70      POP_TOP                         
                        72      LOAD_FAST                       5: parser_name
                        74      LOAD_CONST                      3: ', '
                        76      LOAD_METHOD                     5: join
                        78      LOAD_FAST                       0: self
                        80      LOAD_ATTR                       3: _name_parser_map
                        82      CALL_METHOD                     1
                        84      LOAD_CONST                      4: ('parser_name', 'choices')
                        86      BUILD_CONST_KEY_MAP             2
                        88      STORE_FAST                      7: args
                        90      LOAD_GLOBAL                     6: _
                        92      LOAD_CONST                      5: 'unknown parser %(parser_name)r (choices: %(choices)s)'
                        94      CALL_FUNCTION                   1
                        96      LOAD_FAST                       7: args
                        98      BINARY_MODULO                   
                        100     STORE_FAST                      8: msg
                        102     LOAD_GLOBAL                     7: ArgumentError
                        104     LOAD_FAST                       0: self
                        106     LOAD_FAST                       8: msg
                        108     CALL_FUNCTION                   2
                        110     RAISE_VARARGS                   1
                        112     RERAISE                         0
                        114     LOAD_FAST                       1: parser
                        116     LOAD_METHOD                     8: parse_known_args
                        118     LOAD_FAST                       6: arg_strings
                        120     LOAD_CONST                      0: None
                        122     CALL_METHOD                     2
                        124     UNPACK_SEQUENCE                 2
                        126     STORE_FAST                      9: subnamespace
                        128     STORE_FAST                      6: arg_strings
                        130     LOAD_GLOBAL                     9: vars
                        132     LOAD_FAST                       9: subnamespace
                        134     CALL_FUNCTION                   1
                        136     LOAD_METHOD                     10: items
                        138     CALL_METHOD                     0
                        140     GET_ITER                        
                        142     FOR_ITER                        10 (to 164)
                        144     UNPACK_SEQUENCE                 2
                        146     STORE_FAST                      10: key
                        148     STORE_FAST                      11: value
                        150     LOAD_GLOBAL                     2: setattr
                        152     LOAD_FAST                       2: namespace
                        154     LOAD_FAST                       10: key
                        156     LOAD_FAST                       11: value
                        158     CALL_FUNCTION                   3
                        160     POP_TOP                         
                        162     JUMP_ABSOLUTE                   71 (to 142)
                        164     LOAD_FAST                       6: arg_strings
                        166     POP_JUMP_IF_FALSE               102 (to 204)
                        168     LOAD_GLOBAL                     9: vars
                        170     LOAD_FAST                       2: namespace
                        172     CALL_FUNCTION                   1
                        174     LOAD_METHOD                     11: setdefault
                        176     LOAD_GLOBAL                     12: _UNRECOGNIZED_ARGS_ATTR
                        178     BUILD_LIST                      0
                        180     CALL_METHOD                     2
                        182     POP_TOP                         
                        184     LOAD_GLOBAL                     13: getattr
                        186     LOAD_FAST                       2: namespace
                        188     LOAD_GLOBAL                     12: _UNRECOGNIZED_ARGS_ATTR
                        190     CALL_FUNCTION                   2
                        192     LOAD_METHOD                     14: extend
                        194     LOAD_FAST                       6: arg_strings
                        196     CALL_METHOD                     1
                        198     POP_TOP                         
                        200     LOAD_CONST                      0: None
                        202     RETURN_VALUE                    
                        204     LOAD_CONST                      0: None
                        206     RETURN_VALUE                    
                '_SubParsersAction.__call__'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_SubParsersAction'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_BUILD_CLASS                
                10      LOAD_CONST                      1: <CODE> _ChoicesPseudoAction
                12      LOAD_CONST                      2: '_ChoicesPseudoAction'
                14      MAKE_FUNCTION                   0
                16      LOAD_CONST                      2: '_ChoicesPseudoAction'
                18      LOAD_NAME                       3: Action
                20      CALL_FUNCTION                   3
                22      STORE_NAME                      4: _ChoicesPseudoAction
                24      LOAD_NAME                       5: SUPPRESS
                26      LOAD_CONST                      3: False
                28      LOAD_CONST                      4: None
                30      LOAD_CONST                      4: None
                32      BUILD_TUPLE                     4
                34      LOAD_CLOSURE                    0: __class__
                36      BUILD_TUPLE                     1
                38      LOAD_CONST                      5: <CODE> __init__
                40      LOAD_CONST                      6: '_SubParsersAction.__init__'
                42      MAKE_FUNCTION                   9
                44      STORE_NAME                      6: __init__
                46      LOAD_CONST                      7: <CODE> add_parser
                48      LOAD_CONST                      8: '_SubParsersAction.add_parser'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      7: add_parser
                54      LOAD_CONST                      9: <CODE> _get_subactions
                56      LOAD_CONST                      10: '_SubParsersAction._get_subactions'
                58      MAKE_FUNCTION                   0
                60      STORE_NAME                      8: _get_subactions
                62      LOAD_CONST                      13: (None,)
                64      LOAD_CONST                      11: <CODE> __call__
                66      LOAD_CONST                      12: '_SubParsersAction.__call__'
                68      MAKE_FUNCTION                   1
                70      STORE_NAME                      9: __call__
                72      LOAD_CLOSURE                    0: __class__
                74      DUP_TOP                         
                76      STORE_NAME                      10: __classcell__
                78      RETURN_VALUE                    
        '_SubParsersAction'
        [Code]
            File Name: argparse.py
            Object Name: _ExtendAction
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__call__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_ExtendAction'
                None
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getattr'
                        'dest'
                        '_copy_items'
                        'extend'
                        'setattr'
                    [Var Names]
                        'self'
                        'parser'
                        'namespace'
                        'values'
                        'option_string'
                        'items'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getattr
                        2       LOAD_FAST                       2: namespace
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: dest
                        8       LOAD_CONST                      0: None
                        10      CALL_FUNCTION                   3
                        12      STORE_FAST                      5: items
                        14      LOAD_GLOBAL                     2: _copy_items
                        16      LOAD_FAST                       5: items
                        18      CALL_FUNCTION                   1
                        20      STORE_FAST                      5: items
                        22      LOAD_FAST                       5: items
                        24      LOAD_METHOD                     3: extend
                        26      LOAD_FAST                       3: values
                        28      CALL_METHOD                     1
                        30      POP_TOP                         
                        32      LOAD_GLOBAL                     4: setattr
                        34      LOAD_FAST                       2: namespace
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       1: dest
                        40      LOAD_FAST                       5: items
                        42      CALL_FUNCTION                   3
                        44      POP_TOP                         
                        46      LOAD_CONST                      0: None
                        48      RETURN_VALUE                    
                '_ExtendAction.__call__'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_ExtendAction'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      4: (None,)
                10      LOAD_CONST                      2: <CODE> __call__
                12      LOAD_CONST                      3: '_ExtendAction.__call__'
                14      MAKE_FUNCTION                   1
                16      STORE_NAME                      3: __call__
                18      LOAD_CONST                      1: None
                20      RETURN_VALUE                    
        '_ExtendAction'
        [Code]
            File Name: argparse.py
            Object Name: FileType
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__call__'
                '__repr__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'FileType'
                "Factory for creating file object types\n\n    Instances of FileType are typically passed as type= arguments to the\n    ArgumentParser add_argument() method.\n\n    Keyword Arguments:\n        - mode -- A string indicating how the file is to be opened. Accepts the\n            same values as the builtin open() function.\n        - bufsize -- The file's desired buffer size. Accepts the same values as\n            the builtin open() function.\n        - encoding -- The file's encoding. Accepts the same values as the\n            builtin open() function.\n        - errors -- A string indicating how encoding and decoding errors are to\n            be handled. Accepts the same value as the builtin open() function.\n    "
                'r'
                -1
                None
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_mode'
                        '_bufsize'
                        '_encoding'
                        '_errors'
                    [Var Names]
                        'self'
                        'mode'
                        'bufsize'
                        'encoding'
                        'errors'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: mode
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _mode
                        6       LOAD_FAST                       2: bufsize
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _bufsize
                        12      LOAD_FAST                       3: encoding
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: _encoding
                        18      LOAD_FAST                       4: errors
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      3: _errors
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                'FileType.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: __call__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 10
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_mode'
                        '_sys'
                        'stdin'
                        'buffer'
                        'any'
                        'stdout'
                        '_'
                        'ValueError'
                        'open'
                        '_bufsize'
                        '_encoding'
                        '_errors'
                        'OSError'
                        'ArgumentTypeError'
                    [Var Names]
                        'self'
                        'string'
                        'msg'
                        'e'
                        'args'
                        'message'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        '-'
                        'r'
                        'b'
                        [Code]
                            File Name: argparse.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                                '_mode'
                            [Var Names]
                                '.0'
                                'c'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: c
                                8       LOAD_FAST                       1: c
                                10      LOAD_DEREF                      0: self
                                12      LOAD_ATTR                       0: _mode
                                14      CONTAINS_OP                     0 (in)
                                16      YIELD_VALUE                     
                                18      POP_TOP                         
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      LOAD_CONST                      0: None
                                24      RETURN_VALUE                    
                        'FileType.__call__.<locals>.<genexpr>'
                        'wax'
                        'argument "-" with mode %r'
                        (
                            'filename'
                            'error'
                        )
                        "can't open '%(filename)s': %(error)s"
                    [Disassembly]
                        0       LOAD_FAST                       1: string
                        2       LOAD_CONST                      1: '-'
                        4       COMPARE_OP                      2 (==)
                        6       POP_JUMP_IF_FALSE               55 (to 110)
                        8       LOAD_CONST                      2: 'r'
                        10      LOAD_DEREF                      0: self
                        12      LOAD_ATTR                       0: _mode
                        14      CONTAINS_OP                     0 (in)
                        16      POP_JUMP_IF_FALSE               21 (to 42)
                        18      LOAD_CONST                      3: 'b'
                        20      LOAD_DEREF                      0: self
                        22      LOAD_ATTR                       0: _mode
                        24      CONTAINS_OP                     0 (in)
                        26      POP_JUMP_IF_FALSE               18 (to 36)
                        28      LOAD_GLOBAL                     1: _sys
                        30      LOAD_ATTR                       2: stdin
                        32      LOAD_ATTR                       3: buffer
                        34      RETURN_VALUE                    
                        36      LOAD_GLOBAL                     1: _sys
                        38      LOAD_ATTR                       2: stdin
                        40      RETURN_VALUE                    
                        42      LOAD_GLOBAL                     4: any
                        44      LOAD_CLOSURE                    0: self
                        46      BUILD_TUPLE                     1
                        48      LOAD_CONST                      4: <CODE> <genexpr>
                        50      LOAD_CONST                      5: 'FileType.__call__.<locals>.<genexpr>'
                        52      MAKE_FUNCTION                   8
                        54      LOAD_CONST                      6: 'wax'
                        56      GET_ITER                        
                        58      CALL_FUNCTION                   1
                        60      CALL_FUNCTION                   1
                        62      POP_JUMP_IF_FALSE               44 (to 88)
                        64      LOAD_CONST                      3: 'b'
                        66      LOAD_DEREF                      0: self
                        68      LOAD_ATTR                       0: _mode
                        70      CONTAINS_OP                     0 (in)
                        72      POP_JUMP_IF_FALSE               41 (to 82)
                        74      LOAD_GLOBAL                     1: _sys
                        76      LOAD_ATTR                       5: stdout
                        78      LOAD_ATTR                       3: buffer
                        80      RETURN_VALUE                    
                        82      LOAD_GLOBAL                     1: _sys
                        84      LOAD_ATTR                       5: stdout
                        86      RETURN_VALUE                    
                        88      LOAD_GLOBAL                     6: _
                        90      LOAD_CONST                      7: 'argument "-" with mode %r'
                        92      CALL_FUNCTION                   1
                        94      LOAD_DEREF                      0: self
                        96      LOAD_ATTR                       0: _mode
                        98      BINARY_MODULO                   
                        100     STORE_FAST                      2: msg
                        102     LOAD_GLOBAL                     7: ValueError
                        104     LOAD_FAST                       2: msg
                        106     CALL_FUNCTION                   1
                        108     RAISE_VARARGS                   1
                        110     SETUP_FINALLY                   13 (to 138)
                        112     LOAD_GLOBAL                     8: open
                        114     LOAD_FAST                       1: string
                        116     LOAD_DEREF                      0: self
                        118     LOAD_ATTR                       0: _mode
                        120     LOAD_DEREF                      0: self
                        122     LOAD_ATTR                       9: _bufsize
                        124     LOAD_DEREF                      0: self
                        126     LOAD_ATTR                       10: _encoding
                        128     LOAD_DEREF                      0: self
                        130     LOAD_ATTR                       11: _errors
                        132     CALL_FUNCTION                   5
                        134     POP_BLOCK                       
                        136     RETURN_VALUE                    
                        138     DUP_TOP                         
                        140     LOAD_GLOBAL                     12: OSError
                        142     JUMP_IF_NOT_EXC_MATCH           95 (to 190)
                        144     POP_TOP                         
                        146     STORE_FAST                      3: e
                        148     POP_TOP                         
                        150     SETUP_FINALLY                   15 (to 182)
                        152     LOAD_FAST                       1: string
                        154     LOAD_FAST                       3: e
                        156     LOAD_CONST                      8: ('filename', 'error')
                        158     BUILD_CONST_KEY_MAP             2
                        160     STORE_FAST                      4: args
                        162     LOAD_GLOBAL                     6: _
                        164     LOAD_CONST                      9: "can't open '%(filename)s': %(error)s"
                        166     CALL_FUNCTION                   1
                        168     STORE_FAST                      5: message
                        170     LOAD_GLOBAL                     13: ArgumentTypeError
                        172     LOAD_FAST                       5: message
                        174     LOAD_FAST                       4: args
                        176     BINARY_MODULO                   
                        178     CALL_FUNCTION                   1
                        180     RAISE_VARARGS                   1
                        182     LOAD_CONST                      0: None
                        184     STORE_FAST                      3: e
                        186     DELETE_FAST                     3: e
                        188     RERAISE                         1
                        190     RERAISE                         0
                'FileType.__call__'
                [Code]
                    File Name: argparse.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_mode'
                        '_bufsize'
                        '_encoding'
                        '_errors'
                        'join'
                        'type'
                        '__name__'
                    [Var Names]
                        'self'
                        'args'
                        'kwargs'
                        'args_str'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'encoding'
                        'errors'
                        ', '
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'repr'
                            [Var Names]
                                '.0'
                                'arg'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                -1
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        10 (to 26)
                                6       STORE_FAST                      1: arg
                                8       LOAD_FAST                       1: arg
                                10      LOAD_CONST                      0: -1
                                12      COMPARE_OP                      3 (!=)
                                14      POP_JUMP_IF_FALSE               2 (to 4)
                                16      LOAD_GLOBAL                     0: repr
                                18      LOAD_FAST                       1: arg
                                20      CALL_FUNCTION                   1
                                22      LIST_APPEND                     2
                                24      JUMP_ABSOLUTE                   2 (to 4)
                                26      RETURN_VALUE                    
                        'FileType.__repr__.<locals>.<listcomp>'
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 5
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                            [Var Names]
                                '.0'
                                'kw'
                                'arg'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                                '%s=%r'
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        14 (to 34)
                                6       UNPACK_SEQUENCE                 2
                                8       STORE_FAST                      1: kw
                                10      STORE_FAST                      2: arg
                                12      LOAD_FAST                       2: arg
                                14      LOAD_CONST                      0: None
                                16      IS_OP                           1 (is not)
                                18      POP_JUMP_IF_FALSE               2 (to 4)
                                20      LOAD_CONST                      1: '%s=%r'
                                22      LOAD_FAST                       1: kw
                                24      LOAD_FAST                       2: arg
                                26      BUILD_TUPLE                     2
                                28      BINARY_MODULO                   
                                30      LIST_APPEND                     2
                                32      JUMP_ABSOLUTE                   2 (to 4)
                                34      RETURN_VALUE                    
                        '%s(%s)'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _mode
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: _bufsize
                        8       BUILD_TUPLE                     2
                        10      STORE_FAST                      1: args
                        12      LOAD_CONST                      1: 'encoding'
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _encoding
                        18      BUILD_TUPLE                     2
                        20      LOAD_CONST                      2: 'errors'
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       3: _errors
                        26      BUILD_TUPLE                     2
                        28      BUILD_LIST                      2
                        30      STORE_FAST                      2: kwargs
                        32      LOAD_CONST                      3: ', '
                        34      LOAD_METHOD                     4: join
                        36      LOAD_CONST                      4: <CODE> <listcomp>
                        38      LOAD_CONST                      5: 'FileType.__repr__.<locals>.<listcomp>'
                        40      MAKE_FUNCTION                   0
                        42      LOAD_FAST                       1: args
                        44      GET_ITER                        
                        46      CALL_FUNCTION                   1
                        48      LOAD_CONST                      6: <CODE> <listcomp>
                        50      LOAD_CONST                      5: 'FileType.__repr__.<locals>.<listcomp>'
                        52      MAKE_FUNCTION                   0
                        54      LOAD_FAST                       2: kwargs
                        56      GET_ITER                        
                        58      CALL_FUNCTION                   1
                        60      BINARY_ADD                      
                        62      CALL_METHOD                     1
                        64      STORE_FAST                      3: args_str
                        66      LOAD_CONST                      7: '%s(%s)'
                        68      LOAD_GLOBAL                     5: type
                        70      LOAD_FAST                       0: self
                        72      CALL_FUNCTION                   1
                        74      LOAD_ATTR                       6: __name__
                        76      LOAD_FAST                       3: args_str
                        78      BUILD_TUPLE                     2
                        80      BINARY_MODULO                   
                        82      RETURN_VALUE                    
                'FileType.__repr__'
                (
                    'r'
                    -1
                    None
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'FileType'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Factory for creating file object types\n\n    Instances of FileType are typically passed as type= arguments to the\n    ArgumentParser add_argument() method.\n\n    Keyword Arguments:\n        - mode -- A string indicating how the file is to be opened. Accepts the\n            same values as the builtin open() function.\n        - bufsize -- The file's desired buffer size. Accepts the same values as\n            the builtin open() function.\n        - encoding -- The file's encoding. Accepts the same values as the\n            builtin open() function.\n        - errors -- A string indicating how encoding and decoding errors are to\n            be handled. Accepts the same value as the builtin open() function.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      11: ('r', -1, None, None)
                14      LOAD_CONST                      5: <CODE> __init__
                16      LOAD_CONST                      6: 'FileType.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      7: <CODE> __call__
                24      LOAD_CONST                      8: 'FileType.__call__'
                26      MAKE_FUNCTION                   0
                28      STORE_NAME                      5: __call__
                30      LOAD_CONST                      9: <CODE> __repr__
                32      LOAD_CONST                      10: 'FileType.__repr__'
                34      MAKE_FUNCTION                   0
                36      STORE_NAME                      6: __repr__
                38      LOAD_CONST                      4: None
                40      RETURN_VALUE                    
        'FileType'
        [Code]
            File Name: argparse.py
            Object Name: Namespace
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__eq__'
                '__contains__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Namespace'
                'Simple object for storing attributes.\n\n    Implements equality by attribute names and values, and provides a simple\n    string representation.\n    '
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 6
                    Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'setattr'
                    [Var Names]
                        'self'
                        'kwargs'
                        'name'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: kwargs
                        2       GET_ITER                        
                        4       FOR_ITER                        10 (to 26)
                        6       STORE_FAST                      2: name
                        8       LOAD_GLOBAL                     0: setattr
                        10      LOAD_FAST                       0: self
                        12      LOAD_FAST                       2: name
                        14      LOAD_FAST                       1: kwargs
                        16      LOAD_FAST                       2: name
                        18      BINARY_SUBSCR                   
                        20      CALL_FUNCTION                   3
                        22      POP_TOP                         
                        24      JUMP_ABSOLUTE                   2 (to 4)
                        26      LOAD_CONST                      0: None
                        28      RETURN_VALUE                    
                'Namespace.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'Namespace'
                        'NotImplemented'
                        'vars'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: Namespace
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_GLOBAL                     3: vars
                        16      LOAD_FAST                       0: self
                        18      CALL_FUNCTION                   1
                        20      LOAD_GLOBAL                     3: vars
                        22      LOAD_FAST                       1: other
                        24      CALL_FUNCTION                   1
                        26      COMPARE_OP                      2 (==)
                        28      RETURN_VALUE                    
                'Namespace.__eq__'
                [Code]
                    File Name: argparse.py
                    Object Name: __contains__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__dict__'
                    [Var Names]
                        'self'
                        'key'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: key
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: __dict__
                        6       CONTAINS_OP                     0 (in)
                        8       RETURN_VALUE                    
                'Namespace.__contains__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Namespace'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Simple object for storing attributes.\n\n    Implements equality by attribute names and values, and provides a simple\n    string representation.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'Namespace.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __eq__
                22      LOAD_CONST                      5: 'Namespace.__eq__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __eq__
                28      LOAD_CONST                      6: <CODE> __contains__
                30      LOAD_CONST                      7: 'Namespace.__contains__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __contains__
                36      LOAD_CONST                      8: None
                38      RETURN_VALUE                    
        'Namespace'
        [Code]
            File Name: argparse.py
            Object Name: _ActionsContainer
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                'register'
                '_registry_get'
                'set_defaults'
                'get_default'
                'add_argument'
                'add_argument_group'
                'add_mutually_exclusive_group'
                '_add_action'
                '_remove_action'
                '_add_container_actions'
                '_get_positional_kwargs'
                '_get_optional_kwargs'
                '_pop_action_class'
                '_get_handler'
                '_check_conflict'
                '_handle_conflict_error'
                '_handle_conflict_resolve'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_ActionsContainer'
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '_ActionsContainer'
                        '__init__'
                        'description'
                        'argument_default'
                        'prefix_chars'
                        'conflict_handler'
                        '_registries'
                        'register'
                        '_StoreAction'
                        '_StoreConstAction'
                        '_StoreTrueAction'
                        '_StoreFalseAction'
                        '_AppendAction'
                        '_AppendConstAction'
                        '_CountAction'
                        '_HelpAction'
                        '_VersionAction'
                        '_SubParsersAction'
                        '_ExtendAction'
                        '_get_handler'
                        '_actions'
                        '_option_string_actions'
                        '_action_groups'
                        '_mutually_exclusive_groups'
                        '_defaults'
                        '_re'
                        'compile'
                        '_negative_number_matcher'
                        '_has_negative_number_optionals'
                    [Var Names]
                        'self'
                        'description'
                        'prefix_chars'
                        'argument_default'
                        'conflict_handler'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        'action'
                        'store'
                        'store_const'
                        'store_true'
                        'store_false'
                        'append'
                        'append_const'
                        'count'
                        'help'
                        'version'
                        'parsers'
                        'extend'
                        '^-\\d+$|^-\\d*\\.\\d+$'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: _ActionsContainer
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_METHOD                     2: __init__
                        10      CALL_METHOD                     0
                        12      POP_TOP                         
                        14      LOAD_FAST                       1: description
                        16      LOAD_FAST                       0: self
                        18      STORE_ATTR                      3: description
                        20      LOAD_FAST                       3: argument_default
                        22      LOAD_FAST                       0: self
                        24      STORE_ATTR                      4: argument_default
                        26      LOAD_FAST                       2: prefix_chars
                        28      LOAD_FAST                       0: self
                        30      STORE_ATTR                      5: prefix_chars
                        32      LOAD_FAST                       4: conflict_handler
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      6: conflict_handler
                        38      BUILD_MAP                       0
                        40      LOAD_FAST                       0: self
                        42      STORE_ATTR                      7: _registries
                        44      LOAD_FAST                       0: self
                        46      LOAD_METHOD                     8: register
                        48      LOAD_CONST                      1: 'action'
                        50      LOAD_CONST                      0: None
                        52      LOAD_GLOBAL                     9: _StoreAction
                        54      CALL_METHOD                     3
                        56      POP_TOP                         
                        58      LOAD_FAST                       0: self
                        60      LOAD_METHOD                     8: register
                        62      LOAD_CONST                      1: 'action'
                        64      LOAD_CONST                      2: 'store'
                        66      LOAD_GLOBAL                     9: _StoreAction
                        68      CALL_METHOD                     3
                        70      POP_TOP                         
                        72      LOAD_FAST                       0: self
                        74      LOAD_METHOD                     8: register
                        76      LOAD_CONST                      1: 'action'
                        78      LOAD_CONST                      3: 'store_const'
                        80      LOAD_GLOBAL                     10: _StoreConstAction
                        82      CALL_METHOD                     3
                        84      POP_TOP                         
                        86      LOAD_FAST                       0: self
                        88      LOAD_METHOD                     8: register
                        90      LOAD_CONST                      1: 'action'
                        92      LOAD_CONST                      4: 'store_true'
                        94      LOAD_GLOBAL                     11: _StoreTrueAction
                        96      CALL_METHOD                     3
                        98      POP_TOP                         
                        100     LOAD_FAST                       0: self
                        102     LOAD_METHOD                     8: register
                        104     LOAD_CONST                      1: 'action'
                        106     LOAD_CONST                      5: 'store_false'
                        108     LOAD_GLOBAL                     12: _StoreFalseAction
                        110     CALL_METHOD                     3
                        112     POP_TOP                         
                        114     LOAD_FAST                       0: self
                        116     LOAD_METHOD                     8: register
                        118     LOAD_CONST                      1: 'action'
                        120     LOAD_CONST                      6: 'append'
                        122     LOAD_GLOBAL                     13: _AppendAction
                        124     CALL_METHOD                     3
                        126     POP_TOP                         
                        128     LOAD_FAST                       0: self
                        130     LOAD_METHOD                     8: register
                        132     LOAD_CONST                      1: 'action'
                        134     LOAD_CONST                      7: 'append_const'
                        136     LOAD_GLOBAL                     14: _AppendConstAction
                        138     CALL_METHOD                     3
                        140     POP_TOP                         
                        142     LOAD_FAST                       0: self
                        144     LOAD_METHOD                     8: register
                        146     LOAD_CONST                      1: 'action'
                        148     LOAD_CONST                      8: 'count'
                        150     LOAD_GLOBAL                     15: _CountAction
                        152     CALL_METHOD                     3
                        154     POP_TOP                         
                        156     LOAD_FAST                       0: self
                        158     LOAD_METHOD                     8: register
                        160     LOAD_CONST                      1: 'action'
                        162     LOAD_CONST                      9: 'help'
                        164     LOAD_GLOBAL                     16: _HelpAction
                        166     CALL_METHOD                     3
                        168     POP_TOP                         
                        170     LOAD_FAST                       0: self
                        172     LOAD_METHOD                     8: register
                        174     LOAD_CONST                      1: 'action'
                        176     LOAD_CONST                      10: 'version'
                        178     LOAD_GLOBAL                     17: _VersionAction
                        180     CALL_METHOD                     3
                        182     POP_TOP                         
                        184     LOAD_FAST                       0: self
                        186     LOAD_METHOD                     8: register
                        188     LOAD_CONST                      1: 'action'
                        190     LOAD_CONST                      11: 'parsers'
                        192     LOAD_GLOBAL                     18: _SubParsersAction
                        194     CALL_METHOD                     3
                        196     POP_TOP                         
                        198     LOAD_FAST                       0: self
                        200     LOAD_METHOD                     8: register
                        202     LOAD_CONST                      1: 'action'
                        204     LOAD_CONST                      12: 'extend'
                        206     LOAD_GLOBAL                     19: _ExtendAction
                        208     CALL_METHOD                     3
                        210     POP_TOP                         
                        212     LOAD_FAST                       0: self
                        214     LOAD_METHOD                     20: _get_handler
                        216     CALL_METHOD                     0
                        218     POP_TOP                         
                        220     BUILD_LIST                      0
                        222     LOAD_FAST                       0: self
                        224     STORE_ATTR                      21: _actions
                        226     BUILD_MAP                       0
                        228     LOAD_FAST                       0: self
                        230     STORE_ATTR                      22: _option_string_actions
                        232     BUILD_LIST                      0
                        234     LOAD_FAST                       0: self
                        236     STORE_ATTR                      23: _action_groups
                        238     BUILD_LIST                      0
                        240     LOAD_FAST                       0: self
                        242     STORE_ATTR                      24: _mutually_exclusive_groups
                        244     BUILD_MAP                       0
                        246     LOAD_FAST                       0: self
                        248     STORE_ATTR                      25: _defaults
                        250     LOAD_GLOBAL                     26: _re
                        252     LOAD_METHOD                     27: compile
                        254     LOAD_CONST                      13: '^-\\d+$|^-\\d*\\.\\d+$'
                        256     CALL_METHOD                     1
                        258     LOAD_FAST                       0: self
                        260     STORE_ATTR                      28: _negative_number_matcher
                        262     BUILD_LIST                      0
                        264     LOAD_FAST                       0: self
                        266     STORE_ATTR                      29: _has_negative_number_optionals
                        268     LOAD_CONST                      0: None
                        270     RETURN_VALUE                    
                '_ActionsContainer.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: register
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_registries'
                        'setdefault'
                    [Var Names]
                        'self'
                        'registry_name'
                        'value'
                        'object'
                        'registry'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _registries
                        4       LOAD_METHOD                     1: setdefault
                        6       LOAD_FAST                       1: registry_name
                        8       BUILD_MAP                       0
                        10      CALL_METHOD                     2
                        12      STORE_FAST                      4: registry
                        14      LOAD_FAST                       3: object
                        16      LOAD_FAST                       4: registry
                        18      LOAD_FAST                       2: value
                        20      STORE_SUBSCR                    
                        22      LOAD_CONST                      0: None
                        24      RETURN_VALUE                    
                '_ActionsContainer.register'
                None
                [Code]
                    File Name: argparse.py
                    Object Name: _registry_get
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_registries'
                        'get'
                    [Var Names]
                        'self'
                        'registry_name'
                        'value'
                        'default'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _registries
                        4       LOAD_FAST                       1: registry_name
                        6       BINARY_SUBSCR                   
                        8       LOAD_METHOD                     1: get
                        10      LOAD_FAST                       2: value
                        12      LOAD_FAST                       3: default
                        14      CALL_METHOD                     2
                        16      RETURN_VALUE                    
                '_ActionsContainer._registry_get'
                [Code]
                    File Name: argparse.py
                    Object Name: set_defaults
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        '_defaults'
                        'update'
                        '_actions'
                        'dest'
                        'default'
                    [Var Names]
                        'self'
                        'kwargs'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _defaults
                        4       LOAD_METHOD                     1: update
                        6       LOAD_FAST                       1: kwargs
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: _actions
                        16      GET_ITER                        
                        18      FOR_ITER                        13 (to 46)
                        20      STORE_FAST                      2: action
                        22      LOAD_FAST                       2: action
                        24      LOAD_ATTR                       3: dest
                        26      LOAD_FAST                       1: kwargs
                        28      CONTAINS_OP                     0 (in)
                        30      POP_JUMP_IF_FALSE               22 (to 44)
                        32      LOAD_FAST                       1: kwargs
                        34      LOAD_FAST                       2: action
                        36      LOAD_ATTR                       3: dest
                        38      BINARY_SUBSCR                   
                        40      LOAD_FAST                       2: action
                        42      STORE_ATTR                      4: default
                        44      JUMP_ABSOLUTE                   9 (to 18)
                        46      LOAD_CONST                      0: None
                        48      RETURN_VALUE                    
                '_ActionsContainer.set_defaults'
                [Code]
                    File Name: argparse.py
                    Object Name: get_default
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_actions'
                        'dest'
                        'default'
                        '_defaults'
                        'get'
                    [Var Names]
                        'self'
                        'dest'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _actions
                        4       GET_ITER                        
                        6       FOR_ITER                        17 (to 42)
                        8       STORE_FAST                      2: action
                        10      LOAD_FAST                       2: action
                        12      LOAD_ATTR                       1: dest
                        14      LOAD_FAST                       1: dest
                        16      COMPARE_OP                      2 (==)
                        18      POP_JUMP_IF_FALSE               20 (to 40)
                        20      LOAD_FAST                       2: action
                        22      LOAD_ATTR                       2: default
                        24      LOAD_CONST                      0: None
                        26      IS_OP                           1 (is not)
                        28      POP_JUMP_IF_FALSE               20 (to 40)
                        30      LOAD_FAST                       2: action
                        32      LOAD_ATTR                       2: default
                        34      ROT_TWO                         
                        36      POP_TOP                         
                        38      RETURN_VALUE                    
                        40      JUMP_ABSOLUTE                   3 (to 6)
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       3: _defaults
                        46      LOAD_METHOD                     4: get
                        48      LOAD_FAST                       1: dest
                        50      LOAD_CONST                      0: None
                        52      CALL_METHOD                     2
                        54      RETURN_VALUE                    
                '_ActionsContainer.get_default'
                [Code]
                    File Name: argparse.py
                    Object Name: add_argument
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 8
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'prefix_chars'
                        'len'
                        'ValueError'
                        '_get_positional_kwargs'
                        '_get_optional_kwargs'
                        '_defaults'
                        'argument_default'
                        '_pop_action_class'
                        'callable'
                        '_registry_get'
                        'type'
                        'FileType'
                        'hasattr'
                        '_get_formatter'
                        '_format_args'
                        'TypeError'
                        '_add_action'
                    [Var Names]
                        'self'
                        'args'
                        'kwargs'
                        'chars'
                        'dest'
                        'action_class'
                        'action'
                        'type_func'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        add_argument(dest, ..., name=value, ...)\n        add_argument(option_string, option_string, ..., name=value, ...)\n        '
                        1
                        0
                        'dest'
                        'dest supplied twice for positional argument'
                        'default'
                        None
                        'unknown action "%s"'
                        'type'
                        '%r is not callable'
                        '%r is a FileType class object, instance of it must be passed'
                        '_get_formatter'
                        'length of metavar tuple does not match nargs'
                        (
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: prefix_chars
                        4       STORE_FAST                      3: chars
                        6       LOAD_FAST                       1: args
                        8       POP_JUMP_IF_FALSE               19 (to 38)
                        10      LOAD_GLOBAL                     1: len
                        12      LOAD_FAST                       1: args
                        14      CALL_FUNCTION                   1
                        16      LOAD_CONST                      1: 1
                        18      COMPARE_OP                      2 (==)
                        20      POP_JUMP_IF_FALSE               38 (to 76)
                        22      LOAD_FAST                       1: args
                        24      LOAD_CONST                      2: 0
                        26      BINARY_SUBSCR                   
                        28      LOAD_CONST                      2: 0
                        30      BINARY_SUBSCR                   
                        32      LOAD_FAST                       3: chars
                        34      CONTAINS_OP                     1 (not in)
                        36      POP_JUMP_IF_FALSE               38 (to 76)
                        38      LOAD_FAST                       1: args
                        40      POP_JUMP_IF_FALSE               29 (to 58)
                        42      LOAD_CONST                      3: 'dest'
                        44      LOAD_FAST                       2: kwargs
                        46      CONTAINS_OP                     0 (in)
                        48      POP_JUMP_IF_FALSE               29 (to 58)
                        50      LOAD_GLOBAL                     2: ValueError
                        52      LOAD_CONST                      4: 'dest supplied twice for positional argument'
                        54      CALL_FUNCTION                   1
                        56      RAISE_VARARGS                   1
                        58      LOAD_FAST                       0: self
                        60      LOAD_ATTR                       3: _get_positional_kwargs
                        62      LOAD_FAST                       1: args
                        64      BUILD_MAP                       0
                        66      LOAD_FAST                       2: kwargs
                        68      DICT_MERGE                      1
                        70      CALL_FUNCTION_EX                1
                        72      STORE_FAST                      2: kwargs
                        74      JUMP_FORWARD                    8 (to 92)
                        76      LOAD_FAST                       0: self
                        78      LOAD_ATTR                       4: _get_optional_kwargs
                        80      LOAD_FAST                       1: args
                        82      BUILD_MAP                       0
                        84      LOAD_FAST                       2: kwargs
                        86      DICT_MERGE                      1
                        88      CALL_FUNCTION_EX                1
                        90      STORE_FAST                      2: kwargs
                        92      LOAD_CONST                      5: 'default'
                        94      LOAD_FAST                       2: kwargs
                        96      CONTAINS_OP                     1 (not in)
                        98      POP_JUMP_IF_FALSE               77 (to 154)
                        100     LOAD_FAST                       2: kwargs
                        102     LOAD_CONST                      3: 'dest'
                        104     BINARY_SUBSCR                   
                        106     STORE_FAST                      4: dest
                        108     LOAD_FAST                       4: dest
                        110     LOAD_FAST                       0: self
                        112     LOAD_ATTR                       5: _defaults
                        114     CONTAINS_OP                     0 (in)
                        116     POP_JUMP_IF_FALSE               67 (to 134)
                        118     LOAD_FAST                       0: self
                        120     LOAD_ATTR                       5: _defaults
                        122     LOAD_FAST                       4: dest
                        124     BINARY_SUBSCR                   
                        126     LOAD_FAST                       2: kwargs
                        128     LOAD_CONST                      5: 'default'
                        130     STORE_SUBSCR                    
                        132     JUMP_FORWARD                    10 (to 154)
                        134     LOAD_FAST                       0: self
                        136     LOAD_ATTR                       6: argument_default
                        138     LOAD_CONST                      6: None
                        140     IS_OP                           1 (is not)
                        142     POP_JUMP_IF_FALSE               77 (to 154)
                        144     LOAD_FAST                       0: self
                        146     LOAD_ATTR                       6: argument_default
                        148     LOAD_FAST                       2: kwargs
                        150     LOAD_CONST                      5: 'default'
                        152     STORE_SUBSCR                    
                        154     LOAD_FAST                       0: self
                        156     LOAD_METHOD                     7: _pop_action_class
                        158     LOAD_FAST                       2: kwargs
                        160     CALL_METHOD                     1
                        162     STORE_FAST                      5: action_class
                        164     LOAD_GLOBAL                     8: callable
                        166     LOAD_FAST                       5: action_class
                        168     CALL_FUNCTION                   1
                        170     POP_JUMP_IF_TRUE                93 (to 186)
                        172     LOAD_GLOBAL                     2: ValueError
                        174     LOAD_CONST                      7: 'unknown action "%s"'
                        176     LOAD_FAST                       5: action_class
                        178     BUILD_TUPLE                     1
                        180     BINARY_MODULO                   
                        182     CALL_FUNCTION                   1
                        184     RAISE_VARARGS                   1
                        186     LOAD_FAST                       5: action_class
                        188     LOAD_CONST                      13: ()
                        190     BUILD_MAP                       0
                        192     LOAD_FAST                       2: kwargs
                        194     DICT_MERGE                      1
                        196     CALL_FUNCTION_EX                1
                        198     STORE_FAST                      6: action
                        200     LOAD_FAST                       0: self
                        202     LOAD_METHOD                     9: _registry_get
                        204     LOAD_CONST                      8: 'type'
                        206     LOAD_FAST                       6: action
                        208     LOAD_ATTR                       10: type
                        210     LOAD_FAST                       6: action
                        212     LOAD_ATTR                       10: type
                        214     CALL_METHOD                     3
                        216     STORE_FAST                      7: type_func
                        218     LOAD_GLOBAL                     8: callable
                        220     LOAD_FAST                       7: type_func
                        222     CALL_FUNCTION                   1
                        224     POP_JUMP_IF_TRUE                120 (to 240)
                        226     LOAD_GLOBAL                     2: ValueError
                        228     LOAD_CONST                      9: '%r is not callable'
                        230     LOAD_FAST                       7: type_func
                        232     BUILD_TUPLE                     1
                        234     BINARY_MODULO                   
                        236     CALL_FUNCTION                   1
                        238     RAISE_VARARGS                   1
                        240     LOAD_FAST                       7: type_func
                        242     LOAD_GLOBAL                     11: FileType
                        244     IS_OP                           0 (is)
                        246     POP_JUMP_IF_FALSE               131 (to 262)
                        248     LOAD_GLOBAL                     2: ValueError
                        250     LOAD_CONST                      10: '%r is a FileType class object, instance of it must be passed'
                        252     LOAD_FAST                       7: type_func
                        254     BUILD_TUPLE                     1
                        256     BINARY_MODULO                   
                        258     CALL_FUNCTION                   1
                        260     RAISE_VARARGS                   1
                        262     LOAD_GLOBAL                     12: hasattr
                        264     LOAD_FAST                       0: self
                        266     LOAD_CONST                      11: '_get_formatter'
                        268     CALL_FUNCTION                   2
                        270     POP_JUMP_IF_FALSE               158 (to 316)
                        272     SETUP_FINALLY                   10 (to 294)
                        274     LOAD_FAST                       0: self
                        276     LOAD_METHOD                     13: _get_formatter
                        278     CALL_METHOD                     0
                        280     LOAD_METHOD                     14: _format_args
                        282     LOAD_FAST                       6: action
                        284     LOAD_CONST                      6: None
                        286     CALL_METHOD                     2
                        288     POP_TOP                         
                        290     POP_BLOCK                       
                        292     JUMP_FORWARD                    11 (to 316)
                        294     DUP_TOP                         
                        296     LOAD_GLOBAL                     15: TypeError
                        298     JUMP_IF_NOT_EXC_MATCH           157 (to 314)
                        300     POP_TOP                         
                        302     POP_TOP                         
                        304     POP_TOP                         
                        306     LOAD_GLOBAL                     2: ValueError
                        308     LOAD_CONST                      12: 'length of metavar tuple does not match nargs'
                        310     CALL_FUNCTION                   1
                        312     RAISE_VARARGS                   1
                        314     RERAISE                         0
                        316     LOAD_FAST                       0: self
                        318     LOAD_METHOD                     16: _add_action
                        320     LOAD_FAST                       6: action
                        322     CALL_METHOD                     1
                        324     RETURN_VALUE                    
                '_ActionsContainer.add_argument'
                [Code]
                    File Name: argparse.py
                    Object Name: add_argument_group
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        '_ArgumentGroup'
                        '_action_groups'
                        'append'
                    [Var Names]
                        'self'
                        'args'
                        'kwargs'
                        'group'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _ArgumentGroup
                        2       LOAD_FAST                       0: self
                        4       BUILD_LIST                      1
                        6       LOAD_FAST                       1: args
                        8       LIST_EXTEND                     1
                        10      LIST_TO_TUPLE                   
                        12      BUILD_MAP                       0
                        14      LOAD_FAST                       2: kwargs
                        16      DICT_MERGE                      1
                        18      CALL_FUNCTION_EX                1
                        20      STORE_FAST                      3: group
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       1: _action_groups
                        26      LOAD_METHOD                     2: append
                        28      LOAD_FAST                       3: group
                        30      CALL_METHOD                     1
                        32      POP_TOP                         
                        34      LOAD_FAST                       3: group
                        36      RETURN_VALUE                    
                '_ActionsContainer.add_argument_group'
                [Code]
                    File Name: argparse.py
                    Object Name: add_mutually_exclusive_group
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        '_MutuallyExclusiveGroup'
                        '_mutually_exclusive_groups'
                        'append'
                    [Var Names]
                        'self'
                        'kwargs'
                        'group'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _MutuallyExclusiveGroup
                        2       LOAD_FAST                       0: self
                        4       BUILD_TUPLE                     1
                        6       BUILD_MAP                       0
                        8       LOAD_FAST                       1: kwargs
                        10      DICT_MERGE                      1
                        12      CALL_FUNCTION_EX                1
                        14      STORE_FAST                      2: group
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       1: _mutually_exclusive_groups
                        20      LOAD_METHOD                     2: append
                        22      LOAD_FAST                       2: group
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       2: group
                        30      RETURN_VALUE                    
                '_ActionsContainer.add_mutually_exclusive_group'
                [Code]
                    File Name: argparse.py
                    Object Name: _add_action
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_check_conflict'
                        '_actions'
                        'append'
                        'container'
                        'option_strings'
                        '_option_string_actions'
                        '_negative_number_matcher'
                        'match'
                        '_has_negative_number_optionals'
                    [Var Names]
                        'self'
                        'action'
                        'option_string'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _check_conflict
                        4       LOAD_FAST                       1: action
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: _actions
                        14      LOAD_METHOD                     2: append
                        16      LOAD_FAST                       1: action
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_FAST                       0: self
                        24      LOAD_FAST                       1: action
                        26      STORE_ATTR                      3: container
                        28      LOAD_FAST                       1: action
                        30      LOAD_ATTR                       4: option_strings
                        32      GET_ITER                        
                        34      FOR_ITER                        7 (to 50)
                        36      STORE_FAST                      2: option_string
                        38      LOAD_FAST                       1: action
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       5: _option_string_actions
                        44      LOAD_FAST                       2: option_string
                        46      STORE_SUBSCR                    
                        48      JUMP_ABSOLUTE                   17 (to 34)
                        50      LOAD_FAST                       1: action
                        52      LOAD_ATTR                       4: option_strings
                        54      GET_ITER                        
                        56      FOR_ITER                        17 (to 92)
                        58      STORE_FAST                      2: option_string
                        60      LOAD_FAST                       0: self
                        62      LOAD_ATTR                       6: _negative_number_matcher
                        64      LOAD_METHOD                     7: match
                        66      LOAD_FAST                       2: option_string
                        68      CALL_METHOD                     1
                        70      POP_JUMP_IF_FALSE               45 (to 90)
                        72      LOAD_FAST                       0: self
                        74      LOAD_ATTR                       8: _has_negative_number_optionals
                        76      POP_JUMP_IF_TRUE                45 (to 90)
                        78      LOAD_FAST                       0: self
                        80      LOAD_ATTR                       8: _has_negative_number_optionals
                        82      LOAD_METHOD                     2: append
                        84      LOAD_CONST                      1: True
                        86      CALL_METHOD                     1
                        88      POP_TOP                         
                        90      JUMP_ABSOLUTE                   28 (to 56)
                        92      LOAD_FAST                       1: action
                        94      RETURN_VALUE                    
                '_ActionsContainer._add_action'
                [Code]
                    File Name: argparse.py
                    Object Name: _remove_action
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_actions'
                        'remove'
                    [Var Names]
                        'self'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _actions
                        4       LOAD_METHOD                     1: remove
                        6       LOAD_FAST                       1: action
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                '_ActionsContainer._remove_action'
                [Code]
                    File Name: argparse.py
                    Object Name: _add_container_actions
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_action_groups'
                        'title'
                        '_'
                        'ValueError'
                        'add_argument_group'
                        'description'
                        'conflict_handler'
                        '_group_actions'
                        '_mutually_exclusive_groups'
                        'add_mutually_exclusive_group'
                        'required'
                        '_actions'
                        'get'
                        '_add_action'
                    [Var Names]
                        'self'
                        'container'
                        'title_group_map'
                        'group'
                        'msg'
                        'group_map'
                        'action'
                        'mutex_group'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'cannot merge actions - two groups are named %r'
                        (
                            'title'
                            'description'
                            'conflict_handler'
                        )
                        (
                            'required'
                        )
                    [Disassembly]
                        0       BUILD_MAP                       0
                        2       STORE_FAST                      2: title_group_map
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       0: _action_groups
                        8       GET_ITER                        
                        10      FOR_ITER                        23 (to 58)
                        12      STORE_FAST                      3: group
                        14      LOAD_FAST                       3: group
                        16      LOAD_ATTR                       1: title
                        18      LOAD_FAST                       2: title_group_map
                        20      CONTAINS_OP                     0 (in)
                        22      POP_JUMP_IF_FALSE               23 (to 46)
                        24      LOAD_GLOBAL                     2: _
                        26      LOAD_CONST                      1: 'cannot merge actions - two groups are named %r'
                        28      CALL_FUNCTION                   1
                        30      STORE_FAST                      4: msg
                        32      LOAD_GLOBAL                     3: ValueError
                        34      LOAD_FAST                       4: msg
                        36      LOAD_FAST                       3: group
                        38      LOAD_ATTR                       1: title
                        40      BINARY_MODULO                   
                        42      CALL_FUNCTION                   1
                        44      RAISE_VARARGS                   1
                        46      LOAD_FAST                       3: group
                        48      LOAD_FAST                       2: title_group_map
                        50      LOAD_FAST                       3: group
                        52      LOAD_ATTR                       1: title
                        54      STORE_SUBSCR                    
                        56      JUMP_ABSOLUTE                   5 (to 10)
                        58      BUILD_MAP                       0
                        60      STORE_FAST                      5: group_map
                        62      LOAD_FAST                       1: container
                        64      LOAD_ATTR                       0: _action_groups
                        66      GET_ITER                        
                        68      FOR_ITER                        34 (to 138)
                        70      STORE_FAST                      3: group
                        72      LOAD_FAST                       3: group
                        74      LOAD_ATTR                       1: title
                        76      LOAD_FAST                       2: title_group_map
                        78      CONTAINS_OP                     1 (not in)
                        80      POP_JUMP_IF_FALSE               55 (to 110)
                        82      LOAD_FAST                       0: self
                        84      LOAD_ATTR                       4: add_argument_group
                        86      LOAD_FAST                       3: group
                        88      LOAD_ATTR                       1: title
                        90      LOAD_FAST                       3: group
                        92      LOAD_ATTR                       5: description
                        94      LOAD_FAST                       3: group
                        96      LOAD_ATTR                       6: conflict_handler
                        98      LOAD_CONST                      2: ('title', 'description', 'conflict_handler')
                        100     CALL_FUNCTION_KW                3
                        102     LOAD_FAST                       2: title_group_map
                        104     LOAD_FAST                       3: group
                        106     LOAD_ATTR                       1: title
                        108     STORE_SUBSCR                    
                        110     LOAD_FAST                       3: group
                        112     LOAD_ATTR                       7: _group_actions
                        114     GET_ITER                        
                        116     FOR_ITER                        9 (to 136)
                        118     STORE_FAST                      6: action
                        120     LOAD_FAST                       2: title_group_map
                        122     LOAD_FAST                       3: group
                        124     LOAD_ATTR                       1: title
                        126     BINARY_SUBSCR                   
                        128     LOAD_FAST                       5: group_map
                        130     LOAD_FAST                       6: action
                        132     STORE_SUBSCR                    
                        134     JUMP_ABSOLUTE                   58 (to 116)
                        136     JUMP_ABSOLUTE                   34 (to 68)
                        138     LOAD_FAST                       1: container
                        140     LOAD_ATTR                       8: _mutually_exclusive_groups
                        142     GET_ITER                        
                        144     FOR_ITER                        19 (to 184)
                        146     STORE_FAST                      3: group
                        148     LOAD_FAST                       0: self
                        150     LOAD_ATTR                       9: add_mutually_exclusive_group
                        152     LOAD_FAST                       3: group
                        154     LOAD_ATTR                       10: required
                        156     LOAD_CONST                      3: ('required',)
                        158     CALL_FUNCTION_KW                1
                        160     STORE_FAST                      7: mutex_group
                        162     LOAD_FAST                       3: group
                        164     LOAD_ATTR                       7: _group_actions
                        166     GET_ITER                        
                        168     FOR_ITER                        6 (to 182)
                        170     STORE_FAST                      6: action
                        172     LOAD_FAST                       7: mutex_group
                        174     LOAD_FAST                       5: group_map
                        176     LOAD_FAST                       6: action
                        178     STORE_SUBSCR                    
                        180     JUMP_ABSOLUTE                   84 (to 168)
                        182     JUMP_ABSOLUTE                   72 (to 144)
                        184     LOAD_FAST                       1: container
                        186     LOAD_ATTR                       11: _actions
                        188     GET_ITER                        
                        190     FOR_ITER                        11 (to 214)
                        192     STORE_FAST                      6: action
                        194     LOAD_FAST                       5: group_map
                        196     LOAD_METHOD                     12: get
                        198     LOAD_FAST                       6: action
                        200     LOAD_FAST                       0: self
                        202     CALL_METHOD                     2
                        204     LOAD_METHOD                     13: _add_action
                        206     LOAD_FAST                       6: action
                        208     CALL_METHOD                     1
                        210     POP_TOP                         
                        212     JUMP_ABSOLUTE                   95 (to 190)
                        214     LOAD_CONST                      0: None
                        216     RETURN_VALUE                    
                '_ActionsContainer._add_container_actions'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_positional_kwargs
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        '_'
                        'TypeError'
                        'get'
                        'OPTIONAL'
                        'ZERO_OR_MORE'
                        'dict'
                    [Var Names]
                        'self'
                        'dest'
                        'kwargs'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'required'
                        "'required' is an invalid argument for positionals"
                        'nargs'
                        True
                        'default'
                        (
                            'dest'
                            'option_strings'
                        )
                    [Disassembly]
                        0       LOAD_CONST                      1: 'required'
                        2       LOAD_FAST                       2: kwargs
                        4       CONTAINS_OP                     0 (in)
                        6       POP_JUMP_IF_FALSE               12 (to 24)
                        8       LOAD_GLOBAL                     0: _
                        10      LOAD_CONST                      2: "'required' is an invalid argument for positionals"
                        12      CALL_FUNCTION                   1
                        14      STORE_FAST                      3: msg
                        16      LOAD_GLOBAL                     1: TypeError
                        18      LOAD_FAST                       3: msg
                        20      CALL_FUNCTION                   1
                        22      RAISE_VARARGS                   1
                        24      LOAD_FAST                       2: kwargs
                        26      LOAD_METHOD                     2: get
                        28      LOAD_CONST                      3: 'nargs'
                        30      CALL_METHOD                     1
                        32      LOAD_GLOBAL                     3: OPTIONAL
                        34      LOAD_GLOBAL                     4: ZERO_OR_MORE
                        36      BUILD_TUPLE                     2
                        38      CONTAINS_OP                     1 (not in)
                        40      POP_JUMP_IF_FALSE               25 (to 50)
                        42      LOAD_CONST                      4: True
                        44      LOAD_FAST                       2: kwargs
                        46      LOAD_CONST                      1: 'required'
                        48      STORE_SUBSCR                    
                        50      LOAD_FAST                       2: kwargs
                        52      LOAD_METHOD                     2: get
                        54      LOAD_CONST                      3: 'nargs'
                        56      CALL_METHOD                     1
                        58      LOAD_GLOBAL                     4: ZERO_OR_MORE
                        60      COMPARE_OP                      2 (==)
                        62      POP_JUMP_IF_FALSE               40 (to 80)
                        64      LOAD_CONST                      5: 'default'
                        66      LOAD_FAST                       2: kwargs
                        68      CONTAINS_OP                     1 (not in)
                        70      POP_JUMP_IF_FALSE               40 (to 80)
                        72      LOAD_CONST                      4: True
                        74      LOAD_FAST                       2: kwargs
                        76      LOAD_CONST                      1: 'required'
                        78      STORE_SUBSCR                    
                        80      LOAD_GLOBAL                     5: dict
                        82      LOAD_FAST                       2: kwargs
                        84      LOAD_FAST                       1: dest
                        86      BUILD_LIST                      0
                        88      LOAD_CONST                      6: ('dest', 'option_strings')
                        90      CALL_FUNCTION_KW                3
                        92      RETURN_VALUE                    
                '_ActionsContainer._get_positional_kwargs'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_optional_kwargs
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 5
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'prefix_chars'
                        '_'
                        'ValueError'
                        'append'
                        'len'
                        'pop'
                        'lstrip'
                        'replace'
                        'dict'
                    [Var Names]
                        'self'
                        'args'
                        'kwargs'
                        'option_strings'
                        'long_option_strings'
                        'option_string'
                        'msg'
                        'dest'
                        'dest_option_string'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        (
                            'option'
                            'prefix_chars'
                        )
                        'invalid option string %(option)r: must start with a character %(prefix_chars)r'
                        1
                        'dest'
                        'dest= is required for options like %r'
                        '-'
                        '_'
                        (
                            'dest'
                            'option_strings'
                        )
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      3: option_strings
                        4       BUILD_LIST                      0
                        6       STORE_FAST                      4: long_option_strings
                        8       LOAD_FAST                       1: args
                        10      GET_ITER                        
                        12      FOR_ITER                        48 (to 110)
                        14      STORE_FAST                      5: option_string
                        16      LOAD_FAST                       5: option_string
                        18      LOAD_CONST                      1: 0
                        20      BINARY_SUBSCR                   
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       0: prefix_chars
                        26      CONTAINS_OP                     1 (not in)
                        28      POP_JUMP_IF_FALSE               31 (to 62)
                        30      LOAD_FAST                       5: option_string
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       0: prefix_chars
                        36      LOAD_CONST                      2: ('option', 'prefix_chars')
                        38      BUILD_CONST_KEY_MAP             2
                        40      STORE_FAST                      1: args
                        42      LOAD_GLOBAL                     1: _
                        44      LOAD_CONST                      3: 'invalid option string %(option)r: must start with a character %(prefix_chars)r'
                        46      CALL_FUNCTION                   1
                        48      STORE_FAST                      6: msg
                        50      LOAD_GLOBAL                     2: ValueError
                        52      LOAD_FAST                       6: msg
                        54      LOAD_FAST                       1: args
                        56      BINARY_MODULO                   
                        58      CALL_FUNCTION                   1
                        60      RAISE_VARARGS                   1
                        62      LOAD_FAST                       3: option_strings
                        64      LOAD_METHOD                     3: append
                        66      LOAD_FAST                       5: option_string
                        68      CALL_METHOD                     1
                        70      POP_TOP                         
                        72      LOAD_GLOBAL                     4: len
                        74      LOAD_FAST                       5: option_string
                        76      CALL_FUNCTION                   1
                        78      LOAD_CONST                      4: 1
                        80      COMPARE_OP                      4 (>)
                        82      POP_JUMP_IF_FALSE               54 (to 108)
                        84      LOAD_FAST                       5: option_string
                        86      LOAD_CONST                      4: 1
                        88      BINARY_SUBSCR                   
                        90      LOAD_FAST                       0: self
                        92      LOAD_ATTR                       0: prefix_chars
                        94      CONTAINS_OP                     0 (in)
                        96      POP_JUMP_IF_FALSE               54 (to 108)
                        98      LOAD_FAST                       4: long_option_strings
                        100     LOAD_METHOD                     3: append
                        102     LOAD_FAST                       5: option_string
                        104     CALL_METHOD                     1
                        106     POP_TOP                         
                        108     JUMP_ABSOLUTE                   6 (to 12)
                        110     LOAD_FAST                       2: kwargs
                        112     LOAD_METHOD                     5: pop
                        114     LOAD_CONST                      5: 'dest'
                        116     LOAD_CONST                      0: None
                        118     CALL_METHOD                     2
                        120     STORE_FAST                      7: dest
                        122     LOAD_FAST                       7: dest
                        124     LOAD_CONST                      0: None
                        126     IS_OP                           0 (is)
                        128     POP_JUMP_IF_FALSE               100 (to 200)
                        130     LOAD_FAST                       4: long_option_strings
                        132     POP_JUMP_IF_FALSE               72 (to 144)
                        134     LOAD_FAST                       4: long_option_strings
                        136     LOAD_CONST                      1: 0
                        138     BINARY_SUBSCR                   
                        140     STORE_FAST                      8: dest_option_string
                        142     JUMP_FORWARD                    4 (to 152)
                        144     LOAD_FAST                       3: option_strings
                        146     LOAD_CONST                      1: 0
                        148     BINARY_SUBSCR                   
                        150     STORE_FAST                      8: dest_option_string
                        152     LOAD_FAST                       8: dest_option_string
                        154     LOAD_METHOD                     6: lstrip
                        156     LOAD_FAST                       0: self
                        158     LOAD_ATTR                       0: prefix_chars
                        160     CALL_METHOD                     1
                        162     STORE_FAST                      7: dest
                        164     LOAD_FAST                       7: dest
                        166     POP_JUMP_IF_TRUE                94 (to 188)
                        168     LOAD_GLOBAL                     1: _
                        170     LOAD_CONST                      6: 'dest= is required for options like %r'
                        172     CALL_FUNCTION                   1
                        174     STORE_FAST                      6: msg
                        176     LOAD_GLOBAL                     2: ValueError
                        178     LOAD_FAST                       6: msg
                        180     LOAD_FAST                       5: option_string
                        182     BINARY_MODULO                   
                        184     CALL_FUNCTION                   1
                        186     RAISE_VARARGS                   1
                        188     LOAD_FAST                       7: dest
                        190     LOAD_METHOD                     7: replace
                        192     LOAD_CONST                      7: '-'
                        194     LOAD_CONST                      8: '_'
                        196     CALL_METHOD                     2
                        198     STORE_FAST                      7: dest
                        200     LOAD_GLOBAL                     8: dict
                        202     LOAD_FAST                       2: kwargs
                        204     LOAD_FAST                       7: dest
                        206     LOAD_FAST                       3: option_strings
                        208     LOAD_CONST                      9: ('dest', 'option_strings')
                        210     CALL_FUNCTION_KW                3
                        212     RETURN_VALUE                    
                '_ActionsContainer._get_optional_kwargs'
                [Code]
                    File Name: argparse.py
                    Object Name: _pop_action_class
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'pop'
                        '_registry_get'
                    [Var Names]
                        'self'
                        'kwargs'
                        'default'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'action'
                    [Disassembly]
                        0       LOAD_FAST                       1: kwargs
                        2       LOAD_METHOD                     0: pop
                        4       LOAD_CONST                      1: 'action'
                        6       LOAD_FAST                       2: default
                        8       CALL_METHOD                     2
                        10      STORE_FAST                      3: action
                        12      LOAD_FAST                       0: self
                        14      LOAD_METHOD                     1: _registry_get
                        16      LOAD_CONST                      1: 'action'
                        18      LOAD_FAST                       3: action
                        20      LOAD_FAST                       3: action
                        22      CALL_METHOD                     3
                        24      RETURN_VALUE                    
                '_ActionsContainer._pop_action_class'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_handler
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'conflict_handler'
                        'getattr'
                        'AttributeError'
                        '_'
                        'ValueError'
                    [Var Names]
                        'self'
                        'handler_func_name'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '_handle_conflict_%s'
                        'invalid conflict_resolution value: %r'
                    [Disassembly]
                        0       LOAD_CONST                      1: '_handle_conflict_%s'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: conflict_handler
                        6       BINARY_MODULO                   
                        8       STORE_FAST                      1: handler_func_name
                        10      SETUP_FINALLY                   6 (to 24)
                        12      LOAD_GLOBAL                     1: getattr
                        14      LOAD_FAST                       0: self
                        16      LOAD_FAST                       1: handler_func_name
                        18      CALL_FUNCTION                   2
                        20      POP_BLOCK                       
                        22      RETURN_VALUE                    
                        24      DUP_TOP                         
                        26      LOAD_GLOBAL                     2: AttributeError
                        28      JUMP_IF_NOT_EXC_MATCH           29 (to 58)
                        30      POP_TOP                         
                        32      POP_TOP                         
                        34      POP_TOP                         
                        36      LOAD_GLOBAL                     3: _
                        38      LOAD_CONST                      2: 'invalid conflict_resolution value: %r'
                        40      CALL_FUNCTION                   1
                        42      STORE_FAST                      2: msg
                        44      LOAD_GLOBAL                     4: ValueError
                        46      LOAD_FAST                       2: msg
                        48      LOAD_FAST                       0: self
                        50      LOAD_ATTR                       0: conflict_handler
                        52      BINARY_MODULO                   
                        54      CALL_FUNCTION                   1
                        56      RAISE_VARARGS                   1
                        58      RERAISE                         0
                '_ActionsContainer._get_handler'
                [Code]
                    File Name: argparse.py
                    Object Name: _check_conflict
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'option_strings'
                        '_option_string_actions'
                        'append'
                        '_get_handler'
                    [Var Names]
                        'self'
                        'action'
                        'confl_optionals'
                        'option_string'
                        'confl_optional'
                        'conflict_handler'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      2: confl_optionals
                        4       LOAD_FAST                       1: action
                        6       LOAD_ATTR                       0: option_strings
                        8       GET_ITER                        
                        10      FOR_ITER                        19 (to 50)
                        12      STORE_FAST                      3: option_string
                        14      LOAD_FAST                       3: option_string
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       1: _option_string_actions
                        20      CONTAINS_OP                     0 (in)
                        22      POP_JUMP_IF_FALSE               24 (to 48)
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       1: _option_string_actions
                        28      LOAD_FAST                       3: option_string
                        30      BINARY_SUBSCR                   
                        32      STORE_FAST                      4: confl_optional
                        34      LOAD_FAST                       2: confl_optionals
                        36      LOAD_METHOD                     2: append
                        38      LOAD_FAST                       3: option_string
                        40      LOAD_FAST                       4: confl_optional
                        42      BUILD_TUPLE                     2
                        44      CALL_METHOD                     1
                        46      POP_TOP                         
                        48      JUMP_ABSOLUTE                   5 (to 10)
                        50      LOAD_FAST                       2: confl_optionals
                        52      POP_JUMP_IF_FALSE               38 (to 76)
                        54      LOAD_FAST                       0: self
                        56      LOAD_METHOD                     3: _get_handler
                        58      CALL_METHOD                     0
                        60      STORE_FAST                      5: conflict_handler
                        62      LOAD_FAST                       5: conflict_handler
                        64      LOAD_FAST                       1: action
                        66      LOAD_FAST                       2: confl_optionals
                        68      CALL_FUNCTION                   2
                        70      POP_TOP                         
                        72      LOAD_CONST                      0: None
                        74      RETURN_VALUE                    
                        76      LOAD_CONST                      0: None
                        78      RETURN_VALUE                    
                '_ActionsContainer._check_conflict'
                [Code]
                    File Name: argparse.py
                    Object Name: _handle_conflict_error
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ngettext'
                        'len'
                        'join'
                        'ArgumentError'
                    [Var Names]
                        'self'
                        'action'
                        'conflicting_actions'
                        'message'
                        'conflict_string'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'conflicting option string: %s'
                        'conflicting option strings: %s'
                        ', '
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                            [Var Names]
                                '.0'
                                'option_string'
                                'action'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        6 (to 18)
                                6       UNPACK_SEQUENCE                 2
                                8       STORE_FAST                      1: option_string
                                10      STORE_FAST                      2: action
                                12      LOAD_FAST                       1: option_string
                                14      LIST_APPEND                     2
                                16      JUMP_ABSOLUTE                   2 (to 4)
                                18      RETURN_VALUE                    
                        '_ActionsContainer._handle_conflict_error.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: ngettext
                        2       LOAD_CONST                      1: 'conflicting option string: %s'
                        4       LOAD_CONST                      2: 'conflicting option strings: %s'
                        6       LOAD_GLOBAL                     1: len
                        8       LOAD_FAST                       2: conflicting_actions
                        10      CALL_FUNCTION                   1
                        12      CALL_FUNCTION                   3
                        14      STORE_FAST                      3: message
                        16      LOAD_CONST                      3: ', '
                        18      LOAD_METHOD                     2: join
                        20      LOAD_CONST                      4: <CODE> <listcomp>
                        22      LOAD_CONST                      5: '_ActionsContainer._handle_conflict_error.<locals>.<listcomp>'
                        24      MAKE_FUNCTION                   0
                        26      LOAD_FAST                       2: conflicting_actions
                        28      GET_ITER                        
                        30      CALL_FUNCTION                   1
                        32      CALL_METHOD                     1
                        34      STORE_FAST                      4: conflict_string
                        36      LOAD_GLOBAL                     3: ArgumentError
                        38      LOAD_FAST                       1: action
                        40      LOAD_FAST                       3: message
                        42      LOAD_FAST                       4: conflict_string
                        44      BINARY_MODULO                   
                        46      CALL_FUNCTION                   2
                        48      RAISE_VARARGS                   1
                '_ActionsContainer._handle_conflict_error'
                [Code]
                    File Name: argparse.py
                    Object Name: _handle_conflict_resolve
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'option_strings'
                        'remove'
                        '_option_string_actions'
                        'pop'
                        'container'
                        '_remove_action'
                    [Var Names]
                        'self'
                        'action'
                        'conflicting_actions'
                        'option_string'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       2: conflicting_actions
                        2       GET_ITER                        
                        4       FOR_ITER                        26 (to 58)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      3: option_string
                        10      STORE_FAST                      1: action
                        12      LOAD_FAST                       1: action
                        14      LOAD_ATTR                       0: option_strings
                        16      LOAD_METHOD                     1: remove
                        18      LOAD_FAST                       3: option_string
                        20      CALL_METHOD                     1
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       2: _option_string_actions
                        28      LOAD_METHOD                     3: pop
                        30      LOAD_FAST                       3: option_string
                        32      LOAD_CONST                      0: None
                        34      CALL_METHOD                     2
                        36      POP_TOP                         
                        38      LOAD_FAST                       1: action
                        40      LOAD_ATTR                       0: option_strings
                        42      POP_JUMP_IF_TRUE                28 (to 56)
                        44      LOAD_FAST                       1: action
                        46      LOAD_ATTR                       4: container
                        48      LOAD_METHOD                     5: _remove_action
                        50      LOAD_FAST                       1: action
                        52      CALL_METHOD                     1
                        54      POP_TOP                         
                        56      JUMP_ABSOLUTE                   2 (to 4)
                        58      LOAD_CONST                      0: None
                        60      RETURN_VALUE                    
                '_ActionsContainer._handle_conflict_resolve'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_ActionsContainer'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CLOSURE                    0: __class__
                10      BUILD_TUPLE                     1
                12      LOAD_CONST                      1: <CODE> __init__
                14      LOAD_CONST                      2: '_ActionsContainer.__init__'
                16      MAKE_FUNCTION                   8
                18      STORE_NAME                      3: __init__
                20      LOAD_CONST                      3: <CODE> register
                22      LOAD_CONST                      4: '_ActionsContainer.register'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      4: register
                28      LOAD_CONST                      38: (None,)
                30      LOAD_CONST                      6: <CODE> _registry_get
                32      LOAD_CONST                      7: '_ActionsContainer._registry_get'
                34      MAKE_FUNCTION                   1
                36      STORE_NAME                      5: _registry_get
                38      LOAD_CONST                      8: <CODE> set_defaults
                40      LOAD_CONST                      9: '_ActionsContainer.set_defaults'
                42      MAKE_FUNCTION                   0
                44      STORE_NAME                      6: set_defaults
                46      LOAD_CONST                      10: <CODE> get_default
                48      LOAD_CONST                      11: '_ActionsContainer.get_default'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      7: get_default
                54      LOAD_CONST                      12: <CODE> add_argument
                56      LOAD_CONST                      13: '_ActionsContainer.add_argument'
                58      MAKE_FUNCTION                   0
                60      STORE_NAME                      8: add_argument
                62      LOAD_CONST                      14: <CODE> add_argument_group
                64      LOAD_CONST                      15: '_ActionsContainer.add_argument_group'
                66      MAKE_FUNCTION                   0
                68      STORE_NAME                      9: add_argument_group
                70      LOAD_CONST                      16: <CODE> add_mutually_exclusive_group
                72      LOAD_CONST                      17: '_ActionsContainer.add_mutually_exclusive_group'
                74      MAKE_FUNCTION                   0
                76      STORE_NAME                      10: add_mutually_exclusive_group
                78      LOAD_CONST                      18: <CODE> _add_action
                80      LOAD_CONST                      19: '_ActionsContainer._add_action'
                82      MAKE_FUNCTION                   0
                84      STORE_NAME                      11: _add_action
                86      LOAD_CONST                      20: <CODE> _remove_action
                88      LOAD_CONST                      21: '_ActionsContainer._remove_action'
                90      MAKE_FUNCTION                   0
                92      STORE_NAME                      12: _remove_action
                94      LOAD_CONST                      22: <CODE> _add_container_actions
                96      LOAD_CONST                      23: '_ActionsContainer._add_container_actions'
                98      MAKE_FUNCTION                   0
                100     STORE_NAME                      13: _add_container_actions
                102     LOAD_CONST                      24: <CODE> _get_positional_kwargs
                104     LOAD_CONST                      25: '_ActionsContainer._get_positional_kwargs'
                106     MAKE_FUNCTION                   0
                108     STORE_NAME                      14: _get_positional_kwargs
                110     LOAD_CONST                      26: <CODE> _get_optional_kwargs
                112     LOAD_CONST                      27: '_ActionsContainer._get_optional_kwargs'
                114     MAKE_FUNCTION                   0
                116     STORE_NAME                      15: _get_optional_kwargs
                118     LOAD_CONST                      38: (None,)
                120     LOAD_CONST                      28: <CODE> _pop_action_class
                122     LOAD_CONST                      29: '_ActionsContainer._pop_action_class'
                124     MAKE_FUNCTION                   1
                126     STORE_NAME                      16: _pop_action_class
                128     LOAD_CONST                      30: <CODE> _get_handler
                130     LOAD_CONST                      31: '_ActionsContainer._get_handler'
                132     MAKE_FUNCTION                   0
                134     STORE_NAME                      17: _get_handler
                136     LOAD_CONST                      32: <CODE> _check_conflict
                138     LOAD_CONST                      33: '_ActionsContainer._check_conflict'
                140     MAKE_FUNCTION                   0
                142     STORE_NAME                      18: _check_conflict
                144     LOAD_CONST                      34: <CODE> _handle_conflict_error
                146     LOAD_CONST                      35: '_ActionsContainer._handle_conflict_error'
                148     MAKE_FUNCTION                   0
                150     STORE_NAME                      19: _handle_conflict_error
                152     LOAD_CONST                      36: <CODE> _handle_conflict_resolve
                154     LOAD_CONST                      37: '_ActionsContainer._handle_conflict_resolve'
                156     MAKE_FUNCTION                   0
                158     STORE_NAME                      20: _handle_conflict_resolve
                160     LOAD_CLOSURE                    0: __class__
                162     DUP_TOP                         
                164     STORE_NAME                      21: __classcell__
                166     RETURN_VALUE                    
        '_ActionsContainer'
        [Code]
            File Name: argparse.py
            Object Name: _ArgumentGroup
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '_add_action'
                '_remove_action'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_ArgumentGroup'
                None
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 4
                    Flags: 0x0000000B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS)
                    [Names]
                        'setdefault'
                        'conflict_handler'
                        'prefix_chars'
                        'argument_default'
                        'super'
                        '_ArgumentGroup'
                        '__init__'
                        'title'
                        '_group_actions'
                        '_registries'
                        '_actions'
                        '_option_string_actions'
                        '_defaults'
                        '_has_negative_number_optionals'
                        '_mutually_exclusive_groups'
                    [Var Names]
                        'self'
                        'container'
                        'title'
                        'description'
                        'kwargs'
                        'update'
                        'super_init'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        'conflict_handler'
                        'prefix_chars'
                        'argument_default'
                        'description'
                        (
                        )
                    [Disassembly]
                        0       LOAD_FAST                       4: kwargs
                        2       LOAD_ATTR                       0: setdefault
                        4       STORE_FAST                      5: update
                        6       LOAD_FAST                       5: update
                        8       LOAD_CONST                      1: 'conflict_handler'
                        10      LOAD_FAST                       1: container
                        12      LOAD_ATTR                       1: conflict_handler
                        14      CALL_FUNCTION                   2
                        16      POP_TOP                         
                        18      LOAD_FAST                       5: update
                        20      LOAD_CONST                      2: 'prefix_chars'
                        22      LOAD_FAST                       1: container
                        24      LOAD_ATTR                       2: prefix_chars
                        26      CALL_FUNCTION                   2
                        28      POP_TOP                         
                        30      LOAD_FAST                       5: update
                        32      LOAD_CONST                      3: 'argument_default'
                        34      LOAD_FAST                       1: container
                        36      LOAD_ATTR                       3: argument_default
                        38      CALL_FUNCTION                   2
                        40      POP_TOP                         
                        42      LOAD_GLOBAL                     4: super
                        44      LOAD_GLOBAL                     5: _ArgumentGroup
                        46      LOAD_FAST                       0: self
                        48      CALL_FUNCTION                   2
                        50      LOAD_ATTR                       6: __init__
                        52      STORE_FAST                      6: super_init
                        54      LOAD_FAST                       6: super_init
                        56      LOAD_CONST                      5: ()
                        58      LOAD_CONST                      4: 'description'
                        60      LOAD_FAST                       3: description
                        62      BUILD_MAP                       1
                        64      LOAD_FAST                       4: kwargs
                        66      DICT_MERGE                      1
                        68      CALL_FUNCTION_EX                1
                        70      POP_TOP                         
                        72      LOAD_FAST                       2: title
                        74      LOAD_FAST                       0: self
                        76      STORE_ATTR                      7: title
                        78      BUILD_LIST                      0
                        80      LOAD_FAST                       0: self
                        82      STORE_ATTR                      8: _group_actions
                        84      LOAD_FAST                       1: container
                        86      LOAD_ATTR                       9: _registries
                        88      LOAD_FAST                       0: self
                        90      STORE_ATTR                      9: _registries
                        92      LOAD_FAST                       1: container
                        94      LOAD_ATTR                       10: _actions
                        96      LOAD_FAST                       0: self
                        98      STORE_ATTR                      10: _actions
                        100     LOAD_FAST                       1: container
                        102     LOAD_ATTR                       11: _option_string_actions
                        104     LOAD_FAST                       0: self
                        106     STORE_ATTR                      11: _option_string_actions
                        108     LOAD_FAST                       1: container
                        110     LOAD_ATTR                       12: _defaults
                        112     LOAD_FAST                       0: self
                        114     STORE_ATTR                      12: _defaults
                        116     LOAD_FAST                       1: container
                        118     LOAD_ATTR                       13: _has_negative_number_optionals
                        120     LOAD_FAST                       0: self
                        122     STORE_ATTR                      13: _has_negative_number_optionals
                        124     LOAD_FAST                       1: container
                        126     LOAD_ATTR                       14: _mutually_exclusive_groups
                        128     LOAD_FAST                       0: self
                        130     STORE_ATTR                      14: _mutually_exclusive_groups
                        132     LOAD_CONST                      0: None
                        134     RETURN_VALUE                    
                '_ArgumentGroup.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: _add_action
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '_ArgumentGroup'
                        '_add_action'
                        '_group_actions'
                        'append'
                    [Var Names]
                        'self'
                        'action'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: _ArgumentGroup
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_METHOD                     2: _add_action
                        10      LOAD_FAST                       1: action
                        12      CALL_METHOD                     1
                        14      STORE_FAST                      1: action
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       3: _group_actions
                        20      LOAD_METHOD                     4: append
                        22      LOAD_FAST                       1: action
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_FAST                       1: action
                        30      RETURN_VALUE                    
                '_ArgumentGroup._add_action'
                [Code]
                    File Name: argparse.py
                    Object Name: _remove_action
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '_ArgumentGroup'
                        '_remove_action'
                        '_group_actions'
                        'remove'
                    [Var Names]
                        'self'
                        'action'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: _ArgumentGroup
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_METHOD                     2: _remove_action
                        10      LOAD_FAST                       1: action
                        12      CALL_METHOD                     1
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       3: _group_actions
                        20      LOAD_METHOD                     4: remove
                        22      LOAD_FAST                       1: action
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                '_ArgumentGroup._remove_action'
                (
                    None
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_ArgumentGroup'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      8: (None, None)
                10      LOAD_CLOSURE                    0: __class__
                12      BUILD_TUPLE                     1
                14      LOAD_CONST                      2: <CODE> __init__
                16      LOAD_CONST                      3: '_ArgumentGroup.__init__'
                18      MAKE_FUNCTION                   9
                20      STORE_NAME                      3: __init__
                22      LOAD_CLOSURE                    0: __class__
                24      BUILD_TUPLE                     1
                26      LOAD_CONST                      4: <CODE> _add_action
                28      LOAD_CONST                      5: '_ArgumentGroup._add_action'
                30      MAKE_FUNCTION                   8
                32      STORE_NAME                      4: _add_action
                34      LOAD_CLOSURE                    0: __class__
                36      BUILD_TUPLE                     1
                38      LOAD_CONST                      6: <CODE> _remove_action
                40      LOAD_CONST                      7: '_ArgumentGroup._remove_action'
                42      MAKE_FUNCTION                   8
                44      STORE_NAME                      5: _remove_action
                46      LOAD_CLOSURE                    0: __class__
                48      DUP_TOP                         
                50      STORE_NAME                      6: __classcell__
                52      RETURN_VALUE                    
        '_ArgumentGroup'
        [Code]
            File Name: argparse.py
            Object Name: _MutuallyExclusiveGroup
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '_add_action'
                '_remove_action'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_MutuallyExclusiveGroup'
                False
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '_MutuallyExclusiveGroup'
                        '__init__'
                        'required'
                        '_container'
                    [Var Names]
                        'self'
                        'container'
                        'required'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: _MutuallyExclusiveGroup
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_METHOD                     2: __init__
                        10      LOAD_FAST                       1: container
                        12      CALL_METHOD                     1
                        14      POP_TOP                         
                        16      LOAD_FAST                       2: required
                        18      LOAD_FAST                       0: self
                        20      STORE_ATTR                      3: required
                        22      LOAD_FAST                       1: container
                        24      LOAD_FAST                       0: self
                        26      STORE_ATTR                      4: _container
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                '_MutuallyExclusiveGroup.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: _add_action
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'required'
                        '_'
                        'ValueError'
                        '_container'
                        '_add_action'
                        '_group_actions'
                        'append'
                    [Var Names]
                        'self'
                        'action'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'mutually exclusive arguments must be optional'
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: required
                        4       POP_JUMP_IF_FALSE               11 (to 22)
                        6       LOAD_GLOBAL                     1: _
                        8       LOAD_CONST                      1: 'mutually exclusive arguments must be optional'
                        10      CALL_FUNCTION                   1
                        12      STORE_FAST                      2: msg
                        14      LOAD_GLOBAL                     2: ValueError
                        16      LOAD_FAST                       2: msg
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       3: _container
                        26      LOAD_METHOD                     4: _add_action
                        28      LOAD_FAST                       1: action
                        30      CALL_METHOD                     1
                        32      STORE_FAST                      1: action
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       5: _group_actions
                        38      LOAD_METHOD                     6: append
                        40      LOAD_FAST                       1: action
                        42      CALL_METHOD                     1
                        44      POP_TOP                         
                        46      LOAD_FAST                       1: action
                        48      RETURN_VALUE                    
                '_MutuallyExclusiveGroup._add_action'
                [Code]
                    File Name: argparse.py
                    Object Name: _remove_action
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_container'
                        '_remove_action'
                        '_group_actions'
                        'remove'
                    [Var Names]
                        'self'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _container
                        4       LOAD_METHOD                     1: _remove_action
                        6       LOAD_FAST                       1: action
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: _group_actions
                        16      LOAD_METHOD                     3: remove
                        18      LOAD_FAST                       1: action
                        20      CALL_METHOD                     1
                        22      POP_TOP                         
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                '_MutuallyExclusiveGroup._remove_action'
                (
                    False
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_MutuallyExclusiveGroup'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      8: (False,)
                10      LOAD_CLOSURE                    0: __class__
                12      BUILD_TUPLE                     1
                14      LOAD_CONST                      2: <CODE> __init__
                16      LOAD_CONST                      3: '_MutuallyExclusiveGroup.__init__'
                18      MAKE_FUNCTION                   9
                20      STORE_NAME                      3: __init__
                22      LOAD_CONST                      4: <CODE> _add_action
                24      LOAD_CONST                      5: '_MutuallyExclusiveGroup._add_action'
                26      MAKE_FUNCTION                   0
                28      STORE_NAME                      4: _add_action
                30      LOAD_CONST                      6: <CODE> _remove_action
                32      LOAD_CONST                      7: '_MutuallyExclusiveGroup._remove_action'
                34      MAKE_FUNCTION                   0
                36      STORE_NAME                      5: _remove_action
                38      LOAD_CLOSURE                    0: __class__
                40      DUP_TOP                         
                42      STORE_NAME                      6: __classcell__
                44      RETURN_VALUE                    
        '_MutuallyExclusiveGroup'
        [Code]
            File Name: argparse.py
            Object Name: ArgumentParser
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 13
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'HelpFormatter'
                '__init__'
                '_get_kwargs'
                'add_subparsers'
                '_add_action'
                '_get_optional_actions'
                '_get_positional_actions'
                'parse_args'
                'parse_known_args'
                '_parse_known_args'
                '_read_args_from_files'
                'convert_arg_line_to_args'
                '_match_argument'
                '_match_arguments_partial'
                '_parse_optional'
                '_get_option_tuples'
                '_get_nargs_pattern'
                'parse_intermixed_args'
                'parse_known_intermixed_args'
                '_get_values'
                '_get_value'
                '_check_value'
                'format_usage'
                'format_help'
                '_get_formatter'
                'print_usage'
                'print_help'
                '_print_message'
                'exit'
                'error'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'ArgumentParser'
                'Object for parsing command line strings into Python objects.\n\n    Keyword Arguments:\n        - prog -- The name of the program (default:\n            ``os.path.basename(sys.argv[0])``)\n        - usage -- A usage message (default: auto-generated from arguments)\n        - description -- A description of what the program does\n        - epilog -- Text following the argument descriptions\n        - parents -- Parsers whose arguments should be copied into this one\n        - formatter_class -- HelpFormatter class for printing help messages\n        - prefix_chars -- Characters that prefix optional arguments\n        - fromfile_prefix_chars -- Characters that prefix files containing\n            additional arguments\n        - argument_default -- The default value for all arguments\n        - conflict_handler -- String indicating how to handle conflicts\n        - add_help -- Add a -h/-help option\n        - allow_abbrev -- Allow long options to be abbreviated unambiguously\n        - exit_on_error -- Determines whether or not ArgumentParser exits with\n            error info when an error occurs\n    '
                None
                '-'
                'error'
                True
                [Code]
                    File Name: argparse.py
                    Object Name: __init__
                    Arg Count: 14
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 20
                    Stack Size: 9
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        'ArgumentParser'
                        '__init__'
                        '_os'
                        'path'
                        'basename'
                        '_sys'
                        'argv'
                        'prog'
                        'usage'
                        'epilog'
                        'formatter_class'
                        'fromfile_prefix_chars'
                        'add_help'
                        'allow_abbrev'
                        'exit_on_error'
                        'add_argument_group'
                        '_'
                        '_positionals'
                        '_optionals'
                        '_subparsers'
                        'register'
                        'add_argument'
                        'SUPPRESS'
                        '_add_container_actions'
                        '_defaults'
                        'AttributeError'
                        'update'
                    [Var Names]
                        'self'
                        'prog'
                        'usage'
                        'description'
                        'epilog'
                        'parents'
                        'formatter_class'
                        'prefix_chars'
                        'fromfile_prefix_chars'
                        'argument_default'
                        'conflict_handler'
                        'add_help'
                        'allow_abbrev'
                        'exit_on_error'
                        'superinit'
                        'add_group'
                        'identity'
                        'default_prefix'
                        'parent'
                        'defaults'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            'description'
                            'prefix_chars'
                            'argument_default'
                            'conflict_handler'
                        )
                        0
                        'positional arguments'
                        'options'
                        [Code]
                            File Name: argparse.py
                            Object Name: identity
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 1
                            Stack Size: 1
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                            [Var Names]
                                'string'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_FAST                       0: string
                                2       RETURN_VALUE                    
                        'ArgumentParser.__init__.<locals>.identity'
                        'type'
                        '-'
                        'h'
                        2
                        'help'
                        'show this help message and exit'
                        (
                            'action'
                            'default'
                            'help'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       LOAD_GLOBAL                     1: ArgumentParser
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   2
                        8       LOAD_ATTR                       2: __init__
                        10      STORE_FAST                      14: superinit
                        12      LOAD_FAST                       14: superinit
                        14      LOAD_FAST                       3: description
                        16      LOAD_FAST                       7: prefix_chars
                        18      LOAD_FAST                       9: argument_default
                        20      LOAD_FAST                       10: conflict_handler
                        22      LOAD_CONST                      1: ('description', 'prefix_chars', 'argument_default', 'conflict_handler')
                        24      CALL_FUNCTION_KW                4
                        26      POP_TOP                         
                        28      LOAD_FAST                       1: prog
                        30      LOAD_CONST                      0: None
                        32      IS_OP                           0 (is)
                        34      POP_JUMP_IF_FALSE               27 (to 54)
                        36      LOAD_GLOBAL                     3: _os
                        38      LOAD_ATTR                       4: path
                        40      LOAD_METHOD                     5: basename
                        42      LOAD_GLOBAL                     6: _sys
                        44      LOAD_ATTR                       7: argv
                        46      LOAD_CONST                      2: 0
                        48      BINARY_SUBSCR                   
                        50      CALL_METHOD                     1
                        52      STORE_FAST                      1: prog
                        54      LOAD_FAST                       1: prog
                        56      LOAD_FAST                       0: self
                        58      STORE_ATTR                      8: prog
                        60      LOAD_FAST                       2: usage
                        62      LOAD_FAST                       0: self
                        64      STORE_ATTR                      9: usage
                        66      LOAD_FAST                       4: epilog
                        68      LOAD_FAST                       0: self
                        70      STORE_ATTR                      10: epilog
                        72      LOAD_FAST                       6: formatter_class
                        74      LOAD_FAST                       0: self
                        76      STORE_ATTR                      11: formatter_class
                        78      LOAD_FAST                       8: fromfile_prefix_chars
                        80      LOAD_FAST                       0: self
                        82      STORE_ATTR                      12: fromfile_prefix_chars
                        84      LOAD_FAST                       11: add_help
                        86      LOAD_FAST                       0: self
                        88      STORE_ATTR                      13: add_help
                        90      LOAD_FAST                       12: allow_abbrev
                        92      LOAD_FAST                       0: self
                        94      STORE_ATTR                      14: allow_abbrev
                        96      LOAD_FAST                       13: exit_on_error
                        98      LOAD_FAST                       0: self
                        100     STORE_ATTR                      15: exit_on_error
                        102     LOAD_FAST                       0: self
                        104     LOAD_ATTR                       16: add_argument_group
                        106     STORE_FAST                      15: add_group
                        108     LOAD_FAST                       15: add_group
                        110     LOAD_GLOBAL                     17: _
                        112     LOAD_CONST                      3: 'positional arguments'
                        114     CALL_FUNCTION                   1
                        116     CALL_FUNCTION                   1
                        118     LOAD_FAST                       0: self
                        120     STORE_ATTR                      18: _positionals
                        122     LOAD_FAST                       15: add_group
                        124     LOAD_GLOBAL                     17: _
                        126     LOAD_CONST                      4: 'options'
                        128     CALL_FUNCTION                   1
                        130     CALL_FUNCTION                   1
                        132     LOAD_FAST                       0: self
                        134     STORE_ATTR                      19: _optionals
                        136     LOAD_CONST                      0: None
                        138     LOAD_FAST                       0: self
                        140     STORE_ATTR                      20: _subparsers
                        142     LOAD_CONST                      5: <CODE> identity
                        144     LOAD_CONST                      6: 'ArgumentParser.__init__.<locals>.identity'
                        146     MAKE_FUNCTION                   0
                        148     STORE_FAST                      16: identity
                        150     LOAD_FAST                       0: self
                        152     LOAD_METHOD                     21: register
                        154     LOAD_CONST                      7: 'type'
                        156     LOAD_CONST                      0: None
                        158     LOAD_FAST                       16: identity
                        160     CALL_METHOD                     3
                        162     POP_TOP                         
                        164     LOAD_CONST                      8: '-'
                        166     LOAD_FAST                       7: prefix_chars
                        168     CONTAINS_OP                     0 (in)
                        170     POP_JUMP_IF_FALSE               88 (to 176)
                        172     LOAD_CONST                      8: '-'
                        174     JUMP_FORWARD                    3 (to 182)
                        176     LOAD_FAST                       7: prefix_chars
                        178     LOAD_CONST                      2: 0
                        180     BINARY_SUBSCR                   
                        182     STORE_FAST                      17: default_prefix
                        184     LOAD_FAST                       0: self
                        186     LOAD_ATTR                       13: add_help
                        188     POP_JUMP_IF_FALSE               113 (to 226)
                        190     LOAD_FAST                       0: self
                        192     LOAD_ATTR                       22: add_argument
                        194     LOAD_FAST                       17: default_prefix
                        196     LOAD_CONST                      9: 'h'
                        198     BINARY_ADD                      
                        200     LOAD_FAST                       17: default_prefix
                        202     LOAD_CONST                      10: 2
                        204     BINARY_MULTIPLY                 
                        206     LOAD_CONST                      11: 'help'
                        208     BINARY_ADD                      
                        210     LOAD_CONST                      11: 'help'
                        212     LOAD_GLOBAL                     23: SUPPRESS
                        214     LOAD_GLOBAL                     17: _
                        216     LOAD_CONST                      12: 'show this help message and exit'
                        218     CALL_FUNCTION                   1
                        220     LOAD_CONST                      13: ('action', 'default', 'help')
                        222     CALL_FUNCTION_KW                5
                        224     POP_TOP                         
                        226     LOAD_FAST                       5: parents
                        228     GET_ITER                        
                        230     FOR_ITER                        28 (to 288)
                        232     STORE_FAST                      18: parent
                        234     LOAD_FAST                       0: self
                        236     LOAD_METHOD                     24: _add_container_actions
                        238     LOAD_FAST                       18: parent
                        240     CALL_METHOD                     1
                        242     POP_TOP                         
                        244     SETUP_FINALLY                   5 (to 256)
                        246     LOAD_FAST                       18: parent
                        248     LOAD_ATTR                       25: _defaults
                        250     STORE_FAST                      19: defaults
                        252     POP_BLOCK                       
                        254     JUMP_FORWARD                    9 (to 274)
                        256     DUP_TOP                         
                        258     LOAD_GLOBAL                     26: AttributeError
                        260     JUMP_IF_NOT_EXC_MATCH           136 (to 272)
                        262     POP_TOP                         
                        264     POP_TOP                         
                        266     POP_TOP                         
                        268     POP_EXCEPT                      
                        270     JUMP_ABSOLUTE                   115 (to 230)
                        272     RERAISE                         0
                        274     LOAD_FAST                       0: self
                        276     LOAD_ATTR                       25: _defaults
                        278     LOAD_METHOD                     27: update
                        280     LOAD_FAST                       19: defaults
                        282     CALL_METHOD                     1
                        284     POP_TOP                         
                        286     JUMP_ABSOLUTE                   115 (to 230)
                        288     LOAD_CONST                      0: None
                        290     RETURN_VALUE                    
                'ArgumentParser.__init__'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_kwargs
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                    [Var Names]
                        'self'
                        'names'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        (
                            'prog'
                            'usage'
                            'description'
                            'formatter_class'
                            'conflict_handler'
                            'add_help'
                        )
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 6
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'getattr'
                            [Var Names]
                                '.0'
                                'name'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       STORE_FAST                      1: name
                                8       LOAD_FAST                       1: name
                                10      LOAD_GLOBAL                     0: getattr
                                12      LOAD_DEREF                      0: self
                                14      LOAD_FAST                       1: name
                                16      CALL_FUNCTION                   2
                                18      BUILD_TUPLE                     2
                                20      LIST_APPEND                     2
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      RETURN_VALUE                    
                        'ArgumentParser._get_kwargs.<locals>.<listcomp>'
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_CONST                      1: ('prog', 'usage', 'description', 'formatter_class', 'conflict_handler', 'add_help')
                        4       LIST_EXTEND                     1
                        6       STORE_FAST                      1: names
                        8       LOAD_CLOSURE                    0: self
                        10      BUILD_TUPLE                     1
                        12      LOAD_CONST                      2: <CODE> <listcomp>
                        14      LOAD_CONST                      3: 'ArgumentParser._get_kwargs.<locals>.<listcomp>'
                        16      MAKE_FUNCTION                   8
                        18      LOAD_FAST                       1: names
                        20      GET_ITER                        
                        22      CALL_FUNCTION                   1
                        24      RETURN_VALUE                    
                'ArgumentParser._get_kwargs'
                [Code]
                    File Name: argparse.py
                    Object Name: add_subparsers
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 6
                    Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        '_subparsers'
                        'error'
                        '_'
                        'setdefault'
                        'type'
                        'pop'
                        'add_argument_group'
                        '_positionals'
                        'get'
                        '_get_formatter'
                        '_get_positional_actions'
                        '_mutually_exclusive_groups'
                        'add_usage'
                        'usage'
                        'format_help'
                        'strip'
                        '_pop_action_class'
                        '_add_action'
                    [Var Names]
                        'self'
                        'kwargs'
                        'title'
                        'description'
                        'formatter'
                        'positionals'
                        'groups'
                        'parsers_class'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'cannot have multiple subparser arguments'
                        'parser_class'
                        'title'
                        'description'
                        'subcommands'
                        'prog'
                        ''
                        'parsers'
                        'option_strings'
                        (
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _subparsers
                        4       LOAD_CONST                      0: None
                        6       IS_OP                           1 (is not)
                        8       POP_JUMP_IF_FALSE               12 (to 24)
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: error
                        14      LOAD_GLOBAL                     2: _
                        16      LOAD_CONST                      1: 'cannot have multiple subparser arguments'
                        18      CALL_FUNCTION                   1
                        20      CALL_METHOD                     1
                        22      POP_TOP                         
                        24      LOAD_FAST                       1: kwargs
                        26      LOAD_METHOD                     3: setdefault
                        28      LOAD_CONST                      2: 'parser_class'
                        30      LOAD_GLOBAL                     4: type
                        32      LOAD_FAST                       0: self
                        34      CALL_FUNCTION                   1
                        36      CALL_METHOD                     2
                        38      POP_TOP                         
                        40      LOAD_CONST                      3: 'title'
                        42      LOAD_FAST                       1: kwargs
                        44      CONTAINS_OP                     0 (in)
                        46      POP_JUMP_IF_TRUE                28 (to 56)
                        48      LOAD_CONST                      4: 'description'
                        50      LOAD_FAST                       1: kwargs
                        52      CONTAINS_OP                     0 (in)
                        54      POP_JUMP_IF_FALSE               52 (to 104)
                        56      LOAD_GLOBAL                     2: _
                        58      LOAD_FAST                       1: kwargs
                        60      LOAD_METHOD                     5: pop
                        62      LOAD_CONST                      3: 'title'
                        64      LOAD_CONST                      5: 'subcommands'
                        66      CALL_METHOD                     2
                        68      CALL_FUNCTION                   1
                        70      STORE_FAST                      2: title
                        72      LOAD_GLOBAL                     2: _
                        74      LOAD_FAST                       1: kwargs
                        76      LOAD_METHOD                     5: pop
                        78      LOAD_CONST                      4: 'description'
                        80      LOAD_CONST                      0: None
                        82      CALL_METHOD                     2
                        84      CALL_FUNCTION                   1
                        86      STORE_FAST                      3: description
                        88      LOAD_FAST                       0: self
                        90      LOAD_METHOD                     6: add_argument_group
                        92      LOAD_FAST                       2: title
                        94      LOAD_FAST                       3: description
                        96      CALL_METHOD                     2
                        98      LOAD_FAST                       0: self
                        100     STORE_ATTR                      0: _subparsers
                        102     JUMP_FORWARD                    4 (to 112)
                        104     LOAD_FAST                       0: self
                        106     LOAD_ATTR                       7: _positionals
                        108     LOAD_FAST                       0: self
                        110     STORE_ATTR                      0: _subparsers
                        112     LOAD_FAST                       1: kwargs
                        114     LOAD_METHOD                     8: get
                        116     LOAD_CONST                      6: 'prog'
                        118     CALL_METHOD                     1
                        120     LOAD_CONST                      0: None
                        122     IS_OP                           0 (is)
                        124     POP_JUMP_IF_FALSE               91 (to 182)
                        126     LOAD_FAST                       0: self
                        128     LOAD_METHOD                     9: _get_formatter
                        130     CALL_METHOD                     0
                        132     STORE_FAST                      4: formatter
                        134     LOAD_FAST                       0: self
                        136     LOAD_METHOD                     10: _get_positional_actions
                        138     CALL_METHOD                     0
                        140     STORE_FAST                      5: positionals
                        142     LOAD_FAST                       0: self
                        144     LOAD_ATTR                       11: _mutually_exclusive_groups
                        146     STORE_FAST                      6: groups
                        148     LOAD_FAST                       4: formatter
                        150     LOAD_METHOD                     12: add_usage
                        152     LOAD_FAST                       0: self
                        154     LOAD_ATTR                       13: usage
                        156     LOAD_FAST                       5: positionals
                        158     LOAD_FAST                       6: groups
                        160     LOAD_CONST                      7: ''
                        162     CALL_METHOD                     4
                        164     POP_TOP                         
                        166     LOAD_FAST                       4: formatter
                        168     LOAD_METHOD                     14: format_help
                        170     CALL_METHOD                     0
                        172     LOAD_METHOD                     15: strip
                        174     CALL_METHOD                     0
                        176     LOAD_FAST                       1: kwargs
                        178     LOAD_CONST                      6: 'prog'
                        180     STORE_SUBSCR                    
                        182     LOAD_FAST                       0: self
                        184     LOAD_METHOD                     16: _pop_action_class
                        186     LOAD_FAST                       1: kwargs
                        188     LOAD_CONST                      8: 'parsers'
                        190     CALL_METHOD                     2
                        192     STORE_FAST                      7: parsers_class
                        194     LOAD_FAST                       7: parsers_class
                        196     LOAD_CONST                      10: ()
                        198     LOAD_CONST                      9: 'option_strings'
                        200     BUILD_LIST                      0
                        202     BUILD_MAP                       1
                        204     LOAD_FAST                       1: kwargs
                        206     DICT_MERGE                      1
                        208     CALL_FUNCTION_EX                1
                        210     STORE_FAST                      8: action
                        212     LOAD_FAST                       0: self
                        214     LOAD_ATTR                       0: _subparsers
                        216     LOAD_METHOD                     17: _add_action
                        218     LOAD_FAST                       8: action
                        220     CALL_METHOD                     1
                        222     POP_TOP                         
                        224     LOAD_FAST                       8: action
                        226     RETURN_VALUE                    
                'ArgumentParser.add_subparsers'
                [Code]
                    File Name: argparse.py
                    Object Name: _add_action
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'option_strings'
                        '_optionals'
                        '_add_action'
                        '_positionals'
                    [Var Names]
                        'self'
                        'action'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: option_strings
                        4       POP_JUMP_IF_FALSE               11 (to 22)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _optionals
                        10      LOAD_METHOD                     2: _add_action
                        12      LOAD_FAST                       1: action
                        14      CALL_METHOD                     1
                        16      POP_TOP                         
                        18      LOAD_FAST                       1: action
                        20      RETURN_VALUE                    
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       3: _positionals
                        26      LOAD_METHOD                     2: _add_action
                        28      LOAD_FAST                       1: action
                        30      CALL_METHOD                     1
                        32      POP_TOP                         
                        34      LOAD_FAST                       1: action
                        36      RETURN_VALUE                    
                'ArgumentParser._add_action'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_optional_actions
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_actions'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'option_strings'
                            [Var Names]
                                '.0'
                                'action'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: action
                                8       LOAD_FAST                       1: action
                                10      LOAD_ATTR                       0: option_strings
                                12      POP_JUMP_IF_FALSE               2 (to 4)
                                14      LOAD_FAST                       1: action
                                16      LIST_APPEND                     2
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      RETURN_VALUE                    
                        'ArgumentParser._get_optional_actions.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_CONST                      1: <CODE> <listcomp>
                        2       LOAD_CONST                      2: 'ArgumentParser._get_optional_actions.<locals>.<listcomp>'
                        4       MAKE_FUNCTION                   0
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       0: _actions
                        10      GET_ITER                        
                        12      CALL_FUNCTION                   1
                        14      RETURN_VALUE                    
                'ArgumentParser._get_optional_actions'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_positional_actions
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_actions'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'option_strings'
                            [Var Names]
                                '.0'
                                'action'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: action
                                8       LOAD_FAST                       1: action
                                10      LOAD_ATTR                       0: option_strings
                                12      POP_JUMP_IF_TRUE                2 (to 4)
                                14      LOAD_FAST                       1: action
                                16      LIST_APPEND                     2
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      RETURN_VALUE                    
                        'ArgumentParser._get_positional_actions.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_CONST                      1: <CODE> <listcomp>
                        2       LOAD_CONST                      2: 'ArgumentParser._get_positional_actions.<locals>.<listcomp>'
                        4       MAKE_FUNCTION                   0
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       0: _actions
                        10      GET_ITER                        
                        12      CALL_FUNCTION                   1
                        14      RETURN_VALUE                    
                'ArgumentParser._get_positional_actions'
                [Code]
                    File Name: argparse.py
                    Object Name: parse_args
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'parse_known_args'
                        '_'
                        'error'
                        'join'
                    [Var Names]
                        'self'
                        'args'
                        'namespace'
                        'argv'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'unrecognized arguments: %s'
                        ' '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: parse_known_args
                        4       LOAD_FAST                       1: args
                        6       LOAD_FAST                       2: namespace
                        8       CALL_METHOD                     2
                        10      UNPACK_SEQUENCE                 2
                        12      STORE_FAST                      1: args
                        14      STORE_FAST                      3: argv
                        16      LOAD_FAST                       3: argv
                        18      POP_JUMP_IF_FALSE               24 (to 48)
                        20      LOAD_GLOBAL                     1: _
                        22      LOAD_CONST                      1: 'unrecognized arguments: %s'
                        24      CALL_FUNCTION                   1
                        26      STORE_FAST                      4: msg
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     2: error
                        32      LOAD_FAST                       4: msg
                        34      LOAD_CONST                      2: ' '
                        36      LOAD_METHOD                     3: join
                        38      LOAD_FAST                       3: argv
                        40      CALL_METHOD                     1
                        42      BINARY_MODULO                   
                        44      CALL_METHOD                     1
                        46      POP_TOP                         
                        48      LOAD_FAST                       1: args
                        50      RETURN_VALUE                    
                'ArgumentParser.parse_args'
                [Code]
                    File Name: argparse.py
                    Object Name: parse_known_args
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sys'
                        'argv'
                        'list'
                        'Namespace'
                        '_actions'
                        'dest'
                        'SUPPRESS'
                        'hasattr'
                        'default'
                        'setattr'
                        '_defaults'
                        'exit_on_error'
                        '_parse_known_args'
                        'ArgumentError'
                        'exc_info'
                        'error'
                        'str'
                        '_UNRECOGNIZED_ARGS_ATTR'
                        'extend'
                        'getattr'
                        'delattr'
                    [Var Names]
                        'self'
                        'args'
                        'namespace'
                        'action'
                        'dest'
                        'err'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                    [Disassembly]
                        0       LOAD_FAST                       1: args
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               12 (to 24)
                        8       LOAD_GLOBAL                     0: _sys
                        10      LOAD_ATTR                       1: argv
                        12      LOAD_CONST                      1: 1
                        14      LOAD_CONST                      0: None
                        16      BUILD_SLICE                     2
                        18      BINARY_SUBSCR                   
                        20      STORE_FAST                      1: args
                        22      JUMP_FORWARD                    4 (to 32)
                        24      LOAD_GLOBAL                     2: list
                        26      LOAD_FAST                       1: args
                        28      CALL_FUNCTION                   1
                        30      STORE_FAST                      1: args
                        32      LOAD_FAST                       2: namespace
                        34      LOAD_CONST                      0: None
                        36      IS_OP                           0 (is)
                        38      POP_JUMP_IF_FALSE               23 (to 46)
                        40      LOAD_GLOBAL                     3: Namespace
                        42      CALL_FUNCTION                   0
                        44      STORE_FAST                      2: namespace
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       4: _actions
                        50      GET_ITER                        
                        52      FOR_ITER                        26 (to 106)
                        54      STORE_FAST                      3: action
                        56      LOAD_FAST                       3: action
                        58      LOAD_ATTR                       5: dest
                        60      LOAD_GLOBAL                     6: SUPPRESS
                        62      IS_OP                           1 (is not)
                        64      POP_JUMP_IF_FALSE               52 (to 104)
                        66      LOAD_GLOBAL                     7: hasattr
                        68      LOAD_FAST                       2: namespace
                        70      LOAD_FAST                       3: action
                        72      LOAD_ATTR                       5: dest
                        74      CALL_FUNCTION                   2
                        76      POP_JUMP_IF_TRUE                52 (to 104)
                        78      LOAD_FAST                       3: action
                        80      LOAD_ATTR                       8: default
                        82      LOAD_GLOBAL                     6: SUPPRESS
                        84      IS_OP                           1 (is not)
                        86      POP_JUMP_IF_FALSE               52 (to 104)
                        88      LOAD_GLOBAL                     9: setattr
                        90      LOAD_FAST                       2: namespace
                        92      LOAD_FAST                       3: action
                        94      LOAD_ATTR                       5: dest
                        96      LOAD_FAST                       3: action
                        98      LOAD_ATTR                       8: default
                        100     CALL_FUNCTION                   3
                        102     POP_TOP                         
                        104     JUMP_ABSOLUTE                   26 (to 52)
                        106     LOAD_FAST                       0: self
                        108     LOAD_ATTR                       10: _defaults
                        110     GET_ITER                        
                        112     FOR_ITER                        16 (to 146)
                        114     STORE_FAST                      4: dest
                        116     LOAD_GLOBAL                     7: hasattr
                        118     LOAD_FAST                       2: namespace
                        120     LOAD_FAST                       4: dest
                        122     CALL_FUNCTION                   2
                        124     POP_JUMP_IF_TRUE                72 (to 144)
                        126     LOAD_GLOBAL                     9: setattr
                        128     LOAD_FAST                       2: namespace
                        130     LOAD_FAST                       4: dest
                        132     LOAD_FAST                       0: self
                        134     LOAD_ATTR                       10: _defaults
                        136     LOAD_FAST                       4: dest
                        138     BINARY_SUBSCR                   
                        140     CALL_FUNCTION                   3
                        142     POP_TOP                         
                        144     JUMP_ABSOLUTE                   56 (to 112)
                        146     LOAD_FAST                       0: self
                        148     LOAD_ATTR                       11: exit_on_error
                        150     POP_JUMP_IF_FALSE               109 (to 218)
                        152     SETUP_FINALLY                   10 (to 174)
                        154     LOAD_FAST                       0: self
                        156     LOAD_METHOD                     12: _parse_known_args
                        158     LOAD_FAST                       1: args
                        160     LOAD_FAST                       2: namespace
                        162     CALL_METHOD                     2
                        164     UNPACK_SEQUENCE                 2
                        166     STORE_FAST                      2: namespace
                        168     STORE_FAST                      1: args
                        170     POP_BLOCK                       
                        172     JUMP_FORWARD                    30 (to 234)
                        174     DUP_TOP                         
                        176     LOAD_GLOBAL                     13: ArgumentError
                        178     JUMP_IF_NOT_EXC_MATCH           108 (to 216)
                        180     POP_TOP                         
                        182     POP_TOP                         
                        184     POP_TOP                         
                        186     LOAD_GLOBAL                     0: _sys
                        188     LOAD_METHOD                     14: exc_info
                        190     CALL_METHOD                     0
                        192     LOAD_CONST                      1: 1
                        194     BINARY_SUBSCR                   
                        196     STORE_FAST                      5: err
                        198     LOAD_FAST                       0: self
                        200     LOAD_METHOD                     15: error
                        202     LOAD_GLOBAL                     16: str
                        204     LOAD_FAST                       5: err
                        206     CALL_FUNCTION                   1
                        208     CALL_METHOD                     1
                        210     POP_TOP                         
                        212     POP_EXCEPT                      
                        214     JUMP_FORWARD                    9 (to 234)
                        216     RERAISE                         0
                        218     LOAD_FAST                       0: self
                        220     LOAD_METHOD                     12: _parse_known_args
                        222     LOAD_FAST                       1: args
                        224     LOAD_FAST                       2: namespace
                        226     CALL_METHOD                     2
                        228     UNPACK_SEQUENCE                 2
                        230     STORE_FAST                      2: namespace
                        232     STORE_FAST                      1: args
                        234     LOAD_GLOBAL                     7: hasattr
                        236     LOAD_FAST                       2: namespace
                        238     LOAD_GLOBAL                     17: _UNRECOGNIZED_ARGS_ATTR
                        240     CALL_FUNCTION                   2
                        242     POP_JUMP_IF_FALSE               135 (to 270)
                        244     LOAD_FAST                       1: args
                        246     LOAD_METHOD                     18: extend
                        248     LOAD_GLOBAL                     19: getattr
                        250     LOAD_FAST                       2: namespace
                        252     LOAD_GLOBAL                     17: _UNRECOGNIZED_ARGS_ATTR
                        254     CALL_FUNCTION                   2
                        256     CALL_METHOD                     1
                        258     POP_TOP                         
                        260     LOAD_GLOBAL                     20: delattr
                        262     LOAD_FAST                       2: namespace
                        264     LOAD_GLOBAL                     17: _UNRECOGNIZED_ARGS_ATTR
                        266     CALL_FUNCTION                   2
                        268     POP_TOP                         
                        270     LOAD_FAST                       2: namespace
                        272     LOAD_FAST                       1: args
                        274     BUILD_TUPLE                     2
                        276     RETURN_VALUE                    
                'ArgumentParser.parse_known_args'
                [Code]
                    File Name: argparse.py
                    Object Name: _parse_known_args
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 25
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'fromfile_prefix_chars'
                        '_read_args_from_files'
                        '_mutually_exclusive_groups'
                        '_group_actions'
                        'enumerate'
                        'setdefault'
                        'extend'
                        'iter'
                        'append'
                        '_parse_optional'
                        'join'
                        'set'
                        '_get_positional_actions'
                        'max'
                        'min'
                        '_actions'
                        'required'
                        '_get_action_name'
                        'default'
                        'isinstance'
                        'str'
                        'hasattr'
                        'dest'
                        'getattr'
                        'setattr'
                        '_get_value'
                        'error'
                        '_'
                    [Var Names]
                        'self'
                        'arg_strings'
                        'namespace'
                        'mutex_group'
                        'group_actions'
                        'i'
                        'mutex_action'
                        'conflicts'
                        'arg_string_pattern_parts'
                        'arg_strings_iter'
                        'arg_string'
                        'option_tuple'
                        'pattern'
                        'consume_optional'
                        'consume_positionals'
                        'max_option_string_index'
                        'next_option_string_index'
                        'positionals_end_index'
                        'strings'
                        'stop_index'
                        'required_actions'
                        'action'
                        'group'
                        'names'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                        'action_conflicts'
                        'arg_strings'
                        'arg_strings_pattern'
                        'extras'
                        'namespace'
                        'option_string_indices'
                        'positionals'
                        'seen_actions'
                        'seen_non_default_actions'
                        'self'
                        'start_index'
                        'take_action'
                    [Constants]
                        None
                        1
                        '--'
                        '-'
                        'A'
                        'O'
                        ''
                        [Code]
                            File Name: argparse.py
                            Object Name: take_action
                            Arg Count: 3
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 7
                            Stack Size: 5
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'add'
                                '_get_values'
                                'default'
                                'get'
                                '_'
                                '_get_action_name'
                                'ArgumentError'
                                'SUPPRESS'
                            [Var Names]
                                'action'
                                'argument_strings'
                                'option_string'
                                'argument_values'
                                'conflict_action'
                                'msg'
                                'action_name'
                            [Free Vars]
                                'action_conflicts'
                                'namespace'
                                'seen_actions'
                                'seen_non_default_actions'
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                'not allowed with argument %s'
                            [Disassembly]
                                0       LOAD_DEREF                      2: seen_actions
                                2       LOAD_METHOD                     0: add
                                4       LOAD_FAST                       0: action
                                6       CALL_METHOD                     1
                                8       POP_TOP                         
                                10      LOAD_DEREF                      4: self
                                12      LOAD_METHOD                     1: _get_values
                                14      LOAD_FAST                       0: action
                                16      LOAD_FAST                       1: argument_strings
                                18      CALL_METHOD                     2
                                20      STORE_FAST                      3: argument_values
                                22      LOAD_FAST                       3: argument_values
                                24      LOAD_FAST                       0: action
                                26      LOAD_ATTR                       2: default
                                28      IS_OP                           1 (is not)
                                30      POP_JUMP_IF_FALSE               49 (to 98)
                                32      LOAD_DEREF                      3: seen_non_default_actions
                                34      LOAD_METHOD                     0: add
                                36      LOAD_FAST                       0: action
                                38      CALL_METHOD                     1
                                40      POP_TOP                         
                                42      LOAD_DEREF                      0: action_conflicts
                                44      LOAD_METHOD                     3: get
                                46      LOAD_FAST                       0: action
                                48      BUILD_LIST                      0
                                50      CALL_METHOD                     2
                                52      GET_ITER                        
                                54      FOR_ITER                        21 (to 98)
                                56      STORE_FAST                      4: conflict_action
                                58      LOAD_FAST                       4: conflict_action
                                60      LOAD_DEREF                      3: seen_non_default_actions
                                62      CONTAINS_OP                     0 (in)
                                64      POP_JUMP_IF_FALSE               48 (to 96)
                                66      LOAD_GLOBAL                     4: _
                                68      LOAD_CONST                      1: 'not allowed with argument %s'
                                70      CALL_FUNCTION                   1
                                72      STORE_FAST                      5: msg
                                74      LOAD_GLOBAL                     5: _get_action_name
                                76      LOAD_FAST                       4: conflict_action
                                78      CALL_FUNCTION                   1
                                80      STORE_FAST                      6: action_name
                                82      LOAD_GLOBAL                     6: ArgumentError
                                84      LOAD_FAST                       0: action
                                86      LOAD_FAST                       5: msg
                                88      LOAD_FAST                       6: action_name
                                90      BINARY_MODULO                   
                                92      CALL_FUNCTION                   2
                                94      RAISE_VARARGS                   1
                                96      JUMP_ABSOLUTE                   27 (to 54)
                                98      LOAD_FAST                       3: argument_values
                                100     LOAD_GLOBAL                     7: SUPPRESS
                                102     IS_OP                           1 (is not)
                                104     POP_JUMP_IF_FALSE               62 (to 124)
                                106     LOAD_FAST                       0: action
                                108     LOAD_DEREF                      4: self
                                110     LOAD_DEREF                      1: namespace
                                112     LOAD_FAST                       3: argument_values
                                114     LOAD_FAST                       2: option_string
                                116     CALL_FUNCTION                   4
                                118     POP_TOP                         
                                120     LOAD_CONST                      0: None
                                122     RETURN_VALUE                    
                                124     LOAD_CONST                      0: None
                                126     RETURN_VALUE                    
                        'ArgumentParser._parse_known_args.<locals>.take_action'
                        [Code]
                            File Name: argparse.py
                            Object Name: consume_optional
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 17
                            Stack Size: 5
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '_match_argument'
                                'append'
                                'prefix_chars'
                                '_option_string_actions'
                                '_'
                                'ArgumentError'
                            [Var Names]
                                'start_index'
                                'option_tuple'
                                'action'
                                'option_string'
                                'explicit_arg'
                                'match_argument'
                                'action_tuples'
                                'arg_count'
                                'chars'
                                'char'
                                'new_explicit_arg'
                                'optionals_map'
                                'msg'
                                'stop'
                                'args'
                                'start'
                                'selected_patterns'
                            [Free Vars]
                                'arg_strings'
                                'arg_strings_pattern'
                                'extras'
                                'option_string_indices'
                                'self'
                                'take_action'
                            [Cell Vars]
                            [Constants]
                                None
                                True
                                1
                                'A'
                                0
                                ''
                                'ignored explicit argument %r'
                            [Disassembly]
                                0       LOAD_DEREF                      3: option_string_indices
                                2       LOAD_FAST                       0: start_index
                                4       BINARY_SUBSCR                   
                                6       STORE_FAST                      1: option_tuple
                                8       LOAD_FAST                       1: option_tuple
                                10      UNPACK_SEQUENCE                 3
                                12      STORE_FAST                      2: action
                                14      STORE_FAST                      3: option_string
                                16      STORE_FAST                      4: explicit_arg
                                18      LOAD_DEREF                      4: self
                                20      LOAD_ATTR                       0: _match_argument
                                22      STORE_FAST                      5: match_argument
                                24      BUILD_LIST                      0
                                26      STORE_FAST                      6: action_tuples
                                28      NOP                             
                                30      LOAD_FAST                       2: action
                                32      LOAD_CONST                      0: None
                                34      IS_OP                           0 (is)
                                36      POP_JUMP_IF_FALSE               30 (to 60)
                                38      LOAD_DEREF                      2: extras
                                40      LOAD_METHOD                     1: append
                                42      LOAD_DEREF                      0: arg_strings
                                44      LOAD_FAST                       0: start_index
                                46      BINARY_SUBSCR                   
                                48      CALL_METHOD                     1
                                50      POP_TOP                         
                                52      LOAD_FAST                       0: start_index
                                54      LOAD_CONST                      2: 1
                                56      BINARY_ADD                      
                                58      RETURN_VALUE                    
                                60      LOAD_FAST                       4: explicit_arg
                                62      LOAD_CONST                      0: None
                                64      IS_OP                           1 (is not)
                                66      POP_JUMP_IF_FALSE               138 (to 276)
                                68      LOAD_FAST                       5: match_argument
                                70      LOAD_FAST                       2: action
                                72      LOAD_CONST                      3: 'A'
                                74      CALL_FUNCTION                   2
                                76      STORE_FAST                      7: arg_count
                                78      LOAD_DEREF                      4: self
                                80      LOAD_ATTR                       2: prefix_chars
                                82      STORE_FAST                      8: chars
                                84      LOAD_FAST                       7: arg_count
                                86      LOAD_CONST                      4: 0
                                88      COMPARE_OP                      2 (==)
                                90      POP_JUMP_IF_FALSE               107 (to 214)
                                92      LOAD_FAST                       3: option_string
                                94      LOAD_CONST                      2: 1
                                96      BINARY_SUBSCR                   
                                98      LOAD_FAST                       8: chars
                                100     CONTAINS_OP                     1 (not in)
                                102     POP_JUMP_IF_FALSE               107 (to 214)
                                104     LOAD_FAST                       4: explicit_arg
                                106     LOAD_CONST                      5: ''
                                108     COMPARE_OP                      3 (!=)
                                110     POP_JUMP_IF_FALSE               107 (to 214)
                                112     LOAD_FAST                       6: action_tuples
                                114     LOAD_METHOD                     1: append
                                116     LOAD_FAST                       2: action
                                118     BUILD_LIST                      0
                                120     LOAD_FAST                       3: option_string
                                122     BUILD_TUPLE                     3
                                124     CALL_METHOD                     1
                                126     POP_TOP                         
                                128     LOAD_FAST                       3: option_string
                                130     LOAD_CONST                      4: 0
                                132     BINARY_SUBSCR                   
                                134     STORE_FAST                      9: char
                                136     LOAD_FAST                       9: char
                                138     LOAD_FAST                       4: explicit_arg
                                140     LOAD_CONST                      4: 0
                                142     BINARY_SUBSCR                   
                                144     BINARY_ADD                      
                                146     STORE_FAST                      3: option_string
                                148     LOAD_FAST                       4: explicit_arg
                                150     LOAD_CONST                      2: 1
                                152     LOAD_CONST                      0: None
                                154     BUILD_SLICE                     2
                                156     BINARY_SUBSCR                   
                                158     JUMP_IF_TRUE_OR_POP             81 (to 162)
                                160     LOAD_CONST                      0: None
                                162     STORE_FAST                      10: new_explicit_arg
                                164     LOAD_DEREF                      4: self
                                166     LOAD_ATTR                       3: _option_string_actions
                                168     STORE_FAST                      11: optionals_map
                                170     LOAD_FAST                       3: option_string
                                172     LOAD_FAST                       11: optionals_map
                                174     CONTAINS_OP                     0 (in)
                                176     POP_JUMP_IF_FALSE               96 (to 192)
                                178     LOAD_FAST                       11: optionals_map
                                180     LOAD_FAST                       3: option_string
                                182     BINARY_SUBSCR                   
                                184     STORE_FAST                      2: action
                                186     LOAD_FAST                       10: new_explicit_arg
                                188     STORE_FAST                      4: explicit_arg
                                190     JUMP_FORWARD                    76 (to 344)
                                192     LOAD_GLOBAL                     4: _
                                194     LOAD_CONST                      6: 'ignored explicit argument %r'
                                196     CALL_FUNCTION                   1
                                198     STORE_FAST                      12: msg
                                200     LOAD_GLOBAL                     5: ArgumentError
                                202     LOAD_FAST                       2: action
                                204     LOAD_FAST                       12: msg
                                206     LOAD_FAST                       4: explicit_arg
                                208     BINARY_MODULO                   
                                210     CALL_FUNCTION                   2
                                212     RAISE_VARARGS                   1
                                214     LOAD_FAST                       7: arg_count
                                216     LOAD_CONST                      2: 1
                                218     COMPARE_OP                      2 (==)
                                220     POP_JUMP_IF_FALSE               127 (to 254)
                                222     LOAD_FAST                       0: start_index
                                224     LOAD_CONST                      2: 1
                                226     BINARY_ADD                      
                                228     STORE_FAST                      13: stop
                                230     LOAD_FAST                       4: explicit_arg
                                232     BUILD_LIST                      1
                                234     STORE_FAST                      14: args
                                236     LOAD_FAST                       6: action_tuples
                                238     LOAD_METHOD                     1: append
                                240     LOAD_FAST                       2: action
                                242     LOAD_FAST                       14: args
                                244     LOAD_FAST                       3: option_string
                                246     BUILD_TUPLE                     3
                                248     CALL_METHOD                     1
                                250     POP_TOP                         
                                252     JUMP_FORWARD                    46 (to 346)
                                254     LOAD_GLOBAL                     4: _
                                256     LOAD_CONST                      6: 'ignored explicit argument %r'
                                258     CALL_FUNCTION                   1
                                260     STORE_FAST                      12: msg
                                262     LOAD_GLOBAL                     5: ArgumentError
                                264     LOAD_FAST                       2: action
                                266     LOAD_FAST                       12: msg
                                268     LOAD_FAST                       4: explicit_arg
                                270     BINARY_MODULO                   
                                272     CALL_FUNCTION                   2
                                274     RAISE_VARARGS                   1
                                276     LOAD_FAST                       0: start_index
                                278     LOAD_CONST                      2: 1
                                280     BINARY_ADD                      
                                282     STORE_FAST                      15: start
                                284     LOAD_DEREF                      1: arg_strings_pattern
                                286     LOAD_FAST                       15: start
                                288     LOAD_CONST                      0: None
                                290     BUILD_SLICE                     2
                                292     BINARY_SUBSCR                   
                                294     STORE_FAST                      16: selected_patterns
                                296     LOAD_FAST                       5: match_argument
                                298     LOAD_FAST                       2: action
                                300     LOAD_FAST                       16: selected_patterns
                                302     CALL_FUNCTION                   2
                                304     STORE_FAST                      7: arg_count
                                306     LOAD_FAST                       15: start
                                308     LOAD_FAST                       7: arg_count
                                310     BINARY_ADD                      
                                312     STORE_FAST                      13: stop
                                314     LOAD_DEREF                      0: arg_strings
                                316     LOAD_FAST                       15: start
                                318     LOAD_FAST                       13: stop
                                320     BUILD_SLICE                     2
                                322     BINARY_SUBSCR                   
                                324     STORE_FAST                      14: args
                                326     LOAD_FAST                       6: action_tuples
                                328     LOAD_METHOD                     1: append
                                330     LOAD_FAST                       2: action
                                332     LOAD_FAST                       14: args
                                334     LOAD_FAST                       3: option_string
                                336     BUILD_TUPLE                     3
                                338     CALL_METHOD                     1
                                340     POP_TOP                         
                                342     JUMP_FORWARD                    1 (to 346)
                                344     JUMP_ABSOLUTE                   15 (to 30)
                                346     LOAD_FAST                       6: action_tuples
                                348     POP_JUMP_IF_TRUE                177 (to 354)
                                350     LOAD_ASSERTION_ERROR            
                                352     RAISE_VARARGS                   1
                                354     LOAD_FAST                       6: action_tuples
                                356     GET_ITER                        
                                358     FOR_ITER                        11 (to 382)
                                360     UNPACK_SEQUENCE                 3
                                362     STORE_FAST                      2: action
                                364     STORE_FAST                      14: args
                                366     STORE_FAST                      3: option_string
                                368     LOAD_DEREF                      5: take_action
                                370     LOAD_FAST                       2: action
                                372     LOAD_FAST                       14: args
                                374     LOAD_FAST                       3: option_string
                                376     CALL_FUNCTION                   3
                                378     POP_TOP                         
                                380     JUMP_ABSOLUTE                   179 (to 358)
                                382     LOAD_FAST                       13: stop
                                384     RETURN_VALUE                    
                        'ArgumentParser._parse_known_args.<locals>.consume_optional'
                        [Code]
                            File Name: argparse.py
                            Object Name: consume_positionals
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 7
                            Stack Size: 5
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '_match_arguments_partial'
                                'zip'
                                'len'
                            [Var Names]
                                'start_index'
                                'match_partial'
                                'selected_pattern'
                                'arg_counts'
                                'action'
                                'arg_count'
                                'args'
                            [Free Vars]
                                'arg_strings'
                                'arg_strings_pattern'
                                'positionals'
                                'self'
                                'take_action'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_DEREF                      3: self
                                2       LOAD_ATTR                       0: _match_arguments_partial
                                4       STORE_FAST                      1: match_partial
                                6       LOAD_DEREF                      1: arg_strings_pattern
                                8       LOAD_FAST                       0: start_index
                                10      LOAD_CONST                      0: None
                                12      BUILD_SLICE                     2
                                14      BINARY_SUBSCR                   
                                16      STORE_FAST                      2: selected_pattern
                                18      LOAD_FAST                       1: match_partial
                                20      LOAD_DEREF                      2: positionals
                                22      LOAD_FAST                       2: selected_pattern
                                24      CALL_FUNCTION                   2
                                26      STORE_FAST                      3: arg_counts
                                28      LOAD_GLOBAL                     1: zip
                                30      LOAD_DEREF                      2: positionals
                                32      LOAD_FAST                       3: arg_counts
                                34      CALL_FUNCTION                   2
                                36      GET_ITER                        
                                38      FOR_ITER                        21 (to 82)
                                40      UNPACK_SEQUENCE                 2
                                42      STORE_FAST                      4: action
                                44      STORE_FAST                      5: arg_count
                                46      LOAD_DEREF                      0: arg_strings
                                48      LOAD_FAST                       0: start_index
                                50      LOAD_FAST                       0: start_index
                                52      LOAD_FAST                       5: arg_count
                                54      BINARY_ADD                      
                                56      BUILD_SLICE                     2
                                58      BINARY_SUBSCR                   
                                60      STORE_FAST                      6: args
                                62      LOAD_FAST                       0: start_index
                                64      LOAD_FAST                       5: arg_count
                                66      INPLACE_ADD                     
                                68      STORE_FAST                      0: start_index
                                70      LOAD_DEREF                      4: take_action
                                72      LOAD_FAST                       4: action
                                74      LOAD_FAST                       6: args
                                76      CALL_FUNCTION                   2
                                78      POP_TOP                         
                                80      JUMP_ABSOLUTE                   19 (to 38)
                                82      LOAD_DEREF                      2: positionals
                                84      LOAD_GLOBAL                     2: len
                                86      LOAD_FAST                       3: arg_counts
                                88      CALL_FUNCTION                   1
                                90      LOAD_CONST                      0: None
                                92      BUILD_SLICE                     2
                                94      BINARY_SUBSCR                   
                                96      LOAD_DEREF                      2: positionals
                                98      LOAD_CONST                      0: None
                                100     LOAD_CONST                      0: None
                                102     BUILD_SLICE                     2
                                104     STORE_SUBSCR                    
                                106     LOAD_FAST                       0: start_index
                                108     RETURN_VALUE                    
                        'ArgumentParser._parse_known_args.<locals>.consume_positionals'
                        0
                        -1
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                            [Var Names]
                                '.0'
                                'index'
                            [Free Vars]
                                'start_index'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: index
                                8       LOAD_FAST                       1: index
                                10      LOAD_DEREF                      0: start_index
                                12      COMPARE_OP                      5 (>=)
                                14      POP_JUMP_IF_FALSE               2 (to 4)
                                16      LOAD_FAST                       1: index
                                18      LIST_APPEND                     2
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      RETURN_VALUE                    
                        'ArgumentParser._parse_known_args.<locals>.<listcomp>'
                        'the following arguments are required: %s'
                        ', '
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'help'
                                'SUPPRESS'
                                '_get_action_name'
                            [Var Names]
                                '.0'
                                'action'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        11 (to 28)
                                6       STORE_FAST                      1: action
                                8       LOAD_FAST                       1: action
                                10      LOAD_ATTR                       0: help
                                12      LOAD_GLOBAL                     1: SUPPRESS
                                14      IS_OP                           1 (is not)
                                16      POP_JUMP_IF_FALSE               2 (to 4)
                                18      LOAD_GLOBAL                     2: _get_action_name
                                20      LOAD_FAST                       1: action
                                22      CALL_FUNCTION                   1
                                24      LIST_APPEND                     2
                                26      JUMP_ABSOLUTE                   2 (to 4)
                                28      RETURN_VALUE                    
                        'one of the arguments %s is required'
                        ' '
                        (
                            None
                        )
                    [Disassembly]
                        0       LOAD_DEREF                      9: self
                        2       LOAD_ATTR                       0: fromfile_prefix_chars
                        4       LOAD_CONST                      0: None
                        6       IS_OP                           1 (is not)
                        8       POP_JUMP_IF_FALSE               10 (to 20)
                        10      LOAD_DEREF                      9: self
                        12      LOAD_METHOD                     1: _read_args_from_files
                        14      LOAD_DEREF                      1: arg_strings
                        16      CALL_METHOD                     1
                        18      STORE_DEREF                     1: arg_strings
                        20      BUILD_MAP                       0
                        22      STORE_DEREF                     0: action_conflicts
                        24      LOAD_DEREF                      9: self
                        26      LOAD_ATTR                       2: _mutually_exclusive_groups
                        28      GET_ITER                        
                        30      FOR_ITER                        41 (to 114)
                        32      STORE_FAST                      3: mutex_group
                        34      LOAD_FAST                       3: mutex_group
                        36      LOAD_ATTR                       3: _group_actions
                        38      STORE_FAST                      4: group_actions
                        40      LOAD_GLOBAL                     4: enumerate
                        42      LOAD_FAST                       3: mutex_group
                        44      LOAD_ATTR                       3: _group_actions
                        46      CALL_FUNCTION                   1
                        48      GET_ITER                        
                        50      FOR_ITER                        30 (to 112)
                        52      UNPACK_SEQUENCE                 2
                        54      STORE_FAST                      5: i
                        56      STORE_FAST                      6: mutex_action
                        58      LOAD_DEREF                      0: action_conflicts
                        60      LOAD_METHOD                     5: setdefault
                        62      LOAD_FAST                       6: mutex_action
                        64      BUILD_LIST                      0
                        66      CALL_METHOD                     2
                        68      STORE_FAST                      7: conflicts
                        70      LOAD_FAST                       7: conflicts
                        72      LOAD_METHOD                     6: extend
                        74      LOAD_FAST                       4: group_actions
                        76      LOAD_CONST                      0: None
                        78      LOAD_FAST                       5: i
                        80      BUILD_SLICE                     2
                        82      BINARY_SUBSCR                   
                        84      CALL_METHOD                     1
                        86      POP_TOP                         
                        88      LOAD_FAST                       7: conflicts
                        90      LOAD_METHOD                     6: extend
                        92      LOAD_FAST                       4: group_actions
                        94      LOAD_FAST                       5: i
                        96      LOAD_CONST                      1: 1
                        98      BINARY_ADD                      
                        100     LOAD_CONST                      0: None
                        102     BUILD_SLICE                     2
                        104     BINARY_SUBSCR                   
                        106     CALL_METHOD                     1
                        108     POP_TOP                         
                        110     JUMP_ABSOLUTE                   25 (to 50)
                        112     JUMP_ABSOLUTE                   15 (to 30)
                        114     BUILD_MAP                       0
                        116     STORE_DEREF                     5: option_string_indices
                        118     BUILD_LIST                      0
                        120     STORE_FAST                      8: arg_string_pattern_parts
                        122     LOAD_GLOBAL                     7: iter
                        124     LOAD_DEREF                      1: arg_strings
                        126     CALL_FUNCTION                   1
                        128     STORE_FAST                      9: arg_strings_iter
                        130     LOAD_GLOBAL                     4: enumerate
                        132     LOAD_FAST                       9: arg_strings_iter
                        134     CALL_FUNCTION                   1
                        136     GET_ITER                        
                        138     FOR_ITER                        47 (to 234)
                        140     UNPACK_SEQUENCE                 2
                        142     STORE_FAST                      5: i
                        144     STORE_FAST                      10: arg_string
                        146     LOAD_FAST                       10: arg_string
                        148     LOAD_CONST                      2: '--'
                        150     COMPARE_OP                      2 (==)
                        152     POP_JUMP_IF_FALSE               93 (to 186)
                        154     LOAD_FAST                       8: arg_string_pattern_parts
                        156     LOAD_METHOD                     8: append
                        158     LOAD_CONST                      3: '-'
                        160     CALL_METHOD                     1
                        162     POP_TOP                         
                        164     LOAD_FAST                       9: arg_strings_iter
                        166     GET_ITER                        
                        168     FOR_ITER                        7 (to 184)
                        170     STORE_FAST                      10: arg_string
                        172     LOAD_FAST                       8: arg_string_pattern_parts
                        174     LOAD_METHOD                     8: append
                        176     LOAD_CONST                      4: 'A'
                        178     CALL_METHOD                     1
                        180     POP_TOP                         
                        182     JUMP_ABSOLUTE                   84 (to 168)
                        184     JUMP_ABSOLUTE                   69 (to 138)
                        186     LOAD_DEREF                      9: self
                        188     LOAD_METHOD                     9: _parse_optional
                        190     LOAD_FAST                       10: arg_string
                        192     CALL_METHOD                     1
                        194     STORE_FAST                      11: option_tuple
                        196     LOAD_FAST                       11: option_tuple
                        198     LOAD_CONST                      0: None
                        200     IS_OP                           0 (is)
                        202     POP_JUMP_IF_FALSE               105 (to 210)
                        204     LOAD_CONST                      4: 'A'
                        206     STORE_FAST                      12: pattern
                        208     JUMP_FORWARD                    6 (to 222)
                        210     LOAD_FAST                       11: option_tuple
                        212     LOAD_DEREF                      5: option_string_indices
                        214     LOAD_FAST                       5: i
                        216     STORE_SUBSCR                    
                        218     LOAD_CONST                      5: 'O'
                        220     STORE_FAST                      12: pattern
                        222     LOAD_FAST                       8: arg_string_pattern_parts
                        224     LOAD_METHOD                     8: append
                        226     LOAD_FAST                       12: pattern
                        228     CALL_METHOD                     1
                        230     POP_TOP                         
                        232     JUMP_ABSOLUTE                   69 (to 138)
                        234     LOAD_CONST                      6: ''
                        236     LOAD_METHOD                     10: join
                        238     LOAD_FAST                       8: arg_string_pattern_parts
                        240     CALL_METHOD                     1
                        242     STORE_DEREF                     2: arg_strings_pattern
                        244     LOAD_GLOBAL                     11: set
                        246     CALL_FUNCTION                   0
                        248     STORE_DEREF                     7: seen_actions
                        250     LOAD_GLOBAL                     11: set
                        252     CALL_FUNCTION                   0
                        254     STORE_DEREF                     8: seen_non_default_actions
                        256     LOAD_CONST                      22: (None,)
                        258     LOAD_CLOSURE                    0: action_conflicts
                        260     LOAD_CLOSURE                    4: namespace
                        262     LOAD_CLOSURE                    7: seen_actions
                        264     LOAD_CLOSURE                    8: seen_non_default_actions
                        266     LOAD_CLOSURE                    9: self
                        268     BUILD_TUPLE                     5
                        270     LOAD_CONST                      7: <CODE> take_action
                        272     LOAD_CONST                      8: 'ArgumentParser._parse_known_args.<locals>.take_action'
                        274     MAKE_FUNCTION                   9
                        276     STORE_DEREF                     11: take_action
                        278     LOAD_CLOSURE                    1: arg_strings
                        280     LOAD_CLOSURE                    2: arg_strings_pattern
                        282     LOAD_CLOSURE                    3: extras
                        284     LOAD_CLOSURE                    5: option_string_indices
                        286     LOAD_CLOSURE                    9: self
                        288     LOAD_CLOSURE                    11: take_action
                        290     BUILD_TUPLE                     6
                        292     LOAD_CONST                      9: <CODE> consume_optional
                        294     LOAD_CONST                      10: 'ArgumentParser._parse_known_args.<locals>.consume_optional'
                        296     MAKE_FUNCTION                   8
                        298     STORE_FAST                      13: consume_optional
                        300     LOAD_DEREF                      9: self
                        302     LOAD_METHOD                     12: _get_positional_actions
                        304     CALL_METHOD                     0
                        306     STORE_DEREF                     6: positionals
                        308     LOAD_CLOSURE                    1: arg_strings
                        310     LOAD_CLOSURE                    2: arg_strings_pattern
                        312     LOAD_CLOSURE                    6: positionals
                        314     LOAD_CLOSURE                    9: self
                        316     LOAD_CLOSURE                    11: take_action
                        318     BUILD_TUPLE                     5
                        320     LOAD_CONST                      11: <CODE> consume_positionals
                        322     LOAD_CONST                      12: 'ArgumentParser._parse_known_args.<locals>.consume_positionals'
                        324     MAKE_FUNCTION                   8
                        326     STORE_FAST                      14: consume_positionals
                        328     BUILD_LIST                      0
                        330     STORE_DEREF                     3: extras
                        332     LOAD_CONST                      13: 0
                        334     STORE_DEREF                     10: start_index
                        336     LOAD_DEREF                      5: option_string_indices
                        338     POP_JUMP_IF_FALSE               175 (to 350)
                        340     LOAD_GLOBAL                     13: max
                        342     LOAD_DEREF                      5: option_string_indices
                        344     CALL_FUNCTION                   1
                        346     STORE_FAST                      15: max_option_string_index
                        348     JUMP_FORWARD                    2 (to 354)
                        350     LOAD_CONST                      14: -1
                        352     STORE_FAST                      15: max_option_string_index
                        354     LOAD_DEREF                      10: start_index
                        356     LOAD_FAST                       15: max_option_string_index
                        358     COMPARE_OP                      1 (<=)
                        360     POP_JUMP_IF_FALSE               234 (to 468)
                        362     LOAD_GLOBAL                     14: min
                        364     LOAD_CLOSURE                    10: start_index
                        366     BUILD_TUPLE                     1
                        368     LOAD_CONST                      15: <CODE> <listcomp>
                        370     LOAD_CONST                      16: 'ArgumentParser._parse_known_args.<locals>.<listcomp>'
                        372     MAKE_FUNCTION                   8
                        374     LOAD_DEREF                      5: option_string_indices
                        376     GET_ITER                        
                        378     CALL_FUNCTION                   1
                        380     CALL_FUNCTION                   1
                        382     STORE_FAST                      16: next_option_string_index
                        384     LOAD_DEREF                      10: start_index
                        386     LOAD_FAST                       16: next_option_string_index
                        388     COMPARE_OP                      3 (!=)
                        390     POP_JUMP_IF_FALSE               209 (to 418)
                        392     LOAD_FAST                       14: consume_positionals
                        394     LOAD_DEREF                      10: start_index
                        396     CALL_FUNCTION                   1
                        398     STORE_FAST                      17: positionals_end_index
                        400     LOAD_FAST                       17: positionals_end_index
                        402     LOAD_DEREF                      10: start_index
                        404     COMPARE_OP                      4 (>)
                        406     POP_JUMP_IF_FALSE               207 (to 414)
                        408     LOAD_FAST                       17: positionals_end_index
                        410     STORE_DEREF                     10: start_index
                        412     JUMP_ABSOLUTE                   177 (to 354)
                        414     LOAD_FAST                       17: positionals_end_index
                        416     STORE_DEREF                     10: start_index
                        418     LOAD_DEREF                      10: start_index
                        420     LOAD_DEREF                      5: option_string_indices
                        422     CONTAINS_OP                     1 (not in)
                        424     POP_JUMP_IF_FALSE               226 (to 452)
                        426     LOAD_DEREF                      1: arg_strings
                        428     LOAD_DEREF                      10: start_index
                        430     LOAD_FAST                       16: next_option_string_index
                        432     BUILD_SLICE                     2
                        434     BINARY_SUBSCR                   
                        436     STORE_FAST                      18: strings
                        438     LOAD_DEREF                      3: extras
                        440     LOAD_METHOD                     6: extend
                        442     LOAD_FAST                       18: strings
                        444     CALL_METHOD                     1
                        446     POP_TOP                         
                        448     LOAD_FAST                       16: next_option_string_index
                        450     STORE_DEREF                     10: start_index
                        452     LOAD_FAST                       13: consume_optional
                        454     LOAD_DEREF                      10: start_index
                        456     CALL_FUNCTION                   1
                        458     STORE_DEREF                     10: start_index
                        460     LOAD_DEREF                      10: start_index
                        462     LOAD_FAST                       15: max_option_string_index
                        464     COMPARE_OP                      1 (<=)
                        466     POP_JUMP_IF_TRUE                181 (to 362)
                        468     LOAD_FAST                       14: consume_positionals
                        470     LOAD_DEREF                      10: start_index
                        472     CALL_FUNCTION                   1
                        474     STORE_FAST                      19: stop_index
                        476     LOAD_DEREF                      3: extras
                        478     LOAD_METHOD                     6: extend
                        480     LOAD_DEREF                      1: arg_strings
                        482     LOAD_FAST                       19: stop_index
                        484     LOAD_CONST                      0: None
                        486     BUILD_SLICE                     2
                        488     BINARY_SUBSCR                   
                        490     CALL_METHOD                     1
                        492     POP_TOP                         
                        494     BUILD_LIST                      0
                        496     STORE_FAST                      20: required_actions
                        498     LOAD_DEREF                      9: self
                        500     LOAD_ATTR                       15: _actions
                        502     GET_ITER                        
                        504     FOR_ITER                        61 (to 628)
                        506     STORE_FAST                      21: action
                        508     LOAD_FAST                       21: action
                        510     LOAD_DEREF                      7: seen_actions
                        512     CONTAINS_OP                     1 (not in)
                        514     POP_JUMP_IF_FALSE               313 (to 626)
                        518     LOAD_FAST                       21: action
                        520     LOAD_ATTR                       16: required
                        522     POP_JUMP_IF_FALSE               271 (to 542)
                        526     LOAD_FAST                       20: required_actions
                        528     LOAD_METHOD                     8: append
                        530     LOAD_GLOBAL                     17: _get_action_name
                        532     LOAD_FAST                       21: action
                        534     CALL_FUNCTION                   1
                        536     CALL_METHOD                     1
                        538     POP_TOP                         
                        540     JUMP_ABSOLUTE                   252 (to 504)
                        542     LOAD_FAST                       21: action
                        544     LOAD_ATTR                       18: default
                        546     LOAD_CONST                      0: None
                        548     IS_OP                           1 (is not)
                        550     POP_JUMP_IF_FALSE               313 (to 626)
                        554     LOAD_GLOBAL                     19: isinstance
                        556     LOAD_FAST                       21: action
                        558     LOAD_ATTR                       18: default
                        560     LOAD_GLOBAL                     20: str
                        562     CALL_FUNCTION                   2
                        564     POP_JUMP_IF_FALSE               313 (to 626)
                        568     LOAD_GLOBAL                     21: hasattr
                        570     LOAD_DEREF                      4: namespace
                        572     LOAD_FAST                       21: action
                        574     LOAD_ATTR                       22: dest
                        576     CALL_FUNCTION                   2
                        578     POP_JUMP_IF_FALSE               313 (to 626)
                        582     LOAD_FAST                       21: action
                        584     LOAD_ATTR                       18: default
                        586     LOAD_GLOBAL                     23: getattr
                        588     LOAD_DEREF                      4: namespace
                        590     LOAD_FAST                       21: action
                        592     LOAD_ATTR                       22: dest
                        594     CALL_FUNCTION                   2
                        596     IS_OP                           0 (is)
                        598     POP_JUMP_IF_FALSE               313 (to 626)
                        602     LOAD_GLOBAL                     24: setattr
                        604     LOAD_DEREF                      4: namespace
                        606     LOAD_FAST                       21: action
                        608     LOAD_ATTR                       22: dest
                        610     LOAD_DEREF                      9: self
                        612     LOAD_METHOD                     25: _get_value
                        614     LOAD_FAST                       21: action
                        616     LOAD_FAST                       21: action
                        618     LOAD_ATTR                       18: default
                        620     CALL_METHOD                     2
                        622     CALL_FUNCTION                   3
                        624     POP_TOP                         
                        626     JUMP_ABSOLUTE                   252 (to 504)
                        628     LOAD_FAST                       20: required_actions
                        630     POP_JUMP_IF_FALSE               329 (to 658)
                        634     LOAD_DEREF                      9: self
                        636     LOAD_METHOD                     26: error
                        638     LOAD_GLOBAL                     27: _
                        640     LOAD_CONST                      17: 'the following arguments are required: %s'
                        642     CALL_FUNCTION                   1
                        644     LOAD_CONST                      18: ', '
                        646     LOAD_METHOD                     10: join
                        648     LOAD_FAST                       20: required_actions
                        650     CALL_METHOD                     1
                        652     BINARY_MODULO                   
                        654     CALL_METHOD                     1
                        656     POP_TOP                         
                        658     LOAD_DEREF                      9: self
                        660     LOAD_ATTR                       2: _mutually_exclusive_groups
                        662     GET_ITER                        
                        664     FOR_ITER                        43 (to 752)
                        666     STORE_FAST                      22: group
                        668     LOAD_FAST                       22: group
                        670     LOAD_ATTR                       16: required
                        672     POP_JUMP_IF_FALSE               374 (to 748)
                        676     LOAD_FAST                       22: group
                        678     LOAD_ATTR                       3: _group_actions
                        680     GET_ITER                        
                        682     FOR_ITER                        10 (to 704)
                        684     STORE_FAST                      21: action
                        686     LOAD_FAST                       21: action
                        688     LOAD_DEREF                      8: seen_non_default_actions
                        690     CONTAINS_OP                     0 (in)
                        692     POP_JUMP_IF_FALSE               350 (to 700)
                        696     POP_TOP                         
                        698     JUMP_FORWARD                    24 (to 748)
                        700     JUMP_ABSOLUTE                   341 (to 682)
                        704     LOAD_CONST                      19: <CODE> <listcomp>
                        706     LOAD_CONST                      16: 'ArgumentParser._parse_known_args.<locals>.<listcomp>'
                        708     MAKE_FUNCTION                   0
                        710     LOAD_FAST                       22: group
                        712     LOAD_ATTR                       3: _group_actions
                        714     GET_ITER                        
                        716     CALL_FUNCTION                   1
                        718     STORE_FAST                      23: names
                        720     LOAD_GLOBAL                     27: _
                        722     LOAD_CONST                      20: 'one of the arguments %s is required'
                        724     CALL_FUNCTION                   1
                        726     STORE_FAST                      24: msg
                        728     LOAD_DEREF                      9: self
                        730     LOAD_METHOD                     26: error
                        732     LOAD_FAST                       24: msg
                        734     LOAD_CONST                      21: ' '
                        736     LOAD_METHOD                     10: join
                        738     LOAD_FAST                       23: names
                        740     CALL_METHOD                     1
                        742     BINARY_MODULO                   
                        744     CALL_METHOD                     1
                        746     POP_TOP                         
                        748     JUMP_ABSOLUTE                   332 (to 664)
                        752     LOAD_DEREF                      4: namespace
                        754     LOAD_DEREF                      3: extras
                        756     BUILD_TUPLE                     2
                        758     RETURN_VALUE                    
                'ArgumentParser._parse_known_args'
                [Code]
                    File Name: argparse.py
                    Object Name: _read_args_from_files
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 9
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fromfile_prefix_chars'
                        'append'
                        'open'
                        'read'
                        'splitlines'
                        'convert_arg_line_to_args'
                        '_read_args_from_files'
                        'extend'
                        'OSError'
                        '_sys'
                        'exc_info'
                        'error'
                        'str'
                    [Var Names]
                        'self'
                        'arg_strings'
                        'new_arg_strings'
                        'arg_string'
                        'args_file'
                        'arg_line'
                        'arg'
                        'err'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        1
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      2: new_arg_strings
                        4       LOAD_FAST                       1: arg_strings
                        6       GET_ITER                        
                        8       FOR_ITER                        99 (to 208)
                        10      STORE_FAST                      3: arg_string
                        12      LOAD_FAST                       3: arg_string
                        14      POP_JUMP_IF_FALSE               15 (to 30)
                        16      LOAD_FAST                       3: arg_string
                        18      LOAD_CONST                      1: 0
                        20      BINARY_SUBSCR                   
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       0: fromfile_prefix_chars
                        26      CONTAINS_OP                     1 (not in)
                        28      POP_JUMP_IF_FALSE               21 (to 42)
                        30      LOAD_FAST                       2: new_arg_strings
                        32      LOAD_METHOD                     1: append
                        34      LOAD_FAST                       3: arg_string
                        36      CALL_METHOD                     1
                        38      POP_TOP                         
                        40      JUMP_ABSOLUTE                   4 (to 8)
                        42      SETUP_FINALLY                   60 (to 164)
                        44      LOAD_GLOBAL                     2: open
                        46      LOAD_FAST                       3: arg_string
                        48      LOAD_CONST                      2: 1
                        50      LOAD_CONST                      0: None
                        52      BUILD_SLICE                     2
                        54      BINARY_SUBSCR                   
                        56      CALL_FUNCTION                   1
                        58      SETUP_WITH                      42 (to 144)
                        60      STORE_FAST                      4: args_file
                        62      BUILD_LIST                      0
                        64      STORE_FAST                      1: arg_strings
                        66      LOAD_FAST                       4: args_file
                        68      LOAD_METHOD                     3: read
                        70      CALL_METHOD                     0
                        72      LOAD_METHOD                     4: splitlines
                        74      CALL_METHOD                     0
                        76      GET_ITER                        
                        78      FOR_ITER                        15 (to 110)
                        80      STORE_FAST                      5: arg_line
                        82      LOAD_FAST                       0: self
                        84      LOAD_METHOD                     5: convert_arg_line_to_args
                        86      LOAD_FAST                       5: arg_line
                        88      CALL_METHOD                     1
                        90      GET_ITER                        
                        92      FOR_ITER                        7 (to 108)
                        94      STORE_FAST                      6: arg
                        96      LOAD_FAST                       1: arg_strings
                        98      LOAD_METHOD                     1: append
                        100     LOAD_FAST                       6: arg
                        102     CALL_METHOD                     1
                        104     POP_TOP                         
                        106     JUMP_ABSOLUTE                   46 (to 92)
                        108     JUMP_ABSOLUTE                   39 (to 78)
                        110     LOAD_FAST                       0: self
                        112     LOAD_METHOD                     6: _read_args_from_files
                        114     LOAD_FAST                       1: arg_strings
                        116     CALL_METHOD                     1
                        118     STORE_FAST                      1: arg_strings
                        120     LOAD_FAST                       2: new_arg_strings
                        122     LOAD_METHOD                     7: extend
                        124     LOAD_FAST                       1: arg_strings
                        126     CALL_METHOD                     1
                        128     POP_TOP                         
                        130     POP_BLOCK                       
                        132     LOAD_CONST                      0: None
                        134     DUP_TOP                         
                        136     DUP_TOP                         
                        138     CALL_FUNCTION                   3
                        140     POP_TOP                         
                        142     JUMP_FORWARD                    8 (to 160)
                        144     WITH_EXCEPT_START               
                        146     POP_JUMP_IF_TRUE                75 (to 150)
                        148     RERAISE                         1
                        150     POP_TOP                         
                        152     POP_TOP                         
                        154     POP_TOP                         
                        156     POP_EXCEPT                      
                        158     POP_TOP                         
                        160     POP_BLOCK                       
                        162     JUMP_ABSOLUTE                   4 (to 8)
                        164     DUP_TOP                         
                        166     LOAD_GLOBAL                     8: OSError
                        168     JUMP_IF_NOT_EXC_MATCH           103 (to 206)
                        170     POP_TOP                         
                        172     POP_TOP                         
                        174     POP_TOP                         
                        176     LOAD_GLOBAL                     9: _sys
                        178     LOAD_METHOD                     10: exc_info
                        180     CALL_METHOD                     0
                        182     LOAD_CONST                      2: 1
                        184     BINARY_SUBSCR                   
                        186     STORE_FAST                      7: err
                        188     LOAD_FAST                       0: self
                        190     LOAD_METHOD                     11: error
                        192     LOAD_GLOBAL                     12: str
                        194     LOAD_FAST                       7: err
                        196     CALL_FUNCTION                   1
                        198     CALL_METHOD                     1
                        200     POP_TOP                         
                        202     POP_EXCEPT                      
                        204     JUMP_ABSOLUTE                   4 (to 8)
                        206     RERAISE                         0
                        208     LOAD_FAST                       2: new_arg_strings
                        210     RETURN_VALUE                    
                'ArgumentParser._read_args_from_files'
                [Code]
                    File Name: argparse.py
                    Object Name: convert_arg_line_to_args
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'arg_line'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: arg_line
                        2       BUILD_LIST                      1
                        4       RETURN_VALUE                    
                'ArgumentParser.convert_arg_line_to_args'
                [Code]
                    File Name: argparse.py
                    Object Name: _match_argument
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_get_nargs_pattern'
                        '_re'
                        'match'
                        '_'
                        'OPTIONAL'
                        'ONE_OR_MORE'
                        'get'
                        'nargs'
                        'ngettext'
                        'ArgumentError'
                        'len'
                        'group'
                    [Var Names]
                        'self'
                        'action'
                        'arg_strings_pattern'
                        'nargs_pattern'
                        'match'
                        'nargs_errors'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'expected one argument'
                        'expected at most one argument'
                        'expected at least one argument'
                        'expected %s argument'
                        'expected %s arguments'
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _get_nargs_pattern
                        4       LOAD_FAST                       1: action
                        6       CALL_METHOD                     1
                        8       STORE_FAST                      3: nargs_pattern
                        10      LOAD_GLOBAL                     1: _re
                        12      LOAD_METHOD                     2: match
                        14      LOAD_FAST                       3: nargs_pattern
                        16      LOAD_FAST                       2: arg_strings_pattern
                        18      CALL_METHOD                     2
                        20      STORE_FAST                      4: match
                        22      LOAD_FAST                       4: match
                        24      LOAD_CONST                      0: None
                        26      IS_OP                           0 (is)
                        28      POP_JUMP_IF_FALSE               54 (to 108)
                        30      LOAD_CONST                      0: None
                        32      LOAD_GLOBAL                     3: _
                        34      LOAD_CONST                      1: 'expected one argument'
                        36      CALL_FUNCTION                   1
                        38      LOAD_GLOBAL                     4: OPTIONAL
                        40      LOAD_GLOBAL                     3: _
                        42      LOAD_CONST                      2: 'expected at most one argument'
                        44      CALL_FUNCTION                   1
                        46      LOAD_GLOBAL                     5: ONE_OR_MORE
                        48      LOAD_GLOBAL                     3: _
                        50      LOAD_CONST                      3: 'expected at least one argument'
                        52      CALL_FUNCTION                   1
                        54      BUILD_MAP                       3
                        56      STORE_FAST                      5: nargs_errors
                        58      LOAD_FAST                       5: nargs_errors
                        60      LOAD_METHOD                     6: get
                        62      LOAD_FAST                       1: action
                        64      LOAD_ATTR                       7: nargs
                        66      CALL_METHOD                     1
                        68      STORE_FAST                      6: msg
                        70      LOAD_FAST                       6: msg
                        72      LOAD_CONST                      0: None
                        74      IS_OP                           0 (is)
                        76      POP_JUMP_IF_FALSE               49 (to 98)
                        78      LOAD_GLOBAL                     8: ngettext
                        80      LOAD_CONST                      4: 'expected %s argument'
                        82      LOAD_CONST                      5: 'expected %s arguments'
                        84      LOAD_FAST                       1: action
                        86      LOAD_ATTR                       7: nargs
                        88      CALL_FUNCTION                   3
                        90      LOAD_FAST                       1: action
                        92      LOAD_ATTR                       7: nargs
                        94      BINARY_MODULO                   
                        96      STORE_FAST                      6: msg
                        98      LOAD_GLOBAL                     9: ArgumentError
                        100     LOAD_FAST                       1: action
                        102     LOAD_FAST                       6: msg
                        104     CALL_FUNCTION                   2
                        106     RAISE_VARARGS                   1
                        108     LOAD_GLOBAL                     10: len
                        110     LOAD_FAST                       4: match
                        112     LOAD_METHOD                     11: group
                        114     LOAD_CONST                      6: 1
                        116     CALL_METHOD                     1
                        118     CALL_FUNCTION                   1
                        120     RETURN_VALUE                    
                'ArgumentParser._match_argument'
                [Code]
                    File Name: argparse.py
                    Object Name: _match_arguments_partial
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 6
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'range'
                        'len'
                        'join'
                        '_re'
                        'match'
                        'extend'
                        'groups'
                    [Var Names]
                        'self'
                        'actions'
                        'arg_strings_pattern'
                        'result'
                        'i'
                        'actions_slice'
                        'pattern'
                        'match'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        0
                        -1
                        ''
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 5
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '_get_nargs_pattern'
                            [Var Names]
                                '.0'
                                'action'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: action
                                8       LOAD_DEREF                      0: self
                                10      LOAD_METHOD                     0: _get_nargs_pattern
                                12      LOAD_FAST                       1: action
                                14      CALL_METHOD                     1
                                16      LIST_APPEND                     2
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      RETURN_VALUE                    
                        'ArgumentParser._match_arguments_partial.<locals>.<listcomp>'
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'len'
                            [Var Names]
                                '.0'
                                'string'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        6 (to 18)
                                6       STORE_FAST                      1: string
                                8       LOAD_GLOBAL                     0: len
                                10      LOAD_FAST                       1: string
                                12      CALL_FUNCTION                   1
                                14      LIST_APPEND                     2
                                16      JUMP_ABSOLUTE                   2 (to 4)
                                18      RETURN_VALUE                    
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      3: result
                        4       LOAD_GLOBAL                     0: range
                        6       LOAD_GLOBAL                     1: len
                        8       LOAD_FAST                       1: actions
                        10      CALL_FUNCTION                   1
                        12      LOAD_CONST                      1: 0
                        14      LOAD_CONST                      2: -1
                        16      CALL_FUNCTION                   3
                        18      GET_ITER                        
                        20      FOR_ITER                        45 (to 112)
                        22      STORE_FAST                      4: i
                        24      LOAD_FAST                       1: actions
                        26      LOAD_CONST                      0: None
                        28      LOAD_FAST                       4: i
                        30      BUILD_SLICE                     2
                        32      BINARY_SUBSCR                   
                        34      STORE_FAST                      5: actions_slice
                        36      LOAD_CONST                      3: ''
                        38      LOAD_METHOD                     2: join
                        40      LOAD_CLOSURE                    0: self
                        42      BUILD_TUPLE                     1
                        44      LOAD_CONST                      4: <CODE> <listcomp>
                        46      LOAD_CONST                      5: 'ArgumentParser._match_arguments_partial.<locals>.<listcomp>'
                        48      MAKE_FUNCTION                   8
                        50      LOAD_FAST                       5: actions_slice
                        52      GET_ITER                        
                        54      CALL_FUNCTION                   1
                        56      CALL_METHOD                     1
                        58      STORE_FAST                      6: pattern
                        60      LOAD_GLOBAL                     3: _re
                        62      LOAD_METHOD                     4: match
                        64      LOAD_FAST                       6: pattern
                        66      LOAD_FAST                       2: arg_strings_pattern
                        68      CALL_METHOD                     2
                        70      STORE_FAST                      7: match
                        72      LOAD_FAST                       7: match
                        74      LOAD_CONST                      0: None
                        76      IS_OP                           1 (is not)
                        78      POP_JUMP_IF_FALSE               55 (to 110)
                        80      LOAD_FAST                       3: result
                        82      LOAD_METHOD                     5: extend
                        84      LOAD_CONST                      6: <CODE> <listcomp>
                        86      LOAD_CONST                      5: 'ArgumentParser._match_arguments_partial.<locals>.<listcomp>'
                        88      MAKE_FUNCTION                   0
                        90      LOAD_FAST                       7: match
                        92      LOAD_METHOD                     6: groups
                        94      CALL_METHOD                     0
                        96      GET_ITER                        
                        98      CALL_FUNCTION                   1
                        100     CALL_METHOD                     1
                        102     POP_TOP                         
                        104     POP_TOP                         
                        106     LOAD_FAST                       3: result
                        108     RETURN_VALUE                    
                        110     JUMP_ABSOLUTE                   10 (to 20)
                        112     LOAD_FAST                       3: result
                        114     RETURN_VALUE                    
                'ArgumentParser._match_arguments_partial'
                [Code]
                    File Name: argparse.py
                    Object Name: _parse_optional
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 10
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'prefix_chars'
                        '_option_string_actions'
                        'len'
                        'split'
                        '_get_option_tuples'
                        'join'
                        '_'
                        'error'
                        '_negative_number_matcher'
                        'match'
                        '_has_negative_number_optionals'
                    [Var Names]
                        'self'
                        'arg_string'
                        'action'
                        'option_string'
                        'explicit_arg'
                        'option_tuples'
                        'options'
                        'args'
                        'msg'
                        'option_tuple'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        1
                        '='
                        ', '
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 4
                            Stack Size: 5
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                            [Var Names]
                                '.0'
                                'action'
                                'option_string'
                                'explicit_arg'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       UNPACK_SEQUENCE                 3
                                8       STORE_FAST                      1: action
                                10      STORE_FAST                      2: option_string
                                12      STORE_FAST                      3: explicit_arg
                                14      LOAD_FAST                       2: option_string
                                16      LIST_APPEND                     2
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      RETURN_VALUE                    
                        'ArgumentParser._parse_optional.<locals>.<listcomp>'
                        (
                            'option'
                            'matches'
                        )
                        'ambiguous option: %(option)s could match %(matches)s'
                        ' '
                    [Disassembly]
                        0       LOAD_FAST                       1: arg_string
                        2       POP_JUMP_IF_TRUE                4 (to 8)
                        4       LOAD_CONST                      0: None
                        6       RETURN_VALUE                    
                        8       LOAD_FAST                       1: arg_string
                        10      LOAD_CONST                      1: 0
                        12      BINARY_SUBSCR                   
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       0: prefix_chars
                        18      CONTAINS_OP                     1 (not in)
                        20      POP_JUMP_IF_FALSE               13 (to 26)
                        22      LOAD_CONST                      0: None
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       1: arg_string
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       1: _option_string_actions
                        32      CONTAINS_OP                     0 (in)
                        34      POP_JUMP_IF_FALSE               28 (to 56)
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       1: _option_string_actions
                        40      LOAD_FAST                       1: arg_string
                        42      BINARY_SUBSCR                   
                        44      STORE_FAST                      2: action
                        46      LOAD_FAST                       2: action
                        48      LOAD_FAST                       1: arg_string
                        50      LOAD_CONST                      0: None
                        52      BUILD_TUPLE                     3
                        54      RETURN_VALUE                    
                        56      LOAD_GLOBAL                     2: len
                        58      LOAD_FAST                       1: arg_string
                        60      CALL_FUNCTION                   1
                        62      LOAD_CONST                      2: 1
                        64      COMPARE_OP                      2 (==)
                        66      POP_JUMP_IF_FALSE               36 (to 72)
                        68      LOAD_CONST                      0: None
                        70      RETURN_VALUE                    
                        72      LOAD_CONST                      3: '='
                        74      LOAD_FAST                       1: arg_string
                        76      CONTAINS_OP                     0 (in)
                        78      POP_JUMP_IF_FALSE               63 (to 126)
                        80      LOAD_FAST                       1: arg_string
                        82      LOAD_METHOD                     3: split
                        84      LOAD_CONST                      3: '='
                        86      LOAD_CONST                      2: 1
                        88      CALL_METHOD                     2
                        90      UNPACK_SEQUENCE                 2
                        92      STORE_FAST                      3: option_string
                        94      STORE_FAST                      4: explicit_arg
                        96      LOAD_FAST                       3: option_string
                        98      LOAD_FAST                       0: self
                        100     LOAD_ATTR                       1: _option_string_actions
                        102     CONTAINS_OP                     0 (in)
                        104     POP_JUMP_IF_FALSE               63 (to 126)
                        106     LOAD_FAST                       0: self
                        108     LOAD_ATTR                       1: _option_string_actions
                        110     LOAD_FAST                       3: option_string
                        112     BINARY_SUBSCR                   
                        114     STORE_FAST                      2: action
                        116     LOAD_FAST                       2: action
                        118     LOAD_FAST                       3: option_string
                        120     LOAD_FAST                       4: explicit_arg
                        122     BUILD_TUPLE                     3
                        124     RETURN_VALUE                    
                        126     LOAD_FAST                       0: self
                        128     LOAD_METHOD                     4: _get_option_tuples
                        130     LOAD_FAST                       1: arg_string
                        132     CALL_METHOD                     1
                        134     STORE_FAST                      5: option_tuples
                        136     LOAD_GLOBAL                     2: len
                        138     LOAD_FAST                       5: option_tuples
                        140     CALL_FUNCTION                   1
                        142     LOAD_CONST                      2: 1
                        144     COMPARE_OP                      4 (>)
                        146     POP_JUMP_IF_FALSE               101 (to 202)
                        148     LOAD_CONST                      4: ', '
                        150     LOAD_METHOD                     5: join
                        152     LOAD_CONST                      5: <CODE> <listcomp>
                        154     LOAD_CONST                      6: 'ArgumentParser._parse_optional.<locals>.<listcomp>'
                        156     MAKE_FUNCTION                   0
                        158     LOAD_FAST                       5: option_tuples
                        160     GET_ITER                        
                        162     CALL_FUNCTION                   1
                        164     CALL_METHOD                     1
                        166     STORE_FAST                      6: options
                        168     LOAD_FAST                       1: arg_string
                        170     LOAD_FAST                       6: options
                        172     LOAD_CONST                      7: ('option', 'matches')
                        174     BUILD_CONST_KEY_MAP             2
                        176     STORE_FAST                      7: args
                        178     LOAD_GLOBAL                     6: _
                        180     LOAD_CONST                      8: 'ambiguous option: %(option)s could match %(matches)s'
                        182     CALL_FUNCTION                   1
                        184     STORE_FAST                      8: msg
                        186     LOAD_FAST                       0: self
                        188     LOAD_METHOD                     7: error
                        190     LOAD_FAST                       8: msg
                        192     LOAD_FAST                       7: args
                        194     BINARY_MODULO                   
                        196     CALL_METHOD                     1
                        198     POP_TOP                         
                        200     JUMP_FORWARD                    11 (to 224)
                        202     LOAD_GLOBAL                     2: len
                        204     LOAD_FAST                       5: option_tuples
                        206     CALL_FUNCTION                   1
                        208     LOAD_CONST                      2: 1
                        210     COMPARE_OP                      2 (==)
                        212     POP_JUMP_IF_FALSE               112 (to 224)
                        214     LOAD_FAST                       5: option_tuples
                        216     UNPACK_SEQUENCE                 1
                        218     STORE_FAST                      9: option_tuple
                        220     LOAD_FAST                       9: option_tuple
                        222     RETURN_VALUE                    
                        224     LOAD_FAST                       0: self
                        226     LOAD_ATTR                       8: _negative_number_matcher
                        228     LOAD_METHOD                     9: match
                        230     LOAD_FAST                       1: arg_string
                        232     CALL_METHOD                     1
                        234     POP_JUMP_IF_FALSE               123 (to 246)
                        236     LOAD_FAST                       0: self
                        238     LOAD_ATTR                       10: _has_negative_number_optionals
                        240     POP_JUMP_IF_TRUE                123 (to 246)
                        242     LOAD_CONST                      0: None
                        244     RETURN_VALUE                    
                        246     LOAD_CONST                      9: ' '
                        248     LOAD_FAST                       1: arg_string
                        250     CONTAINS_OP                     0 (in)
                        252     POP_JUMP_IF_FALSE               129 (to 258)
                        254     LOAD_CONST                      0: None
                        256     RETURN_VALUE                    
                        258     LOAD_CONST                      0: None
                        260     LOAD_FAST                       1: arg_string
                        262     LOAD_CONST                      0: None
                        264     BUILD_TUPLE                     3
                        266     RETURN_VALUE                    
                'ArgumentParser._parse_optional'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_option_tuples
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 10
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'prefix_chars'
                        'allow_abbrev'
                        'split'
                        '_option_string_actions'
                        'startswith'
                        'append'
                        'error'
                        '_'
                    [Var Names]
                        'self'
                        'option_string'
                        'result'
                        'chars'
                        'option_prefix'
                        'explicit_arg'
                        'action'
                        'tup'
                        'short_option_prefix'
                        'short_explicit_arg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        1
                        '='
                        2
                        'unexpected option string: %s'
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      2: result
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       0: prefix_chars
                        8       STORE_FAST                      3: chars
                        10      LOAD_FAST                       1: option_string
                        12      LOAD_CONST                      1: 0
                        14      BINARY_SUBSCR                   
                        16      LOAD_FAST                       3: chars
                        18      CONTAINS_OP                     0 (in)
                        20      POP_JUMP_IF_FALSE               65 (to 130)
                        22      LOAD_FAST                       1: option_string
                        24      LOAD_CONST                      2: 1
                        26      BINARY_SUBSCR                   
                        28      LOAD_FAST                       3: chars
                        30      CONTAINS_OP                     0 (in)
                        32      POP_JUMP_IF_FALSE               65 (to 130)
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       1: allow_abbrev
                        38      POP_JUMP_IF_FALSE               63 (to 126)
                        40      LOAD_CONST                      3: '='
                        42      LOAD_FAST                       1: option_string
                        44      CONTAINS_OP                     0 (in)
                        46      POP_JUMP_IF_FALSE               33 (to 66)
                        48      LOAD_FAST                       1: option_string
                        50      LOAD_METHOD                     2: split
                        52      LOAD_CONST                      3: '='
                        54      LOAD_CONST                      2: 1
                        56      CALL_METHOD                     2
                        58      UNPACK_SEQUENCE                 2
                        60      STORE_FAST                      4: option_prefix
                        62      STORE_FAST                      5: explicit_arg
                        64      JUMP_FORWARD                    4 (to 74)
                        66      LOAD_FAST                       1: option_string
                        68      STORE_FAST                      4: option_prefix
                        70      LOAD_CONST                      0: None
                        72      STORE_FAST                      5: explicit_arg
                        74      LOAD_FAST                       0: self
                        76      LOAD_ATTR                       3: _option_string_actions
                        78      GET_ITER                        
                        80      FOR_ITER                        22 (to 126)
                        82      STORE_FAST                      1: option_string
                        84      LOAD_FAST                       1: option_string
                        86      LOAD_METHOD                     4: startswith
                        88      LOAD_FAST                       4: option_prefix
                        90      CALL_METHOD                     1
                        92      POP_JUMP_IF_FALSE               62 (to 124)
                        94      LOAD_FAST                       0: self
                        96      LOAD_ATTR                       3: _option_string_actions
                        98      LOAD_FAST                       1: option_string
                        100     BINARY_SUBSCR                   
                        102     STORE_FAST                      6: action
                        104     LOAD_FAST                       6: action
                        106     LOAD_FAST                       1: option_string
                        108     LOAD_FAST                       5: explicit_arg
                        110     BUILD_TUPLE                     3
                        112     STORE_FAST                      7: tup
                        114     LOAD_FAST                       2: result
                        116     LOAD_METHOD                     5: append
                        118     LOAD_FAST                       7: tup
                        120     CALL_METHOD                     1
                        122     POP_TOP                         
                        124     JUMP_ABSOLUTE                   40 (to 80)
                        126     LOAD_FAST                       2: result
                        128     RETURN_VALUE                    
                        130     LOAD_FAST                       1: option_string
                        132     LOAD_CONST                      1: 0
                        134     BINARY_SUBSCR                   
                        136     LOAD_FAST                       3: chars
                        138     CONTAINS_OP                     0 (in)
                        140     POP_JUMP_IF_FALSE               141 (to 282)
                        142     LOAD_FAST                       1: option_string
                        144     LOAD_CONST                      2: 1
                        146     BINARY_SUBSCR                   
                        148     LOAD_FAST                       3: chars
                        150     CONTAINS_OP                     1 (not in)
                        152     POP_JUMP_IF_FALSE               141 (to 282)
                        154     LOAD_FAST                       1: option_string
                        156     STORE_FAST                      4: option_prefix
                        158     LOAD_CONST                      0: None
                        160     STORE_FAST                      5: explicit_arg
                        162     LOAD_FAST                       1: option_string
                        164     LOAD_CONST                      0: None
                        166     LOAD_CONST                      4: 2
                        168     BUILD_SLICE                     2
                        170     BINARY_SUBSCR                   
                        172     STORE_FAST                      8: short_option_prefix
                        174     LOAD_FAST                       1: option_string
                        176     LOAD_CONST                      4: 2
                        178     LOAD_CONST                      0: None
                        180     BUILD_SLICE                     2
                        182     BINARY_SUBSCR                   
                        184     STORE_FAST                      9: short_explicit_arg
                        186     LOAD_FAST                       0: self
                        188     LOAD_ATTR                       3: _option_string_actions
                        190     GET_ITER                        
                        192     FOR_ITER                        42 (to 278)
                        194     STORE_FAST                      1: option_string
                        196     LOAD_FAST                       1: option_string
                        198     LOAD_FAST                       8: short_option_prefix
                        200     COMPARE_OP                      2 (==)
                        202     POP_JUMP_IF_FALSE               118 (to 236)
                        204     LOAD_FAST                       0: self
                        206     LOAD_ATTR                       3: _option_string_actions
                        208     LOAD_FAST                       1: option_string
                        210     BINARY_SUBSCR                   
                        212     STORE_FAST                      6: action
                        214     LOAD_FAST                       6: action
                        216     LOAD_FAST                       1: option_string
                        218     LOAD_FAST                       9: short_explicit_arg
                        220     BUILD_TUPLE                     3
                        222     STORE_FAST                      7: tup
                        224     LOAD_FAST                       2: result
                        226     LOAD_METHOD                     5: append
                        228     LOAD_FAST                       7: tup
                        230     CALL_METHOD                     1
                        232     POP_TOP                         
                        234     JUMP_ABSOLUTE                   96 (to 192)
                        236     LOAD_FAST                       1: option_string
                        238     LOAD_METHOD                     4: startswith
                        240     LOAD_FAST                       4: option_prefix
                        242     CALL_METHOD                     1
                        244     POP_JUMP_IF_FALSE               138 (to 276)
                        246     LOAD_FAST                       0: self
                        248     LOAD_ATTR                       3: _option_string_actions
                        250     LOAD_FAST                       1: option_string
                        252     BINARY_SUBSCR                   
                        254     STORE_FAST                      6: action
                        256     LOAD_FAST                       6: action
                        258     LOAD_FAST                       1: option_string
                        260     LOAD_FAST                       5: explicit_arg
                        262     BUILD_TUPLE                     3
                        264     STORE_FAST                      7: tup
                        266     LOAD_FAST                       2: result
                        268     LOAD_METHOD                     5: append
                        270     LOAD_FAST                       7: tup
                        272     CALL_METHOD                     1
                        274     POP_TOP                         
                        276     JUMP_ABSOLUTE                   96 (to 192)
                        278     LOAD_FAST                       2: result
                        280     RETURN_VALUE                    
                        282     LOAD_FAST                       0: self
                        284     LOAD_METHOD                     6: error
                        286     LOAD_GLOBAL                     7: _
                        288     LOAD_CONST                      5: 'unexpected option string: %s'
                        290     CALL_FUNCTION                   1
                        292     LOAD_FAST                       1: option_string
                        294     BINARY_MODULO                   
                        296     CALL_METHOD                     1
                        298     POP_TOP                         
                        300     LOAD_FAST                       2: result
                        302     RETURN_VALUE                    
                'ArgumentParser._get_option_tuples'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_nargs_pattern
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'nargs'
                        'OPTIONAL'
                        'ZERO_OR_MORE'
                        'ONE_OR_MORE'
                        'REMAINDER'
                        'PARSER'
                        'SUPPRESS'
                        'join'
                        'option_strings'
                        'replace'
                    [Var Names]
                        'self'
                        'action'
                        'nargs'
                        'nargs_pattern'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '(-*A-*)'
                        '(-*A?-*)'
                        '(-*[A-]*)'
                        '(-*A[A-]*)'
                        '([-AO]*)'
                        '(-*A[-AO]*)'
                        '(-*-*)'
                        '(-*%s-*)'
                        '-*'
                        'A'
                        ''
                        '-'
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: nargs
                        4       STORE_FAST                      2: nargs
                        6       LOAD_FAST                       2: nargs
                        8       LOAD_CONST                      0: None
                        10      IS_OP                           0 (is)
                        12      POP_JUMP_IF_FALSE               10 (to 20)
                        14      LOAD_CONST                      1: '(-*A-*)'
                        16      STORE_FAST                      3: nargs_pattern
                        18      JUMP_FORWARD                    51 (to 122)
                        20      LOAD_FAST                       2: nargs
                        22      LOAD_GLOBAL                     1: OPTIONAL
                        24      COMPARE_OP                      2 (==)
                        26      POP_JUMP_IF_FALSE               17 (to 34)
                        28      LOAD_CONST                      2: '(-*A?-*)'
                        30      STORE_FAST                      3: nargs_pattern
                        32      JUMP_FORWARD                    44 (to 122)
                        34      LOAD_FAST                       2: nargs
                        36      LOAD_GLOBAL                     2: ZERO_OR_MORE
                        38      COMPARE_OP                      2 (==)
                        40      POP_JUMP_IF_FALSE               24 (to 48)
                        42      LOAD_CONST                      3: '(-*[A-]*)'
                        44      STORE_FAST                      3: nargs_pattern
                        46      JUMP_FORWARD                    37 (to 122)
                        48      LOAD_FAST                       2: nargs
                        50      LOAD_GLOBAL                     3: ONE_OR_MORE
                        52      COMPARE_OP                      2 (==)
                        54      POP_JUMP_IF_FALSE               31 (to 62)
                        56      LOAD_CONST                      4: '(-*A[A-]*)'
                        58      STORE_FAST                      3: nargs_pattern
                        60      JUMP_FORWARD                    30 (to 122)
                        62      LOAD_FAST                       2: nargs
                        64      LOAD_GLOBAL                     4: REMAINDER
                        66      COMPARE_OP                      2 (==)
                        68      POP_JUMP_IF_FALSE               38 (to 76)
                        70      LOAD_CONST                      5: '([-AO]*)'
                        72      STORE_FAST                      3: nargs_pattern
                        74      JUMP_FORWARD                    23 (to 122)
                        76      LOAD_FAST                       2: nargs
                        78      LOAD_GLOBAL                     5: PARSER
                        80      COMPARE_OP                      2 (==)
                        82      POP_JUMP_IF_FALSE               45 (to 90)
                        84      LOAD_CONST                      6: '(-*A[-AO]*)'
                        86      STORE_FAST                      3: nargs_pattern
                        88      JUMP_FORWARD                    16 (to 122)
                        90      LOAD_FAST                       2: nargs
                        92      LOAD_GLOBAL                     6: SUPPRESS
                        94      COMPARE_OP                      2 (==)
                        96      POP_JUMP_IF_FALSE               52 (to 104)
                        98      LOAD_CONST                      7: '(-*-*)'
                        100     STORE_FAST                      3: nargs_pattern
                        102     JUMP_FORWARD                    9 (to 122)
                        104     LOAD_CONST                      8: '(-*%s-*)'
                        106     LOAD_CONST                      9: '-*'
                        108     LOAD_METHOD                     7: join
                        110     LOAD_CONST                      10: 'A'
                        112     LOAD_FAST                       2: nargs
                        114     BINARY_MULTIPLY                 
                        116     CALL_METHOD                     1
                        118     BINARY_MODULO                   
                        120     STORE_FAST                      3: nargs_pattern
                        122     LOAD_FAST                       1: action
                        124     LOAD_ATTR                       8: option_strings
                        126     POP_JUMP_IF_FALSE               76 (to 152)
                        128     LOAD_FAST                       3: nargs_pattern
                        130     LOAD_METHOD                     9: replace
                        132     LOAD_CONST                      9: '-*'
                        134     LOAD_CONST                      11: ''
                        136     CALL_METHOD                     2
                        138     STORE_FAST                      3: nargs_pattern
                        140     LOAD_FAST                       3: nargs_pattern
                        142     LOAD_METHOD                     9: replace
                        144     LOAD_CONST                      12: '-'
                        146     LOAD_CONST                      11: ''
                        148     CALL_METHOD                     2
                        150     STORE_FAST                      3: nargs_pattern
                        152     LOAD_FAST                       3: nargs_pattern
                        154     RETURN_VALUE                    
                'ArgumentParser._get_nargs_pattern'
                [Code]
                    File Name: argparse.py
                    Object Name: parse_intermixed_args
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'parse_known_intermixed_args'
                        '_'
                        'error'
                        'join'
                    [Var Names]
                        'self'
                        'args'
                        'namespace'
                        'argv'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'unrecognized arguments: %s'
                        ' '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: parse_known_intermixed_args
                        4       LOAD_FAST                       1: args
                        6       LOAD_FAST                       2: namespace
                        8       CALL_METHOD                     2
                        10      UNPACK_SEQUENCE                 2
                        12      STORE_FAST                      1: args
                        14      STORE_FAST                      3: argv
                        16      LOAD_FAST                       3: argv
                        18      POP_JUMP_IF_FALSE               24 (to 48)
                        20      LOAD_GLOBAL                     1: _
                        22      LOAD_CONST                      1: 'unrecognized arguments: %s'
                        24      CALL_FUNCTION                   1
                        26      STORE_FAST                      4: msg
                        28      LOAD_FAST                       0: self
                        30      LOAD_METHOD                     2: error
                        32      LOAD_FAST                       4: msg
                        34      LOAD_CONST                      2: ' '
                        36      LOAD_METHOD                     3: join
                        38      LOAD_FAST                       3: argv
                        40      CALL_METHOD                     1
                        42      BINARY_MODULO                   
                        44      CALL_METHOD                     1
                        46      POP_TOP                         
                        48      LOAD_FAST                       1: args
                        50      RETURN_VALUE                    
                'ArgumentParser.parse_intermixed_args'
                [Code]
                    File Name: argparse.py
                    Object Name: parse_known_intermixed_args
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 9
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_get_positional_actions'
                        'TypeError'
                        'nargs'
                        '_mutually_exclusive_groups'
                        'usage'
                        'format_usage'
                        'save_nargs'
                        'SUPPRESS'
                        'default'
                        'save_default'
                        'parse_known_args'
                        'hasattr'
                        'dest'
                        'getattr'
                        'warnings'
                        'warn'
                        'delattr'
                        '_get_optional_actions'
                        'required'
                        'save_required'
                    [Var Names]
                        'self'
                        'args'
                        'namespace'
                        'a'
                        'save_usage'
                        'action'
                        'remaining_args'
                        'warn'
                        'optionals'
                        'group'
                        'extras'
                    [Free Vars]
                    [Cell Vars]
                        'positionals'
                    [Constants]
                        None
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 5
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'nargs'
                                'PARSER'
                                'REMAINDER'
                            [Var Names]
                                '.0'
                                'action'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        11 (to 28)
                                6       STORE_FAST                      1: action
                                8       LOAD_FAST                       1: action
                                10      LOAD_ATTR                       0: nargs
                                12      LOAD_GLOBAL                     1: PARSER
                                14      LOAD_GLOBAL                     2: REMAINDER
                                16      BUILD_TUPLE                     2
                                18      CONTAINS_OP                     0 (in)
                                20      POP_JUMP_IF_FALSE               2 (to 4)
                                22      LOAD_FAST                       1: action
                                24      LIST_APPEND                     2
                                26      JUMP_ABSOLUTE                   2 (to 4)
                                28      RETURN_VALUE                    
                        'ArgumentParser.parse_known_intermixed_args.<locals>.<listcomp>'
                        'parse_intermixed_args: positional arg with nargs=%s'
                        0
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 5
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '_group_actions'
                                'dest'
                            [Var Names]
                                '.0'
                                'group'
                                'action'
                            [Free Vars]
                                'positionals'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        15 (to 36)
                                6       STORE_FAST                      1: group
                                8       LOAD_FAST                       1: group
                                10      LOAD_ATTR                       0: _group_actions
                                12      GET_ITER                        
                                14      FOR_ITER                        9 (to 34)
                                16      STORE_FAST                      2: action
                                18      LOAD_FAST                       2: action
                                20      LOAD_DEREF                      0: positionals
                                22      CONTAINS_OP                     0 (in)
                                24      POP_JUMP_IF_FALSE               7 (to 14)
                                26      LOAD_FAST                       2: action
                                28      LOAD_ATTR                       1: dest
                                30      LIST_APPEND                     3
                                32      JUMP_ABSOLUTE                   7 (to 14)
                                34      JUMP_ABSOLUTE                   2 (to 4)
                                36      RETURN_VALUE                    
                        'parse_intermixed_args: positional in mutuallyExclusiveGroup'
                        7
                        (
                            'warn'
                        )
                        'Do not expect %s in %s'
                        False
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _get_positional_actions
                        4       CALL_METHOD                     0
                        6       STORE_DEREF                     0: positionals
                        8       LOAD_CONST                      1: <CODE> <listcomp>
                        10      LOAD_CONST                      2: 'ArgumentParser.parse_known_intermixed_args.<locals>.<listcomp>'
                        12      MAKE_FUNCTION                   0
                        14      LOAD_DEREF                      0: positionals
                        16      GET_ITER                        
                        18      CALL_FUNCTION                   1
                        20      STORE_FAST                      3: a
                        22      LOAD_FAST                       3: a
                        24      POP_JUMP_IF_FALSE               22 (to 44)
                        26      LOAD_GLOBAL                     1: TypeError
                        28      LOAD_CONST                      3: 'parse_intermixed_args: positional arg with nargs=%s'
                        30      LOAD_FAST                       3: a
                        32      LOAD_CONST                      4: 0
                        34      BINARY_SUBSCR                   
                        36      LOAD_ATTR                       2: nargs
                        38      BINARY_MODULO                   
                        40      CALL_FUNCTION                   1
                        42      RAISE_VARARGS                   1
                        44      LOAD_CLOSURE                    0: positionals
                        46      BUILD_TUPLE                     1
                        48      LOAD_CONST                      5: <CODE> <listcomp>
                        50      LOAD_CONST                      2: 'ArgumentParser.parse_known_intermixed_args.<locals>.<listcomp>'
                        52      MAKE_FUNCTION                   8
                        54      LOAD_FAST                       0: self
                        56      LOAD_ATTR                       3: _mutually_exclusive_groups
                        58      GET_ITER                        
                        60      CALL_FUNCTION                   1
                        62      POP_JUMP_IF_FALSE               36 (to 72)
                        64      LOAD_GLOBAL                     1: TypeError
                        66      LOAD_CONST                      6: 'parse_intermixed_args: positional in mutuallyExclusiveGroup'
                        68      CALL_FUNCTION                   1
                        70      RAISE_VARARGS                   1
                        72      SETUP_FINALLY                   201 (to 476)
                        74      LOAD_FAST                       0: self
                        76      LOAD_ATTR                       4: usage
                        78      STORE_FAST                      4: save_usage
                        80      SETUP_FINALLY                   96 (to 274)
                        82      LOAD_FAST                       0: self
                        84      LOAD_ATTR                       4: usage
                        86      LOAD_CONST                      0: None
                        88      IS_OP                           0 (is)
                        90      POP_JUMP_IF_FALSE               55 (to 110)
                        92      LOAD_FAST                       0: self
                        94      LOAD_METHOD                     5: format_usage
                        96      CALL_METHOD                     0
                        98      LOAD_CONST                      7: 7
                        100     LOAD_CONST                      0: None
                        102     BUILD_SLICE                     2
                        104     BINARY_SUBSCR                   
                        106     LOAD_FAST                       0: self
                        108     STORE_ATTR                      4: usage
                        110     LOAD_DEREF                      0: positionals
                        112     GET_ITER                        
                        114     FOR_ITER                        16 (to 148)
                        116     STORE_FAST                      5: action
                        118     LOAD_FAST                       5: action
                        120     LOAD_ATTR                       2: nargs
                        122     LOAD_FAST                       5: action
                        124     STORE_ATTR                      6: save_nargs
                        126     LOAD_GLOBAL                     7: SUPPRESS
                        128     LOAD_FAST                       5: action
                        130     STORE_ATTR                      2: nargs
                        132     LOAD_FAST                       5: action
                        134     LOAD_ATTR                       8: default
                        136     LOAD_FAST                       5: action
                        138     STORE_ATTR                      9: save_default
                        140     LOAD_GLOBAL                     7: SUPPRESS
                        142     LOAD_FAST                       5: action
                        144     STORE_ATTR                      8: default
                        146     JUMP_ABSOLUTE                   57 (to 114)
                        148     LOAD_FAST                       0: self
                        150     LOAD_METHOD                     10: parse_known_args
                        152     LOAD_FAST                       1: args
                        154     LOAD_FAST                       2: namespace
                        156     CALL_METHOD                     2
                        158     UNPACK_SEQUENCE                 2
                        160     STORE_FAST                      2: namespace
                        162     STORE_FAST                      6: remaining_args
                        164     LOAD_DEREF                      0: positionals
                        166     GET_ITER                        
                        168     FOR_ITER                        37 (to 244)
                        170     STORE_FAST                      5: action
                        172     LOAD_GLOBAL                     11: hasattr
                        174     LOAD_FAST                       2: namespace
                        176     LOAD_FAST                       5: action
                        178     LOAD_ATTR                       12: dest
                        180     CALL_FUNCTION                   2
                        182     POP_JUMP_IF_FALSE               121 (to 242)
                        184     LOAD_GLOBAL                     13: getattr
                        186     LOAD_FAST                       2: namespace
                        188     LOAD_FAST                       5: action
                        190     LOAD_ATTR                       12: dest
                        192     CALL_FUNCTION                   2
                        194     BUILD_LIST                      0
                        196     COMPARE_OP                      2 (==)
                        198     POP_JUMP_IF_FALSE               121 (to 242)
                        200     LOAD_CONST                      4: 0
                        202     LOAD_CONST                      8: ('warn',)
                        204     IMPORT_NAME                     14: warnings
                        206     IMPORT_FROM                     15: warn
                        208     STORE_FAST                      7: warn
                        210     POP_TOP                         
                        212     LOAD_FAST                       7: warn
                        214     LOAD_CONST                      9: 'Do not expect %s in %s'
                        216     LOAD_FAST                       5: action
                        218     LOAD_ATTR                       12: dest
                        220     LOAD_FAST                       2: namespace
                        222     BUILD_TUPLE                     2
                        224     BINARY_MODULO                   
                        226     CALL_FUNCTION                   1
                        228     POP_TOP                         
                        230     LOAD_GLOBAL                     16: delattr
                        232     LOAD_FAST                       2: namespace
                        234     LOAD_FAST                       5: action
                        236     LOAD_ATTR                       12: dest
                        238     CALL_FUNCTION                   2
                        240     POP_TOP                         
                        242     JUMP_ABSOLUTE                   84 (to 168)
                        244     POP_BLOCK                       
                        246     LOAD_DEREF                      0: positionals
                        248     GET_ITER                        
                        250     FOR_ITER                        10 (to 272)
                        252     STORE_FAST                      5: action
                        254     LOAD_FAST                       5: action
                        256     LOAD_ATTR                       6: save_nargs
                        258     LOAD_FAST                       5: action
                        260     STORE_ATTR                      2: nargs
                        262     LOAD_FAST                       5: action
                        264     LOAD_ATTR                       9: save_default
                        266     LOAD_FAST                       5: action
                        268     STORE_ATTR                      8: default
                        270     JUMP_ABSOLUTE                   125 (to 250)
                        272     JUMP_FORWARD                    14 (to 302)
                        274     LOAD_DEREF                      0: positionals
                        276     GET_ITER                        
                        278     FOR_ITER                        10 (to 300)
                        280     STORE_FAST                      5: action
                        282     LOAD_FAST                       5: action
                        284     LOAD_ATTR                       6: save_nargs
                        286     LOAD_FAST                       5: action
                        288     STORE_ATTR                      2: nargs
                        290     LOAD_FAST                       5: action
                        292     LOAD_ATTR                       9: save_default
                        294     LOAD_FAST                       5: action
                        296     STORE_ATTR                      8: default
                        298     JUMP_ABSOLUTE                   139 (to 278)
                        300     RERAISE                         0
                        302     LOAD_FAST                       0: self
                        304     LOAD_METHOD                     17: _get_optional_actions
                        306     CALL_METHOD                     0
                        308     STORE_FAST                      8: optionals
                        310     SETUP_FINALLY                   54 (to 420)
                        312     LOAD_FAST                       8: optionals
                        314     GET_ITER                        
                        316     FOR_ITER                        9 (to 336)
                        318     STORE_FAST                      5: action
                        320     LOAD_FAST                       5: action
                        322     LOAD_ATTR                       18: required
                        324     LOAD_FAST                       5: action
                        326     STORE_ATTR                      19: save_required
                        328     LOAD_CONST                      10: False
                        330     LOAD_FAST                       5: action
                        332     STORE_ATTR                      18: required
                        334     JUMP_ABSOLUTE                   158 (to 316)
                        336     LOAD_FAST                       0: self
                        338     LOAD_ATTR                       3: _mutually_exclusive_groups
                        340     GET_ITER                        
                        342     FOR_ITER                        9 (to 362)
                        344     STORE_FAST                      9: group
                        346     LOAD_FAST                       9: group
                        348     LOAD_ATTR                       18: required
                        350     LOAD_FAST                       9: group
                        352     STORE_ATTR                      19: save_required
                        354     LOAD_CONST                      10: False
                        356     LOAD_FAST                       9: group
                        358     STORE_ATTR                      18: required
                        360     JUMP_ABSOLUTE                   171 (to 342)
                        362     LOAD_FAST                       0: self
                        364     LOAD_METHOD                     10: parse_known_args
                        366     LOAD_FAST                       6: remaining_args
                        368     LOAD_FAST                       2: namespace
                        370     CALL_METHOD                     2
                        372     UNPACK_SEQUENCE                 2
                        374     STORE_FAST                      2: namespace
                        376     STORE_FAST                      10: extras
                        378     POP_BLOCK                       
                        380     LOAD_FAST                       8: optionals
                        382     GET_ITER                        
                        384     FOR_ITER                        6 (to 398)
                        386     STORE_FAST                      5: action
                        388     LOAD_FAST                       5: action
                        390     LOAD_ATTR                       19: save_required
                        392     LOAD_FAST                       5: action
                        394     STORE_ATTR                      18: required
                        396     JUMP_ABSOLUTE                   192 (to 384)
                        398     LOAD_FAST                       0: self
                        400     LOAD_ATTR                       3: _mutually_exclusive_groups
                        402     GET_ITER                        
                        404     FOR_ITER                        6 (to 418)
                        406     STORE_FAST                      9: group
                        408     LOAD_FAST                       9: group
                        410     LOAD_ATTR                       19: save_required
                        412     LOAD_FAST                       9: group
                        414     STORE_ATTR                      18: required
                        416     JUMP_ABSOLUTE                   202 (to 404)
                        418     JUMP_FORWARD                    20 (to 460)
                        420     LOAD_FAST                       8: optionals
                        422     GET_ITER                        
                        424     FOR_ITER                        6 (to 438)
                        426     STORE_FAST                      5: action
                        428     LOAD_FAST                       5: action
                        430     LOAD_ATTR                       19: save_required
                        432     LOAD_FAST                       5: action
                        434     STORE_ATTR                      18: required
                        436     JUMP_ABSOLUTE                   212 (to 424)
                        438     LOAD_FAST                       0: self
                        440     LOAD_ATTR                       3: _mutually_exclusive_groups
                        442     GET_ITER                        
                        444     FOR_ITER                        6 (to 458)
                        446     STORE_FAST                      9: group
                        448     LOAD_FAST                       9: group
                        450     LOAD_ATTR                       19: save_required
                        452     LOAD_FAST                       9: group
                        454     STORE_ATTR                      18: required
                        456     JUMP_ABSOLUTE                   222 (to 444)
                        458     RERAISE                         0
                        460     POP_BLOCK                       
                        462     LOAD_FAST                       4: save_usage
                        464     LOAD_FAST                       0: self
                        466     STORE_ATTR                      4: usage
                        468     LOAD_FAST                       2: namespace
                        470     LOAD_FAST                       10: extras
                        472     BUILD_TUPLE                     2
                        474     RETURN_VALUE                    
                        476     LOAD_FAST                       4: save_usage
                        478     LOAD_FAST                       0: self
                        480     STORE_ATTR                      4: usage
                        482     RERAISE                         0
                'ArgumentParser.parse_known_intermixed_args'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_values
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'nargs'
                        'PARSER'
                        'REMAINDER'
                        'remove'
                        'ValueError'
                        'OPTIONAL'
                        'option_strings'
                        'const'
                        'default'
                        'isinstance'
                        'str'
                        '_get_value'
                        '_check_value'
                        'ZERO_OR_MORE'
                        'len'
                        'SUPPRESS'
                    [Var Names]
                        'self'
                        'action'
                        'arg_strings'
                        'value'
                        'arg_string'
                        'v'
                    [Free Vars]
                    [Cell Vars]
                        'action'
                        'self'
                    [Constants]
                        None
                        '--'
                        1
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 6
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '_get_value'
                            [Var Names]
                                '.0'
                                'v'
                            [Free Vars]
                                'action'
                                'self'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: v
                                8       LOAD_DEREF                      1: self
                                10      LOAD_METHOD                     0: _get_value
                                12      LOAD_DEREF                      0: action
                                14      LOAD_FAST                       1: v
                                16      CALL_METHOD                     2
                                18      LIST_APPEND                     2
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      RETURN_VALUE                    
                        'ArgumentParser._get_values.<locals>.<listcomp>'
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 6
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '_get_value'
                            [Var Names]
                                '.0'
                                'v'
                            [Free Vars]
                                'action'
                                'self'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: v
                                8       LOAD_DEREF                      1: self
                                10      LOAD_METHOD                     0: _get_value
                                12      LOAD_DEREF                      0: action
                                14      LOAD_FAST                       1: v
                                16      CALL_METHOD                     2
                                18      LIST_APPEND                     2
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      RETURN_VALUE                    
                        0
                        [Code]
                            File Name: argparse.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 6
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '_get_value'
                            [Var Names]
                                '.0'
                                'v'
                            [Free Vars]
                                'action'
                                'self'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: v
                                8       LOAD_DEREF                      1: self
                                10      LOAD_METHOD                     0: _get_value
                                12      LOAD_DEREF                      0: action
                                14      LOAD_FAST                       1: v
                                16      CALL_METHOD                     2
                                18      LIST_APPEND                     2
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      RETURN_VALUE                    
                    [Disassembly]
                        0       LOAD_DEREF                      0: action
                        2       LOAD_ATTR                       0: nargs
                        4       LOAD_GLOBAL                     1: PARSER
                        6       LOAD_GLOBAL                     2: REMAINDER
                        8       BUILD_TUPLE                     2
                        10      CONTAINS_OP                     1 (not in)
                        12      POP_JUMP_IF_FALSE               24 (to 48)
                        14      SETUP_FINALLY                   7 (to 30)
                        16      LOAD_FAST                       2: arg_strings
                        18      LOAD_METHOD                     3: remove
                        20      LOAD_CONST                      1: '--'
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      POP_BLOCK                       
                        28      JUMP_FORWARD                    9 (to 48)
                        30      DUP_TOP                         
                        32      LOAD_GLOBAL                     4: ValueError
                        34      JUMP_IF_NOT_EXC_MATCH           23 (to 46)
                        36      POP_TOP                         
                        38      POP_TOP                         
                        40      POP_TOP                         
                        42      POP_EXCEPT                      
                        44      JUMP_FORWARD                    1 (to 48)
                        46      RERAISE                         0
                        48      LOAD_FAST                       2: arg_strings
                        50      POP_JUMP_IF_TRUE                60 (to 120)
                        52      LOAD_DEREF                      0: action
                        54      LOAD_ATTR                       0: nargs
                        56      LOAD_GLOBAL                     5: OPTIONAL
                        58      COMPARE_OP                      2 (==)
                        60      POP_JUMP_IF_FALSE               60 (to 120)
                        62      LOAD_DEREF                      0: action
                        64      LOAD_ATTR                       6: option_strings
                        66      POP_JUMP_IF_FALSE               38 (to 76)
                        68      LOAD_DEREF                      0: action
                        70      LOAD_ATTR                       7: const
                        72      STORE_FAST                      3: value
                        74      JUMP_FORWARD                    3 (to 82)
                        76      LOAD_DEREF                      0: action
                        78      LOAD_ATTR                       8: default
                        80      STORE_FAST                      3: value
                        82      LOAD_GLOBAL                     9: isinstance
                        84      LOAD_FAST                       3: value
                        86      LOAD_GLOBAL                     10: str
                        88      CALL_FUNCTION                   2
                        90      POP_JUMP_IF_FALSE               58 (to 116)
                        92      LOAD_DEREF                      1: self
                        94      LOAD_METHOD                     11: _get_value
                        96      LOAD_DEREF                      0: action
                        98      LOAD_FAST                       3: value
                        100     CALL_METHOD                     2
                        102     STORE_FAST                      3: value
                        104     LOAD_DEREF                      1: self
                        106     LOAD_METHOD                     12: _check_value
                        108     LOAD_DEREF                      0: action
                        110     LOAD_FAST                       3: value
                        112     CALL_METHOD                     2
                        114     POP_TOP                         
                        116     LOAD_FAST                       3: value
                        118     RETURN_VALUE                    
                        120     LOAD_FAST                       2: arg_strings
                        122     POP_JUMP_IF_TRUE                89 (to 178)
                        124     LOAD_DEREF                      0: action
                        126     LOAD_ATTR                       0: nargs
                        128     LOAD_GLOBAL                     13: ZERO_OR_MORE
                        130     COMPARE_OP                      2 (==)
                        132     POP_JUMP_IF_FALSE               89 (to 178)
                        134     LOAD_DEREF                      0: action
                        136     LOAD_ATTR                       6: option_strings
                        138     POP_JUMP_IF_TRUE                89 (to 178)
                        140     LOAD_DEREF                      0: action
                        142     LOAD_ATTR                       8: default
                        144     LOAD_CONST                      0: None
                        146     IS_OP                           1 (is not)
                        148     POP_JUMP_IF_FALSE               79 (to 158)
                        150     LOAD_DEREF                      0: action
                        152     LOAD_ATTR                       8: default
                        154     STORE_FAST                      3: value
                        156     JUMP_FORWARD                    2 (to 162)
                        158     LOAD_FAST                       2: arg_strings
                        160     STORE_FAST                      3: value
                        162     LOAD_DEREF                      1: self
                        164     LOAD_METHOD                     12: _check_value
                        166     LOAD_DEREF                      0: action
                        168     LOAD_FAST                       3: value
                        170     CALL_METHOD                     2
                        172     POP_TOP                         
                        174     LOAD_FAST                       3: value
                        176     RETURN_VALUE                    
                        178     LOAD_GLOBAL                     14: len
                        180     LOAD_FAST                       2: arg_strings
                        182     CALL_FUNCTION                   1
                        184     LOAD_CONST                      2: 1
                        186     COMPARE_OP                      2 (==)
                        188     POP_JUMP_IF_FALSE               119 (to 238)
                        190     LOAD_DEREF                      0: action
                        192     LOAD_ATTR                       0: nargs
                        194     LOAD_CONST                      0: None
                        196     LOAD_GLOBAL                     5: OPTIONAL
                        198     BUILD_TUPLE                     2
                        200     CONTAINS_OP                     0 (in)
                        202     POP_JUMP_IF_FALSE               119 (to 238)
                        204     LOAD_FAST                       2: arg_strings
                        206     UNPACK_SEQUENCE                 1
                        208     STORE_FAST                      4: arg_string
                        210     LOAD_DEREF                      1: self
                        212     LOAD_METHOD                     11: _get_value
                        214     LOAD_DEREF                      0: action
                        216     LOAD_FAST                       4: arg_string
                        218     CALL_METHOD                     2
                        220     STORE_FAST                      3: value
                        222     LOAD_DEREF                      1: self
                        224     LOAD_METHOD                     12: _check_value
                        226     LOAD_DEREF                      0: action
                        228     LOAD_FAST                       3: value
                        230     CALL_METHOD                     2
                        232     POP_TOP                         
                        234     LOAD_FAST                       3: value
                        236     RETURN_VALUE                    
                        238     LOAD_DEREF                      0: action
                        240     LOAD_ATTR                       0: nargs
                        242     LOAD_GLOBAL                     2: REMAINDER
                        244     COMPARE_OP                      2 (==)
                        246     POP_JUMP_IF_FALSE               136 (to 272)
                        248     LOAD_CLOSURE                    0: action
                        250     LOAD_CLOSURE                    1: self
                        252     BUILD_TUPLE                     2
                        254     LOAD_CONST                      3: <CODE> <listcomp>
                        256     LOAD_CONST                      4: 'ArgumentParser._get_values.<locals>.<listcomp>'
                        258     MAKE_FUNCTION                   8
                        260     LOAD_FAST                       2: arg_strings
                        262     GET_ITER                        
                        264     CALL_FUNCTION                   1
                        266     STORE_FAST                      3: value
                        268     LOAD_FAST                       3: value
                        270     RETURN_VALUE                    
                        272     LOAD_DEREF                      0: action
                        274     LOAD_ATTR                       0: nargs
                        276     LOAD_GLOBAL                     1: PARSER
                        278     COMPARE_OP                      2 (==)
                        280     POP_JUMP_IF_FALSE               161 (to 322)
                        282     LOAD_CLOSURE                    0: action
                        284     LOAD_CLOSURE                    1: self
                        286     BUILD_TUPLE                     2
                        288     LOAD_CONST                      5: <CODE> <listcomp>
                        290     LOAD_CONST                      4: 'ArgumentParser._get_values.<locals>.<listcomp>'
                        292     MAKE_FUNCTION                   8
                        294     LOAD_FAST                       2: arg_strings
                        296     GET_ITER                        
                        298     CALL_FUNCTION                   1
                        300     STORE_FAST                      3: value
                        302     LOAD_DEREF                      1: self
                        304     LOAD_METHOD                     12: _check_value
                        306     LOAD_DEREF                      0: action
                        308     LOAD_FAST                       3: value
                        310     LOAD_CONST                      6: 0
                        312     BINARY_SUBSCR                   
                        314     CALL_METHOD                     2
                        316     POP_TOP                         
                        318     LOAD_FAST                       3: value
                        320     RETURN_VALUE                    
                        322     LOAD_DEREF                      0: action
                        324     LOAD_ATTR                       0: nargs
                        326     LOAD_GLOBAL                     15: SUPPRESS
                        328     COMPARE_OP                      2 (==)
                        330     POP_JUMP_IF_FALSE               170 (to 340)
                        332     LOAD_GLOBAL                     15: SUPPRESS
                        334     STORE_FAST                      3: value
                        336     LOAD_FAST                       3: value
                        338     RETURN_VALUE                    
                        340     LOAD_CLOSURE                    0: action
                        342     LOAD_CLOSURE                    1: self
                        344     BUILD_TUPLE                     2
                        346     LOAD_CONST                      7: <CODE> <listcomp>
                        348     LOAD_CONST                      4: 'ArgumentParser._get_values.<locals>.<listcomp>'
                        350     MAKE_FUNCTION                   8
                        352     LOAD_FAST                       2: arg_strings
                        354     GET_ITER                        
                        356     CALL_FUNCTION                   1
                        358     STORE_FAST                      3: value
                        360     LOAD_FAST                       3: value
                        362     GET_ITER                        
                        364     FOR_ITER                        8 (to 382)
                        366     STORE_FAST                      5: v
                        368     LOAD_DEREF                      1: self
                        370     LOAD_METHOD                     12: _check_value
                        372     LOAD_DEREF                      0: action
                        374     LOAD_FAST                       5: v
                        376     CALL_METHOD                     2
                        378     POP_TOP                         
                        380     JUMP_ABSOLUTE                   182 (to 364)
                        382     LOAD_FAST                       3: value
                        384     RETURN_VALUE                    
                'ArgumentParser._get_values'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_value
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 9
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_registry_get'
                        'type'
                        'callable'
                        '_'
                        'ArgumentError'
                        'ArgumentTypeError'
                        'getattr'
                        'repr'
                        'str'
                        '_sys'
                        'exc_info'
                        'TypeError'
                        'ValueError'
                    [Var Names]
                        'self'
                        'action'
                        'arg_string'
                        'type_func'
                        'msg'
                        'result'
                        'name'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'type'
                        '%r is not callable'
                        '__name__'
                        1
                        (
                            'type'
                            'value'
                        )
                        'invalid %(type)s value: %(value)r'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _registry_get
                        4       LOAD_CONST                      1: 'type'
                        6       LOAD_FAST                       1: action
                        8       LOAD_ATTR                       1: type
                        10      LOAD_FAST                       1: action
                        12      LOAD_ATTR                       1: type
                        14      CALL_METHOD                     3
                        16      STORE_FAST                      3: type_func
                        18      LOAD_GLOBAL                     2: callable
                        20      LOAD_FAST                       3: type_func
                        22      CALL_FUNCTION                   1
                        24      POP_JUMP_IF_TRUE                24 (to 48)
                        26      LOAD_GLOBAL                     3: _
                        28      LOAD_CONST                      2: '%r is not callable'
                        30      CALL_FUNCTION                   1
                        32      STORE_FAST                      4: msg
                        34      LOAD_GLOBAL                     4: ArgumentError
                        36      LOAD_FAST                       1: action
                        38      LOAD_FAST                       4: msg
                        40      LOAD_FAST                       3: type_func
                        42      BINARY_MODULO                   
                        44      CALL_FUNCTION                   2
                        46      RAISE_VARARGS                   1
                        48      SETUP_FINALLY                   7 (to 64)
                        50      LOAD_FAST                       3: type_func
                        52      LOAD_FAST                       2: arg_string
                        54      CALL_FUNCTION                   1
                        56      STORE_FAST                      5: result
                        58      POP_BLOCK                       
                        60      LOAD_FAST                       5: result
                        62      RETURN_VALUE                    
                        64      DUP_TOP                         
                        66      LOAD_GLOBAL                     5: ArgumentTypeError
                        68      JUMP_IF_NOT_EXC_MATCH           61 (to 122)
                        70      POP_TOP                         
                        72      POP_TOP                         
                        74      POP_TOP                         
                        76      LOAD_GLOBAL                     6: getattr
                        78      LOAD_FAST                       1: action
                        80      LOAD_ATTR                       1: type
                        82      LOAD_CONST                      3: '__name__'
                        84      LOAD_GLOBAL                     7: repr
                        86      LOAD_FAST                       1: action
                        88      LOAD_ATTR                       1: type
                        90      CALL_FUNCTION                   1
                        92      CALL_FUNCTION                   3
                        94      STORE_FAST                      6: name
                        96      LOAD_GLOBAL                     8: str
                        98      LOAD_GLOBAL                     9: _sys
                        100     LOAD_METHOD                     10: exc_info
                        102     CALL_METHOD                     0
                        104     LOAD_CONST                      4: 1
                        106     BINARY_SUBSCR                   
                        108     CALL_FUNCTION                   1
                        110     STORE_FAST                      4: msg
                        112     LOAD_GLOBAL                     4: ArgumentError
                        114     LOAD_FAST                       1: action
                        116     LOAD_FAST                       4: msg
                        118     CALL_FUNCTION                   2
                        120     RAISE_VARARGS                   1
                        122     DUP_TOP                         
                        124     LOAD_GLOBAL                     11: TypeError
                        126     LOAD_GLOBAL                     12: ValueError
                        128     BUILD_TUPLE                     2
                        130     JUMP_IF_NOT_EXC_MATCH           95 (to 190)
                        132     POP_TOP                         
                        134     POP_TOP                         
                        136     POP_TOP                         
                        138     LOAD_GLOBAL                     6: getattr
                        140     LOAD_FAST                       1: action
                        142     LOAD_ATTR                       1: type
                        144     LOAD_CONST                      3: '__name__'
                        146     LOAD_GLOBAL                     7: repr
                        148     LOAD_FAST                       1: action
                        150     LOAD_ATTR                       1: type
                        152     CALL_FUNCTION                   1
                        154     CALL_FUNCTION                   3
                        156     STORE_FAST                      6: name
                        158     LOAD_FAST                       6: name
                        160     LOAD_FAST                       2: arg_string
                        162     LOAD_CONST                      5: ('type', 'value')
                        164     BUILD_CONST_KEY_MAP             2
                        166     STORE_FAST                      7: args
                        168     LOAD_GLOBAL                     3: _
                        170     LOAD_CONST                      6: 'invalid %(type)s value: %(value)r'
                        172     CALL_FUNCTION                   1
                        174     STORE_FAST                      4: msg
                        176     LOAD_GLOBAL                     4: ArgumentError
                        178     LOAD_FAST                       1: action
                        180     LOAD_FAST                       4: msg
                        182     LOAD_FAST                       7: args
                        184     BINARY_MODULO                   
                        186     CALL_FUNCTION                   2
                        188     RAISE_VARARGS                   1
                        190     RERAISE                         0
                'ArgumentParser._get_value'
                [Code]
                    File Name: argparse.py
                    Object Name: _check_value
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'choices'
                        'join'
                        'map'
                        'repr'
                        '_'
                        'ArgumentError'
                    [Var Names]
                        'self'
                        'action'
                        'value'
                        'args'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ', '
                        (
                            'value'
                            'choices'
                        )
                        'invalid choice: %(value)r (choose from %(choices)s)'
                    [Disassembly]
                        0       LOAD_FAST                       1: action
                        2       LOAD_ATTR                       0: choices
                        4       LOAD_CONST                      0: None
                        6       IS_OP                           1 (is not)
                        8       POP_JUMP_IF_FALSE               33 (to 66)
                        10      LOAD_FAST                       2: value
                        12      LOAD_FAST                       1: action
                        14      LOAD_ATTR                       0: choices
                        16      CONTAINS_OP                     1 (not in)
                        18      POP_JUMP_IF_FALSE               35 (to 70)
                        20      LOAD_FAST                       2: value
                        22      LOAD_CONST                      1: ', '
                        24      LOAD_METHOD                     1: join
                        26      LOAD_GLOBAL                     2: map
                        28      LOAD_GLOBAL                     3: repr
                        30      LOAD_FAST                       1: action
                        32      LOAD_ATTR                       0: choices
                        34      CALL_FUNCTION                   2
                        36      CALL_METHOD                     1
                        38      LOAD_CONST                      2: ('value', 'choices')
                        40      BUILD_CONST_KEY_MAP             2
                        42      STORE_FAST                      3: args
                        44      LOAD_GLOBAL                     4: _
                        46      LOAD_CONST                      3: 'invalid choice: %(value)r (choose from %(choices)s)'
                        48      CALL_FUNCTION                   1
                        50      STORE_FAST                      4: msg
                        52      LOAD_GLOBAL                     5: ArgumentError
                        54      LOAD_FAST                       1: action
                        56      LOAD_FAST                       4: msg
                        58      LOAD_FAST                       3: args
                        60      BINARY_MODULO                   
                        62      CALL_FUNCTION                   2
                        64      RAISE_VARARGS                   1
                        66      LOAD_CONST                      0: None
                        68      RETURN_VALUE                    
                        70      LOAD_CONST                      0: None
                        72      RETURN_VALUE                    
                'ArgumentParser._check_value'
                [Code]
                    File Name: argparse.py
                    Object Name: format_usage
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_get_formatter'
                        'add_usage'
                        'usage'
                        '_actions'
                        '_mutually_exclusive_groups'
                        'format_help'
                    [Var Names]
                        'self'
                        'formatter'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _get_formatter
                        4       CALL_METHOD                     0
                        6       STORE_FAST                      1: formatter
                        8       LOAD_FAST                       1: formatter
                        10      LOAD_METHOD                     1: add_usage
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: usage
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       3: _actions
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       4: _mutually_exclusive_groups
                        24      CALL_METHOD                     3
                        26      POP_TOP                         
                        28      LOAD_FAST                       1: formatter
                        30      LOAD_METHOD                     5: format_help
                        32      CALL_METHOD                     0
                        34      RETURN_VALUE                    
                'ArgumentParser.format_usage'
                [Code]
                    File Name: argparse.py
                    Object Name: format_help
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_get_formatter'
                        'add_usage'
                        'usage'
                        '_actions'
                        '_mutually_exclusive_groups'
                        'add_text'
                        'description'
                        '_action_groups'
                        'start_section'
                        'title'
                        'add_arguments'
                        '_group_actions'
                        'end_section'
                        'epilog'
                        'format_help'
                    [Var Names]
                        'self'
                        'formatter'
                        'action_group'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _get_formatter
                        4       CALL_METHOD                     0
                        6       STORE_FAST                      1: formatter
                        8       LOAD_FAST                       1: formatter
                        10      LOAD_METHOD                     1: add_usage
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: usage
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       3: _actions
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       4: _mutually_exclusive_groups
                        24      CALL_METHOD                     3
                        26      POP_TOP                         
                        28      LOAD_FAST                       1: formatter
                        30      LOAD_METHOD                     5: add_text
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       6: description
                        36      CALL_METHOD                     1
                        38      POP_TOP                         
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       7: _action_groups
                        44      GET_ITER                        
                        46      FOR_ITER                        24 (to 96)
                        48      STORE_FAST                      2: action_group
                        50      LOAD_FAST                       1: formatter
                        52      LOAD_METHOD                     8: start_section
                        54      LOAD_FAST                       2: action_group
                        56      LOAD_ATTR                       9: title
                        58      CALL_METHOD                     1
                        60      POP_TOP                         
                        62      LOAD_FAST                       1: formatter
                        64      LOAD_METHOD                     5: add_text
                        66      LOAD_FAST                       2: action_group
                        68      LOAD_ATTR                       6: description
                        70      CALL_METHOD                     1
                        72      POP_TOP                         
                        74      LOAD_FAST                       1: formatter
                        76      LOAD_METHOD                     10: add_arguments
                        78      LOAD_FAST                       2: action_group
                        80      LOAD_ATTR                       11: _group_actions
                        82      CALL_METHOD                     1
                        84      POP_TOP                         
                        86      LOAD_FAST                       1: formatter
                        88      LOAD_METHOD                     12: end_section
                        90      CALL_METHOD                     0
                        92      POP_TOP                         
                        94      JUMP_ABSOLUTE                   23 (to 46)
                        96      LOAD_FAST                       1: formatter
                        98      LOAD_METHOD                     5: add_text
                        100     LOAD_FAST                       0: self
                        102     LOAD_ATTR                       13: epilog
                        104     CALL_METHOD                     1
                        106     POP_TOP                         
                        108     LOAD_FAST                       1: formatter
                        110     LOAD_METHOD                     14: format_help
                        112     CALL_METHOD                     0
                        114     RETURN_VALUE                    
                'ArgumentParser.format_help'
                [Code]
                    File Name: argparse.py
                    Object Name: _get_formatter
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'formatter_class'
                        'prog'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            'prog'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: formatter_class
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: prog
                        8       LOAD_CONST                      1: ('prog',)
                        10      CALL_FUNCTION_KW                1
                        12      RETURN_VALUE                    
                'ArgumentParser._get_formatter'
                [Code]
                    File Name: argparse.py
                    Object Name: print_usage
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sys'
                        'stdout'
                        '_print_message'
                        'format_usage'
                    [Var Names]
                        'self'
                        'file'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: file
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: _sys
                        10      LOAD_ATTR                       1: stdout
                        12      STORE_FAST                      1: file
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     2: _print_message
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     3: format_usage
                        22      CALL_METHOD                     0
                        24      LOAD_FAST                       1: file
                        26      CALL_METHOD                     2
                        28      POP_TOP                         
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'ArgumentParser.print_usage'
                [Code]
                    File Name: argparse.py
                    Object Name: print_help
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sys'
                        'stdout'
                        '_print_message'
                        'format_help'
                    [Var Names]
                        'self'
                        'file'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: file
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: _sys
                        10      LOAD_ATTR                       1: stdout
                        12      STORE_FAST                      1: file
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     2: _print_message
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     3: format_help
                        22      CALL_METHOD                     0
                        24      LOAD_FAST                       1: file
                        26      CALL_METHOD                     2
                        28      POP_TOP                         
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'ArgumentParser.print_help'
                [Code]
                    File Name: argparse.py
                    Object Name: _print_message
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sys'
                        'stderr'
                        'write'
                    [Var Names]
                        'self'
                        'message'
                        'file'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: message
                        2       POP_JUMP_IF_FALSE               16 (to 32)
                        4       LOAD_FAST                       2: file
                        6       LOAD_CONST                      0: None
                        8       IS_OP                           0 (is)
                        10      POP_JUMP_IF_FALSE               9 (to 18)
                        12      LOAD_GLOBAL                     0: _sys
                        14      LOAD_ATTR                       1: stderr
                        16      STORE_FAST                      2: file
                        18      LOAD_FAST                       2: file
                        20      LOAD_METHOD                     2: write
                        22      LOAD_FAST                       1: message
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                        32      LOAD_CONST                      0: None
                        34      RETURN_VALUE                    
                'ArgumentParser._print_message'
                0
                [Code]
                    File Name: argparse.py
                    Object Name: exit
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_print_message'
                        '_sys'
                        'stderr'
                        'exit'
                    [Var Names]
                        'self'
                        'status'
                        'message'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       2: message
                        2       POP_JUMP_IF_FALSE               9 (to 18)
                        4       LOAD_FAST                       0: self
                        6       LOAD_METHOD                     0: _print_message
                        8       LOAD_FAST                       2: message
                        10      LOAD_GLOBAL                     1: _sys
                        12      LOAD_ATTR                       2: stderr
                        14      CALL_METHOD                     2
                        16      POP_TOP                         
                        18      LOAD_GLOBAL                     1: _sys
                        20      LOAD_METHOD                     3: exit
                        22      LOAD_FAST                       1: status
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                'ArgumentParser.exit'
                [Code]
                    File Name: argparse.py
                    Object Name: error
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'print_usage'
                        '_sys'
                        'stderr'
                        'prog'
                        'exit'
                        '_'
                    [Var Names]
                        'self'
                        'message'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'error(message: string)\n\n        Prints a usage message incorporating the message to stderr and\n        exits.\n\n        If you override this in a subclass, it should not return -- it\n        should either exit or raise an exception.\n        '
                        (
                            'prog'
                            'message'
                        )
                        2
                        '%(prog)s: error: %(message)s\n'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: print_usage
                        4       LOAD_GLOBAL                     1: _sys
                        6       LOAD_ATTR                       2: stderr
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: prog
                        16      LOAD_FAST                       1: message
                        18      LOAD_CONST                      1: ('prog', 'message')
                        20      BUILD_CONST_KEY_MAP             2
                        22      STORE_FAST                      2: args
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     4: exit
                        28      LOAD_CONST                      2: 2
                        30      LOAD_GLOBAL                     5: _
                        32      LOAD_CONST                      3: '%(prog)s: error: %(message)s\n'
                        34      CALL_FUNCTION                   1
                        36      LOAD_FAST                       2: args
                        38      BINARY_MODULO                   
                        40      CALL_METHOD                     2
                        42      POP_TOP                         
                        44      LOAD_CONST                      4: None
                        46      RETURN_VALUE                    
                'ArgumentParser.error'
                (
                    None
                    None
                )
                (
                    None
                )
                (
                    0
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ArgumentParser'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Object for parsing command line strings into Python objects.\n\n    Keyword Arguments:\n        - prog -- The name of the program (default:\n            ``os.path.basename(sys.argv[0])``)\n        - usage -- A usage message (default: auto-generated from arguments)\n        - description -- A description of what the program does\n        - epilog -- Text following the argument descriptions\n        - parents -- Parsers whose arguments should be copied into this one\n        - formatter_class -- HelpFormatter class for printing help messages\n        - prefix_chars -- Characters that prefix optional arguments\n        - fromfile_prefix_chars -- Characters that prefix files containing\n            additional arguments\n        - argument_default -- The default value for all arguments\n        - conflict_handler -- String indicating how to handle conflicts\n        - add_help -- Add a -h/-help option\n        - allow_abbrev -- Allow long options to be abbreviated unambiguously\n        - exit_on_error -- Determines whether or not ArgumentParser exits with\n            error info when an error occurs\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      LOAD_CONST                      2: None
                16      LOAD_CONST                      2: None
                18      LOAD_CONST                      2: None
                20      BUILD_LIST                      0
                22      LOAD_NAME                       4: HelpFormatter
                24      LOAD_CONST                      3: '-'
                26      LOAD_CONST                      2: None
                28      LOAD_CONST                      2: None
                30      LOAD_CONST                      4: 'error'
                32      LOAD_CONST                      5: True
                34      LOAD_CONST                      5: True
                36      LOAD_CONST                      5: True
                38      BUILD_TUPLE                     13
                40      LOAD_CLOSURE                    0: __class__
                42      BUILD_TUPLE                     1
                44      LOAD_CONST                      6: <CODE> __init__
                46      LOAD_CONST                      7: 'ArgumentParser.__init__'
                48      MAKE_FUNCTION                   9
                50      STORE_NAME                      5: __init__
                52      LOAD_CONST                      8: <CODE> _get_kwargs
                54      LOAD_CONST                      9: 'ArgumentParser._get_kwargs'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      6: _get_kwargs
                60      LOAD_CONST                      10: <CODE> add_subparsers
                62      LOAD_CONST                      11: 'ArgumentParser.add_subparsers'
                64      MAKE_FUNCTION                   0
                66      STORE_NAME                      7: add_subparsers
                68      LOAD_CONST                      12: <CODE> _add_action
                70      LOAD_CONST                      13: 'ArgumentParser._add_action'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      8: _add_action
                76      LOAD_CONST                      14: <CODE> _get_optional_actions
                78      LOAD_CONST                      15: 'ArgumentParser._get_optional_actions'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      9: _get_optional_actions
                84      LOAD_CONST                      16: <CODE> _get_positional_actions
                86      LOAD_CONST                      17: 'ArgumentParser._get_positional_actions'
                88      MAKE_FUNCTION                   0
                90      STORE_NAME                      10: _get_positional_actions
                92      LOAD_CONST                      65: (None, None)
                94      LOAD_CONST                      18: <CODE> parse_args
                96      LOAD_CONST                      19: 'ArgumentParser.parse_args'
                98      MAKE_FUNCTION                   1
                100     STORE_NAME                      11: parse_args
                102     LOAD_CONST                      65: (None, None)
                104     LOAD_CONST                      20: <CODE> parse_known_args
                106     LOAD_CONST                      21: 'ArgumentParser.parse_known_args'
                108     MAKE_FUNCTION                   1
                110     STORE_NAME                      12: parse_known_args
                112     LOAD_CONST                      22: <CODE> _parse_known_args
                114     LOAD_CONST                      23: 'ArgumentParser._parse_known_args'
                116     MAKE_FUNCTION                   0
                118     STORE_NAME                      13: _parse_known_args
                120     LOAD_CONST                      24: <CODE> _read_args_from_files
                122     LOAD_CONST                      25: 'ArgumentParser._read_args_from_files'
                124     MAKE_FUNCTION                   0
                126     STORE_NAME                      14: _read_args_from_files
                128     LOAD_CONST                      26: <CODE> convert_arg_line_to_args
                130     LOAD_CONST                      27: 'ArgumentParser.convert_arg_line_to_args'
                132     MAKE_FUNCTION                   0
                134     STORE_NAME                      15: convert_arg_line_to_args
                136     LOAD_CONST                      28: <CODE> _match_argument
                138     LOAD_CONST                      29: 'ArgumentParser._match_argument'
                140     MAKE_FUNCTION                   0
                142     STORE_NAME                      16: _match_argument
                144     LOAD_CONST                      30: <CODE> _match_arguments_partial
                146     LOAD_CONST                      31: 'ArgumentParser._match_arguments_partial'
                148     MAKE_FUNCTION                   0
                150     STORE_NAME                      17: _match_arguments_partial
                152     LOAD_CONST                      32: <CODE> _parse_optional
                154     LOAD_CONST                      33: 'ArgumentParser._parse_optional'
                156     MAKE_FUNCTION                   0
                158     STORE_NAME                      18: _parse_optional
                160     LOAD_CONST                      34: <CODE> _get_option_tuples
                162     LOAD_CONST                      35: 'ArgumentParser._get_option_tuples'
                164     MAKE_FUNCTION                   0
                166     STORE_NAME                      19: _get_option_tuples
                168     LOAD_CONST                      36: <CODE> _get_nargs_pattern
                170     LOAD_CONST                      37: 'ArgumentParser._get_nargs_pattern'
                172     MAKE_FUNCTION                   0
                174     STORE_NAME                      20: _get_nargs_pattern
                176     LOAD_CONST                      65: (None, None)
                178     LOAD_CONST                      38: <CODE> parse_intermixed_args
                180     LOAD_CONST                      39: 'ArgumentParser.parse_intermixed_args'
                182     MAKE_FUNCTION                   1
                184     STORE_NAME                      21: parse_intermixed_args
                186     LOAD_CONST                      65: (None, None)
                188     LOAD_CONST                      40: <CODE> parse_known_intermixed_args
                190     LOAD_CONST                      41: 'ArgumentParser.parse_known_intermixed_args'
                192     MAKE_FUNCTION                   1
                194     STORE_NAME                      22: parse_known_intermixed_args
                196     LOAD_CONST                      42: <CODE> _get_values
                198     LOAD_CONST                      43: 'ArgumentParser._get_values'
                200     MAKE_FUNCTION                   0
                202     STORE_NAME                      23: _get_values
                204     LOAD_CONST                      44: <CODE> _get_value
                206     LOAD_CONST                      45: 'ArgumentParser._get_value'
                208     MAKE_FUNCTION                   0
                210     STORE_NAME                      24: _get_value
                212     LOAD_CONST                      46: <CODE> _check_value
                214     LOAD_CONST                      47: 'ArgumentParser._check_value'
                216     MAKE_FUNCTION                   0
                218     STORE_NAME                      25: _check_value
                220     LOAD_CONST                      48: <CODE> format_usage
                222     LOAD_CONST                      49: 'ArgumentParser.format_usage'
                224     MAKE_FUNCTION                   0
                226     STORE_NAME                      26: format_usage
                228     LOAD_CONST                      50: <CODE> format_help
                230     LOAD_CONST                      51: 'ArgumentParser.format_help'
                232     MAKE_FUNCTION                   0
                234     STORE_NAME                      27: format_help
                236     LOAD_CONST                      52: <CODE> _get_formatter
                238     LOAD_CONST                      53: 'ArgumentParser._get_formatter'
                240     MAKE_FUNCTION                   0
                242     STORE_NAME                      28: _get_formatter
                244     LOAD_CONST                      66: (None,)
                246     LOAD_CONST                      54: <CODE> print_usage
                248     LOAD_CONST                      55: 'ArgumentParser.print_usage'
                250     MAKE_FUNCTION                   1
                252     STORE_NAME                      29: print_usage
                254     LOAD_CONST                      66: (None,)
                256     LOAD_CONST                      56: <CODE> print_help
                258     LOAD_CONST                      57: 'ArgumentParser.print_help'
                260     MAKE_FUNCTION                   1
                262     STORE_NAME                      30: print_help
                264     LOAD_CONST                      66: (None,)
                266     LOAD_CONST                      58: <CODE> _print_message
                268     LOAD_CONST                      59: 'ArgumentParser._print_message'
                270     MAKE_FUNCTION                   1
                272     STORE_NAME                      31: _print_message
                274     LOAD_CONST                      67: (0, None)
                276     LOAD_CONST                      61: <CODE> exit
                278     LOAD_CONST                      62: 'ArgumentParser.exit'
                280     MAKE_FUNCTION                   1
                282     STORE_NAME                      32: exit
                284     LOAD_CONST                      63: <CODE> error
                286     LOAD_CONST                      64: 'ArgumentParser.error'
                288     MAKE_FUNCTION                   0
                290     STORE_NAME                      33: error
                292     LOAD_CLOSURE                    0: __class__
                294     DUP_TOP                         
                296     STORE_NAME                      34: __classcell__
                298     RETURN_VALUE                    
        'ArgumentParser'
    [Disassembly]
        0       LOAD_CONST                      0: "Command-line parsing library\n\nThis module is an optparse-inspired command-line parsing library that:\n\n    - handles both optional and positional arguments\n    - produces highly informative usage messages\n    - supports parsers that dispatch to sub-parsers\n\nThe following is a simple usage example that sums integers from the\ncommand-line and writes the result to a file::\n\n    parser = argparse.ArgumentParser(\n        description='sum the integers at the command line')\n    parser.add_argument(\n        'integers', metavar='int', nargs='+', type=int,\n        help='an integer to be summed')\n    parser.add_argument(\n        '--log', default=sys.stdout, type=argparse.FileType('w'),\n        help='the file where the sum should be written')\n    args = parser.parse_args()\n    args.log.write('%s' % sum(args.integers))\n    args.log.close()\n\nThe module contains the following public classes:\n\n    - ArgumentParser -- The main entry point for command-line parsing. As the\n        example above shows, the add_argument() method is used to populate\n        the parser with actions for optional and positional arguments. Then\n        the parse_args() method is invoked to convert the args at the\n        command-line into an object with attributes.\n\n    - ArgumentError -- The exception raised by ArgumentParser objects when\n        there are errors with the parser's actions. Errors raised while\n        parsing the command-line are caught by ArgumentParser and emitted\n        as command-line messages.\n\n    - FileType -- A factory for defining types of files to be created. As the\n        example above shows, instances of FileType are typically passed as\n        the type= argument of add_argument() calls.\n\n    - Action -- The base class for parser actions. Typically actions are\n        selected by passing strings like 'store_true' or 'append_const' to\n        the action= argument of add_argument(). However, for greater\n        customization of ArgumentParser actions, subclasses of Action may\n        be defined and passed as the action= argument.\n\n    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,\n        ArgumentDefaultsHelpFormatter -- Formatter classes which\n        may be passed as the formatter_class= argument to the\n        ArgumentParser constructor. HelpFormatter is the default,\n        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser\n        not to change the formatting for help text, and\n        ArgumentDefaultsHelpFormatter adds information about argument defaults\n        to the help.\n\nAll other classes in this module are considered implementation details.\n(Also note that HelpFormatter and RawDescriptionHelpFormatter are only\nconsidered public as object names -- the API of the formatter objects is\nstill considered an implementation detail.)\n"
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: '1.1'
        6       STORE_NAME                      1: __version__
        8       BUILD_LIST                      0
        10      LOAD_CONST                      2: ('ArgumentParser', 'ArgumentError', 'ArgumentTypeError', 'BooleanOptionalAction', 'FileType', 'HelpFormatter', 'ArgumentDefaultsHelpFormatter', 'RawDescriptionHelpFormatter', 'RawTextHelpFormatter', 'MetavarTypeHelpFormatter', 'Namespace', 'Action', 'ONE_OR_MORE', 'OPTIONAL', 'PARSER', 'REMAINDER', 'SUPPRESS', 'ZERO_OR_MORE')
        12      LIST_EXTEND                     1
        14      STORE_NAME                      2: __all__
        16      LOAD_CONST                      3: 0
        18      LOAD_CONST                      4: None
        20      IMPORT_NAME                     3: os
        22      STORE_NAME                      4: _os
        24      LOAD_CONST                      3: 0
        26      LOAD_CONST                      4: None
        28      IMPORT_NAME                     5: re
        30      STORE_NAME                      6: _re
        32      LOAD_CONST                      3: 0
        34      LOAD_CONST                      4: None
        36      IMPORT_NAME                     7: sys
        38      STORE_NAME                      8: _sys
        40      SETUP_FINALLY                   10 (to 62)
        42      LOAD_CONST                      3: 0
        44      LOAD_CONST                      5: ('gettext', 'ngettext')
        46      IMPORT_NAME                     9: gettext
        48      IMPORT_FROM                     9: gettext
        50      STORE_NAME                      10: _
        52      IMPORT_FROM                     11: ngettext
        54      STORE_NAME                      11: ngettext
        56      POP_TOP                         
        58      POP_BLOCK                       
        60      JUMP_FORWARD                    17 (to 96)
        62      DUP_TOP                         
        64      LOAD_NAME                       12: ImportError
        66      JUMP_IF_NOT_EXC_MATCH           47 (to 94)
        68      POP_TOP                         
        70      POP_TOP                         
        72      POP_TOP                         
        74      LOAD_CONST                      6: <CODE> _
        76      LOAD_CONST                      7: '_'
        78      MAKE_FUNCTION                   0
        80      STORE_NAME                      10: _
        82      LOAD_CONST                      8: <CODE> ngettext
        84      LOAD_CONST                      9: 'ngettext'
        86      MAKE_FUNCTION                   0
        88      STORE_NAME                      11: ngettext
        90      POP_EXCEPT                      
        92      JUMP_FORWARD                    1 (to 96)
        94      RERAISE                         0
        96      LOAD_CONST                      10: '==SUPPRESS=='
        98      STORE_NAME                      13: SUPPRESS
        100     LOAD_CONST                      11: '?'
        102     STORE_NAME                      14: OPTIONAL
        104     LOAD_CONST                      12: '*'
        106     STORE_NAME                      15: ZERO_OR_MORE
        108     LOAD_CONST                      13: '+'
        110     STORE_NAME                      16: ONE_OR_MORE
        112     LOAD_CONST                      14: 'A...'
        114     STORE_NAME                      17: PARSER
        116     LOAD_CONST                      15: '...'
        118     STORE_NAME                      18: REMAINDER
        120     LOAD_CONST                      16: '_unrecognized_args'
        122     STORE_NAME                      19: _UNRECOGNIZED_ARGS_ATTR
        124     LOAD_BUILD_CLASS                
        126     LOAD_CONST                      17: <CODE> _AttributeHolder
        128     LOAD_CONST                      18: '_AttributeHolder'
        130     MAKE_FUNCTION                   0
        132     LOAD_CONST                      18: '_AttributeHolder'
        134     LOAD_NAME                       20: object
        136     CALL_FUNCTION                   3
        138     STORE_NAME                      21: _AttributeHolder
        140     LOAD_CONST                      19: <CODE> _copy_items
        142     LOAD_CONST                      20: '_copy_items'
        144     MAKE_FUNCTION                   0
        146     STORE_NAME                      22: _copy_items
        148     LOAD_BUILD_CLASS                
        150     LOAD_CONST                      21: <CODE> HelpFormatter
        152     LOAD_CONST                      22: 'HelpFormatter'
        154     MAKE_FUNCTION                   0
        156     LOAD_CONST                      22: 'HelpFormatter'
        158     LOAD_NAME                       20: object
        160     CALL_FUNCTION                   3
        162     STORE_NAME                      23: HelpFormatter
        164     LOAD_BUILD_CLASS                
        166     LOAD_CONST                      23: <CODE> RawDescriptionHelpFormatter
        168     LOAD_CONST                      24: 'RawDescriptionHelpFormatter'
        170     MAKE_FUNCTION                   0
        172     LOAD_CONST                      24: 'RawDescriptionHelpFormatter'
        174     LOAD_NAME                       23: HelpFormatter
        176     CALL_FUNCTION                   3
        178     STORE_NAME                      24: RawDescriptionHelpFormatter
        180     LOAD_BUILD_CLASS                
        182     LOAD_CONST                      25: <CODE> RawTextHelpFormatter
        184     LOAD_CONST                      26: 'RawTextHelpFormatter'
        186     MAKE_FUNCTION                   0
        188     LOAD_CONST                      26: 'RawTextHelpFormatter'
        190     LOAD_NAME                       24: RawDescriptionHelpFormatter
        192     CALL_FUNCTION                   3
        194     STORE_NAME                      25: RawTextHelpFormatter
        196     LOAD_BUILD_CLASS                
        198     LOAD_CONST                      27: <CODE> ArgumentDefaultsHelpFormatter
        200     LOAD_CONST                      28: 'ArgumentDefaultsHelpFormatter'
        202     MAKE_FUNCTION                   0
        204     LOAD_CONST                      28: 'ArgumentDefaultsHelpFormatter'
        206     LOAD_NAME                       23: HelpFormatter
        208     CALL_FUNCTION                   3
        210     STORE_NAME                      26: ArgumentDefaultsHelpFormatter
        212     LOAD_BUILD_CLASS                
        214     LOAD_CONST                      29: <CODE> MetavarTypeHelpFormatter
        216     LOAD_CONST                      30: 'MetavarTypeHelpFormatter'
        218     MAKE_FUNCTION                   0
        220     LOAD_CONST                      30: 'MetavarTypeHelpFormatter'
        222     LOAD_NAME                       23: HelpFormatter
        224     CALL_FUNCTION                   3
        226     STORE_NAME                      27: MetavarTypeHelpFormatter
        228     LOAD_CONST                      31: <CODE> _get_action_name
        230     LOAD_CONST                      32: '_get_action_name'
        232     MAKE_FUNCTION                   0
        234     STORE_NAME                      28: _get_action_name
        236     LOAD_BUILD_CLASS                
        238     LOAD_CONST                      33: <CODE> ArgumentError
        240     LOAD_CONST                      34: 'ArgumentError'
        242     MAKE_FUNCTION                   0
        244     LOAD_CONST                      34: 'ArgumentError'
        246     LOAD_NAME                       29: Exception
        248     CALL_FUNCTION                   3
        250     STORE_NAME                      30: ArgumentError
        252     LOAD_BUILD_CLASS                
        254     LOAD_CONST                      35: <CODE> ArgumentTypeError
        256     LOAD_CONST                      36: 'ArgumentTypeError'
        258     MAKE_FUNCTION                   0
        260     LOAD_CONST                      36: 'ArgumentTypeError'
        262     LOAD_NAME                       29: Exception
        264     CALL_FUNCTION                   3
        266     STORE_NAME                      31: ArgumentTypeError
        268     LOAD_BUILD_CLASS                
        270     LOAD_CONST                      37: <CODE> Action
        272     LOAD_CONST                      38: 'Action'
        274     MAKE_FUNCTION                   0
        276     LOAD_CONST                      38: 'Action'
        278     LOAD_NAME                       21: _AttributeHolder
        280     CALL_FUNCTION                   3
        282     STORE_NAME                      32: Action
        284     LOAD_BUILD_CLASS                
        286     LOAD_CONST                      39: <CODE> BooleanOptionalAction
        288     LOAD_CONST                      40: 'BooleanOptionalAction'
        290     MAKE_FUNCTION                   0
        292     LOAD_CONST                      40: 'BooleanOptionalAction'
        294     LOAD_NAME                       32: Action
        296     CALL_FUNCTION                   3
        298     STORE_NAME                      33: BooleanOptionalAction
        300     LOAD_BUILD_CLASS                
        302     LOAD_CONST                      41: <CODE> _StoreAction
        304     LOAD_CONST                      42: '_StoreAction'
        306     MAKE_FUNCTION                   0
        308     LOAD_CONST                      42: '_StoreAction'
        310     LOAD_NAME                       32: Action
        312     CALL_FUNCTION                   3
        314     STORE_NAME                      34: _StoreAction
        316     LOAD_BUILD_CLASS                
        318     LOAD_CONST                      43: <CODE> _StoreConstAction
        320     LOAD_CONST                      44: '_StoreConstAction'
        322     MAKE_FUNCTION                   0
        324     LOAD_CONST                      44: '_StoreConstAction'
        326     LOAD_NAME                       32: Action
        328     CALL_FUNCTION                   3
        330     STORE_NAME                      35: _StoreConstAction
        332     LOAD_BUILD_CLASS                
        334     LOAD_CONST                      45: <CODE> _StoreTrueAction
        336     LOAD_CONST                      46: '_StoreTrueAction'
        338     MAKE_FUNCTION                   0
        340     LOAD_CONST                      46: '_StoreTrueAction'
        342     LOAD_NAME                       35: _StoreConstAction
        344     CALL_FUNCTION                   3
        346     STORE_NAME                      36: _StoreTrueAction
        348     LOAD_BUILD_CLASS                
        350     LOAD_CONST                      47: <CODE> _StoreFalseAction
        352     LOAD_CONST                      48: '_StoreFalseAction'
        354     MAKE_FUNCTION                   0
        356     LOAD_CONST                      48: '_StoreFalseAction'
        358     LOAD_NAME                       35: _StoreConstAction
        360     CALL_FUNCTION                   3
        362     STORE_NAME                      37: _StoreFalseAction
        364     LOAD_BUILD_CLASS                
        366     LOAD_CONST                      49: <CODE> _AppendAction
        368     LOAD_CONST                      50: '_AppendAction'
        370     MAKE_FUNCTION                   0
        372     LOAD_CONST                      50: '_AppendAction'
        374     LOAD_NAME                       32: Action
        376     CALL_FUNCTION                   3
        378     STORE_NAME                      38: _AppendAction
        380     LOAD_BUILD_CLASS                
        382     LOAD_CONST                      51: <CODE> _AppendConstAction
        384     LOAD_CONST                      52: '_AppendConstAction'
        386     MAKE_FUNCTION                   0
        388     LOAD_CONST                      52: '_AppendConstAction'
        390     LOAD_NAME                       32: Action
        392     CALL_FUNCTION                   3
        394     STORE_NAME                      39: _AppendConstAction
        396     LOAD_BUILD_CLASS                
        398     LOAD_CONST                      53: <CODE> _CountAction
        400     LOAD_CONST                      54: '_CountAction'
        402     MAKE_FUNCTION                   0
        404     LOAD_CONST                      54: '_CountAction'
        406     LOAD_NAME                       32: Action
        408     CALL_FUNCTION                   3
        410     STORE_NAME                      40: _CountAction
        412     LOAD_BUILD_CLASS                
        414     LOAD_CONST                      55: <CODE> _HelpAction
        416     LOAD_CONST                      56: '_HelpAction'
        418     MAKE_FUNCTION                   0
        420     LOAD_CONST                      56: '_HelpAction'
        422     LOAD_NAME                       32: Action
        424     CALL_FUNCTION                   3
        426     STORE_NAME                      41: _HelpAction
        428     LOAD_BUILD_CLASS                
        430     LOAD_CONST                      57: <CODE> _VersionAction
        432     LOAD_CONST                      58: '_VersionAction'
        434     MAKE_FUNCTION                   0
        436     LOAD_CONST                      58: '_VersionAction'
        438     LOAD_NAME                       32: Action
        440     CALL_FUNCTION                   3
        442     STORE_NAME                      42: _VersionAction
        444     LOAD_BUILD_CLASS                
        446     LOAD_CONST                      59: <CODE> _SubParsersAction
        448     LOAD_CONST                      60: '_SubParsersAction'
        450     MAKE_FUNCTION                   0
        452     LOAD_CONST                      60: '_SubParsersAction'
        454     LOAD_NAME                       32: Action
        456     CALL_FUNCTION                   3
        458     STORE_NAME                      43: _SubParsersAction
        460     LOAD_BUILD_CLASS                
        462     LOAD_CONST                      61: <CODE> _ExtendAction
        464     LOAD_CONST                      62: '_ExtendAction'
        466     MAKE_FUNCTION                   0
        468     LOAD_CONST                      62: '_ExtendAction'
        470     LOAD_NAME                       38: _AppendAction
        472     CALL_FUNCTION                   3
        474     STORE_NAME                      44: _ExtendAction
        476     LOAD_BUILD_CLASS                
        478     LOAD_CONST                      63: <CODE> FileType
        480     LOAD_CONST                      64: 'FileType'
        482     MAKE_FUNCTION                   0
        484     LOAD_CONST                      64: 'FileType'
        486     LOAD_NAME                       20: object
        488     CALL_FUNCTION                   3
        490     STORE_NAME                      45: FileType
        492     LOAD_BUILD_CLASS                
        494     LOAD_CONST                      65: <CODE> Namespace
        496     LOAD_CONST                      66: 'Namespace'
        498     MAKE_FUNCTION                   0
        500     LOAD_CONST                      66: 'Namespace'
        502     LOAD_NAME                       21: _AttributeHolder
        504     CALL_FUNCTION                   3
        506     STORE_NAME                      46: Namespace
        508     LOAD_BUILD_CLASS                
        510     LOAD_CONST                      67: <CODE> _ActionsContainer
        512     LOAD_CONST                      68: '_ActionsContainer'
        514     MAKE_FUNCTION                   0
        516     LOAD_CONST                      68: '_ActionsContainer'
        518     LOAD_NAME                       20: object
        520     CALL_FUNCTION                   3
        522     STORE_NAME                      47: _ActionsContainer
        524     LOAD_BUILD_CLASS                
        526     LOAD_CONST                      69: <CODE> _ArgumentGroup
        528     LOAD_CONST                      70: '_ArgumentGroup'
        530     MAKE_FUNCTION                   0
        532     LOAD_CONST                      70: '_ArgumentGroup'
        534     LOAD_NAME                       47: _ActionsContainer
        536     CALL_FUNCTION                   3
        538     STORE_NAME                      48: _ArgumentGroup
        540     LOAD_BUILD_CLASS                
        542     LOAD_CONST                      71: <CODE> _MutuallyExclusiveGroup
        544     LOAD_CONST                      72: '_MutuallyExclusiveGroup'
        546     MAKE_FUNCTION                   0
        548     LOAD_CONST                      72: '_MutuallyExclusiveGroup'
        550     LOAD_NAME                       48: _ArgumentGroup
        552     CALL_FUNCTION                   3
        554     STORE_NAME                      49: _MutuallyExclusiveGroup
        556     LOAD_BUILD_CLASS                
        558     LOAD_CONST                      73: <CODE> ArgumentParser
        560     LOAD_CONST                      74: 'ArgumentParser'
        562     MAKE_FUNCTION                   0
        564     LOAD_CONST                      74: 'ArgumentParser'
        566     LOAD_NAME                       21: _AttributeHolder
        568     LOAD_NAME                       47: _ActionsContainer
        570     CALL_FUNCTION                   4
        572     STORE_NAME                      50: ArgumentParser
        574     LOAD_CONST                      4: None
        576     RETURN_VALUE                    
