headerregistry.pyc (Python 3.10)
[Code]
    File Name: email/headerregistry.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 5
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        'types'
        'MappingProxyType'
        'email'
        'utils'
        'errors'
        '_header_value_parser'
        'parser'
        'Address'
        'Group'
        'str'
        'BaseHeader'
        '_reconstruct_header'
        'UnstructuredHeader'
        'UniqueUnstructuredHeader'
        'DateHeader'
        'UniqueDateHeader'
        'AddressHeader'
        'UniqueAddressHeader'
        'SingleAddressHeader'
        'UniqueSingleAddressHeader'
        'MIMEVersionHeader'
        'ParameterizedMIMEHeader'
        'ContentTypeHeader'
        'ContentDispositionHeader'
        'ContentTransferEncodingHeader'
        'MessageIDHeader'
        '_default_header_map'
        'HeaderRegistry'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        'Representing and manipulating email headers via custom objects.\n\nThis module provides an implementation of the HeaderRegistry API.\nThe implementation is designed to flexibly follow RFC5322 rules.\n'
        0
        (
            'MappingProxyType'
        )
        (
            'utils'
        )
        (
            'errors'
        )
        (
            '_header_value_parser'
        )
        [Code]
            File Name: email/headerregistry.py
            Object Name: Address
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                'property'
                'display_name'
                'username'
                'domain'
                'addr_spec'
                '__repr__'
                '__str__'
                '__eq__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Address'
                ''
                None
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __init__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'join'
                        'filter'
                        'ValueError'
                        'TypeError'
                        'parser'
                        'get_addr_spec'
                        'format'
                        'all_defects'
                        'local_part'
                        'domain'
                        '_display_name'
                        '_username'
                        '_domain'
                    [Var Names]
                        'self'
                        'display_name'
                        'username'
                        'domain'
                        'addr_spec'
                        'inputs'
                        'a_s'
                        'rest'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Create an object representing a full email address.\n\n        An address can have a 'display_name', a 'username', and a 'domain'.  In\n        addition to specifying the username and domain separately, they may be\n        specified together by using the addr_spec keyword *instead of* the\n        username and domain keywords.  If an addr_spec string is specified it\n        must be properly quoted according to RFC 5322 rules; an error will be\n        raised if it is not.\n\n        An Address object has display_name, username, domain, and addr_spec\n        attributes, all of which are read-only.  The addr_spec and the string\n        value of the object are both quoted according to RFC5322 rules, but\n        without any Content Transfer Encoding.\n\n        "
                        ''
                        None
                        '\r'
                        '\n'
                        'invalid arguments; address parts cannot contain CR or LF'
                        'addrspec specified when username and/or domain also specified'
                        "Invalid addr_spec; only '{}' could be parsed from '{}'"
                        0
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_METHOD                     0: join
                        4       LOAD_GLOBAL                     1: filter
                        6       LOAD_CONST                      2: None
                        8       LOAD_FAST                       1: display_name
                        10      LOAD_FAST                       2: username
                        12      LOAD_FAST                       3: domain
                        14      LOAD_FAST                       4: addr_spec
                        16      BUILD_TUPLE                     4
                        18      CALL_FUNCTION                   2
                        20      CALL_METHOD                     1
                        22      STORE_FAST                      5: inputs
                        24      LOAD_CONST                      3: '\r'
                        26      LOAD_FAST                       5: inputs
                        28      CONTAINS_OP                     0 (in)
                        30      POP_JUMP_IF_TRUE                20 (to 40)
                        32      LOAD_CONST                      4: '\n'
                        34      LOAD_FAST                       5: inputs
                        36      CONTAINS_OP                     0 (in)
                        38      POP_JUMP_IF_FALSE               24 (to 48)
                        40      LOAD_GLOBAL                     2: ValueError
                        42      LOAD_CONST                      5: 'invalid arguments; address parts cannot contain CR or LF'
                        44      CALL_FUNCTION                   1
                        46      RAISE_VARARGS                   1
                        48      LOAD_FAST                       4: addr_spec
                        50      LOAD_CONST                      2: None
                        52      IS_OP                           1 (is not)
                        54      POP_JUMP_IF_FALSE               67 (to 134)
                        56      LOAD_FAST                       2: username
                        58      POP_JUMP_IF_TRUE                32 (to 64)
                        60      LOAD_FAST                       3: domain
                        62      POP_JUMP_IF_FALSE               36 (to 72)
                        64      LOAD_GLOBAL                     3: TypeError
                        66      LOAD_CONST                      6: 'addrspec specified when username and/or domain also specified'
                        68      CALL_FUNCTION                   1
                        70      RAISE_VARARGS                   1
                        72      LOAD_GLOBAL                     4: parser
                        74      LOAD_METHOD                     5: get_addr_spec
                        76      LOAD_FAST                       4: addr_spec
                        78      CALL_METHOD                     1
                        80      UNPACK_SEQUENCE                 2
                        82      STORE_FAST                      6: a_s
                        84      STORE_FAST                      7: rest
                        86      LOAD_FAST                       7: rest
                        88      POP_JUMP_IF_FALSE               53 (to 106)
                        90      LOAD_GLOBAL                     2: ValueError
                        92      LOAD_CONST                      7: "Invalid addr_spec; only '{}' could be parsed from '{}'"
                        94      LOAD_METHOD                     6: format
                        96      LOAD_FAST                       6: a_s
                        98      LOAD_FAST                       4: addr_spec
                        100     CALL_METHOD                     2
                        102     CALL_FUNCTION                   1
                        104     RAISE_VARARGS                   1
                        106     LOAD_FAST                       6: a_s
                        108     LOAD_ATTR                       7: all_defects
                        110     POP_JUMP_IF_FALSE               61 (to 122)
                        112     LOAD_FAST                       6: a_s
                        114     LOAD_ATTR                       7: all_defects
                        116     LOAD_CONST                      8: 0
                        118     BINARY_SUBSCR                   
                        120     RAISE_VARARGS                   1
                        122     LOAD_FAST                       6: a_s
                        124     LOAD_ATTR                       8: local_part
                        126     STORE_FAST                      2: username
                        128     LOAD_FAST                       6: a_s
                        130     LOAD_ATTR                       9: domain
                        132     STORE_FAST                      3: domain
                        134     LOAD_FAST                       1: display_name
                        136     LOAD_FAST                       0: self
                        138     STORE_ATTR                      10: _display_name
                        140     LOAD_FAST                       2: username
                        142     LOAD_FAST                       0: self
                        144     STORE_ATTR                      11: _username
                        146     LOAD_FAST                       3: domain
                        148     LOAD_FAST                       0: self
                        150     STORE_ATTR                      12: _domain
                        152     LOAD_CONST                      2: None
                        154     RETURN_VALUE                    
                'Address.__init__'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: display_name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_display_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _display_name
                        4       RETURN_VALUE                    
                'Address.display_name'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: username
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_username'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _username
                        4       RETURN_VALUE                    
                'Address.username'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: domain
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_domain'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _domain
                        4       RETURN_VALUE                    
                'Address.domain'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: addr_spec
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'username'
                        'parser'
                        'DOT_ATOM_ENDS'
                        'isdisjoint'
                        'quote_string'
                        'domain'
                    [Var Names]
                        'self'
                        'lp'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'The addr_spec (username@domain) portion of the address, quoted\n        according to RFC 5322 rules, but with no Content Transfer Encoding.\n        '
                        '@'
                        '<>'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: username
                        4       STORE_FAST                      1: lp
                        6       LOAD_GLOBAL                     1: parser
                        8       LOAD_ATTR                       2: DOT_ATOM_ENDS
                        10      LOAD_METHOD                     3: isdisjoint
                        12      LOAD_FAST                       1: lp
                        14      CALL_METHOD                     1
                        16      POP_JUMP_IF_TRUE                14 (to 28)
                        18      LOAD_GLOBAL                     1: parser
                        20      LOAD_METHOD                     4: quote_string
                        22      LOAD_FAST                       1: lp
                        24      CALL_METHOD                     1
                        26      STORE_FAST                      1: lp
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       5: domain
                        32      POP_JUMP_IF_FALSE               24 (to 48)
                        34      LOAD_FAST                       1: lp
                        36      LOAD_CONST                      1: '@'
                        38      BINARY_ADD                      
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       5: domain
                        44      BINARY_ADD                      
                        46      RETURN_VALUE                    
                        48      LOAD_FAST                       1: lp
                        50      POP_JUMP_IF_TRUE                28 (to 56)
                        52      LOAD_CONST                      2: '<>'
                        54      RETURN_VALUE                    
                        56      LOAD_FAST                       1: lp
                        58      RETURN_VALUE                    
                'Address.addr_spec'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'format'
                        '__class__'
                        '__name__'
                        'display_name'
                        'username'
                        'domain'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '{}(display_name={!r}, username={!r}, domain={!r})'
                    [Disassembly]
                        0       LOAD_CONST                      1: '{}(display_name={!r}, username={!r}, domain={!r})'
                        2       LOAD_METHOD                     0: format
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: __class__
                        8       LOAD_ATTR                       2: __name__
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       3: display_name
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       4: username
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       5: domain
                        22      CALL_METHOD                     4
                        24      RETURN_VALUE                    
                'Address.__repr__'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'display_name'
                        'parser'
                        'SPECIALS'
                        'isdisjoint'
                        'quote_string'
                        'addr_spec'
                        'format'
                    [Var Names]
                        'self'
                        'disp'
                        'addr_spec'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<>'
                        ''
                        '{} <{}>'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: display_name
                        4       STORE_FAST                      1: disp
                        6       LOAD_GLOBAL                     1: parser
                        8       LOAD_ATTR                       2: SPECIALS
                        10      LOAD_METHOD                     3: isdisjoint
                        12      LOAD_FAST                       1: disp
                        14      CALL_METHOD                     1
                        16      POP_JUMP_IF_TRUE                14 (to 28)
                        18      LOAD_GLOBAL                     1: parser
                        20      LOAD_METHOD                     4: quote_string
                        22      LOAD_FAST                       1: disp
                        24      CALL_METHOD                     1
                        26      STORE_FAST                      1: disp
                        28      LOAD_FAST                       1: disp
                        30      POP_JUMP_IF_FALSE               32 (to 64)
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       5: addr_spec
                        36      LOAD_CONST                      1: '<>'
                        38      COMPARE_OP                      2 (==)
                        40      POP_JUMP_IF_FALSE               23 (to 46)
                        42      LOAD_CONST                      2: ''
                        44      JUMP_FORWARD                    2 (to 50)
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       5: addr_spec
                        50      STORE_FAST                      2: addr_spec
                        52      LOAD_CONST                      3: '{} <{}>'
                        54      LOAD_METHOD                     6: format
                        56      LOAD_FAST                       1: disp
                        58      LOAD_FAST                       2: addr_spec
                        60      CALL_METHOD                     2
                        62      RETURN_VALUE                    
                        64      LOAD_FAST                       0: self
                        66      LOAD_ATTR                       5: addr_spec
                        68      RETURN_VALUE                    
                'Address.__str__'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'Address'
                        'NotImplemented'
                        'display_name'
                        'username'
                        'domain'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: Address
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: display_name
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       3: display_name
                        22      COMPARE_OP                      2 (==)
                        24      JUMP_IF_FALSE_OR_POP            24 (to 48)
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       4: username
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       4: username
                        34      COMPARE_OP                      2 (==)
                        36      JUMP_IF_FALSE_OR_POP            24 (to 48)
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       5: domain
                        42      LOAD_FAST                       1: other
                        44      LOAD_ATTR                       5: domain
                        46      COMPARE_OP                      2 (==)
                        48      RETURN_VALUE                    
                'Address.__eq__'
                (
                    ''
                    ''
                    ''
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Address'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      19: ('', '', '', None)
                10      LOAD_CONST                      3: <CODE> __init__
                12      LOAD_CONST                      4: 'Address.__init__'
                14      MAKE_FUNCTION                   1
                16      STORE_NAME                      3: __init__
                18      LOAD_NAME                       4: property
                20      LOAD_CONST                      5: <CODE> display_name
                22      LOAD_CONST                      6: 'Address.display_name'
                24      MAKE_FUNCTION                   0
                26      CALL_FUNCTION                   1
                28      STORE_NAME                      5: display_name
                30      LOAD_NAME                       4: property
                32      LOAD_CONST                      7: <CODE> username
                34      LOAD_CONST                      8: 'Address.username'
                36      MAKE_FUNCTION                   0
                38      CALL_FUNCTION                   1
                40      STORE_NAME                      6: username
                42      LOAD_NAME                       4: property
                44      LOAD_CONST                      9: <CODE> domain
                46      LOAD_CONST                      10: 'Address.domain'
                48      MAKE_FUNCTION                   0
                50      CALL_FUNCTION                   1
                52      STORE_NAME                      7: domain
                54      LOAD_NAME                       4: property
                56      LOAD_CONST                      11: <CODE> addr_spec
                58      LOAD_CONST                      12: 'Address.addr_spec'
                60      MAKE_FUNCTION                   0
                62      CALL_FUNCTION                   1
                64      STORE_NAME                      8: addr_spec
                66      LOAD_CONST                      13: <CODE> __repr__
                68      LOAD_CONST                      14: 'Address.__repr__'
                70      MAKE_FUNCTION                   0
                72      STORE_NAME                      9: __repr__
                74      LOAD_CONST                      15: <CODE> __str__
                76      LOAD_CONST                      16: 'Address.__str__'
                78      MAKE_FUNCTION                   0
                80      STORE_NAME                      10: __str__
                82      LOAD_CONST                      17: <CODE> __eq__
                84      LOAD_CONST                      18: 'Address.__eq__'
                86      MAKE_FUNCTION                   0
                88      STORE_NAME                      11: __eq__
                90      LOAD_CONST                      2: None
                92      RETURN_VALUE                    
        'Address'
        [Code]
            File Name: email/headerregistry.py
            Object Name: Group
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                'property'
                'display_name'
                'addresses'
                '__repr__'
                '__str__'
                '__eq__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Group'
                None
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_display_name'
                        'tuple'
                        '_addresses'
                    [Var Names]
                        'self'
                        'display_name'
                        'addresses'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Create an object representing an address group.\n\n        An address group consists of a display_name followed by colon and a\n        list of addresses (see Address) terminated by a semi-colon.  The Group\n        is created by specifying a display_name and a possibly empty list of\n        Address objects.  A Group can also be used to represent a single\n        address that is not in a group, which is convenient when manipulating\n        lists that are a combination of Groups and individual Addresses.  In\n        this case the display_name should be set to None.  In particular, the\n        string representation of a Group whose display_name is None is the same\n        as the Address object, if there is one and only one Address object in\n        the addresses list.\n\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: display_name
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _display_name
                        6       LOAD_FAST                       2: addresses
                        8       POP_JUMP_IF_FALSE               12 (to 24)
                        10      LOAD_GLOBAL                     1: tuple
                        12      LOAD_FAST                       2: addresses
                        14      CALL_FUNCTION                   1
                        16      LOAD_FAST                       0: self
                        18      STORE_ATTR                      2: _addresses
                        20      LOAD_CONST                      1: None
                        22      RETURN_VALUE                    
                        24      LOAD_GLOBAL                     1: tuple
                        26      CALL_FUNCTION                   0
                        28      LOAD_FAST                       0: self
                        30      STORE_ATTR                      2: _addresses
                        32      LOAD_CONST                      1: None
                        34      RETURN_VALUE                    
                'Group.__init__'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: display_name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_display_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _display_name
                        4       RETURN_VALUE                    
                'Group.display_name'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: addresses
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_addresses'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _addresses
                        4       RETURN_VALUE                    
                'Group.addresses'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'format'
                        '__class__'
                        '__name__'
                        'display_name'
                        'addresses'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '{}(display_name={!r}, addresses={!r}'
                    [Disassembly]
                        0       LOAD_CONST                      1: '{}(display_name={!r}, addresses={!r}'
                        2       LOAD_METHOD                     0: format
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: __class__
                        8       LOAD_ATTR                       2: __name__
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       3: display_name
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       4: addresses
                        18      CALL_METHOD                     3
                        20      RETURN_VALUE                    
                'Group.__repr__'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'display_name'
                        'len'
                        'addresses'
                        'str'
                        'parser'
                        'SPECIALS'
                        'isdisjoint'
                        'quote_string'
                        'join'
                        'format'
                    [Var Names]
                        'self'
                        'disp'
                        'adrstr'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                        0
                        ', '
                        [Code]
                            File Name: email/headerregistry.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'str'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: x
                                8       LOAD_GLOBAL                     0: str
                                10      LOAD_FAST                       1: x
                                12      CALL_FUNCTION                   1
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'Group.__str__.<locals>.<genexpr>'
                        ' '
                        '{}:{};'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: display_name
                        4       LOAD_CONST                      0: None
                        6       IS_OP                           0 (is)
                        8       POP_JUMP_IF_FALSE               19 (to 38)
                        10      LOAD_GLOBAL                     1: len
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: addresses
                        16      CALL_FUNCTION                   1
                        18      LOAD_CONST                      1: 1
                        20      COMPARE_OP                      2 (==)
                        22      POP_JUMP_IF_FALSE               19 (to 38)
                        24      LOAD_GLOBAL                     3: str
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       2: addresses
                        30      LOAD_CONST                      2: 0
                        32      BINARY_SUBSCR                   
                        34      CALL_FUNCTION                   1
                        36      RETURN_VALUE                    
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       0: display_name
                        42      STORE_FAST                      1: disp
                        44      LOAD_FAST                       1: disp
                        46      LOAD_CONST                      0: None
                        48      IS_OP                           1 (is not)
                        50      POP_JUMP_IF_FALSE               37 (to 74)
                        52      LOAD_GLOBAL                     4: parser
                        54      LOAD_ATTR                       5: SPECIALS
                        56      LOAD_METHOD                     6: isdisjoint
                        58      LOAD_FAST                       1: disp
                        60      CALL_METHOD                     1
                        62      POP_JUMP_IF_TRUE                37 (to 74)
                        64      LOAD_GLOBAL                     4: parser
                        66      LOAD_METHOD                     7: quote_string
                        68      LOAD_FAST                       1: disp
                        70      CALL_METHOD                     1
                        72      STORE_FAST                      1: disp
                        74      LOAD_CONST                      3: ', '
                        76      LOAD_METHOD                     8: join
                        78      LOAD_CONST                      4: <CODE> <genexpr>
                        80      LOAD_CONST                      5: 'Group.__str__.<locals>.<genexpr>'
                        82      MAKE_FUNCTION                   0
                        84      LOAD_FAST                       0: self
                        86      LOAD_ATTR                       2: addresses
                        88      GET_ITER                        
                        90      CALL_FUNCTION                   1
                        92      CALL_METHOD                     1
                        94      STORE_FAST                      2: adrstr
                        96      LOAD_FAST                       2: adrstr
                        98      POP_JUMP_IF_FALSE               54 (to 108)
                        100     LOAD_CONST                      6: ' '
                        102     LOAD_FAST                       2: adrstr
                        104     BINARY_ADD                      
                        106     JUMP_FORWARD                    1 (to 110)
                        108     LOAD_FAST                       2: adrstr
                        110     STORE_FAST                      2: adrstr
                        112     LOAD_CONST                      7: '{}:{};'
                        114     LOAD_METHOD                     9: format
                        116     LOAD_FAST                       1: disp
                        118     LOAD_FAST                       2: adrstr
                        120     CALL_METHOD                     2
                        122     RETURN_VALUE                    
                'Group.__str__'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'Group'
                        'NotImplemented'
                        'display_name'
                        'addresses'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: Group
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: display_name
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       3: display_name
                        22      COMPARE_OP                      2 (==)
                        24      JUMP_IF_FALSE_OR_POP            18 (to 36)
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       4: addresses
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       4: addresses
                        34      COMPARE_OP                      2 (==)
                        36      RETURN_VALUE                    
                'Group.__eq__'
                (
                    None
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Group'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      14: (None, None)
                10      LOAD_CONST                      2: <CODE> __init__
                12      LOAD_CONST                      3: 'Group.__init__'
                14      MAKE_FUNCTION                   1
                16      STORE_NAME                      3: __init__
                18      LOAD_NAME                       4: property
                20      LOAD_CONST                      4: <CODE> display_name
                22      LOAD_CONST                      5: 'Group.display_name'
                24      MAKE_FUNCTION                   0
                26      CALL_FUNCTION                   1
                28      STORE_NAME                      5: display_name
                30      LOAD_NAME                       4: property
                32      LOAD_CONST                      6: <CODE> addresses
                34      LOAD_CONST                      7: 'Group.addresses'
                36      MAKE_FUNCTION                   0
                38      CALL_FUNCTION                   1
                40      STORE_NAME                      6: addresses
                42      LOAD_CONST                      8: <CODE> __repr__
                44      LOAD_CONST                      9: 'Group.__repr__'
                46      MAKE_FUNCTION                   0
                48      STORE_NAME                      7: __repr__
                50      LOAD_CONST                      10: <CODE> __str__
                52      LOAD_CONST                      11: 'Group.__str__'
                54      MAKE_FUNCTION                   0
                56      STORE_NAME                      8: __str__
                58      LOAD_CONST                      12: <CODE> __eq__
                60      LOAD_CONST                      13: 'Group.__eq__'
                62      MAKE_FUNCTION                   0
                64      STORE_NAME                      9: __eq__
                66      LOAD_CONST                      1: None
                68      RETURN_VALUE                    
        'Group'
        [Code]
            File Name: email/headerregistry.py
            Object Name: BaseHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__new__'
                'init'
                'property'
                'name'
                'defects'
                '__reduce__'
                'classmethod'
                '_reconstruct'
                'fold'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'BaseHeader'
                "Base class for message headers.\n\n    Implements generic behavior and provides tools for subclasses.\n\n    A subclass must define a classmethod named 'parse' that takes an unfolded\n    value string and a dictionary as its arguments.  The dictionary will\n    contain one key, 'defects', initialized to an empty list.  After the call\n    the dictionary must contain two additional keys: parse_tree, set to the\n    parse tree obtained from parsing the header, and 'decoded', set to the\n    string value of the idealized representation of the data from the value.\n    (That is, encoded words are decoded, and values that have canonical\n    representations are so represented.)\n\n    The defects key is intended to collect parsing defects, which the message\n    parser will subsequently dispose of as appropriate.  The parser should not,\n    insofar as practical, raise any errors.  Defects should be added to the\n    list instead.  The standard header parsers register defects for RFC\n    compliance issues, for obsolete RFC syntax, and for unrecoverable parsing\n    errors.\n\n    The parse method may add additional keys to the dictionary.  In this case\n    the subclass must define an 'init' method, which will be passed the\n    dictionary as its keyword arguments.  The method should use (usually by\n    setting them as the value of similarly named attributes) and remove all the\n    extra keys added by its parse method, and then use super to call its parent\n    class with the remaining arguments and keywords.\n\n    The subclass should also make sure that a 'max_count' attribute is defined\n    that is either None or 1. XXX: need to better define this API.\n\n    "
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __new__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'parse'
                        'utils'
                        '_has_surrogates'
                        '_sanitize'
                        'str'
                        '__new__'
                        'init'
                    [Var Names]
                        'cls'
                        'name'
                        'value'
                        'kwds'
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'defects'
                        'decoded'
                    [Disassembly]
                        0       LOAD_CONST                      1: 'defects'
                        2       BUILD_LIST                      0
                        4       BUILD_MAP                       1
                        6       STORE_FAST                      3: kwds
                        8       LOAD_FAST                       0: cls
                        10      LOAD_METHOD                     0: parse
                        12      LOAD_FAST                       2: value
                        14      LOAD_FAST                       3: kwds
                        16      CALL_METHOD                     2
                        18      POP_TOP                         
                        20      LOAD_GLOBAL                     1: utils
                        22      LOAD_METHOD                     2: _has_surrogates
                        24      LOAD_FAST                       3: kwds
                        26      LOAD_CONST                      2: 'decoded'
                        28      BINARY_SUBSCR                   
                        30      CALL_METHOD                     1
                        32      POP_JUMP_IF_FALSE               26 (to 52)
                        34      LOAD_GLOBAL                     1: utils
                        36      LOAD_METHOD                     3: _sanitize
                        38      LOAD_FAST                       3: kwds
                        40      LOAD_CONST                      2: 'decoded'
                        42      BINARY_SUBSCR                   
                        44      CALL_METHOD                     1
                        46      LOAD_FAST                       3: kwds
                        48      LOAD_CONST                      2: 'decoded'
                        50      STORE_SUBSCR                    
                        52      LOAD_GLOBAL                     4: str
                        54      LOAD_METHOD                     5: __new__
                        56      LOAD_FAST                       0: cls
                        58      LOAD_FAST                       3: kwds
                        60      LOAD_CONST                      2: 'decoded'
                        62      BINARY_SUBSCR                   
                        64      CALL_METHOD                     2
                        66      STORE_FAST                      4: self
                        68      LOAD_FAST                       3: kwds
                        70      LOAD_CONST                      2: 'decoded'
                        72      DELETE_SUBSCR                   
                        74      LOAD_FAST                       4: self
                        76      LOAD_ATTR                       6: init
                        78      LOAD_FAST                       1: name
                        80      BUILD_TUPLE                     1
                        82      BUILD_MAP                       0
                        84      LOAD_FAST                       3: kwds
                        86      DICT_MERGE                      1
                        88      CALL_FUNCTION_EX                1
                        90      POP_TOP                         
                        92      LOAD_FAST                       4: self
                        94      RETURN_VALUE                    
                'BaseHeader.__new__'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: init
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 2
                    Locals: 4
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                        '_parse_tree'
                        '_defects'
                    [Var Names]
                        'self'
                        'name'
                        'parse_tree'
                        'defects'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: name
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _name
                        6       LOAD_FAST                       2: parse_tree
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _parse_tree
                        12      LOAD_FAST                       3: defects
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: _defects
                        18      LOAD_CONST                      0: None
                        20      RETURN_VALUE                    
                'BaseHeader.init'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _name
                        4       RETURN_VALUE                    
                'BaseHeader.name'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: defects
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'tuple'
                        '_defects'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: tuple
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _defects
                        6       CALL_FUNCTION                   1
                        8       RETURN_VALUE                    
                'BaseHeader.defects'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_reconstruct_header'
                        '__class__'
                        '__name__'
                        '__bases__'
                        'str'
                        '__dict__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _reconstruct_header
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: __class__
                        6       LOAD_ATTR                       2: __name__
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: __class__
                        12      LOAD_ATTR                       3: __bases__
                        14      LOAD_GLOBAL                     4: str
                        16      LOAD_FAST                       0: self
                        18      CALL_FUNCTION                   1
                        20      BUILD_TUPLE                     3
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       5: __dict__
                        26      BUILD_TUPLE                     3
                        28      RETURN_VALUE                    
                'BaseHeader.__reduce__'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: _reconstruct
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'str'
                        '__new__'
                    [Var Names]
                        'cls'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: str
                        2       LOAD_METHOD                     1: __new__
                        4       LOAD_FAST                       0: cls
                        6       LOAD_FAST                       1: value
                        8       CALL_METHOD                     2
                        10      RETURN_VALUE                    
                'BaseHeader._reconstruct'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: fold
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 3
                    Stack Size: 9
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'parser'
                        'Header'
                        'HeaderLabel'
                        'ValueTerminal'
                        'name'
                        '_parse_tree'
                        'append'
                        'CFWSList'
                        'WhiteSpaceTerminal'
                        'fold'
                    [Var Names]
                        'self'
                        'policy'
                        'header'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Fold header according to policy.\n\n        The parsed representation of the header is folded according to\n        RFC5322 rules, as modified by the policy.  If the parse tree\n        contains surrogateescaped bytes, the bytes are CTE encoded using\n        the charset \'unknown-8bit".\n\n        Any non-ASCII characters in the parse tree are CTE encoded using\n        charset utf-8. XXX: make this a policy setting.\n\n        The returned value is an ASCII-only string possibly containing linesep\n        characters, and ending with a linesep character.  The string includes\n        the header name and the \': \' separator.\n\n        '
                        'header-name'
                        ':'
                        'header-sep'
                        ' '
                        'fws'
                        (
                            'policy'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: parser
                        2       LOAD_METHOD                     1: Header
                        4       LOAD_GLOBAL                     0: parser
                        6       LOAD_METHOD                     2: HeaderLabel
                        8       LOAD_GLOBAL                     0: parser
                        10      LOAD_METHOD                     3: ValueTerminal
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       4: name
                        16      LOAD_CONST                      1: 'header-name'
                        18      CALL_METHOD                     2
                        20      LOAD_GLOBAL                     0: parser
                        22      LOAD_METHOD                     3: ValueTerminal
                        24      LOAD_CONST                      2: ':'
                        26      LOAD_CONST                      3: 'header-sep'
                        28      CALL_METHOD                     2
                        30      BUILD_LIST                      2
                        32      CALL_METHOD                     1
                        34      BUILD_LIST                      1
                        36      CALL_METHOD                     1
                        38      STORE_FAST                      2: header
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       5: _parse_tree
                        44      POP_JUMP_IF_FALSE               36 (to 72)
                        46      LOAD_FAST                       2: header
                        48      LOAD_METHOD                     6: append
                        50      LOAD_GLOBAL                     0: parser
                        52      LOAD_METHOD                     7: CFWSList
                        54      LOAD_GLOBAL                     0: parser
                        56      LOAD_METHOD                     8: WhiteSpaceTerminal
                        58      LOAD_CONST                      4: ' '
                        60      LOAD_CONST                      5: 'fws'
                        62      CALL_METHOD                     2
                        64      BUILD_LIST                      1
                        66      CALL_METHOD                     1
                        68      CALL_METHOD                     1
                        70      POP_TOP                         
                        72      LOAD_FAST                       2: header
                        74      LOAD_METHOD                     6: append
                        76      LOAD_FAST                       0: self
                        78      LOAD_ATTR                       5: _parse_tree
                        80      CALL_METHOD                     1
                        82      POP_TOP                         
                        84      LOAD_FAST                       2: header
                        86      LOAD_ATTR                       9: fold
                        88      LOAD_FAST                       1: policy
                        90      LOAD_CONST                      6: ('policy',)
                        92      CALL_FUNCTION_KW                1
                        94      RETURN_VALUE                    
                'BaseHeader.fold'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'BaseHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Base class for message headers.\n\n    Implements generic behavior and provides tools for subclasses.\n\n    A subclass must define a classmethod named 'parse' that takes an unfolded\n    value string and a dictionary as its arguments.  The dictionary will\n    contain one key, 'defects', initialized to an empty list.  After the call\n    the dictionary must contain two additional keys: parse_tree, set to the\n    parse tree obtained from parsing the header, and 'decoded', set to the\n    string value of the idealized representation of the data from the value.\n    (That is, encoded words are decoded, and values that have canonical\n    representations are so represented.)\n\n    The defects key is intended to collect parsing defects, which the message\n    parser will subsequently dispose of as appropriate.  The parser should not,\n    insofar as practical, raise any errors.  Defects should be added to the\n    list instead.  The standard header parsers register defects for RFC\n    compliance issues, for obsolete RFC syntax, and for unrecoverable parsing\n    errors.\n\n    The parse method may add additional keys to the dictionary.  In this case\n    the subclass must define an 'init' method, which will be passed the\n    dictionary as its keyword arguments.  The method should use (usually by\n    setting them as the value of similarly named attributes) and remove all the\n    extra keys added by its parse method, and then use super to call its parent\n    class with the remaining arguments and keywords.\n\n    The subclass should also make sure that a 'max_count' attribute is defined\n    that is either None or 1. XXX: need to better define this API.\n\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __new__
                14      LOAD_CONST                      3: 'BaseHeader.__new__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __new__
                20      LOAD_CONST                      4: <CODE> init
                22      LOAD_CONST                      5: 'BaseHeader.init'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: init
                28      LOAD_NAME                       6: property
                30      LOAD_CONST                      6: <CODE> name
                32      LOAD_CONST                      7: 'BaseHeader.name'
                34      MAKE_FUNCTION                   0
                36      CALL_FUNCTION                   1
                38      STORE_NAME                      7: name
                40      LOAD_NAME                       6: property
                42      LOAD_CONST                      8: <CODE> defects
                44      LOAD_CONST                      9: 'BaseHeader.defects'
                46      MAKE_FUNCTION                   0
                48      CALL_FUNCTION                   1
                50      STORE_NAME                      8: defects
                52      LOAD_CONST                      10: <CODE> __reduce__
                54      LOAD_CONST                      11: 'BaseHeader.__reduce__'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      9: __reduce__
                60      LOAD_NAME                       10: classmethod
                62      LOAD_CONST                      12: <CODE> _reconstruct
                64      LOAD_CONST                      13: 'BaseHeader._reconstruct'
                66      MAKE_FUNCTION                   0
                68      CALL_FUNCTION                   1
                70      STORE_NAME                      11: _reconstruct
                72      LOAD_CONST                      14: <CODE> fold
                74      LOAD_CONST                      15: 'BaseHeader.fold'
                76      MAKE_FUNCTION                   0
                78      STORE_NAME                      12: fold
                80      LOAD_CONST                      16: None
                82      RETURN_VALUE                    
        'BaseHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: _reconstruct_header
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'type'
                '_reconstruct'
            [Var Names]
                'cls_name'
                'bases'
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: type
                2       LOAD_FAST                       0: cls_name
                4       LOAD_FAST                       1: bases
                6       BUILD_MAP                       0
                8       CALL_FUNCTION                   3
                10      LOAD_METHOD                     1: _reconstruct
                12      LOAD_FAST                       2: value
                14      CALL_METHOD                     1
                16      RETURN_VALUE                    
        '_reconstruct_header'
        [Code]
            File Name: email/headerregistry.py
            Object Name: UnstructuredHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'max_count'
                'staticmethod'
                'parser'
                'get_unstructured'
                'value_parser'
                'classmethod'
                'parse'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'UnstructuredHeader'
                None
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: parse
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'value_parser'
                        'str'
                    [Var Names]
                        'cls'
                        'value'
                        'kwds'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'parse_tree'
                        'decoded'
                    [Disassembly]
                        0       LOAD_FAST                       0: cls
                        2       LOAD_METHOD                     0: value_parser
                        4       LOAD_FAST                       1: value
                        6       CALL_METHOD                     1
                        8       LOAD_FAST                       2: kwds
                        10      LOAD_CONST                      1: 'parse_tree'
                        12      STORE_SUBSCR                    
                        14      LOAD_GLOBAL                     1: str
                        16      LOAD_FAST                       2: kwds
                        18      LOAD_CONST                      1: 'parse_tree'
                        20      BINARY_SUBSCR                   
                        22      CALL_FUNCTION                   1
                        24      LOAD_FAST                       2: kwds
                        26      LOAD_CONST                      2: 'decoded'
                        28      STORE_SUBSCR                    
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'UnstructuredHeader.parse'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'UnstructuredHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: None
                10      STORE_NAME                      3: max_count
                12      LOAD_NAME                       4: staticmethod
                14      LOAD_NAME                       5: parser
                16      LOAD_ATTR                       6: get_unstructured
                18      CALL_FUNCTION                   1
                20      STORE_NAME                      7: value_parser
                22      LOAD_NAME                       8: classmethod
                24      LOAD_CONST                      2: <CODE> parse
                26      LOAD_CONST                      3: 'UnstructuredHeader.parse'
                28      MAKE_FUNCTION                   0
                30      CALL_FUNCTION                   1
                32      STORE_NAME                      9: parse
                34      LOAD_CONST                      1: None
                36      RETURN_VALUE                    
        'UnstructuredHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: UniqueUnstructuredHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'max_count'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'UniqueUnstructuredHeader'
                1
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'UniqueUnstructuredHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 1
                10      STORE_NAME                      3: max_count
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'UniqueUnstructuredHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: DateHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'max_count'
                'staticmethod'
                'parser'
                'get_unstructured'
                'value_parser'
                'classmethod'
                'parse'
                'init'
                'property'
                'datetime'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'DateHeader'
                "Header whose value consists of a single timestamp.\n\n    Provides an additional attribute, datetime, which is either an aware\n    datetime using a timezone, or a naive datetime if the timezone\n    in the input string is -0000.  Also accepts a datetime as input.\n    The 'value' attribute is the normalized form of the timestamp,\n    which means it is the output of format_datetime on the datetime.\n    "
                None
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: parse
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'append'
                        'errors'
                        'HeaderMissingRequiredValue'
                        'parser'
                        'TokenList'
                        'isinstance'
                        'str'
                        'utils'
                        'parsedate_to_datetime'
                        'ValueError'
                        'InvalidDateDefect'
                        'format_datetime'
                        'value_parser'
                    [Var Names]
                        'cls'
                        'value'
                        'kwds'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'defects'
                        'datetime'
                        ''
                        'decoded'
                        'parse_tree'
                        'Invalid date value or format'
                    [Disassembly]
                        0       LOAD_FAST                       1: value
                        2       POP_JUMP_IF_TRUE                27 (to 54)
                        4       LOAD_FAST                       2: kwds
                        6       LOAD_CONST                      1: 'defects'
                        8       BINARY_SUBSCR                   
                        10      LOAD_METHOD                     0: append
                        12      LOAD_GLOBAL                     1: errors
                        14      LOAD_METHOD                     2: HeaderMissingRequiredValue
                        16      CALL_METHOD                     0
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_CONST                      0: None
                        24      LOAD_FAST                       2: kwds
                        26      LOAD_CONST                      2: 'datetime'
                        28      STORE_SUBSCR                    
                        30      LOAD_CONST                      3: ''
                        32      LOAD_FAST                       2: kwds
                        34      LOAD_CONST                      4: 'decoded'
                        36      STORE_SUBSCR                    
                        38      LOAD_GLOBAL                     3: parser
                        40      LOAD_METHOD                     4: TokenList
                        42      CALL_METHOD                     0
                        44      LOAD_FAST                       2: kwds
                        46      LOAD_CONST                      5: 'parse_tree'
                        48      STORE_SUBSCR                    
                        50      LOAD_CONST                      0: None
                        52      RETURN_VALUE                    
                        54      LOAD_GLOBAL                     5: isinstance
                        56      LOAD_FAST                       1: value
                        58      LOAD_GLOBAL                     6: str
                        60      CALL_FUNCTION                   2
                        62      POP_JUMP_IF_FALSE               74 (to 148)
                        64      LOAD_FAST                       1: value
                        66      LOAD_FAST                       2: kwds
                        68      LOAD_CONST                      4: 'decoded'
                        70      STORE_SUBSCR                    
                        72      SETUP_FINALLY                   7 (to 88)
                        74      LOAD_GLOBAL                     7: utils
                        76      LOAD_METHOD                     8: parsedate_to_datetime
                        78      LOAD_FAST                       1: value
                        80      CALL_METHOD                     1
                        82      STORE_FAST                      1: value
                        84      POP_BLOCK                       
                        86      JUMP_FORWARD                    30 (to 148)
                        88      DUP_TOP                         
                        90      LOAD_GLOBAL                     9: ValueError
                        92      JUMP_IF_NOT_EXC_MATCH           73 (to 146)
                        94      POP_TOP                         
                        96      POP_TOP                         
                        98      POP_TOP                         
                        100     LOAD_FAST                       2: kwds
                        102     LOAD_CONST                      1: 'defects'
                        104     BINARY_SUBSCR                   
                        106     LOAD_METHOD                     0: append
                        108     LOAD_GLOBAL                     1: errors
                        110     LOAD_METHOD                     10: InvalidDateDefect
                        112     LOAD_CONST                      6: 'Invalid date value or format'
                        114     CALL_METHOD                     1
                        116     CALL_METHOD                     1
                        118     POP_TOP                         
                        120     LOAD_CONST                      0: None
                        122     LOAD_FAST                       2: kwds
                        124     LOAD_CONST                      2: 'datetime'
                        126     STORE_SUBSCR                    
                        128     LOAD_GLOBAL                     3: parser
                        130     LOAD_METHOD                     4: TokenList
                        132     CALL_METHOD                     0
                        134     LOAD_FAST                       2: kwds
                        136     LOAD_CONST                      5: 'parse_tree'
                        138     STORE_SUBSCR                    
                        140     POP_EXCEPT                      
                        142     LOAD_CONST                      0: None
                        144     RETURN_VALUE                    
                        146     RERAISE                         0
                        148     LOAD_FAST                       1: value
                        150     LOAD_FAST                       2: kwds
                        152     LOAD_CONST                      2: 'datetime'
                        154     STORE_SUBSCR                    
                        156     LOAD_GLOBAL                     7: utils
                        158     LOAD_METHOD                     11: format_datetime
                        160     LOAD_FAST                       2: kwds
                        162     LOAD_CONST                      2: 'datetime'
                        164     BINARY_SUBSCR                   
                        166     CALL_METHOD                     1
                        168     LOAD_FAST                       2: kwds
                        170     LOAD_CONST                      4: 'decoded'
                        172     STORE_SUBSCR                    
                        174     LOAD_FAST                       0: cls
                        176     LOAD_METHOD                     12: value_parser
                        178     LOAD_FAST                       2: kwds
                        180     LOAD_CONST                      4: 'decoded'
                        182     BINARY_SUBSCR                   
                        184     CALL_METHOD                     1
                        186     LOAD_FAST                       2: kwds
                        188     LOAD_CONST                      5: 'parse_tree'
                        190     STORE_SUBSCR                    
                        192     LOAD_CONST                      0: None
                        194     RETURN_VALUE                    
                'DateHeader.parse'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: init
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                        'pop'
                        '_datetime'
                        'super'
                        'init'
                    [Var Names]
                        'self'
                        'args'
                        'kw'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        'datetime'
                    [Disassembly]
                        0       LOAD_FAST                       2: kw
                        2       LOAD_METHOD                     0: pop
                        4       LOAD_CONST                      1: 'datetime'
                        6       CALL_METHOD                     1
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _datetime
                        12      LOAD_GLOBAL                     2: super
                        14      CALL_FUNCTION                   0
                        16      LOAD_ATTR                       3: init
                        18      LOAD_FAST                       1: args
                        20      BUILD_MAP                       0
                        22      LOAD_FAST                       2: kw
                        24      DICT_MERGE                      1
                        26      CALL_FUNCTION_EX                1
                        28      POP_TOP                         
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'DateHeader.init'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: datetime
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_datetime'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _datetime
                        4       RETURN_VALUE                    
                'DateHeader.datetime'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'DateHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Header whose value consists of a single timestamp.\n\n    Provides an additional attribute, datetime, which is either an aware\n    datetime using a timezone, or a naive datetime if the timezone\n    in the input string is -0000.  Also accepts a datetime as input.\n    The 'value' attribute is the normalized form of the timestamp,\n    which means it is the output of format_datetime on the datetime.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      STORE_NAME                      4: max_count
                16      LOAD_NAME                       5: staticmethod
                18      LOAD_NAME                       6: parser
                20      LOAD_ATTR                       7: get_unstructured
                22      CALL_FUNCTION                   1
                24      STORE_NAME                      8: value_parser
                26      LOAD_NAME                       9: classmethod
                28      LOAD_CONST                      3: <CODE> parse
                30      LOAD_CONST                      4: 'DateHeader.parse'
                32      MAKE_FUNCTION                   0
                34      CALL_FUNCTION                   1
                36      STORE_NAME                      10: parse
                38      LOAD_CLOSURE                    0: __class__
                40      BUILD_TUPLE                     1
                42      LOAD_CONST                      5: <CODE> init
                44      LOAD_CONST                      6: 'DateHeader.init'
                46      MAKE_FUNCTION                   8
                48      STORE_NAME                      11: init
                50      LOAD_NAME                       12: property
                52      LOAD_CONST                      7: <CODE> datetime
                54      LOAD_CONST                      8: 'DateHeader.datetime'
                56      MAKE_FUNCTION                   0
                58      CALL_FUNCTION                   1
                60      STORE_NAME                      13: datetime
                62      LOAD_CLOSURE                    0: __class__
                64      DUP_TOP                         
                66      STORE_NAME                      14: __classcell__
                68      RETURN_VALUE                    
        'DateHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: UniqueDateHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'max_count'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'UniqueDateHeader'
                1
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'UniqueDateHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 1
                10      STORE_NAME                      3: max_count
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'UniqueDateHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: AddressHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'max_count'
                'staticmethod'
                'value_parser'
                'classmethod'
                'parse'
                'init'
                'property'
                'groups'
                'addresses'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'AddressHeader'
                None
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: value_parser
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'parser'
                        'get_address_list'
                    [Var Names]
                        'value'
                        'address_list'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'this should not happen'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: parser
                        2       LOAD_METHOD                     1: get_address_list
                        4       LOAD_FAST                       0: value
                        6       CALL_METHOD                     1
                        8       UNPACK_SEQUENCE                 2
                        10      STORE_FAST                      1: address_list
                        12      STORE_FAST                      0: value
                        14      LOAD_FAST                       0: value
                        16      POP_JUMP_IF_FALSE               13 (to 26)
                        18      LOAD_ASSERTION_ERROR            
                        20      LOAD_CONST                      1: 'this should not happen'
                        22      CALL_FUNCTION                   1
                        24      RAISE_VARARGS                   1
                        26      LOAD_FAST                       1: address_list
                        28      RETURN_VALUE                    
                'AddressHeader.value_parser'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: parse
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'str'
                        'value_parser'
                        'addresses'
                        'append'
                        'Group'
                        'display_name'
                        'all_mailboxes'
                        'list'
                        'all_defects'
                        'hasattr'
                        'join'
                    [Var Names]
                        'cls'
                        'value'
                        'kwds'
                        'address_list'
                        'groups'
                        'addr'
                        'defects'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'parse_tree'
                        [Code]
                            File Name: email/headerregistry.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 6
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'Address'
                                'display_name'
                                'local_part'
                                'domain'
                            [Var Names]
                                '.0'
                                'mb'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                ''
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        17 (to 40)
                                6       STORE_FAST                      1: mb
                                8       LOAD_GLOBAL                     0: Address
                                10      LOAD_FAST                       1: mb
                                12      LOAD_ATTR                       1: display_name
                                14      JUMP_IF_TRUE_OR_POP             9 (to 18)
                                16      LOAD_CONST                      0: ''
                                18      LOAD_FAST                       1: mb
                                20      LOAD_ATTR                       2: local_part
                                22      JUMP_IF_TRUE_OR_POP             13 (to 26)
                                24      LOAD_CONST                      0: ''
                                26      LOAD_FAST                       1: mb
                                28      LOAD_ATTR                       3: domain
                                30      JUMP_IF_TRUE_OR_POP             17 (to 34)
                                32      LOAD_CONST                      0: ''
                                34      CALL_FUNCTION                   3
                                36      LIST_APPEND                     2
                                38      JUMP_ABSOLUTE                   2 (to 4)
                                40      RETURN_VALUE                    
                        'AddressHeader.parse.<locals>.<listcomp>'
                        '__iter__'
                        [Code]
                            File Name: email/headerregistry.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 5
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'hasattr'
                                'Group'
                            [Var Names]
                                '.0'
                                'item'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                'addresses'
                                None
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        15 (to 36)
                                6       STORE_FAST                      1: item
                                8       LOAD_GLOBAL                     0: hasattr
                                10      LOAD_FAST                       1: item
                                12      LOAD_CONST                      0: 'addresses'
                                14      CALL_FUNCTION                   2
                                16      POP_JUMP_IF_TRUE                15 (to 30)
                                18      LOAD_GLOBAL                     1: Group
                                20      LOAD_CONST                      1: None
                                22      LOAD_FAST                       1: item
                                24      BUILD_LIST                      1
                                26      CALL_FUNCTION                   2
                                28      JUMP_FORWARD                    1 (to 32)
                                30      LOAD_FAST                       1: item
                                32      LIST_APPEND                     2
                                34      JUMP_ABSOLUTE                   2 (to 4)
                                36      RETURN_VALUE                    
                        'groups'
                        'defects'
                        ', '
                        [Code]
                            File Name: email/headerregistry.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'str'
                            [Var Names]
                                '.0'
                                'item'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        6 (to 18)
                                6       STORE_FAST                      1: item
                                8       LOAD_GLOBAL                     0: str
                                10      LOAD_FAST                       1: item
                                12      CALL_FUNCTION                   1
                                14      LIST_APPEND                     2
                                16      JUMP_ABSOLUTE                   2 (to 4)
                                18      RETURN_VALUE                    
                        'decoded'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: value
                        4       LOAD_GLOBAL                     1: str
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               43 (to 86)
                        10      LOAD_FAST                       0: cls
                        12      LOAD_METHOD                     2: value_parser
                        14      LOAD_FAST                       1: value
                        16      CALL_METHOD                     1
                        18      DUP_TOP                         
                        20      LOAD_FAST                       2: kwds
                        22      LOAD_CONST                      1: 'parse_tree'
                        24      STORE_SUBSCR                    
                        26      STORE_FAST                      3: address_list
                        28      BUILD_LIST                      0
                        30      STORE_FAST                      4: groups
                        32      LOAD_FAST                       3: address_list
                        34      LOAD_ATTR                       3: addresses
                        36      GET_ITER                        
                        38      FOR_ITER                        17 (to 74)
                        40      STORE_FAST                      5: addr
                        42      LOAD_FAST                       4: groups
                        44      LOAD_METHOD                     4: append
                        46      LOAD_GLOBAL                     5: Group
                        48      LOAD_FAST                       5: addr
                        50      LOAD_ATTR                       6: display_name
                        52      LOAD_CONST                      2: <CODE> <listcomp>
                        54      LOAD_CONST                      3: 'AddressHeader.parse.<locals>.<listcomp>'
                        56      MAKE_FUNCTION                   0
                        58      LOAD_FAST                       5: addr
                        60      LOAD_ATTR                       7: all_mailboxes
                        62      GET_ITER                        
                        64      CALL_FUNCTION                   1
                        66      CALL_FUNCTION                   2
                        68      CALL_METHOD                     1
                        70      POP_TOP                         
                        72      JUMP_ABSOLUTE                   19 (to 38)
                        74      LOAD_GLOBAL                     8: list
                        76      LOAD_FAST                       3: address_list
                        78      LOAD_ATTR                       9: all_defects
                        80      CALL_FUNCTION                   1
                        82      STORE_FAST                      6: defects
                        84      JUMP_FORWARD                    17 (to 120)
                        86      LOAD_GLOBAL                     10: hasattr
                        88      LOAD_FAST                       1: value
                        90      LOAD_CONST                      4: '__iter__'
                        92      CALL_FUNCTION                   2
                        94      POP_JUMP_IF_TRUE                51 (to 102)
                        96      LOAD_FAST                       1: value
                        98      BUILD_LIST                      1
                        100     STORE_FAST                      1: value
                        102     LOAD_CONST                      5: <CODE> <listcomp>
                        104     LOAD_CONST                      3: 'AddressHeader.parse.<locals>.<listcomp>'
                        106     MAKE_FUNCTION                   0
                        108     LOAD_FAST                       1: value
                        110     GET_ITER                        
                        112     CALL_FUNCTION                   1
                        114     STORE_FAST                      4: groups
                        116     BUILD_LIST                      0
                        118     STORE_FAST                      6: defects
                        120     LOAD_FAST                       4: groups
                        122     LOAD_FAST                       2: kwds
                        124     LOAD_CONST                      6: 'groups'
                        126     STORE_SUBSCR                    
                        128     LOAD_FAST                       6: defects
                        130     LOAD_FAST                       2: kwds
                        132     LOAD_CONST                      7: 'defects'
                        134     STORE_SUBSCR                    
                        136     LOAD_CONST                      8: ', '
                        138     LOAD_METHOD                     11: join
                        140     LOAD_CONST                      9: <CODE> <listcomp>
                        142     LOAD_CONST                      3: 'AddressHeader.parse.<locals>.<listcomp>'
                        144     MAKE_FUNCTION                   0
                        146     LOAD_FAST                       4: groups
                        148     GET_ITER                        
                        150     CALL_FUNCTION                   1
                        152     CALL_METHOD                     1
                        154     LOAD_FAST                       2: kwds
                        156     LOAD_CONST                      10: 'decoded'
                        158     STORE_SUBSCR                    
                        160     LOAD_CONST                      1: 'parse_tree'
                        162     LOAD_FAST                       2: kwds
                        164     CONTAINS_OP                     1 (not in)
                        166     POP_JUMP_IF_FALSE               95 (to 190)
                        168     LOAD_FAST                       0: cls
                        170     LOAD_METHOD                     2: value_parser
                        172     LOAD_FAST                       2: kwds
                        174     LOAD_CONST                      10: 'decoded'
                        176     BINARY_SUBSCR                   
                        178     CALL_METHOD                     1
                        180     LOAD_FAST                       2: kwds
                        182     LOAD_CONST                      1: 'parse_tree'
                        184     STORE_SUBSCR                    
                        186     LOAD_CONST                      0: None
                        188     RETURN_VALUE                    
                        190     LOAD_CONST                      0: None
                        192     RETURN_VALUE                    
                'AddressHeader.parse'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: init
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                        'tuple'
                        'pop'
                        '_groups'
                        '_addresses'
                        'super'
                        'init'
                    [Var Names]
                        'self'
                        'args'
                        'kw'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        'groups'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: tuple
                        2       LOAD_FAST                       2: kw
                        4       LOAD_METHOD                     1: pop
                        6       LOAD_CONST                      1: 'groups'
                        8       CALL_METHOD                     1
                        10      CALL_FUNCTION                   1
                        12      LOAD_FAST                       0: self
                        14      STORE_ATTR                      2: _groups
                        16      LOAD_CONST                      0: None
                        18      LOAD_FAST                       0: self
                        20      STORE_ATTR                      3: _addresses
                        22      LOAD_GLOBAL                     4: super
                        24      CALL_FUNCTION                   0
                        26      LOAD_ATTR                       5: init
                        28      LOAD_FAST                       1: args
                        30      BUILD_MAP                       0
                        32      LOAD_FAST                       2: kw
                        34      DICT_MERGE                      1
                        36      CALL_FUNCTION_EX                1
                        38      POP_TOP                         
                        40      LOAD_CONST                      0: None
                        42      RETURN_VALUE                    
                'AddressHeader.init'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: groups
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_groups'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _groups
                        4       RETURN_VALUE                    
                'AddressHeader.groups'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: addresses
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_addresses'
                        'tuple'
                        '_groups'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: email/headerregistry.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'addresses'
                            [Var Names]
                                '.0'
                                'group'
                                'address'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        11 (to 28)
                                6       STORE_FAST                      1: group
                                8       LOAD_FAST                       1: group
                                10      LOAD_ATTR                       0: addresses
                                12      GET_ITER                        
                                14      FOR_ITER                        5 (to 26)
                                16      STORE_FAST                      2: address
                                18      LOAD_FAST                       2: address
                                20      YIELD_VALUE                     
                                22      POP_TOP                         
                                24      JUMP_ABSOLUTE                   7 (to 14)
                                26      JUMP_ABSOLUTE                   2 (to 4)
                                28      LOAD_CONST                      0: None
                                30      RETURN_VALUE                    
                        'AddressHeader.addresses.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _addresses
                        4       LOAD_CONST                      0: None
                        6       IS_OP                           0 (is)
                        8       POP_JUMP_IF_FALSE               16 (to 32)
                        10      LOAD_GLOBAL                     1: tuple
                        12      LOAD_CONST                      1: <CODE> <genexpr>
                        14      LOAD_CONST                      2: 'AddressHeader.addresses.<locals>.<genexpr>'
                        16      MAKE_FUNCTION                   0
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       2: _groups
                        22      GET_ITER                        
                        24      CALL_FUNCTION                   1
                        26      CALL_FUNCTION                   1
                        28      LOAD_FAST                       0: self
                        30      STORE_ATTR                      0: _addresses
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       0: _addresses
                        36      RETURN_VALUE                    
                'AddressHeader.addresses'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'AddressHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: None
                10      STORE_NAME                      3: max_count
                12      LOAD_NAME                       4: staticmethod
                14      LOAD_CONST                      2: <CODE> value_parser
                16      LOAD_CONST                      3: 'AddressHeader.value_parser'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: value_parser
                24      LOAD_NAME                       6: classmethod
                26      LOAD_CONST                      4: <CODE> parse
                28      LOAD_CONST                      5: 'AddressHeader.parse'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      7: parse
                36      LOAD_CLOSURE                    0: __class__
                38      BUILD_TUPLE                     1
                40      LOAD_CONST                      6: <CODE> init
                42      LOAD_CONST                      7: 'AddressHeader.init'
                44      MAKE_FUNCTION                   8
                46      STORE_NAME                      8: init
                48      LOAD_NAME                       9: property
                50      LOAD_CONST                      8: <CODE> groups
                52      LOAD_CONST                      9: 'AddressHeader.groups'
                54      MAKE_FUNCTION                   0
                56      CALL_FUNCTION                   1
                58      STORE_NAME                      10: groups
                60      LOAD_NAME                       9: property
                62      LOAD_CONST                      10: <CODE> addresses
                64      LOAD_CONST                      11: 'AddressHeader.addresses'
                66      MAKE_FUNCTION                   0
                68      CALL_FUNCTION                   1
                70      STORE_NAME                      11: addresses
                72      LOAD_CLOSURE                    0: __class__
                74      DUP_TOP                         
                76      STORE_NAME                      12: __classcell__
                78      RETURN_VALUE                    
        'AddressHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: UniqueAddressHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'max_count'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'UniqueAddressHeader'
                1
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'UniqueAddressHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 1
                10      STORE_NAME                      3: max_count
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'UniqueAddressHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: SingleAddressHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'property'
                'address'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'SingleAddressHeader'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: address
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'len'
                        'addresses'
                        'ValueError'
                        'format'
                        'name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                        'value of single address header {} is not a single address'
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: len
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: addresses
                        6       CALL_FUNCTION                   1
                        8       LOAD_CONST                      1: 1
                        10      COMPARE_OP                      3 (!=)
                        12      POP_JUMP_IF_FALSE               15 (to 30)
                        14      LOAD_GLOBAL                     2: ValueError
                        16      LOAD_CONST                      2: 'value of single address header {} is not a single address'
                        18      LOAD_METHOD                     3: format
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       4: name
                        24      CALL_METHOD                     1
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       1: addresses
                        34      LOAD_CONST                      3: 0
                        36      BINARY_SUBSCR                   
                        38      RETURN_VALUE                    
                'SingleAddressHeader.address'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SingleAddressHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: property
                10      LOAD_CONST                      1: <CODE> address
                12      LOAD_CONST                      2: 'SingleAddressHeader.address'
                14      MAKE_FUNCTION                   0
                16      CALL_FUNCTION                   1
                18      STORE_NAME                      4: address
                20      LOAD_CONST                      3: None
                22      RETURN_VALUE                    
        'SingleAddressHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: UniqueSingleAddressHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'max_count'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'UniqueSingleAddressHeader'
                1
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'UniqueSingleAddressHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 1
                10      STORE_NAME                      3: max_count
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'UniqueSingleAddressHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: MIMEVersionHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'max_count'
                'staticmethod'
                'parser'
                'parse_mime_version'
                'value_parser'
                'classmethod'
                'parse'
                'init'
                'property'
                'major'
                'minor'
                'version'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'MIMEVersionHeader'
                1
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: parse
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'value_parser'
                        'str'
                        'extend'
                        'all_defects'
                        'minor'
                        'major'
                        'format'
                    [Var Names]
                        'cls'
                        'value'
                        'kwds'
                        'parse_tree'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'parse_tree'
                        'decoded'
                        'defects'
                        'major'
                        'minor'
                        '{}.{}'
                        'version'
                    [Disassembly]
                        0       LOAD_FAST                       0: cls
                        2       LOAD_METHOD                     0: value_parser
                        4       LOAD_FAST                       1: value
                        6       CALL_METHOD                     1
                        8       DUP_TOP                         
                        10      LOAD_FAST                       2: kwds
                        12      LOAD_CONST                      1: 'parse_tree'
                        14      STORE_SUBSCR                    
                        16      STORE_FAST                      3: parse_tree
                        18      LOAD_GLOBAL                     1: str
                        20      LOAD_FAST                       3: parse_tree
                        22      CALL_FUNCTION                   1
                        24      LOAD_FAST                       2: kwds
                        26      LOAD_CONST                      2: 'decoded'
                        28      STORE_SUBSCR                    
                        30      LOAD_FAST                       2: kwds
                        32      LOAD_CONST                      3: 'defects'
                        34      BINARY_SUBSCR                   
                        36      LOAD_METHOD                     2: extend
                        38      LOAD_FAST                       3: parse_tree
                        40      LOAD_ATTR                       3: all_defects
                        42      CALL_METHOD                     1
                        44      POP_TOP                         
                        46      LOAD_FAST                       3: parse_tree
                        48      LOAD_ATTR                       4: minor
                        50      LOAD_CONST                      0: None
                        52      IS_OP                           0 (is)
                        54      POP_JUMP_IF_FALSE               30 (to 60)
                        56      LOAD_CONST                      0: None
                        58      JUMP_FORWARD                    2 (to 64)
                        60      LOAD_FAST                       3: parse_tree
                        62      LOAD_ATTR                       5: major
                        64      LOAD_FAST                       2: kwds
                        66      LOAD_CONST                      4: 'major'
                        68      STORE_SUBSCR                    
                        70      LOAD_FAST                       3: parse_tree
                        72      LOAD_ATTR                       4: minor
                        74      LOAD_FAST                       2: kwds
                        76      LOAD_CONST                      5: 'minor'
                        78      STORE_SUBSCR                    
                        80      LOAD_FAST                       3: parse_tree
                        82      LOAD_ATTR                       4: minor
                        84      LOAD_CONST                      0: None
                        86      IS_OP                           1 (is not)
                        88      POP_JUMP_IF_FALSE               59 (to 118)
                        90      LOAD_CONST                      6: '{}.{}'
                        92      LOAD_METHOD                     6: format
                        94      LOAD_FAST                       2: kwds
                        96      LOAD_CONST                      4: 'major'
                        98      BINARY_SUBSCR                   
                        100     LOAD_FAST                       2: kwds
                        102     LOAD_CONST                      5: 'minor'
                        104     BINARY_SUBSCR                   
                        106     CALL_METHOD                     2
                        108     LOAD_FAST                       2: kwds
                        110     LOAD_CONST                      7: 'version'
                        112     STORE_SUBSCR                    
                        114     LOAD_CONST                      0: None
                        116     RETURN_VALUE                    
                        118     LOAD_CONST                      0: None
                        120     LOAD_FAST                       2: kwds
                        122     LOAD_CONST                      7: 'version'
                        124     STORE_SUBSCR                    
                        126     LOAD_CONST                      0: None
                        128     RETURN_VALUE                    
                'MIMEVersionHeader.parse'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: init
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                        'pop'
                        '_version'
                        '_major'
                        '_minor'
                        'super'
                        'init'
                    [Var Names]
                        'self'
                        'args'
                        'kw'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        'version'
                        'major'
                        'minor'
                    [Disassembly]
                        0       LOAD_FAST                       2: kw
                        2       LOAD_METHOD                     0: pop
                        4       LOAD_CONST                      1: 'version'
                        6       CALL_METHOD                     1
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _version
                        12      LOAD_FAST                       2: kw
                        14      LOAD_METHOD                     0: pop
                        16      LOAD_CONST                      2: 'major'
                        18      CALL_METHOD                     1
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      2: _major
                        24      LOAD_FAST                       2: kw
                        26      LOAD_METHOD                     0: pop
                        28      LOAD_CONST                      3: 'minor'
                        30      CALL_METHOD                     1
                        32      LOAD_FAST                       0: self
                        34      STORE_ATTR                      3: _minor
                        36      LOAD_GLOBAL                     4: super
                        38      CALL_FUNCTION                   0
                        40      LOAD_ATTR                       5: init
                        42      LOAD_FAST                       1: args
                        44      BUILD_MAP                       0
                        46      LOAD_FAST                       2: kw
                        48      DICT_MERGE                      1
                        50      CALL_FUNCTION_EX                1
                        52      POP_TOP                         
                        54      LOAD_CONST                      0: None
                        56      RETURN_VALUE                    
                'MIMEVersionHeader.init'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: major
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_major'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _major
                        4       RETURN_VALUE                    
                'MIMEVersionHeader.major'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: minor
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_minor'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _minor
                        4       RETURN_VALUE                    
                'MIMEVersionHeader.minor'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: version
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_version'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _version
                        4       RETURN_VALUE                    
                'MIMEVersionHeader.version'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'MIMEVersionHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 1
                10      STORE_NAME                      3: max_count
                12      LOAD_NAME                       4: staticmethod
                14      LOAD_NAME                       5: parser
                16      LOAD_ATTR                       6: parse_mime_version
                18      CALL_FUNCTION                   1
                20      STORE_NAME                      7: value_parser
                22      LOAD_NAME                       8: classmethod
                24      LOAD_CONST                      2: <CODE> parse
                26      LOAD_CONST                      3: 'MIMEVersionHeader.parse'
                28      MAKE_FUNCTION                   0
                30      CALL_FUNCTION                   1
                32      STORE_NAME                      9: parse
                34      LOAD_CLOSURE                    0: __class__
                36      BUILD_TUPLE                     1
                38      LOAD_CONST                      4: <CODE> init
                40      LOAD_CONST                      5: 'MIMEVersionHeader.init'
                42      MAKE_FUNCTION                   8
                44      STORE_NAME                      10: init
                46      LOAD_NAME                       11: property
                48      LOAD_CONST                      6: <CODE> major
                50      LOAD_CONST                      7: 'MIMEVersionHeader.major'
                52      MAKE_FUNCTION                   0
                54      CALL_FUNCTION                   1
                56      STORE_NAME                      12: major
                58      LOAD_NAME                       11: property
                60      LOAD_CONST                      8: <CODE> minor
                62      LOAD_CONST                      9: 'MIMEVersionHeader.minor'
                64      MAKE_FUNCTION                   0
                66      CALL_FUNCTION                   1
                68      STORE_NAME                      13: minor
                70      LOAD_NAME                       11: property
                72      LOAD_CONST                      10: <CODE> version
                74      LOAD_CONST                      11: 'MIMEVersionHeader.version'
                76      MAKE_FUNCTION                   0
                78      CALL_FUNCTION                   1
                80      STORE_NAME                      14: version
                82      LOAD_CLOSURE                    0: __class__
                84      DUP_TOP                         
                86      STORE_NAME                      15: __classcell__
                88      RETURN_VALUE                    
        'MIMEVersionHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: ParameterizedMIMEHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'max_count'
                'classmethod'
                'parse'
                'init'
                'property'
                'params'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'ParameterizedMIMEHeader'
                1
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: parse
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'value_parser'
                        'str'
                        'extend'
                        'all_defects'
                        'params'
                    [Var Names]
                        'cls'
                        'value'
                        'kwds'
                        'parse_tree'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'parse_tree'
                        'decoded'
                        'defects'
                        'params'
                        [Code]
                            File Name: email/headerregistry.py
                            Object Name: <dictcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 6
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'utils'
                                '_sanitize'
                                'lower'
                            [Var Names]
                                '.0'
                                'name'
                                'value'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_MAP                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        15 (to 36)
                                6       UNPACK_SEQUENCE                 2
                                8       STORE_FAST                      1: name
                                10      STORE_FAST                      2: value
                                12      LOAD_GLOBAL                     0: utils
                                14      LOAD_METHOD                     1: _sanitize
                                16      LOAD_FAST                       1: name
                                18      CALL_METHOD                     1
                                20      LOAD_METHOD                     2: lower
                                22      CALL_METHOD                     0
                                24      LOAD_GLOBAL                     0: utils
                                26      LOAD_METHOD                     1: _sanitize
                                28      LOAD_FAST                       2: value
                                30      CALL_METHOD                     1
                                32      MAP_ADD                         2
                                34      JUMP_ABSOLUTE                   2 (to 4)
                                36      RETURN_VALUE                    
                        'ParameterizedMIMEHeader.parse.<locals>.<dictcomp>'
                    [Disassembly]
                        0       LOAD_FAST                       0: cls
                        2       LOAD_METHOD                     0: value_parser
                        4       LOAD_FAST                       1: value
                        6       CALL_METHOD                     1
                        8       DUP_TOP                         
                        10      LOAD_FAST                       2: kwds
                        12      LOAD_CONST                      1: 'parse_tree'
                        14      STORE_SUBSCR                    
                        16      STORE_FAST                      3: parse_tree
                        18      LOAD_GLOBAL                     1: str
                        20      LOAD_FAST                       3: parse_tree
                        22      CALL_FUNCTION                   1
                        24      LOAD_FAST                       2: kwds
                        26      LOAD_CONST                      2: 'decoded'
                        28      STORE_SUBSCR                    
                        30      LOAD_FAST                       2: kwds
                        32      LOAD_CONST                      3: 'defects'
                        34      BINARY_SUBSCR                   
                        36      LOAD_METHOD                     2: extend
                        38      LOAD_FAST                       3: parse_tree
                        40      LOAD_ATTR                       3: all_defects
                        42      CALL_METHOD                     1
                        44      POP_TOP                         
                        46      LOAD_FAST                       3: parse_tree
                        48      LOAD_ATTR                       4: params
                        50      LOAD_CONST                      0: None
                        52      IS_OP                           0 (is)
                        54      POP_JUMP_IF_FALSE               34 (to 68)
                        56      BUILD_MAP                       0
                        58      LOAD_FAST                       2: kwds
                        60      LOAD_CONST                      4: 'params'
                        62      STORE_SUBSCR                    
                        64      LOAD_CONST                      0: None
                        66      RETURN_VALUE                    
                        68      LOAD_CONST                      5: <CODE> <dictcomp>
                        70      LOAD_CONST                      6: 'ParameterizedMIMEHeader.parse.<locals>.<dictcomp>'
                        72      MAKE_FUNCTION                   0
                        74      LOAD_FAST                       3: parse_tree
                        76      LOAD_ATTR                       4: params
                        78      GET_ITER                        
                        80      CALL_FUNCTION                   1
                        82      LOAD_FAST                       2: kwds
                        84      LOAD_CONST                      4: 'params'
                        86      STORE_SUBSCR                    
                        88      LOAD_CONST                      0: None
                        90      RETURN_VALUE                    
                'ParameterizedMIMEHeader.parse'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: init
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                        'pop'
                        '_params'
                        'super'
                        'init'
                    [Var Names]
                        'self'
                        'args'
                        'kw'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        'params'
                    [Disassembly]
                        0       LOAD_FAST                       2: kw
                        2       LOAD_METHOD                     0: pop
                        4       LOAD_CONST                      1: 'params'
                        6       CALL_METHOD                     1
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _params
                        12      LOAD_GLOBAL                     2: super
                        14      CALL_FUNCTION                   0
                        16      LOAD_ATTR                       3: init
                        18      LOAD_FAST                       1: args
                        20      BUILD_MAP                       0
                        22      LOAD_FAST                       2: kw
                        24      DICT_MERGE                      1
                        26      CALL_FUNCTION_EX                1
                        28      POP_TOP                         
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'ParameterizedMIMEHeader.init'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: params
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'MappingProxyType'
                        '_params'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: MappingProxyType
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _params
                        6       CALL_FUNCTION                   1
                        8       RETURN_VALUE                    
                'ParameterizedMIMEHeader.params'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ParameterizedMIMEHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 1
                10      STORE_NAME                      3: max_count
                12      LOAD_NAME                       4: classmethod
                14      LOAD_CONST                      2: <CODE> parse
                16      LOAD_CONST                      3: 'ParameterizedMIMEHeader.parse'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: parse
                24      LOAD_CLOSURE                    0: __class__
                26      BUILD_TUPLE                     1
                28      LOAD_CONST                      4: <CODE> init
                30      LOAD_CONST                      5: 'ParameterizedMIMEHeader.init'
                32      MAKE_FUNCTION                   8
                34      STORE_NAME                      6: init
                36      LOAD_NAME                       7: property
                38      LOAD_CONST                      6: <CODE> params
                40      LOAD_CONST                      7: 'ParameterizedMIMEHeader.params'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      8: params
                48      LOAD_CLOSURE                    0: __class__
                50      DUP_TOP                         
                52      STORE_NAME                      9: __classcell__
                54      RETURN_VALUE                    
        'ParameterizedMIMEHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: ContentTypeHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'staticmethod'
                'parser'
                'parse_content_type_header'
                'value_parser'
                'init'
                'property'
                'maintype'
                'subtype'
                'content_type'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'ContentTypeHeader'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: init
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                        'super'
                        'init'
                        'utils'
                        '_sanitize'
                        '_parse_tree'
                        'maintype'
                        '_maintype'
                        'subtype'
                        '_subtype'
                    [Var Names]
                        'self'
                        'args'
                        'kw'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_ATTR                       1: init
                        6       LOAD_FAST                       1: args
                        8       BUILD_MAP                       0
                        10      LOAD_FAST                       2: kw
                        12      DICT_MERGE                      1
                        14      CALL_FUNCTION_EX                1
                        16      POP_TOP                         
                        18      LOAD_GLOBAL                     2: utils
                        20      LOAD_METHOD                     3: _sanitize
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       4: _parse_tree
                        26      LOAD_ATTR                       5: maintype
                        28      CALL_METHOD                     1
                        30      LOAD_FAST                       0: self
                        32      STORE_ATTR                      6: _maintype
                        34      LOAD_GLOBAL                     2: utils
                        36      LOAD_METHOD                     3: _sanitize
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       4: _parse_tree
                        42      LOAD_ATTR                       7: subtype
                        44      CALL_METHOD                     1
                        46      LOAD_FAST                       0: self
                        48      STORE_ATTR                      8: _subtype
                        50      LOAD_CONST                      0: None
                        52      RETURN_VALUE                    
                'ContentTypeHeader.init'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: maintype
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_maintype'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _maintype
                        4       RETURN_VALUE                    
                'ContentTypeHeader.maintype'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: subtype
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_subtype'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _subtype
                        4       RETURN_VALUE                    
                'ContentTypeHeader.subtype'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: content_type
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'maintype'
                        'subtype'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '/'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: maintype
                        4       LOAD_CONST                      1: '/'
                        6       BINARY_ADD                      
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: subtype
                        12      BINARY_ADD                      
                        14      RETURN_VALUE                    
                'ContentTypeHeader.content_type'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ContentTypeHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: staticmethod
                10      LOAD_NAME                       4: parser
                12      LOAD_ATTR                       5: parse_content_type_header
                14      CALL_FUNCTION                   1
                16      STORE_NAME                      6: value_parser
                18      LOAD_CLOSURE                    0: __class__
                20      BUILD_TUPLE                     1
                22      LOAD_CONST                      1: <CODE> init
                24      LOAD_CONST                      2: 'ContentTypeHeader.init'
                26      MAKE_FUNCTION                   8
                28      STORE_NAME                      7: init
                30      LOAD_NAME                       8: property
                32      LOAD_CONST                      3: <CODE> maintype
                34      LOAD_CONST                      4: 'ContentTypeHeader.maintype'
                36      MAKE_FUNCTION                   0
                38      CALL_FUNCTION                   1
                40      STORE_NAME                      9: maintype
                42      LOAD_NAME                       8: property
                44      LOAD_CONST                      5: <CODE> subtype
                46      LOAD_CONST                      6: 'ContentTypeHeader.subtype'
                48      MAKE_FUNCTION                   0
                50      CALL_FUNCTION                   1
                52      STORE_NAME                      10: subtype
                54      LOAD_NAME                       8: property
                56      LOAD_CONST                      7: <CODE> content_type
                58      LOAD_CONST                      8: 'ContentTypeHeader.content_type'
                60      MAKE_FUNCTION                   0
                62      CALL_FUNCTION                   1
                64      STORE_NAME                      11: content_type
                66      LOAD_CLOSURE                    0: __class__
                68      DUP_TOP                         
                70      STORE_NAME                      12: __classcell__
                72      RETURN_VALUE                    
        'ContentTypeHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: ContentDispositionHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'staticmethod'
                'parser'
                'parse_content_disposition_header'
                'value_parser'
                'init'
                'property'
                'content_disposition'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'ContentDispositionHeader'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: init
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                        'super'
                        'init'
                        '_parse_tree'
                        'content_disposition'
                        'utils'
                        '_sanitize'
                        '_content_disposition'
                    [Var Names]
                        'self'
                        'args'
                        'kw'
                        'cd'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_ATTR                       1: init
                        6       LOAD_FAST                       1: args
                        8       BUILD_MAP                       0
                        10      LOAD_FAST                       2: kw
                        12      DICT_MERGE                      1
                        14      CALL_FUNCTION_EX                1
                        16      POP_TOP                         
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       2: _parse_tree
                        22      LOAD_ATTR                       3: content_disposition
                        24      STORE_FAST                      3: cd
                        26      LOAD_FAST                       3: cd
                        28      LOAD_CONST                      0: None
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               22 (to 44)
                        34      LOAD_FAST                       3: cd
                        36      LOAD_FAST                       0: self
                        38      STORE_ATTR                      6: _content_disposition
                        40      LOAD_CONST                      0: None
                        42      RETURN_VALUE                    
                        44      LOAD_GLOBAL                     4: utils
                        46      LOAD_METHOD                     5: _sanitize
                        48      LOAD_FAST                       3: cd
                        50      CALL_METHOD                     1
                        52      LOAD_FAST                       0: self
                        54      STORE_ATTR                      6: _content_disposition
                        56      LOAD_CONST                      0: None
                        58      RETURN_VALUE                    
                'ContentDispositionHeader.init'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: content_disposition
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_content_disposition'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _content_disposition
                        4       RETURN_VALUE                    
                'ContentDispositionHeader.content_disposition'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ContentDispositionHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: staticmethod
                10      LOAD_NAME                       4: parser
                12      LOAD_ATTR                       5: parse_content_disposition_header
                14      CALL_FUNCTION                   1
                16      STORE_NAME                      6: value_parser
                18      LOAD_CLOSURE                    0: __class__
                20      BUILD_TUPLE                     1
                22      LOAD_CONST                      1: <CODE> init
                24      LOAD_CONST                      2: 'ContentDispositionHeader.init'
                26      MAKE_FUNCTION                   8
                28      STORE_NAME                      7: init
                30      LOAD_NAME                       8: property
                32      LOAD_CONST                      3: <CODE> content_disposition
                34      LOAD_CONST                      4: 'ContentDispositionHeader.content_disposition'
                36      MAKE_FUNCTION                   0
                38      CALL_FUNCTION                   1
                40      STORE_NAME                      9: content_disposition
                42      LOAD_CLOSURE                    0: __class__
                44      DUP_TOP                         
                46      STORE_NAME                      10: __classcell__
                48      RETURN_VALUE                    
        'ContentDispositionHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: ContentTransferEncodingHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'max_count'
                'staticmethod'
                'parser'
                'parse_content_transfer_encoding_header'
                'value_parser'
                'classmethod'
                'parse'
                'init'
                'property'
                'cte'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'ContentTransferEncodingHeader'
                1
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: parse
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'value_parser'
                        'str'
                        'extend'
                        'all_defects'
                    [Var Names]
                        'cls'
                        'value'
                        'kwds'
                        'parse_tree'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'parse_tree'
                        'decoded'
                        'defects'
                    [Disassembly]
                        0       LOAD_FAST                       0: cls
                        2       LOAD_METHOD                     0: value_parser
                        4       LOAD_FAST                       1: value
                        6       CALL_METHOD                     1
                        8       DUP_TOP                         
                        10      LOAD_FAST                       2: kwds
                        12      LOAD_CONST                      1: 'parse_tree'
                        14      STORE_SUBSCR                    
                        16      STORE_FAST                      3: parse_tree
                        18      LOAD_GLOBAL                     1: str
                        20      LOAD_FAST                       3: parse_tree
                        22      CALL_FUNCTION                   1
                        24      LOAD_FAST                       2: kwds
                        26      LOAD_CONST                      2: 'decoded'
                        28      STORE_SUBSCR                    
                        30      LOAD_FAST                       2: kwds
                        32      LOAD_CONST                      3: 'defects'
                        34      BINARY_SUBSCR                   
                        36      LOAD_METHOD                     2: extend
                        38      LOAD_FAST                       3: parse_tree
                        40      LOAD_ATTR                       3: all_defects
                        42      CALL_METHOD                     1
                        44      POP_TOP                         
                        46      LOAD_CONST                      0: None
                        48      RETURN_VALUE                    
                'ContentTransferEncodingHeader.parse'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: init
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                        'super'
                        'init'
                        'utils'
                        '_sanitize'
                        '_parse_tree'
                        'cte'
                        '_cte'
                    [Var Names]
                        'self'
                        'args'
                        'kw'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_ATTR                       1: init
                        6       LOAD_FAST                       1: args
                        8       BUILD_MAP                       0
                        10      LOAD_FAST                       2: kw
                        12      DICT_MERGE                      1
                        14      CALL_FUNCTION_EX                1
                        16      POP_TOP                         
                        18      LOAD_GLOBAL                     2: utils
                        20      LOAD_METHOD                     3: _sanitize
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       4: _parse_tree
                        26      LOAD_ATTR                       5: cte
                        28      CALL_METHOD                     1
                        30      LOAD_FAST                       0: self
                        32      STORE_ATTR                      6: _cte
                        34      LOAD_CONST                      0: None
                        36      RETURN_VALUE                    
                'ContentTransferEncodingHeader.init'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: cte
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_cte'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _cte
                        4       RETURN_VALUE                    
                'ContentTransferEncodingHeader.cte'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ContentTransferEncodingHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 1
                10      STORE_NAME                      3: max_count
                12      LOAD_NAME                       4: staticmethod
                14      LOAD_NAME                       5: parser
                16      LOAD_ATTR                       6: parse_content_transfer_encoding_header
                18      CALL_FUNCTION                   1
                20      STORE_NAME                      7: value_parser
                22      LOAD_NAME                       8: classmethod
                24      LOAD_CONST                      2: <CODE> parse
                26      LOAD_CONST                      3: 'ContentTransferEncodingHeader.parse'
                28      MAKE_FUNCTION                   0
                30      CALL_FUNCTION                   1
                32      STORE_NAME                      9: parse
                34      LOAD_CLOSURE                    0: __class__
                36      BUILD_TUPLE                     1
                38      LOAD_CONST                      4: <CODE> init
                40      LOAD_CONST                      5: 'ContentTransferEncodingHeader.init'
                42      MAKE_FUNCTION                   8
                44      STORE_NAME                      10: init
                46      LOAD_NAME                       11: property
                48      LOAD_CONST                      6: <CODE> cte
                50      LOAD_CONST                      7: 'ContentTransferEncodingHeader.cte'
                52      MAKE_FUNCTION                   0
                54      CALL_FUNCTION                   1
                56      STORE_NAME                      12: cte
                58      LOAD_CLOSURE                    0: __class__
                60      DUP_TOP                         
                62      STORE_NAME                      13: __classcell__
                64      RETURN_VALUE                    
        'ContentTransferEncodingHeader'
        [Code]
            File Name: email/headerregistry.py
            Object Name: MessageIDHeader
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'max_count'
                'staticmethod'
                'parser'
                'parse_message_id'
                'value_parser'
                'classmethod'
                'parse'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'MessageIDHeader'
                1
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: parse
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'value_parser'
                        'str'
                        'extend'
                        'all_defects'
                    [Var Names]
                        'cls'
                        'value'
                        'kwds'
                        'parse_tree'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'parse_tree'
                        'decoded'
                        'defects'
                    [Disassembly]
                        0       LOAD_FAST                       0: cls
                        2       LOAD_METHOD                     0: value_parser
                        4       LOAD_FAST                       1: value
                        6       CALL_METHOD                     1
                        8       DUP_TOP                         
                        10      LOAD_FAST                       2: kwds
                        12      LOAD_CONST                      1: 'parse_tree'
                        14      STORE_SUBSCR                    
                        16      STORE_FAST                      3: parse_tree
                        18      LOAD_GLOBAL                     1: str
                        20      LOAD_FAST                       3: parse_tree
                        22      CALL_FUNCTION                   1
                        24      LOAD_FAST                       2: kwds
                        26      LOAD_CONST                      2: 'decoded'
                        28      STORE_SUBSCR                    
                        30      LOAD_FAST                       2: kwds
                        32      LOAD_CONST                      3: 'defects'
                        34      BINARY_SUBSCR                   
                        36      LOAD_METHOD                     2: extend
                        38      LOAD_FAST                       3: parse_tree
                        40      LOAD_ATTR                       3: all_defects
                        42      CALL_METHOD                     1
                        44      POP_TOP                         
                        46      LOAD_CONST                      0: None
                        48      RETURN_VALUE                    
                'MessageIDHeader.parse'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'MessageIDHeader'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 1
                10      STORE_NAME                      3: max_count
                12      LOAD_NAME                       4: staticmethod
                14      LOAD_NAME                       5: parser
                16      LOAD_ATTR                       6: parse_message_id
                18      CALL_FUNCTION                   1
                20      STORE_NAME                      7: value_parser
                22      LOAD_NAME                       8: classmethod
                24      LOAD_CONST                      2: <CODE> parse
                26      LOAD_CONST                      3: 'MessageIDHeader.parse'
                28      MAKE_FUNCTION                   0
                30      CALL_FUNCTION                   1
                32      STORE_NAME                      9: parse
                34      LOAD_CONST                      4: None
                36      RETURN_VALUE                    
        'MessageIDHeader'
        'subject'
        'date'
        'resent-date'
        'orig-date'
        'sender'
        'resent-sender'
        'to'
        'resent-to'
        'cc'
        'resent-cc'
        'bcc'
        'resent-bcc'
        'from'
        'resent-from'
        'reply-to'
        'mime-version'
        'content-type'
        (
            'content-disposition'
            'content-transfer-encoding'
            'message-id'
        )
        [Code]
            File Name: email/headerregistry.py
            Object Name: HeaderRegistry
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'BaseHeader'
                'UnstructuredHeader'
                '__init__'
                'map_to_type'
                '__getitem__'
                '__call__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'HeaderRegistry'
                'A header_factory and header registry.'
                True
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __init__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'registry'
                        'base_class'
                        'default_class'
                        'update'
                        '_default_header_map'
                    [Var Names]
                        'self'
                        'base_class'
                        'default_class'
                        'use_default_map'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Create a header_factory that works with the Policy API.\n\n        base_class is the class that will be the last class in the created\n        header class\'s __bases__ list.  default_class is the class that will be\n        used if "name" (see __call__) does not appear in the registry.\n        use_default_map controls whether or not the default mapping of names to\n        specialized classes is copied in to the registry when the factory is\n        created.  The default is True.\n\n        '
                        None
                    [Disassembly]
                        0       BUILD_MAP                       0
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: registry
                        6       LOAD_FAST                       1: base_class
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: base_class
                        12      LOAD_FAST                       2: default_class
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: default_class
                        18      LOAD_FAST                       3: use_default_map
                        20      POP_JUMP_IF_FALSE               19 (to 38)
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       0: registry
                        26      LOAD_METHOD                     3: update
                        28      LOAD_GLOBAL                     4: _default_header_map
                        30      CALL_METHOD                     1
                        32      POP_TOP                         
                        34      LOAD_CONST                      1: None
                        36      RETURN_VALUE                    
                        38      LOAD_CONST                      1: None
                        40      RETURN_VALUE                    
                'HeaderRegistry.__init__'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: map_to_type
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'registry'
                        'lower'
                    [Var Names]
                        'self'
                        'name'
                        'cls'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Register cls as the specialized class for handling "name" headers.\n\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       2: cls
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: registry
                        6       LOAD_FAST                       1: name
                        8       LOAD_METHOD                     1: lower
                        10      CALL_METHOD                     0
                        12      STORE_SUBSCR                    
                        14      LOAD_CONST                      1: None
                        16      RETURN_VALUE                    
                'HeaderRegistry.map_to_type'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __getitem__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'registry'
                        'get'
                        'lower'
                        'default_class'
                        'type'
                        '__name__'
                        'base_class'
                    [Var Names]
                        'self'
                        'name'
                        'cls'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '_'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: registry
                        4       LOAD_METHOD                     1: get
                        6       LOAD_FAST                       1: name
                        8       LOAD_METHOD                     2: lower
                        10      CALL_METHOD                     0
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: default_class
                        16      CALL_METHOD                     2
                        18      STORE_FAST                      2: cls
                        20      LOAD_GLOBAL                     4: type
                        22      LOAD_CONST                      1: '_'
                        24      LOAD_FAST                       2: cls
                        26      LOAD_ATTR                       5: __name__
                        28      BINARY_ADD                      
                        30      LOAD_FAST                       2: cls
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       6: base_class
                        36      BUILD_TUPLE                     2
                        38      BUILD_MAP                       0
                        40      CALL_FUNCTION                   3
                        42      RETURN_VALUE                    
                'HeaderRegistry.__getitem__'
                [Code]
                    File Name: email/headerregistry.py
                    Object Name: __call__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'name'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Create a header instance for header 'name' from 'value'.\n\n        Creates a header instance by creating a specialized class for parsing\n        and representing the specified header by combining the factory\n        base_class with a specialized class from the registry or the\n        default_class, and passing the name and value to the constructed\n        class's constructor.\n\n        "
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       1: name
                        4       BINARY_SUBSCR                   
                        6       LOAD_FAST                       1: name
                        8       LOAD_FAST                       2: value
                        10      CALL_FUNCTION                   2
                        12      RETURN_VALUE                    
                'HeaderRegistry.__call__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'HeaderRegistry'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A header_factory and header registry.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: BaseHeader
                14      LOAD_NAME                       5: UnstructuredHeader
                16      LOAD_CONST                      2: True
                18      BUILD_TUPLE                     3
                20      LOAD_CONST                      3: <CODE> __init__
                22      LOAD_CONST                      4: 'HeaderRegistry.__init__'
                24      MAKE_FUNCTION                   1
                26      STORE_NAME                      6: __init__
                28      LOAD_CONST                      5: <CODE> map_to_type
                30      LOAD_CONST                      6: 'HeaderRegistry.map_to_type'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      7: map_to_type
                36      LOAD_CONST                      7: <CODE> __getitem__
                38      LOAD_CONST                      8: 'HeaderRegistry.__getitem__'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      8: __getitem__
                44      LOAD_CONST                      9: <CODE> __call__
                46      LOAD_CONST                      10: 'HeaderRegistry.__call__'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      9: __call__
                52      LOAD_CONST                      11: None
                54      RETURN_VALUE                    
        'HeaderRegistry'
        None
    [Disassembly]
        0       LOAD_CONST                      0: 'Representing and manipulating email headers via custom objects.\n\nThis module provides an implementation of the HeaderRegistry API.\nThe implementation is designed to flexibly follow RFC5322 rules.\n'
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: 0
        6       LOAD_CONST                      2: ('MappingProxyType',)
        8       IMPORT_NAME                     1: types
        10      IMPORT_FROM                     2: MappingProxyType
        12      STORE_NAME                      2: MappingProxyType
        14      POP_TOP                         
        16      LOAD_CONST                      1: 0
        18      LOAD_CONST                      3: ('utils',)
        20      IMPORT_NAME                     3: email
        22      IMPORT_FROM                     4: utils
        24      STORE_NAME                      4: utils
        26      POP_TOP                         
        28      LOAD_CONST                      1: 0
        30      LOAD_CONST                      4: ('errors',)
        32      IMPORT_NAME                     3: email
        34      IMPORT_FROM                     5: errors
        36      STORE_NAME                      5: errors
        38      POP_TOP                         
        40      LOAD_CONST                      1: 0
        42      LOAD_CONST                      5: ('_header_value_parser',)
        44      IMPORT_NAME                     3: email
        46      IMPORT_FROM                     6: _header_value_parser
        48      STORE_NAME                      7: parser
        50      POP_TOP                         
        52      LOAD_BUILD_CLASS                
        54      LOAD_CONST                      6: <CODE> Address
        56      LOAD_CONST                      7: 'Address'
        58      MAKE_FUNCTION                   0
        60      LOAD_CONST                      7: 'Address'
        62      CALL_FUNCTION                   2
        64      STORE_NAME                      8: Address
        66      LOAD_BUILD_CLASS                
        68      LOAD_CONST                      8: <CODE> Group
        70      LOAD_CONST                      9: 'Group'
        72      MAKE_FUNCTION                   0
        74      LOAD_CONST                      9: 'Group'
        76      CALL_FUNCTION                   2
        78      STORE_NAME                      9: Group
        80      LOAD_BUILD_CLASS                
        82      LOAD_CONST                      10: <CODE> BaseHeader
        84      LOAD_CONST                      11: 'BaseHeader'
        86      MAKE_FUNCTION                   0
        88      LOAD_CONST                      11: 'BaseHeader'
        90      LOAD_NAME                       10: str
        92      CALL_FUNCTION                   3
        94      STORE_NAME                      11: BaseHeader
        96      LOAD_CONST                      12: <CODE> _reconstruct_header
        98      LOAD_CONST                      13: '_reconstruct_header'
        100     MAKE_FUNCTION                   0
        102     STORE_NAME                      12: _reconstruct_header
        104     LOAD_BUILD_CLASS                
        106     LOAD_CONST                      14: <CODE> UnstructuredHeader
        108     LOAD_CONST                      15: 'UnstructuredHeader'
        110     MAKE_FUNCTION                   0
        112     LOAD_CONST                      15: 'UnstructuredHeader'
        114     CALL_FUNCTION                   2
        116     STORE_NAME                      13: UnstructuredHeader
        118     LOAD_BUILD_CLASS                
        120     LOAD_CONST                      16: <CODE> UniqueUnstructuredHeader
        122     LOAD_CONST                      17: 'UniqueUnstructuredHeader'
        124     MAKE_FUNCTION                   0
        126     LOAD_CONST                      17: 'UniqueUnstructuredHeader'
        128     LOAD_NAME                       13: UnstructuredHeader
        130     CALL_FUNCTION                   3
        132     STORE_NAME                      14: UniqueUnstructuredHeader
        134     LOAD_BUILD_CLASS                
        136     LOAD_CONST                      18: <CODE> DateHeader
        138     LOAD_CONST                      19: 'DateHeader'
        140     MAKE_FUNCTION                   0
        142     LOAD_CONST                      19: 'DateHeader'
        144     CALL_FUNCTION                   2
        146     STORE_NAME                      15: DateHeader
        148     LOAD_BUILD_CLASS                
        150     LOAD_CONST                      20: <CODE> UniqueDateHeader
        152     LOAD_CONST                      21: 'UniqueDateHeader'
        154     MAKE_FUNCTION                   0
        156     LOAD_CONST                      21: 'UniqueDateHeader'
        158     LOAD_NAME                       15: DateHeader
        160     CALL_FUNCTION                   3
        162     STORE_NAME                      16: UniqueDateHeader
        164     LOAD_BUILD_CLASS                
        166     LOAD_CONST                      22: <CODE> AddressHeader
        168     LOAD_CONST                      23: 'AddressHeader'
        170     MAKE_FUNCTION                   0
        172     LOAD_CONST                      23: 'AddressHeader'
        174     CALL_FUNCTION                   2
        176     STORE_NAME                      17: AddressHeader
        178     LOAD_BUILD_CLASS                
        180     LOAD_CONST                      24: <CODE> UniqueAddressHeader
        182     LOAD_CONST                      25: 'UniqueAddressHeader'
        184     MAKE_FUNCTION                   0
        186     LOAD_CONST                      25: 'UniqueAddressHeader'
        188     LOAD_NAME                       17: AddressHeader
        190     CALL_FUNCTION                   3
        192     STORE_NAME                      18: UniqueAddressHeader
        194     LOAD_BUILD_CLASS                
        196     LOAD_CONST                      26: <CODE> SingleAddressHeader
        198     LOAD_CONST                      27: 'SingleAddressHeader'
        200     MAKE_FUNCTION                   0
        202     LOAD_CONST                      27: 'SingleAddressHeader'
        204     LOAD_NAME                       17: AddressHeader
        206     CALL_FUNCTION                   3
        208     STORE_NAME                      19: SingleAddressHeader
        210     LOAD_BUILD_CLASS                
        212     LOAD_CONST                      28: <CODE> UniqueSingleAddressHeader
        214     LOAD_CONST                      29: 'UniqueSingleAddressHeader'
        216     MAKE_FUNCTION                   0
        218     LOAD_CONST                      29: 'UniqueSingleAddressHeader'
        220     LOAD_NAME                       19: SingleAddressHeader
        222     CALL_FUNCTION                   3
        224     STORE_NAME                      20: UniqueSingleAddressHeader
        226     LOAD_BUILD_CLASS                
        228     LOAD_CONST                      30: <CODE> MIMEVersionHeader
        230     LOAD_CONST                      31: 'MIMEVersionHeader'
        232     MAKE_FUNCTION                   0
        234     LOAD_CONST                      31: 'MIMEVersionHeader'
        236     CALL_FUNCTION                   2
        238     STORE_NAME                      21: MIMEVersionHeader
        240     LOAD_BUILD_CLASS                
        242     LOAD_CONST                      32: <CODE> ParameterizedMIMEHeader
        244     LOAD_CONST                      33: 'ParameterizedMIMEHeader'
        246     MAKE_FUNCTION                   0
        248     LOAD_CONST                      33: 'ParameterizedMIMEHeader'
        250     CALL_FUNCTION                   2
        252     STORE_NAME                      22: ParameterizedMIMEHeader
        254     LOAD_BUILD_CLASS                
        256     LOAD_CONST                      34: <CODE> ContentTypeHeader
        258     LOAD_CONST                      35: 'ContentTypeHeader'
        260     MAKE_FUNCTION                   0
        262     LOAD_CONST                      35: 'ContentTypeHeader'
        264     LOAD_NAME                       22: ParameterizedMIMEHeader
        266     CALL_FUNCTION                   3
        268     STORE_NAME                      23: ContentTypeHeader
        270     LOAD_BUILD_CLASS                
        272     LOAD_CONST                      36: <CODE> ContentDispositionHeader
        274     LOAD_CONST                      37: 'ContentDispositionHeader'
        276     MAKE_FUNCTION                   0
        278     LOAD_CONST                      37: 'ContentDispositionHeader'
        280     LOAD_NAME                       22: ParameterizedMIMEHeader
        282     CALL_FUNCTION                   3
        284     STORE_NAME                      24: ContentDispositionHeader
        286     LOAD_BUILD_CLASS                
        288     LOAD_CONST                      38: <CODE> ContentTransferEncodingHeader
        290     LOAD_CONST                      39: 'ContentTransferEncodingHeader'
        292     MAKE_FUNCTION                   0
        294     LOAD_CONST                      39: 'ContentTransferEncodingHeader'
        296     CALL_FUNCTION                   2
        298     STORE_NAME                      25: ContentTransferEncodingHeader
        300     LOAD_BUILD_CLASS                
        302     LOAD_CONST                      40: <CODE> MessageIDHeader
        304     LOAD_CONST                      41: 'MessageIDHeader'
        306     MAKE_FUNCTION                   0
        308     LOAD_CONST                      41: 'MessageIDHeader'
        310     CALL_FUNCTION                   2
        312     STORE_NAME                      26: MessageIDHeader
        314     BUILD_MAP                       0
        316     LOAD_CONST                      42: 'subject'
        318     LOAD_NAME                       14: UniqueUnstructuredHeader
        320     MAP_ADD                         1
        322     LOAD_CONST                      43: 'date'
        324     LOAD_NAME                       16: UniqueDateHeader
        326     MAP_ADD                         1
        328     LOAD_CONST                      44: 'resent-date'
        330     LOAD_NAME                       15: DateHeader
        332     MAP_ADD                         1
        334     LOAD_CONST                      45: 'orig-date'
        336     LOAD_NAME                       16: UniqueDateHeader
        338     MAP_ADD                         1
        340     LOAD_CONST                      46: 'sender'
        342     LOAD_NAME                       20: UniqueSingleAddressHeader
        344     MAP_ADD                         1
        346     LOAD_CONST                      47: 'resent-sender'
        348     LOAD_NAME                       19: SingleAddressHeader
        350     MAP_ADD                         1
        352     LOAD_CONST                      48: 'to'
        354     LOAD_NAME                       18: UniqueAddressHeader
        356     MAP_ADD                         1
        358     LOAD_CONST                      49: 'resent-to'
        360     LOAD_NAME                       17: AddressHeader
        362     MAP_ADD                         1
        364     LOAD_CONST                      50: 'cc'
        366     LOAD_NAME                       18: UniqueAddressHeader
        368     MAP_ADD                         1
        370     LOAD_CONST                      51: 'resent-cc'
        372     LOAD_NAME                       17: AddressHeader
        374     MAP_ADD                         1
        376     LOAD_CONST                      52: 'bcc'
        378     LOAD_NAME                       18: UniqueAddressHeader
        380     MAP_ADD                         1
        382     LOAD_CONST                      53: 'resent-bcc'
        384     LOAD_NAME                       17: AddressHeader
        386     MAP_ADD                         1
        388     LOAD_CONST                      54: 'from'
        390     LOAD_NAME                       18: UniqueAddressHeader
        392     MAP_ADD                         1
        394     LOAD_CONST                      55: 'resent-from'
        396     LOAD_NAME                       17: AddressHeader
        398     MAP_ADD                         1
        400     LOAD_CONST                      56: 'reply-to'
        402     LOAD_NAME                       18: UniqueAddressHeader
        404     MAP_ADD                         1
        406     LOAD_CONST                      57: 'mime-version'
        408     LOAD_NAME                       21: MIMEVersionHeader
        410     MAP_ADD                         1
        412     LOAD_CONST                      58: 'content-type'
        414     LOAD_NAME                       23: ContentTypeHeader
        416     MAP_ADD                         1
        418     LOAD_NAME                       24: ContentDispositionHeader
        420     LOAD_NAME                       25: ContentTransferEncodingHeader
        422     LOAD_NAME                       26: MessageIDHeader
        424     LOAD_CONST                      59: ('content-disposition', 'content-transfer-encoding', 'message-id')
        426     BUILD_CONST_KEY_MAP             3
        428     DICT_UPDATE                     1
        430     STORE_NAME                      27: _default_header_map
        432     LOAD_BUILD_CLASS                
        434     LOAD_CONST                      60: <CODE> HeaderRegistry
        436     LOAD_CONST                      61: 'HeaderRegistry'
        438     MAKE_FUNCTION                   0
        440     LOAD_CONST                      61: 'HeaderRegistry'
        442     CALL_FUNCTION                   2
        444     STORE_NAME                      28: HeaderRegistry
        446     LOAD_CONST                      62: None
        448     RETURN_VALUE                    
