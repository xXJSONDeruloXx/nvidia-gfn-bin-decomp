__init__.pyc (Python 3.10)
[Code]
    File Name: logging/__init__.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 12
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        'sys'
        'os'
        'time'
        'io'
        're'
        'traceback'
        'warnings'
        'weakref'
        'collections.abc'
        'collections'
        'string'
        'Template'
        'Formatter'
        'StrFormatter'
        '__all__'
        'threading'
        '__author__'
        '__status__'
        '__version__'
        '__date__'
        '_startTime'
        'raiseExceptions'
        'logThreads'
        'logMultiprocessing'
        'logProcesses'
        'CRITICAL'
        'FATAL'
        'ERROR'
        'WARNING'
        'WARN'
        'INFO'
        'DEBUG'
        'NOTSET'
        '_levelToName'
        '_nameToLevel'
        'getLevelName'
        'addLevelName'
        'hasattr'
        'currentframe'
        'path'
        'normcase'
        '__code__'
        'co_filename'
        '_srcfile'
        '_checkLevel'
        'RLock'
        '_lock'
        '_acquireLock'
        '_releaseLock'
        '_register_at_fork_reinit_lock'
        'WeakSet'
        '_at_fork_reinit_lock_weakset'
        '_after_at_fork_child_reinit_locks'
        'register_at_fork'
        'object'
        'LogRecord'
        '_logRecordFactory'
        'setLogRecordFactory'
        'getLogRecordFactory'
        'makeLogRecord'
        '_str_formatter'
        'PercentStyle'
        'StrFormatStyle'
        'StringTemplateStyle'
        'BASIC_FORMAT'
        '_STYLES'
        '_defaultFormatter'
        'BufferingFormatter'
        'Filter'
        'Filterer'
        'WeakValueDictionary'
        '_handlers'
        '_handlerList'
        '_removeHandlerRef'
        '_addHandlerRef'
        'Handler'
        'StreamHandler'
        'FileHandler'
        '_StderrHandler'
        '_defaultLastResort'
        'lastResort'
        'PlaceHolder'
        'setLoggerClass'
        'getLoggerClass'
        'Manager'
        'Logger'
        'RootLogger'
        '_loggerClass'
        'LoggerAdapter'
        'root'
        'manager'
        'basicConfig'
        'getLogger'
        'critical'
        'fatal'
        'error'
        'exception'
        'warning'
        'warn'
        'info'
        'debug'
        'log'
        'disable'
        'shutdown'
        'atexit'
        'register'
        'NullHandler'
        '_warnings_showwarning'
        '_showwarning'
        'captureWarnings'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        "\nLogging package for Python. Based on PEP 282 and comments thereto in\ncomp.lang.python.\n\nCopyright (C) 2001-2019 Vinay Sajip. All Rights Reserved.\n\nTo use, simply 'import logging' and log away!\n"
        0
        None
        (
            'Template'
        )
        (
            'Formatter'
        )
        (
            'BASIC_FORMAT'
            'BufferingFormatter'
            'CRITICAL'
            'DEBUG'
            'ERROR'
            'FATAL'
            'FileHandler'
            'Filter'
            'Formatter'
            'Handler'
            'INFO'
            'LogRecord'
            'Logger'
            'LoggerAdapter'
            'NOTSET'
            'NullHandler'
            'StreamHandler'
            'WARN'
            'WARNING'
            'addLevelName'
            'basicConfig'
            'captureWarnings'
            'critical'
            'debug'
            'disable'
            'error'
            'exception'
            'fatal'
            'getLevelName'
            'getLogger'
            'getLoggerClass'
            'info'
            'log'
            'makeLogRecord'
            'setLoggerClass'
            'shutdown'
            'warn'
            'warning'
            'getLogRecordFactory'
            'setLogRecordFactory'
            'lastResort'
            'raiseExceptions'
        )
        'Vinay Sajip <vinay_sajip@red-dove.com>'
        'production'
        '0.5.1.2'
        '07 February 2010'
        True
        50
        40
        30
        20
        10
        'CRITICAL'
        'ERROR'
        'WARNING'
        'INFO'
        'DEBUG'
        'NOTSET'
        (
            'CRITICAL'
            'FATAL'
            'ERROR'
            'WARN'
            'WARNING'
            'INFO'
            'DEBUG'
            'NOTSET'
        )
        [Code]
            File Name: logging/__init__.py
            Object Name: getLevelName
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_levelToName'
                'get'
                '_nameToLevel'
            [Var Names]
                'level'
                'result'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Return the textual or numeric representation of logging level 'level'.\n\n    If the level is one of the predefined levels (CRITICAL, ERROR, WARNING,\n    INFO, DEBUG) then you get the corresponding string. If you have\n    associated levels with names using addLevelName then the name you have\n    associated with 'level' is returned.\n\n    If a numeric value corresponding to one of the defined levels is passed\n    in, the corresponding string representation is returned.\n\n    If a string representation of the level is passed in, the corresponding\n    numeric value is returned.\n\n    If no matching numeric or string value is passed in, the string\n    'Level %s' % level is returned.\n    "
                None
                'Level %s'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _levelToName
                2       LOAD_METHOD                     1: get
                4       LOAD_FAST                       0: level
                6       CALL_METHOD                     1
                8       STORE_FAST                      1: result
                10      LOAD_FAST                       1: result
                12      LOAD_CONST                      1: None
                14      IS_OP                           1 (is not)
                16      POP_JUMP_IF_FALSE               11 (to 22)
                18      LOAD_FAST                       1: result
                20      RETURN_VALUE                    
                22      LOAD_GLOBAL                     2: _nameToLevel
                24      LOAD_METHOD                     1: get
                26      LOAD_FAST                       0: level
                28      CALL_METHOD                     1
                30      STORE_FAST                      1: result
                32      LOAD_FAST                       1: result
                34      LOAD_CONST                      1: None
                36      IS_OP                           1 (is not)
                38      POP_JUMP_IF_FALSE               22 (to 44)
                40      LOAD_FAST                       1: result
                42      RETURN_VALUE                    
                44      LOAD_CONST                      2: 'Level %s'
                46      LOAD_FAST                       0: level
                48      BINARY_MODULO                   
                50      RETURN_VALUE                    
        'getLevelName'
        [Code]
            File Name: logging/__init__.py
            Object Name: addLevelName
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_acquireLock'
                '_levelToName'
                '_nameToLevel'
                '_releaseLock'
            [Var Names]
                'level'
                'levelName'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Associate 'levelName' with 'level'.\n\n    This is used when converting levels to text during message formatting.\n    "
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _acquireLock
                2       CALL_FUNCTION                   0
                4       POP_TOP                         
                6       SETUP_FINALLY                   14 (to 36)
                8       LOAD_FAST                       1: levelName
                10      LOAD_GLOBAL                     1: _levelToName
                12      LOAD_FAST                       0: level
                14      STORE_SUBSCR                    
                16      LOAD_FAST                       0: level
                18      LOAD_GLOBAL                     2: _nameToLevel
                20      LOAD_FAST                       1: levelName
                22      STORE_SUBSCR                    
                24      POP_BLOCK                       
                26      LOAD_GLOBAL                     3: _releaseLock
                28      CALL_FUNCTION                   0
                30      POP_TOP                         
                32      LOAD_CONST                      1: None
                34      RETURN_VALUE                    
                36      LOAD_GLOBAL                     3: _releaseLock
                38      CALL_FUNCTION                   0
                40      POP_TOP                         
                42      RERAISE                         0
        'addLevelName'
        '_getframe'
        [Code]
            File Name: logging/__init__.py
            Object Name: <lambda>
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'sys'
                '_getframe'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                3
            [Disassembly]
                0       LOAD_GLOBAL                     0: sys
                2       LOAD_METHOD                     1: _getframe
                4       LOAD_CONST                      1: 3
                6       CALL_METHOD                     1
                8       RETURN_VALUE                    
        '<lambda>'
        [Code]
            File Name: logging/__init__.py
            Object Name: currentframe
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Exception'
                'sys'
                'exc_info'
                'tb_frame'
                'f_back'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Return the frame object for the caller's stack frame."
                2
            [Disassembly]
                0       SETUP_FINALLY                   2 (to 6)
                2       LOAD_GLOBAL                     0: Exception
                4       RAISE_VARARGS                   1
                6       DUP_TOP                         
                8       LOAD_GLOBAL                     0: Exception
                10      JUMP_IF_NOT_EXC_MATCH           19 (to 38)
                12      POP_TOP                         
                14      POP_TOP                         
                16      POP_TOP                         
                18      LOAD_GLOBAL                     1: sys
                20      LOAD_METHOD                     2: exc_info
                22      CALL_METHOD                     0
                24      LOAD_CONST                      1: 2
                26      BINARY_SUBSCR                   
                28      LOAD_ATTR                       3: tb_frame
                30      LOAD_ATTR                       4: f_back
                32      ROT_FOUR                        
                34      POP_EXCEPT                      
                36      RETURN_VALUE                    
                38      RERAISE                         0
        'currentframe'
        [Code]
            File Name: logging/__init__.py
            Object Name: _checkLevel
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'int'
                'str'
                '_nameToLevel'
                'ValueError'
                'TypeError'
            [Var Names]
                'level'
                'rv'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'Unknown level: %r'
                'Level not an integer or a valid string: %r'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: level
                4       LOAD_GLOBAL                     1: int
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               9 (to 18)
                10      LOAD_FAST                       0: level
                12      STORE_FAST                      1: rv
                14      LOAD_FAST                       1: rv
                16      RETURN_VALUE                    
                18      LOAD_GLOBAL                     2: str
                20      LOAD_FAST                       0: level
                22      CALL_FUNCTION                   1
                24      LOAD_FAST                       0: level
                26      COMPARE_OP                      2 (==)
                28      POP_JUMP_IF_FALSE               31 (to 62)
                30      LOAD_FAST                       0: level
                32      LOAD_GLOBAL                     3: _nameToLevel
                34      CONTAINS_OP                     1 (not in)
                36      POP_JUMP_IF_FALSE               25 (to 50)
                38      LOAD_GLOBAL                     4: ValueError
                40      LOAD_CONST                      1: 'Unknown level: %r'
                42      LOAD_FAST                       0: level
                44      BINARY_MODULO                   
                46      CALL_FUNCTION                   1
                48      RAISE_VARARGS                   1
                50      LOAD_GLOBAL                     3: _nameToLevel
                52      LOAD_FAST                       0: level
                54      BINARY_SUBSCR                   
                56      STORE_FAST                      1: rv
                58      LOAD_FAST                       1: rv
                60      RETURN_VALUE                    
                62      LOAD_GLOBAL                     5: TypeError
                64      LOAD_CONST                      2: 'Level not an integer or a valid string: %r'
                66      LOAD_FAST                       0: level
                68      BUILD_TUPLE                     1
                70      BINARY_MODULO                   
                72      CALL_FUNCTION                   1
                74      RAISE_VARARGS                   1
        '_checkLevel'
        [Code]
            File Name: logging/__init__.py
            Object Name: _acquireLock
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_lock'
                'acquire'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Acquire the module-level lock for serializing access to shared data.\n\n    This should be released with _releaseLock().\n    '
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _lock
                2       POP_JUMP_IF_FALSE               8 (to 16)
                4       LOAD_GLOBAL                     0: _lock
                6       LOAD_METHOD                     1: acquire
                8       CALL_METHOD                     0
                10      POP_TOP                         
                12      LOAD_CONST                      1: None
                14      RETURN_VALUE                    
                16      LOAD_CONST                      1: None
                18      RETURN_VALUE                    
        '_acquireLock'
        [Code]
            File Name: logging/__init__.py
            Object Name: _releaseLock
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_lock'
                'release'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Release the module-level lock acquired by calling _acquireLock().\n    '
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _lock
                2       POP_JUMP_IF_FALSE               8 (to 16)
                4       LOAD_GLOBAL                     0: _lock
                6       LOAD_METHOD                     1: release
                8       CALL_METHOD                     0
                10      POP_TOP                         
                12      LOAD_CONST                      1: None
                14      RETURN_VALUE                    
                16      LOAD_CONST                      1: None
                18      RETURN_VALUE                    
        '_releaseLock'
        'register_at_fork'
        [Code]
            File Name: logging/__init__.py
            Object Name: _register_at_fork_reinit_lock
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'instance'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_CONST                      0: None
                2       RETURN_VALUE                    
        '_register_at_fork_reinit_lock'
        [Code]
            File Name: logging/__init__.py
            Object Name: _register_at_fork_reinit_lock
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_acquireLock'
                '_at_fork_reinit_lock_weakset'
                'add'
                '_releaseLock'
            [Var Names]
                'instance'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _acquireLock
                2       CALL_FUNCTION                   0
                4       POP_TOP                         
                6       SETUP_FINALLY                   11 (to 30)
                8       LOAD_GLOBAL                     1: _at_fork_reinit_lock_weakset
                10      LOAD_METHOD                     2: add
                12      LOAD_FAST                       0: instance
                14      CALL_METHOD                     1
                16      POP_TOP                         
                18      POP_BLOCK                       
                20      LOAD_GLOBAL                     3: _releaseLock
                22      CALL_FUNCTION                   0
                24      POP_TOP                         
                26      LOAD_CONST                      0: None
                28      RETURN_VALUE                    
                30      LOAD_GLOBAL                     3: _releaseLock
                32      CALL_FUNCTION                   0
                34      POP_TOP                         
                36      RERAISE                         0
        [Code]
            File Name: logging/__init__.py
            Object Name: _after_at_fork_child_reinit_locks
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_at_fork_reinit_lock_weakset'
                '_at_fork_reinit'
                '_lock'
            [Var Names]
                'handler'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _at_fork_reinit_lock_weakset
                2       GET_ITER                        
                4       FOR_ITER                        6 (to 18)
                6       STORE_FAST                      0: handler
                8       LOAD_FAST                       0: handler
                10      LOAD_METHOD                     1: _at_fork_reinit
                12      CALL_METHOD                     0
                14      POP_TOP                         
                16      JUMP_ABSOLUTE                   2 (to 4)
                18      LOAD_GLOBAL                     2: _lock
                20      LOAD_METHOD                     1: _at_fork_reinit
                22      CALL_METHOD                     0
                24      POP_TOP                         
                26      LOAD_CONST                      0: None
                28      RETURN_VALUE                    
        '_after_at_fork_child_reinit_locks'
        (
            'before'
            'after_in_child'
            'after_in_parent'
        )
        [Code]
            File Name: logging/__init__.py
            Object Name: LogRecord
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__repr__'
                'getMessage'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'LogRecord'
                '\n    A LogRecord instance represents an event being logged.\n\n    LogRecord instances are created every time something is logged. They\n    contain all the information pertinent to the event being logged. The\n    main information passed in is in msg and args, which are combined\n    using str(msg) % args to create the message field of the record. The\n    record also includes information such as when the record was created,\n    the source line where the logging call was made, and any exception\n    information to be logged.\n    '
                None
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 10
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 13
                    Stack Size: 10
                    Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'time'
                        'name'
                        'msg'
                        'len'
                        'isinstance'
                        'collections'
                        'abc'
                        'Mapping'
                        'args'
                        'getLevelName'
                        'levelname'
                        'levelno'
                        'pathname'
                        'os'
                        'path'
                        'basename'
                        'filename'
                        'splitext'
                        'module'
                        'TypeError'
                        'ValueError'
                        'AttributeError'
                        'exc_info'
                        'exc_text'
                        'stack_info'
                        'lineno'
                        'funcName'
                        'created'
                        'int'
                        'msecs'
                        '_startTime'
                        'relativeCreated'
                        'logThreads'
                        'threading'
                        'get_ident'
                        'thread'
                        'current_thread'
                        'threadName'
                        'logMultiprocessing'
                        'processName'
                        'sys'
                        'modules'
                        'get'
                        'current_process'
                        'Exception'
                        'logProcesses'
                        'hasattr'
                        'getpid'
                        'process'
                    [Var Names]
                        'self'
                        'name'
                        'level'
                        'pathname'
                        'lineno'
                        'msg'
                        'args'
                        'exc_info'
                        'func'
                        'sinfo'
                        'kwargs'
                        'ct'
                        'mp'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Initialize a logging record with interesting information.\n        '
                        1
                        0
                        'Unknown module'
                        None
                        1000
                        0
                        'MainProcess'
                        'multiprocessing'
                        'getpid'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: time
                        2       LOAD_METHOD                     0: time
                        4       CALL_METHOD                     0
                        6       STORE_FAST                      11: ct
                        8       LOAD_FAST                       1: name
                        10      LOAD_FAST                       0: self
                        12      STORE_ATTR                      1: name
                        14      LOAD_FAST                       5: msg
                        16      LOAD_FAST                       0: self
                        18      STORE_ATTR                      2: msg
                        20      LOAD_FAST                       6: args
                        22      POP_JUMP_IF_FALSE               35 (to 70)
                        24      LOAD_GLOBAL                     3: len
                        26      LOAD_FAST                       6: args
                        28      CALL_FUNCTION                   1
                        30      LOAD_CONST                      1: 1
                        32      COMPARE_OP                      2 (==)
                        34      POP_JUMP_IF_FALSE               35 (to 70)
                        36      LOAD_GLOBAL                     4: isinstance
                        38      LOAD_FAST                       6: args
                        40      LOAD_CONST                      2: 0
                        42      BINARY_SUBSCR                   
                        44      LOAD_GLOBAL                     5: collections
                        46      LOAD_ATTR                       6: abc
                        48      LOAD_ATTR                       7: Mapping
                        50      CALL_FUNCTION                   2
                        52      POP_JUMP_IF_FALSE               35 (to 70)
                        54      LOAD_FAST                       6: args
                        56      LOAD_CONST                      2: 0
                        58      BINARY_SUBSCR                   
                        60      POP_JUMP_IF_FALSE               35 (to 70)
                        62      LOAD_FAST                       6: args
                        64      LOAD_CONST                      2: 0
                        66      BINARY_SUBSCR                   
                        68      STORE_FAST                      6: args
                        70      LOAD_FAST                       6: args
                        72      LOAD_FAST                       0: self
                        74      STORE_ATTR                      8: args
                        76      LOAD_GLOBAL                     9: getLevelName
                        78      LOAD_FAST                       2: level
                        80      CALL_FUNCTION                   1
                        82      LOAD_FAST                       0: self
                        84      STORE_ATTR                      10: levelname
                        86      LOAD_FAST                       2: level
                        88      LOAD_FAST                       0: self
                        90      STORE_ATTR                      11: levelno
                        92      LOAD_FAST                       3: pathname
                        94      LOAD_FAST                       0: self
                        96      STORE_ATTR                      12: pathname
                        98      SETUP_FINALLY                   19 (to 138)
                        100     LOAD_GLOBAL                     13: os
                        102     LOAD_ATTR                       14: path
                        104     LOAD_METHOD                     15: basename
                        106     LOAD_FAST                       3: pathname
                        108     CALL_METHOD                     1
                        110     LOAD_FAST                       0: self
                        112     STORE_ATTR                      16: filename
                        114     LOAD_GLOBAL                     13: os
                        116     LOAD_ATTR                       14: path
                        118     LOAD_METHOD                     17: splitext
                        120     LOAD_FAST                       0: self
                        122     LOAD_ATTR                       16: filename
                        124     CALL_METHOD                     1
                        126     LOAD_CONST                      2: 0
                        128     BINARY_SUBSCR                   
                        130     LOAD_FAST                       0: self
                        132     STORE_ATTR                      18: module
                        134     POP_BLOCK                       
                        136     JUMP_FORWARD                    18 (to 174)
                        138     DUP_TOP                         
                        140     LOAD_GLOBAL                     19: TypeError
                        142     LOAD_GLOBAL                     20: ValueError
                        144     LOAD_GLOBAL                     21: AttributeError
                        146     BUILD_TUPLE                     3
                        148     JUMP_IF_NOT_EXC_MATCH           86 (to 172)
                        150     POP_TOP                         
                        152     POP_TOP                         
                        154     POP_TOP                         
                        156     LOAD_FAST                       3: pathname
                        158     LOAD_FAST                       0: self
                        160     STORE_ATTR                      16: filename
                        162     LOAD_CONST                      3: 'Unknown module'
                        164     LOAD_FAST                       0: self
                        166     STORE_ATTR                      18: module
                        168     POP_EXCEPT                      
                        170     JUMP_FORWARD                    1 (to 174)
                        172     RERAISE                         0
                        174     LOAD_FAST                       7: exc_info
                        176     LOAD_FAST                       0: self
                        178     STORE_ATTR                      22: exc_info
                        180     LOAD_CONST                      4: None
                        182     LOAD_FAST                       0: self
                        184     STORE_ATTR                      23: exc_text
                        186     LOAD_FAST                       9: sinfo
                        188     LOAD_FAST                       0: self
                        190     STORE_ATTR                      24: stack_info
                        192     LOAD_FAST                       4: lineno
                        194     LOAD_FAST                       0: self
                        196     STORE_ATTR                      25: lineno
                        198     LOAD_FAST                       8: func
                        200     LOAD_FAST                       0: self
                        202     STORE_ATTR                      26: funcName
                        204     LOAD_FAST                       11: ct
                        206     LOAD_FAST                       0: self
                        208     STORE_ATTR                      27: created
                        210     LOAD_GLOBAL                     28: int
                        212     LOAD_FAST                       11: ct
                        214     LOAD_GLOBAL                     28: int
                        216     LOAD_FAST                       11: ct
                        218     CALL_FUNCTION                   1
                        220     BINARY_SUBTRACT                 
                        222     LOAD_CONST                      5: 1000
                        224     BINARY_MULTIPLY                 
                        226     CALL_FUNCTION                   1
                        228     LOAD_CONST                      6: 0
                        230     BINARY_ADD                      
                        232     LOAD_FAST                       0: self
                        234     STORE_ATTR                      29: msecs
                        236     LOAD_FAST                       0: self
                        238     LOAD_ATTR                       27: created
                        240     LOAD_GLOBAL                     30: _startTime
                        242     BINARY_SUBTRACT                 
                        244     LOAD_CONST                      5: 1000
                        246     BINARY_MULTIPLY                 
                        248     LOAD_FAST                       0: self
                        250     STORE_ATTR                      31: relativeCreated
                        252     LOAD_GLOBAL                     32: logThreads
                        254     POP_JUMP_IF_FALSE               140 (to 280)
                        256     LOAD_GLOBAL                     33: threading
                        258     LOAD_METHOD                     34: get_ident
                        260     CALL_METHOD                     0
                        262     LOAD_FAST                       0: self
                        264     STORE_ATTR                      35: thread
                        266     LOAD_GLOBAL                     33: threading
                        268     LOAD_METHOD                     36: current_thread
                        270     CALL_METHOD                     0
                        272     LOAD_ATTR                       1: name
                        274     LOAD_FAST                       0: self
                        276     STORE_ATTR                      37: threadName
                        278     JUMP_FORWARD                    6 (to 292)
                        280     LOAD_CONST                      4: None
                        282     LOAD_FAST                       0: self
                        284     STORE_ATTR                      35: thread
                        286     LOAD_CONST                      4: None
                        288     LOAD_FAST                       0: self
                        290     STORE_ATTR                      37: threadName
                        292     LOAD_GLOBAL                     38: logMultiprocessing
                        294     POP_JUMP_IF_TRUE                152 (to 304)
                        296     LOAD_CONST                      4: None
                        298     LOAD_FAST                       0: self
                        300     STORE_ATTR                      39: processName
                        302     JUMP_FORWARD                    31 (to 366)
                        304     LOAD_CONST                      7: 'MainProcess'
                        306     LOAD_FAST                       0: self
                        308     STORE_ATTR                      39: processName
                        310     LOAD_GLOBAL                     40: sys
                        312     LOAD_ATTR                       41: modules
                        314     LOAD_METHOD                     42: get
                        316     LOAD_CONST                      8: 'multiprocessing'
                        318     CALL_METHOD                     1
                        320     STORE_FAST                      12: mp
                        322     LOAD_FAST                       12: mp
                        324     LOAD_CONST                      4: None
                        326     IS_OP                           1 (is not)
                        328     POP_JUMP_IF_FALSE               183 (to 366)
                        330     SETUP_FINALLY                   8 (to 348)
                        332     LOAD_FAST                       12: mp
                        334     LOAD_METHOD                     43: current_process
                        336     CALL_METHOD                     0
                        338     LOAD_ATTR                       1: name
                        340     LOAD_FAST                       0: self
                        342     STORE_ATTR                      39: processName
                        344     POP_BLOCK                       
                        346     JUMP_FORWARD                    9 (to 366)
                        348     DUP_TOP                         
                        350     LOAD_GLOBAL                     44: Exception
                        352     JUMP_IF_NOT_EXC_MATCH           182 (to 364)
                        354     POP_TOP                         
                        356     POP_TOP                         
                        358     POP_TOP                         
                        360     POP_EXCEPT                      
                        362     JUMP_FORWARD                    1 (to 366)
                        364     RERAISE                         0
                        366     LOAD_GLOBAL                     45: logProcesses
                        368     POP_JUMP_IF_FALSE               197 (to 394)
                        370     LOAD_GLOBAL                     46: hasattr
                        372     LOAD_GLOBAL                     13: os
                        374     LOAD_CONST                      9: 'getpid'
                        376     CALL_FUNCTION                   2
                        378     POP_JUMP_IF_FALSE               197 (to 394)
                        380     LOAD_GLOBAL                     13: os
                        382     LOAD_METHOD                     47: getpid
                        384     CALL_METHOD                     0
                        386     LOAD_FAST                       0: self
                        388     STORE_ATTR                      48: process
                        390     LOAD_CONST                      4: None
                        392     RETURN_VALUE                    
                        394     LOAD_CONST                      4: None
                        396     LOAD_FAST                       0: self
                        398     STORE_ATTR                      48: process
                        400     LOAD_CONST                      4: None
                        402     RETURN_VALUE                    
                'LogRecord.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'name'
                        'levelno'
                        'pathname'
                        'lineno'
                        'msg'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<LogRecord: %s, %s, %s, %s, "%s">'
                    [Disassembly]
                        0       LOAD_CONST                      1: '<LogRecord: %s, %s, %s, %s, "%s">'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: name
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: levelno
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: pathname
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: lineno
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       4: msg
                        22      BUILD_TUPLE                     5
                        24      BINARY_MODULO                   
                        26      RETURN_VALUE                    
                'LogRecord.__repr__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: getMessage
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'str'
                        'msg'
                        'args'
                    [Var Names]
                        'self'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Return the message for this LogRecord.\n\n        Return the message for this LogRecord after merging any user-supplied\n        arguments with the message.\n        '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: str
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: msg
                        6       CALL_FUNCTION                   1
                        8       STORE_FAST                      1: msg
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: args
                        14      POP_JUMP_IF_FALSE               13 (to 26)
                        16      LOAD_FAST                       1: msg
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       2: args
                        22      BINARY_MODULO                   
                        24      STORE_FAST                      1: msg
                        26      LOAD_FAST                       1: msg
                        28      RETURN_VALUE                    
                'LogRecord.getMessage'
                (
                    None
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'LogRecord'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    A LogRecord instance represents an event being logged.\n\n    LogRecord instances are created every time something is logged. They\n    contain all the information pertinent to the event being logged. The\n    main information passed in is in msg and args, which are combined\n    using str(msg) % args to create the message field of the record. The\n    record also includes information such as when the record was created,\n    the source line where the logging call was made, and any exception\n    information to be logged.\n    '
                10      STORE_NAME                      3: __doc__
                12      NOP                             
                14      LOAD_CONST                      9: (None, None)
                16      LOAD_CONST                      3: <CODE> __init__
                18      LOAD_CONST                      4: 'LogRecord.__init__'
                20      MAKE_FUNCTION                   1
                22      STORE_NAME                      4: __init__
                24      LOAD_CONST                      5: <CODE> __repr__
                26      LOAD_CONST                      6: 'LogRecord.__repr__'
                28      MAKE_FUNCTION                   0
                30      STORE_NAME                      5: __repr__
                32      LOAD_CONST                      7: <CODE> getMessage
                34      LOAD_CONST                      8: 'LogRecord.getMessage'
                36      MAKE_FUNCTION                   0
                38      STORE_NAME                      6: getMessage
                40      LOAD_CONST                      2: None
                42      RETURN_VALUE                    
        'LogRecord'
        [Code]
            File Name: logging/__init__.py
            Object Name: setLogRecordFactory
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_logRecordFactory'
            [Var Names]
                'factory'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Set the factory to be used when instantiating a log record.\n\n    :param factory: A callable which will be called to instantiate\n    a log record.\n    '
                None
            [Disassembly]
                0       LOAD_FAST                       0: factory
                2       STORE_GLOBAL                    0: _logRecordFactory
                4       LOAD_CONST                      1: None
                6       RETURN_VALUE                    
        'setLogRecordFactory'
        [Code]
            File Name: logging/__init__.py
            Object Name: getLogRecordFactory
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_logRecordFactory'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Return the factory to be used when instantiating a log record.\n    '
            [Disassembly]
                0       LOAD_GLOBAL                     0: _logRecordFactory
                2       RETURN_VALUE                    
        'getLogRecordFactory'
        [Code]
            File Name: logging/__init__.py
            Object Name: makeLogRecord
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_logRecordFactory'
                '__dict__'
                'update'
            [Var Names]
                'dict'
                'rv'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Make a LogRecord whose attributes are defined by the specified dictionary,\n    This function is useful for converting a logging event received over\n    a socket connection (which is sent as a dictionary) into a LogRecord\n    instance.\n    '
                None
                ''
                0
                (
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: _logRecordFactory
                2       LOAD_CONST                      1: None
                4       LOAD_CONST                      1: None
                6       LOAD_CONST                      2: ''
                8       LOAD_CONST                      3: 0
                10      LOAD_CONST                      2: ''
                12      LOAD_CONST                      4: ()
                14      LOAD_CONST                      1: None
                16      LOAD_CONST                      1: None
                18      CALL_FUNCTION                   8
                20      STORE_FAST                      1: rv
                22      LOAD_FAST                       1: rv
                24      LOAD_ATTR                       1: __dict__
                26      LOAD_METHOD                     2: update
                28      LOAD_FAST                       0: dict
                30      CALL_METHOD                     1
                32      POP_TOP                         
                34      LOAD_FAST                       1: rv
                36      RETURN_VALUE                    
        'makeLogRecord'
        [Code]
            File Name: logging/__init__.py
            Object Name: PercentStyle
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'default_format'
                'asctime_format'
                'asctime_search'
                're'
                'compile'
                'I'
                'validation_pattern'
                '__init__'
                'usesTime'
                'validate'
                '_format'
                'format'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'PercentStyle'
                '%(message)s'
                '%(asctime)s'
                '%(asctime)'
                '%\\(\\w+\\)[#0+ -]*(\\*|\\d+)?(\\.(\\*|\\d+))?[diouxefgcrsa%]'
                None
                (
                    'defaults'
                )
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'default_format'
                        '_fmt'
                        '_defaults'
                    [Var Names]
                        'self'
                        'fmt'
                        'defaults'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: fmt
                        2       JUMP_IF_TRUE_OR_POP             4 (to 8)
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       0: default_format
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _fmt
                        12      LOAD_FAST                       2: defaults
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: _defaults
                        18      LOAD_CONST                      0: None
                        20      RETURN_VALUE                    
                'PercentStyle.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: usesTime
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_fmt'
                        'find'
                        'asctime_search'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _fmt
                        4       LOAD_METHOD                     1: find
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: asctime_search
                        10      CALL_METHOD                     1
                        12      LOAD_CONST                      1: 0
                        14      COMPARE_OP                      5 (>=)
                        16      RETURN_VALUE                    
                'PercentStyle.usesTime'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: validate
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'validation_pattern'
                        'search'
                        '_fmt'
                        'ValueError'
                        'default_format'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Validate the input format, ensure it matches the correct style'
                        "Invalid format '%s' for '%s' style"
                        0
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: validation_pattern
                        4       LOAD_METHOD                     1: search
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: _fmt
                        10      CALL_METHOD                     1
                        12      POP_JUMP_IF_TRUE                19 (to 38)
                        14      LOAD_GLOBAL                     3: ValueError
                        16      LOAD_CONST                      1: "Invalid format '%s' for '%s' style"
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       2: _fmt
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       4: default_format
                        26      LOAD_CONST                      2: 0
                        28      BINARY_SUBSCR                   
                        30      BUILD_TUPLE                     2
                        32      BINARY_MODULO                   
                        34      CALL_FUNCTION                   1
                        36      RAISE_VARARGS                   1
                        38      LOAD_CONST                      3: None
                        40      RETURN_VALUE                    
                'PercentStyle.validate'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: _format
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_defaults'
                        '__dict__'
                        '_fmt'
                    [Var Names]
                        'self'
                        'record'
                        'defaults'
                        'values'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _defaults
                        4       DUP_TOP                         
                        6       STORE_FAST                      2: defaults
                        8       POP_JUMP_IF_FALSE               11 (to 22)
                        10      LOAD_FAST                       2: defaults
                        12      LOAD_FAST                       1: record
                        14      LOAD_ATTR                       1: __dict__
                        16      BINARY_OR                       
                        18      STORE_FAST                      3: values
                        20      JUMP_FORWARD                    3 (to 28)
                        22      LOAD_FAST                       1: record
                        24      LOAD_ATTR                       1: __dict__
                        26      STORE_FAST                      3: values
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       2: _fmt
                        32      LOAD_FAST                       3: values
                        34      BINARY_MODULO                   
                        36      RETURN_VALUE                    
                'PercentStyle._format'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: format
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_format'
                        'KeyError'
                        'ValueError'
                    [Var Names]
                        'self'
                        'record'
                        'e'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Formatting field not found in record: %s'
                    [Disassembly]
                        0       SETUP_FINALLY                   6 (to 14)
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _format
                        6       LOAD_FAST                       1: record
                        8       CALL_METHOD                     1
                        10      POP_BLOCK                       
                        12      RETURN_VALUE                    
                        14      DUP_TOP                         
                        16      LOAD_GLOBAL                     1: KeyError
                        18      JUMP_IF_NOT_EXC_MATCH           24 (to 48)
                        20      POP_TOP                         
                        22      STORE_FAST                      2: e
                        24      POP_TOP                         
                        26      SETUP_FINALLY                   6 (to 40)
                        28      LOAD_GLOBAL                     2: ValueError
                        30      LOAD_CONST                      1: 'Formatting field not found in record: %s'
                        32      LOAD_FAST                       2: e
                        34      BINARY_MODULO                   
                        36      CALL_FUNCTION                   1
                        38      RAISE_VARARGS                   1
                        40      LOAD_CONST                      0: None
                        42      STORE_FAST                      2: e
                        44      DELETE_FAST                     2: e
                        46      RERAISE                         1
                        48      RERAISE                         0
                'PercentStyle.format'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'PercentStyle'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '%(message)s'
                10      STORE_NAME                      3: default_format
                12      LOAD_CONST                      2: '%(asctime)s'
                14      STORE_NAME                      4: asctime_format
                16      LOAD_CONST                      3: '%(asctime)'
                18      STORE_NAME                      5: asctime_search
                20      LOAD_NAME                       6: re
                22      LOAD_METHOD                     7: compile
                24      LOAD_CONST                      4: '%\\(\\w+\\)[#0+ -]*(\\*|\\d+)?(\\.(\\*|\\d+))?[diouxefgcrsa%]'
                26      LOAD_NAME                       6: re
                28      LOAD_ATTR                       8: I
                30      CALL_METHOD                     2
                32      STORE_NAME                      9: validation_pattern
                34      LOAD_CONST                      5: None
                36      LOAD_CONST                      6: ('defaults',)
                38      BUILD_CONST_KEY_MAP             1
                40      LOAD_CONST                      7: <CODE> __init__
                42      LOAD_CONST                      8: 'PercentStyle.__init__'
                44      MAKE_FUNCTION                   2
                46      STORE_NAME                      10: __init__
                48      LOAD_CONST                      9: <CODE> usesTime
                50      LOAD_CONST                      10: 'PercentStyle.usesTime'
                52      MAKE_FUNCTION                   0
                54      STORE_NAME                      11: usesTime
                56      LOAD_CONST                      11: <CODE> validate
                58      LOAD_CONST                      12: 'PercentStyle.validate'
                60      MAKE_FUNCTION                   0
                62      STORE_NAME                      12: validate
                64      LOAD_CONST                      13: <CODE> _format
                66      LOAD_CONST                      14: 'PercentStyle._format'
                68      MAKE_FUNCTION                   0
                70      STORE_NAME                      13: _format
                72      LOAD_CONST                      15: <CODE> format
                74      LOAD_CONST                      16: 'PercentStyle.format'
                76      MAKE_FUNCTION                   0
                78      STORE_NAME                      14: format
                80      LOAD_CONST                      5: None
                82      RETURN_VALUE                    
        'PercentStyle'
        [Code]
            File Name: logging/__init__.py
            Object Name: StrFormatStyle
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'default_format'
                'asctime_format'
                'asctime_search'
                're'
                'compile'
                'I'
                'fmt_spec'
                'field_spec'
                '_format'
                'validate'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'StrFormatStyle'
                '{message}'
                '{asctime}'
                '{asctime'
                '^(.?[<>=^])?[+ -]?#?0?(\\d+|{\\w+})?[,_]?(\\.(\\d+|{\\w+}))?[bcdefgnosx%]?$'
                '^(\\d+|\\w+)(\\.\\w+|\\[[^]]+\\])*$'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: _format
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_defaults'
                        '__dict__'
                        '_fmt'
                        'format'
                    [Var Names]
                        'self'
                        'record'
                        'defaults'
                        'values'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _defaults
                        4       DUP_TOP                         
                        6       STORE_FAST                      2: defaults
                        8       POP_JUMP_IF_FALSE               11 (to 22)
                        10      LOAD_FAST                       2: defaults
                        12      LOAD_FAST                       1: record
                        14      LOAD_ATTR                       1: __dict__
                        16      BINARY_OR                       
                        18      STORE_FAST                      3: values
                        20      JUMP_FORWARD                    3 (to 28)
                        22      LOAD_FAST                       1: record
                        24      LOAD_ATTR                       1: __dict__
                        26      STORE_FAST                      3: values
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       2: _fmt
                        32      LOAD_ATTR                       3: format
                        34      LOAD_CONST                      1: ()
                        36      BUILD_MAP                       0
                        38      LOAD_FAST                       3: values
                        40      DICT_MERGE                      1
                        42      CALL_FUNCTION_EX                1
                        44      RETURN_VALUE                    
                'StrFormatStyle._format'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: validate
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'set'
                        '_str_formatter'
                        'parse'
                        '_fmt'
                        'field_spec'
                        'match'
                        'ValueError'
                        'add'
                        'fmt_spec'
                    [Var Names]
                        'self'
                        'fields'
                        '_'
                        'fieldname'
                        'spec'
                        'conversion'
                        'e'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Validate the input format, ensure it is the correct string formatting style'
                        'invalid field name/expression: %r'
                        'rsa'
                        'invalid conversion: %r'
                        'bad specifier: %r'
                        'invalid format: %s'
                        None
                        'invalid format: no fields'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: set
                        2       CALL_FUNCTION                   0
                        4       STORE_FAST                      1: fields
                        6       SETUP_FINALLY                   60 (to 128)
                        8       LOAD_GLOBAL                     1: _str_formatter
                        10      LOAD_METHOD                     2: parse
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: _fmt
                        16      CALL_METHOD                     1
                        18      GET_ITER                        
                        20      FOR_ITER                        51 (to 124)
                        22      UNPACK_SEQUENCE                 4
                        24      STORE_FAST                      2: _
                        26      STORE_FAST                      3: fieldname
                        28      STORE_FAST                      4: spec
                        30      STORE_FAST                      5: conversion
                        32      LOAD_FAST                       3: fieldname
                        34      POP_JUMP_IF_FALSE               35 (to 70)
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       4: field_spec
                        40      LOAD_METHOD                     5: match
                        42      LOAD_FAST                       3: fieldname
                        44      CALL_METHOD                     1
                        46      POP_JUMP_IF_TRUE                30 (to 60)
                        48      LOAD_GLOBAL                     6: ValueError
                        50      LOAD_CONST                      1: 'invalid field name/expression: %r'
                        52      LOAD_FAST                       3: fieldname
                        54      BINARY_MODULO                   
                        56      CALL_FUNCTION                   1
                        58      RAISE_VARARGS                   1
                        60      LOAD_FAST                       1: fields
                        62      LOAD_METHOD                     7: add
                        64      LOAD_FAST                       3: fieldname
                        66      CALL_METHOD                     1
                        68      POP_TOP                         
                        70      LOAD_FAST                       5: conversion
                        72      POP_JUMP_IF_FALSE               47 (to 94)
                        74      LOAD_FAST                       5: conversion
                        76      LOAD_CONST                      2: 'rsa'
                        78      CONTAINS_OP                     1 (not in)
                        80      POP_JUMP_IF_FALSE               47 (to 94)
                        82      LOAD_GLOBAL                     6: ValueError
                        84      LOAD_CONST                      3: 'invalid conversion: %r'
                        86      LOAD_FAST                       5: conversion
                        88      BINARY_MODULO                   
                        90      CALL_FUNCTION                   1
                        92      RAISE_VARARGS                   1
                        94      LOAD_FAST                       4: spec
                        96      POP_JUMP_IF_FALSE               61 (to 122)
                        98      LOAD_FAST                       0: self
                        100     LOAD_ATTR                       8: fmt_spec
                        102     LOAD_METHOD                     5: match
                        104     LOAD_FAST                       4: spec
                        106     CALL_METHOD                     1
                        108     POP_JUMP_IF_TRUE                61 (to 122)
                        110     LOAD_GLOBAL                     6: ValueError
                        112     LOAD_CONST                      4: 'bad specifier: %r'
                        114     LOAD_FAST                       4: spec
                        116     BINARY_MODULO                   
                        118     CALL_FUNCTION                   1
                        120     RAISE_VARARGS                   1
                        122     JUMP_ABSOLUTE                   10 (to 20)
                        124     POP_BLOCK                       
                        126     JUMP_FORWARD                    18 (to 164)
                        128     DUP_TOP                         
                        130     LOAD_GLOBAL                     6: ValueError
                        132     JUMP_IF_NOT_EXC_MATCH           81 (to 162)
                        134     POP_TOP                         
                        136     STORE_FAST                      6: e
                        138     POP_TOP                         
                        140     SETUP_FINALLY                   6 (to 154)
                        142     LOAD_GLOBAL                     6: ValueError
                        144     LOAD_CONST                      5: 'invalid format: %s'
                        146     LOAD_FAST                       6: e
                        148     BINARY_MODULO                   
                        150     CALL_FUNCTION                   1
                        152     RAISE_VARARGS                   1
                        154     LOAD_CONST                      6: None
                        156     STORE_FAST                      6: e
                        158     DELETE_FAST                     6: e
                        160     RERAISE                         1
                        162     RERAISE                         0
                        164     LOAD_FAST                       1: fields
                        166     POP_JUMP_IF_TRUE                88 (to 176)
                        168     LOAD_GLOBAL                     6: ValueError
                        170     LOAD_CONST                      7: 'invalid format: no fields'
                        172     CALL_FUNCTION                   1
                        174     RAISE_VARARGS                   1
                        176     LOAD_CONST                      6: None
                        178     RETURN_VALUE                    
                'StrFormatStyle.validate'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'StrFormatStyle'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '{message}'
                10      STORE_NAME                      3: default_format
                12      LOAD_CONST                      2: '{asctime}'
                14      STORE_NAME                      4: asctime_format
                16      LOAD_CONST                      3: '{asctime'
                18      STORE_NAME                      5: asctime_search
                20      LOAD_NAME                       6: re
                22      LOAD_METHOD                     7: compile
                24      LOAD_CONST                      4: '^(.?[<>=^])?[+ -]?#?0?(\\d+|{\\w+})?[,_]?(\\.(\\d+|{\\w+}))?[bcdefgnosx%]?$'
                26      LOAD_NAME                       6: re
                28      LOAD_ATTR                       8: I
                30      CALL_METHOD                     2
                32      STORE_NAME                      9: fmt_spec
                34      LOAD_NAME                       6: re
                36      LOAD_METHOD                     7: compile
                38      LOAD_CONST                      5: '^(\\d+|\\w+)(\\.\\w+|\\[[^]]+\\])*$'
                40      CALL_METHOD                     1
                42      STORE_NAME                      10: field_spec
                44      LOAD_CONST                      6: <CODE> _format
                46      LOAD_CONST                      7: 'StrFormatStyle._format'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      11: _format
                52      LOAD_CONST                      8: <CODE> validate
                54      LOAD_CONST                      9: 'StrFormatStyle.validate'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      12: validate
                60      LOAD_CONST                      10: None
                62      RETURN_VALUE                    
        'StrFormatStyle'
        [Code]
            File Name: logging/__init__.py
            Object Name: StringTemplateStyle
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'default_format'
                'asctime_format'
                'asctime_search'
                '__init__'
                'usesTime'
                'validate'
                '_format'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'StringTemplateStyle'
                '${message}'
                '${asctime}'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                        'super'
                        '__init__'
                        'Template'
                        '_fmt'
                        '_tpl'
                    [Var Names]
                        'self'
                        'args'
                        'kwargs'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_ATTR                       1: __init__
                        6       LOAD_FAST                       1: args
                        8       BUILD_MAP                       0
                        10      LOAD_FAST                       2: kwargs
                        12      DICT_MERGE                      1
                        14      CALL_FUNCTION_EX                1
                        16      POP_TOP                         
                        18      LOAD_GLOBAL                     2: Template
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       3: _fmt
                        24      CALL_FUNCTION                   1
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      4: _tpl
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'StringTemplateStyle.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: usesTime
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_fmt'
                        'find'
                        'asctime_search'
                    [Var Names]
                        'self'
                        'fmt'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '$asctime'
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _fmt
                        4       STORE_FAST                      1: fmt
                        6       LOAD_FAST                       1: fmt
                        8       LOAD_METHOD                     1: find
                        10      LOAD_CONST                      1: '$asctime'
                        12      CALL_METHOD                     1
                        14      LOAD_CONST                      2: 0
                        16      COMPARE_OP                      5 (>=)
                        18      JUMP_IF_TRUE_OR_POP             17 (to 34)
                        20      LOAD_FAST                       1: fmt
                        22      LOAD_METHOD                     1: find
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       2: asctime_search
                        28      CALL_METHOD                     1
                        30      LOAD_CONST                      2: 0
                        32      COMPARE_OP                      5 (>=)
                        34      RETURN_VALUE                    
                'StringTemplateStyle.usesTime'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: validate
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Template'
                        'pattern'
                        'set'
                        'finditer'
                        '_fmt'
                        'groupdict'
                        'add'
                        'group'
                        'ValueError'
                    [Var Names]
                        'self'
                        'pattern'
                        'fields'
                        'm'
                        'd'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'named'
                        'braced'
                        0
                        '$'
                        "invalid format: bare '$' not allowed"
                        'invalid format: no fields'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Template
                        2       LOAD_ATTR                       1: pattern
                        4       STORE_FAST                      1: pattern
                        6       LOAD_GLOBAL                     2: set
                        8       CALL_FUNCTION                   0
                        10      STORE_FAST                      2: fields
                        12      LOAD_FAST                       1: pattern
                        14      LOAD_METHOD                     3: finditer
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       4: _fmt
                        20      CALL_METHOD                     1
                        22      GET_ITER                        
                        24      FOR_ITER                        41 (to 108)
                        26      STORE_FAST                      3: m
                        28      LOAD_FAST                       3: m
                        30      LOAD_METHOD                     5: groupdict
                        32      CALL_METHOD                     0
                        34      STORE_FAST                      4: d
                        36      LOAD_FAST                       4: d
                        38      LOAD_CONST                      1: 'named'
                        40      BINARY_SUBSCR                   
                        42      POP_JUMP_IF_FALSE               30 (to 60)
                        44      LOAD_FAST                       2: fields
                        46      LOAD_METHOD                     6: add
                        48      LOAD_FAST                       4: d
                        50      LOAD_CONST                      1: 'named'
                        52      BINARY_SUBSCR                   
                        54      CALL_METHOD                     1
                        56      POP_TOP                         
                        58      JUMP_ABSOLUTE                   12 (to 24)
                        60      LOAD_FAST                       4: d
                        62      LOAD_CONST                      2: 'braced'
                        64      BINARY_SUBSCR                   
                        66      POP_JUMP_IF_FALSE               42 (to 84)
                        68      LOAD_FAST                       2: fields
                        70      LOAD_METHOD                     6: add
                        72      LOAD_FAST                       4: d
                        74      LOAD_CONST                      2: 'braced'
                        76      BINARY_SUBSCR                   
                        78      CALL_METHOD                     1
                        80      POP_TOP                         
                        82      JUMP_ABSOLUTE                   12 (to 24)
                        84      LOAD_FAST                       3: m
                        86      LOAD_METHOD                     7: group
                        88      LOAD_CONST                      3: 0
                        90      CALL_METHOD                     1
                        92      LOAD_CONST                      4: '$'
                        94      COMPARE_OP                      2 (==)
                        96      POP_JUMP_IF_FALSE               53 (to 106)
                        98      LOAD_GLOBAL                     8: ValueError
                        100     LOAD_CONST                      5: "invalid format: bare '$' not allowed"
                        102     CALL_FUNCTION                   1
                        104     RAISE_VARARGS                   1
                        106     JUMP_ABSOLUTE                   12 (to 24)
                        108     LOAD_FAST                       2: fields
                        110     POP_JUMP_IF_TRUE                60 (to 120)
                        112     LOAD_GLOBAL                     8: ValueError
                        114     LOAD_CONST                      6: 'invalid format: no fields'
                        116     CALL_FUNCTION                   1
                        118     RAISE_VARARGS                   1
                        120     LOAD_CONST                      0: None
                        122     RETURN_VALUE                    
                'StringTemplateStyle.validate'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: _format
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_defaults'
                        '__dict__'
                        '_tpl'
                        'substitute'
                    [Var Names]
                        'self'
                        'record'
                        'defaults'
                        'values'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _defaults
                        4       DUP_TOP                         
                        6       STORE_FAST                      2: defaults
                        8       POP_JUMP_IF_FALSE               11 (to 22)
                        10      LOAD_FAST                       2: defaults
                        12      LOAD_FAST                       1: record
                        14      LOAD_ATTR                       1: __dict__
                        16      BINARY_OR                       
                        18      STORE_FAST                      3: values
                        20      JUMP_FORWARD                    3 (to 28)
                        22      LOAD_FAST                       1: record
                        24      LOAD_ATTR                       1: __dict__
                        26      STORE_FAST                      3: values
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       2: _tpl
                        32      LOAD_ATTR                       3: substitute
                        34      LOAD_CONST                      1: ()
                        36      BUILD_MAP                       0
                        38      LOAD_FAST                       3: values
                        40      DICT_MERGE                      1
                        42      CALL_FUNCTION_EX                1
                        44      RETURN_VALUE                    
                'StringTemplateStyle._format'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'StringTemplateStyle'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '${message}'
                10      STORE_NAME                      3: default_format
                12      LOAD_CONST                      2: '${asctime}'
                14      STORE_NAME                      4: asctime_format
                16      LOAD_CONST                      2: '${asctime}'
                18      STORE_NAME                      5: asctime_search
                20      LOAD_CLOSURE                    0: __class__
                22      BUILD_TUPLE                     1
                24      LOAD_CONST                      3: <CODE> __init__
                26      LOAD_CONST                      4: 'StringTemplateStyle.__init__'
                28      MAKE_FUNCTION                   8
                30      STORE_NAME                      6: __init__
                32      LOAD_CONST                      5: <CODE> usesTime
                34      LOAD_CONST                      6: 'StringTemplateStyle.usesTime'
                36      MAKE_FUNCTION                   0
                38      STORE_NAME                      7: usesTime
                40      LOAD_CONST                      7: <CODE> validate
                42      LOAD_CONST                      8: 'StringTemplateStyle.validate'
                44      MAKE_FUNCTION                   0
                46      STORE_NAME                      8: validate
                48      LOAD_CONST                      9: <CODE> _format
                50      LOAD_CONST                      10: 'StringTemplateStyle._format'
                52      MAKE_FUNCTION                   0
                54      STORE_NAME                      9: _format
                56      LOAD_CLOSURE                    0: __class__
                58      DUP_TOP                         
                60      STORE_NAME                      10: __classcell__
                62      RETURN_VALUE                    
        'StringTemplateStyle'
        '%(levelname)s:%(name)s:%(message)s'
        '{levelname}:{name}:{message}'
        '${levelname}:${name}:${message}'
        (
            '%'
            '{'
            '$'
        )
        [Code]
            File Name: logging/__init__.py
            Object Name: Formatter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'time'
                'localtime'
                'converter'
                '__init__'
                'default_time_format'
                'default_msec_format'
                'formatTime'
                'formatException'
                'usesTime'
                'formatMessage'
                'formatStack'
                'format'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Formatter'
                '\n    Formatter instances are used to convert a LogRecord to text.\n\n    Formatters need to know how a LogRecord is constructed. They are\n    responsible for converting a LogRecord to (usually) a string which can\n    be interpreted by either a human or an external system. The base Formatter\n    allows a formatting string to be specified. If none is supplied, the\n    style-dependent default value, "%(message)s", "{message}", or\n    "${message}", is used.\n\n    The Formatter can be initialized with a format string which makes use of\n    knowledge of the LogRecord attributes - e.g. the default value mentioned\n    above makes use of the fact that the user\'s message and arguments are pre-\n    formatted into a LogRecord\'s message attribute. Currently, the useful\n    attributes in a LogRecord are described by:\n\n    %(name)s            Name of the logger (logging channel)\n    %(levelno)s         Numeric logging level for the message (DEBUG, INFO,\n                        WARNING, ERROR, CRITICAL)\n    %(levelname)s       Text logging level for the message ("DEBUG", "INFO",\n                        "WARNING", "ERROR", "CRITICAL")\n    %(pathname)s        Full pathname of the source file where the logging\n                        call was issued (if available)\n    %(filename)s        Filename portion of pathname\n    %(module)s          Module (name portion of filename)\n    %(lineno)d          Source line number where the logging call was issued\n                        (if available)\n    %(funcName)s        Function name\n    %(created)f         Time when the LogRecord was created (time.time()\n                        return value)\n    %(asctime)s         Textual time when the LogRecord was created\n    %(msecs)d           Millisecond portion of the creation time\n    %(relativeCreated)d Time in milliseconds when the LogRecord was created,\n                        relative to the time the logging module was loaded\n                        (typically at application startup time)\n    %(thread)d          Thread ID (if available)\n    %(threadName)s      Thread name (if available)\n    %(process)d         Process ID (if available)\n    %(message)s         The result of record.getMessage(), computed just as\n                        the record is emitted\n    '
                None
                '%'
                True
                (
                    'defaults'
                )
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 6
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_STYLES'
                        'ValueError'
                        'join'
                        'keys'
                        '_style'
                        'validate'
                        '_fmt'
                        'datefmt'
                    [Var Names]
                        'self'
                        'fmt'
                        'datefmt'
                        'style'
                        'validate'
                        'defaults'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Initialize the formatter with specified format strings.\n\n        Initialize the formatter either with the specified format string, or a\n        default as described above. Allow for specialized date formatting with\n        the optional datefmt argument. If datefmt is omitted, you get an\n        ISO8601-like (or RFC 3339-like) format.\n\n        Use a style parameter of '%', '{' or '$' to specify that you want to\n        use one of %-formatting, :meth:`str.format` (``{}``) formatting or\n        :class:`string.Template` formatting in your format string.\n\n        .. versionchanged:: 3.2\n           Added the ``style`` parameter.\n        "
                        'Style must be one of: %s'
                        ','
                        0
                        (
                            'defaults'
                        )
                        None
                    [Disassembly]
                        0       LOAD_FAST                       3: style
                        2       LOAD_GLOBAL                     0: _STYLES
                        4       CONTAINS_OP                     1 (not in)
                        6       POP_JUMP_IF_FALSE               15 (to 30)
                        8       LOAD_GLOBAL                     1: ValueError
                        10      LOAD_CONST                      1: 'Style must be one of: %s'
                        12      LOAD_CONST                      2: ','
                        14      LOAD_METHOD                     2: join
                        16      LOAD_GLOBAL                     0: _STYLES
                        18      LOAD_METHOD                     3: keys
                        20      CALL_METHOD                     0
                        22      CALL_METHOD                     1
                        24      BINARY_MODULO                   
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      LOAD_GLOBAL                     0: _STYLES
                        32      LOAD_FAST                       3: style
                        34      BINARY_SUBSCR                   
                        36      LOAD_CONST                      3: 0
                        38      BINARY_SUBSCR                   
                        40      LOAD_FAST                       1: fmt
                        42      LOAD_FAST                       5: defaults
                        44      LOAD_CONST                      4: ('defaults',)
                        46      CALL_FUNCTION_KW                2
                        48      LOAD_FAST                       0: self
                        50      STORE_ATTR                      4: _style
                        52      LOAD_FAST                       4: validate
                        54      POP_JUMP_IF_FALSE               33 (to 66)
                        56      LOAD_FAST                       0: self
                        58      LOAD_ATTR                       4: _style
                        60      LOAD_METHOD                     5: validate
                        62      CALL_METHOD                     0
                        64      POP_TOP                         
                        66      LOAD_FAST                       0: self
                        68      LOAD_ATTR                       4: _style
                        70      LOAD_ATTR                       6: _fmt
                        72      LOAD_FAST                       0: self
                        74      STORE_ATTR                      6: _fmt
                        76      LOAD_FAST                       2: datefmt
                        78      LOAD_FAST                       0: self
                        80      STORE_ATTR                      7: datefmt
                        82      LOAD_CONST                      5: None
                        84      RETURN_VALUE                    
                'Formatter.__init__'
                '%Y-%m-%d %H:%M:%S'
                '%s,%03d'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: formatTime
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'converter'
                        'created'
                        'time'
                        'strftime'
                        'default_time_format'
                        'default_msec_format'
                        'msecs'
                    [Var Names]
                        'self'
                        'record'
                        'datefmt'
                        'ct'
                        's'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Return the creation time of the specified LogRecord as formatted text.\n\n        This method should be called from format() by a formatter which\n        wants to make use of a formatted time. This method can be overridden\n        in formatters to provide for any specific requirement, but the\n        basic behaviour is as follows: if datefmt (a string) is specified,\n        it is used with time.strftime() to format the creation time of the\n        record. Otherwise, an ISO8601-like (or RFC 3339-like) format is used.\n        The resulting string is returned. This function uses a user-configurable\n        function to convert the creation time to a tuple. By default,\n        time.localtime() is used; to change this for a particular formatter\n        instance, set the 'converter' attribute to a function with the same\n        signature as time.localtime() or time.gmtime(). To change it for all\n        formatters, for example if you want all logging times to be shown in GMT,\n        set the 'converter' attribute in the Formatter class.\n        "
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: converter
                        4       LOAD_FAST                       1: record
                        6       LOAD_ATTR                       1: created
                        8       CALL_METHOD                     1
                        10      STORE_FAST                      3: ct
                        12      LOAD_FAST                       2: datefmt
                        14      POP_JUMP_IF_FALSE               16 (to 32)
                        16      LOAD_GLOBAL                     2: time
                        18      LOAD_METHOD                     3: strftime
                        20      LOAD_FAST                       2: datefmt
                        22      LOAD_FAST                       3: ct
                        24      CALL_METHOD                     2
                        26      STORE_FAST                      4: s
                        28      LOAD_FAST                       4: s
                        30      RETURN_VALUE                    
                        32      LOAD_GLOBAL                     2: time
                        34      LOAD_METHOD                     3: strftime
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       4: default_time_format
                        40      LOAD_FAST                       3: ct
                        42      CALL_METHOD                     2
                        44      STORE_FAST                      4: s
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       5: default_msec_format
                        50      POP_JUMP_IF_FALSE               34 (to 68)
                        52      LOAD_FAST                       0: self
                        54      LOAD_ATTR                       5: default_msec_format
                        56      LOAD_FAST                       4: s
                        58      LOAD_FAST                       1: record
                        60      LOAD_ATTR                       6: msecs
                        62      BUILD_TUPLE                     2
                        64      BINARY_MODULO                   
                        66      STORE_FAST                      4: s
                        68      LOAD_FAST                       4: s
                        70      RETURN_VALUE                    
                'Formatter.formatTime'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: formatException
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'io'
                        'StringIO'
                        'traceback'
                        'print_exception'
                        'getvalue'
                        'close'
                    [Var Names]
                        'self'
                        'ei'
                        'sio'
                        'tb'
                        's'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Format and return the specified exception information as a string.\n\n        This default implementation just uses\n        traceback.print_exception()\n        '
                        2
                        0
                        1
                        None
                        -1
                        '\n'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: io
                        2       LOAD_METHOD                     1: StringIO
                        4       CALL_METHOD                     0
                        6       STORE_FAST                      2: sio
                        8       LOAD_FAST                       1: ei
                        10      LOAD_CONST                      1: 2
                        12      BINARY_SUBSCR                   
                        14      STORE_FAST                      3: tb
                        16      LOAD_GLOBAL                     2: traceback
                        18      LOAD_METHOD                     3: print_exception
                        20      LOAD_FAST                       1: ei
                        22      LOAD_CONST                      2: 0
                        24      BINARY_SUBSCR                   
                        26      LOAD_FAST                       1: ei
                        28      LOAD_CONST                      3: 1
                        30      BINARY_SUBSCR                   
                        32      LOAD_FAST                       3: tb
                        34      LOAD_CONST                      4: None
                        36      LOAD_FAST                       2: sio
                        38      CALL_METHOD                     5
                        40      POP_TOP                         
                        42      LOAD_FAST                       2: sio
                        44      LOAD_METHOD                     4: getvalue
                        46      CALL_METHOD                     0
                        48      STORE_FAST                      4: s
                        50      LOAD_FAST                       2: sio
                        52      LOAD_METHOD                     5: close
                        54      CALL_METHOD                     0
                        56      POP_TOP                         
                        58      LOAD_FAST                       4: s
                        60      LOAD_CONST                      5: -1
                        62      LOAD_CONST                      4: None
                        64      BUILD_SLICE                     2
                        66      BINARY_SUBSCR                   
                        68      LOAD_CONST                      6: '\n'
                        70      COMPARE_OP                      2 (==)
                        72      POP_JUMP_IF_FALSE               43 (to 86)
                        74      LOAD_FAST                       4: s
                        76      LOAD_CONST                      4: None
                        78      LOAD_CONST                      5: -1
                        80      BUILD_SLICE                     2
                        82      BINARY_SUBSCR                   
                        84      STORE_FAST                      4: s
                        86      LOAD_FAST                       4: s
                        88      RETURN_VALUE                    
                'Formatter.formatException'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: usesTime
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_style'
                        'usesTime'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Check if the format uses the creation time of the record.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _style
                        4       LOAD_METHOD                     1: usesTime
                        6       CALL_METHOD                     0
                        8       RETURN_VALUE                    
                'Formatter.usesTime'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: formatMessage
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_style'
                        'format'
                    [Var Names]
                        'self'
                        'record'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _style
                        4       LOAD_METHOD                     1: format
                        6       LOAD_FAST                       1: record
                        8       CALL_METHOD                     1
                        10      RETURN_VALUE                    
                'Formatter.formatMessage'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: formatStack
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'stack_info'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        This method is provided as an extension point for specialized\n        formatting of stack information.\n\n        The input data is a string as returned from a call to\n        :func:`traceback.print_stack`, but with the last trailing newline\n        removed.\n\n        The base implementation just returns the value passed in.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       1: stack_info
                        2       RETURN_VALUE                    
                'Formatter.formatStack'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: format
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getMessage'
                        'message'
                        'usesTime'
                        'formatTime'
                        'datefmt'
                        'asctime'
                        'formatMessage'
                        'exc_info'
                        'exc_text'
                        'formatException'
                        'stack_info'
                        'formatStack'
                    [Var Names]
                        'self'
                        'record'
                        's'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Format the specified record as text.\n\n        The record's attribute dictionary is used as the operand to a\n        string formatting operation which yields the returned string.\n        Before formatting the dictionary, a couple of preparatory steps\n        are carried out. The message attribute of the record is computed\n        using LogRecord.getMessage(). If the formatting string uses the\n        time (as determined by a call to usesTime(), formatTime() is\n        called to format the event time. If there is exception information,\n        it is formatted using formatException() and appended to the message.\n        "
                        -1
                        None
                        '\n'
                    [Disassembly]
                        0       LOAD_FAST                       1: record
                        2       LOAD_METHOD                     0: getMessage
                        4       CALL_METHOD                     0
                        6       LOAD_FAST                       1: record
                        8       STORE_ATTR                      1: message
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     2: usesTime
                        14      CALL_METHOD                     0
                        16      POP_JUMP_IF_FALSE               17 (to 34)
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     3: formatTime
                        22      LOAD_FAST                       1: record
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       4: datefmt
                        28      CALL_METHOD                     2
                        30      LOAD_FAST                       1: record
                        32      STORE_ATTR                      5: asctime
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     6: formatMessage
                        38      LOAD_FAST                       1: record
                        40      CALL_METHOD                     1
                        42      STORE_FAST                      2: s
                        44      LOAD_FAST                       1: record
                        46      LOAD_ATTR                       7: exc_info
                        48      POP_JUMP_IF_FALSE               35 (to 70)
                        50      LOAD_FAST                       1: record
                        52      LOAD_ATTR                       8: exc_text
                        54      POP_JUMP_IF_TRUE                35 (to 70)
                        56      LOAD_FAST                       0: self
                        58      LOAD_METHOD                     9: formatException
                        60      LOAD_FAST                       1: record
                        62      LOAD_ATTR                       7: exc_info
                        64      CALL_METHOD                     1
                        66      LOAD_FAST                       1: record
                        68      STORE_ATTR                      8: exc_text
                        70      LOAD_FAST                       1: record
                        72      LOAD_ATTR                       8: exc_text
                        74      POP_JUMP_IF_FALSE               55 (to 110)
                        76      LOAD_FAST                       2: s
                        78      LOAD_CONST                      1: -1
                        80      LOAD_CONST                      2: None
                        82      BUILD_SLICE                     2
                        84      BINARY_SUBSCR                   
                        86      LOAD_CONST                      3: '\n'
                        88      COMPARE_OP                      3 (!=)
                        90      POP_JUMP_IF_FALSE               50 (to 100)
                        92      LOAD_FAST                       2: s
                        94      LOAD_CONST                      3: '\n'
                        96      BINARY_ADD                      
                        98      STORE_FAST                      2: s
                        100     LOAD_FAST                       2: s
                        102     LOAD_FAST                       1: record
                        104     LOAD_ATTR                       8: exc_text
                        106     BINARY_ADD                      
                        108     STORE_FAST                      2: s
                        110     LOAD_FAST                       1: record
                        112     LOAD_ATTR                       10: stack_info
                        114     POP_JUMP_IF_FALSE               78 (to 156)
                        116     LOAD_FAST                       2: s
                        118     LOAD_CONST                      1: -1
                        120     LOAD_CONST                      2: None
                        122     BUILD_SLICE                     2
                        124     BINARY_SUBSCR                   
                        126     LOAD_CONST                      3: '\n'
                        128     COMPARE_OP                      3 (!=)
                        130     POP_JUMP_IF_FALSE               70 (to 140)
                        132     LOAD_FAST                       2: s
                        134     LOAD_CONST                      3: '\n'
                        136     BINARY_ADD                      
                        138     STORE_FAST                      2: s
                        140     LOAD_FAST                       2: s
                        142     LOAD_FAST                       0: self
                        144     LOAD_METHOD                     11: formatStack
                        146     LOAD_FAST                       1: record
                        148     LOAD_ATTR                       10: stack_info
                        150     CALL_METHOD                     1
                        152     BINARY_ADD                      
                        154     STORE_FAST                      2: s
                        156     LOAD_FAST                       2: s
                        158     RETURN_VALUE                    
                'Formatter.format'
                (
                    None
                    None
                    '%'
                    True
                )
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Formatter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    Formatter instances are used to convert a LogRecord to text.\n\n    Formatters need to know how a LogRecord is constructed. They are\n    responsible for converting a LogRecord to (usually) a string which can\n    be interpreted by either a human or an external system. The base Formatter\n    allows a formatting string to be specified. If none is supplied, the\n    style-dependent default value, "%(message)s", "{message}", or\n    "${message}", is used.\n\n    The Formatter can be initialized with a format string which makes use of\n    knowledge of the LogRecord attributes - e.g. the default value mentioned\n    above makes use of the fact that the user\'s message and arguments are pre-\n    formatted into a LogRecord\'s message attribute. Currently, the useful\n    attributes in a LogRecord are described by:\n\n    %(name)s            Name of the logger (logging channel)\n    %(levelno)s         Numeric logging level for the message (DEBUG, INFO,\n                        WARNING, ERROR, CRITICAL)\n    %(levelname)s       Text logging level for the message ("DEBUG", "INFO",\n                        "WARNING", "ERROR", "CRITICAL")\n    %(pathname)s        Full pathname of the source file where the logging\n                        call was issued (if available)\n    %(filename)s        Filename portion of pathname\n    %(module)s          Module (name portion of filename)\n    %(lineno)d          Source line number where the logging call was issued\n                        (if available)\n    %(funcName)s        Function name\n    %(created)f         Time when the LogRecord was created (time.time()\n                        return value)\n    %(asctime)s         Textual time when the LogRecord was created\n    %(msecs)d           Millisecond portion of the creation time\n    %(relativeCreated)d Time in milliseconds when the LogRecord was created,\n                        relative to the time the logging module was loaded\n                        (typically at application startup time)\n    %(thread)d          Thread ID (if available)\n    %(threadName)s      Thread name (if available)\n    %(process)d         Process ID (if available)\n    %(message)s         The result of record.getMessage(), computed just as\n                        the record is emitted\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: time
                14      LOAD_ATTR                       5: localtime
                16      STORE_NAME                      6: converter
                18      LOAD_CONST                      22: (None, None, '%', True)
                20      LOAD_CONST                      2: None
                22      LOAD_CONST                      5: ('defaults',)
                24      BUILD_CONST_KEY_MAP             1
                26      LOAD_CONST                      6: <CODE> __init__
                28      LOAD_CONST                      7: 'Formatter.__init__'
                30      MAKE_FUNCTION                   3
                32      STORE_NAME                      7: __init__
                34      LOAD_CONST                      8: '%Y-%m-%d %H:%M:%S'
                36      STORE_NAME                      8: default_time_format
                38      LOAD_CONST                      9: '%s,%03d'
                40      STORE_NAME                      9: default_msec_format
                42      LOAD_CONST                      23: (None,)
                44      LOAD_CONST                      10: <CODE> formatTime
                46      LOAD_CONST                      11: 'Formatter.formatTime'
                48      MAKE_FUNCTION                   1
                50      STORE_NAME                      10: formatTime
                52      LOAD_CONST                      12: <CODE> formatException
                54      LOAD_CONST                      13: 'Formatter.formatException'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      11: formatException
                60      LOAD_CONST                      14: <CODE> usesTime
                62      LOAD_CONST                      15: 'Formatter.usesTime'
                64      MAKE_FUNCTION                   0
                66      STORE_NAME                      12: usesTime
                68      LOAD_CONST                      16: <CODE> formatMessage
                70      LOAD_CONST                      17: 'Formatter.formatMessage'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      13: formatMessage
                76      LOAD_CONST                      18: <CODE> formatStack
                78      LOAD_CONST                      19: 'Formatter.formatStack'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      14: formatStack
                84      LOAD_CONST                      20: <CODE> format
                86      LOAD_CONST                      21: 'Formatter.format'
                88      MAKE_FUNCTION                   0
                90      STORE_NAME                      15: format
                92      LOAD_CONST                      2: None
                94      RETURN_VALUE                    
        'Formatter'
        [Code]
            File Name: logging/__init__.py
            Object Name: BufferingFormatter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'formatHeader'
                'formatFooter'
                'format'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'BufferingFormatter'
                '\n    A formatter suitable for formatting a number of records.\n    '
                None
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'linefmt'
                        '_defaultFormatter'
                    [Var Names]
                        'self'
                        'linefmt'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Optionally specify a formatter which will be used to format each\n        individual record.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: linefmt
                        2       POP_JUMP_IF_FALSE               7 (to 14)
                        4       LOAD_FAST                       1: linefmt
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      0: linefmt
                        10      LOAD_CONST                      1: None
                        12      RETURN_VALUE                    
                        14      LOAD_GLOBAL                     1: _defaultFormatter
                        16      LOAD_FAST                       0: self
                        18      STORE_ATTR                      0: linefmt
                        20      LOAD_CONST                      1: None
                        22      RETURN_VALUE                    
                'BufferingFormatter.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: formatHeader
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'records'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Return the header string for the specified records.\n        '
                        ''
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       RETURN_VALUE                    
                'BufferingFormatter.formatHeader'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: formatFooter
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'records'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Return the footer string for the specified records.\n        '
                        ''
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       RETURN_VALUE                    
                'BufferingFormatter.formatFooter'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: format
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'len'
                        'formatHeader'
                        'linefmt'
                        'format'
                        'formatFooter'
                    [Var Names]
                        'self'
                        'records'
                        'rv'
                        'record'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Format the specified records and return the result as a string.\n        '
                        ''
                        0
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       STORE_FAST                      2: rv
                        4       LOAD_GLOBAL                     0: len
                        6       LOAD_FAST                       1: records
                        8       CALL_FUNCTION                   1
                        10      LOAD_CONST                      2: 0
                        12      COMPARE_OP                      4 (>)
                        14      POP_JUMP_IF_FALSE               35 (to 70)
                        16      LOAD_FAST                       2: rv
                        18      LOAD_FAST                       0: self
                        20      LOAD_METHOD                     1: formatHeader
                        22      LOAD_FAST                       1: records
                        24      CALL_METHOD                     1
                        26      BINARY_ADD                      
                        28      STORE_FAST                      2: rv
                        30      LOAD_FAST                       1: records
                        32      GET_ITER                        
                        34      FOR_ITER                        10 (to 56)
                        36      STORE_FAST                      3: record
                        38      LOAD_FAST                       2: rv
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       2: linefmt
                        44      LOAD_METHOD                     3: format
                        46      LOAD_FAST                       3: record
                        48      CALL_METHOD                     1
                        50      BINARY_ADD                      
                        52      STORE_FAST                      2: rv
                        54      JUMP_ABSOLUTE                   17 (to 34)
                        56      LOAD_FAST                       2: rv
                        58      LOAD_FAST                       0: self
                        60      LOAD_METHOD                     4: formatFooter
                        62      LOAD_FAST                       1: records
                        64      CALL_METHOD                     1
                        66      BINARY_ADD                      
                        68      STORE_FAST                      2: rv
                        70      LOAD_FAST                       2: rv
                        72      RETURN_VALUE                    
                'BufferingFormatter.format'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'BufferingFormatter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    A formatter suitable for formatting a number of records.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      11: (None,)
                14      LOAD_CONST                      3: <CODE> __init__
                16      LOAD_CONST                      4: 'BufferingFormatter.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      5: <CODE> formatHeader
                24      LOAD_CONST                      6: 'BufferingFormatter.formatHeader'
                26      MAKE_FUNCTION                   0
                28      STORE_NAME                      5: formatHeader
                30      LOAD_CONST                      7: <CODE> formatFooter
                32      LOAD_CONST                      8: 'BufferingFormatter.formatFooter'
                34      MAKE_FUNCTION                   0
                36      STORE_NAME                      6: formatFooter
                38      LOAD_CONST                      9: <CODE> format
                40      LOAD_CONST                      10: 'BufferingFormatter.format'
                42      MAKE_FUNCTION                   0
                44      STORE_NAME                      7: format
                46      LOAD_CONST                      2: None
                48      RETURN_VALUE                    
        'BufferingFormatter'
        [Code]
            File Name: logging/__init__.py
            Object Name: Filter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'filter'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Filter'
                '\n    Filter instances are used to perform arbitrary filtering of LogRecords.\n\n    Loggers and Handlers can optionally use Filter instances to filter\n    records as desired. The base filter class only allows events which are\n    below a certain point in the logger hierarchy. For example, a filter\n    initialized with "A.B" will allow events logged by loggers "A.B",\n    "A.B.C", "A.B.C.D", "A.B.D" etc. but not "A.BB", "B.A.B" etc. If\n    initialized with the empty string, all events are passed.\n    '
                ''
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'name'
                        'len'
                        'nlen'
                    [Var Names]
                        'self'
                        'name'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Initialize a filter.\n\n        Initialize with the name of the logger which, together with its\n        children, will have its events allowed through the filter. If no\n        name is specified, allow every event.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: name
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: name
                        6       LOAD_GLOBAL                     1: len
                        8       LOAD_FAST                       1: name
                        10      CALL_FUNCTION                   1
                        12      LOAD_FAST                       0: self
                        14      STORE_ATTR                      2: nlen
                        16      LOAD_CONST                      1: None
                        18      RETURN_VALUE                    
                'Filter.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: filter
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'nlen'
                        'name'
                        'find'
                    [Var Names]
                        'self'
                        'record'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Determine if the specified record is to be logged.\n\n        Returns True if the record should be logged, or False otherwise.\n        If deemed appropriate, the record may be modified in-place.\n        '
                        0
                        True
                        False
                        '.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: nlen
                        4       LOAD_CONST                      1: 0
                        6       COMPARE_OP                      2 (==)
                        8       POP_JUMP_IF_FALSE               7 (to 14)
                        10      LOAD_CONST                      2: True
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: name
                        18      LOAD_FAST                       1: record
                        20      LOAD_ATTR                       1: name
                        22      COMPARE_OP                      2 (==)
                        24      POP_JUMP_IF_FALSE               15 (to 30)
                        26      LOAD_CONST                      2: True
                        28      RETURN_VALUE                    
                        30      LOAD_FAST                       1: record
                        32      LOAD_ATTR                       1: name
                        34      LOAD_METHOD                     2: find
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       1: name
                        40      LOAD_CONST                      1: 0
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       0: nlen
                        46      CALL_METHOD                     3
                        48      LOAD_CONST                      1: 0
                        50      COMPARE_OP                      3 (!=)
                        52      POP_JUMP_IF_FALSE               29 (to 58)
                        54      LOAD_CONST                      3: False
                        56      RETURN_VALUE                    
                        58      LOAD_FAST                       1: record
                        60      LOAD_ATTR                       1: name
                        62      LOAD_FAST                       0: self
                        64      LOAD_ATTR                       0: nlen
                        66      BINARY_SUBSCR                   
                        68      LOAD_CONST                      4: '.'
                        70      COMPARE_OP                      2 (==)
                        72      RETURN_VALUE                    
                'Filter.filter'
                None
                (
                    ''
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Filter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    Filter instances are used to perform arbitrary filtering of LogRecords.\n\n    Loggers and Handlers can optionally use Filter instances to filter\n    records as desired. The base filter class only allows events which are\n    below a certain point in the logger hierarchy. For example, a filter\n    initialized with "A.B" will allow events logged by loggers "A.B",\n    "A.B.C", "A.B.C.D", "A.B.D" etc. but not "A.BB", "B.A.B" etc. If\n    initialized with the empty string, all events are passed.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      8: ('',)
                14      LOAD_CONST                      3: <CODE> __init__
                16      LOAD_CONST                      4: 'Filter.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      5: <CODE> filter
                24      LOAD_CONST                      6: 'Filter.filter'
                26      MAKE_FUNCTION                   0
                28      STORE_NAME                      5: filter
                30      LOAD_CONST                      7: None
                32      RETURN_VALUE                    
        'Filter'
        [Code]
            File Name: logging/__init__.py
            Object Name: Filterer
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'addFilter'
                'removeFilter'
                'filter'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Filterer'
                '\n    A base class for loggers and handlers which allows them to share\n    common code.\n    '
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'filters'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Initialize the list of filters to be an empty list.\n        '
                        None
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: filters
                        6       LOAD_CONST                      1: None
                        8       RETURN_VALUE                    
                'Filterer.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: addFilter
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'filters'
                        'append'
                    [Var Names]
                        'self'
                        'filter'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Add the specified filter to this handler.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: filter
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: filters
                        6       CONTAINS_OP                     1 (not in)
                        8       POP_JUMP_IF_FALSE               13 (to 26)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       0: filters
                        14      LOAD_METHOD                     1: append
                        16      LOAD_FAST                       1: filter
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_CONST                      1: None
                        24      RETURN_VALUE                    
                        26      LOAD_CONST                      1: None
                        28      RETURN_VALUE                    
                'Filterer.addFilter'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: removeFilter
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'filters'
                        'remove'
                    [Var Names]
                        'self'
                        'filter'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Remove the specified filter from this handler.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: filter
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: filters
                        6       CONTAINS_OP                     0 (in)
                        8       POP_JUMP_IF_FALSE               13 (to 26)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       0: filters
                        14      LOAD_METHOD                     1: remove
                        16      LOAD_FAST                       1: filter
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_CONST                      1: None
                        24      RETURN_VALUE                    
                        26      LOAD_CONST                      1: None
                        28      RETURN_VALUE                    
                'Filterer.removeFilter'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: filter
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'filters'
                        'hasattr'
                        'filter'
                    [Var Names]
                        'self'
                        'record'
                        'rv'
                        'f'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Determine if a record is loggable by consulting all the filters.\n\n        The default is to allow the record to be logged; any filter can veto\n        this and the record is then dropped. Returns a zero value if a record\n        is to be dropped, else non-zero.\n\n        .. versionchanged:: 3.2\n\n           Allow filters to be just callables.\n        '
                        True
                        'filter'
                        False
                    [Disassembly]
                        0       LOAD_CONST                      1: True
                        2       STORE_FAST                      2: rv
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       0: filters
                        8       GET_ITER                        
                        10      FOR_ITER                        24 (to 60)
                        12      STORE_FAST                      3: f
                        14      LOAD_GLOBAL                     1: hasattr
                        16      LOAD_FAST                       3: f
                        18      LOAD_CONST                      2: 'filter'
                        20      CALL_FUNCTION                   2
                        22      POP_JUMP_IF_FALSE               18 (to 36)
                        24      LOAD_FAST                       3: f
                        26      LOAD_METHOD                     2: filter
                        28      LOAD_FAST                       1: record
                        30      CALL_METHOD                     1
                        32      STORE_FAST                      4: result
                        34      JUMP_FORWARD                    4 (to 44)
                        36      LOAD_FAST                       3: f
                        38      LOAD_FAST                       1: record
                        40      CALL_FUNCTION                   1
                        42      STORE_FAST                      4: result
                        44      LOAD_FAST                       4: result
                        46      POP_JUMP_IF_TRUE                29 (to 58)
                        48      LOAD_CONST                      3: False
                        50      STORE_FAST                      2: rv
                        52      POP_TOP                         
                        54      LOAD_FAST                       2: rv
                        56      RETURN_VALUE                    
                        58      JUMP_ABSOLUTE                   5 (to 10)
                        60      LOAD_FAST                       2: rv
                        62      RETURN_VALUE                    
                'Filterer.filter'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Filterer'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    A base class for loggers and handlers which allows them to share\n    common code.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'Filterer.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> addFilter
                22      LOAD_CONST                      5: 'Filterer.addFilter'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: addFilter
                28      LOAD_CONST                      6: <CODE> removeFilter
                30      LOAD_CONST                      7: 'Filterer.removeFilter'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: removeFilter
                36      LOAD_CONST                      8: <CODE> filter
                38      LOAD_CONST                      9: 'Filterer.filter'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: filter
                44      LOAD_CONST                      10: None
                46      RETURN_VALUE                    
        'Filterer'
        [Code]
            File Name: logging/__init__.py
            Object Name: _removeHandlerRef
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_acquireLock'
                '_releaseLock'
                '_handlerList'
                'remove'
            [Var Names]
                'wr'
                'acquire'
                'release'
                'handlers'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Remove a handler reference from the internal cleanup list.\n    '
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _acquireLock
                2       LOAD_GLOBAL                     1: _releaseLock
                4       LOAD_GLOBAL                     2: _handlerList
                6       ROT_THREE                       
                8       ROT_TWO                         
                10      STORE_FAST                      1: acquire
                12      STORE_FAST                      2: release
                14      STORE_FAST                      3: handlers
                16      LOAD_FAST                       1: acquire
                18      POP_JUMP_IF_FALSE               43 (to 86)
                20      LOAD_FAST                       2: release
                22      POP_JUMP_IF_FALSE               45 (to 90)
                24      LOAD_FAST                       3: handlers
                26      POP_JUMP_IF_FALSE               47 (to 94)
                28      LOAD_FAST                       1: acquire
                30      CALL_FUNCTION                   0
                32      POP_TOP                         
                34      SETUP_FINALLY                   21 (to 78)
                36      LOAD_FAST                       0: wr
                38      LOAD_FAST                       3: handlers
                40      CONTAINS_OP                     0 (in)
                42      POP_JUMP_IF_FALSE               33 (to 66)
                44      LOAD_FAST                       3: handlers
                46      LOAD_METHOD                     3: remove
                48      LOAD_FAST                       0: wr
                50      CALL_METHOD                     1
                52      POP_TOP                         
                54      POP_BLOCK                       
                56      LOAD_FAST                       2: release
                58      CALL_FUNCTION                   0
                60      POP_TOP                         
                62      LOAD_CONST                      1: None
                64      RETURN_VALUE                    
                66      POP_BLOCK                       
                68      LOAD_FAST                       2: release
                70      CALL_FUNCTION                   0
                72      POP_TOP                         
                74      LOAD_CONST                      1: None
                76      RETURN_VALUE                    
                78      LOAD_FAST                       2: release
                80      CALL_FUNCTION                   0
                82      POP_TOP                         
                84      RERAISE                         0
                86      LOAD_CONST                      1: None
                88      RETURN_VALUE                    
                90      LOAD_CONST                      1: None
                92      RETURN_VALUE                    
                94      LOAD_CONST                      1: None
                96      RETURN_VALUE                    
        '_removeHandlerRef'
        [Code]
            File Name: logging/__init__.py
            Object Name: _addHandlerRef
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_acquireLock'
                '_handlerList'
                'append'
                'weakref'
                'ref'
                '_removeHandlerRef'
                '_releaseLock'
            [Var Names]
                'handler'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Add a handler to the internal cleanup list using a weak reference.\n    '
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _acquireLock
                2       CALL_FUNCTION                   0
                4       POP_TOP                         
                6       SETUP_FINALLY                   15 (to 38)
                8       LOAD_GLOBAL                     1: _handlerList
                10      LOAD_METHOD                     2: append
                12      LOAD_GLOBAL                     3: weakref
                14      LOAD_METHOD                     4: ref
                16      LOAD_FAST                       0: handler
                18      LOAD_GLOBAL                     5: _removeHandlerRef
                20      CALL_METHOD                     2
                22      CALL_METHOD                     1
                24      POP_TOP                         
                26      POP_BLOCK                       
                28      LOAD_GLOBAL                     6: _releaseLock
                30      CALL_FUNCTION                   0
                32      POP_TOP                         
                34      LOAD_CONST                      1: None
                36      RETURN_VALUE                    
                38      LOAD_GLOBAL                     6: _releaseLock
                40      CALL_FUNCTION                   0
                42      POP_TOP                         
                44      RERAISE                         0
        '_addHandlerRef'
        [Code]
            File Name: logging/__init__.py
            Object Name: Handler
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'NOTSET'
                '__init__'
                'get_name'
                'set_name'
                'property'
                'name'
                'createLock'
                '_at_fork_reinit'
                'acquire'
                'release'
                'setLevel'
                'format'
                'emit'
                'handle'
                'setFormatter'
                'flush'
                'close'
                'handleError'
                '__repr__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Handler'
                "\n    Handler instances dispatch logging events to specific destinations.\n\n    The base handler class. Acts as a placeholder which defines the Handler\n    interface. Handlers can optionally use Formatter instances to format\n    records as desired. By default, no formatter is specified; in this case,\n    the 'raw' message as determined by record.message is logged.\n    "
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Filterer'
                        '__init__'
                        '_name'
                        '_checkLevel'
                        'level'
                        'formatter'
                        '_closed'
                        '_addHandlerRef'
                        'createLock'
                    [Var Names]
                        'self'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Initializes the instance - basically setting the formatter to None\n        and the filter list to empty.\n        '
                        None
                        False
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Filterer
                        2       LOAD_METHOD                     1: __init__
                        4       LOAD_FAST                       0: self
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_CONST                      1: None
                        12      LOAD_FAST                       0: self
                        14      STORE_ATTR                      2: _name
                        16      LOAD_GLOBAL                     3: _checkLevel
                        18      LOAD_FAST                       1: level
                        20      CALL_FUNCTION                   1
                        22      LOAD_FAST                       0: self
                        24      STORE_ATTR                      4: level
                        26      LOAD_CONST                      1: None
                        28      LOAD_FAST                       0: self
                        30      STORE_ATTR                      5: formatter
                        32      LOAD_CONST                      2: False
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      6: _closed
                        38      LOAD_GLOBAL                     7: _addHandlerRef
                        40      LOAD_FAST                       0: self
                        42      CALL_FUNCTION                   1
                        44      POP_TOP                         
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     8: createLock
                        50      CALL_METHOD                     0
                        52      POP_TOP                         
                        54      LOAD_CONST                      1: None
                        56      RETURN_VALUE                    
                'Handler.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: get_name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _name
                        4       RETURN_VALUE                    
                'Handler.get_name'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: set_name
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_acquireLock'
                        '_name'
                        '_handlers'
                        '_releaseLock'
                    [Var Names]
                        'self'
                        'name'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _acquireLock
                        2       CALL_FUNCTION                   0
                        4       POP_TOP                         
                        6       SETUP_FINALLY                   30 (to 68)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: _name
                        12      LOAD_GLOBAL                     2: _handlers
                        14      CONTAINS_OP                     0 (in)
                        16      POP_JUMP_IF_FALSE               13 (to 26)
                        18      LOAD_GLOBAL                     2: _handlers
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       1: _name
                        24      DELETE_SUBSCR                   
                        26      LOAD_FAST                       1: name
                        28      LOAD_FAST                       0: self
                        30      STORE_ATTR                      1: _name
                        32      LOAD_FAST                       1: name
                        34      POP_JUMP_IF_FALSE               28 (to 56)
                        36      LOAD_FAST                       0: self
                        38      LOAD_GLOBAL                     2: _handlers
                        40      LOAD_FAST                       1: name
                        42      STORE_SUBSCR                    
                        44      POP_BLOCK                       
                        46      LOAD_GLOBAL                     3: _releaseLock
                        48      CALL_FUNCTION                   0
                        50      POP_TOP                         
                        52      LOAD_CONST                      0: None
                        54      RETURN_VALUE                    
                        56      POP_BLOCK                       
                        58      LOAD_GLOBAL                     3: _releaseLock
                        60      CALL_FUNCTION                   0
                        62      POP_TOP                         
                        64      LOAD_CONST                      0: None
                        66      RETURN_VALUE                    
                        68      LOAD_GLOBAL                     3: _releaseLock
                        70      CALL_FUNCTION                   0
                        72      POP_TOP                         
                        74      RERAISE                         0
                'Handler.set_name'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: createLock
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'threading'
                        'RLock'
                        'lock'
                        '_register_at_fork_reinit_lock'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Acquire a thread lock for serializing access to the underlying I/O.\n        '
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: threading
                        2       LOAD_METHOD                     1: RLock
                        4       CALL_METHOD                     0
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      2: lock
                        10      LOAD_GLOBAL                     3: _register_at_fork_reinit_lock
                        12      LOAD_FAST                       0: self
                        14      CALL_FUNCTION                   1
                        16      POP_TOP                         
                        18      LOAD_CONST                      1: None
                        20      RETURN_VALUE                    
                'Handler.createLock'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: _at_fork_reinit
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'lock'
                        '_at_fork_reinit'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: lock
                        4       LOAD_METHOD                     1: _at_fork_reinit
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                'Handler._at_fork_reinit'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: acquire
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'lock'
                        'acquire'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Acquire the I/O thread lock.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: lock
                        4       POP_JUMP_IF_FALSE               10 (to 20)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       0: lock
                        10      LOAD_METHOD                     1: acquire
                        12      CALL_METHOD                     0
                        14      POP_TOP                         
                        16      LOAD_CONST                      1: None
                        18      RETURN_VALUE                    
                        20      LOAD_CONST                      1: None
                        22      RETURN_VALUE                    
                'Handler.acquire'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: release
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'lock'
                        'release'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Release the I/O thread lock.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: lock
                        4       POP_JUMP_IF_FALSE               10 (to 20)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       0: lock
                        10      LOAD_METHOD                     1: release
                        12      CALL_METHOD                     0
                        14      POP_TOP                         
                        16      LOAD_CONST                      1: None
                        18      RETURN_VALUE                    
                        20      LOAD_CONST                      1: None
                        22      RETURN_VALUE                    
                'Handler.release'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: setLevel
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_checkLevel'
                        'level'
                    [Var Names]
                        'self'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Set the logging level of this handler.  level must be an int or a str.\n        '
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _checkLevel
                        2       LOAD_FAST                       1: level
                        4       CALL_FUNCTION                   1
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      1: level
                        10      LOAD_CONST                      1: None
                        12      RETURN_VALUE                    
                'Handler.setLevel'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: format
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'formatter'
                        '_defaultFormatter'
                        'format'
                    [Var Names]
                        'self'
                        'record'
                        'fmt'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Format the specified record.\n\n        If a formatter is set, use it. Otherwise, use the default formatter\n        for the module.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: formatter
                        4       POP_JUMP_IF_FALSE               7 (to 14)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       0: formatter
                        10      STORE_FAST                      2: fmt
                        12      JUMP_FORWARD                    2 (to 18)
                        14      LOAD_GLOBAL                     1: _defaultFormatter
                        16      STORE_FAST                      2: fmt
                        18      LOAD_FAST                       2: fmt
                        20      LOAD_METHOD                     2: format
                        22      LOAD_FAST                       1: record
                        24      CALL_METHOD                     1
                        26      RETURN_VALUE                    
                'Handler.format'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: emit
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'NotImplementedError'
                    [Var Names]
                        'self'
                        'record'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Do whatever it takes to actually log the specified logging record.\n\n        This version is intended to be implemented by subclasses and so\n        raises a NotImplementedError.\n        '
                        'emit must be implemented by Handler subclasses'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: NotImplementedError
                        2       LOAD_CONST                      1: 'emit must be implemented by Handler subclasses'
                        4       CALL_FUNCTION                   1
                        6       RAISE_VARARGS                   1
                'Handler.emit'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: handle
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'filter'
                        'acquire'
                        'emit'
                        'release'
                    [Var Names]
                        'self'
                        'record'
                        'rv'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Conditionally emit the specified logging record.\n\n        Emission depends on filters which may have been added to the handler.\n        Wrap the actual emission of the record with acquisition/release of\n        the I/O thread lock. Returns whether the filter passed the record for\n        emission.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: filter
                        4       LOAD_FAST                       1: record
                        6       CALL_METHOD                     1
                        8       STORE_FAST                      2: rv
                        10      LOAD_FAST                       2: rv
                        12      POP_JUMP_IF_FALSE               29 (to 58)
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     1: acquire
                        18      CALL_METHOD                     0
                        20      POP_TOP                         
                        22      SETUP_FINALLY                   12 (to 48)
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     2: emit
                        28      LOAD_FAST                       1: record
                        30      CALL_METHOD                     1
                        32      POP_TOP                         
                        34      POP_BLOCK                       
                        36      LOAD_FAST                       0: self
                        38      LOAD_METHOD                     3: release
                        40      CALL_METHOD                     0
                        42      POP_TOP                         
                        44      LOAD_FAST                       2: rv
                        46      RETURN_VALUE                    
                        48      LOAD_FAST                       0: self
                        50      LOAD_METHOD                     3: release
                        52      CALL_METHOD                     0
                        54      POP_TOP                         
                        56      RERAISE                         0
                        58      LOAD_FAST                       2: rv
                        60      RETURN_VALUE                    
                'Handler.handle'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: setFormatter
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'formatter'
                    [Var Names]
                        'self'
                        'fmt'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Set the formatter for this handler.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: fmt
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: formatter
                        6       LOAD_CONST                      1: None
                        8       RETURN_VALUE                    
                'Handler.setFormatter'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: flush
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Ensure all logging output has been flushed.\n\n        This version does nothing and is intended to be implemented by\n        subclasses.\n        '
                        None
                    [Disassembly]
                        0       LOAD_CONST                      1: None
                        2       RETURN_VALUE                    
                'Handler.flush'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: close
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_acquireLock'
                        '_closed'
                        '_name'
                        '_handlers'
                        '_releaseLock'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Tidy up any resources used by the handler.\n\n        This version removes the handler from an internal map of handlers,\n        _handlers, which is used for handler lookup by name. Subclasses\n        should ensure that this gets called from overridden close()\n        methods.\n        '
                        True
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _acquireLock
                        2       CALL_FUNCTION                   0
                        4       POP_TOP                         
                        6       SETUP_FINALLY                   33 (to 74)
                        8       LOAD_CONST                      1: True
                        10      LOAD_FAST                       0: self
                        12      STORE_ATTR                      1: _closed
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _name
                        18      POP_JUMP_IF_FALSE               25 (to 50)
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: _name
                        24      LOAD_GLOBAL                     3: _handlers
                        26      CONTAINS_OP                     0 (in)
                        28      POP_JUMP_IF_FALSE               31 (to 62)
                        30      LOAD_GLOBAL                     3: _handlers
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       2: _name
                        36      DELETE_SUBSCR                   
                        38      POP_BLOCK                       
                        40      LOAD_GLOBAL                     4: _releaseLock
                        42      CALL_FUNCTION                   0
                        44      POP_TOP                         
                        46      LOAD_CONST                      2: None
                        48      RETURN_VALUE                    
                        50      POP_BLOCK                       
                        52      LOAD_GLOBAL                     4: _releaseLock
                        54      CALL_FUNCTION                   0
                        56      POP_TOP                         
                        58      LOAD_CONST                      2: None
                        60      RETURN_VALUE                    
                        62      POP_BLOCK                       
                        64      LOAD_GLOBAL                     4: _releaseLock
                        66      CALL_FUNCTION                   0
                        68      POP_TOP                         
                        70      LOAD_CONST                      2: None
                        72      RETURN_VALUE                    
                        74      LOAD_GLOBAL                     4: _releaseLock
                        76      CALL_FUNCTION                   0
                        78      POP_TOP                         
                        80      RERAISE                         0
                'Handler.close'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: handleError
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'raiseExceptions'
                        'sys'
                        'stderr'
                        'exc_info'
                        'write'
                        'traceback'
                        'print_exception'
                        'tb_frame'
                        'os'
                        'path'
                        'dirname'
                        'f_code'
                        'co_filename'
                        '__path__'
                        'f_back'
                        'print_stack'
                        'filename'
                        'lineno'
                        'msg'
                        'args'
                        'RecursionError'
                        'Exception'
                        'OSError'
                    [Var Names]
                        'self'
                        'record'
                        't'
                        'v'
                        'tb'
                        'frame'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Handle errors which occur during an emit() call.\n\n        This method should be called from handlers when an exception is\n        encountered during an emit() call. If raiseExceptions is false,\n        exceptions get silently ignored. This is what is mostly wanted\n        for a logging system - most users will not care about errors in\n        the logging system, they are more interested in application errors.\n        You could, however, replace this with a custom handler if you wish.\n        The record which was being processed is passed in to this method.\n        '
                        '--- Logging error ---\n'
                        None
                        'Call stack:\n'
                        0
                        (
                            'file'
                        )
                        'Logged from file %s, line %s\n'
                        'Message: %r\nArguments: %s\n'
                        'Unable to print the message and arguments - possible formatting error.\nUse the traceback above to help find the error.\n'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: raiseExceptions
                        2       POP_JUMP_IF_FALSE               157 (to 314)
                        4       LOAD_GLOBAL                     1: sys
                        6       LOAD_ATTR                       2: stderr
                        8       POP_JUMP_IF_FALSE               159 (to 318)
                        10      LOAD_GLOBAL                     1: sys
                        12      LOAD_METHOD                     3: exc_info
                        14      CALL_METHOD                     0
                        16      UNPACK_SEQUENCE                 3
                        18      STORE_FAST                      2: t
                        20      STORE_FAST                      3: v
                        22      STORE_FAST                      4: tb
                        24      SETUP_FINALLY                   140 (to 306)
                        26      SETUP_FINALLY                   118 (to 264)
                        28      LOAD_GLOBAL                     1: sys
                        30      LOAD_ATTR                       2: stderr
                        32      LOAD_METHOD                     4: write
                        34      LOAD_CONST                      1: '--- Logging error ---\n'
                        36      CALL_METHOD                     1
                        38      POP_TOP                         
                        40      LOAD_GLOBAL                     5: traceback
                        42      LOAD_METHOD                     6: print_exception
                        44      LOAD_FAST                       2: t
                        46      LOAD_FAST                       3: v
                        48      LOAD_FAST                       4: tb
                        50      LOAD_CONST                      2: None
                        52      LOAD_GLOBAL                     1: sys
                        54      LOAD_ATTR                       2: stderr
                        56      CALL_METHOD                     5
                        58      POP_TOP                         
                        60      LOAD_GLOBAL                     1: sys
                        62      LOAD_ATTR                       2: stderr
                        64      LOAD_METHOD                     4: write
                        66      LOAD_CONST                      3: 'Call stack:\n'
                        68      CALL_METHOD                     1
                        70      POP_TOP                         
                        72      LOAD_FAST                       4: tb
                        74      LOAD_ATTR                       7: tb_frame
                        76      STORE_FAST                      5: frame
                        78      LOAD_FAST                       5: frame
                        80      POP_JUMP_IF_FALSE               70 (to 140)
                        82      LOAD_GLOBAL                     8: os
                        84      LOAD_ATTR                       9: path
                        86      LOAD_METHOD                     10: dirname
                        88      LOAD_FAST                       5: frame
                        90      LOAD_ATTR                       11: f_code
                        92      LOAD_ATTR                       12: co_filename
                        94      CALL_METHOD                     1
                        96      LOAD_GLOBAL                     13: __path__
                        98      LOAD_CONST                      4: 0
                        100     BINARY_SUBSCR                   
                        102     COMPARE_OP                      2 (==)
                        104     POP_JUMP_IF_FALSE               70 (to 140)
                        106     LOAD_FAST                       5: frame
                        108     LOAD_ATTR                       14: f_back
                        110     STORE_FAST                      5: frame
                        112     LOAD_FAST                       5: frame
                        114     POP_JUMP_IF_FALSE               70 (to 140)
                        116     LOAD_GLOBAL                     8: os
                        118     LOAD_ATTR                       9: path
                        120     LOAD_METHOD                     10: dirname
                        122     LOAD_FAST                       5: frame
                        124     LOAD_ATTR                       11: f_code
                        126     LOAD_ATTR                       12: co_filename
                        128     CALL_METHOD                     1
                        130     LOAD_GLOBAL                     13: __path__
                        132     LOAD_CONST                      4: 0
                        134     BINARY_SUBSCR                   
                        136     COMPARE_OP                      2 (==)
                        138     POP_JUMP_IF_TRUE                53 (to 106)
                        140     LOAD_FAST                       5: frame
                        142     POP_JUMP_IF_FALSE               81 (to 162)
                        144     LOAD_GLOBAL                     5: traceback
                        146     LOAD_ATTR                       15: print_stack
                        148     LOAD_FAST                       5: frame
                        150     LOAD_GLOBAL                     1: sys
                        152     LOAD_ATTR                       2: stderr
                        154     LOAD_CONST                      5: ('file',)
                        156     CALL_FUNCTION_KW                2
                        158     POP_TOP                         
                        160     JUMP_FORWARD                    12 (to 186)
                        162     LOAD_GLOBAL                     1: sys
                        164     LOAD_ATTR                       2: stderr
                        166     LOAD_METHOD                     4: write
                        168     LOAD_CONST                      6: 'Logged from file %s, line %s\n'
                        170     LOAD_FAST                       1: record
                        172     LOAD_ATTR                       16: filename
                        174     LOAD_FAST                       1: record
                        176     LOAD_ATTR                       17: lineno
                        178     BUILD_TUPLE                     2
                        180     BINARY_MODULO                   
                        182     CALL_METHOD                     1
                        184     POP_TOP                         
                        186     SETUP_FINALLY                   14 (to 216)
                        188     LOAD_GLOBAL                     1: sys
                        190     LOAD_ATTR                       2: stderr
                        192     LOAD_METHOD                     4: write
                        194     LOAD_CONST                      7: 'Message: %r\nArguments: %s\n'
                        196     LOAD_FAST                       1: record
                        198     LOAD_ATTR                       18: msg
                        200     LOAD_FAST                       1: record
                        202     LOAD_ATTR                       19: args
                        204     BUILD_TUPLE                     2
                        206     BINARY_MODULO                   
                        208     CALL_METHOD                     1
                        210     POP_TOP                         
                        212     POP_BLOCK                       
                        214     JUMP_FORWARD                    22 (to 260)
                        216     DUP_TOP                         
                        218     LOAD_GLOBAL                     20: RecursionError
                        220     JUMP_IF_NOT_EXC_MATCH           115 (to 230)
                        222     POP_TOP                         
                        224     POP_TOP                         
                        226     POP_TOP                         
                        228     RAISE_VARARGS                   0
                        230     DUP_TOP                         
                        232     LOAD_GLOBAL                     21: Exception
                        234     JUMP_IF_NOT_EXC_MATCH           129 (to 258)
                        236     POP_TOP                         
                        238     POP_TOP                         
                        240     POP_TOP                         
                        242     LOAD_GLOBAL                     1: sys
                        244     LOAD_ATTR                       2: stderr
                        246     LOAD_METHOD                     4: write
                        248     LOAD_CONST                      8: 'Unable to print the message and arguments - possible formatting error.\nUse the traceback above to help find the error.\n'
                        250     CALL_METHOD                     1
                        252     POP_TOP                         
                        254     POP_EXCEPT                      
                        256     JUMP_FORWARD                    1 (to 260)
                        258     RERAISE                         0
                        260     POP_BLOCK                       
                        262     JUMP_FORWARD                    9 (to 282)
                        264     DUP_TOP                         
                        266     LOAD_GLOBAL                     22: OSError
                        268     JUMP_IF_NOT_EXC_MATCH           140 (to 280)
                        270     POP_TOP                         
                        272     POP_TOP                         
                        274     POP_TOP                         
                        276     POP_EXCEPT                      
                        278     JUMP_FORWARD                    7 (to 294)
                        280     RERAISE                         0
                        282     POP_BLOCK                       
                        284     DELETE_FAST                     2: t
                        286     DELETE_FAST                     3: v
                        288     DELETE_FAST                     4: tb
                        290     LOAD_CONST                      2: None
                        292     RETURN_VALUE                    
                        294     POP_BLOCK                       
                        296     DELETE_FAST                     2: t
                        298     DELETE_FAST                     3: v
                        300     DELETE_FAST                     4: tb
                        302     LOAD_CONST                      2: None
                        304     RETURN_VALUE                    
                        306     DELETE_FAST                     2: t
                        308     DELETE_FAST                     3: v
                        310     DELETE_FAST                     4: tb
                        312     RERAISE                         0
                        314     LOAD_CONST                      2: None
                        316     RETURN_VALUE                    
                        318     LOAD_CONST                      2: None
                        320     RETURN_VALUE                    
                'Handler.handleError'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getLevelName'
                        'level'
                        '__class__'
                        '__name__'
                    [Var Names]
                        'self'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<%s (%s)>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getLevelName
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: level
                        6       CALL_FUNCTION                   1
                        8       STORE_FAST                      1: level
                        10      LOAD_CONST                      1: '<%s (%s)>'
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: __class__
                        16      LOAD_ATTR                       3: __name__
                        18      LOAD_FAST                       1: level
                        20      BUILD_TUPLE                     2
                        22      BINARY_MODULO                   
                        24      RETURN_VALUE                    
                'Handler.__repr__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Handler'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "\n    Handler instances dispatch logging events to specific destinations.\n\n    The base handler class. Acts as a placeholder which defines the Handler\n    interface. Handlers can optionally use Formatter instances to format\n    records as desired. By default, no formatter is specified; in this case,\n    the 'raw' message as determined by record.message is logged.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: NOTSET
                14      BUILD_TUPLE                     1
                16      LOAD_CONST                      2: <CODE> __init__
                18      LOAD_CONST                      3: 'Handler.__init__'
                20      MAKE_FUNCTION                   1
                22      STORE_NAME                      5: __init__
                24      LOAD_CONST                      4: <CODE> get_name
                26      LOAD_CONST                      5: 'Handler.get_name'
                28      MAKE_FUNCTION                   0
                30      STORE_NAME                      6: get_name
                32      LOAD_CONST                      6: <CODE> set_name
                34      LOAD_CONST                      7: 'Handler.set_name'
                36      MAKE_FUNCTION                   0
                38      STORE_NAME                      7: set_name
                40      LOAD_NAME                       8: property
                42      LOAD_NAME                       6: get_name
                44      LOAD_NAME                       7: set_name
                46      CALL_FUNCTION                   2
                48      STORE_NAME                      9: name
                50      LOAD_CONST                      8: <CODE> createLock
                52      LOAD_CONST                      9: 'Handler.createLock'
                54      MAKE_FUNCTION                   0
                56      STORE_NAME                      10: createLock
                58      LOAD_CONST                      10: <CODE> _at_fork_reinit
                60      LOAD_CONST                      11: 'Handler._at_fork_reinit'
                62      MAKE_FUNCTION                   0
                64      STORE_NAME                      11: _at_fork_reinit
                66      LOAD_CONST                      12: <CODE> acquire
                68      LOAD_CONST                      13: 'Handler.acquire'
                70      MAKE_FUNCTION                   0
                72      STORE_NAME                      12: acquire
                74      LOAD_CONST                      14: <CODE> release
                76      LOAD_CONST                      15: 'Handler.release'
                78      MAKE_FUNCTION                   0
                80      STORE_NAME                      13: release
                82      LOAD_CONST                      16: <CODE> setLevel
                84      LOAD_CONST                      17: 'Handler.setLevel'
                86      MAKE_FUNCTION                   0
                88      STORE_NAME                      14: setLevel
                90      LOAD_CONST                      18: <CODE> format
                92      LOAD_CONST                      19: 'Handler.format'
                94      MAKE_FUNCTION                   0
                96      STORE_NAME                      15: format
                98      LOAD_CONST                      20: <CODE> emit
                100     LOAD_CONST                      21: 'Handler.emit'
                102     MAKE_FUNCTION                   0
                104     STORE_NAME                      16: emit
                106     LOAD_CONST                      22: <CODE> handle
                108     LOAD_CONST                      23: 'Handler.handle'
                110     MAKE_FUNCTION                   0
                112     STORE_NAME                      17: handle
                114     LOAD_CONST                      24: <CODE> setFormatter
                116     LOAD_CONST                      25: 'Handler.setFormatter'
                118     MAKE_FUNCTION                   0
                120     STORE_NAME                      18: setFormatter
                122     LOAD_CONST                      26: <CODE> flush
                124     LOAD_CONST                      27: 'Handler.flush'
                126     MAKE_FUNCTION                   0
                128     STORE_NAME                      19: flush
                130     LOAD_CONST                      28: <CODE> close
                132     LOAD_CONST                      29: 'Handler.close'
                134     MAKE_FUNCTION                   0
                136     STORE_NAME                      20: close
                138     LOAD_CONST                      30: <CODE> handleError
                140     LOAD_CONST                      31: 'Handler.handleError'
                142     MAKE_FUNCTION                   0
                144     STORE_NAME                      21: handleError
                146     LOAD_CONST                      32: <CODE> __repr__
                148     LOAD_CONST                      33: 'Handler.__repr__'
                150     MAKE_FUNCTION                   0
                152     STORE_NAME                      22: __repr__
                154     LOAD_CONST                      34: None
                156     RETURN_VALUE                    
        'Handler'
        [Code]
            File Name: logging/__init__.py
            Object Name: StreamHandler
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'terminator'
                '__init__'
                'flush'
                'emit'
                'setStream'
                '__repr__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'StreamHandler'
                '\n    A handler class which writes logging records, appropriately formatted,\n    to a stream. Note that this class does not close the stream, as\n    sys.stdout or sys.stderr may be used.\n    '
                '\n'
                None
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Handler'
                        '__init__'
                        'sys'
                        'stderr'
                        'stream'
                    [Var Names]
                        'self'
                        'stream'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Initialize the handler.\n\n        If stream is not specified, sys.stderr is used.\n        '
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Handler
                        2       LOAD_METHOD                     1: __init__
                        4       LOAD_FAST                       0: self
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       1: stream
                        12      LOAD_CONST                      1: None
                        14      IS_OP                           0 (is)
                        16      POP_JUMP_IF_FALSE               12 (to 24)
                        18      LOAD_GLOBAL                     2: sys
                        20      LOAD_ATTR                       3: stderr
                        22      STORE_FAST                      1: stream
                        24      LOAD_FAST                       1: stream
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      4: stream
                        30      LOAD_CONST                      1: None
                        32      RETURN_VALUE                    
                'StreamHandler.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: flush
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'acquire'
                        'stream'
                        'hasattr'
                        'flush'
                        'release'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Flushes the stream.\n        '
                        'flush'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: acquire
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       SETUP_FINALLY                   35 (to 80)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: stream
                        14      POP_JUMP_IF_FALSE               26 (to 52)
                        16      LOAD_GLOBAL                     2: hasattr
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       1: stream
                        22      LOAD_CONST                      1: 'flush'
                        24      CALL_FUNCTION                   2
                        26      POP_JUMP_IF_FALSE               33 (to 66)
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       1: stream
                        32      LOAD_METHOD                     3: flush
                        34      CALL_METHOD                     0
                        36      POP_TOP                         
                        38      POP_BLOCK                       
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     4: release
                        44      CALL_METHOD                     0
                        46      POP_TOP                         
                        48      LOAD_CONST                      2: None
                        50      RETURN_VALUE                    
                        52      POP_BLOCK                       
                        54      LOAD_FAST                       0: self
                        56      LOAD_METHOD                     4: release
                        58      CALL_METHOD                     0
                        60      POP_TOP                         
                        62      LOAD_CONST                      2: None
                        64      RETURN_VALUE                    
                        66      POP_BLOCK                       
                        68      LOAD_FAST                       0: self
                        70      LOAD_METHOD                     4: release
                        72      CALL_METHOD                     0
                        74      POP_TOP                         
                        76      LOAD_CONST                      2: None
                        78      RETURN_VALUE                    
                        80      LOAD_FAST                       0: self
                        82      LOAD_METHOD                     4: release
                        84      CALL_METHOD                     0
                        86      POP_TOP                         
                        88      RERAISE                         0
                'StreamHandler.flush'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: emit
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'format'
                        'stream'
                        'write'
                        'terminator'
                        'flush'
                        'RecursionError'
                        'Exception'
                        'handleError'
                    [Var Names]
                        'self'
                        'record'
                        'msg'
                        'stream'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Emit a record.\n\n        If a formatter is specified, it is used to format the record.\n        The record is then written to the stream with a trailing newline.  If\n        exception information is present, it is formatted using\n        traceback.print_exception and appended to the stream.  If the stream\n        has an 'encoding' attribute, it is used to determine how to do the\n        output to the stream.\n        "
                        None
                    [Disassembly]
                        0       SETUP_FINALLY                   23 (to 48)
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: format
                        6       LOAD_FAST                       1: record
                        8       CALL_METHOD                     1
                        10      STORE_FAST                      2: msg
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: stream
                        16      STORE_FAST                      3: stream
                        18      LOAD_FAST                       3: stream
                        20      LOAD_METHOD                     2: write
                        22      LOAD_FAST                       2: msg
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       3: terminator
                        28      BINARY_ADD                      
                        30      CALL_METHOD                     1
                        32      POP_TOP                         
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     4: flush
                        38      CALL_METHOD                     0
                        40      POP_TOP                         
                        42      POP_BLOCK                       
                        44      LOAD_CONST                      1: None
                        46      RETURN_VALUE                    
                        48      DUP_TOP                         
                        50      LOAD_GLOBAL                     5: RecursionError
                        52      JUMP_IF_NOT_EXC_MATCH           31 (to 62)
                        54      POP_TOP                         
                        56      POP_TOP                         
                        58      POP_TOP                         
                        60      RAISE_VARARGS                   0
                        62      DUP_TOP                         
                        64      LOAD_GLOBAL                     6: Exception
                        66      JUMP_IF_NOT_EXC_MATCH           45 (to 90)
                        68      POP_TOP                         
                        70      POP_TOP                         
                        72      POP_TOP                         
                        74      LOAD_FAST                       0: self
                        76      LOAD_METHOD                     7: handleError
                        78      LOAD_FAST                       1: record
                        80      CALL_METHOD                     1
                        82      POP_TOP                         
                        84      POP_EXCEPT                      
                        86      LOAD_CONST                      1: None
                        88      RETURN_VALUE                    
                        90      RERAISE                         0
                'StreamHandler.emit'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: setStream
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'stream'
                        'acquire'
                        'flush'
                        'release'
                    [Var Names]
                        'self'
                        'stream'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Sets the StreamHandler's stream to the specified value,\n        if it is different.\n\n        Returns the old stream, if the stream was changed, or None\n        if it wasn't.\n        "
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: stream
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: stream
                        6       IS_OP                           0 (is)
                        8       POP_JUMP_IF_FALSE               9 (to 18)
                        10      LOAD_CONST                      1: None
                        12      STORE_FAST                      2: result
                        14      LOAD_FAST                       2: result
                        16      RETURN_VALUE                    
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       0: stream
                        22      STORE_FAST                      2: result
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     1: acquire
                        28      CALL_METHOD                     0
                        30      POP_TOP                         
                        32      SETUP_FINALLY                   14 (to 62)
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     2: flush
                        38      CALL_METHOD                     0
                        40      POP_TOP                         
                        42      LOAD_FAST                       1: stream
                        44      LOAD_FAST                       0: self
                        46      STORE_ATTR                      0: stream
                        48      POP_BLOCK                       
                        50      LOAD_FAST                       0: self
                        52      LOAD_METHOD                     3: release
                        54      CALL_METHOD                     0
                        56      POP_TOP                         
                        58      LOAD_FAST                       2: result
                        60      RETURN_VALUE                    
                        62      LOAD_FAST                       0: self
                        64      LOAD_METHOD                     3: release
                        66      CALL_METHOD                     0
                        68      POP_TOP                         
                        70      RERAISE                         0
                'StreamHandler.setStream'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getLevelName'
                        'level'
                        'getattr'
                        'stream'
                        'str'
                        '__class__'
                        '__name__'
                    [Var Names]
                        'self'
                        'level'
                        'name'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'name'
                        ''
                        ' '
                        '<%s %s(%s)>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getLevelName
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: level
                        6       CALL_FUNCTION                   1
                        8       STORE_FAST                      1: level
                        10      LOAD_GLOBAL                     2: getattr
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: stream
                        16      LOAD_CONST                      1: 'name'
                        18      LOAD_CONST                      2: ''
                        20      CALL_FUNCTION                   3
                        22      STORE_FAST                      2: name
                        24      LOAD_GLOBAL                     4: str
                        26      LOAD_FAST                       2: name
                        28      CALL_FUNCTION                   1
                        30      STORE_FAST                      2: name
                        32      LOAD_FAST                       2: name
                        34      POP_JUMP_IF_FALSE               22 (to 44)
                        36      LOAD_FAST                       2: name
                        38      LOAD_CONST                      3: ' '
                        40      INPLACE_ADD                     
                        42      STORE_FAST                      2: name
                        44      LOAD_CONST                      4: '<%s %s(%s)>'
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       5: __class__
                        50      LOAD_ATTR                       6: __name__
                        52      LOAD_FAST                       2: name
                        54      LOAD_FAST                       1: level
                        56      BUILD_TUPLE                     3
                        58      BINARY_MODULO                   
                        60      RETURN_VALUE                    
                'StreamHandler.__repr__'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'StreamHandler'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    A handler class which writes logging records, appropriately formatted,\n    to a stream. Note that this class does not close the stream, as\n    sys.stdout or sys.stderr may be used.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: '\n'
                14      STORE_NAME                      4: terminator
                16      LOAD_CONST                      14: (None,)
                18      LOAD_CONST                      4: <CODE> __init__
                20      LOAD_CONST                      5: 'StreamHandler.__init__'
                22      MAKE_FUNCTION                   1
                24      STORE_NAME                      5: __init__
                26      LOAD_CONST                      6: <CODE> flush
                28      LOAD_CONST                      7: 'StreamHandler.flush'
                30      MAKE_FUNCTION                   0
                32      STORE_NAME                      6: flush
                34      LOAD_CONST                      8: <CODE> emit
                36      LOAD_CONST                      9: 'StreamHandler.emit'
                38      MAKE_FUNCTION                   0
                40      STORE_NAME                      7: emit
                42      LOAD_CONST                      10: <CODE> setStream
                44      LOAD_CONST                      11: 'StreamHandler.setStream'
                46      MAKE_FUNCTION                   0
                48      STORE_NAME                      8: setStream
                50      LOAD_CONST                      12: <CODE> __repr__
                52      LOAD_CONST                      13: 'StreamHandler.__repr__'
                54      MAKE_FUNCTION                   0
                56      STORE_NAME                      9: __repr__
                58      LOAD_CONST                      3: None
                60      RETURN_VALUE                    
        'StreamHandler'
        [Code]
            File Name: logging/__init__.py
            Object Name: FileHandler
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'close'
                '_open'
                'emit'
                '__repr__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'FileHandler'
                '\n    A handler class which writes formatted logging records to disk files.\n    '
                'a'
                None
                False
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 6
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'os'
                        'fspath'
                        'path'
                        'abspath'
                        'baseFilename'
                        'mode'
                        'encoding'
                        'io'
                        'text_encoding'
                        'errors'
                        'delay'
                        'open'
                        '_builtin_open'
                        'Handler'
                        '__init__'
                        'stream'
                        'StreamHandler'
                        '_open'
                    [Var Names]
                        'self'
                        'filename'
                        'mode'
                        'encoding'
                        'delay'
                        'errors'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Open the specified file and use it as the stream for logging.\n        '
                        'b'
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: os
                        2       LOAD_METHOD                     1: fspath
                        4       LOAD_FAST                       1: filename
                        6       CALL_METHOD                     1
                        8       STORE_FAST                      1: filename
                        10      LOAD_GLOBAL                     0: os
                        12      LOAD_ATTR                       2: path
                        14      LOAD_METHOD                     3: abspath
                        16      LOAD_FAST                       1: filename
                        18      CALL_METHOD                     1
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      4: baseFilename
                        24      LOAD_FAST                       2: mode
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      5: mode
                        30      LOAD_FAST                       3: encoding
                        32      LOAD_FAST                       0: self
                        34      STORE_ATTR                      6: encoding
                        36      LOAD_CONST                      1: 'b'
                        38      LOAD_FAST                       2: mode
                        40      CONTAINS_OP                     1 (not in)
                        42      POP_JUMP_IF_FALSE               28 (to 56)
                        44      LOAD_GLOBAL                     7: io
                        46      LOAD_METHOD                     8: text_encoding
                        48      LOAD_FAST                       3: encoding
                        50      CALL_METHOD                     1
                        52      LOAD_FAST                       0: self
                        54      STORE_ATTR                      6: encoding
                        56      LOAD_FAST                       5: errors
                        58      LOAD_FAST                       0: self
                        60      STORE_ATTR                      9: errors
                        62      LOAD_FAST                       4: delay
                        64      LOAD_FAST                       0: self
                        66      STORE_ATTR                      10: delay
                        68      LOAD_GLOBAL                     11: open
                        70      LOAD_FAST                       0: self
                        72      STORE_ATTR                      12: _builtin_open
                        74      LOAD_FAST                       4: delay
                        76      POP_JUMP_IF_FALSE               49 (to 98)
                        78      LOAD_GLOBAL                     13: Handler
                        80      LOAD_METHOD                     14: __init__
                        82      LOAD_FAST                       0: self
                        84      CALL_METHOD                     1
                        86      POP_TOP                         
                        88      LOAD_CONST                      2: None
                        90      LOAD_FAST                       0: self
                        92      STORE_ATTR                      15: stream
                        94      LOAD_CONST                      2: None
                        96      RETURN_VALUE                    
                        98      LOAD_GLOBAL                     16: StreamHandler
                        100     LOAD_METHOD                     14: __init__
                        102     LOAD_FAST                       0: self
                        104     LOAD_FAST                       0: self
                        106     LOAD_METHOD                     17: _open
                        108     CALL_METHOD                     0
                        110     CALL_METHOD                     2
                        112     POP_TOP                         
                        114     LOAD_CONST                      2: None
                        116     RETURN_VALUE                    
                'FileHandler.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: close
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 9
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'acquire'
                        'stream'
                        'flush'
                        'hasattr'
                        'close'
                        'StreamHandler'
                        'release'
                    [Var Names]
                        'self'
                        'stream'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Closes the stream.\n        '
                        None
                        'close'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: acquire
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       SETUP_FINALLY                   63 (to 136)
                        10      SETUP_FINALLY                   49 (to 110)
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: stream
                        16      POP_JUMP_IF_FALSE               48 (to 96)
                        18      SETUP_FINALLY                   21 (to 62)
                        20      LOAD_FAST                       0: self
                        22      LOAD_METHOD                     2: flush
                        24      CALL_METHOD                     0
                        26      POP_TOP                         
                        28      POP_BLOCK                       
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       1: stream
                        34      STORE_FAST                      1: stream
                        36      LOAD_CONST                      1: None
                        38      LOAD_FAST                       0: self
                        40      STORE_ATTR                      1: stream
                        42      LOAD_GLOBAL                     3: hasattr
                        44      LOAD_FAST                       1: stream
                        46      LOAD_CONST                      2: 'close'
                        48      CALL_FUNCTION                   2
                        50      POP_JUMP_IF_FALSE               30 (to 60)
                        52      LOAD_FAST                       1: stream
                        54      LOAD_METHOD                     4: close
                        56      CALL_METHOD                     0
                        58      POP_TOP                         
                        60      JUMP_FORWARD                    17 (to 96)
                        62      LOAD_FAST                       0: self
                        64      LOAD_ATTR                       1: stream
                        66      STORE_FAST                      1: stream
                        68      LOAD_CONST                      1: None
                        70      LOAD_FAST                       0: self
                        72      STORE_ATTR                      1: stream
                        74      LOAD_GLOBAL                     3: hasattr
                        76      LOAD_FAST                       1: stream
                        78      LOAD_CONST                      2: 'close'
                        80      CALL_FUNCTION                   2
                        82      POP_JUMP_IF_FALSE               47 (to 94)
                        84      LOAD_FAST                       1: stream
                        86      LOAD_METHOD                     4: close
                        88      CALL_METHOD                     0
                        90      POP_TOP                         
                        92      RERAISE                         0
                        94      RERAISE                         0
                        96      POP_BLOCK                       
                        98      LOAD_GLOBAL                     5: StreamHandler
                        100     LOAD_METHOD                     4: close
                        102     LOAD_FAST                       0: self
                        104     CALL_METHOD                     1
                        106     POP_TOP                         
                        108     JUMP_FORWARD                    6 (to 122)
                        110     LOAD_GLOBAL                     5: StreamHandler
                        112     LOAD_METHOD                     4: close
                        114     LOAD_FAST                       0: self
                        116     CALL_METHOD                     1
                        118     POP_TOP                         
                        120     RERAISE                         0
                        122     POP_BLOCK                       
                        124     LOAD_FAST                       0: self
                        126     LOAD_METHOD                     6: release
                        128     CALL_METHOD                     0
                        130     POP_TOP                         
                        132     LOAD_CONST                      1: None
                        134     RETURN_VALUE                    
                        136     LOAD_FAST                       0: self
                        138     LOAD_METHOD                     6: release
                        140     CALL_METHOD                     0
                        142     POP_TOP                         
                        144     RERAISE                         0
                'FileHandler.close'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: _open
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_builtin_open'
                        'baseFilename'
                        'mode'
                        'encoding'
                        'errors'
                    [Var Names]
                        'self'
                        'open_func'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Open the current base file with the (original) mode and encoding.\n        Return the resulting stream.\n        '
                        (
                            'encoding'
                            'errors'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _builtin_open
                        4       STORE_FAST                      1: open_func
                        6       LOAD_FAST                       1: open_func
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: baseFilename
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: mode
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       3: encoding
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       4: errors
                        24      LOAD_CONST                      1: ('encoding', 'errors')
                        26      CALL_FUNCTION_KW                4
                        28      RETURN_VALUE                    
                'FileHandler._open'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: emit
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'stream'
                        'mode'
                        '_closed'
                        '_open'
                        'StreamHandler'
                        'emit'
                    [Var Names]
                        'self'
                        'record'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Emit a record.\n\n        If the stream was not opened because 'delay' was specified in the\n        constructor, open it before calling the superclass's emit.\n\n        If stream is not open, current mode is 'w' and `_closed=True`, record\n        will not be emitted (see Issue #42378).\n        "
                        None
                        'w'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: stream
                        4       LOAD_CONST                      1: None
                        6       IS_OP                           0 (is)
                        8       POP_JUMP_IF_FALSE               18 (to 36)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: mode
                        14      LOAD_CONST                      2: 'w'
                        16      COMPARE_OP                      3 (!=)
                        18      POP_JUMP_IF_TRUE                13 (to 26)
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: _closed
                        24      POP_JUMP_IF_TRUE                18 (to 36)
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     3: _open
                        30      CALL_METHOD                     0
                        32      LOAD_FAST                       0: self
                        34      STORE_ATTR                      0: stream
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       0: stream
                        40      POP_JUMP_IF_FALSE               29 (to 58)
                        42      LOAD_GLOBAL                     4: StreamHandler
                        44      LOAD_METHOD                     5: emit
                        46      LOAD_FAST                       0: self
                        48      LOAD_FAST                       1: record
                        50      CALL_METHOD                     2
                        52      POP_TOP                         
                        54      LOAD_CONST                      1: None
                        56      RETURN_VALUE                    
                        58      LOAD_CONST                      1: None
                        60      RETURN_VALUE                    
                'FileHandler.emit'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getLevelName'
                        'level'
                        '__class__'
                        '__name__'
                        'baseFilename'
                    [Var Names]
                        'self'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<%s %s (%s)>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getLevelName
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: level
                        6       CALL_FUNCTION                   1
                        8       STORE_FAST                      1: level
                        10      LOAD_CONST                      1: '<%s %s (%s)>'
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: __class__
                        16      LOAD_ATTR                       3: __name__
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       4: baseFilename
                        22      LOAD_FAST                       1: level
                        24      BUILD_TUPLE                     3
                        26      BINARY_MODULO                   
                        28      RETURN_VALUE                    
                'FileHandler.__repr__'
                (
                    'a'
                    None
                    False
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'FileHandler'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    A handler class which writes formatted logging records to disk files.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      15: ('a', None, False, None)
                14      LOAD_CONST                      5: <CODE> __init__
                16      LOAD_CONST                      6: 'FileHandler.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      7: <CODE> close
                24      LOAD_CONST                      8: 'FileHandler.close'
                26      MAKE_FUNCTION                   0
                28      STORE_NAME                      5: close
                30      LOAD_CONST                      9: <CODE> _open
                32      LOAD_CONST                      10: 'FileHandler._open'
                34      MAKE_FUNCTION                   0
                36      STORE_NAME                      6: _open
                38      LOAD_CONST                      11: <CODE> emit
                40      LOAD_CONST                      12: 'FileHandler.emit'
                42      MAKE_FUNCTION                   0
                44      STORE_NAME                      7: emit
                46      LOAD_CONST                      13: <CODE> __repr__
                48      LOAD_CONST                      14: 'FileHandler.__repr__'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      8: __repr__
                54      LOAD_CONST                      3: None
                56      RETURN_VALUE                    
        'FileHandler'
        [Code]
            File Name: logging/__init__.py
            Object Name: _StderrHandler
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'NOTSET'
                '__init__'
                'property'
                'stream'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_StderrHandler'
                '\n    This class is like a StreamHandler using sys.stderr, but always uses\n    whatever sys.stderr is currently set to rather than the value of\n    sys.stderr at handler construction time.\n    '
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Handler'
                        '__init__'
                    [Var Names]
                        'self'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Initialize the handler.\n        '
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Handler
                        2       LOAD_METHOD                     1: __init__
                        4       LOAD_FAST                       0: self
                        6       LOAD_FAST                       1: level
                        8       CALL_METHOD                     2
                        10      POP_TOP                         
                        12      LOAD_CONST                      1: None
                        14      RETURN_VALUE                    
                '_StderrHandler.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: stream
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'sys'
                        'stderr'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: sys
                        2       LOAD_ATTR                       1: stderr
                        4       RETURN_VALUE                    
                '_StderrHandler.stream'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_StderrHandler'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    This class is like a StreamHandler using sys.stderr, but always uses\n    whatever sys.stderr is currently set to rather than the value of\n    sys.stderr at handler construction time.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: NOTSET
                14      BUILD_TUPLE                     1
                16      LOAD_CONST                      2: <CODE> __init__
                18      LOAD_CONST                      3: '_StderrHandler.__init__'
                20      MAKE_FUNCTION                   1
                22      STORE_NAME                      5: __init__
                24      LOAD_NAME                       6: property
                26      LOAD_CONST                      4: <CODE> stream
                28      LOAD_CONST                      5: '_StderrHandler.stream'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      7: stream
                36      LOAD_CONST                      6: None
                38      RETURN_VALUE                    
        '_StderrHandler'
        [Code]
            File Name: logging/__init__.py
            Object Name: PlaceHolder
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'append'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'PlaceHolder'
                '\n    PlaceHolder instances are used in the Manager logger hierarchy to take\n    the place of nodes for which no loggers have been defined. This class is\n    intended for internal use only and not as part of the public API.\n    '
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'loggerMap'
                    [Var Names]
                        'self'
                        'alogger'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Initialize with the specified logger being a child of this placeholder.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: alogger
                        2       LOAD_CONST                      1: None
                        4       BUILD_MAP                       1
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      0: loggerMap
                        10      LOAD_CONST                      1: None
                        12      RETURN_VALUE                    
                'PlaceHolder.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: append
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'loggerMap'
                    [Var Names]
                        'self'
                        'alogger'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Add the specified logger as a child of this placeholder.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: alogger
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: loggerMap
                        6       CONTAINS_OP                     1 (not in)
                        8       POP_JUMP_IF_FALSE               12 (to 24)
                        10      LOAD_CONST                      1: None
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       0: loggerMap
                        16      LOAD_FAST                       1: alogger
                        18      STORE_SUBSCR                    
                        20      LOAD_CONST                      1: None
                        22      RETURN_VALUE                    
                        24      LOAD_CONST                      1: None
                        26      RETURN_VALUE                    
                'PlaceHolder.append'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'PlaceHolder'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    PlaceHolder instances are used in the Manager logger hierarchy to take\n    the place of nodes for which no loggers have been defined. This class is\n    intended for internal use only and not as part of the public API.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'PlaceHolder.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> append
                22      LOAD_CONST                      5: 'PlaceHolder.append'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: append
                28      LOAD_CONST                      6: None
                30      RETURN_VALUE                    
        'PlaceHolder'
        [Code]
            File Name: logging/__init__.py
            Object Name: setLoggerClass
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Logger'
                'issubclass'
                'TypeError'
                '__name__'
                '_loggerClass'
            [Var Names]
                'klass'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Set the class to be used when instantiating a logger. The class should\n    define __init__() such that only a name argument is required, and the\n    __init__() should call Logger.__init__()\n    '
                'logger not derived from logging.Logger: '
                None
            [Disassembly]
                0       LOAD_FAST                       0: klass
                2       LOAD_GLOBAL                     0: Logger
                4       COMPARE_OP                      3 (!=)
                6       POP_JUMP_IF_FALSE               16 (to 32)
                8       LOAD_GLOBAL                     1: issubclass
                10      LOAD_FAST                       0: klass
                12      LOAD_GLOBAL                     0: Logger
                14      CALL_FUNCTION                   2
                16      POP_JUMP_IF_TRUE                16 (to 32)
                18      LOAD_GLOBAL                     2: TypeError
                20      LOAD_CONST                      1: 'logger not derived from logging.Logger: '
                22      LOAD_FAST                       0: klass
                24      LOAD_ATTR                       3: __name__
                26      BINARY_ADD                      
                28      CALL_FUNCTION                   1
                30      RAISE_VARARGS                   1
                32      LOAD_FAST                       0: klass
                34      STORE_GLOBAL                    4: _loggerClass
                36      LOAD_CONST                      2: None
                38      RETURN_VALUE                    
        'setLoggerClass'
        [Code]
            File Name: logging/__init__.py
            Object Name: getLoggerClass
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_loggerClass'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Return the class to be used when instantiating a logger.\n    '
            [Disassembly]
                0       LOAD_GLOBAL                     0: _loggerClass
                2       RETURN_VALUE                    
        'getLoggerClass'
        [Code]
            File Name: logging/__init__.py
            Object Name: Manager
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'property'
                'disable'
                'setter'
                'getLogger'
                'setLoggerClass'
                'setLogRecordFactory'
                '_fixupParents'
                '_fixupChildren'
                '_clear_cache'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Manager'
                '\n    There is [under normal circumstances] just one Manager instance, which\n    holds the hierarchy of loggers.\n    '
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'root'
                        'disable'
                        'emittedNoHandlerWarning'
                        'loggerDict'
                        'loggerClass'
                        'logRecordFactory'
                    [Var Names]
                        'self'
                        'rootnode'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Initialize the manager with the root node of the logger hierarchy.\n        '
                        0
                        False
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: rootnode
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: root
                        6       LOAD_CONST                      1: 0
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: disable
                        12      LOAD_CONST                      2: False
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: emittedNoHandlerWarning
                        18      BUILD_MAP                       0
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      3: loggerDict
                        24      LOAD_CONST                      3: None
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      4: loggerClass
                        30      LOAD_CONST                      3: None
                        32      LOAD_FAST                       0: self
                        34      STORE_ATTR                      5: logRecordFactory
                        36      LOAD_CONST                      3: None
                        38      RETURN_VALUE                    
                'Manager.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: disable
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_disable'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _disable
                        4       RETURN_VALUE                    
                'Manager.disable'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: disable
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_checkLevel'
                        '_disable'
                    [Var Names]
                        'self'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _checkLevel
                        2       LOAD_FAST                       1: value
                        4       CALL_FUNCTION                   1
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      1: _disable
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                [Code]
                    File Name: logging/__init__.py
                    Object Name: getLogger
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'str'
                        'TypeError'
                        '_acquireLock'
                        'loggerDict'
                        'PlaceHolder'
                        'loggerClass'
                        '_loggerClass'
                        'manager'
                        '_fixupChildren'
                        '_fixupParents'
                        '_releaseLock'
                    [Var Names]
                        'self'
                        'name'
                        'rv'
                        'ph'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Get a logger with the specified name (channel name), creating it\n        if it doesn\'t yet exist. This name is a dot-separated hierarchical\n        name, such as "a", "a.b", "a.b.c" or similar.\n\n        If a PlaceHolder existed for the specified name [i.e. the logger\n        didn\'t exist but a child of it did], replace it with the created\n        logger and fix up the parent/child references which pointed to the\n        placeholder to now point to the logger.\n        '
                        None
                        'A logger name must be a string'
                    [Disassembly]
                        0       LOAD_CONST                      1: None
                        2       STORE_FAST                      2: rv
                        4       LOAD_GLOBAL                     0: isinstance
                        6       LOAD_FAST                       1: name
                        8       LOAD_GLOBAL                     1: str
                        10      CALL_FUNCTION                   2
                        12      POP_JUMP_IF_TRUE                11 (to 22)
                        14      LOAD_GLOBAL                     2: TypeError
                        16      LOAD_CONST                      2: 'A logger name must be a string'
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                        22      LOAD_GLOBAL                     3: _acquireLock
                        24      CALL_FUNCTION                   0
                        26      POP_TOP                         
                        28      SETUP_FINALLY                   76 (to 182)
                        30      LOAD_FAST                       1: name
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       4: loggerDict
                        36      CONTAINS_OP                     0 (in)
                        38      POP_JUMP_IF_FALSE               59 (to 118)
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       4: loggerDict
                        44      LOAD_FAST                       1: name
                        46      BINARY_SUBSCR                   
                        48      STORE_FAST                      2: rv
                        50      LOAD_GLOBAL                     0: isinstance
                        52      LOAD_FAST                       2: rv
                        54      LOAD_GLOBAL                     5: PlaceHolder
                        56      CALL_FUNCTION                   2
                        58      POP_JUMP_IF_FALSE               58 (to 116)
                        60      LOAD_FAST                       2: rv
                        62      STORE_FAST                      3: ph
                        64      LOAD_FAST                       0: self
                        66      LOAD_ATTR                       6: loggerClass
                        68      JUMP_IF_TRUE_OR_POP             36 (to 72)
                        70      LOAD_GLOBAL                     7: _loggerClass
                        72      LOAD_FAST                       1: name
                        74      CALL_FUNCTION                   1
                        76      STORE_FAST                      2: rv
                        78      LOAD_FAST                       0: self
                        80      LOAD_FAST                       2: rv
                        82      STORE_ATTR                      8: manager
                        84      LOAD_FAST                       2: rv
                        86      LOAD_FAST                       0: self
                        88      LOAD_ATTR                       4: loggerDict
                        90      LOAD_FAST                       1: name
                        92      STORE_SUBSCR                    
                        94      LOAD_FAST                       0: self
                        96      LOAD_METHOD                     9: _fixupChildren
                        98      LOAD_FAST                       3: ph
                        100     LOAD_FAST                       2: rv
                        102     CALL_METHOD                     2
                        104     POP_TOP                         
                        106     LOAD_FAST                       0: self
                        108     LOAD_METHOD                     10: _fixupParents
                        110     LOAD_FAST                       2: rv
                        112     CALL_METHOD                     1
                        114     POP_TOP                         
                        116     JUMP_FORWARD                    26 (to 170)
                        118     LOAD_FAST                       0: self
                        120     LOAD_ATTR                       6: loggerClass
                        122     JUMP_IF_TRUE_OR_POP             63 (to 126)
                        124     LOAD_GLOBAL                     7: _loggerClass
                        126     LOAD_FAST                       1: name
                        128     CALL_FUNCTION                   1
                        130     STORE_FAST                      2: rv
                        132     LOAD_FAST                       0: self
                        134     LOAD_FAST                       2: rv
                        136     STORE_ATTR                      8: manager
                        138     LOAD_FAST                       2: rv
                        140     LOAD_FAST                       0: self
                        142     LOAD_ATTR                       4: loggerDict
                        144     LOAD_FAST                       1: name
                        146     STORE_SUBSCR                    
                        148     LOAD_FAST                       0: self
                        150     LOAD_METHOD                     10: _fixupParents
                        152     LOAD_FAST                       2: rv
                        154     CALL_METHOD                     1
                        156     POP_TOP                         
                        158     POP_BLOCK                       
                        160     LOAD_GLOBAL                     11: _releaseLock
                        162     CALL_FUNCTION                   0
                        164     POP_TOP                         
                        166     LOAD_FAST                       2: rv
                        168     RETURN_VALUE                    
                        170     POP_BLOCK                       
                        172     LOAD_GLOBAL                     11: _releaseLock
                        174     CALL_FUNCTION                   0
                        176     POP_TOP                         
                        178     LOAD_FAST                       2: rv
                        180     RETURN_VALUE                    
                        182     LOAD_GLOBAL                     11: _releaseLock
                        184     CALL_FUNCTION                   0
                        186     POP_TOP                         
                        188     RERAISE                         0
                'Manager.getLogger'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: setLoggerClass
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Logger'
                        'issubclass'
                        'TypeError'
                        '__name__'
                        'loggerClass'
                    [Var Names]
                        'self'
                        'klass'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Set the class to be used when instantiating a logger with this Manager.\n        '
                        'logger not derived from logging.Logger: '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: klass
                        2       LOAD_GLOBAL                     0: Logger
                        4       COMPARE_OP                      3 (!=)
                        6       POP_JUMP_IF_FALSE               16 (to 32)
                        8       LOAD_GLOBAL                     1: issubclass
                        10      LOAD_FAST                       1: klass
                        12      LOAD_GLOBAL                     0: Logger
                        14      CALL_FUNCTION                   2
                        16      POP_JUMP_IF_TRUE                16 (to 32)
                        18      LOAD_GLOBAL                     2: TypeError
                        20      LOAD_CONST                      1: 'logger not derived from logging.Logger: '
                        22      LOAD_FAST                       1: klass
                        24      LOAD_ATTR                       3: __name__
                        26      BINARY_ADD                      
                        28      CALL_FUNCTION                   1
                        30      RAISE_VARARGS                   1
                        32      LOAD_FAST                       1: klass
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      4: loggerClass
                        38      LOAD_CONST                      2: None
                        40      RETURN_VALUE                    
                'Manager.setLoggerClass'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: setLogRecordFactory
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'logRecordFactory'
                    [Var Names]
                        'self'
                        'factory'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Set the factory to be used when instantiating a log record with this\n        Manager.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: factory
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: logRecordFactory
                        6       LOAD_CONST                      1: None
                        8       RETURN_VALUE                    
                'Manager.setLogRecordFactory'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: _fixupParents
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'name'
                        'rfind'
                        'loggerDict'
                        'PlaceHolder'
                        'isinstance'
                        'Logger'
                        'append'
                        'root'
                        'parent'
                    [Var Names]
                        'self'
                        'alogger'
                        'name'
                        'i'
                        'rv'
                        'substr'
                        'obj'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Ensure that there are either loggers or placeholders all the way\n        from the specified logger to the root of the logger hierarchy.\n        '
                        '.'
                        None
                        0
                        1
                    [Disassembly]
                        0       LOAD_FAST                       1: alogger
                        2       LOAD_ATTR                       0: name
                        4       STORE_FAST                      2: name
                        6       LOAD_FAST                       2: name
                        8       LOAD_METHOD                     1: rfind
                        10      LOAD_CONST                      1: '.'
                        12      CALL_METHOD                     1
                        14      STORE_FAST                      3: i
                        16      LOAD_CONST                      2: None
                        18      STORE_FAST                      4: rv
                        20      LOAD_FAST                       3: i
                        22      LOAD_CONST                      3: 0
                        24      COMPARE_OP                      4 (>)
                        26      POP_JUMP_IF_FALSE               75 (to 150)
                        28      LOAD_FAST                       4: rv
                        30      POP_JUMP_IF_TRUE                75 (to 150)
                        32      LOAD_FAST                       2: name
                        34      LOAD_CONST                      2: None
                        36      LOAD_FAST                       3: i
                        38      BUILD_SLICE                     2
                        40      BINARY_SUBSCR                   
                        42      STORE_FAST                      5: substr
                        44      LOAD_FAST                       5: substr
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       2: loggerDict
                        50      CONTAINS_OP                     1 (not in)
                        52      POP_JUMP_IF_FALSE               35 (to 70)
                        54      LOAD_GLOBAL                     3: PlaceHolder
                        56      LOAD_FAST                       1: alogger
                        58      CALL_FUNCTION                   1
                        60      LOAD_FAST                       0: self
                        62      LOAD_ATTR                       2: loggerDict
                        64      LOAD_FAST                       5: substr
                        66      STORE_SUBSCR                    
                        68      JUMP_FORWARD                    25 (to 120)
                        70      LOAD_FAST                       0: self
                        72      LOAD_ATTR                       2: loggerDict
                        74      LOAD_FAST                       5: substr
                        76      BINARY_SUBSCR                   
                        78      STORE_FAST                      6: obj
                        80      LOAD_GLOBAL                     4: isinstance
                        82      LOAD_FAST                       6: obj
                        84      LOAD_GLOBAL                     5: Logger
                        86      CALL_FUNCTION                   2
                        88      POP_JUMP_IF_FALSE               48 (to 96)
                        90      LOAD_FAST                       6: obj
                        92      STORE_FAST                      4: rv
                        94      JUMP_FORWARD                    12 (to 120)
                        96      LOAD_GLOBAL                     4: isinstance
                        98      LOAD_FAST                       6: obj
                        100     LOAD_GLOBAL                     3: PlaceHolder
                        102     CALL_FUNCTION                   2
                        104     POP_JUMP_IF_TRUE                55 (to 110)
                        106     LOAD_ASSERTION_ERROR            
                        108     RAISE_VARARGS                   1
                        110     LOAD_FAST                       6: obj
                        112     LOAD_METHOD                     6: append
                        114     LOAD_FAST                       1: alogger
                        116     CALL_METHOD                     1
                        118     POP_TOP                         
                        120     LOAD_FAST                       2: name
                        122     LOAD_METHOD                     1: rfind
                        124     LOAD_CONST                      1: '.'
                        126     LOAD_CONST                      3: 0
                        128     LOAD_FAST                       3: i
                        130     LOAD_CONST                      4: 1
                        132     BINARY_SUBTRACT                 
                        134     CALL_METHOD                     3
                        136     STORE_FAST                      3: i
                        138     LOAD_FAST                       3: i
                        140     LOAD_CONST                      3: 0
                        142     COMPARE_OP                      4 (>)
                        144     POP_JUMP_IF_FALSE               75 (to 150)
                        146     LOAD_FAST                       4: rv
                        148     POP_JUMP_IF_FALSE               16 (to 32)
                        150     LOAD_FAST                       4: rv
                        152     POP_JUMP_IF_TRUE                80 (to 160)
                        154     LOAD_FAST                       0: self
                        156     LOAD_ATTR                       7: root
                        158     STORE_FAST                      4: rv
                        160     LOAD_FAST                       4: rv
                        162     LOAD_FAST                       1: alogger
                        164     STORE_ATTR                      8: parent
                        166     LOAD_CONST                      2: None
                        168     RETURN_VALUE                    
                'Manager._fixupParents'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: _fixupChildren
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'name'
                        'len'
                        'loggerMap'
                        'keys'
                        'parent'
                    [Var Names]
                        'self'
                        'ph'
                        'alogger'
                        'name'
                        'namelen'
                        'c'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Ensure that children of the placeholder ph are connected to the\n        specified logger.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       2: alogger
                        2       LOAD_ATTR                       0: name
                        4       STORE_FAST                      3: name
                        6       LOAD_GLOBAL                     1: len
                        8       LOAD_FAST                       3: name
                        10      CALL_FUNCTION                   1
                        12      STORE_FAST                      4: namelen
                        14      LOAD_FAST                       1: ph
                        16      LOAD_ATTR                       2: loggerMap
                        18      LOAD_METHOD                     3: keys
                        20      CALL_METHOD                     0
                        22      GET_ITER                        
                        24      FOR_ITER                        19 (to 64)
                        26      STORE_FAST                      5: c
                        28      LOAD_FAST                       5: c
                        30      LOAD_ATTR                       4: parent
                        32      LOAD_ATTR                       0: name
                        34      LOAD_CONST                      1: None
                        36      LOAD_FAST                       4: namelen
                        38      BUILD_SLICE                     2
                        40      BINARY_SUBSCR                   
                        42      LOAD_FAST                       3: name
                        44      COMPARE_OP                      3 (!=)
                        46      POP_JUMP_IF_FALSE               31 (to 62)
                        48      LOAD_FAST                       5: c
                        50      LOAD_ATTR                       4: parent
                        52      LOAD_FAST                       2: alogger
                        54      STORE_ATTR                      4: parent
                        56      LOAD_FAST                       2: alogger
                        58      LOAD_FAST                       5: c
                        60      STORE_ATTR                      4: parent
                        62      JUMP_ABSOLUTE                   12 (to 24)
                        64      LOAD_CONST                      1: None
                        66      RETURN_VALUE                    
                'Manager._fixupChildren'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: _clear_cache
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_acquireLock'
                        'loggerDict'
                        'values'
                        'isinstance'
                        'Logger'
                        '_cache'
                        'clear'
                        'root'
                        '_releaseLock'
                    [Var Names]
                        'self'
                        'logger'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Clear the cache for all loggers in loggerDict\n        Called when level changes are made\n        '
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _acquireLock
                        2       CALL_FUNCTION                   0
                        4       POP_TOP                         
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: loggerDict
                        10      LOAD_METHOD                     2: values
                        12      CALL_METHOD                     0
                        14      GET_ITER                        
                        16      FOR_ITER                        12 (to 42)
                        18      STORE_FAST                      1: logger
                        20      LOAD_GLOBAL                     3: isinstance
                        22      LOAD_FAST                       1: logger
                        24      LOAD_GLOBAL                     4: Logger
                        26      CALL_FUNCTION                   2
                        28      POP_JUMP_IF_FALSE               20 (to 40)
                        30      LOAD_FAST                       1: logger
                        32      LOAD_ATTR                       5: _cache
                        34      LOAD_METHOD                     6: clear
                        36      CALL_METHOD                     0
                        38      POP_TOP                         
                        40      JUMP_ABSOLUTE                   8 (to 16)
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       7: root
                        46      LOAD_ATTR                       5: _cache
                        48      LOAD_METHOD                     6: clear
                        50      CALL_METHOD                     0
                        52      POP_TOP                         
                        54      LOAD_GLOBAL                     8: _releaseLock
                        56      CALL_FUNCTION                   0
                        58      POP_TOP                         
                        60      LOAD_CONST                      1: None
                        62      RETURN_VALUE                    
                'Manager._clear_cache'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Manager'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    There is [under normal circumstances] just one Manager instance, which\n    holds the hierarchy of loggers.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'Manager.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_NAME                       5: property
                22      LOAD_CONST                      4: <CODE> disable
                24      LOAD_CONST                      5: 'Manager.disable'
                26      MAKE_FUNCTION                   0
                28      CALL_FUNCTION                   1
                30      STORE_NAME                      6: disable
                32      LOAD_NAME                       6: disable
                34      LOAD_ATTR                       7: setter
                36      LOAD_CONST                      6: <CODE> disable
                38      LOAD_CONST                      5: 'Manager.disable'
                40      MAKE_FUNCTION                   0
                42      CALL_FUNCTION                   1
                44      STORE_NAME                      6: disable
                46      LOAD_CONST                      7: <CODE> getLogger
                48      LOAD_CONST                      8: 'Manager.getLogger'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      8: getLogger
                54      LOAD_CONST                      9: <CODE> setLoggerClass
                56      LOAD_CONST                      10: 'Manager.setLoggerClass'
                58      MAKE_FUNCTION                   0
                60      STORE_NAME                      9: setLoggerClass
                62      LOAD_CONST                      11: <CODE> setLogRecordFactory
                64      LOAD_CONST                      12: 'Manager.setLogRecordFactory'
                66      MAKE_FUNCTION                   0
                68      STORE_NAME                      10: setLogRecordFactory
                70      LOAD_CONST                      13: <CODE> _fixupParents
                72      LOAD_CONST                      14: 'Manager._fixupParents'
                74      MAKE_FUNCTION                   0
                76      STORE_NAME                      11: _fixupParents
                78      LOAD_CONST                      15: <CODE> _fixupChildren
                80      LOAD_CONST                      16: 'Manager._fixupChildren'
                82      MAKE_FUNCTION                   0
                84      STORE_NAME                      12: _fixupChildren
                86      LOAD_CONST                      17: <CODE> _clear_cache
                88      LOAD_CONST                      18: 'Manager._clear_cache'
                90      MAKE_FUNCTION                   0
                92      STORE_NAME                      13: _clear_cache
                94      LOAD_CONST                      19: None
                96      RETURN_VALUE                    
        'Manager'
        [Code]
            File Name: logging/__init__.py
            Object Name: Logger
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'NOTSET'
                '__init__'
                'setLevel'
                'debug'
                'info'
                'warning'
                'warn'
                'error'
                'exception'
                'critical'
                'fatal'
                'log'
                'findCaller'
                'makeRecord'
                '_log'
                'handle'
                'addHandler'
                'removeHandler'
                'hasHandlers'
                'callHandlers'
                'getEffectiveLevel'
                'isEnabledFor'
                'getChild'
                '__repr__'
                '__reduce__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Logger'
                '\n    Instances of the Logger class represent a single logging channel. A\n    "logging channel" indicates an area of an application. Exactly how an\n    "area" is defined is up to the application developer. Since an\n    application can have any number of areas, logging channels are identified\n    by a unique string. Application areas can be nested (e.g. an area\n    of "input processing" might include sub-areas "read CSV files", "read\n    XLS files" and "read Gnumeric files"). To cater for this natural nesting,\n    channel names are organized into a namespace hierarchy where levels are\n    separated by periods, much like the Java or Python package namespace. So\n    in the instance given above, channel names might be "input" for the upper\n    level, and "input.csv", "input.xls" and "input.gnu" for the sub-levels.\n    There is no arbitrary limit to the depth of nesting.\n    '
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Filterer'
                        '__init__'
                        'name'
                        '_checkLevel'
                        'level'
                        'parent'
                        'propagate'
                        'handlers'
                        'disabled'
                        '_cache'
                    [Var Names]
                        'self'
                        'name'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Initialize the logger with a name and an optional level.\n        '
                        None
                        True
                        False
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Filterer
                        2       LOAD_METHOD                     1: __init__
                        4       LOAD_FAST                       0: self
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       1: name
                        12      LOAD_FAST                       0: self
                        14      STORE_ATTR                      2: name
                        16      LOAD_GLOBAL                     3: _checkLevel
                        18      LOAD_FAST                       2: level
                        20      CALL_FUNCTION                   1
                        22      LOAD_FAST                       0: self
                        24      STORE_ATTR                      4: level
                        26      LOAD_CONST                      1: None
                        28      LOAD_FAST                       0: self
                        30      STORE_ATTR                      5: parent
                        32      LOAD_CONST                      2: True
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      6: propagate
                        38      BUILD_LIST                      0
                        40      LOAD_FAST                       0: self
                        42      STORE_ATTR                      7: handlers
                        44      LOAD_CONST                      3: False
                        46      LOAD_FAST                       0: self
                        48      STORE_ATTR                      8: disabled
                        50      BUILD_MAP                       0
                        52      LOAD_FAST                       0: self
                        54      STORE_ATTR                      9: _cache
                        56      LOAD_CONST                      1: None
                        58      RETURN_VALUE                    
                'Logger.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: setLevel
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_checkLevel'
                        'level'
                        'manager'
                        '_clear_cache'
                    [Var Names]
                        'self'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Set the logging level of this logger.  level must be an int or a str.\n        '
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _checkLevel
                        2       LOAD_FAST                       1: level
                        4       CALL_FUNCTION                   1
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      1: level
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: manager
                        14      LOAD_METHOD                     3: _clear_cache
                        16      CALL_METHOD                     0
                        18      POP_TOP                         
                        20      LOAD_CONST                      1: None
                        22      RETURN_VALUE                    
                'Logger.setLevel'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: debug
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'isEnabledFor'
                        'DEBUG'
                        '_log'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Log \'msg % args\' with severity \'DEBUG\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.debug("Houston, we have a %s", "thorny problem", exc_info=1)\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: isEnabledFor
                        4       LOAD_GLOBAL                     1: DEBUG
                        6       CALL_METHOD                     1
                        8       POP_JUMP_IF_FALSE               18 (to 36)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _log
                        14      LOAD_GLOBAL                     1: DEBUG
                        16      LOAD_FAST                       1: msg
                        18      LOAD_FAST                       2: args
                        20      BUILD_TUPLE                     3
                        22      BUILD_MAP                       0
                        24      LOAD_FAST                       3: kwargs
                        26      DICT_MERGE                      1
                        28      CALL_FUNCTION_EX                1
                        30      POP_TOP                         
                        32      LOAD_CONST                      1: None
                        34      RETURN_VALUE                    
                        36      LOAD_CONST                      1: None
                        38      RETURN_VALUE                    
                'Logger.debug'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: info
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'isEnabledFor'
                        'INFO'
                        '_log'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Log \'msg % args\' with severity \'INFO\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.info("Houston, we have a %s", "interesting problem", exc_info=1)\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: isEnabledFor
                        4       LOAD_GLOBAL                     1: INFO
                        6       CALL_METHOD                     1
                        8       POP_JUMP_IF_FALSE               18 (to 36)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _log
                        14      LOAD_GLOBAL                     1: INFO
                        16      LOAD_FAST                       1: msg
                        18      LOAD_FAST                       2: args
                        20      BUILD_TUPLE                     3
                        22      BUILD_MAP                       0
                        24      LOAD_FAST                       3: kwargs
                        26      DICT_MERGE                      1
                        28      CALL_FUNCTION_EX                1
                        30      POP_TOP                         
                        32      LOAD_CONST                      1: None
                        34      RETURN_VALUE                    
                        36      LOAD_CONST                      1: None
                        38      RETURN_VALUE                    
                'Logger.info'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: warning
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'isEnabledFor'
                        'WARNING'
                        '_log'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Log \'msg % args\' with severity \'WARNING\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.warning("Houston, we have a %s", "bit of a problem", exc_info=1)\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: isEnabledFor
                        4       LOAD_GLOBAL                     1: WARNING
                        6       CALL_METHOD                     1
                        8       POP_JUMP_IF_FALSE               18 (to 36)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _log
                        14      LOAD_GLOBAL                     1: WARNING
                        16      LOAD_FAST                       1: msg
                        18      LOAD_FAST                       2: args
                        20      BUILD_TUPLE                     3
                        22      BUILD_MAP                       0
                        24      LOAD_FAST                       3: kwargs
                        26      DICT_MERGE                      1
                        28      CALL_FUNCTION_EX                1
                        30      POP_TOP                         
                        32      LOAD_CONST                      1: None
                        34      RETURN_VALUE                    
                        36      LOAD_CONST                      1: None
                        38      RETURN_VALUE                    
                'Logger.warning'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: warn
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'warnings'
                        'warn'
                        'DeprecationWarning'
                        'warning'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        "The 'warn' method is deprecated, use 'warning' instead"
                        2
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: warnings
                        2       LOAD_METHOD                     1: warn
                        4       LOAD_CONST                      1: "The 'warn' method is deprecated, use 'warning' instead"
                        6       LOAD_GLOBAL                     2: DeprecationWarning
                        8       LOAD_CONST                      2: 2
                        10      CALL_METHOD                     3
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: warning
                        18      LOAD_FAST                       1: msg
                        20      BUILD_LIST                      1
                        22      LOAD_FAST                       2: args
                        24      LIST_EXTEND                     1
                        26      LIST_TO_TUPLE                   
                        28      BUILD_MAP                       0
                        30      LOAD_FAST                       3: kwargs
                        32      DICT_MERGE                      1
                        34      CALL_FUNCTION_EX                1
                        36      POP_TOP                         
                        38      LOAD_CONST                      0: None
                        40      RETURN_VALUE                    
                'Logger.warn'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: error
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'isEnabledFor'
                        'ERROR'
                        '_log'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Log \'msg % args\' with severity \'ERROR\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.error("Houston, we have a %s", "major problem", exc_info=1)\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: isEnabledFor
                        4       LOAD_GLOBAL                     1: ERROR
                        6       CALL_METHOD                     1
                        8       POP_JUMP_IF_FALSE               18 (to 36)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _log
                        14      LOAD_GLOBAL                     1: ERROR
                        16      LOAD_FAST                       1: msg
                        18      LOAD_FAST                       2: args
                        20      BUILD_TUPLE                     3
                        22      BUILD_MAP                       0
                        24      LOAD_FAST                       3: kwargs
                        26      DICT_MERGE                      1
                        28      CALL_FUNCTION_EX                1
                        30      POP_TOP                         
                        32      LOAD_CONST                      1: None
                        34      RETURN_VALUE                    
                        36      LOAD_CONST                      1: None
                        38      RETURN_VALUE                    
                'Logger.error'
                True
                (
                    'exc_info'
                )
                [Code]
                    File Name: logging/__init__.py
                    Object Name: exception
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'error'
                    [Var Names]
                        'self'
                        'msg'
                        'exc_info'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Convenience method for logging an ERROR with exception information.\n        '
                        'exc_info'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: error
                        4       LOAD_FAST                       1: msg
                        6       BUILD_LIST                      1
                        8       LOAD_FAST                       3: args
                        10      LIST_EXTEND                     1
                        12      LIST_TO_TUPLE                   
                        14      LOAD_CONST                      1: 'exc_info'
                        16      LOAD_FAST                       2: exc_info
                        18      BUILD_MAP                       1
                        20      LOAD_FAST                       4: kwargs
                        22      DICT_MERGE                      1
                        24      CALL_FUNCTION_EX                1
                        26      POP_TOP                         
                        28      LOAD_CONST                      2: None
                        30      RETURN_VALUE                    
                'Logger.exception'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: critical
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'isEnabledFor'
                        'CRITICAL'
                        '_log'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Log \'msg % args\' with severity \'CRITICAL\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.critical("Houston, we have a %s", "major disaster", exc_info=1)\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: isEnabledFor
                        4       LOAD_GLOBAL                     1: CRITICAL
                        6       CALL_METHOD                     1
                        8       POP_JUMP_IF_FALSE               18 (to 36)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _log
                        14      LOAD_GLOBAL                     1: CRITICAL
                        16      LOAD_FAST                       1: msg
                        18      LOAD_FAST                       2: args
                        20      BUILD_TUPLE                     3
                        22      BUILD_MAP                       0
                        24      LOAD_FAST                       3: kwargs
                        26      DICT_MERGE                      1
                        28      CALL_FUNCTION_EX                1
                        30      POP_TOP                         
                        32      LOAD_CONST                      1: None
                        34      RETURN_VALUE                    
                        36      LOAD_CONST                      1: None
                        38      RETURN_VALUE                    
                'Logger.critical'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: fatal
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'critical'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Don't use this method, use critical() instead.\n        "
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: critical
                        4       LOAD_FAST                       1: msg
                        6       BUILD_LIST                      1
                        8       LOAD_FAST                       2: args
                        10      LIST_EXTEND                     1
                        12      LIST_TO_TUPLE                   
                        14      BUILD_MAP                       0
                        16      LOAD_FAST                       3: kwargs
                        18      DICT_MERGE                      1
                        20      CALL_FUNCTION_EX                1
                        22      POP_TOP                         
                        24      LOAD_CONST                      1: None
                        26      RETURN_VALUE                    
                'Logger.fatal'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: log
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'int'
                        'raiseExceptions'
                        'TypeError'
                        'isEnabledFor'
                        '_log'
                    [Var Names]
                        'self'
                        'level'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Log \'msg % args\' with the integer severity \'level\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.log(level, "We have a %s", "mysterious problem", exc_info=1)\n        '
                        'level must be an integer'
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: level
                        4       LOAD_GLOBAL                     1: int
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                13 (to 26)
                        10      LOAD_GLOBAL                     2: raiseExceptions
                        12      POP_JUMP_IF_FALSE               11 (to 22)
                        14      LOAD_GLOBAL                     3: TypeError
                        16      LOAD_CONST                      1: 'level must be an integer'
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                        22      LOAD_CONST                      2: None
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     4: isEnabledFor
                        30      LOAD_FAST                       1: level
                        32      CALL_METHOD                     1
                        34      POP_JUMP_IF_FALSE               31 (to 62)
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       5: _log
                        40      LOAD_FAST                       1: level
                        42      LOAD_FAST                       2: msg
                        44      LOAD_FAST                       3: args
                        46      BUILD_TUPLE                     3
                        48      BUILD_MAP                       0
                        50      LOAD_FAST                       4: kwargs
                        52      DICT_MERGE                      1
                        54      CALL_FUNCTION_EX                1
                        56      POP_TOP                         
                        58      LOAD_CONST                      2: None
                        60      RETURN_VALUE                    
                        62      LOAD_CONST                      2: None
                        64      RETURN_VALUE                    
                'Logger.log'
                False
                1
                [Code]
                    File Name: logging/__init__.py
                    Object Name: findCaller
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 10
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'currentframe'
                        'f_back'
                        'hasattr'
                        'f_code'
                        'os'
                        'path'
                        'normcase'
                        'co_filename'
                        '_srcfile'
                        'io'
                        'StringIO'
                        'write'
                        'traceback'
                        'print_stack'
                        'getvalue'
                        'close'
                        'f_lineno'
                        'co_name'
                    [Var Names]
                        'self'
                        'stack_info'
                        'stacklevel'
                        'f'
                        'orig_f'
                        'rv'
                        'co'
                        'filename'
                        'sinfo'
                        'sio'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Find the stack frame of the caller so that we can note the source\n        file name, line number and function name.\n        '
                        None
                        1
                        (
                            '(unknown file)'
                            0
                            '(unknown function)'
                            None
                        )
                        'f_code'
                        'Stack (most recent call last):\n'
                        (
                            'file'
                        )
                        -1
                        '\n'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: currentframe
                        2       CALL_FUNCTION                   0
                        4       STORE_FAST                      3: f
                        6       LOAD_FAST                       3: f
                        8       LOAD_CONST                      1: None
                        10      IS_OP                           1 (is not)
                        12      POP_JUMP_IF_FALSE               10 (to 20)
                        14      LOAD_FAST                       3: f
                        16      LOAD_ATTR                       1: f_back
                        18      STORE_FAST                      3: f
                        20      LOAD_FAST                       3: f
                        22      STORE_FAST                      4: orig_f
                        24      LOAD_FAST                       3: f
                        26      POP_JUMP_IF_FALSE               31 (to 62)
                        28      LOAD_FAST                       2: stacklevel
                        30      LOAD_CONST                      2: 1
                        32      COMPARE_OP                      4 (>)
                        34      POP_JUMP_IF_FALSE               31 (to 62)
                        36      LOAD_FAST                       3: f
                        38      LOAD_ATTR                       1: f_back
                        40      STORE_FAST                      3: f
                        42      LOAD_FAST                       2: stacklevel
                        44      LOAD_CONST                      2: 1
                        46      INPLACE_SUBTRACT                
                        48      STORE_FAST                      2: stacklevel
                        50      LOAD_FAST                       3: f
                        52      POP_JUMP_IF_FALSE               31 (to 62)
                        54      LOAD_FAST                       2: stacklevel
                        56      LOAD_CONST                      2: 1
                        58      COMPARE_OP                      4 (>)
                        60      POP_JUMP_IF_TRUE                18 (to 36)
                        62      LOAD_FAST                       3: f
                        64      POP_JUMP_IF_TRUE                35 (to 70)
                        66      LOAD_FAST                       4: orig_f
                        68      STORE_FAST                      3: f
                        70      LOAD_CONST                      3: ('(unknown file)', 0, '(unknown function)', None)
                        72      STORE_FAST                      5: rv
                        74      LOAD_GLOBAL                     2: hasattr
                        76      LOAD_FAST                       3: f
                        78      LOAD_CONST                      4: 'f_code'
                        80      CALL_FUNCTION                   2
                        82      POP_JUMP_IF_FALSE               112 (to 224)
                        84      LOAD_FAST                       3: f
                        86      LOAD_ATTR                       3: f_code
                        88      STORE_FAST                      6: co
                        90      LOAD_GLOBAL                     4: os
                        92      LOAD_ATTR                       5: path
                        94      LOAD_METHOD                     6: normcase
                        96      LOAD_FAST                       6: co
                        98      LOAD_ATTR                       7: co_filename
                        100     CALL_METHOD                     1
                        102     STORE_FAST                      7: filename
                        104     LOAD_FAST                       7: filename
                        106     LOAD_GLOBAL                     8: _srcfile
                        108     COMPARE_OP                      2 (==)
                        110     POP_JUMP_IF_FALSE               60 (to 120)
                        112     LOAD_FAST                       3: f
                        114     LOAD_ATTR                       1: f_back
                        116     STORE_FAST                      3: f
                        118     JUMP_ABSOLUTE                   37 (to 74)
                        120     LOAD_CONST                      1: None
                        122     STORE_FAST                      8: sinfo
                        124     LOAD_FAST                       1: stack_info
                        126     POP_JUMP_IF_FALSE               100 (to 200)
                        128     LOAD_GLOBAL                     9: io
                        130     LOAD_METHOD                     10: StringIO
                        132     CALL_METHOD                     0
                        134     STORE_FAST                      9: sio
                        136     LOAD_FAST                       9: sio
                        138     LOAD_METHOD                     11: write
                        140     LOAD_CONST                      5: 'Stack (most recent call last):\n'
                        142     CALL_METHOD                     1
                        144     POP_TOP                         
                        146     LOAD_GLOBAL                     12: traceback
                        148     LOAD_ATTR                       13: print_stack
                        150     LOAD_FAST                       3: f
                        152     LOAD_FAST                       9: sio
                        154     LOAD_CONST                      6: ('file',)
                        156     CALL_FUNCTION_KW                2
                        158     POP_TOP                         
                        160     LOAD_FAST                       9: sio
                        162     LOAD_METHOD                     14: getvalue
                        164     CALL_METHOD                     0
                        166     STORE_FAST                      8: sinfo
                        168     LOAD_FAST                       8: sinfo
                        170     LOAD_CONST                      7: -1
                        172     BINARY_SUBSCR                   
                        174     LOAD_CONST                      8: '\n'
                        176     COMPARE_OP                      2 (==)
                        178     POP_JUMP_IF_FALSE               96 (to 192)
                        180     LOAD_FAST                       8: sinfo
                        182     LOAD_CONST                      1: None
                        184     LOAD_CONST                      7: -1
                        186     BUILD_SLICE                     2
                        188     BINARY_SUBSCR                   
                        190     STORE_FAST                      8: sinfo
                        192     LOAD_FAST                       9: sio
                        194     LOAD_METHOD                     15: close
                        196     CALL_METHOD                     0
                        198     POP_TOP                         
                        200     LOAD_FAST                       6: co
                        202     LOAD_ATTR                       7: co_filename
                        204     LOAD_FAST                       3: f
                        206     LOAD_ATTR                       16: f_lineno
                        208     LOAD_FAST                       6: co
                        210     LOAD_ATTR                       17: co_name
                        212     LOAD_FAST                       8: sinfo
                        214     BUILD_TUPLE                     4
                        216     STORE_FAST                      5: rv
                        218     NOP                             
                        220     LOAD_FAST                       5: rv
                        222     RETURN_VALUE                    
                        224     LOAD_FAST                       5: rv
                        226     RETURN_VALUE                    
                'Logger.findCaller'
                None
                [Code]
                    File Name: logging/__init__.py
                    Object Name: makeRecord
                    Arg Count: 11
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 13
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_logRecordFactory'
                        '__dict__'
                        'KeyError'
                    [Var Names]
                        'self'
                        'name'
                        'level'
                        'fn'
                        'lno'
                        'msg'
                        'args'
                        'exc_info'
                        'func'
                        'extra'
                        'sinfo'
                        'rv'
                        'key'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        A factory method which can be overridden in subclasses to create\n        specialized LogRecords.\n        '
                        None
                        (
                            'message'
                            'asctime'
                        )
                        'Attempt to overwrite %r in LogRecord'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _logRecordFactory
                        2       LOAD_FAST                       1: name
                        4       LOAD_FAST                       2: level
                        6       LOAD_FAST                       3: fn
                        8       LOAD_FAST                       4: lno
                        10      LOAD_FAST                       5: msg
                        12      LOAD_FAST                       6: args
                        14      LOAD_FAST                       7: exc_info
                        16      LOAD_FAST                       8: func
                        18      LOAD_FAST                       10: sinfo
                        20      CALL_FUNCTION                   9
                        22      STORE_FAST                      11: rv
                        24      LOAD_FAST                       9: extra
                        26      LOAD_CONST                      1: None
                        28      IS_OP                           1 (is not)
                        30      POP_JUMP_IF_FALSE               43 (to 86)
                        32      LOAD_FAST                       9: extra
                        34      GET_ITER                        
                        36      FOR_ITER                        24 (to 86)
                        38      STORE_FAST                      12: key
                        40      LOAD_FAST                       12: key
                        42      LOAD_CONST                      2: ('message', 'asctime')
                        44      CONTAINS_OP                     0 (in)
                        46      POP_JUMP_IF_TRUE                29 (to 58)
                        48      LOAD_FAST                       12: key
                        50      LOAD_FAST                       11: rv
                        52      LOAD_ATTR                       1: __dict__
                        54      CONTAINS_OP                     0 (in)
                        56      POP_JUMP_IF_FALSE               35 (to 70)
                        58      LOAD_GLOBAL                     2: KeyError
                        60      LOAD_CONST                      3: 'Attempt to overwrite %r in LogRecord'
                        62      LOAD_FAST                       12: key
                        64      BINARY_MODULO                   
                        66      CALL_FUNCTION                   1
                        68      RAISE_VARARGS                   1
                        70      LOAD_FAST                       9: extra
                        72      LOAD_FAST                       12: key
                        74      BINARY_SUBSCR                   
                        76      LOAD_FAST                       11: rv
                        78      LOAD_ATTR                       1: __dict__
                        80      LOAD_FAST                       12: key
                        82      STORE_SUBSCR                    
                        84      JUMP_ABSOLUTE                   18 (to 36)
                        86      LOAD_FAST                       11: rv
                        88      RETURN_VALUE                    
                'Logger.makeRecord'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: _log
                    Arg Count: 8
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 13
                    Stack Size: 12
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_srcfile'
                        'findCaller'
                        'ValueError'
                        'isinstance'
                        'BaseException'
                        'type'
                        '__traceback__'
                        'tuple'
                        'sys'
                        'exc_info'
                        'makeRecord'
                        'name'
                        'handle'
                    [Var Names]
                        'self'
                        'level'
                        'msg'
                        'args'
                        'exc_info'
                        'extra'
                        'stack_info'
                        'stacklevel'
                        'sinfo'
                        'fn'
                        'lno'
                        'func'
                        'record'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Low-level logging routine which creates a LogRecord and then calls\n        all the handlers of this logger to handle the record.\n        '
                        None
                        (
                            '(unknown file)'
                            0
                            '(unknown function)'
                        )
                    [Disassembly]
                        0       LOAD_CONST                      1: None
                        2       STORE_FAST                      8: sinfo
                        4       LOAD_GLOBAL                     0: _srcfile
                        6       POP_JUMP_IF_FALSE               31 (to 62)
                        8       SETUP_FINALLY                   12 (to 34)
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: findCaller
                        14      LOAD_FAST                       6: stack_info
                        16      LOAD_FAST                       7: stacklevel
                        18      CALL_METHOD                     2
                        20      UNPACK_SEQUENCE                 4
                        22      STORE_FAST                      9: fn
                        24      STORE_FAST                      10: lno
                        26      STORE_FAST                      11: func
                        28      STORE_FAST                      8: sinfo
                        30      POP_BLOCK                       
                        32      JUMP_FORWARD                    19 (to 72)
                        34      DUP_TOP                         
                        36      LOAD_GLOBAL                     2: ValueError
                        38      JUMP_IF_NOT_EXC_MATCH           30 (to 60)
                        40      POP_TOP                         
                        42      POP_TOP                         
                        44      POP_TOP                         
                        46      LOAD_CONST                      2: ('(unknown file)', 0, '(unknown function)')
                        48      UNPACK_SEQUENCE                 3
                        50      STORE_FAST                      9: fn
                        52      STORE_FAST                      10: lno
                        54      STORE_FAST                      11: func
                        56      POP_EXCEPT                      
                        58      JUMP_FORWARD                    6 (to 72)
                        60      RERAISE                         0
                        62      LOAD_CONST                      2: ('(unknown file)', 0, '(unknown function)')
                        64      UNPACK_SEQUENCE                 3
                        66      STORE_FAST                      9: fn
                        68      STORE_FAST                      10: lno
                        70      STORE_FAST                      11: func
                        72      LOAD_FAST                       4: exc_info
                        74      POP_JUMP_IF_FALSE               61 (to 122)
                        76      LOAD_GLOBAL                     3: isinstance
                        78      LOAD_FAST                       4: exc_info
                        80      LOAD_GLOBAL                     4: BaseException
                        82      CALL_FUNCTION                   2
                        84      POP_JUMP_IF_FALSE               52 (to 104)
                        86      LOAD_GLOBAL                     5: type
                        88      LOAD_FAST                       4: exc_info
                        90      CALL_FUNCTION                   1
                        92      LOAD_FAST                       4: exc_info
                        94      LOAD_FAST                       4: exc_info
                        96      LOAD_ATTR                       6: __traceback__
                        98      BUILD_TUPLE                     3
                        100     STORE_FAST                      4: exc_info
                        102     JUMP_FORWARD                    9 (to 122)
                        104     LOAD_GLOBAL                     3: isinstance
                        106     LOAD_FAST                       4: exc_info
                        108     LOAD_GLOBAL                     7: tuple
                        110     CALL_FUNCTION                   2
                        112     POP_JUMP_IF_TRUE                61 (to 122)
                        114     LOAD_GLOBAL                     8: sys
                        116     LOAD_METHOD                     9: exc_info
                        118     CALL_METHOD                     0
                        120     STORE_FAST                      4: exc_info
                        122     LOAD_FAST                       0: self
                        124     LOAD_METHOD                     10: makeRecord
                        126     LOAD_FAST                       0: self
                        128     LOAD_ATTR                       11: name
                        130     LOAD_FAST                       1: level
                        132     LOAD_FAST                       9: fn
                        134     LOAD_FAST                       10: lno
                        136     LOAD_FAST                       2: msg
                        138     LOAD_FAST                       3: args
                        140     LOAD_FAST                       4: exc_info
                        142     LOAD_FAST                       11: func
                        144     LOAD_FAST                       5: extra
                        146     LOAD_FAST                       8: sinfo
                        148     CALL_METHOD                     10
                        150     STORE_FAST                      12: record
                        152     LOAD_FAST                       0: self
                        154     LOAD_METHOD                     12: handle
                        156     LOAD_FAST                       12: record
                        158     CALL_METHOD                     1
                        160     POP_TOP                         
                        162     LOAD_CONST                      1: None
                        164     RETURN_VALUE                    
                'Logger._log'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: handle
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'disabled'
                        'filter'
                        'callHandlers'
                    [Var Names]
                        'self'
                        'record'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Call the handlers for the specified record.\n\n        This method is used for unpickled records received from a socket, as\n        well as those created locally. Logger-level filtering is applied.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: disabled
                        4       POP_JUMP_IF_TRUE                15 (to 30)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: filter
                        10      LOAD_FAST                       1: record
                        12      CALL_METHOD                     1
                        14      POP_JUMP_IF_FALSE               17 (to 34)
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     2: callHandlers
                        20      LOAD_FAST                       1: record
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_CONST                      1: None
                        28      RETURN_VALUE                    
                        30      LOAD_CONST                      1: None
                        32      RETURN_VALUE                    
                        34      LOAD_CONST                      1: None
                        36      RETURN_VALUE                    
                'Logger.handle'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: addHandler
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_acquireLock'
                        'handlers'
                        'append'
                        '_releaseLock'
                    [Var Names]
                        'self'
                        'hdlr'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Add the specified handler to this logger.\n        '
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _acquireLock
                        2       CALL_FUNCTION                   0
                        4       POP_TOP                         
                        6       SETUP_FINALLY                   23 (to 54)
                        8       LOAD_FAST                       1: hdlr
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: handlers
                        14      CONTAINS_OP                     1 (not in)
                        16      POP_JUMP_IF_FALSE               21 (to 42)
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       1: handlers
                        22      LOAD_METHOD                     2: append
                        24      LOAD_FAST                       1: hdlr
                        26      CALL_METHOD                     1
                        28      POP_TOP                         
                        30      POP_BLOCK                       
                        32      LOAD_GLOBAL                     3: _releaseLock
                        34      CALL_FUNCTION                   0
                        36      POP_TOP                         
                        38      LOAD_CONST                      1: None
                        40      RETURN_VALUE                    
                        42      POP_BLOCK                       
                        44      LOAD_GLOBAL                     3: _releaseLock
                        46      CALL_FUNCTION                   0
                        48      POP_TOP                         
                        50      LOAD_CONST                      1: None
                        52      RETURN_VALUE                    
                        54      LOAD_GLOBAL                     3: _releaseLock
                        56      CALL_FUNCTION                   0
                        58      POP_TOP                         
                        60      RERAISE                         0
                'Logger.addHandler'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: removeHandler
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_acquireLock'
                        'handlers'
                        'remove'
                        '_releaseLock'
                    [Var Names]
                        'self'
                        'hdlr'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Remove the specified handler from this logger.\n        '
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _acquireLock
                        2       CALL_FUNCTION                   0
                        4       POP_TOP                         
                        6       SETUP_FINALLY                   23 (to 54)
                        8       LOAD_FAST                       1: hdlr
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: handlers
                        14      CONTAINS_OP                     0 (in)
                        16      POP_JUMP_IF_FALSE               21 (to 42)
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       1: handlers
                        22      LOAD_METHOD                     2: remove
                        24      LOAD_FAST                       1: hdlr
                        26      CALL_METHOD                     1
                        28      POP_TOP                         
                        30      POP_BLOCK                       
                        32      LOAD_GLOBAL                     3: _releaseLock
                        34      CALL_FUNCTION                   0
                        36      POP_TOP                         
                        38      LOAD_CONST                      1: None
                        40      RETURN_VALUE                    
                        42      POP_BLOCK                       
                        44      LOAD_GLOBAL                     3: _releaseLock
                        46      CALL_FUNCTION                   0
                        48      POP_TOP                         
                        50      LOAD_CONST                      1: None
                        52      RETURN_VALUE                    
                        54      LOAD_GLOBAL                     3: _releaseLock
                        56      CALL_FUNCTION                   0
                        58      POP_TOP                         
                        60      RERAISE                         0
                'Logger.removeHandler'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: hasHandlers
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'handlers'
                        'propagate'
                        'parent'
                    [Var Names]
                        'self'
                        'c'
                        'rv'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        See if this logger has any handlers configured.\n\n        Loop through all handlers for this logger and its parents in the\n        logger hierarchy. Return True if a handler was found, else False.\n        Stop searching up the hierarchy whenever a logger with the "propagate"\n        attribute set to zero is found - that will be the last logger which\n        is checked for the existence of handlers.\n        '
                        False
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       STORE_FAST                      1: c
                        4       LOAD_CONST                      1: False
                        6       STORE_FAST                      2: rv
                        8       LOAD_FAST                       1: c
                        10      POP_JUMP_IF_FALSE               25 (to 50)
                        12      LOAD_FAST                       1: c
                        14      LOAD_ATTR                       0: handlers
                        16      POP_JUMP_IF_FALSE               14 (to 28)
                        18      LOAD_CONST                      2: True
                        20      STORE_FAST                      2: rv
                        22      NOP                             
                        24      LOAD_FAST                       2: rv
                        26      RETURN_VALUE                    
                        28      LOAD_FAST                       1: c
                        30      LOAD_ATTR                       1: propagate
                        32      POP_JUMP_IF_TRUE                20 (to 40)
                        34      NOP                             
                        36      LOAD_FAST                       2: rv
                        38      RETURN_VALUE                    
                        40      LOAD_FAST                       1: c
                        42      LOAD_ATTR                       2: parent
                        44      STORE_FAST                      1: c
                        46      LOAD_FAST                       1: c
                        48      POP_JUMP_IF_TRUE                6 (to 12)
                        50      LOAD_FAST                       2: rv
                        52      RETURN_VALUE                    
                'Logger.hasHandlers'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: callHandlers
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'handlers'
                        'levelno'
                        'level'
                        'handle'
                        'propagate'
                        'parent'
                        'lastResort'
                        'raiseExceptions'
                        'manager'
                        'emittedNoHandlerWarning'
                        'sys'
                        'stderr'
                        'write'
                        'name'
                    [Var Names]
                        'self'
                        'record'
                        'c'
                        'found'
                        'hdlr'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Pass a record to all relevant handlers.\n\n        Loop through all handlers for this logger and its parents in the\n        logger hierarchy. If no handler was found, output a one-off error\n        message to sys.stderr. Stop searching up the hierarchy whenever a\n        logger with the "propagate" attribute set to zero is found - that\n        will be the last logger whose handlers are called.\n        '
                        0
                        1
                        None
                        'No handlers could be found for logger "%s"\n'
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       STORE_FAST                      2: c
                        4       LOAD_CONST                      1: 0
                        6       STORE_FAST                      3: found
                        8       LOAD_FAST                       2: c
                        10      POP_JUMP_IF_FALSE               38 (to 76)
                        12      LOAD_FAST                       2: c
                        14      LOAD_ATTR                       0: handlers
                        16      GET_ITER                        
                        18      FOR_ITER                        17 (to 54)
                        20      STORE_FAST                      4: hdlr
                        22      LOAD_FAST                       3: found
                        24      LOAD_CONST                      2: 1
                        26      BINARY_ADD                      
                        28      STORE_FAST                      3: found
                        30      LOAD_FAST                       1: record
                        32      LOAD_ATTR                       1: levelno
                        34      LOAD_FAST                       4: hdlr
                        36      LOAD_ATTR                       2: level
                        38      COMPARE_OP                      5 (>=)
                        40      POP_JUMP_IF_FALSE               26 (to 52)
                        42      LOAD_FAST                       4: hdlr
                        44      LOAD_METHOD                     3: handle
                        46      LOAD_FAST                       1: record
                        48      CALL_METHOD                     1
                        50      POP_TOP                         
                        52      JUMP_ABSOLUTE                   9 (to 18)
                        54      LOAD_FAST                       2: c
                        56      LOAD_ATTR                       4: propagate
                        58      POP_JUMP_IF_TRUE                33 (to 66)
                        60      LOAD_CONST                      3: None
                        62      STORE_FAST                      2: c
                        64      JUMP_FORWARD                    3 (to 72)
                        66      LOAD_FAST                       2: c
                        68      LOAD_ATTR                       5: parent
                        70      STORE_FAST                      2: c
                        72      LOAD_FAST                       2: c
                        74      POP_JUMP_IF_TRUE                6 (to 12)
                        76      LOAD_FAST                       3: found
                        78      LOAD_CONST                      1: 0
                        80      COMPARE_OP                      2 (==)
                        82      POP_JUMP_IF_FALSE               80 (to 160)
                        84      LOAD_GLOBAL                     6: lastResort
                        86      POP_JUMP_IF_FALSE               59 (to 118)
                        88      LOAD_FAST                       1: record
                        90      LOAD_ATTR                       1: levelno
                        92      LOAD_GLOBAL                     6: lastResort
                        94      LOAD_ATTR                       2: level
                        96      COMPARE_OP                      5 (>=)
                        98      POP_JUMP_IF_FALSE               57 (to 114)
                        100     LOAD_GLOBAL                     6: lastResort
                        102     LOAD_METHOD                     3: handle
                        104     LOAD_FAST                       1: record
                        106     CALL_METHOD                     1
                        108     POP_TOP                         
                        110     LOAD_CONST                      3: None
                        112     RETURN_VALUE                    
                        114     LOAD_CONST                      3: None
                        116     RETURN_VALUE                    
                        118     LOAD_GLOBAL                     7: raiseExceptions
                        120     POP_JUMP_IF_FALSE               82 (to 164)
                        122     LOAD_FAST                       0: self
                        124     LOAD_ATTR                       8: manager
                        126     LOAD_ATTR                       9: emittedNoHandlerWarning
                        128     POP_JUMP_IF_TRUE                84 (to 168)
                        130     LOAD_GLOBAL                     10: sys
                        132     LOAD_ATTR                       11: stderr
                        134     LOAD_METHOD                     12: write
                        136     LOAD_CONST                      4: 'No handlers could be found for logger "%s"\n'
                        138     LOAD_FAST                       0: self
                        140     LOAD_ATTR                       13: name
                        142     BINARY_MODULO                   
                        144     CALL_METHOD                     1
                        146     POP_TOP                         
                        148     LOAD_CONST                      5: True
                        150     LOAD_FAST                       0: self
                        152     LOAD_ATTR                       8: manager
                        154     STORE_ATTR                      9: emittedNoHandlerWarning
                        156     LOAD_CONST                      3: None
                        158     RETURN_VALUE                    
                        160     LOAD_CONST                      3: None
                        162     RETURN_VALUE                    
                        164     LOAD_CONST                      3: None
                        166     RETURN_VALUE                    
                        168     LOAD_CONST                      3: None
                        170     RETURN_VALUE                    
                'Logger.callHandlers'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: getEffectiveLevel
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'level'
                        'parent'
                        'NOTSET'
                    [Var Names]
                        'self'
                        'logger'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Get the effective level for this logger.\n\n        Loop through this logger and its parents in the logger hierarchy,\n        looking for a non-zero logging level. Return the first one found.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       STORE_FAST                      1: logger
                        4       LOAD_FAST                       1: logger
                        6       POP_JUMP_IF_FALSE               15 (to 30)
                        8       LOAD_FAST                       1: logger
                        10      LOAD_ATTR                       0: level
                        12      POP_JUMP_IF_FALSE               10 (to 20)
                        14      LOAD_FAST                       1: logger
                        16      LOAD_ATTR                       0: level
                        18      RETURN_VALUE                    
                        20      LOAD_FAST                       1: logger
                        22      LOAD_ATTR                       1: parent
                        24      STORE_FAST                      1: logger
                        26      LOAD_FAST                       1: logger
                        28      POP_JUMP_IF_TRUE                4 (to 8)
                        30      LOAD_GLOBAL                     2: NOTSET
                        32      RETURN_VALUE                    
                'Logger.getEffectiveLevel'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: isEnabledFor
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'disabled'
                        '_cache'
                        'KeyError'
                        '_acquireLock'
                        'manager'
                        'disable'
                        'getEffectiveLevel'
                        '_releaseLock'
                    [Var Names]
                        'self'
                        'level'
                        'is_enabled'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Is this logger enabled for level 'level'?\n        "
                        False
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: disabled
                        4       POP_JUMP_IF_FALSE               5 (to 10)
                        6       LOAD_CONST                      1: False
                        8       RETURN_VALUE                    
                        10      SETUP_FINALLY                   6 (to 24)
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: _cache
                        16      LOAD_FAST                       1: level
                        18      BINARY_SUBSCR                   
                        20      POP_BLOCK                       
                        22      RETURN_VALUE                    
                        24      DUP_TOP                         
                        26      LOAD_GLOBAL                     2: KeyError
                        28      JUMP_IF_NOT_EXC_MATCH           67 (to 134)
                        30      POP_TOP                         
                        32      POP_TOP                         
                        34      POP_TOP                         
                        36      LOAD_GLOBAL                     3: _acquireLock
                        38      CALL_FUNCTION                   0
                        40      POP_TOP                         
                        42      SETUP_FINALLY                   41 (to 126)
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       4: manager
                        48      LOAD_ATTR                       5: disable
                        50      LOAD_FAST                       1: level
                        52      COMPARE_OP                      5 (>=)
                        54      POP_JUMP_IF_FALSE               36 (to 72)
                        56      LOAD_CONST                      1: False
                        58      DUP_TOP                         
                        60      STORE_FAST                      2: is_enabled
                        62      LOAD_FAST                       0: self
                        64      LOAD_ATTR                       1: _cache
                        66      LOAD_FAST                       1: level
                        68      STORE_SUBSCR                    
                        70      JUMP_FORWARD                    19 (to 110)
                        72      LOAD_FAST                       1: level
                        74      LOAD_FAST                       0: self
                        76      LOAD_METHOD                     6: getEffectiveLevel
                        78      CALL_METHOD                     0
                        80      COMPARE_OP                      5 (>=)
                        82      DUP_TOP                         
                        84      STORE_FAST                      2: is_enabled
                        86      LOAD_FAST                       0: self
                        88      LOAD_ATTR                       1: _cache
                        90      LOAD_FAST                       1: level
                        92      STORE_SUBSCR                    
                        94      POP_BLOCK                       
                        96      LOAD_GLOBAL                     7: _releaseLock
                        98      CALL_FUNCTION                   0
                        100     POP_TOP                         
                        102     LOAD_FAST                       2: is_enabled
                        104     ROT_FOUR                        
                        106     POP_EXCEPT                      
                        108     RETURN_VALUE                    
                        110     POP_BLOCK                       
                        112     LOAD_GLOBAL                     7: _releaseLock
                        114     CALL_FUNCTION                   0
                        116     POP_TOP                         
                        118     LOAD_FAST                       2: is_enabled
                        120     ROT_FOUR                        
                        122     POP_EXCEPT                      
                        124     RETURN_VALUE                    
                        126     LOAD_GLOBAL                     7: _releaseLock
                        128     CALL_FUNCTION                   0
                        130     POP_TOP                         
                        132     RERAISE                         0
                        134     RERAISE                         0
                'Logger.isEnabledFor'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: getChild
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'root'
                        'join'
                        'name'
                        'manager'
                        'getLogger'
                    [Var Names]
                        'self'
                        'suffix'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Get a logger which is a descendant to this one.\n\n        This is a convenience method, such that\n\n        logging.getLogger('abc').getChild('def.ghi')\n\n        is the same as\n\n        logging.getLogger('abc.def.ghi')\n\n        It's useful, for example, when the parent logger is named using\n        __name__ rather than a literal string.\n        "
                        '.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: root
                        4       LOAD_FAST                       0: self
                        6       IS_OP                           1 (is not)
                        8       POP_JUMP_IF_FALSE               13 (to 26)
                        10      LOAD_CONST                      1: '.'
                        12      LOAD_METHOD                     1: join
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: name
                        18      LOAD_FAST                       1: suffix
                        20      BUILD_TUPLE                     2
                        22      CALL_METHOD                     1
                        24      STORE_FAST                      1: suffix
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       3: manager
                        30      LOAD_METHOD                     4: getLogger
                        32      LOAD_FAST                       1: suffix
                        34      CALL_METHOD                     1
                        36      RETURN_VALUE                    
                'Logger.getChild'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getLevelName'
                        'getEffectiveLevel'
                        '__class__'
                        '__name__'
                        'name'
                    [Var Names]
                        'self'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<%s %s (%s)>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getLevelName
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     1: getEffectiveLevel
                        6       CALL_METHOD                     0
                        8       CALL_FUNCTION                   1
                        10      STORE_FAST                      1: level
                        12      LOAD_CONST                      1: '<%s %s (%s)>'
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: __class__
                        18      LOAD_ATTR                       3: __name__
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       4: name
                        24      LOAD_FAST                       1: level
                        26      BUILD_TUPLE                     3
                        28      BINARY_MODULO                   
                        30      RETURN_VALUE                    
                'Logger.__repr__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getLogger'
                        'name'
                        'pickle'
                        'PicklingError'
                    [Var Names]
                        'self'
                        'pickle'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'logger cannot be pickled'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getLogger
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: name
                        6       CALL_FUNCTION                   1
                        8       LOAD_FAST                       0: self
                        10      IS_OP                           1 (is not)
                        12      POP_JUMP_IF_FALSE               16 (to 32)
                        14      LOAD_CONST                      1: 0
                        16      LOAD_CONST                      0: None
                        18      IMPORT_NAME                     2: pickle
                        20      STORE_FAST                      1: pickle
                        22      LOAD_FAST                       1: pickle
                        24      LOAD_METHOD                     3: PicklingError
                        26      LOAD_CONST                      2: 'logger cannot be pickled'
                        28      CALL_METHOD                     1
                        30      RAISE_VARARGS                   1
                        32      LOAD_GLOBAL                     0: getLogger
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       1: name
                        38      BUILD_TUPLE                     1
                        40      BUILD_TUPLE                     2
                        42      RETURN_VALUE                    
                'Logger.__reduce__'
                (
                    False
                    1
                )
                (
                    None
                    None
                    None
                )
                (
                    None
                    None
                    False
                    1
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Logger'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    Instances of the Logger class represent a single logging channel. A\n    "logging channel" indicates an area of an application. Exactly how an\n    "area" is defined is up to the application developer. Since an\n    application can have any number of areas, logging channels are identified\n    by a unique string. Application areas can be nested (e.g. an area\n    of "input processing" might include sub-areas "read CSV files", "read\n    XLS files" and "read Gnumeric files"). To cater for this natural nesting,\n    channel names are organized into a namespace hierarchy where levels are\n    separated by periods, much like the Java or Python package namespace. So\n    in the instance given above, channel names might be "input" for the upper\n    level, and "input.csv", "input.xls" and "input.gnu" for the sub-levels.\n    There is no arbitrary limit to the depth of nesting.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: NOTSET
                14      BUILD_TUPLE                     1
                16      LOAD_CONST                      2: <CODE> __init__
                18      LOAD_CONST                      3: 'Logger.__init__'
                20      MAKE_FUNCTION                   1
                22      STORE_NAME                      5: __init__
                24      LOAD_CONST                      4: <CODE> setLevel
                26      LOAD_CONST                      5: 'Logger.setLevel'
                28      MAKE_FUNCTION                   0
                30      STORE_NAME                      6: setLevel
                32      LOAD_CONST                      6: <CODE> debug
                34      LOAD_CONST                      7: 'Logger.debug'
                36      MAKE_FUNCTION                   0
                38      STORE_NAME                      7: debug
                40      LOAD_CONST                      8: <CODE> info
                42      LOAD_CONST                      9: 'Logger.info'
                44      MAKE_FUNCTION                   0
                46      STORE_NAME                      8: info
                48      LOAD_CONST                      10: <CODE> warning
                50      LOAD_CONST                      11: 'Logger.warning'
                52      MAKE_FUNCTION                   0
                54      STORE_NAME                      9: warning
                56      LOAD_CONST                      12: <CODE> warn
                58      LOAD_CONST                      13: 'Logger.warn'
                60      MAKE_FUNCTION                   0
                62      STORE_NAME                      10: warn
                64      LOAD_CONST                      14: <CODE> error
                66      LOAD_CONST                      15: 'Logger.error'
                68      MAKE_FUNCTION                   0
                70      STORE_NAME                      11: error
                72      LOAD_CONST                      16: True
                74      LOAD_CONST                      17: ('exc_info',)
                76      BUILD_CONST_KEY_MAP             1
                78      LOAD_CONST                      18: <CODE> exception
                80      LOAD_CONST                      19: 'Logger.exception'
                82      MAKE_FUNCTION                   2
                84      STORE_NAME                      12: exception
                86      LOAD_CONST                      20: <CODE> critical
                88      LOAD_CONST                      21: 'Logger.critical'
                90      MAKE_FUNCTION                   0
                92      STORE_NAME                      13: critical
                94      LOAD_CONST                      22: <CODE> fatal
                96      LOAD_CONST                      23: 'Logger.fatal'
                98      MAKE_FUNCTION                   0
                100     STORE_NAME                      14: fatal
                102     LOAD_CONST                      24: <CODE> log
                104     LOAD_CONST                      25: 'Logger.log'
                106     MAKE_FUNCTION                   0
                108     STORE_NAME                      15: log
                110     LOAD_CONST                      55: (False, 1)
                112     LOAD_CONST                      28: <CODE> findCaller
                114     LOAD_CONST                      29: 'Logger.findCaller'
                116     MAKE_FUNCTION                   1
                118     STORE_NAME                      16: findCaller
                120     NOP                             
                122     LOAD_CONST                      56: (None, None, None)
                124     LOAD_CONST                      31: <CODE> makeRecord
                126     LOAD_CONST                      32: 'Logger.makeRecord'
                128     MAKE_FUNCTION                   1
                130     STORE_NAME                      17: makeRecord
                132     NOP                             
                134     NOP                             
                136     LOAD_CONST                      57: (None, None, False, 1)
                138     LOAD_CONST                      33: <CODE> _log
                140     LOAD_CONST                      34: 'Logger._log'
                142     MAKE_FUNCTION                   1
                144     STORE_NAME                      18: _log
                146     LOAD_CONST                      35: <CODE> handle
                148     LOAD_CONST                      36: 'Logger.handle'
                150     MAKE_FUNCTION                   0
                152     STORE_NAME                      19: handle
                154     LOAD_CONST                      37: <CODE> addHandler
                156     LOAD_CONST                      38: 'Logger.addHandler'
                158     MAKE_FUNCTION                   0
                160     STORE_NAME                      20: addHandler
                162     LOAD_CONST                      39: <CODE> removeHandler
                164     LOAD_CONST                      40: 'Logger.removeHandler'
                166     MAKE_FUNCTION                   0
                168     STORE_NAME                      21: removeHandler
                170     LOAD_CONST                      41: <CODE> hasHandlers
                172     LOAD_CONST                      42: 'Logger.hasHandlers'
                174     MAKE_FUNCTION                   0
                176     STORE_NAME                      22: hasHandlers
                178     LOAD_CONST                      43: <CODE> callHandlers
                180     LOAD_CONST                      44: 'Logger.callHandlers'
                182     MAKE_FUNCTION                   0
                184     STORE_NAME                      23: callHandlers
                186     LOAD_CONST                      45: <CODE> getEffectiveLevel
                188     LOAD_CONST                      46: 'Logger.getEffectiveLevel'
                190     MAKE_FUNCTION                   0
                192     STORE_NAME                      24: getEffectiveLevel
                194     LOAD_CONST                      47: <CODE> isEnabledFor
                196     LOAD_CONST                      48: 'Logger.isEnabledFor'
                198     MAKE_FUNCTION                   0
                200     STORE_NAME                      25: isEnabledFor
                202     LOAD_CONST                      49: <CODE> getChild
                204     LOAD_CONST                      50: 'Logger.getChild'
                206     MAKE_FUNCTION                   0
                208     STORE_NAME                      26: getChild
                210     LOAD_CONST                      51: <CODE> __repr__
                212     LOAD_CONST                      52: 'Logger.__repr__'
                214     MAKE_FUNCTION                   0
                216     STORE_NAME                      27: __repr__
                218     LOAD_CONST                      53: <CODE> __reduce__
                220     LOAD_CONST                      54: 'Logger.__reduce__'
                222     MAKE_FUNCTION                   0
                224     STORE_NAME                      28: __reduce__
                226     LOAD_CONST                      30: None
                228     RETURN_VALUE                    
        'Logger'
        [Code]
            File Name: logging/__init__.py
            Object Name: RootLogger
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__reduce__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'RootLogger'
                '\n    A root logger is not that different to any other logger, except that\n    it must have a logging level and there is only one instance of it in\n    the hierarchy.\n    '
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Logger'
                        '__init__'
                    [Var Names]
                        'self'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Initialize the logger with the name "root".\n        '
                        'root'
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Logger
                        2       LOAD_METHOD                     1: __init__
                        4       LOAD_FAST                       0: self
                        6       LOAD_CONST                      1: 'root'
                        8       LOAD_FAST                       1: level
                        10      CALL_METHOD                     3
                        12      POP_TOP                         
                        14      LOAD_CONST                      2: None
                        16      RETURN_VALUE                    
                'RootLogger.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getLogger'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getLogger
                        2       LOAD_CONST                      1: ()
                        4       BUILD_TUPLE                     2
                        6       RETURN_VALUE                    
                'RootLogger.__reduce__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'RootLogger'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    A root logger is not that different to any other logger, except that\n    it must have a logging level and there is only one instance of it in\n    the hierarchy.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'RootLogger.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __reduce__
                22      LOAD_CONST                      5: 'RootLogger.__reduce__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __reduce__
                28      LOAD_CONST                      6: None
                30      RETURN_VALUE                    
        'RootLogger'
        [Code]
            File Name: logging/__init__.py
            Object Name: LoggerAdapter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'process'
                'debug'
                'info'
                'warning'
                'warn'
                'error'
                'exception'
                'critical'
                'log'
                'isEnabledFor'
                'setLevel'
                'getEffectiveLevel'
                'hasHandlers'
                '_log'
                'property'
                'manager'
                'setter'
                'name'
                '__repr__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'LoggerAdapter'
                '\n    An adapter for loggers which makes it easier to specify contextual\n    information in logging output.\n    '
                None
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'logger'
                        'extra'
                    [Var Names]
                        'self'
                        'logger'
                        'extra'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Initialize the adapter with a logger and a dict-like object which\n        provides contextual information. This constructor signature allows\n        easy stacking of LoggerAdapters, if so desired.\n\n        You can effectively pass keyword arguments as shown in the\n        following example:\n\n        adapter = LoggerAdapter(someLogger, dict(p1=v1, p2="v2"))\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: logger
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: logger
                        6       LOAD_FAST                       2: extra
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: extra
                        12      LOAD_CONST                      1: None
                        14      RETURN_VALUE                    
                'LoggerAdapter.__init__'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: process
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'extra'
                    [Var Names]
                        'self'
                        'msg'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Process the logging message and keyword arguments passed in to\n        a logging call to insert contextual information. You can either\n        manipulate the message itself, the keyword args or both. Return\n        the message and kwargs modified (or not) to suit your needs.\n\n        Normally, you'll only need to override this one method in a\n        LoggerAdapter subclass for your specific needs.\n        "
                        'extra'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: extra
                        4       LOAD_FAST                       2: kwargs
                        6       LOAD_CONST                      1: 'extra'
                        8       STORE_SUBSCR                    
                        10      LOAD_FAST                       1: msg
                        12      LOAD_FAST                       2: kwargs
                        14      BUILD_TUPLE                     2
                        16      RETURN_VALUE                    
                'LoggerAdapter.process'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: debug
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'log'
                        'DEBUG'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Delegate a debug call to the underlying logger.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: log
                        4       LOAD_GLOBAL                     1: DEBUG
                        6       LOAD_FAST                       1: msg
                        8       BUILD_LIST                      2
                        10      LOAD_FAST                       2: args
                        12      LIST_EXTEND                     1
                        14      LIST_TO_TUPLE                   
                        16      BUILD_MAP                       0
                        18      LOAD_FAST                       3: kwargs
                        20      DICT_MERGE                      1
                        22      CALL_FUNCTION_EX                1
                        24      POP_TOP                         
                        26      LOAD_CONST                      1: None
                        28      RETURN_VALUE                    
                'LoggerAdapter.debug'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: info
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'log'
                        'INFO'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Delegate an info call to the underlying logger.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: log
                        4       LOAD_GLOBAL                     1: INFO
                        6       LOAD_FAST                       1: msg
                        8       BUILD_LIST                      2
                        10      LOAD_FAST                       2: args
                        12      LIST_EXTEND                     1
                        14      LIST_TO_TUPLE                   
                        16      BUILD_MAP                       0
                        18      LOAD_FAST                       3: kwargs
                        20      DICT_MERGE                      1
                        22      CALL_FUNCTION_EX                1
                        24      POP_TOP                         
                        26      LOAD_CONST                      1: None
                        28      RETURN_VALUE                    
                'LoggerAdapter.info'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: warning
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'log'
                        'WARNING'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Delegate a warning call to the underlying logger.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: log
                        4       LOAD_GLOBAL                     1: WARNING
                        6       LOAD_FAST                       1: msg
                        8       BUILD_LIST                      2
                        10      LOAD_FAST                       2: args
                        12      LIST_EXTEND                     1
                        14      LIST_TO_TUPLE                   
                        16      BUILD_MAP                       0
                        18      LOAD_FAST                       3: kwargs
                        20      DICT_MERGE                      1
                        22      CALL_FUNCTION_EX                1
                        24      POP_TOP                         
                        26      LOAD_CONST                      1: None
                        28      RETURN_VALUE                    
                'LoggerAdapter.warning'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: warn
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'warnings'
                        'warn'
                        'DeprecationWarning'
                        'warning'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        "The 'warn' method is deprecated, use 'warning' instead"
                        2
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: warnings
                        2       LOAD_METHOD                     1: warn
                        4       LOAD_CONST                      1: "The 'warn' method is deprecated, use 'warning' instead"
                        6       LOAD_GLOBAL                     2: DeprecationWarning
                        8       LOAD_CONST                      2: 2
                        10      CALL_METHOD                     3
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: warning
                        18      LOAD_FAST                       1: msg
                        20      BUILD_LIST                      1
                        22      LOAD_FAST                       2: args
                        24      LIST_EXTEND                     1
                        26      LIST_TO_TUPLE                   
                        28      BUILD_MAP                       0
                        30      LOAD_FAST                       3: kwargs
                        32      DICT_MERGE                      1
                        34      CALL_FUNCTION_EX                1
                        36      POP_TOP                         
                        38      LOAD_CONST                      0: None
                        40      RETURN_VALUE                    
                'LoggerAdapter.warn'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: error
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'log'
                        'ERROR'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Delegate an error call to the underlying logger.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: log
                        4       LOAD_GLOBAL                     1: ERROR
                        6       LOAD_FAST                       1: msg
                        8       BUILD_LIST                      2
                        10      LOAD_FAST                       2: args
                        12      LIST_EXTEND                     1
                        14      LIST_TO_TUPLE                   
                        16      BUILD_MAP                       0
                        18      LOAD_FAST                       3: kwargs
                        20      DICT_MERGE                      1
                        22      CALL_FUNCTION_EX                1
                        24      POP_TOP                         
                        26      LOAD_CONST                      1: None
                        28      RETURN_VALUE                    
                'LoggerAdapter.error'
                True
                (
                    'exc_info'
                )
                [Code]
                    File Name: logging/__init__.py
                    Object Name: exception
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'log'
                        'ERROR'
                    [Var Names]
                        'self'
                        'msg'
                        'exc_info'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Delegate an exception call to the underlying logger.\n        '
                        'exc_info'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: log
                        4       LOAD_GLOBAL                     1: ERROR
                        6       LOAD_FAST                       1: msg
                        8       BUILD_LIST                      2
                        10      LOAD_FAST                       3: args
                        12      LIST_EXTEND                     1
                        14      LIST_TO_TUPLE                   
                        16      LOAD_CONST                      1: 'exc_info'
                        18      LOAD_FAST                       2: exc_info
                        20      BUILD_MAP                       1
                        22      LOAD_FAST                       4: kwargs
                        24      DICT_MERGE                      1
                        26      CALL_FUNCTION_EX                1
                        28      POP_TOP                         
                        30      LOAD_CONST                      2: None
                        32      RETURN_VALUE                    
                'LoggerAdapter.exception'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: critical
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'log'
                        'CRITICAL'
                    [Var Names]
                        'self'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Delegate a critical call to the underlying logger.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: log
                        4       LOAD_GLOBAL                     1: CRITICAL
                        6       LOAD_FAST                       1: msg
                        8       BUILD_LIST                      2
                        10      LOAD_FAST                       2: args
                        12      LIST_EXTEND                     1
                        14      LIST_TO_TUPLE                   
                        16      BUILD_MAP                       0
                        18      LOAD_FAST                       3: kwargs
                        20      DICT_MERGE                      1
                        22      CALL_FUNCTION_EX                1
                        24      POP_TOP                         
                        26      LOAD_CONST                      1: None
                        28      RETURN_VALUE                    
                'LoggerAdapter.critical'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: log
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'isEnabledFor'
                        'process'
                        'logger'
                        'log'
                    [Var Names]
                        'self'
                        'level'
                        'msg'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Delegate a log call to the underlying logger, after adding\n        contextual information from this adapter instance.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: isEnabledFor
                        4       LOAD_FAST                       1: level
                        6       CALL_METHOD                     1
                        8       POP_JUMP_IF_FALSE               29 (to 58)
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: process
                        14      LOAD_FAST                       2: msg
                        16      LOAD_FAST                       4: kwargs
                        18      CALL_METHOD                     2
                        20      UNPACK_SEQUENCE                 2
                        22      STORE_FAST                      2: msg
                        24      STORE_FAST                      4: kwargs
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       2: logger
                        30      LOAD_ATTR                       3: log
                        32      LOAD_FAST                       1: level
                        34      LOAD_FAST                       2: msg
                        36      BUILD_LIST                      2
                        38      LOAD_FAST                       3: args
                        40      LIST_EXTEND                     1
                        42      LIST_TO_TUPLE                   
                        44      BUILD_MAP                       0
                        46      LOAD_FAST                       4: kwargs
                        48      DICT_MERGE                      1
                        50      CALL_FUNCTION_EX                1
                        52      POP_TOP                         
                        54      LOAD_CONST                      1: None
                        56      RETURN_VALUE                    
                        58      LOAD_CONST                      1: None
                        60      RETURN_VALUE                    
                'LoggerAdapter.log'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: isEnabledFor
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'logger'
                        'isEnabledFor'
                    [Var Names]
                        'self'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Is this logger enabled for level 'level'?\n        "
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: logger
                        4       LOAD_METHOD                     1: isEnabledFor
                        6       LOAD_FAST                       1: level
                        8       CALL_METHOD                     1
                        10      RETURN_VALUE                    
                'LoggerAdapter.isEnabledFor'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: setLevel
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'logger'
                        'setLevel'
                    [Var Names]
                        'self'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Set the specified level on the underlying logger.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: logger
                        4       LOAD_METHOD                     1: setLevel
                        6       LOAD_FAST                       1: level
                        8       CALL_METHOD                     1
                        10      POP_TOP                         
                        12      LOAD_CONST                      1: None
                        14      RETURN_VALUE                    
                'LoggerAdapter.setLevel'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: getEffectiveLevel
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'logger'
                        'getEffectiveLevel'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Get the effective level for the underlying logger.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: logger
                        4       LOAD_METHOD                     1: getEffectiveLevel
                        6       CALL_METHOD                     0
                        8       RETURN_VALUE                    
                'LoggerAdapter.getEffectiveLevel'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: hasHandlers
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'logger'
                        'hasHandlers'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        See if the underlying logger has any handlers.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: logger
                        4       LOAD_METHOD                     1: hasHandlers
                        6       CALL_METHOD                     0
                        8       RETURN_VALUE                    
                'LoggerAdapter.hasHandlers'
                False
                [Code]
                    File Name: logging/__init__.py
                    Object Name: _log
                    Arg Count: 7
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'logger'
                        '_log'
                    [Var Names]
                        'self'
                        'level'
                        'msg'
                        'args'
                        'exc_info'
                        'extra'
                        'stack_info'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Low-level log implementation, proxied to allow nested logger adapters.\n        '
                        (
                            'exc_info'
                            'extra'
                            'stack_info'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: logger
                        4       LOAD_ATTR                       1: _log
                        6       LOAD_FAST                       1: level
                        8       LOAD_FAST                       2: msg
                        10      LOAD_FAST                       3: args
                        12      LOAD_FAST                       4: exc_info
                        14      LOAD_FAST                       5: extra
                        16      LOAD_FAST                       6: stack_info
                        18      LOAD_CONST                      1: ('exc_info', 'extra', 'stack_info')
                        20      CALL_FUNCTION_KW                6
                        22      RETURN_VALUE                    
                'LoggerAdapter._log'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: manager
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'logger'
                        'manager'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: logger
                        4       LOAD_ATTR                       1: manager
                        6       RETURN_VALUE                    
                'LoggerAdapter.manager'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: manager
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'logger'
                        'manager'
                    [Var Names]
                        'self'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: value
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: logger
                        6       STORE_ATTR                      1: manager
                        8       LOAD_CONST                      0: None
                        10      RETURN_VALUE                    
                [Code]
                    File Name: logging/__init__.py
                    Object Name: name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'logger'
                        'name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: logger
                        4       LOAD_ATTR                       1: name
                        6       RETURN_VALUE                    
                'LoggerAdapter.name'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'logger'
                        'getLevelName'
                        'getEffectiveLevel'
                        '__class__'
                        '__name__'
                        'name'
                    [Var Names]
                        'self'
                        'logger'
                        'level'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<%s %s (%s)>'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: logger
                        4       STORE_FAST                      1: logger
                        6       LOAD_GLOBAL                     1: getLevelName
                        8       LOAD_FAST                       1: logger
                        10      LOAD_METHOD                     2: getEffectiveLevel
                        12      CALL_METHOD                     0
                        14      CALL_FUNCTION                   1
                        16      STORE_FAST                      2: level
                        18      LOAD_CONST                      1: '<%s %s (%s)>'
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       3: __class__
                        24      LOAD_ATTR                       4: __name__
                        26      LOAD_FAST                       1: logger
                        28      LOAD_ATTR                       5: name
                        30      LOAD_FAST                       2: level
                        32      BUILD_TUPLE                     3
                        34      BINARY_MODULO                   
                        36      RETURN_VALUE                    
                'LoggerAdapter.__repr__'
                (
                    None
                )
                (
                    None
                    None
                    False
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'LoggerAdapter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    An adapter for loggers which makes it easier to specify contextual\n    information in logging output.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      43: (None,)
                14      LOAD_CONST                      3: <CODE> __init__
                16      LOAD_CONST                      4: 'LoggerAdapter.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      5: <CODE> process
                24      LOAD_CONST                      6: 'LoggerAdapter.process'
                26      MAKE_FUNCTION                   0
                28      STORE_NAME                      5: process
                30      LOAD_CONST                      7: <CODE> debug
                32      LOAD_CONST                      8: 'LoggerAdapter.debug'
                34      MAKE_FUNCTION                   0
                36      STORE_NAME                      6: debug
                38      LOAD_CONST                      9: <CODE> info
                40      LOAD_CONST                      10: 'LoggerAdapter.info'
                42      MAKE_FUNCTION                   0
                44      STORE_NAME                      7: info
                46      LOAD_CONST                      11: <CODE> warning
                48      LOAD_CONST                      12: 'LoggerAdapter.warning'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      8: warning
                54      LOAD_CONST                      13: <CODE> warn
                56      LOAD_CONST                      14: 'LoggerAdapter.warn'
                58      MAKE_FUNCTION                   0
                60      STORE_NAME                      9: warn
                62      LOAD_CONST                      15: <CODE> error
                64      LOAD_CONST                      16: 'LoggerAdapter.error'
                66      MAKE_FUNCTION                   0
                68      STORE_NAME                      10: error
                70      LOAD_CONST                      17: True
                72      LOAD_CONST                      18: ('exc_info',)
                74      BUILD_CONST_KEY_MAP             1
                76      LOAD_CONST                      19: <CODE> exception
                78      LOAD_CONST                      20: 'LoggerAdapter.exception'
                80      MAKE_FUNCTION                   2
                82      STORE_NAME                      11: exception
                84      LOAD_CONST                      21: <CODE> critical
                86      LOAD_CONST                      22: 'LoggerAdapter.critical'
                88      MAKE_FUNCTION                   0
                90      STORE_NAME                      12: critical
                92      LOAD_CONST                      23: <CODE> log
                94      LOAD_CONST                      24: 'LoggerAdapter.log'
                96      MAKE_FUNCTION                   0
                98      STORE_NAME                      13: log
                100     LOAD_CONST                      25: <CODE> isEnabledFor
                102     LOAD_CONST                      26: 'LoggerAdapter.isEnabledFor'
                104     MAKE_FUNCTION                   0
                106     STORE_NAME                      14: isEnabledFor
                108     LOAD_CONST                      27: <CODE> setLevel
                110     LOAD_CONST                      28: 'LoggerAdapter.setLevel'
                112     MAKE_FUNCTION                   0
                114     STORE_NAME                      15: setLevel
                116     LOAD_CONST                      29: <CODE> getEffectiveLevel
                118     LOAD_CONST                      30: 'LoggerAdapter.getEffectiveLevel'
                120     MAKE_FUNCTION                   0
                122     STORE_NAME                      16: getEffectiveLevel
                124     LOAD_CONST                      31: <CODE> hasHandlers
                126     LOAD_CONST                      32: 'LoggerAdapter.hasHandlers'
                128     MAKE_FUNCTION                   0
                130     STORE_NAME                      17: hasHandlers
                132     LOAD_CONST                      44: (None, None, False)
                134     LOAD_CONST                      34: <CODE> _log
                136     LOAD_CONST                      35: 'LoggerAdapter._log'
                138     MAKE_FUNCTION                   1
                140     STORE_NAME                      18: _log
                142     LOAD_NAME                       19: property
                144     LOAD_CONST                      36: <CODE> manager
                146     LOAD_CONST                      37: 'LoggerAdapter.manager'
                148     MAKE_FUNCTION                   0
                150     CALL_FUNCTION                   1
                152     STORE_NAME                      20: manager
                154     LOAD_NAME                       20: manager
                156     LOAD_ATTR                       21: setter
                158     LOAD_CONST                      38: <CODE> manager
                160     LOAD_CONST                      37: 'LoggerAdapter.manager'
                162     MAKE_FUNCTION                   0
                164     CALL_FUNCTION                   1
                166     STORE_NAME                      20: manager
                168     LOAD_NAME                       19: property
                170     LOAD_CONST                      39: <CODE> name
                172     LOAD_CONST                      40: 'LoggerAdapter.name'
                174     MAKE_FUNCTION                   0
                176     CALL_FUNCTION                   1
                178     STORE_NAME                      22: name
                180     LOAD_CONST                      41: <CODE> __repr__
                182     LOAD_CONST                      42: 'LoggerAdapter.__repr__'
                184     MAKE_FUNCTION                   0
                186     STORE_NAME                      23: __repr__
                188     LOAD_CONST                      2: None
                190     RETURN_VALUE                    
        'LoggerAdapter'
        [Code]
            File Name: logging/__init__.py
            Object Name: basicConfig
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 15
            Stack Size: 7
            Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                '_acquireLock'
                'pop'
                'root'
                'handlers'
                'removeHandler'
                'close'
                'len'
                'ValueError'
                'io'
                'text_encoding'
                'FileHandler'
                'StreamHandler'
                '_STYLES'
                'join'
                'keys'
                'Formatter'
                'formatter'
                'setFormatter'
                'addHandler'
                'setLevel'
                '_releaseLock'
            [Var Names]
                'kwargs'
                'force'
                'encoding'
                'errors'
                'h'
                'handlers'
                'filename'
                'mode'
                'stream'
                'dfs'
                'style'
                'fs'
                'fmt'
                'level'
                'keys'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Do basic configuration for the logging system.\n\n    This function does nothing if the root logger already has handlers\n    configured, unless the keyword argument *force* is set to ``True``.\n    It is a convenience method intended for use by simple scripts\n    to do one-shot configuration of the logging package.\n\n    The default behaviour is to create a StreamHandler which writes to\n    sys.stderr, set a formatter using the BASIC_FORMAT format string, and\n    add the handler to the root logger.\n\n    A number of optional keyword arguments may be specified, which can alter\n    the default behaviour.\n\n    filename  Specifies that a FileHandler be created, using the specified\n              filename, rather than a StreamHandler.\n    filemode  Specifies the mode to open the file, if filename is specified\n              (if filemode is unspecified, it defaults to 'a').\n    format    Use the specified format string for the handler.\n    datefmt   Use the specified date/time format.\n    style     If a format string is specified, use this to specify the\n              type of format string (possible values '%', '{', '$', for\n              %-formatting, :meth:`str.format` and :class:`string.Template`\n              - defaults to '%').\n    level     Set the root logger level to the specified level.\n    stream    Use the specified stream to initialize the StreamHandler. Note\n              that this argument is incompatible with 'filename' - if both\n              are present, 'stream' is ignored.\n    handlers  If specified, this should be an iterable of already created\n              handlers, which will be added to the root handler. Any handler\n              in the list which does not have a formatter assigned will be\n              assigned the formatter created in this function.\n    force     If this keyword  is specified as true, any existing handlers\n              attached to the root logger are removed and closed, before\n              carrying out the configuration as specified by the other\n              arguments.\n    encoding  If specified together with a filename, this encoding is passed to\n              the created FileHandler, causing it to be used when the file is\n              opened.\n    errors    If specified together with a filename, this value is passed to the\n              created FileHandler, causing it to be used when the file is\n              opened in text mode. If not specified, the default value is\n              `backslashreplace`.\n\n    Note that you could specify a stream created using open(filename, mode)\n    rather than passing the filename and mode in. However, it should be\n    remembered that StreamHandler does not close its stream (since it may be\n    using sys.stdout or sys.stderr), whereas FileHandler closes its stream\n    when the handler is closed.\n\n    .. versionchanged:: 3.2\n       Added the ``style`` parameter.\n\n    .. versionchanged:: 3.3\n       Added the ``handlers`` parameter. A ``ValueError`` is now thrown for\n       incompatible arguments (e.g. ``handlers`` specified together with\n       ``filename``/``filemode``, or ``filename``/``filemode`` specified\n       together with ``stream``, or ``handlers`` specified together with\n       ``stream``.\n\n    .. versionchanged:: 3.8\n       Added the ``force`` parameter.\n\n    .. versionchanged:: 3.9\n       Added the ``encoding`` and ``errors`` parameters.\n    "
                'force'
                False
                'encoding'
                None
                'errors'
                'backslashreplace'
                0
                'handlers'
                'stream'
                'filename'
                "'stream' and 'filename' should not be specified together"
                "'stream' or 'filename' should not be specified together with 'handlers'"
                'filemode'
                'a'
                'b'
                (
                    'encoding'
                    'errors'
                )
                'datefmt'
                'style'
                '%'
                'Style must be one of: %s'
                ','
                'format'
                1
                'level'
                ', '
                'Unrecognised argument(s): %s'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _acquireLock
                2       CALL_FUNCTION                   0
                4       POP_TOP                         
                6       SETUP_FINALLY                   238 (to 484)
                8       LOAD_FAST                       0: kwargs
                10      LOAD_METHOD                     1: pop
                12      LOAD_CONST                      1: 'force'
                14      LOAD_CONST                      2: False
                16      CALL_METHOD                     2
                18      STORE_FAST                      1: force
                20      LOAD_FAST                       0: kwargs
                22      LOAD_METHOD                     1: pop
                24      LOAD_CONST                      3: 'encoding'
                26      LOAD_CONST                      4: None
                28      CALL_METHOD                     2
                30      STORE_FAST                      2: encoding
                32      LOAD_FAST                       0: kwargs
                34      LOAD_METHOD                     1: pop
                36      LOAD_CONST                      5: 'errors'
                38      LOAD_CONST                      6: 'backslashreplace'
                40      CALL_METHOD                     2
                42      STORE_FAST                      3: errors
                44      LOAD_FAST                       1: force
                46      POP_JUMP_IF_FALSE               43 (to 86)
                48      LOAD_GLOBAL                     2: root
                50      LOAD_ATTR                       3: handlers
                52      LOAD_CONST                      4: None
                54      LOAD_CONST                      4: None
                56      BUILD_SLICE                     2
                58      BINARY_SUBSCR                   
                60      GET_ITER                        
                62      FOR_ITER                        11 (to 86)
                64      STORE_FAST                      4: h
                66      LOAD_GLOBAL                     2: root
                68      LOAD_METHOD                     4: removeHandler
                70      LOAD_FAST                       4: h
                72      CALL_METHOD                     1
                74      POP_TOP                         
                76      LOAD_FAST                       4: h
                78      LOAD_METHOD                     5: close
                80      CALL_METHOD                     0
                82      POP_TOP                         
                84      JUMP_ABSOLUTE                   31 (to 62)
                86      LOAD_GLOBAL                     6: len
                88      LOAD_GLOBAL                     2: root
                90      LOAD_ATTR                       3: handlers
                92      CALL_FUNCTION                   1
                94      LOAD_CONST                      7: 0
                96      COMPARE_OP                      2 (==)
                98      POP_JUMP_IF_FALSE               230 (to 460)
                100     LOAD_FAST                       0: kwargs
                102     LOAD_METHOD                     1: pop
                104     LOAD_CONST                      8: 'handlers'
                106     LOAD_CONST                      4: None
                108     CALL_METHOD                     2
                110     STORE_FAST                      5: handlers
                112     LOAD_FAST                       5: handlers
                114     LOAD_CONST                      4: None
                116     IS_OP                           0 (is)
                118     POP_JUMP_IF_FALSE               73 (to 146)
                120     LOAD_CONST                      9: 'stream'
                122     LOAD_FAST                       0: kwargs
                124     CONTAINS_OP                     0 (in)
                126     POP_JUMP_IF_FALSE               72 (to 144)
                128     LOAD_CONST                      10: 'filename'
                130     LOAD_FAST                       0: kwargs
                132     CONTAINS_OP                     0 (in)
                134     POP_JUMP_IF_FALSE               72 (to 144)
                136     LOAD_GLOBAL                     7: ValueError
                138     LOAD_CONST                      11: "'stream' and 'filename' should not be specified together"
                140     CALL_FUNCTION                   1
                142     RAISE_VARARGS                   1
                144     JUMP_FORWARD                    12 (to 170)
                146     LOAD_CONST                      9: 'stream'
                148     LOAD_FAST                       0: kwargs
                150     CONTAINS_OP                     0 (in)
                152     POP_JUMP_IF_TRUE                81 (to 162)
                154     LOAD_CONST                      10: 'filename'
                156     LOAD_FAST                       0: kwargs
                158     CONTAINS_OP                     0 (in)
                160     POP_JUMP_IF_FALSE               85 (to 170)
                162     LOAD_GLOBAL                     7: ValueError
                164     LOAD_CONST                      12: "'stream' or 'filename' should not be specified together with 'handlers'"
                166     CALL_FUNCTION                   1
                168     RAISE_VARARGS                   1
                170     LOAD_FAST                       5: handlers
                172     LOAD_CONST                      4: None
                174     IS_OP                           0 (is)
                176     POP_JUMP_IF_FALSE               137 (to 274)
                178     LOAD_FAST                       0: kwargs
                180     LOAD_METHOD                     1: pop
                182     LOAD_CONST                      10: 'filename'
                184     LOAD_CONST                      4: None
                186     CALL_METHOD                     2
                188     STORE_FAST                      6: filename
                190     LOAD_FAST                       0: kwargs
                192     LOAD_METHOD                     1: pop
                194     LOAD_CONST                      13: 'filemode'
                196     LOAD_CONST                      14: 'a'
                198     CALL_METHOD                     2
                200     STORE_FAST                      7: mode
                202     LOAD_FAST                       6: filename
                204     POP_JUMP_IF_FALSE               124 (to 248)
                206     LOAD_CONST                      15: 'b'
                208     LOAD_FAST                       7: mode
                210     CONTAINS_OP                     0 (in)
                212     POP_JUMP_IF_FALSE               110 (to 220)
                214     LOAD_CONST                      4: None
                216     STORE_FAST                      3: errors
                218     JUMP_FORWARD                    5 (to 230)
                220     LOAD_GLOBAL                     8: io
                222     LOAD_METHOD                     9: text_encoding
                224     LOAD_FAST                       2: encoding
                226     CALL_METHOD                     1
                228     STORE_FAST                      2: encoding
                230     LOAD_GLOBAL                     10: FileHandler
                232     LOAD_FAST                       6: filename
                234     LOAD_FAST                       7: mode
                236     LOAD_FAST                       2: encoding
                238     LOAD_FAST                       3: errors
                240     LOAD_CONST                      16: ('encoding', 'errors')
                242     CALL_FUNCTION_KW                4
                244     STORE_FAST                      4: h
                246     JUMP_FORWARD                    10 (to 268)
                248     LOAD_FAST                       0: kwargs
                250     LOAD_METHOD                     1: pop
                252     LOAD_CONST                      9: 'stream'
                254     LOAD_CONST                      4: None
                256     CALL_METHOD                     2
                258     STORE_FAST                      8: stream
                260     LOAD_GLOBAL                     11: StreamHandler
                262     LOAD_FAST                       8: stream
                264     CALL_FUNCTION                   1
                266     STORE_FAST                      4: h
                268     LOAD_FAST                       4: h
                270     BUILD_LIST                      1
                272     STORE_FAST                      5: handlers
                274     LOAD_FAST                       0: kwargs
                276     LOAD_METHOD                     1: pop
                278     LOAD_CONST                      17: 'datefmt'
                280     LOAD_CONST                      4: None
                282     CALL_METHOD                     2
                284     STORE_FAST                      9: dfs
                286     LOAD_FAST                       0: kwargs
                288     LOAD_METHOD                     1: pop
                290     LOAD_CONST                      18: 'style'
                292     LOAD_CONST                      19: '%'
                294     CALL_METHOD                     2
                296     STORE_FAST                      10: style
                298     LOAD_FAST                       10: style
                300     LOAD_GLOBAL                     12: _STYLES
                302     CONTAINS_OP                     1 (not in)
                304     POP_JUMP_IF_FALSE               164 (to 328)
                306     LOAD_GLOBAL                     7: ValueError
                308     LOAD_CONST                      20: 'Style must be one of: %s'
                310     LOAD_CONST                      21: ','
                312     LOAD_METHOD                     13: join
                314     LOAD_GLOBAL                     12: _STYLES
                316     LOAD_METHOD                     14: keys
                318     CALL_METHOD                     0
                320     CALL_METHOD                     1
                322     BINARY_MODULO                   
                324     CALL_FUNCTION                   1
                326     RAISE_VARARGS                   1
                328     LOAD_FAST                       0: kwargs
                330     LOAD_METHOD                     1: pop
                332     LOAD_CONST                      22: 'format'
                334     LOAD_GLOBAL                     12: _STYLES
                336     LOAD_FAST                       10: style
                338     BINARY_SUBSCR                   
                340     LOAD_CONST                      23: 1
                342     BINARY_SUBSCR                   
                344     CALL_METHOD                     2
                346     STORE_FAST                      11: fs
                348     LOAD_GLOBAL                     15: Formatter
                350     LOAD_FAST                       11: fs
                352     LOAD_FAST                       9: dfs
                354     LOAD_FAST                       10: style
                356     CALL_FUNCTION                   3
                358     STORE_FAST                      12: fmt
                360     LOAD_FAST                       5: handlers
                362     GET_ITER                        
                364     FOR_ITER                        17 (to 400)
                366     STORE_FAST                      4: h
                368     LOAD_FAST                       4: h
                370     LOAD_ATTR                       16: formatter
                372     LOAD_CONST                      4: None
                374     IS_OP                           0 (is)
                376     POP_JUMP_IF_FALSE               194 (to 388)
                378     LOAD_FAST                       4: h
                380     LOAD_METHOD                     17: setFormatter
                382     LOAD_FAST                       12: fmt
                384     CALL_METHOD                     1
                386     POP_TOP                         
                388     LOAD_GLOBAL                     2: root
                390     LOAD_METHOD                     18: addHandler
                392     LOAD_FAST                       4: h
                394     CALL_METHOD                     1
                396     POP_TOP                         
                398     JUMP_ABSOLUTE                   182 (to 364)
                400     LOAD_FAST                       0: kwargs
                402     LOAD_METHOD                     1: pop
                404     LOAD_CONST                      24: 'level'
                406     LOAD_CONST                      4: None
                408     CALL_METHOD                     2
                410     STORE_FAST                      13: level
                412     LOAD_FAST                       13: level
                414     LOAD_CONST                      4: None
                416     IS_OP                           1 (is not)
                418     POP_JUMP_IF_FALSE               215 (to 430)
                420     LOAD_GLOBAL                     2: root
                422     LOAD_METHOD                     19: setLevel
                424     LOAD_FAST                       13: level
                426     CALL_METHOD                     1
                428     POP_TOP                         
                430     LOAD_FAST                       0: kwargs
                432     POP_JUMP_IF_FALSE               236 (to 472)
                434     LOAD_CONST                      25: ', '
                436     LOAD_METHOD                     13: join
                438     LOAD_FAST                       0: kwargs
                440     LOAD_METHOD                     14: keys
                442     CALL_METHOD                     0
                444     CALL_METHOD                     1
                446     STORE_FAST                      14: keys
                448     LOAD_GLOBAL                     7: ValueError
                450     LOAD_CONST                      26: 'Unrecognised argument(s): %s'
                452     LOAD_FAST                       14: keys
                454     BINARY_MODULO                   
                456     CALL_FUNCTION                   1
                458     RAISE_VARARGS                   1
                460     POP_BLOCK                       
                462     LOAD_GLOBAL                     20: _releaseLock
                464     CALL_FUNCTION                   0
                466     POP_TOP                         
                468     LOAD_CONST                      4: None
                470     RETURN_VALUE                    
                472     POP_BLOCK                       
                474     LOAD_GLOBAL                     20: _releaseLock
                476     CALL_FUNCTION                   0
                478     POP_TOP                         
                480     LOAD_CONST                      4: None
                482     RETURN_VALUE                    
                484     LOAD_GLOBAL                     20: _releaseLock
                486     CALL_FUNCTION                   0
                488     POP_TOP                         
                490     RERAISE                         0
        'basicConfig'
        [Code]
            File Name: logging/__init__.py
            Object Name: getLogger
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'str'
                'root'
                'name'
                'Logger'
                'manager'
                'getLogger'
            [Var Names]
                'name'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Return a logger with the specified name, creating it if necessary.\n\n    If no name is specified, return the root logger.\n    '
            [Disassembly]
                0       LOAD_FAST                       0: name
                2       POP_JUMP_IF_FALSE               12 (to 24)
                4       LOAD_GLOBAL                     0: isinstance
                6       LOAD_FAST                       0: name
                8       LOAD_GLOBAL                     1: str
                10      CALL_FUNCTION                   2
                12      POP_JUMP_IF_FALSE               14 (to 28)
                14      LOAD_FAST                       0: name
                16      LOAD_GLOBAL                     2: root
                18      LOAD_ATTR                       3: name
                20      COMPARE_OP                      2 (==)
                22      POP_JUMP_IF_FALSE               14 (to 28)
                24      LOAD_GLOBAL                     2: root
                26      RETURN_VALUE                    
                28      LOAD_GLOBAL                     4: Logger
                30      LOAD_ATTR                       5: manager
                32      LOAD_METHOD                     6: getLogger
                34      LOAD_FAST                       0: name
                36      CALL_METHOD                     1
                38      RETURN_VALUE                    
        'getLogger'
        [Code]
            File Name: logging/__init__.py
            Object Name: critical
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'len'
                'root'
                'handlers'
                'basicConfig'
                'critical'
            [Var Names]
                'msg'
                'args'
                'kwargs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Log a message with severity 'CRITICAL' on the root logger. If the logger\n    has no handlers, call basicConfig() to add a console handler with a\n    pre-defined format.\n    "
                0
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_GLOBAL                     1: root
                4       LOAD_ATTR                       2: handlers
                6       CALL_FUNCTION                   1
                8       LOAD_CONST                      1: 0
                10      COMPARE_OP                      2 (==)
                12      POP_JUMP_IF_FALSE               10 (to 20)
                14      LOAD_GLOBAL                     3: basicConfig
                16      CALL_FUNCTION                   0
                18      POP_TOP                         
                20      LOAD_GLOBAL                     1: root
                22      LOAD_ATTR                       4: critical
                24      LOAD_FAST                       0: msg
                26      BUILD_LIST                      1
                28      LOAD_FAST                       1: args
                30      LIST_EXTEND                     1
                32      LIST_TO_TUPLE                   
                34      BUILD_MAP                       0
                36      LOAD_FAST                       2: kwargs
                38      DICT_MERGE                      1
                40      CALL_FUNCTION_EX                1
                42      POP_TOP                         
                44      LOAD_CONST                      2: None
                46      RETURN_VALUE                    
        'critical'
        [Code]
            File Name: logging/__init__.py
            Object Name: fatal
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'critical'
            [Var Names]
                'msg'
                'args'
                'kwargs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Don't use this function, use critical() instead.\n    "
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: critical
                2       LOAD_FAST                       0: msg
                4       BUILD_LIST                      1
                6       LOAD_FAST                       1: args
                8       LIST_EXTEND                     1
                10      LIST_TO_TUPLE                   
                12      BUILD_MAP                       0
                14      LOAD_FAST                       2: kwargs
                16      DICT_MERGE                      1
                18      CALL_FUNCTION_EX                1
                20      POP_TOP                         
                22      LOAD_CONST                      1: None
                24      RETURN_VALUE                    
        'fatal'
        [Code]
            File Name: logging/__init__.py
            Object Name: error
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'len'
                'root'
                'handlers'
                'basicConfig'
                'error'
            [Var Names]
                'msg'
                'args'
                'kwargs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Log a message with severity 'ERROR' on the root logger. If the logger has\n    no handlers, call basicConfig() to add a console handler with a pre-defined\n    format.\n    "
                0
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_GLOBAL                     1: root
                4       LOAD_ATTR                       2: handlers
                6       CALL_FUNCTION                   1
                8       LOAD_CONST                      1: 0
                10      COMPARE_OP                      2 (==)
                12      POP_JUMP_IF_FALSE               10 (to 20)
                14      LOAD_GLOBAL                     3: basicConfig
                16      CALL_FUNCTION                   0
                18      POP_TOP                         
                20      LOAD_GLOBAL                     1: root
                22      LOAD_ATTR                       4: error
                24      LOAD_FAST                       0: msg
                26      BUILD_LIST                      1
                28      LOAD_FAST                       1: args
                30      LIST_EXTEND                     1
                32      LIST_TO_TUPLE                   
                34      BUILD_MAP                       0
                36      LOAD_FAST                       2: kwargs
                38      DICT_MERGE                      1
                40      CALL_FUNCTION_EX                1
                42      POP_TOP                         
                44      LOAD_CONST                      2: None
                46      RETURN_VALUE                    
        'error'
        (
            'exc_info'
        )
        [Code]
            File Name: logging/__init__.py
            Object Name: exception
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 1
            Locals: 4
            Stack Size: 4
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'error'
            [Var Names]
                'msg'
                'exc_info'
                'args'
                'kwargs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Log a message with severity 'ERROR' on the root logger, with exception\n    information. If the logger has no handlers, basicConfig() is called to add\n    a console handler with a pre-defined format.\n    "
                'exc_info'
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: error
                2       LOAD_FAST                       0: msg
                4       BUILD_LIST                      1
                6       LOAD_FAST                       2: args
                8       LIST_EXTEND                     1
                10      LIST_TO_TUPLE                   
                12      LOAD_CONST                      1: 'exc_info'
                14      LOAD_FAST                       1: exc_info
                16      BUILD_MAP                       1
                18      LOAD_FAST                       3: kwargs
                20      DICT_MERGE                      1
                22      CALL_FUNCTION_EX                1
                24      POP_TOP                         
                26      LOAD_CONST                      2: None
                28      RETURN_VALUE                    
        'exception'
        [Code]
            File Name: logging/__init__.py
            Object Name: warning
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'len'
                'root'
                'handlers'
                'basicConfig'
                'warning'
            [Var Names]
                'msg'
                'args'
                'kwargs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Log a message with severity 'WARNING' on the root logger. If the logger has\n    no handlers, call basicConfig() to add a console handler with a pre-defined\n    format.\n    "
                0
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_GLOBAL                     1: root
                4       LOAD_ATTR                       2: handlers
                6       CALL_FUNCTION                   1
                8       LOAD_CONST                      1: 0
                10      COMPARE_OP                      2 (==)
                12      POP_JUMP_IF_FALSE               10 (to 20)
                14      LOAD_GLOBAL                     3: basicConfig
                16      CALL_FUNCTION                   0
                18      POP_TOP                         
                20      LOAD_GLOBAL                     1: root
                22      LOAD_ATTR                       4: warning
                24      LOAD_FAST                       0: msg
                26      BUILD_LIST                      1
                28      LOAD_FAST                       1: args
                30      LIST_EXTEND                     1
                32      LIST_TO_TUPLE                   
                34      BUILD_MAP                       0
                36      LOAD_FAST                       2: kwargs
                38      DICT_MERGE                      1
                40      CALL_FUNCTION_EX                1
                42      POP_TOP                         
                44      LOAD_CONST                      2: None
                46      RETURN_VALUE                    
        'warning'
        [Code]
            File Name: logging/__init__.py
            Object Name: warn
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                'warning'
            [Var Names]
                'msg'
                'args'
                'kwargs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                "The 'warn' function is deprecated, use 'warning' instead"
                2
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_METHOD                     1: warn
                4       LOAD_CONST                      1: "The 'warn' function is deprecated, use 'warning' instead"
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      CALL_METHOD                     3
                12      POP_TOP                         
                14      LOAD_GLOBAL                     3: warning
                16      LOAD_FAST                       0: msg
                18      BUILD_LIST                      1
                20      LOAD_FAST                       1: args
                22      LIST_EXTEND                     1
                24      LIST_TO_TUPLE                   
                26      BUILD_MAP                       0
                28      LOAD_FAST                       2: kwargs
                30      DICT_MERGE                      1
                32      CALL_FUNCTION_EX                1
                34      POP_TOP                         
                36      LOAD_CONST                      0: None
                38      RETURN_VALUE                    
        'warn'
        [Code]
            File Name: logging/__init__.py
            Object Name: info
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'len'
                'root'
                'handlers'
                'basicConfig'
                'info'
            [Var Names]
                'msg'
                'args'
                'kwargs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Log a message with severity 'INFO' on the root logger. If the logger has\n    no handlers, call basicConfig() to add a console handler with a pre-defined\n    format.\n    "
                0
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_GLOBAL                     1: root
                4       LOAD_ATTR                       2: handlers
                6       CALL_FUNCTION                   1
                8       LOAD_CONST                      1: 0
                10      COMPARE_OP                      2 (==)
                12      POP_JUMP_IF_FALSE               10 (to 20)
                14      LOAD_GLOBAL                     3: basicConfig
                16      CALL_FUNCTION                   0
                18      POP_TOP                         
                20      LOAD_GLOBAL                     1: root
                22      LOAD_ATTR                       4: info
                24      LOAD_FAST                       0: msg
                26      BUILD_LIST                      1
                28      LOAD_FAST                       1: args
                30      LIST_EXTEND                     1
                32      LIST_TO_TUPLE                   
                34      BUILD_MAP                       0
                36      LOAD_FAST                       2: kwargs
                38      DICT_MERGE                      1
                40      CALL_FUNCTION_EX                1
                42      POP_TOP                         
                44      LOAD_CONST                      2: None
                46      RETURN_VALUE                    
        'info'
        [Code]
            File Name: logging/__init__.py
            Object Name: debug
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'len'
                'root'
                'handlers'
                'basicConfig'
                'debug'
            [Var Names]
                'msg'
                'args'
                'kwargs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Log a message with severity 'DEBUG' on the root logger. If the logger has\n    no handlers, call basicConfig() to add a console handler with a pre-defined\n    format.\n    "
                0
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_GLOBAL                     1: root
                4       LOAD_ATTR                       2: handlers
                6       CALL_FUNCTION                   1
                8       LOAD_CONST                      1: 0
                10      COMPARE_OP                      2 (==)
                12      POP_JUMP_IF_FALSE               10 (to 20)
                14      LOAD_GLOBAL                     3: basicConfig
                16      CALL_FUNCTION                   0
                18      POP_TOP                         
                20      LOAD_GLOBAL                     1: root
                22      LOAD_ATTR                       4: debug
                24      LOAD_FAST                       0: msg
                26      BUILD_LIST                      1
                28      LOAD_FAST                       1: args
                30      LIST_EXTEND                     1
                32      LIST_TO_TUPLE                   
                34      BUILD_MAP                       0
                36      LOAD_FAST                       2: kwargs
                38      DICT_MERGE                      1
                40      CALL_FUNCTION_EX                1
                42      POP_TOP                         
                44      LOAD_CONST                      2: None
                46      RETURN_VALUE                    
        'debug'
        [Code]
            File Name: logging/__init__.py
            Object Name: log
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 4
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'len'
                'root'
                'handlers'
                'basicConfig'
                'log'
            [Var Names]
                'level'
                'msg'
                'args'
                'kwargs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Log 'msg % args' with the integer severity 'level' on the root logger. If\n    the logger has no handlers, call basicConfig() to add a console handler\n    with a pre-defined format.\n    "
                0
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_GLOBAL                     1: root
                4       LOAD_ATTR                       2: handlers
                6       CALL_FUNCTION                   1
                8       LOAD_CONST                      1: 0
                10      COMPARE_OP                      2 (==)
                12      POP_JUMP_IF_FALSE               10 (to 20)
                14      LOAD_GLOBAL                     3: basicConfig
                16      CALL_FUNCTION                   0
                18      POP_TOP                         
                20      LOAD_GLOBAL                     1: root
                22      LOAD_ATTR                       4: log
                24      LOAD_FAST                       0: level
                26      LOAD_FAST                       1: msg
                28      BUILD_LIST                      2
                30      LOAD_FAST                       2: args
                32      LIST_EXTEND                     1
                34      LIST_TO_TUPLE                   
                36      BUILD_MAP                       0
                38      LOAD_FAST                       3: kwargs
                40      DICT_MERGE                      1
                42      CALL_FUNCTION_EX                1
                44      POP_TOP                         
                46      LOAD_CONST                      2: None
                48      RETURN_VALUE                    
        'log'
        [Code]
            File Name: logging/__init__.py
            Object Name: disable
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'root'
                'manager'
                'disable'
                '_clear_cache'
            [Var Names]
                'level'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Disable all logging calls of severity 'level' and below.\n    "
                None
            [Disassembly]
                0       LOAD_FAST                       0: level
                2       LOAD_GLOBAL                     0: root
                4       LOAD_ATTR                       1: manager
                6       STORE_ATTR                      2: disable
                8       LOAD_GLOBAL                     0: root
                10      LOAD_ATTR                       1: manager
                12      LOAD_METHOD                     3: _clear_cache
                14      CALL_METHOD                     0
                16      POP_TOP                         
                18      LOAD_CONST                      1: None
                20      RETURN_VALUE                    
        'disable'
        [Code]
            File Name: logging/__init__.py
            Object Name: shutdown
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'reversed'
                'acquire'
                'flush'
                'close'
                'OSError'
                'ValueError'
                'release'
                'raiseExceptions'
            [Var Names]
                'handlerList'
                'wr'
                'h'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Perform any cleanup actions in the logging system (e.g. flushing\n    buffers).\n\n    Should be called at application exit.\n    '
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: reversed
                2       LOAD_FAST                       0: handlerList
                4       LOAD_CONST                      1: None
                6       LOAD_CONST                      1: None
                8       BUILD_SLICE                     2
                10      BINARY_SUBSCR                   
                12      CALL_FUNCTION                   1
                14      GET_ITER                        
                16      FOR_ITER                        55 (to 128)
                18      STORE_FAST                      1: wr
                20      SETUP_FINALLY                   45 (to 112)
                22      LOAD_FAST                       1: wr
                24      CALL_FUNCTION                   0
                26      STORE_FAST                      2: h
                28      LOAD_FAST                       2: h
                30      POP_JUMP_IF_FALSE               54 (to 108)
                32      SETUP_FINALLY                   32 (to 98)
                34      SETUP_FINALLY                   14 (to 64)
                36      LOAD_FAST                       2: h
                38      LOAD_METHOD                     1: acquire
                40      CALL_METHOD                     0
                42      POP_TOP                         
                44      LOAD_FAST                       2: h
                46      LOAD_METHOD                     2: flush
                48      CALL_METHOD                     0
                50      POP_TOP                         
                52      LOAD_FAST                       2: h
                54      LOAD_METHOD                     3: close
                56      CALL_METHOD                     0
                58      POP_TOP                         
                60      POP_BLOCK                       
                62      JUMP_FORWARD                    11 (to 86)
                64      DUP_TOP                         
                66      LOAD_GLOBAL                     4: OSError
                68      LOAD_GLOBAL                     5: ValueError
                70      BUILD_TUPLE                     2
                72      JUMP_IF_NOT_EXC_MATCH           42 (to 84)
                74      POP_TOP                         
                76      POP_TOP                         
                78      POP_TOP                         
                80      POP_EXCEPT                      
                82      JUMP_FORWARD                    1 (to 86)
                84      RERAISE                         0
                86      POP_BLOCK                       
                88      LOAD_FAST                       2: h
                90      LOAD_METHOD                     6: release
                92      CALL_METHOD                     0
                94      POP_TOP                         
                96      JUMP_FORWARD                    5 (to 108)
                98      LOAD_FAST                       2: h
                100     LOAD_METHOD                     6: release
                102     CALL_METHOD                     0
                104     POP_TOP                         
                106     RERAISE                         0
                108     POP_BLOCK                       
                110     JUMP_ABSOLUTE                   8 (to 16)
                112     POP_TOP                         
                114     POP_TOP                         
                116     POP_TOP                         
                118     LOAD_GLOBAL                     7: raiseExceptions
                120     POP_JUMP_IF_FALSE               62 (to 124)
                122     RAISE_VARARGS                   0
                124     POP_EXCEPT                      
                126     JUMP_ABSOLUTE                   8 (to 16)
                128     LOAD_CONST                      1: None
                130     RETURN_VALUE                    
        'shutdown'
        [Code]
            File Name: logging/__init__.py
            Object Name: NullHandler
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'handle'
                'emit'
                'createLock'
                '_at_fork_reinit'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'NullHandler'
                '\n    This handler does nothing. It\'s intended to be used to avoid the\n    "No handlers could be found for logger XXX" one-off warning. This is\n    important for library code, which may contain code to log events. If a user\n    of the library does not configure logging, the one-off warning might be\n    produced; to avoid this, the library developer simply needs to instantiate\n    a NullHandler and add it to the top-level logger of the library module or\n    package.\n    '
                [Code]
                    File Name: logging/__init__.py
                    Object Name: handle
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'record'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Stub.'
                        None
                    [Disassembly]
                        0       LOAD_CONST                      1: None
                        2       RETURN_VALUE                    
                'NullHandler.handle'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: emit
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'record'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Stub.'
                        None
                    [Disassembly]
                        0       LOAD_CONST                      1: None
                        2       RETURN_VALUE                    
                'NullHandler.emit'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: createLock
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'lock'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: lock
                        6       LOAD_CONST                      0: None
                        8       RETURN_VALUE                    
                'NullHandler.createLock'
                [Code]
                    File Name: logging/__init__.py
                    Object Name: _at_fork_reinit
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'NullHandler._at_fork_reinit'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'NullHandler'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: '\n    This handler does nothing. It\'s intended to be used to avoid the\n    "No handlers could be found for logger XXX" one-off warning. This is\n    important for library code, which may contain code to log events. If a user\n    of the library does not configure logging, the one-off warning might be\n    produced; to avoid this, the library developer simply needs to instantiate\n    a NullHandler and add it to the top-level logger of the library module or\n    package.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> handle
                14      LOAD_CONST                      3: 'NullHandler.handle'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: handle
                20      LOAD_CONST                      4: <CODE> emit
                22      LOAD_CONST                      5: 'NullHandler.emit'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: emit
                28      LOAD_CONST                      6: <CODE> createLock
                30      LOAD_CONST                      7: 'NullHandler.createLock'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: createLock
                36      LOAD_CONST                      8: <CODE> _at_fork_reinit
                38      LOAD_CONST                      9: 'NullHandler._at_fork_reinit'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: _at_fork_reinit
                44      LOAD_CONST                      10: None
                46      RETURN_VALUE                    
        'NullHandler'
        [Code]
            File Name: logging/__init__.py
            Object Name: _showwarning
            Arg Count: 6
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_warnings_showwarning'
                'warnings'
                'formatwarning'
                'getLogger'
                'handlers'
                'addHandler'
                'NullHandler'
                'warning'
            [Var Names]
                'message'
                'category'
                'filename'
                'lineno'
                'file'
                'line'
                's'
                'logger'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Implementation of showwarnings which redirects to logging, which will first\n    check to see if the file parameter is None. If a file is specified, it will\n    delegate to the original warnings implementation of showwarning. Otherwise,\n    it will call warnings.formatwarning and will log the resulting string to a\n    warnings logger named "py.warnings" with level logging.WARNING.\n    '
                None
                'py.warnings'
                '%s'
            [Disassembly]
                0       LOAD_FAST                       4: file
                2       LOAD_CONST                      1: None
                4       IS_OP                           1 (is not)
                6       POP_JUMP_IF_FALSE               21 (to 42)
                8       LOAD_GLOBAL                     0: _warnings_showwarning
                10      LOAD_CONST                      1: None
                12      IS_OP                           1 (is not)
                14      POP_JUMP_IF_FALSE               19 (to 38)
                16      LOAD_GLOBAL                     0: _warnings_showwarning
                18      LOAD_FAST                       0: message
                20      LOAD_FAST                       1: category
                22      LOAD_FAST                       2: filename
                24      LOAD_FAST                       3: lineno
                26      LOAD_FAST                       4: file
                28      LOAD_FAST                       5: line
                30      CALL_FUNCTION                   6
                32      POP_TOP                         
                34      LOAD_CONST                      1: None
                36      RETURN_VALUE                    
                38      LOAD_CONST                      1: None
                40      RETURN_VALUE                    
                42      LOAD_GLOBAL                     1: warnings
                44      LOAD_METHOD                     2: formatwarning
                46      LOAD_FAST                       0: message
                48      LOAD_FAST                       1: category
                50      LOAD_FAST                       2: filename
                52      LOAD_FAST                       3: lineno
                54      LOAD_FAST                       5: line
                56      CALL_METHOD                     5
                58      STORE_FAST                      6: s
                60      LOAD_GLOBAL                     3: getLogger
                62      LOAD_CONST                      2: 'py.warnings'
                64      CALL_FUNCTION                   1
                66      STORE_FAST                      7: logger
                68      LOAD_FAST                       7: logger
                70      LOAD_ATTR                       4: handlers
                72      POP_JUMP_IF_TRUE                43 (to 86)
                74      LOAD_FAST                       7: logger
                76      LOAD_METHOD                     5: addHandler
                78      LOAD_GLOBAL                     6: NullHandler
                80      CALL_FUNCTION                   0
                82      CALL_METHOD                     1
                84      POP_TOP                         
                86      LOAD_FAST                       7: logger
                88      LOAD_METHOD                     7: warning
                90      LOAD_CONST                      3: '%s'
                92      LOAD_FAST                       6: s
                94      CALL_METHOD                     2
                96      POP_TOP                         
                98      LOAD_CONST                      1: None
                100     RETURN_VALUE                    
        '_showwarning'
        [Code]
            File Name: logging/__init__.py
            Object Name: captureWarnings
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_warnings_showwarning'
                'warnings'
                'showwarning'
                '_showwarning'
            [Var Names]
                'capture'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    If capture is true, redirect all warnings to the logging package.\n    If capture is False, ensure that warnings are not redirected to logging\n    but to their original destinations.\n    '
                None
            [Disassembly]
                0       LOAD_FAST                       0: capture
                2       POP_JUMP_IF_FALSE               16 (to 32)
                4       LOAD_GLOBAL                     0: _warnings_showwarning
                6       LOAD_CONST                      1: None
                8       IS_OP                           0 (is)
                10      POP_JUMP_IF_FALSE               14 (to 28)
                12      LOAD_GLOBAL                     1: warnings
                14      LOAD_ATTR                       2: showwarning
                16      STORE_GLOBAL                    0: _warnings_showwarning
                18      LOAD_GLOBAL                     3: _showwarning
                20      LOAD_GLOBAL                     1: warnings
                22      STORE_ATTR                      2: showwarning
                24      LOAD_CONST                      1: None
                26      RETURN_VALUE                    
                28      LOAD_CONST                      1: None
                30      RETURN_VALUE                    
                32      LOAD_GLOBAL                     0: _warnings_showwarning
                34      LOAD_CONST                      1: None
                36      IS_OP                           1 (is not)
                38      POP_JUMP_IF_FALSE               27 (to 54)
                40      LOAD_GLOBAL                     0: _warnings_showwarning
                42      LOAD_GLOBAL                     1: warnings
                44      STORE_ATTR                      2: showwarning
                46      LOAD_CONST                      1: None
                48      STORE_GLOBAL                    0: _warnings_showwarning
                50      LOAD_CONST                      1: None
                52      RETURN_VALUE                    
                54      LOAD_CONST                      1: None
                56      RETURN_VALUE                    
        'captureWarnings'
        (
            None
        )
        (
            None
            None
        )
    [Disassembly]
        0       LOAD_CONST                      0: "\nLogging package for Python. Based on PEP 282 and comments thereto in\ncomp.lang.python.\n\nCopyright (C) 2001-2019 Vinay Sajip. All Rights Reserved.\n\nTo use, simply 'import logging' and log away!\n"
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: 0
        6       LOAD_CONST                      2: None
        8       IMPORT_NAME                     1: sys
        10      STORE_NAME                      1: sys
        12      LOAD_CONST                      1: 0
        14      LOAD_CONST                      2: None
        16      IMPORT_NAME                     2: os
        18      STORE_NAME                      2: os
        20      LOAD_CONST                      1: 0
        22      LOAD_CONST                      2: None
        24      IMPORT_NAME                     3: time
        26      STORE_NAME                      3: time
        28      LOAD_CONST                      1: 0
        30      LOAD_CONST                      2: None
        32      IMPORT_NAME                     4: io
        34      STORE_NAME                      4: io
        36      LOAD_CONST                      1: 0
        38      LOAD_CONST                      2: None
        40      IMPORT_NAME                     5: re
        42      STORE_NAME                      5: re
        44      LOAD_CONST                      1: 0
        46      LOAD_CONST                      2: None
        48      IMPORT_NAME                     6: traceback
        50      STORE_NAME                      6: traceback
        52      LOAD_CONST                      1: 0
        54      LOAD_CONST                      2: None
        56      IMPORT_NAME                     7: warnings
        58      STORE_NAME                      7: warnings
        60      LOAD_CONST                      1: 0
        62      LOAD_CONST                      2: None
        64      IMPORT_NAME                     8: weakref
        66      STORE_NAME                      8: weakref
        68      LOAD_CONST                      1: 0
        70      LOAD_CONST                      2: None
        72      IMPORT_NAME                     9: collections.abc
        74      STORE_NAME                      10: collections
        76      LOAD_CONST                      1: 0
        78      LOAD_CONST                      3: ('Template',)
        80      IMPORT_NAME                     11: string
        82      IMPORT_FROM                     12: Template
        84      STORE_NAME                      12: Template
        86      POP_TOP                         
        88      LOAD_CONST                      1: 0
        90      LOAD_CONST                      4: ('Formatter',)
        92      IMPORT_NAME                     11: string
        94      IMPORT_FROM                     13: Formatter
        96      STORE_NAME                      14: StrFormatter
        98      POP_TOP                         
        100     BUILD_LIST                      0
        102     LOAD_CONST                      5: ('BASIC_FORMAT', 'BufferingFormatter', 'CRITICAL', 'DEBUG', 'ERROR', 'FATAL', 'FileHandler', 'Filter', 'Formatter', 'Handler', 'INFO', 'LogRecord', 'Logger', 'LoggerAdapter', 'NOTSET', 'NullHandler', 'StreamHandler', 'WARN', 'WARNING', 'addLevelName', 'basicConfig', 'captureWarnings', 'critical', 'debug', 'disable', 'error', 'exception', 'fatal', 'getLevelName', 'getLogger', 'getLoggerClass', 'info', 'log', 'makeLogRecord', 'setLoggerClass', 'shutdown', 'warn', 'warning', 'getLogRecordFactory', 'setLogRecordFactory', 'lastResort', 'raiseExceptions')
        104     LIST_EXTEND                     1
        106     STORE_NAME                      15: __all__
        108     LOAD_CONST                      1: 0
        110     LOAD_CONST                      2: None
        112     IMPORT_NAME                     16: threading
        114     STORE_NAME                      16: threading
        116     LOAD_CONST                      6: 'Vinay Sajip <vinay_sajip@red-dove.com>'
        118     STORE_NAME                      17: __author__
        120     LOAD_CONST                      7: 'production'
        122     STORE_NAME                      18: __status__
        124     LOAD_CONST                      8: '0.5.1.2'
        126     STORE_NAME                      19: __version__
        128     LOAD_CONST                      9: '07 February 2010'
        130     STORE_NAME                      20: __date__
        132     LOAD_NAME                       3: time
        134     LOAD_METHOD                     3: time
        136     CALL_METHOD                     0
        138     STORE_NAME                      21: _startTime
        140     LOAD_CONST                      10: True
        142     STORE_NAME                      22: raiseExceptions
        144     LOAD_CONST                      10: True
        146     STORE_NAME                      23: logThreads
        148     LOAD_CONST                      10: True
        150     STORE_NAME                      24: logMultiprocessing
        152     LOAD_CONST                      10: True
        154     STORE_NAME                      25: logProcesses
        156     LOAD_CONST                      11: 50
        158     STORE_NAME                      26: CRITICAL
        160     LOAD_NAME                       26: CRITICAL
        162     STORE_NAME                      27: FATAL
        164     LOAD_CONST                      12: 40
        166     STORE_NAME                      28: ERROR
        168     LOAD_CONST                      13: 30
        170     STORE_NAME                      29: WARNING
        172     LOAD_NAME                       29: WARNING
        174     STORE_NAME                      30: WARN
        176     LOAD_CONST                      14: 20
        178     STORE_NAME                      31: INFO
        180     LOAD_CONST                      15: 10
        182     STORE_NAME                      32: DEBUG
        184     LOAD_CONST                      1: 0
        186     STORE_NAME                      33: NOTSET
        188     LOAD_NAME                       26: CRITICAL
        190     LOAD_CONST                      16: 'CRITICAL'
        192     LOAD_NAME                       28: ERROR
        194     LOAD_CONST                      17: 'ERROR'
        196     LOAD_NAME                       29: WARNING
        198     LOAD_CONST                      18: 'WARNING'
        200     LOAD_NAME                       31: INFO
        202     LOAD_CONST                      19: 'INFO'
        204     LOAD_NAME                       32: DEBUG
        206     LOAD_CONST                      20: 'DEBUG'
        208     LOAD_NAME                       33: NOTSET
        210     LOAD_CONST                      21: 'NOTSET'
        212     BUILD_MAP                       6
        214     STORE_NAME                      34: _levelToName
        216     LOAD_NAME                       26: CRITICAL
        218     LOAD_NAME                       27: FATAL
        220     LOAD_NAME                       28: ERROR
        222     LOAD_NAME                       29: WARNING
        224     LOAD_NAME                       29: WARNING
        226     LOAD_NAME                       31: INFO
        228     LOAD_NAME                       32: DEBUG
        230     LOAD_NAME                       33: NOTSET
        232     LOAD_CONST                      22: ('CRITICAL', 'FATAL', 'ERROR', 'WARN', 'WARNING', 'INFO', 'DEBUG', 'NOTSET')
        234     BUILD_CONST_KEY_MAP             8
        236     STORE_NAME                      35: _nameToLevel
        238     LOAD_CONST                      23: <CODE> getLevelName
        240     LOAD_CONST                      24: 'getLevelName'
        242     MAKE_FUNCTION                   0
        244     STORE_NAME                      36: getLevelName
        246     LOAD_CONST                      25: <CODE> addLevelName
        248     LOAD_CONST                      26: 'addLevelName'
        250     MAKE_FUNCTION                   0
        252     STORE_NAME                      37: addLevelName
        254     LOAD_NAME                       38: hasattr
        256     LOAD_NAME                       1: sys
        258     LOAD_CONST                      27: '_getframe'
        260     CALL_FUNCTION                   2
        262     POP_JUMP_IF_FALSE               137 (to 274)
        264     LOAD_CONST                      28: <CODE> <lambda>
        266     LOAD_CONST                      29: '<lambda>'
        268     MAKE_FUNCTION                   0
        270     STORE_NAME                      39: currentframe
        272     JUMP_FORWARD                    4 (to 282)
        274     LOAD_CONST                      30: <CODE> currentframe
        276     LOAD_CONST                      31: 'currentframe'
        278     MAKE_FUNCTION                   0
        280     STORE_NAME                      39: currentframe
        282     LOAD_NAME                       2: os
        284     LOAD_ATTR                       40: path
        286     LOAD_METHOD                     41: normcase
        288     LOAD_NAME                       37: addLevelName
        290     LOAD_ATTR                       42: __code__
        292     LOAD_ATTR                       43: co_filename
        294     CALL_METHOD                     1
        296     STORE_NAME                      44: _srcfile
        298     LOAD_CONST                      32: <CODE> _checkLevel
        300     LOAD_CONST                      33: '_checkLevel'
        302     MAKE_FUNCTION                   0
        304     STORE_NAME                      45: _checkLevel
        306     LOAD_NAME                       16: threading
        308     LOAD_METHOD                     46: RLock
        310     CALL_METHOD                     0
        312     STORE_NAME                      47: _lock
        314     LOAD_CONST                      34: <CODE> _acquireLock
        316     LOAD_CONST                      35: '_acquireLock'
        318     MAKE_FUNCTION                   0
        320     STORE_NAME                      48: _acquireLock
        322     LOAD_CONST                      36: <CODE> _releaseLock
        324     LOAD_CONST                      37: '_releaseLock'
        326     MAKE_FUNCTION                   0
        328     STORE_NAME                      49: _releaseLock
        330     LOAD_NAME                       38: hasattr
        332     LOAD_NAME                       2: os
        334     LOAD_CONST                      38: 'register_at_fork'
        336     CALL_FUNCTION                   2
        338     POP_JUMP_IF_TRUE                175 (to 350)
        340     LOAD_CONST                      39: <CODE> _register_at_fork_reinit_lock
        342     LOAD_CONST                      40: '_register_at_fork_reinit_lock'
        344     MAKE_FUNCTION                   0
        346     STORE_NAME                      50: _register_at_fork_reinit_lock
        348     JUMP_FORWARD                    20 (to 390)
        350     LOAD_NAME                       8: weakref
        352     LOAD_METHOD                     51: WeakSet
        354     CALL_METHOD                     0
        356     STORE_NAME                      52: _at_fork_reinit_lock_weakset
        358     LOAD_CONST                      41: <CODE> _register_at_fork_reinit_lock
        360     LOAD_CONST                      40: '_register_at_fork_reinit_lock'
        362     MAKE_FUNCTION                   0
        364     STORE_NAME                      50: _register_at_fork_reinit_lock
        366     LOAD_CONST                      42: <CODE> _after_at_fork_child_reinit_locks
        368     LOAD_CONST                      43: '_after_at_fork_child_reinit_locks'
        370     MAKE_FUNCTION                   0
        372     STORE_NAME                      53: _after_at_fork_child_reinit_locks
        374     LOAD_NAME                       2: os
        376     LOAD_ATTR                       54: register_at_fork
        378     LOAD_NAME                       48: _acquireLock
        380     LOAD_NAME                       53: _after_at_fork_child_reinit_locks
        382     LOAD_NAME                       49: _releaseLock
        384     LOAD_CONST                      44: ('before', 'after_in_child', 'after_in_parent')
        386     CALL_FUNCTION_KW                3
        388     POP_TOP                         
        390     LOAD_BUILD_CLASS                
        392     LOAD_CONST                      45: <CODE> LogRecord
        394     LOAD_CONST                      46: 'LogRecord'
        396     MAKE_FUNCTION                   0
        398     LOAD_CONST                      46: 'LogRecord'
        400     LOAD_NAME                       55: object
        402     CALL_FUNCTION                   3
        404     STORE_NAME                      56: LogRecord
        406     LOAD_NAME                       56: LogRecord
        408     STORE_GLOBAL                    57: _logRecordFactory
        410     LOAD_CONST                      47: <CODE> setLogRecordFactory
        412     LOAD_CONST                      48: 'setLogRecordFactory'
        414     MAKE_FUNCTION                   0
        416     STORE_NAME                      58: setLogRecordFactory
        418     LOAD_CONST                      49: <CODE> getLogRecordFactory
        420     LOAD_CONST                      50: 'getLogRecordFactory'
        422     MAKE_FUNCTION                   0
        424     STORE_NAME                      59: getLogRecordFactory
        426     LOAD_CONST                      51: <CODE> makeLogRecord
        428     LOAD_CONST                      52: 'makeLogRecord'
        430     MAKE_FUNCTION                   0
        432     STORE_NAME                      60: makeLogRecord
        434     LOAD_NAME                       14: StrFormatter
        436     CALL_FUNCTION                   0
        438     STORE_NAME                      61: _str_formatter
        440     DELETE_NAME                     14: StrFormatter
        442     LOAD_BUILD_CLASS                
        444     LOAD_CONST                      53: <CODE> PercentStyle
        446     LOAD_CONST                      54: 'PercentStyle'
        448     MAKE_FUNCTION                   0
        450     LOAD_CONST                      54: 'PercentStyle'
        452     LOAD_NAME                       55: object
        454     CALL_FUNCTION                   3
        456     STORE_NAME                      62: PercentStyle
        458     LOAD_BUILD_CLASS                
        460     LOAD_CONST                      55: <CODE> StrFormatStyle
        462     LOAD_CONST                      56: 'StrFormatStyle'
        464     MAKE_FUNCTION                   0
        466     LOAD_CONST                      56: 'StrFormatStyle'
        468     LOAD_NAME                       62: PercentStyle
        470     CALL_FUNCTION                   3
        472     STORE_NAME                      63: StrFormatStyle
        474     LOAD_BUILD_CLASS                
        476     LOAD_CONST                      57: <CODE> StringTemplateStyle
        478     LOAD_CONST                      58: 'StringTemplateStyle'
        480     MAKE_FUNCTION                   0
        482     LOAD_CONST                      58: 'StringTemplateStyle'
        484     LOAD_NAME                       62: PercentStyle
        486     CALL_FUNCTION                   3
        488     STORE_NAME                      64: StringTemplateStyle
        490     LOAD_CONST                      59: '%(levelname)s:%(name)s:%(message)s'
        492     STORE_NAME                      65: BASIC_FORMAT
        494     LOAD_NAME                       62: PercentStyle
        496     LOAD_NAME                       65: BASIC_FORMAT
        498     BUILD_TUPLE                     2
        500     LOAD_NAME                       63: StrFormatStyle
        502     LOAD_CONST                      60: '{levelname}:{name}:{message}'
        504     BUILD_TUPLE                     2
        506     LOAD_NAME                       64: StringTemplateStyle
        508     LOAD_CONST                      61: '${levelname}:${name}:${message}'
        510     BUILD_TUPLE                     2
        512     LOAD_CONST                      62: ('%', '{', '$')
        514     BUILD_CONST_KEY_MAP             3
        516     STORE_NAME                      66: _STYLES
        518     LOAD_BUILD_CLASS                
        520     LOAD_CONST                      63: <CODE> Formatter
        522     LOAD_CONST                      64: 'Formatter'
        524     MAKE_FUNCTION                   0
        526     LOAD_CONST                      64: 'Formatter'
        528     LOAD_NAME                       55: object
        530     CALL_FUNCTION                   3
        532     STORE_NAME                      13: Formatter
        534     LOAD_NAME                       13: Formatter
        536     CALL_FUNCTION                   0
        538     STORE_NAME                      67: _defaultFormatter
        540     LOAD_BUILD_CLASS                
        542     LOAD_CONST                      65: <CODE> BufferingFormatter
        544     LOAD_CONST                      66: 'BufferingFormatter'
        546     MAKE_FUNCTION                   0
        548     LOAD_CONST                      66: 'BufferingFormatter'
        550     LOAD_NAME                       55: object
        552     CALL_FUNCTION                   3
        554     STORE_NAME                      68: BufferingFormatter
        556     LOAD_BUILD_CLASS                
        558     LOAD_CONST                      67: <CODE> Filter
        560     LOAD_CONST                      68: 'Filter'
        562     MAKE_FUNCTION                   0
        564     LOAD_CONST                      68: 'Filter'
        566     LOAD_NAME                       55: object
        568     CALL_FUNCTION                   3
        570     STORE_NAME                      69: Filter
        572     LOAD_BUILD_CLASS                
        574     LOAD_CONST                      69: <CODE> Filterer
        576     LOAD_CONST                      70: 'Filterer'
        578     MAKE_FUNCTION                   0
        580     LOAD_CONST                      70: 'Filterer'
        582     LOAD_NAME                       55: object
        584     CALL_FUNCTION                   3
        586     STORE_NAME                      70: Filterer
        588     LOAD_NAME                       8: weakref
        590     LOAD_METHOD                     71: WeakValueDictionary
        592     CALL_METHOD                     0
        594     STORE_NAME                      72: _handlers
        596     BUILD_LIST                      0
        598     STORE_NAME                      73: _handlerList
        600     LOAD_CONST                      71: <CODE> _removeHandlerRef
        602     LOAD_CONST                      72: '_removeHandlerRef'
        604     MAKE_FUNCTION                   0
        606     STORE_NAME                      74: _removeHandlerRef
        608     LOAD_CONST                      73: <CODE> _addHandlerRef
        610     LOAD_CONST                      74: '_addHandlerRef'
        612     MAKE_FUNCTION                   0
        614     STORE_NAME                      75: _addHandlerRef
        616     LOAD_BUILD_CLASS                
        618     LOAD_CONST                      75: <CODE> Handler
        620     LOAD_CONST                      76: 'Handler'
        622     MAKE_FUNCTION                   0
        624     LOAD_CONST                      76: 'Handler'
        626     LOAD_NAME                       70: Filterer
        628     CALL_FUNCTION                   3
        630     STORE_NAME                      76: Handler
        632     LOAD_BUILD_CLASS                
        634     LOAD_CONST                      77: <CODE> StreamHandler
        636     LOAD_CONST                      78: 'StreamHandler'
        638     MAKE_FUNCTION                   0
        640     LOAD_CONST                      78: 'StreamHandler'
        642     LOAD_NAME                       76: Handler
        644     CALL_FUNCTION                   3
        646     STORE_NAME                      77: StreamHandler
        648     LOAD_BUILD_CLASS                
        650     LOAD_CONST                      79: <CODE> FileHandler
        652     LOAD_CONST                      80: 'FileHandler'
        654     MAKE_FUNCTION                   0
        656     LOAD_CONST                      80: 'FileHandler'
        658     LOAD_NAME                       77: StreamHandler
        660     CALL_FUNCTION                   3
        662     STORE_NAME                      78: FileHandler
        664     LOAD_BUILD_CLASS                
        666     LOAD_CONST                      81: <CODE> _StderrHandler
        668     LOAD_CONST                      82: '_StderrHandler'
        670     MAKE_FUNCTION                   0
        672     LOAD_CONST                      82: '_StderrHandler'
        674     LOAD_NAME                       77: StreamHandler
        676     CALL_FUNCTION                   3
        678     STORE_NAME                      79: _StderrHandler
        680     LOAD_NAME                       79: _StderrHandler
        682     LOAD_NAME                       29: WARNING
        684     CALL_FUNCTION                   1
        686     STORE_NAME                      80: _defaultLastResort
        688     LOAD_NAME                       80: _defaultLastResort
        690     STORE_NAME                      81: lastResort
        692     LOAD_BUILD_CLASS                
        694     LOAD_CONST                      83: <CODE> PlaceHolder
        696     LOAD_CONST                      84: 'PlaceHolder'
        698     MAKE_FUNCTION                   0
        700     LOAD_CONST                      84: 'PlaceHolder'
        702     LOAD_NAME                       55: object
        704     CALL_FUNCTION                   3
        706     STORE_NAME                      82: PlaceHolder
        708     LOAD_CONST                      85: <CODE> setLoggerClass
        710     LOAD_CONST                      86: 'setLoggerClass'
        712     MAKE_FUNCTION                   0
        714     STORE_NAME                      83: setLoggerClass
        716     LOAD_CONST                      87: <CODE> getLoggerClass
        718     LOAD_CONST                      88: 'getLoggerClass'
        720     MAKE_FUNCTION                   0
        722     STORE_NAME                      84: getLoggerClass
        724     LOAD_BUILD_CLASS                
        726     LOAD_CONST                      89: <CODE> Manager
        728     LOAD_CONST                      90: 'Manager'
        730     MAKE_FUNCTION                   0
        732     LOAD_CONST                      90: 'Manager'
        734     LOAD_NAME                       55: object
        736     CALL_FUNCTION                   3
        738     STORE_NAME                      85: Manager
        740     LOAD_BUILD_CLASS                
        742     LOAD_CONST                      91: <CODE> Logger
        744     LOAD_CONST                      92: 'Logger'
        746     MAKE_FUNCTION                   0
        748     LOAD_CONST                      92: 'Logger'
        750     LOAD_NAME                       70: Filterer
        752     CALL_FUNCTION                   3
        754     STORE_NAME                      86: Logger
        756     LOAD_BUILD_CLASS                
        758     LOAD_CONST                      93: <CODE> RootLogger
        760     LOAD_CONST                      94: 'RootLogger'
        762     MAKE_FUNCTION                   0
        764     LOAD_CONST                      94: 'RootLogger'
        766     LOAD_NAME                       86: Logger
        768     CALL_FUNCTION                   3
        770     STORE_NAME                      87: RootLogger
        772     LOAD_NAME                       86: Logger
        774     STORE_GLOBAL                    88: _loggerClass
        776     LOAD_BUILD_CLASS                
        778     LOAD_CONST                      95: <CODE> LoggerAdapter
        780     LOAD_CONST                      96: 'LoggerAdapter'
        782     MAKE_FUNCTION                   0
        784     LOAD_CONST                      96: 'LoggerAdapter'
        786     LOAD_NAME                       55: object
        788     CALL_FUNCTION                   3
        790     STORE_NAME                      89: LoggerAdapter
        792     LOAD_NAME                       87: RootLogger
        794     LOAD_NAME                       29: WARNING
        796     CALL_FUNCTION                   1
        798     STORE_NAME                      90: root
        800     LOAD_NAME                       90: root
        802     LOAD_NAME                       86: Logger
        804     STORE_ATTR                      90: root
        806     LOAD_NAME                       85: Manager
        808     LOAD_NAME                       86: Logger
        810     LOAD_ATTR                       90: root
        812     CALL_FUNCTION                   1
        814     LOAD_NAME                       86: Logger
        816     STORE_ATTR                      91: manager
        818     LOAD_CONST                      97: <CODE> basicConfig
        820     LOAD_CONST                      98: 'basicConfig'
        822     MAKE_FUNCTION                   0
        824     STORE_NAME                      92: basicConfig
        826     LOAD_CONST                      130: (None,)
        828     LOAD_CONST                      99: <CODE> getLogger
        830     LOAD_CONST                      100: 'getLogger'
        832     MAKE_FUNCTION                   1
        834     STORE_NAME                      93: getLogger
        836     LOAD_CONST                      101: <CODE> critical
        838     LOAD_CONST                      102: 'critical'
        840     MAKE_FUNCTION                   0
        842     STORE_NAME                      94: critical
        844     LOAD_CONST                      103: <CODE> fatal
        846     LOAD_CONST                      104: 'fatal'
        848     MAKE_FUNCTION                   0
        850     STORE_NAME                      95: fatal
        852     LOAD_CONST                      105: <CODE> error
        854     LOAD_CONST                      106: 'error'
        856     MAKE_FUNCTION                   0
        858     STORE_NAME                      96: error
        860     LOAD_CONST                      10: True
        862     LOAD_CONST                      107: ('exc_info',)
        864     BUILD_CONST_KEY_MAP             1
        866     LOAD_CONST                      108: <CODE> exception
        868     LOAD_CONST                      109: 'exception'
        870     MAKE_FUNCTION                   2
        872     STORE_NAME                      97: exception
        874     LOAD_CONST                      110: <CODE> warning
        876     LOAD_CONST                      111: 'warning'
        878     MAKE_FUNCTION                   0
        880     STORE_NAME                      98: warning
        882     LOAD_CONST                      112: <CODE> warn
        884     LOAD_CONST                      113: 'warn'
        886     MAKE_FUNCTION                   0
        888     STORE_NAME                      99: warn
        890     LOAD_CONST                      114: <CODE> info
        892     LOAD_CONST                      115: 'info'
        894     MAKE_FUNCTION                   0
        896     STORE_NAME                      100: info
        898     LOAD_CONST                      116: <CODE> debug
        900     LOAD_CONST                      117: 'debug'
        902     MAKE_FUNCTION                   0
        904     STORE_NAME                      101: debug
        906     LOAD_CONST                      118: <CODE> log
        908     LOAD_CONST                      119: 'log'
        910     MAKE_FUNCTION                   0
        912     STORE_NAME                      102: log
        914     LOAD_NAME                       26: CRITICAL
        916     BUILD_TUPLE                     1
        918     LOAD_CONST                      120: <CODE> disable
        920     LOAD_CONST                      121: 'disable'
        922     MAKE_FUNCTION                   1
        924     STORE_NAME                      103: disable
        926     LOAD_NAME                       73: _handlerList
        928     BUILD_TUPLE                     1
        930     LOAD_CONST                      122: <CODE> shutdown
        932     LOAD_CONST                      123: 'shutdown'
        934     MAKE_FUNCTION                   1
        936     STORE_NAME                      104: shutdown
        938     LOAD_CONST                      1: 0
        940     LOAD_CONST                      2: None
        942     IMPORT_NAME                     105: atexit
        944     STORE_NAME                      105: atexit
        946     LOAD_NAME                       105: atexit
        948     LOAD_METHOD                     106: register
        950     LOAD_NAME                       104: shutdown
        952     CALL_METHOD                     1
        954     POP_TOP                         
        956     LOAD_BUILD_CLASS                
        958     LOAD_CONST                      124: <CODE> NullHandler
        960     LOAD_CONST                      125: 'NullHandler'
        962     MAKE_FUNCTION                   0
        964     LOAD_CONST                      125: 'NullHandler'
        966     LOAD_NAME                       76: Handler
        968     CALL_FUNCTION                   3
        970     STORE_NAME                      107: NullHandler
        972     LOAD_CONST                      2: None
        974     STORE_GLOBAL                    108: _warnings_showwarning
        976     LOAD_CONST                      131: (None, None)
        978     LOAD_CONST                      126: <CODE> _showwarning
        980     LOAD_CONST                      127: '_showwarning'
        982     MAKE_FUNCTION                   1
        984     STORE_NAME                      109: _showwarning
        986     LOAD_CONST                      128: <CODE> captureWarnings
        988     LOAD_CONST                      129: 'captureWarnings'
        990     MAKE_FUNCTION                   0
        992     STORE_NAME                      110: captureWarnings
        994     LOAD_CONST                      2: None
        996     RETURN_VALUE                    
