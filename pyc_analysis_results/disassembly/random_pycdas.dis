random.pyc (Python 3.10)
[Code]
    File Name: random.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 8
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        'warnings'
        'warn'
        '_warn'
        'math'
        'log'
        '_log'
        'exp'
        '_exp'
        'pi'
        '_pi'
        'e'
        '_e'
        'ceil'
        '_ceil'
        'sqrt'
        '_sqrt'
        'acos'
        '_acos'
        'cos'
        '_cos'
        'sin'
        '_sin'
        'tau'
        'TWOPI'
        'floor'
        '_floor'
        'isfinite'
        '_isfinite'
        'os'
        'urandom'
        '_urandom'
        '_collections_abc'
        'Set'
        '_Set'
        'Sequence'
        '_Sequence'
        'operator'
        'index'
        '_index'
        'itertools'
        'accumulate'
        '_accumulate'
        'repeat'
        '_repeat'
        'bisect'
        '_bisect'
        '_os'
        '_random'
        '_sha512'
        'sha512'
        'ImportError'
        'hashlib'
        '__all__'
        'NV_MAGICCONST'
        'LOG4'
        'SG_MAGICCONST'
        'BPF'
        'RECIP_BPF'
        '_ONE'
        'Random'
        'SystemRandom'
        '_inst'
        'seed'
        'random'
        'uniform'
        'triangular'
        'randint'
        'choice'
        'randrange'
        'sample'
        'shuffle'
        'choices'
        'normalvariate'
        'lognormvariate'
        'expovariate'
        'vonmisesvariate'
        'gammavariate'
        'gauss'
        'betavariate'
        'paretovariate'
        'weibullvariate'
        'getstate'
        'setstate'
        'getrandbits'
        'randbytes'
        '_test_generator'
        '_test'
        'hasattr'
        'register_at_fork'
        '__name__'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        'Random variable generators.\n\n    bytes\n    -----\n           uniform bytes (values between 0 and 255)\n\n    integers\n    --------\n           uniform within range\n\n    sequences\n    ---------\n           pick random element\n           pick random sample\n           pick weighted random sample\n           generate random permutation\n\n    distributions on the real line:\n    ------------------------------\n           uniform\n           triangular\n           normal (Gaussian)\n           lognormal\n           negative exponential\n           gamma\n           beta\n           pareto\n           Weibull\n\n    distributions on the circle (angles 0 to 2pi)\n    ---------------------------------------------\n           circular uniform\n           von Mises\n\nGeneral notes on the underlying Mersenne Twister core generator:\n\n* The period is 2**19937-1.\n* It is one of the most extensively tested generators in existence.\n* The random() method is implemented in C, executes in a single Python step,\n  and is, therefore, threadsafe.\n\n'
        0
        (
            'warn'
        )
        (
            'log'
            'exp'
            'pi'
            'e'
            'ceil'
        )
        (
            'sqrt'
            'acos'
            'cos'
            'sin'
        )
        (
            'tau'
            'floor'
            'isfinite'
        )
        (
            'urandom'
        )
        (
            'Set'
            'Sequence'
        )
        (
            'index'
        )
        (
            'accumulate'
            'repeat'
        )
        (
            'bisect'
        )
        None
        (
            'sha512'
        )
        (
            'Random'
            'SystemRandom'
            'betavariate'
            'choice'
            'choices'
            'expovariate'
            'gammavariate'
            'gauss'
            'getrandbits'
            'getstate'
            'lognormvariate'
            'normalvariate'
            'paretovariate'
            'randbytes'
            'randint'
            'random'
            'randrange'
            'sample'
            'seed'
            'setstate'
            'shuffle'
            'triangular'
            'uniform'
            'vonmisesvariate'
            'weibullvariate'
        )
        4
        -0.5
        2
        4
        1
        4.5
        53
        2
        1
        [Code]
            File Name: random.py
            Object Name: Random
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'VERSION'
                '__init__'
                'seed'
                'getstate'
                'setstate'
                '__getstate__'
                '__setstate__'
                '__reduce__'
                '__init_subclass__'
                '_randbelow_with_getrandbits'
                'BPF'
                '_randbelow_without_getrandbits'
                '_randbelow'
                'randbytes'
                '_ONE'
                'randrange'
                'randint'
                'choice'
                'shuffle'
                'sample'
                'choices'
                'uniform'
                'triangular'
                'normalvariate'
                'gauss'
                'lognormvariate'
                'expovariate'
                'vonmisesvariate'
                'gammavariate'
                'betavariate'
                'paretovariate'
                'weibullvariate'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'Random'
                "Random number generator base class used by bound module functions.\n\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods:  random(), seed(), getstate(), and setstate().\n    Optionally, implement a getrandbits() method so that randrange()\n    can cover arbitrarily large ranges.\n\n    "
                3
                None
                [Code]
                    File Name: random.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'seed'
                        'gauss_next'
                    [Var Names]
                        'self'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Initialize an instance.\n\n        Optional argument x controls seeding, as for Random.seed().\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: seed
                        4       LOAD_FAST                       1: x
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_CONST                      1: None
                        12      LOAD_FAST                       0: self
                        14      STORE_ATTR                      1: gauss_next
                        16      LOAD_CONST                      1: None
                        18      RETURN_VALUE                    
                'Random.__init__'
                2
                [Code]
                    File Name: random.py
                    Object Name: seed
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'isinstance'
                        'str'
                        'bytes'
                        'decode'
                        'ord'
                        'map'
                        'len'
                        'bytearray'
                        'encode'
                        'int'
                        'from_bytes'
                        '_sha512'
                        'digest'
                        'type'
                        'float'
                        '_warn'
                        'DeprecationWarning'
                        'super'
                        'seed'
                        'gauss_next'
                    [Var Names]
                        'self'
                        'a'
                        'version'
                        'x'
                        'c'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        'Initialize internal state from a seed.\n\n        The only supported seed types are None, int, float,\n        str, bytes, and bytearray.\n\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n\n        If *a* is an int, all bits are used.\n\n        For version 2 (the default), all of the bits are used if *a* is a str,\n        bytes, or bytearray.  For version 1 (provided for reproducing random\n        sequences from older versions of Python), the algorithm for str and\n        bytes generates a narrower range of seeds.\n\n        '
                        1
                        'latin-1'
                        0
                        7
                        1000003
                        0xFFFFFFFFFFFFFFFF
                        -1
                        -2
                        2
                        'big'
                        None
                        'Seeding based on hashing is deprecated\nsince Python 3.9 and will be removed in a subsequent version. The only \nsupported seed types are: None, int, float, str, bytes, and bytearray.'
                    [Disassembly]
                        0       LOAD_FAST                       2: version
                        2       LOAD_CONST                      1: 1
                        4       COMPARE_OP                      2 (==)
                        6       POP_JUMP_IF_FALSE               66 (to 132)
                        8       LOAD_GLOBAL                     0: isinstance
                        10      LOAD_FAST                       1: a
                        12      LOAD_GLOBAL                     1: str
                        14      LOAD_GLOBAL                     2: bytes
                        16      BUILD_TUPLE                     2
                        18      CALL_FUNCTION                   2
                        20      POP_JUMP_IF_FALSE               66 (to 132)
                        22      LOAD_GLOBAL                     0: isinstance
                        24      LOAD_FAST                       1: a
                        26      LOAD_GLOBAL                     2: bytes
                        28      CALL_FUNCTION                   2
                        30      POP_JUMP_IF_FALSE               21 (to 42)
                        32      LOAD_FAST                       1: a
                        34      LOAD_METHOD                     3: decode
                        36      LOAD_CONST                      2: 'latin-1'
                        38      CALL_METHOD                     1
                        40      JUMP_FORWARD                    1 (to 44)
                        42      LOAD_FAST                       1: a
                        44      STORE_FAST                      1: a
                        46      LOAD_FAST                       1: a
                        48      POP_JUMP_IF_FALSE               33 (to 66)
                        50      LOAD_GLOBAL                     4: ord
                        52      LOAD_FAST                       1: a
                        54      LOAD_CONST                      3: 0
                        56      BINARY_SUBSCR                   
                        58      CALL_FUNCTION                   1
                        60      LOAD_CONST                      4: 7
                        62      BINARY_LSHIFT                   
                        64      JUMP_FORWARD                    1 (to 68)
                        66      LOAD_CONST                      3: 0
                        68      STORE_FAST                      3: x
                        70      LOAD_GLOBAL                     5: map
                        72      LOAD_GLOBAL                     4: ord
                        74      LOAD_FAST                       1: a
                        76      CALL_FUNCTION                   2
                        78      GET_ITER                        
                        80      FOR_ITER                        10 (to 102)
                        82      STORE_FAST                      4: c
                        84      LOAD_CONST                      5: 1000003
                        86      LOAD_FAST                       3: x
                        88      BINARY_MULTIPLY                 
                        90      LOAD_FAST                       4: c
                        92      BINARY_XOR                      
                        94      LOAD_CONST                      6: 0xFFFFFFFFFFFFFFFF
                        96      BINARY_AND                      
                        98      STORE_FAST                      3: x
                        100     JUMP_ABSOLUTE                   40 (to 80)
                        102     LOAD_FAST                       3: x
                        104     LOAD_GLOBAL                     6: len
                        106     LOAD_FAST                       1: a
                        108     CALL_FUNCTION                   1
                        110     INPLACE_XOR                     
                        112     STORE_FAST                      3: x
                        114     LOAD_FAST                       3: x
                        116     LOAD_CONST                      7: -1
                        118     COMPARE_OP                      2 (==)
                        120     POP_JUMP_IF_FALSE               63 (to 126)
                        122     LOAD_CONST                      8: -2
                        124     JUMP_FORWARD                    1 (to 128)
                        126     LOAD_FAST                       3: x
                        128     STORE_FAST                      1: a
                        130     JUMP_FORWARD                    53 (to 238)
                        132     LOAD_FAST                       2: version
                        134     LOAD_CONST                      9: 2
                        136     COMPARE_OP                      2 (==)
                        138     POP_JUMP_IF_FALSE               100 (to 200)
                        140     LOAD_GLOBAL                     0: isinstance
                        142     LOAD_FAST                       1: a
                        144     LOAD_GLOBAL                     1: str
                        146     LOAD_GLOBAL                     2: bytes
                        148     LOAD_GLOBAL                     7: bytearray
                        150     BUILD_TUPLE                     3
                        152     CALL_FUNCTION                   2
                        154     POP_JUMP_IF_FALSE               100 (to 200)
                        156     LOAD_GLOBAL                     0: isinstance
                        158     LOAD_FAST                       1: a
                        160     LOAD_GLOBAL                     1: str
                        162     CALL_FUNCTION                   2
                        164     POP_JUMP_IF_FALSE               87 (to 174)
                        166     LOAD_FAST                       1: a
                        168     LOAD_METHOD                     8: encode
                        170     CALL_METHOD                     0
                        172     STORE_FAST                      1: a
                        174     LOAD_GLOBAL                     9: int
                        176     LOAD_METHOD                     10: from_bytes
                        178     LOAD_FAST                       1: a
                        180     LOAD_GLOBAL                     11: _sha512
                        182     LOAD_FAST                       1: a
                        184     CALL_FUNCTION                   1
                        186     LOAD_METHOD                     12: digest
                        188     CALL_METHOD                     0
                        190     BINARY_ADD                      
                        192     LOAD_CONST                      10: 'big'
                        194     CALL_METHOD                     2
                        196     STORE_FAST                      1: a
                        198     JUMP_FORWARD                    19 (to 238)
                        200     LOAD_GLOBAL                     0: isinstance
                        202     LOAD_FAST                       1: a
                        204     LOAD_GLOBAL                     13: type
                        206     LOAD_CONST                      11: None
                        208     CALL_FUNCTION                   1
                        210     LOAD_GLOBAL                     9: int
                        212     LOAD_GLOBAL                     14: float
                        214     LOAD_GLOBAL                     1: str
                        216     LOAD_GLOBAL                     2: bytes
                        218     LOAD_GLOBAL                     7: bytearray
                        220     BUILD_TUPLE                     6
                        222     CALL_FUNCTION                   2
                        224     POP_JUMP_IF_TRUE                119 (to 238)
                        226     LOAD_GLOBAL                     15: _warn
                        228     LOAD_CONST                      12: 'Seeding based on hashing is deprecated\nsince Python 3.9 and will be removed in a subsequent version. The only \nsupported seed types are: None, int, float, str, bytes, and bytearray.'
                        230     LOAD_GLOBAL                     16: DeprecationWarning
                        232     LOAD_CONST                      9: 2
                        234     CALL_FUNCTION                   3
                        236     POP_TOP                         
                        238     LOAD_GLOBAL                     17: super
                        240     CALL_FUNCTION                   0
                        242     LOAD_METHOD                     18: seed
                        244     LOAD_FAST                       1: a
                        246     CALL_METHOD                     1
                        248     POP_TOP                         
                        250     LOAD_CONST                      11: None
                        252     LOAD_FAST                       0: self
                        254     STORE_ATTR                      19: gauss_next
                        256     LOAD_CONST                      11: None
                        258     RETURN_VALUE                    
                'Random.seed'
                [Code]
                    File Name: random.py
                    Object Name: getstate
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'VERSION'
                        'super'
                        'getstate'
                        'gauss_next'
                    [Var Names]
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        'Return internal state; can be passed to setstate() later.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: VERSION
                        4       LOAD_GLOBAL                     1: super
                        6       CALL_FUNCTION                   0
                        8       LOAD_METHOD                     2: getstate
                        10      CALL_METHOD                     0
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: gauss_next
                        16      BUILD_TUPLE                     3
                        18      RETURN_VALUE                    
                'Random.getstate'
                [Code]
                    File Name: random.py
                    Object Name: setstate
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 10
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'gauss_next'
                        'super'
                        'setstate'
                        'tuple'
                        'ValueError'
                        'TypeError'
                        'VERSION'
                    [Var Names]
                        'self'
                        'state'
                        'version'
                        'internalstate'
                        'e'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        'Restore internal state from object returned by getstate().'
                        0
                        3
                        2
                        [Code]
                            File Name: random.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                0x100000000
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_CONST                      0: 0x100000000
                                12      BINARY_MODULO                   
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      1: None
                                22      RETURN_VALUE                    
                        'Random.setstate.<locals>.<genexpr>'
                        None
                        'state with version %s passed to Random.setstate() of version %s'
                    [Disassembly]
                        0       LOAD_FAST                       1: state
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       STORE_FAST                      2: version
                        8       LOAD_FAST                       2: version
                        10      LOAD_CONST                      2: 3
                        12      COMPARE_OP                      2 (==)
                        14      POP_JUMP_IF_FALSE               22 (to 44)
                        16      LOAD_FAST                       1: state
                        18      UNPACK_SEQUENCE                 3
                        20      STORE_FAST                      2: version
                        22      STORE_FAST                      3: internalstate
                        24      LOAD_FAST                       0: self
                        26      STORE_ATTR                      0: gauss_next
                        28      LOAD_GLOBAL                     1: super
                        30      CALL_FUNCTION                   0
                        32      LOAD_METHOD                     2: setstate
                        34      LOAD_FAST                       3: internalstate
                        36      CALL_METHOD                     1
                        38      POP_TOP                         
                        40      LOAD_CONST                      6: None
                        42      RETURN_VALUE                    
                        44      LOAD_FAST                       2: version
                        46      LOAD_CONST                      3: 2
                        48      COMPARE_OP                      2 (==)
                        50      POP_JUMP_IF_FALSE               67 (to 134)
                        52      LOAD_FAST                       1: state
                        54      UNPACK_SEQUENCE                 3
                        56      STORE_FAST                      2: version
                        58      STORE_FAST                      3: internalstate
                        60      LOAD_FAST                       0: self
                        62      STORE_ATTR                      0: gauss_next
                        64      SETUP_FINALLY                   11 (to 88)
                        66      LOAD_GLOBAL                     3: tuple
                        68      LOAD_CONST                      4: <CODE> <genexpr>
                        70      LOAD_CONST                      5: 'Random.setstate.<locals>.<genexpr>'
                        72      MAKE_FUNCTION                   0
                        74      LOAD_FAST                       3: internalstate
                        76      GET_ITER                        
                        78      CALL_FUNCTION                   1
                        80      CALL_FUNCTION                   1
                        82      STORE_FAST                      3: internalstate
                        84      POP_BLOCK                       
                        86      JUMP_FORWARD                    15 (to 118)
                        88      DUP_TOP                         
                        90      LOAD_GLOBAL                     4: ValueError
                        92      JUMP_IF_NOT_EXC_MATCH           58 (to 116)
                        94      POP_TOP                         
                        96      STORE_FAST                      4: e
                        98      POP_TOP                         
                        100     SETUP_FINALLY                   3 (to 108)
                        102     LOAD_GLOBAL                     5: TypeError
                        104     LOAD_FAST                       4: e
                        106     RAISE_VARARGS                   2
                        108     LOAD_CONST                      6: None
                        110     STORE_FAST                      4: e
                        112     DELETE_FAST                     4: e
                        114     RERAISE                         1
                        116     RERAISE                         0
                        118     LOAD_GLOBAL                     1: super
                        120     CALL_FUNCTION                   0
                        122     LOAD_METHOD                     2: setstate
                        124     LOAD_FAST                       3: internalstate
                        126     CALL_METHOD                     1
                        128     POP_TOP                         
                        130     LOAD_CONST                      6: None
                        132     RETURN_VALUE                    
                        134     LOAD_GLOBAL                     4: ValueError
                        136     LOAD_CONST                      7: 'state with version %s passed to Random.setstate() of version %s'
                        138     LOAD_FAST                       2: version
                        140     LOAD_FAST                       0: self
                        142     LOAD_ATTR                       6: VERSION
                        144     BUILD_TUPLE                     2
                        146     BINARY_MODULO                   
                        148     CALL_FUNCTION                   1
                        150     RAISE_VARARGS                   1
                'Random.setstate'
                [Code]
                    File Name: random.py
                    Object Name: __getstate__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getstate'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: getstate
                        4       CALL_METHOD                     0
                        6       RETURN_VALUE                    
                'Random.__getstate__'
                [Code]
                    File Name: random.py
                    Object Name: __setstate__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'setstate'
                    [Var Names]
                        'self'
                        'state'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: setstate
                        4       LOAD_FAST                       1: state
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                'Random.__setstate__'
                [Code]
                    File Name: random.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__class__'
                        'getstate'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __class__
                        4       LOAD_CONST                      1: ()
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: getstate
                        10      CALL_METHOD                     0
                        12      BUILD_TUPLE                     3
                        14      RETURN_VALUE                    
                'Random.__reduce__'
                [Code]
                    File Name: random.py
                    Object Name: __init_subclass__
                    Arg Count: 1
                    Pos Only Arg Count: 1
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        '__mro__'
                        '__dict__'
                        '_randbelow_with_getrandbits'
                        '_randbelow'
                        '_randbelow_without_getrandbits'
                    [Var Names]
                        'cls'
                        'kwargs'
                        'c'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Control how subclasses generate random integers.\n\n        The algorithm a subclass can use depends on the random() and/or\n        getrandbits() implementation available to it and determines\n        whether it can generate random integers from arbitrarily large\n        ranges.\n        '
                        '_randbelow'
                        'getrandbits'
                        'random'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: cls
                        2       LOAD_ATTR                       0: __mro__
                        4       GET_ITER                        
                        6       FOR_ITER                        34 (to 76)
                        8       STORE_FAST                      2: c
                        10      LOAD_CONST                      1: '_randbelow'
                        12      LOAD_FAST                       2: c
                        14      LOAD_ATTR                       1: __dict__
                        16      CONTAINS_OP                     0 (in)
                        18      POP_JUMP_IF_FALSE               13 (to 26)
                        20      POP_TOP                         
                        22      LOAD_CONST                      4: None
                        24      RETURN_VALUE                    
                        26      LOAD_CONST                      2: 'getrandbits'
                        28      LOAD_FAST                       2: c
                        30      LOAD_ATTR                       1: __dict__
                        32      CONTAINS_OP                     0 (in)
                        34      POP_JUMP_IF_FALSE               25 (to 50)
                        36      LOAD_FAST                       0: cls
                        38      LOAD_ATTR                       2: _randbelow_with_getrandbits
                        40      LOAD_FAST                       0: cls
                        42      STORE_ATTR                      3: _randbelow
                        44      POP_TOP                         
                        46      LOAD_CONST                      4: None
                        48      RETURN_VALUE                    
                        50      LOAD_CONST                      3: 'random'
                        52      LOAD_FAST                       2: c
                        54      LOAD_ATTR                       1: __dict__
                        56      CONTAINS_OP                     0 (in)
                        58      POP_JUMP_IF_FALSE               37 (to 74)
                        60      LOAD_FAST                       0: cls
                        62      LOAD_ATTR                       4: _randbelow_without_getrandbits
                        64      LOAD_FAST                       0: cls
                        66      STORE_ATTR                      3: _randbelow
                        68      POP_TOP                         
                        70      LOAD_CONST                      4: None
                        72      RETURN_VALUE                    
                        74      JUMP_ABSOLUTE                   3 (to 6)
                        76      LOAD_CONST                      4: None
                        78      RETURN_VALUE                    
                'Random.__init_subclass__'
                [Code]
                    File Name: random.py
                    Object Name: _randbelow_with_getrandbits
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getrandbits'
                        'bit_length'
                    [Var Names]
                        'self'
                        'n'
                        'getrandbits'
                        'k'
                        'r'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return a random int in the range [0,n).  Returns 0 if n==0.'
                        0
                    [Disassembly]
                        0       LOAD_FAST                       1: n
                        2       POP_JUMP_IF_TRUE                4 (to 8)
                        4       LOAD_CONST                      1: 0
                        6       RETURN_VALUE                    
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       0: getrandbits
                        12      STORE_FAST                      2: getrandbits
                        14      LOAD_FAST                       1: n
                        16      LOAD_METHOD                     1: bit_length
                        18      CALL_METHOD                     0
                        20      STORE_FAST                      3: k
                        22      LOAD_FAST                       2: getrandbits
                        24      LOAD_FAST                       3: k
                        26      CALL_FUNCTION                   1
                        28      STORE_FAST                      4: r
                        30      LOAD_FAST                       4: r
                        32      LOAD_FAST                       1: n
                        34      COMPARE_OP                      5 (>=)
                        36      POP_JUMP_IF_FALSE               27 (to 54)
                        38      LOAD_FAST                       2: getrandbits
                        40      LOAD_FAST                       3: k
                        42      CALL_FUNCTION                   1
                        44      STORE_FAST                      4: r
                        46      LOAD_FAST                       4: r
                        48      LOAD_FAST                       1: n
                        50      COMPARE_OP                      5 (>=)
                        52      POP_JUMP_IF_TRUE                19 (to 38)
                        54      LOAD_FAST                       4: r
                        56      RETURN_VALUE                    
                'Random._randbelow_with_getrandbits'
                1
                [Code]
                    File Name: random.py
                    Object Name: _randbelow_without_getrandbits
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'random'
                        '_warn'
                        '_floor'
                    [Var Names]
                        'self'
                        'n'
                        'maxsize'
                        'random'
                        'rem'
                        'limit'
                        'r'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return a random int in the range [0,n).  Returns 0 if n==0.\n\n        The implementation does not use getrandbits, but only random.\n        '
                        'Underlying random() generator does not supply \nenough bits to choose from a population range this large.\nTo remove the range limitation, add a getrandbits() method.'
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: random
                        4       STORE_FAST                      3: random
                        6       LOAD_FAST                       1: n
                        8       LOAD_FAST                       2: maxsize
                        10      COMPARE_OP                      5 (>=)
                        12      POP_JUMP_IF_FALSE               18 (to 36)
                        14      LOAD_GLOBAL                     1: _warn
                        16      LOAD_CONST                      1: 'Underlying random() generator does not supply \nenough bits to choose from a population range this large.\nTo remove the range limitation, add a getrandbits() method.'
                        18      CALL_FUNCTION                   1
                        20      POP_TOP                         
                        22      LOAD_GLOBAL                     2: _floor
                        24      LOAD_FAST                       3: random
                        26      CALL_FUNCTION                   0
                        28      LOAD_FAST                       1: n
                        30      BINARY_MULTIPLY                 
                        32      CALL_FUNCTION                   1
                        34      RETURN_VALUE                    
                        36      LOAD_FAST                       1: n
                        38      LOAD_CONST                      2: 0
                        40      COMPARE_OP                      2 (==)
                        42      POP_JUMP_IF_FALSE               24 (to 48)
                        44      LOAD_CONST                      2: 0
                        46      RETURN_VALUE                    
                        48      LOAD_FAST                       2: maxsize
                        50      LOAD_FAST                       1: n
                        52      BINARY_MODULO                   
                        54      STORE_FAST                      4: rem
                        56      LOAD_FAST                       2: maxsize
                        58      LOAD_FAST                       4: rem
                        60      BINARY_SUBTRACT                 
                        62      LOAD_FAST                       2: maxsize
                        64      BINARY_TRUE_DIVIDE              
                        66      STORE_FAST                      5: limit
                        68      LOAD_FAST                       3: random
                        70      CALL_FUNCTION                   0
                        72      STORE_FAST                      6: r
                        74      LOAD_FAST                       6: r
                        76      LOAD_FAST                       5: limit
                        78      COMPARE_OP                      5 (>=)
                        80      POP_JUMP_IF_FALSE               48 (to 96)
                        82      LOAD_FAST                       3: random
                        84      CALL_FUNCTION                   0
                        86      STORE_FAST                      6: r
                        88      LOAD_FAST                       6: r
                        90      LOAD_FAST                       5: limit
                        92      COMPARE_OP                      5 (>=)
                        94      POP_JUMP_IF_TRUE                41 (to 82)
                        96      LOAD_GLOBAL                     2: _floor
                        98      LOAD_FAST                       6: r
                        100     LOAD_FAST                       2: maxsize
                        102     BINARY_MULTIPLY                 
                        104     CALL_FUNCTION                   1
                        106     LOAD_FAST                       1: n
                        108     BINARY_MODULO                   
                        110     RETURN_VALUE                    
                'Random._randbelow_without_getrandbits'
                [Code]
                    File Name: random.py
                    Object Name: randbytes
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getrandbits'
                        'to_bytes'
                    [Var Names]
                        'self'
                        'n'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Generate n random bytes.'
                        8
                        'little'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: getrandbits
                        4       LOAD_FAST                       1: n
                        6       LOAD_CONST                      1: 8
                        8       BINARY_MULTIPLY                 
                        10      CALL_METHOD                     1
                        12      LOAD_METHOD                     1: to_bytes
                        14      LOAD_FAST                       1: n
                        16      LOAD_CONST                      2: 'little'
                        18      CALL_METHOD                     2
                        20      RETURN_VALUE                    
                'Random.randbytes'
                [Code]
                    File Name: random.py
                    Object Name: randrange
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_index'
                        'TypeError'
                        'int'
                        '_warn'
                        'DeprecationWarning'
                        'ValueError'
                        '_ONE'
                        '_randbelow'
                    [Var Names]
                        'self'
                        'start'
                        'stop'
                        'step'
                        'istart'
                        'istop'
                        'width'
                        'istep'
                        'n'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Choose a random item from range(start, stop[, step]).\n\n        This fixes the problem with randint() which includes the\n        endpoint; in Python this is usually not what you want.\n\n        '
                        'randrange() will raise TypeError in the future'
                        2
                        'non-integer arg 1 for randrange()'
                        'non-integer arguments to randrange() have been deprecated since Python 3.10 and will be removed in a subsequent version'
                        None
                        'Missing a non-None stop argument'
                        0
                        'empty range for randrange()'
                        'non-integer stop for randrange()'
                        'non-integer step for randrange()'
                        1
                        'empty range for randrange() (%d, %d, %d)'
                        'zero step for randrange()'
                    [Disassembly]
                        0       SETUP_FINALLY                   6 (to 14)
                        2       LOAD_GLOBAL                     0: _index
                        4       LOAD_FAST                       1: start
                        6       CALL_FUNCTION                   1
                        8       STORE_FAST                      4: istart
                        10      POP_BLOCK                       
                        12      JUMP_FORWARD                    33 (to 80)
                        14      DUP_TOP                         
                        16      LOAD_GLOBAL                     1: TypeError
                        18      JUMP_IF_NOT_EXC_MATCH           39 (to 78)
                        20      POP_TOP                         
                        22      POP_TOP                         
                        24      POP_TOP                         
                        26      LOAD_GLOBAL                     2: int
                        28      LOAD_FAST                       1: start
                        30      CALL_FUNCTION                   1
                        32      STORE_FAST                      4: istart
                        34      LOAD_FAST                       4: istart
                        36      LOAD_FAST                       1: start
                        38      COMPARE_OP                      3 (!=)
                        40      POP_JUMP_IF_FALSE               31 (to 62)
                        42      LOAD_GLOBAL                     3: _warn
                        44      LOAD_CONST                      1: 'randrange() will raise TypeError in the future'
                        46      LOAD_GLOBAL                     4: DeprecationWarning
                        48      LOAD_CONST                      2: 2
                        50      CALL_FUNCTION                   3
                        52      POP_TOP                         
                        54      LOAD_GLOBAL                     5: ValueError
                        56      LOAD_CONST                      3: 'non-integer arg 1 for randrange()'
                        58      CALL_FUNCTION                   1
                        60      RAISE_VARARGS                   1
                        62      LOAD_GLOBAL                     3: _warn
                        64      LOAD_CONST                      4: 'non-integer arguments to randrange() have been deprecated since Python 3.10 and will be removed in a subsequent version'
                        66      LOAD_GLOBAL                     4: DeprecationWarning
                        68      LOAD_CONST                      2: 2
                        70      CALL_FUNCTION                   3
                        72      POP_TOP                         
                        74      POP_EXCEPT                      
                        76      JUMP_FORWARD                    1 (to 80)
                        78      RERAISE                         0
                        80      LOAD_FAST                       2: stop
                        82      LOAD_CONST                      5: None
                        84      IS_OP                           0 (is)
                        86      POP_JUMP_IF_FALSE               65 (to 130)
                        88      LOAD_FAST                       3: step
                        90      LOAD_GLOBAL                     6: _ONE
                        92      IS_OP                           1 (is not)
                        94      POP_JUMP_IF_FALSE               52 (to 104)
                        96      LOAD_GLOBAL                     1: TypeError
                        98      LOAD_CONST                      6: 'Missing a non-None stop argument'
                        100     CALL_FUNCTION                   1
                        102     RAISE_VARARGS                   1
                        104     LOAD_FAST                       4: istart
                        106     LOAD_CONST                      7: 0
                        108     COMPARE_OP                      4 (>)
                        110     POP_JUMP_IF_FALSE               61 (to 122)
                        112     LOAD_FAST                       0: self
                        114     LOAD_METHOD                     7: _randbelow
                        116     LOAD_FAST                       4: istart
                        118     CALL_METHOD                     1
                        120     RETURN_VALUE                    
                        122     LOAD_GLOBAL                     5: ValueError
                        124     LOAD_CONST                      8: 'empty range for randrange()'
                        126     CALL_FUNCTION                   1
                        128     RAISE_VARARGS                   1
                        130     SETUP_FINALLY                   6 (to 144)
                        132     LOAD_GLOBAL                     0: _index
                        134     LOAD_FAST                       2: stop
                        136     CALL_FUNCTION                   1
                        138     STORE_FAST                      5: istop
                        140     POP_BLOCK                       
                        142     JUMP_FORWARD                    33 (to 210)
                        144     DUP_TOP                         
                        146     LOAD_GLOBAL                     1: TypeError
                        148     JUMP_IF_NOT_EXC_MATCH           104 (to 208)
                        150     POP_TOP                         
                        152     POP_TOP                         
                        154     POP_TOP                         
                        156     LOAD_GLOBAL                     2: int
                        158     LOAD_FAST                       2: stop
                        160     CALL_FUNCTION                   1
                        162     STORE_FAST                      5: istop
                        164     LOAD_FAST                       5: istop
                        166     LOAD_FAST                       2: stop
                        168     COMPARE_OP                      3 (!=)
                        170     POP_JUMP_IF_FALSE               96 (to 192)
                        172     LOAD_GLOBAL                     3: _warn
                        174     LOAD_CONST                      1: 'randrange() will raise TypeError in the future'
                        176     LOAD_GLOBAL                     4: DeprecationWarning
                        178     LOAD_CONST                      2: 2
                        180     CALL_FUNCTION                   3
                        182     POP_TOP                         
                        184     LOAD_GLOBAL                     5: ValueError
                        186     LOAD_CONST                      9: 'non-integer stop for randrange()'
                        188     CALL_FUNCTION                   1
                        190     RAISE_VARARGS                   1
                        192     LOAD_GLOBAL                     3: _warn
                        194     LOAD_CONST                      4: 'non-integer arguments to randrange() have been deprecated since Python 3.10 and will be removed in a subsequent version'
                        196     LOAD_GLOBAL                     4: DeprecationWarning
                        198     LOAD_CONST                      2: 2
                        200     CALL_FUNCTION                   3
                        202     POP_TOP                         
                        204     POP_EXCEPT                      
                        206     JUMP_FORWARD                    1 (to 210)
                        208     RERAISE                         0
                        210     LOAD_FAST                       5: istop
                        212     LOAD_FAST                       4: istart
                        214     BINARY_SUBTRACT                 
                        216     STORE_FAST                      6: width
                        218     SETUP_FINALLY                   6 (to 232)
                        220     LOAD_GLOBAL                     0: _index
                        222     LOAD_FAST                       3: step
                        224     CALL_FUNCTION                   1
                        226     STORE_FAST                      7: istep
                        228     POP_BLOCK                       
                        230     JUMP_FORWARD                    33 (to 298)
                        232     DUP_TOP                         
                        234     LOAD_GLOBAL                     1: TypeError
                        236     JUMP_IF_NOT_EXC_MATCH           148 (to 296)
                        238     POP_TOP                         
                        240     POP_TOP                         
                        242     POP_TOP                         
                        244     LOAD_GLOBAL                     2: int
                        246     LOAD_FAST                       3: step
                        248     CALL_FUNCTION                   1
                        250     STORE_FAST                      7: istep
                        252     LOAD_FAST                       7: istep
                        254     LOAD_FAST                       3: step
                        256     COMPARE_OP                      3 (!=)
                        258     POP_JUMP_IF_FALSE               140 (to 280)
                        260     LOAD_GLOBAL                     3: _warn
                        262     LOAD_CONST                      1: 'randrange() will raise TypeError in the future'
                        264     LOAD_GLOBAL                     4: DeprecationWarning
                        266     LOAD_CONST                      2: 2
                        268     CALL_FUNCTION                   3
                        270     POP_TOP                         
                        272     LOAD_GLOBAL                     5: ValueError
                        274     LOAD_CONST                      10: 'non-integer step for randrange()'
                        276     CALL_FUNCTION                   1
                        278     RAISE_VARARGS                   1
                        280     LOAD_GLOBAL                     3: _warn
                        282     LOAD_CONST                      4: 'non-integer arguments to randrange() have been deprecated since Python 3.10 and will be removed in a subsequent version'
                        284     LOAD_GLOBAL                     4: DeprecationWarning
                        286     LOAD_CONST                      2: 2
                        288     CALL_FUNCTION                   3
                        290     POP_TOP                         
                        292     POP_EXCEPT                      
                        294     JUMP_FORWARD                    1 (to 298)
                        296     RERAISE                         0
                        298     LOAD_FAST                       7: istep
                        300     LOAD_CONST                      11: 1
                        302     COMPARE_OP                      2 (==)
                        304     POP_JUMP_IF_FALSE               173 (to 346)
                        306     LOAD_FAST                       6: width
                        308     LOAD_CONST                      7: 0
                        310     COMPARE_OP                      4 (>)
                        312     POP_JUMP_IF_FALSE               164 (to 328)
                        314     LOAD_FAST                       4: istart
                        316     LOAD_FAST                       0: self
                        318     LOAD_METHOD                     7: _randbelow
                        320     LOAD_FAST                       6: width
                        322     CALL_METHOD                     1
                        324     BINARY_ADD                      
                        326     RETURN_VALUE                    
                        328     LOAD_GLOBAL                     5: ValueError
                        330     LOAD_CONST                      12: 'empty range for randrange() (%d, %d, %d)'
                        332     LOAD_FAST                       4: istart
                        334     LOAD_FAST                       5: istop
                        336     LOAD_FAST                       6: width
                        338     BUILD_TUPLE                     3
                        340     BINARY_MODULO                   
                        342     CALL_FUNCTION                   1
                        344     RAISE_VARARGS                   1
                        346     LOAD_FAST                       7: istep
                        348     LOAD_CONST                      7: 0
                        350     COMPARE_OP                      4 (>)
                        352     POP_JUMP_IF_FALSE               186 (to 372)
                        354     LOAD_FAST                       6: width
                        356     LOAD_FAST                       7: istep
                        358     BINARY_ADD                      
                        360     LOAD_CONST                      11: 1
                        362     BINARY_SUBTRACT                 
                        364     LOAD_FAST                       7: istep
                        366     BINARY_FLOOR_DIVIDE             
                        368     STORE_FAST                      8: n
                        370     JUMP_FORWARD                    17 (to 406)
                        372     LOAD_FAST                       7: istep
                        374     LOAD_CONST                      7: 0
                        376     COMPARE_OP                      0 (<)
                        378     POP_JUMP_IF_FALSE               199 (to 398)
                        380     LOAD_FAST                       6: width
                        382     LOAD_FAST                       7: istep
                        384     BINARY_ADD                      
                        386     LOAD_CONST                      11: 1
                        388     BINARY_ADD                      
                        390     LOAD_FAST                       7: istep
                        392     BINARY_FLOOR_DIVIDE             
                        394     STORE_FAST                      8: n
                        396     JUMP_FORWARD                    4 (to 406)
                        398     LOAD_GLOBAL                     5: ValueError
                        400     LOAD_CONST                      13: 'zero step for randrange()'
                        402     CALL_FUNCTION                   1
                        404     RAISE_VARARGS                   1
                        406     LOAD_FAST                       8: n
                        408     LOAD_CONST                      7: 0
                        410     COMPARE_OP                      1 (<=)
                        412     POP_JUMP_IF_FALSE               211 (to 422)
                        414     LOAD_GLOBAL                     5: ValueError
                        416     LOAD_CONST                      8: 'empty range for randrange()'
                        418     CALL_FUNCTION                   1
                        420     RAISE_VARARGS                   1
                        422     LOAD_FAST                       4: istart
                        424     LOAD_FAST                       7: istep
                        426     LOAD_FAST                       0: self
                        428     LOAD_METHOD                     7: _randbelow
                        430     LOAD_FAST                       8: n
                        432     CALL_METHOD                     1
                        434     BINARY_MULTIPLY                 
                        436     BINARY_ADD                      
                        438     RETURN_VALUE                    
                'Random.randrange'
                [Code]
                    File Name: random.py
                    Object Name: randint
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'randrange'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return random integer in range [a, b], including both end points.\n        '
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: randrange
                        4       LOAD_FAST                       1: a
                        6       LOAD_FAST                       2: b
                        8       LOAD_CONST                      1: 1
                        10      BINARY_ADD                      
                        12      CALL_METHOD                     2
                        14      RETURN_VALUE                    
                'Random.randint'
                [Code]
                    File Name: random.py
                    Object Name: choice
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_randbelow'
                        'len'
                    [Var Names]
                        'self'
                        'seq'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Choose a random element from a non-empty sequence.'
                    [Disassembly]
                        0       LOAD_FAST                       1: seq
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _randbelow
                        6       LOAD_GLOBAL                     1: len
                        8       LOAD_FAST                       1: seq
                        10      CALL_FUNCTION                   1
                        12      CALL_METHOD                     1
                        14      BINARY_SUBSCR                   
                        16      RETURN_VALUE                    
                'Random.choice'
                [Code]
                    File Name: random.py
                    Object Name: shuffle
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_randbelow'
                        'reversed'
                        'range'
                        'len'
                        '_warn'
                        'DeprecationWarning'
                        '_floor'
                    [Var Names]
                        'self'
                        'x'
                        'random'
                        'randbelow'
                        'i'
                        'j'
                        'floor'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Shuffle list x in place, and return None.\n\n        Optional argument random is a 0-argument function returning a\n        random float in [0.0, 1.0); if it is the default None, the\n        standard random.random will be used.\n\n        '
                        None
                        1
                        'The *random* parameter to shuffle() has been deprecated\nsince Python 3.9 and will be removed in a subsequent version.'
                        2
                    [Disassembly]
                        0       LOAD_FAST                       2: random
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               40 (to 80)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       0: _randbelow
                        12      STORE_FAST                      3: randbelow
                        14      LOAD_GLOBAL                     1: reversed
                        16      LOAD_GLOBAL                     2: range
                        18      LOAD_CONST                      2: 1
                        20      LOAD_GLOBAL                     3: len
                        22      LOAD_FAST                       1: x
                        24      CALL_FUNCTION                   1
                        26      CALL_FUNCTION                   2
                        28      CALL_FUNCTION                   1
                        30      GET_ITER                        
                        32      FOR_ITER                        21 (to 76)
                        34      STORE_FAST                      4: i
                        36      LOAD_FAST                       3: randbelow
                        38      LOAD_FAST                       4: i
                        40      LOAD_CONST                      2: 1
                        42      BINARY_ADD                      
                        44      CALL_FUNCTION                   1
                        46      STORE_FAST                      5: j
                        48      LOAD_FAST                       1: x
                        50      LOAD_FAST                       5: j
                        52      BINARY_SUBSCR                   
                        54      LOAD_FAST                       1: x
                        56      LOAD_FAST                       4: i
                        58      BINARY_SUBSCR                   
                        60      ROT_TWO                         
                        62      LOAD_FAST                       1: x
                        64      LOAD_FAST                       4: i
                        66      STORE_SUBSCR                    
                        68      LOAD_FAST                       1: x
                        70      LOAD_FAST                       5: j
                        72      STORE_SUBSCR                    
                        74      JUMP_ABSOLUTE                   16 (to 32)
                        76      LOAD_CONST                      1: None
                        78      RETURN_VALUE                    
                        80      LOAD_GLOBAL                     4: _warn
                        82      LOAD_CONST                      3: 'The *random* parameter to shuffle() has been deprecated\nsince Python 3.9 and will be removed in a subsequent version.'
                        84      LOAD_GLOBAL                     5: DeprecationWarning
                        86      LOAD_CONST                      4: 2
                        88      CALL_FUNCTION                   3
                        90      POP_TOP                         
                        92      LOAD_GLOBAL                     6: _floor
                        94      STORE_FAST                      6: floor
                        96      LOAD_GLOBAL                     1: reversed
                        98      LOAD_GLOBAL                     2: range
                        100     LOAD_CONST                      2: 1
                        102     LOAD_GLOBAL                     3: len
                        104     LOAD_FAST                       1: x
                        106     CALL_FUNCTION                   1
                        108     CALL_FUNCTION                   2
                        110     CALL_FUNCTION                   1
                        112     GET_ITER                        
                        114     FOR_ITER                        24 (to 164)
                        116     STORE_FAST                      4: i
                        118     LOAD_FAST                       6: floor
                        120     LOAD_FAST                       2: random
                        122     CALL_FUNCTION                   0
                        124     LOAD_FAST                       4: i
                        126     LOAD_CONST                      2: 1
                        128     BINARY_ADD                      
                        130     BINARY_MULTIPLY                 
                        132     CALL_FUNCTION                   1
                        134     STORE_FAST                      5: j
                        136     LOAD_FAST                       1: x
                        138     LOAD_FAST                       5: j
                        140     BINARY_SUBSCR                   
                        142     LOAD_FAST                       1: x
                        144     LOAD_FAST                       4: i
                        146     BINARY_SUBSCR                   
                        148     ROT_TWO                         
                        150     LOAD_FAST                       1: x
                        152     LOAD_FAST                       4: i
                        154     STORE_SUBSCR                    
                        156     LOAD_FAST                       1: x
                        158     LOAD_FAST                       5: j
                        160     STORE_SUBSCR                    
                        162     JUMP_ABSOLUTE                   57 (to 114)
                        164     LOAD_CONST                      1: None
                        166     RETURN_VALUE                    
                'Random.shuffle'
                (
                    'counts'
                )
                [Code]
                    File Name: random.py
                    Object Name: sample
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 15
                    Stack Size: 6
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'isinstance'
                        '_Sequence'
                        '_Set'
                        '_warn'
                        'DeprecationWarning'
                        'tuple'
                        'TypeError'
                        'len'
                        'list'
                        '_accumulate'
                        'ValueError'
                        'pop'
                        'int'
                        'sample'
                        'range'
                        '_bisect'
                        '_randbelow'
                        '_ceil'
                        '_log'
                        'set'
                        'add'
                    [Var Names]
                        'self'
                        'population'
                        'k'
                        'counts'
                        'n'
                        'total'
                        'selections'
                        'randbelow'
                        'result'
                        'setsize'
                        'pool'
                        'i'
                        'j'
                        'selected'
                        'selected_add'
                    [Free Vars]
                    [Cell Vars]
                        'bisect'
                        'cum_counts'
                        'population'
                    [Constants]
                        "Chooses k unique random elements from a population sequence or set.\n\n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n\n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n\n        Repeated elements can be specified one at a time or with the optional\n        counts parameter.  For example:\n\n            sample(['red', 'blue'], counts=[4, 2], k=5)\n\n        is equivalent to:\n\n            sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)\n\n        To choose a sample from a range of integers, use range() for the\n        population argument.  This is especially fast and space efficient\n        for sampling from a large population:\n\n            sample(range(10000000), 60)\n\n        "
                        'Sampling from a set deprecated\nsince Python 3.9 and will be removed in a subsequent version.'
                        2
                        'Population must be a sequence.  For dicts or sets, use sorted(d).'
                        None
                        'The number of counts does not match the population'
                        'Counts must be integers'
                        0
                        'Total of counts must be greater than zero'
                        (
                            'k'
                        )
                        [Code]
                            File Name: random.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 6
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                            [Var Names]
                                '.0'
                                's'
                            [Free Vars]
                                'bisect'
                                'cum_counts'
                                'population'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       STORE_FAST                      1: s
                                8       LOAD_DEREF                      2: population
                                10      LOAD_DEREF                      0: bisect
                                12      LOAD_DEREF                      1: cum_counts
                                14      LOAD_FAST                       1: s
                                16      CALL_FUNCTION                   2
                                18      BINARY_SUBSCR                   
                                20      LIST_APPEND                     2
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      RETURN_VALUE                    
                        'Random.sample.<locals>.<listcomp>'
                        'Sample larger than population or is negative'
                        21
                        5
                        4
                        3
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_DEREF                      2: population
                        4       LOAD_GLOBAL                     1: _Sequence
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                25 (to 50)
                        10      LOAD_GLOBAL                     0: isinstance
                        12      LOAD_DEREF                      2: population
                        14      LOAD_GLOBAL                     2: _Set
                        16      CALL_FUNCTION                   2
                        18      POP_JUMP_IF_FALSE               21 (to 42)
                        20      LOAD_GLOBAL                     3: _warn
                        22      LOAD_CONST                      1: 'Sampling from a set deprecated\nsince Python 3.9 and will be removed in a subsequent version.'
                        24      LOAD_GLOBAL                     4: DeprecationWarning
                        26      LOAD_CONST                      2: 2
                        28      CALL_FUNCTION                   3
                        30      POP_TOP                         
                        32      LOAD_GLOBAL                     5: tuple
                        34      LOAD_DEREF                      2: population
                        36      CALL_FUNCTION                   1
                        38      STORE_DEREF                     2: population
                        40      JUMP_FORWARD                    4 (to 50)
                        42      LOAD_GLOBAL                     6: TypeError
                        44      LOAD_CONST                      3: 'Population must be a sequence.  For dicts or sets, use sorted(d).'
                        46      CALL_FUNCTION                   1
                        48      RAISE_VARARGS                   1
                        50      LOAD_GLOBAL                     7: len
                        52      LOAD_DEREF                      2: population
                        54      CALL_FUNCTION                   1
                        56      STORE_FAST                      4: n
                        58      LOAD_FAST                       3: counts
                        60      LOAD_CONST                      4: None
                        62      IS_OP                           1 (is not)
                        64      POP_JUMP_IF_FALSE               92 (to 184)
                        66      LOAD_GLOBAL                     8: list
                        68      LOAD_GLOBAL                     9: _accumulate
                        70      LOAD_FAST                       3: counts
                        72      CALL_FUNCTION                   1
                        74      CALL_FUNCTION                   1
                        76      STORE_DEREF                     1: cum_counts
                        78      LOAD_GLOBAL                     7: len
                        80      LOAD_DEREF                      1: cum_counts
                        82      CALL_FUNCTION                   1
                        84      LOAD_FAST                       4: n
                        86      COMPARE_OP                      3 (!=)
                        88      POP_JUMP_IF_FALSE               49 (to 98)
                        90      LOAD_GLOBAL                     10: ValueError
                        92      LOAD_CONST                      5: 'The number of counts does not match the population'
                        94      CALL_FUNCTION                   1
                        96      RAISE_VARARGS                   1
                        98      LOAD_DEREF                      1: cum_counts
                        100     LOAD_METHOD                     11: pop
                        102     CALL_METHOD                     0
                        104     STORE_FAST                      5: total
                        106     LOAD_GLOBAL                     0: isinstance
                        108     LOAD_FAST                       5: total
                        110     LOAD_GLOBAL                     12: int
                        112     CALL_FUNCTION                   2
                        114     POP_JUMP_IF_TRUE                62 (to 124)
                        116     LOAD_GLOBAL                     6: TypeError
                        118     LOAD_CONST                      6: 'Counts must be integers'
                        120     CALL_FUNCTION                   1
                        122     RAISE_VARARGS                   1
                        124     LOAD_FAST                       5: total
                        126     LOAD_CONST                      7: 0
                        128     COMPARE_OP                      1 (<=)
                        130     POP_JUMP_IF_FALSE               70 (to 140)
                        132     LOAD_GLOBAL                     10: ValueError
                        134     LOAD_CONST                      8: 'Total of counts must be greater than zero'
                        136     CALL_FUNCTION                   1
                        138     RAISE_VARARGS                   1
                        140     LOAD_FAST                       0: self
                        142     LOAD_ATTR                       13: sample
                        144     LOAD_GLOBAL                     14: range
                        146     LOAD_FAST                       5: total
                        148     CALL_FUNCTION                   1
                        150     LOAD_FAST                       2: k
                        152     LOAD_CONST                      9: ('k',)
                        154     CALL_FUNCTION_KW                2
                        156     STORE_FAST                      6: selections
                        158     LOAD_GLOBAL                     15: _bisect
                        160     STORE_DEREF                     0: bisect
                        162     LOAD_CLOSURE                    0: bisect
                        164     LOAD_CLOSURE                    1: cum_counts
                        166     LOAD_CLOSURE                    2: population
                        168     BUILD_TUPLE                     3
                        170     LOAD_CONST                      10: <CODE> <listcomp>
                        172     LOAD_CONST                      11: 'Random.sample.<locals>.<listcomp>'
                        174     MAKE_FUNCTION                   8
                        176     LOAD_FAST                       6: selections
                        178     GET_ITER                        
                        180     CALL_FUNCTION                   1
                        182     RETURN_VALUE                    
                        184     LOAD_FAST                       0: self
                        186     LOAD_ATTR                       16: _randbelow
                        188     STORE_FAST                      7: randbelow
                        190     LOAD_CONST                      7: 0
                        192     LOAD_FAST                       2: k
                        194     DUP_TOP                         
                        196     ROT_THREE                       
                        198     COMPARE_OP                      1 (<=)
                        200     POP_JUMP_IF_FALSE               108 (to 216)
                        202     LOAD_FAST                       4: n
                        204     COMPARE_OP                      1 (<=)
                        206     POP_JUMP_IF_TRUE                113 (to 226)
                        208     LOAD_GLOBAL                     10: ValueError
                        210     LOAD_CONST                      12: 'Sample larger than population or is negative'
                        212     CALL_FUNCTION                   1
                        214     RAISE_VARARGS                   1
                        216     POP_TOP                         
                        218     LOAD_GLOBAL                     10: ValueError
                        220     LOAD_CONST                      12: 'Sample larger than population or is negative'
                        222     CALL_FUNCTION                   1
                        224     RAISE_VARARGS                   1
                        226     LOAD_CONST                      4: None
                        228     BUILD_LIST                      1
                        230     LOAD_FAST                       2: k
                        232     BINARY_MULTIPLY                 
                        234     STORE_FAST                      8: result
                        236     LOAD_CONST                      13: 21
                        238     STORE_FAST                      9: setsize
                        240     LOAD_FAST                       2: k
                        242     LOAD_CONST                      14: 5
                        244     COMPARE_OP                      4 (>)
                        246     POP_JUMP_IF_FALSE               137 (to 274)
                        248     LOAD_FAST                       9: setsize
                        250     LOAD_CONST                      15: 4
                        252     LOAD_GLOBAL                     17: _ceil
                        254     LOAD_GLOBAL                     18: _log
                        256     LOAD_FAST                       2: k
                        258     LOAD_CONST                      16: 3
                        260     BINARY_MULTIPLY                 
                        262     LOAD_CONST                      15: 4
                        264     CALL_FUNCTION                   2
                        266     CALL_FUNCTION                   1
                        268     BINARY_POWER                    
                        270     INPLACE_ADD                     
                        272     STORE_FAST                      9: setsize
                        274     LOAD_FAST                       4: n
                        276     LOAD_FAST                       9: setsize
                        278     COMPARE_OP                      1 (<=)
                        280     POP_JUMP_IF_FALSE               176 (to 352)
                        282     LOAD_GLOBAL                     8: list
                        284     LOAD_DEREF                      2: population
                        286     CALL_FUNCTION                   1
                        288     STORE_FAST                      10: pool
                        290     LOAD_GLOBAL                     14: range
                        292     LOAD_FAST                       2: k
                        294     CALL_FUNCTION                   1
                        296     GET_ITER                        
                        298     FOR_ITER                        24 (to 348)
                        300     STORE_FAST                      11: i
                        302     LOAD_FAST                       7: randbelow
                        304     LOAD_FAST                       4: n
                        306     LOAD_FAST                       11: i
                        308     BINARY_SUBTRACT                 
                        310     CALL_FUNCTION                   1
                        312     STORE_FAST                      12: j
                        314     LOAD_FAST                       10: pool
                        316     LOAD_FAST                       12: j
                        318     BINARY_SUBSCR                   
                        320     LOAD_FAST                       8: result
                        322     LOAD_FAST                       11: i
                        324     STORE_SUBSCR                    
                        326     LOAD_FAST                       10: pool
                        328     LOAD_FAST                       4: n
                        330     LOAD_FAST                       11: i
                        332     BINARY_SUBTRACT                 
                        334     LOAD_CONST                      17: 1
                        336     BINARY_SUBTRACT                 
                        338     BINARY_SUBSCR                   
                        340     LOAD_FAST                       10: pool
                        342     LOAD_FAST                       12: j
                        344     STORE_SUBSCR                    
                        346     JUMP_ABSOLUTE                   149 (to 298)
                        348     LOAD_FAST                       8: result
                        350     RETURN_VALUE                    
                        352     LOAD_GLOBAL                     19: set
                        354     CALL_FUNCTION                   0
                        356     STORE_FAST                      13: selected
                        358     LOAD_FAST                       13: selected
                        360     LOAD_ATTR                       20: add
                        362     STORE_FAST                      14: selected_add
                        364     LOAD_GLOBAL                     14: range
                        366     LOAD_FAST                       2: k
                        368     CALL_FUNCTION                   1
                        370     GET_ITER                        
                        372     FOR_ITER                        28 (to 430)
                        374     STORE_FAST                      11: i
                        376     LOAD_FAST                       7: randbelow
                        378     LOAD_FAST                       4: n
                        380     CALL_FUNCTION                   1
                        382     STORE_FAST                      12: j
                        384     LOAD_FAST                       12: j
                        386     LOAD_FAST                       13: selected
                        388     CONTAINS_OP                     0 (in)
                        390     POP_JUMP_IF_FALSE               204 (to 408)
                        392     LOAD_FAST                       7: randbelow
                        394     LOAD_FAST                       4: n
                        396     CALL_FUNCTION                   1
                        398     STORE_FAST                      12: j
                        400     LOAD_FAST                       12: j
                        402     LOAD_FAST                       13: selected
                        404     CONTAINS_OP                     0 (in)
                        406     POP_JUMP_IF_TRUE                196 (to 392)
                        408     LOAD_FAST                       14: selected_add
                        410     LOAD_FAST                       12: j
                        412     CALL_FUNCTION                   1
                        414     POP_TOP                         
                        416     LOAD_DEREF                      2: population
                        418     LOAD_FAST                       12: j
                        420     BINARY_SUBSCR                   
                        422     LOAD_FAST                       8: result
                        424     LOAD_FAST                       11: i
                        426     STORE_SUBSCR                    
                        428     JUMP_ABSOLUTE                   186 (to 372)
                        430     LOAD_FAST                       8: result
                        432     RETURN_VALUE                    
                'Random.sample'
                (
                    'cum_weights'
                    'k'
                )
                [Code]
                    File Name: random.py
                    Object Name: choices
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 2
                    Locals: 5
                    Stack Size: 8
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'random'
                        'len'
                        '_floor'
                        '_repeat'
                        'list'
                        '_accumulate'
                        'TypeError'
                        'isinstance'
                        'int'
                        'ValueError'
                        '_isfinite'
                        '_bisect'
                    [Var Names]
                        'self'
                        'population'
                        'weights'
                        'cum_weights'
                        'k'
                    [Free Vars]
                    [Cell Vars]
                        'bisect'
                        'cum_weights'
                        'floor'
                        'hi'
                        'n'
                        'population'
                        'random'
                        'total'
                    [Constants]
                        'Return a k sized list of population elements chosen with replacement.\n\n        If the relative weights or cumulative weights are not specified,\n        the selections are made with equal probability.\n\n        '
                        None
                        0
                        [Code]
                            File Name: random.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 6
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                            [Var Names]
                                '.0'
                                'i'
                            [Free Vars]
                                'floor'
                                'n'
                                'population'
                                'random'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        11 (to 28)
                                6       STORE_FAST                      1: i
                                8       LOAD_DEREF                      2: population
                                10      LOAD_DEREF                      0: floor
                                12      LOAD_DEREF                      3: random
                                14      CALL_FUNCTION                   0
                                16      LOAD_DEREF                      1: n
                                18      BINARY_MULTIPLY                 
                                20      CALL_FUNCTION                   1
                                22      BINARY_SUBSCR                   
                                24      LIST_APPEND                     2
                                26      JUMP_ABSOLUTE                   2 (to 4)
                                28      RETURN_VALUE                    
                        'Random.choices.<locals>.<listcomp>'
                        'The number of choices must be a keyword argument: k='
                        'Cannot specify both weights and cumulative weights'
                        'The number of weights does not match the population'
                        -1
                        'Total of weights must be greater than zero'
                        'Total of weights must be finite'
                        1
                        [Code]
                            File Name: random.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 8
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                            [Var Names]
                                '.0'
                                'i'
                            [Free Vars]
                                'bisect'
                                'cum_weights'
                                'hi'
                                'population'
                                'random'
                                'total'
                            [Cell Vars]
                            [Constants]
                                0
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        14 (to 34)
                                6       STORE_FAST                      1: i
                                8       LOAD_DEREF                      3: population
                                10      LOAD_DEREF                      0: bisect
                                12      LOAD_DEREF                      1: cum_weights
                                14      LOAD_DEREF                      4: random
                                16      CALL_FUNCTION                   0
                                18      LOAD_DEREF                      5: total
                                20      BINARY_MULTIPLY                 
                                22      LOAD_CONST                      0: 0
                                24      LOAD_DEREF                      2: hi
                                26      CALL_FUNCTION                   4
                                28      BINARY_SUBSCR                   
                                30      LIST_APPEND                     2
                                32      JUMP_ABSOLUTE                   2 (to 4)
                                34      RETURN_VALUE                    
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: random
                        4       STORE_DEREF                     6: random
                        6       LOAD_GLOBAL                     1: len
                        8       LOAD_DEREF                      5: population
                        10      CALL_FUNCTION                   1
                        12      STORE_DEREF                     4: n
                        14      LOAD_DEREF                      1: cum_weights
                        16      LOAD_CONST                      1: None
                        18      IS_OP                           0 (is)
                        20      POP_JUMP_IF_FALSE               68 (to 136)
                        22      LOAD_FAST                       2: weights
                        24      LOAD_CONST                      1: None
                        26      IS_OP                           0 (is)
                        28      POP_JUMP_IF_FALSE               36 (to 72)
                        30      LOAD_GLOBAL                     2: _floor
                        32      STORE_DEREF                     2: floor
                        34      LOAD_DEREF                      4: n
                        36      LOAD_CONST                      2: 0
                        38      INPLACE_ADD                     
                        40      STORE_DEREF                     4: n
                        42      LOAD_CLOSURE                    2: floor
                        44      LOAD_CLOSURE                    4: n
                        46      LOAD_CLOSURE                    5: population
                        48      LOAD_CLOSURE                    6: random
                        50      BUILD_TUPLE                     4
                        52      LOAD_CONST                      3: <CODE> <listcomp>
                        54      LOAD_CONST                      4: 'Random.choices.<locals>.<listcomp>'
                        56      MAKE_FUNCTION                   8
                        58      LOAD_GLOBAL                     3: _repeat
                        60      LOAD_CONST                      1: None
                        62      LOAD_FAST                       4: k
                        64      CALL_FUNCTION                   2
                        66      GET_ITER                        
                        68      CALL_FUNCTION                   1
                        70      RETURN_VALUE                    
                        72      SETUP_FINALLY                   8 (to 90)
                        74      LOAD_GLOBAL                     4: list
                        76      LOAD_GLOBAL                     5: _accumulate
                        78      LOAD_FAST                       2: weights
                        80      CALL_FUNCTION                   1
                        82      CALL_FUNCTION                   1
                        84      STORE_DEREF                     1: cum_weights
                        86      POP_BLOCK                       
                        88      JUMP_FORWARD                    31 (to 152)
                        90      DUP_TOP                         
                        92      LOAD_GLOBAL                     6: TypeError
                        94      JUMP_IF_NOT_EXC_MATCH           67 (to 134)
                        96      POP_TOP                         
                        98      POP_TOP                         
                        100     POP_TOP                         
                        102     LOAD_GLOBAL                     7: isinstance
                        104     LOAD_FAST                       2: weights
                        106     LOAD_GLOBAL                     8: int
                        108     CALL_FUNCTION                   2
                        110     POP_JUMP_IF_TRUE                57 (to 114)
                        112     RAISE_VARARGS                   0
                        114     LOAD_FAST                       2: weights
                        116     STORE_FAST                      4: k
                        118     LOAD_GLOBAL                     6: TypeError
                        120     LOAD_CONST                      5: 'The number of choices must be a keyword argument: k='
                        122     LOAD_FAST                       4: k
                        124     FORMAT_VALUE                    2 (FVC_REPR)
                        126     BUILD_STRING                    2
                        128     CALL_FUNCTION                   1
                        130     LOAD_CONST                      1: None
                        132     RAISE_VARARGS                   2
                        134     RERAISE                         0
                        136     LOAD_FAST                       2: weights
                        138     LOAD_CONST                      1: None
                        140     IS_OP                           1 (is not)
                        142     POP_JUMP_IF_FALSE               76 (to 152)
                        144     LOAD_GLOBAL                     6: TypeError
                        146     LOAD_CONST                      6: 'Cannot specify both weights and cumulative weights'
                        148     CALL_FUNCTION                   1
                        150     RAISE_VARARGS                   1
                        152     LOAD_GLOBAL                     1: len
                        154     LOAD_DEREF                      1: cum_weights
                        156     CALL_FUNCTION                   1
                        158     LOAD_DEREF                      4: n
                        160     COMPARE_OP                      3 (!=)
                        162     POP_JUMP_IF_FALSE               86 (to 172)
                        164     LOAD_GLOBAL                     9: ValueError
                        166     LOAD_CONST                      7: 'The number of weights does not match the population'
                        168     CALL_FUNCTION                   1
                        170     RAISE_VARARGS                   1
                        172     LOAD_DEREF                      1: cum_weights
                        174     LOAD_CONST                      8: -1
                        176     BINARY_SUBSCR                   
                        178     LOAD_CONST                      2: 0
                        180     BINARY_ADD                      
                        182     STORE_DEREF                     7: total
                        184     LOAD_DEREF                      7: total
                        186     LOAD_CONST                      2: 0
                        188     COMPARE_OP                      1 (<=)
                        190     POP_JUMP_IF_FALSE               100 (to 200)
                        192     LOAD_GLOBAL                     9: ValueError
                        194     LOAD_CONST                      9: 'Total of weights must be greater than zero'
                        196     CALL_FUNCTION                   1
                        198     RAISE_VARARGS                   1
                        200     LOAD_GLOBAL                     10: _isfinite
                        202     LOAD_DEREF                      7: total
                        204     CALL_FUNCTION                   1
                        206     POP_JUMP_IF_TRUE                108 (to 216)
                        208     LOAD_GLOBAL                     9: ValueError
                        210     LOAD_CONST                      10: 'Total of weights must be finite'
                        212     CALL_FUNCTION                   1
                        214     RAISE_VARARGS                   1
                        216     LOAD_GLOBAL                     11: _bisect
                        218     STORE_DEREF                     0: bisect
                        220     LOAD_DEREF                      4: n
                        222     LOAD_CONST                      11: 1
                        224     BINARY_SUBTRACT                 
                        226     STORE_DEREF                     3: hi
                        228     LOAD_CLOSURE                    0: bisect
                        230     LOAD_CLOSURE                    1: cum_weights
                        232     LOAD_CLOSURE                    3: hi
                        234     LOAD_CLOSURE                    5: population
                        236     LOAD_CLOSURE                    6: random
                        238     LOAD_CLOSURE                    7: total
                        240     BUILD_TUPLE                     6
                        242     LOAD_CONST                      12: <CODE> <listcomp>
                        244     LOAD_CONST                      4: 'Random.choices.<locals>.<listcomp>'
                        246     MAKE_FUNCTION                   8
                        248     LOAD_GLOBAL                     3: _repeat
                        250     LOAD_CONST                      1: None
                        252     LOAD_FAST                       4: k
                        254     CALL_FUNCTION                   2
                        256     GET_ITER                        
                        258     CALL_FUNCTION                   1
                        260     RETURN_VALUE                    
                'Random.choices'
                [Code]
                    File Name: random.py
                    Object Name: uniform
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'random'
                    [Var Names]
                        'self'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Get a random number in the range [a, b) or [a, b] depending on rounding.'
                    [Disassembly]
                        0       LOAD_FAST                       1: a
                        2       LOAD_FAST                       2: b
                        4       LOAD_FAST                       1: a
                        6       BINARY_SUBTRACT                 
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     0: random
                        12      CALL_METHOD                     0
                        14      BINARY_MULTIPLY                 
                        16      BINARY_ADD                      
                        18      RETURN_VALUE                    
                'Random.uniform'
                0
                1
                [Code]
                    File Name: random.py
                    Object Name: triangular
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'random'
                        'ZeroDivisionError'
                        '_sqrt'
                    [Var Names]
                        'self'
                        'low'
                        'high'
                        'mode'
                        'u'
                        'c'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Triangular distribution.\n\n        Continuous distribution bounded by given lower and upper limits,\n        and having a given mode value in-between.\n\n        http://en.wikipedia.org/wiki/Triangular_distribution\n\n        '
                        None
                        0.5
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: random
                        4       CALL_METHOD                     0
                        6       STORE_FAST                      4: u
                        8       SETUP_FINALLY                   16 (to 42)
                        10      LOAD_FAST                       3: mode
                        12      LOAD_CONST                      1: None
                        14      IS_OP                           0 (is)
                        16      POP_JUMP_IF_FALSE               11 (to 22)
                        18      LOAD_CONST                      2: 0.5
                        20      JUMP_FORWARD                    7 (to 36)
                        22      LOAD_FAST                       3: mode
                        24      LOAD_FAST                       1: low
                        26      BINARY_SUBTRACT                 
                        28      LOAD_FAST                       2: high
                        30      LOAD_FAST                       1: low
                        32      BINARY_SUBTRACT                 
                        34      BINARY_TRUE_DIVIDE              
                        36      STORE_FAST                      5: c
                        38      POP_BLOCK                       
                        40      JUMP_FORWARD                    11 (to 64)
                        42      DUP_TOP                         
                        44      LOAD_GLOBAL                     1: ZeroDivisionError
                        46      JUMP_IF_NOT_EXC_MATCH           31 (to 62)
                        48      POP_TOP                         
                        50      POP_TOP                         
                        52      POP_TOP                         
                        54      LOAD_FAST                       1: low
                        56      ROT_FOUR                        
                        58      POP_EXCEPT                      
                        60      RETURN_VALUE                    
                        62      RERAISE                         0
                        64      LOAD_FAST                       4: u
                        66      LOAD_FAST                       5: c
                        68      COMPARE_OP                      4 (>)
                        70      POP_JUMP_IF_FALSE               49 (to 98)
                        72      LOAD_CONST                      3: 1
                        74      LOAD_FAST                       4: u
                        76      BINARY_SUBTRACT                 
                        78      STORE_FAST                      4: u
                        80      LOAD_CONST                      3: 1
                        82      LOAD_FAST                       5: c
                        84      BINARY_SUBTRACT                 
                        86      STORE_FAST                      5: c
                        88      LOAD_FAST                       2: high
                        90      LOAD_FAST                       1: low
                        92      ROT_TWO                         
                        94      STORE_FAST                      1: low
                        96      STORE_FAST                      2: high
                        98      LOAD_FAST                       1: low
                        100     LOAD_FAST                       2: high
                        102     LOAD_FAST                       1: low
                        104     BINARY_SUBTRACT                 
                        106     LOAD_GLOBAL                     2: _sqrt
                        108     LOAD_FAST                       4: u
                        110     LOAD_FAST                       5: c
                        112     BINARY_MULTIPLY                 
                        114     CALL_FUNCTION                   1
                        116     BINARY_MULTIPLY                 
                        118     BINARY_ADD                      
                        120     RETURN_VALUE                    
                'Random.triangular'
                [Code]
                    File Name: random.py
                    Object Name: normalvariate
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'random'
                        'NV_MAGICCONST'
                        '_log'
                    [Var Names]
                        'self'
                        'mu'
                        'sigma'
                        'random'
                        'u1'
                        'u2'
                        'z'
                        'zz'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Normal distribution.\n\n        mu is the mean, and sigma is the standard deviation.\n\n        '
                        True
                        1
                        0.5
                        4
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: random
                        4       STORE_FAST                      3: random
                        6       NOP                             
                        8       LOAD_FAST                       3: random
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      4: u1
                        14      LOAD_CONST                      2: 1
                        16      LOAD_FAST                       3: random
                        18      CALL_FUNCTION                   0
                        20      BINARY_SUBTRACT                 
                        22      STORE_FAST                      5: u2
                        24      LOAD_GLOBAL                     1: NV_MAGICCONST
                        26      LOAD_FAST                       4: u1
                        28      LOAD_CONST                      3: 0.5
                        30      BINARY_SUBTRACT                 
                        32      BINARY_MULTIPLY                 
                        34      LOAD_FAST                       5: u2
                        36      BINARY_TRUE_DIVIDE              
                        38      STORE_FAST                      6: z
                        40      LOAD_FAST                       6: z
                        42      LOAD_FAST                       6: z
                        44      BINARY_MULTIPLY                 
                        46      LOAD_CONST                      4: 4
                        48      BINARY_TRUE_DIVIDE              
                        50      STORE_FAST                      7: zz
                        52      LOAD_FAST                       7: zz
                        54      LOAD_GLOBAL                     2: _log
                        56      LOAD_FAST                       5: u2
                        58      CALL_FUNCTION                   1
                        60      UNARY_NEGATIVE                  
                        62      COMPARE_OP                      1 (<=)
                        64      POP_JUMP_IF_FALSE               34 (to 68)
                        66      JUMP_FORWARD                    1 (to 70)
                        68      JUMP_ABSOLUTE                   4 (to 8)
                        70      LOAD_FAST                       1: mu
                        72      LOAD_FAST                       6: z
                        74      LOAD_FAST                       2: sigma
                        76      BINARY_MULTIPLY                 
                        78      BINARY_ADD                      
                        80      RETURN_VALUE                    
                'Random.normalvariate'
                [Code]
                    File Name: random.py
                    Object Name: gauss
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 7
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'random'
                        'gauss_next'
                        'TWOPI'
                        '_sqrt'
                        '_log'
                        '_cos'
                        '_sin'
                    [Var Names]
                        'self'
                        'mu'
                        'sigma'
                        'random'
                        'z'
                        'x2pi'
                        'g2rad'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Gaussian distribution.\n\n        mu is the mean, and sigma is the standard deviation.  This is\n        slightly faster than the normalvariate() function.\n\n        Not thread-safe without a lock around calls.\n\n        '
                        None
                        -2
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: random
                        4       STORE_FAST                      3: random
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: gauss_next
                        10      STORE_FAST                      4: z
                        12      LOAD_CONST                      1: None
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      1: gauss_next
                        18      LOAD_FAST                       4: z
                        20      LOAD_CONST                      1: None
                        22      IS_OP                           0 (is)
                        24      POP_JUMP_IF_FALSE               42 (to 84)
                        26      LOAD_FAST                       3: random
                        28      CALL_FUNCTION                   0
                        30      LOAD_GLOBAL                     2: TWOPI
                        32      BINARY_MULTIPLY                 
                        34      STORE_FAST                      5: x2pi
                        36      LOAD_GLOBAL                     3: _sqrt
                        38      LOAD_CONST                      2: -2
                        40      LOAD_GLOBAL                     4: _log
                        42      LOAD_CONST                      3: 1
                        44      LOAD_FAST                       3: random
                        46      CALL_FUNCTION                   0
                        48      BINARY_SUBTRACT                 
                        50      CALL_FUNCTION                   1
                        52      BINARY_MULTIPLY                 
                        54      CALL_FUNCTION                   1
                        56      STORE_FAST                      6: g2rad
                        58      LOAD_GLOBAL                     5: _cos
                        60      LOAD_FAST                       5: x2pi
                        62      CALL_FUNCTION                   1
                        64      LOAD_FAST                       6: g2rad
                        66      BINARY_MULTIPLY                 
                        68      STORE_FAST                      4: z
                        70      LOAD_GLOBAL                     6: _sin
                        72      LOAD_FAST                       5: x2pi
                        74      CALL_FUNCTION                   1
                        76      LOAD_FAST                       6: g2rad
                        78      BINARY_MULTIPLY                 
                        80      LOAD_FAST                       0: self
                        82      STORE_ATTR                      1: gauss_next
                        84      LOAD_FAST                       1: mu
                        86      LOAD_FAST                       4: z
                        88      LOAD_FAST                       2: sigma
                        90      BINARY_MULTIPLY                 
                        92      BINARY_ADD                      
                        94      RETURN_VALUE                    
                'Random.gauss'
                [Code]
                    File Name: random.py
                    Object Name: lognormvariate
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_exp'
                        'normalvariate'
                    [Var Names]
                        'self'
                        'mu'
                        'sigma'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Log normal distribution.\n\n        If you take the natural logarithm of this distribution, you'll get a\n        normal distribution with mean mu and standard deviation sigma.\n        mu can have any value, and sigma must be greater than zero.\n\n        "
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _exp
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     1: normalvariate
                        6       LOAD_FAST                       1: mu
                        8       LOAD_FAST                       2: sigma
                        10      CALL_METHOD                     2
                        12      CALL_FUNCTION                   1
                        14      RETURN_VALUE                    
                'Random.lognormvariate'
                [Code]
                    File Name: random.py
                    Object Name: expovariate
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_log'
                        'random'
                    [Var Names]
                        'self'
                        'lambd'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Exponential distribution.\n\n        lambd is 1.0 divided by the desired mean.  It should be\n        nonzero.  (The parameter would be called "lambda", but that is\n        a reserved word in Python.)  Returned values range from 0 to\n        positive infinity if lambd is positive, and from negative\n        infinity to 0 if lambd is negative.\n\n        '
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _log
                        2       LOAD_CONST                      1: 1
                        4       LOAD_FAST                       0: self
                        6       LOAD_METHOD                     1: random
                        8       CALL_METHOD                     0
                        10      BINARY_SUBTRACT                 
                        12      CALL_FUNCTION                   1
                        14      UNARY_NEGATIVE                  
                        16      LOAD_FAST                       1: lambd
                        18      BINARY_TRUE_DIVIDE              
                        20      RETURN_VALUE                    
                'Random.expovariate'
                [Code]
                    File Name: random.py
                    Object Name: vonmisesvariate
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 14
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'random'
                        'TWOPI'
                        '_sqrt'
                        '_cos'
                        '_pi'
                        '_exp'
                        '_acos'
                    [Var Names]
                        'self'
                        'mu'
                        'kappa'
                        'random'
                        's'
                        'r'
                        'u1'
                        'z'
                        'd'
                        'u2'
                        'q'
                        'f'
                        'u3'
                        'theta'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Circular data distribution.\n\n        mu is the mean angle, expressed in radians between 0 and 2*pi, and\n        kappa is the concentration parameter, which must be greater than or\n        equal to zero.  If kappa is equal to zero, this distribution reduces\n        to a uniform random angle over the range 0 to 2*pi.\n\n        '
                        1e-06
                        0.5
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: random
                        4       STORE_FAST                      3: random
                        6       LOAD_FAST                       2: kappa
                        8       LOAD_CONST                      1: 1e-06
                        10      COMPARE_OP                      1 (<=)
                        12      POP_JUMP_IF_FALSE               12 (to 24)
                        14      LOAD_GLOBAL                     1: TWOPI
                        16      LOAD_FAST                       3: random
                        18      CALL_FUNCTION                   0
                        20      BINARY_MULTIPLY                 
                        22      RETURN_VALUE                    
                        24      LOAD_CONST                      2: 0.5
                        26      LOAD_FAST                       2: kappa
                        28      BINARY_TRUE_DIVIDE              
                        30      STORE_FAST                      4: s
                        32      LOAD_FAST                       4: s
                        34      LOAD_GLOBAL                     2: _sqrt
                        36      LOAD_CONST                      3: 1
                        38      LOAD_FAST                       4: s
                        40      LOAD_FAST                       4: s
                        42      BINARY_MULTIPLY                 
                        44      BINARY_ADD                      
                        46      CALL_FUNCTION                   1
                        48      BINARY_ADD                      
                        50      STORE_FAST                      5: r
                        52      NOP                             
                        54      LOAD_FAST                       3: random
                        56      CALL_FUNCTION                   0
                        58      STORE_FAST                      6: u1
                        60      LOAD_GLOBAL                     3: _cos
                        62      LOAD_GLOBAL                     4: _pi
                        64      LOAD_FAST                       6: u1
                        66      BINARY_MULTIPLY                 
                        68      CALL_FUNCTION                   1
                        70      STORE_FAST                      7: z
                        72      LOAD_FAST                       7: z
                        74      LOAD_FAST                       5: r
                        76      LOAD_FAST                       7: z
                        78      BINARY_ADD                      
                        80      BINARY_TRUE_DIVIDE              
                        82      STORE_FAST                      8: d
                        84      LOAD_FAST                       3: random
                        86      CALL_FUNCTION                   0
                        88      STORE_FAST                      9: u2
                        90      LOAD_FAST                       9: u2
                        92      LOAD_CONST                      3: 1
                        94      LOAD_FAST                       8: d
                        96      LOAD_FAST                       8: d
                        98      BINARY_MULTIPLY                 
                        100     BINARY_SUBTRACT                 
                        102     COMPARE_OP                      0 (<)
                        104     POP_JUMP_IF_TRUE                63 (to 126)
                        106     LOAD_FAST                       9: u2
                        108     LOAD_CONST                      3: 1
                        110     LOAD_FAST                       8: d
                        112     BINARY_SUBTRACT                 
                        114     LOAD_GLOBAL                     5: _exp
                        116     LOAD_FAST                       8: d
                        118     CALL_FUNCTION                   1
                        120     BINARY_MULTIPLY                 
                        122     COMPARE_OP                      1 (<=)
                        124     POP_JUMP_IF_FALSE               64 (to 128)
                        126     JUMP_FORWARD                    1 (to 130)
                        128     JUMP_ABSOLUTE                   27 (to 54)
                        130     LOAD_CONST                      3: 1
                        132     LOAD_FAST                       5: r
                        134     BINARY_TRUE_DIVIDE              
                        136     STORE_FAST                      10: q
                        138     LOAD_FAST                       10: q
                        140     LOAD_FAST                       7: z
                        142     BINARY_ADD                      
                        144     LOAD_CONST                      3: 1
                        146     LOAD_FAST                       10: q
                        148     LOAD_FAST                       7: z
                        150     BINARY_MULTIPLY                 
                        152     BINARY_ADD                      
                        154     BINARY_TRUE_DIVIDE              
                        156     STORE_FAST                      11: f
                        158     LOAD_FAST                       3: random
                        160     CALL_FUNCTION                   0
                        162     STORE_FAST                      12: u3
                        164     LOAD_FAST                       12: u3
                        166     LOAD_CONST                      2: 0.5
                        168     COMPARE_OP                      4 (>)
                        170     POP_JUMP_IF_FALSE               96 (to 192)
                        172     LOAD_FAST                       1: mu
                        174     LOAD_GLOBAL                     6: _acos
                        176     LOAD_FAST                       11: f
                        178     CALL_FUNCTION                   1
                        180     BINARY_ADD                      
                        182     LOAD_GLOBAL                     1: TWOPI
                        184     BINARY_MODULO                   
                        186     STORE_FAST                      13: theta
                        188     LOAD_FAST                       13: theta
                        190     RETURN_VALUE                    
                        192     LOAD_FAST                       1: mu
                        194     LOAD_GLOBAL                     6: _acos
                        196     LOAD_FAST                       11: f
                        198     CALL_FUNCTION                   1
                        200     BINARY_SUBTRACT                 
                        202     LOAD_GLOBAL                     1: TWOPI
                        204     BINARY_MODULO                   
                        206     STORE_FAST                      13: theta
                        208     LOAD_FAST                       13: theta
                        210     RETURN_VALUE                    
                'Random.vonmisesvariate'
                [Code]
                    File Name: random.py
                    Object Name: gammavariate
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 16
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ValueError'
                        'random'
                        '_sqrt'
                        'LOG4'
                        '_log'
                        '_exp'
                        'SG_MAGICCONST'
                        '_e'
                    [Var Names]
                        'self'
                        'alpha'
                        'beta'
                        'random'
                        'ainv'
                        'bbb'
                        'ccc'
                        'u1'
                        'u2'
                        'v'
                        'x'
                        'z'
                        'r'
                        'u'
                        'b'
                        'p'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Gamma distribution.  Not the gamma function!\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n\n        The probability distribution function is:\n\n                    x ** (alpha - 1) * math.exp(-x / beta)\n          pdf(x) =  --------------------------------------\n                      math.gamma(alpha) * beta ** alpha\n\n        '
                        0
                        'gammavariate: alpha and beta must be > 0.0'
                        1
                        2
                        True
                        1e-07
                        1
                        4.5
                    [Disassembly]
                        0       LOAD_FAST                       1: alpha
                        2       LOAD_CONST                      1: 0
                        4       COMPARE_OP                      1 (<=)
                        6       POP_JUMP_IF_TRUE                8 (to 16)
                        8       LOAD_FAST                       2: beta
                        10      LOAD_CONST                      1: 0
                        12      COMPARE_OP                      1 (<=)
                        14      POP_JUMP_IF_FALSE               12 (to 24)
                        16      LOAD_GLOBAL                     0: ValueError
                        18      LOAD_CONST                      2: 'gammavariate: alpha and beta must be > 0.0'
                        20      CALL_FUNCTION                   1
                        22      RAISE_VARARGS                   1
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       1: random
                        28      STORE_FAST                      3: random
                        30      LOAD_FAST                       1: alpha
                        32      LOAD_CONST                      3: 1
                        34      COMPARE_OP                      4 (>)
                        36      POP_JUMP_IF_FALSE               107 (to 214)
                        38      LOAD_GLOBAL                     2: _sqrt
                        40      LOAD_CONST                      4: 2
                        42      LOAD_FAST                       1: alpha
                        44      BINARY_MULTIPLY                 
                        46      LOAD_CONST                      3: 1
                        48      BINARY_SUBTRACT                 
                        50      CALL_FUNCTION                   1
                        52      STORE_FAST                      4: ainv
                        54      LOAD_FAST                       1: alpha
                        56      LOAD_GLOBAL                     3: LOG4
                        58      BINARY_SUBTRACT                 
                        60      STORE_FAST                      5: bbb
                        62      LOAD_FAST                       1: alpha
                        64      LOAD_FAST                       4: ainv
                        66      BINARY_ADD                      
                        68      STORE_FAST                      6: ccc
                        70      NOP                             
                        72      LOAD_FAST                       3: random
                        74      CALL_FUNCTION                   0
                        76      STORE_FAST                      7: u1
                        78      LOAD_CONST                      6: 1e-07
                        80      LOAD_FAST                       7: u1
                        82      DUP_TOP                         
                        84      ROT_THREE                       
                        86      COMPARE_OP                      0 (<)
                        88      POP_JUMP_IF_FALSE               49 (to 98)
                        90      LOAD_CONST                      7: 1
                        92      COMPARE_OP                      0 (<)
                        94      POP_JUMP_IF_TRUE                51 (to 102)
                        96      JUMP_FORWARD                    1 (to 100)
                        98      POP_TOP                         
                        100     JUMP_ABSOLUTE                   35 (to 70)
                        102     LOAD_CONST                      3: 1
                        104     LOAD_FAST                       3: random
                        106     CALL_FUNCTION                   0
                        108     BINARY_SUBTRACT                 
                        110     STORE_FAST                      8: u2
                        112     LOAD_GLOBAL                     4: _log
                        114     LOAD_FAST                       7: u1
                        116     LOAD_CONST                      3: 1
                        118     LOAD_FAST                       7: u1
                        120     BINARY_SUBTRACT                 
                        122     BINARY_TRUE_DIVIDE              
                        124     CALL_FUNCTION                   1
                        126     LOAD_FAST                       4: ainv
                        128     BINARY_TRUE_DIVIDE              
                        130     STORE_FAST                      9: v
                        132     LOAD_FAST                       1: alpha
                        134     LOAD_GLOBAL                     5: _exp
                        136     LOAD_FAST                       9: v
                        138     CALL_FUNCTION                   1
                        140     BINARY_MULTIPLY                 
                        142     STORE_FAST                      10: x
                        144     LOAD_FAST                       7: u1
                        146     LOAD_FAST                       7: u1
                        148     BINARY_MULTIPLY                 
                        150     LOAD_FAST                       8: u2
                        152     BINARY_MULTIPLY                 
                        154     STORE_FAST                      11: z
                        156     LOAD_FAST                       5: bbb
                        158     LOAD_FAST                       6: ccc
                        160     LOAD_FAST                       9: v
                        162     BINARY_MULTIPLY                 
                        164     BINARY_ADD                      
                        166     LOAD_FAST                       10: x
                        168     BINARY_SUBTRACT                 
                        170     STORE_FAST                      12: r
                        172     LOAD_FAST                       12: r
                        174     LOAD_GLOBAL                     6: SG_MAGICCONST
                        176     BINARY_ADD                      
                        178     LOAD_CONST                      8: 4.5
                        180     LOAD_FAST                       11: z
                        182     BINARY_MULTIPLY                 
                        184     BINARY_SUBTRACT                 
                        186     LOAD_CONST                      1: 0
                        188     COMPARE_OP                      5 (>=)
                        190     POP_JUMP_IF_TRUE                102 (to 204)
                        192     LOAD_FAST                       12: r
                        194     LOAD_GLOBAL                     4: _log
                        196     LOAD_FAST                       11: z
                        198     CALL_FUNCTION                   1
                        200     COMPARE_OP                      5 (>=)
                        202     POP_JUMP_IF_FALSE               106 (to 212)
                        204     LOAD_FAST                       10: x
                        206     LOAD_FAST                       2: beta
                        208     BINARY_MULTIPLY                 
                        210     RETURN_VALUE                    
                        212     JUMP_ABSOLUTE                   36 (to 72)
                        214     LOAD_FAST                       1: alpha
                        216     LOAD_CONST                      3: 1
                        218     COMPARE_OP                      2 (==)
                        220     POP_JUMP_IF_FALSE               121 (to 242)
                        222     LOAD_GLOBAL                     4: _log
                        224     LOAD_CONST                      3: 1
                        226     LOAD_FAST                       3: random
                        228     CALL_FUNCTION                   0
                        230     BINARY_SUBTRACT                 
                        232     CALL_FUNCTION                   1
                        234     UNARY_NEGATIVE                  
                        236     LOAD_FAST                       2: beta
                        238     BINARY_MULTIPLY                 
                        240     RETURN_VALUE                    
                        242     NOP                             
                        244     LOAD_FAST                       3: random
                        246     CALL_FUNCTION                   0
                        248     STORE_FAST                      13: u
                        250     LOAD_GLOBAL                     7: _e
                        252     LOAD_FAST                       1: alpha
                        254     BINARY_ADD                      
                        256     LOAD_GLOBAL                     7: _e
                        258     BINARY_TRUE_DIVIDE              
                        260     STORE_FAST                      14: b
                        262     LOAD_FAST                       14: b
                        264     LOAD_FAST                       13: u
                        266     BINARY_MULTIPLY                 
                        268     STORE_FAST                      15: p
                        270     LOAD_FAST                       15: p
                        272     LOAD_CONST                      3: 1
                        274     COMPARE_OP                      1 (<=)
                        276     POP_JUMP_IF_FALSE               146 (to 292)
                        278     LOAD_FAST                       15: p
                        280     LOAD_CONST                      3: 1
                        282     LOAD_FAST                       1: alpha
                        284     BINARY_TRUE_DIVIDE              
                        286     BINARY_POWER                    
                        288     STORE_FAST                      10: x
                        290     JUMP_FORWARD                    9 (to 310)
                        292     LOAD_GLOBAL                     4: _log
                        294     LOAD_FAST                       14: b
                        296     LOAD_FAST                       15: p
                        298     BINARY_SUBTRACT                 
                        300     LOAD_FAST                       1: alpha
                        302     BINARY_TRUE_DIVIDE              
                        304     CALL_FUNCTION                   1
                        306     UNARY_NEGATIVE                  
                        308     STORE_FAST                      10: x
                        310     LOAD_FAST                       3: random
                        312     CALL_FUNCTION                   0
                        314     STORE_FAST                      7: u1
                        316     LOAD_FAST                       15: p
                        318     LOAD_CONST                      3: 1
                        320     COMPARE_OP                      4 (>)
                        322     POP_JUMP_IF_FALSE               176 (to 352)
                        324     LOAD_FAST                       7: u1
                        326     LOAD_FAST                       10: x
                        328     LOAD_FAST                       1: alpha
                        330     LOAD_CONST                      3: 1
                        332     BINARY_SUBTRACT                 
                        334     BINARY_POWER                    
                        336     COMPARE_OP                      1 (<=)
                        338     POP_JUMP_IF_FALSE               175 (to 350)
                        340     NOP                             
                        342     LOAD_FAST                       10: x
                        344     LOAD_FAST                       2: beta
                        346     BINARY_MULTIPLY                 
                        348     RETURN_VALUE                    
                        350     JUMP_FORWARD                    12 (to 376)
                        352     LOAD_FAST                       7: u1
                        354     LOAD_GLOBAL                     5: _exp
                        356     LOAD_FAST                       10: x
                        358     UNARY_NEGATIVE                  
                        360     CALL_FUNCTION                   1
                        362     COMPARE_OP                      1 (<=)
                        364     POP_JUMP_IF_FALSE               188 (to 376)
                        366     NOP                             
                        368     LOAD_FAST                       10: x
                        370     LOAD_FAST                       2: beta
                        372     BINARY_MULTIPLY                 
                        374     RETURN_VALUE                    
                        376     JUMP_ABSOLUTE                   122 (to 244)
                'Random.gammavariate'
                [Code]
                    File Name: random.py
                    Object Name: betavariate
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'gammavariate'
                    [Var Names]
                        'self'
                        'alpha'
                        'beta'
                        'y'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Beta distribution.\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n        Returned values range between 0 and 1.\n\n        '
                        1
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: gammavariate
                        4       LOAD_FAST                       1: alpha
                        6       LOAD_CONST                      1: 1
                        8       CALL_METHOD                     2
                        10      STORE_FAST                      3: y
                        12      LOAD_FAST                       3: y
                        14      POP_JUMP_IF_FALSE               18 (to 36)
                        16      LOAD_FAST                       3: y
                        18      LOAD_FAST                       3: y
                        20      LOAD_FAST                       0: self
                        22      LOAD_METHOD                     0: gammavariate
                        24      LOAD_FAST                       2: beta
                        26      LOAD_CONST                      1: 1
                        28      CALL_METHOD                     2
                        30      BINARY_ADD                      
                        32      BINARY_TRUE_DIVIDE              
                        34      RETURN_VALUE                    
                        36      LOAD_CONST                      2: 0
                        38      RETURN_VALUE                    
                'Random.betavariate'
                [Code]
                    File Name: random.py
                    Object Name: paretovariate
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'random'
                    [Var Names]
                        'self'
                        'alpha'
                        'u'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Pareto distribution.  alpha is the shape parameter.'
                        1
                        -1
                    [Disassembly]
                        0       LOAD_CONST                      1: 1
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: random
                        6       CALL_METHOD                     0
                        8       BINARY_SUBTRACT                 
                        10      STORE_FAST                      2: u
                        12      LOAD_FAST                       2: u
                        14      LOAD_CONST                      2: -1
                        16      LOAD_FAST                       1: alpha
                        18      BINARY_TRUE_DIVIDE              
                        20      BINARY_POWER                    
                        22      RETURN_VALUE                    
                'Random.paretovariate'
                [Code]
                    File Name: random.py
                    Object Name: weibullvariate
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'random'
                        '_log'
                    [Var Names]
                        'self'
                        'alpha'
                        'beta'
                        'u'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Weibull distribution.\n\n        alpha is the scale parameter and beta is the shape parameter.\n\n        '
                        1
                    [Disassembly]
                        0       LOAD_CONST                      1: 1
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: random
                        6       CALL_METHOD                     0
                        8       BINARY_SUBTRACT                 
                        10      STORE_FAST                      3: u
                        12      LOAD_FAST                       1: alpha
                        14      LOAD_GLOBAL                     1: _log
                        16      LOAD_FAST                       3: u
                        18      CALL_FUNCTION                   1
                        20      UNARY_NEGATIVE                  
                        22      LOAD_CONST                      1: 1
                        24      LOAD_FAST                       2: beta
                        26      BINARY_TRUE_DIVIDE              
                        28      BINARY_POWER                    
                        30      BINARY_MULTIPLY                 
                        32      RETURN_VALUE                    
                'Random.weibullvariate'
                (
                    None
                )
                (
                    None
                    2
                )
                (
                    0
                    1
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Random'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Random number generator base class used by bound module functions.\n\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods:  random(), seed(), getstate(), and setstate().\n    Optionally, implement a getrandbits() method so that randrange()\n    can cover arbitrarily large ranges.\n\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: 3
                14      STORE_NAME                      4: VERSION
                16      LOAD_CONST                      66: (None,)
                18      LOAD_CONST                      4: <CODE> __init__
                20      LOAD_CONST                      5: 'Random.__init__'
                22      MAKE_FUNCTION                   1
                24      STORE_NAME                      5: __init__
                26      LOAD_CONST                      67: (None, 2)
                28      LOAD_CLOSURE                    0: __class__
                30      BUILD_TUPLE                     1
                32      LOAD_CONST                      7: <CODE> seed
                34      LOAD_CONST                      8: 'Random.seed'
                36      MAKE_FUNCTION                   9
                38      STORE_NAME                      6: seed
                40      LOAD_CLOSURE                    0: __class__
                42      BUILD_TUPLE                     1
                44      LOAD_CONST                      9: <CODE> getstate
                46      LOAD_CONST                      10: 'Random.getstate'
                48      MAKE_FUNCTION                   8
                50      STORE_NAME                      7: getstate
                52      LOAD_CLOSURE                    0: __class__
                54      BUILD_TUPLE                     1
                56      LOAD_CONST                      11: <CODE> setstate
                58      LOAD_CONST                      12: 'Random.setstate'
                60      MAKE_FUNCTION                   8
                62      STORE_NAME                      8: setstate
                64      LOAD_CONST                      13: <CODE> __getstate__
                66      LOAD_CONST                      14: 'Random.__getstate__'
                68      MAKE_FUNCTION                   0
                70      STORE_NAME                      9: __getstate__
                72      LOAD_CONST                      15: <CODE> __setstate__
                74      LOAD_CONST                      16: 'Random.__setstate__'
                76      MAKE_FUNCTION                   0
                78      STORE_NAME                      10: __setstate__
                80      LOAD_CONST                      17: <CODE> __reduce__
                82      LOAD_CONST                      18: 'Random.__reduce__'
                84      MAKE_FUNCTION                   0
                86      STORE_NAME                      11: __reduce__
                88      LOAD_CONST                      19: <CODE> __init_subclass__
                90      LOAD_CONST                      20: 'Random.__init_subclass__'
                92      MAKE_FUNCTION                   0
                94      STORE_NAME                      12: __init_subclass__
                96      LOAD_CONST                      21: <CODE> _randbelow_with_getrandbits
                98      LOAD_CONST                      22: 'Random._randbelow_with_getrandbits'
                100     MAKE_FUNCTION                   0
                102     STORE_NAME                      13: _randbelow_with_getrandbits
                104     LOAD_CONST                      23: 1
                106     LOAD_NAME                       14: BPF
                108     BINARY_LSHIFT                   
                110     BUILD_TUPLE                     1
                112     LOAD_CONST                      24: <CODE> _randbelow_without_getrandbits
                114     LOAD_CONST                      25: 'Random._randbelow_without_getrandbits'
                116     MAKE_FUNCTION                   1
                118     STORE_NAME                      15: _randbelow_without_getrandbits
                120     LOAD_NAME                       13: _randbelow_with_getrandbits
                122     STORE_NAME                      16: _randbelow
                124     LOAD_CONST                      26: <CODE> randbytes
                126     LOAD_CONST                      27: 'Random.randbytes'
                128     MAKE_FUNCTION                   0
                130     STORE_NAME                      17: randbytes
                132     LOAD_CONST                      3: None
                134     LOAD_NAME                       18: _ONE
                136     BUILD_TUPLE                     2
                138     LOAD_CONST                      28: <CODE> randrange
                140     LOAD_CONST                      29: 'Random.randrange'
                142     MAKE_FUNCTION                   1
                144     STORE_NAME                      19: randrange
                146     LOAD_CONST                      30: <CODE> randint
                148     LOAD_CONST                      31: 'Random.randint'
                150     MAKE_FUNCTION                   0
                152     STORE_NAME                      20: randint
                154     LOAD_CONST                      32: <CODE> choice
                156     LOAD_CONST                      33: 'Random.choice'
                158     MAKE_FUNCTION                   0
                160     STORE_NAME                      21: choice
                162     LOAD_CONST                      66: (None,)
                164     LOAD_CONST                      34: <CODE> shuffle
                166     LOAD_CONST                      35: 'Random.shuffle'
                168     MAKE_FUNCTION                   1
                170     STORE_NAME                      22: shuffle
                172     LOAD_CONST                      3: None
                174     LOAD_CONST                      36: ('counts',)
                176     BUILD_CONST_KEY_MAP             1
                178     LOAD_CONST                      37: <CODE> sample
                180     LOAD_CONST                      38: 'Random.sample'
                182     MAKE_FUNCTION                   2
                184     STORE_NAME                      23: sample
                186     LOAD_CONST                      66: (None,)
                188     LOAD_CONST                      3: None
                190     LOAD_CONST                      23: 1
                192     LOAD_CONST                      39: ('cum_weights', 'k')
                194     BUILD_CONST_KEY_MAP             2
                196     LOAD_CONST                      40: <CODE> choices
                198     LOAD_CONST                      41: 'Random.choices'
                200     MAKE_FUNCTION                   3
                202     STORE_NAME                      24: choices
                204     LOAD_CONST                      42: <CODE> uniform
                206     LOAD_CONST                      43: 'Random.uniform'
                208     MAKE_FUNCTION                   0
                210     STORE_NAME                      25: uniform
                212     LOAD_CONST                      68: (0, 1, None)
                214     LOAD_CONST                      46: <CODE> triangular
                216     LOAD_CONST                      47: 'Random.triangular'
                218     MAKE_FUNCTION                   1
                220     STORE_NAME                      26: triangular
                222     LOAD_CONST                      48: <CODE> normalvariate
                224     LOAD_CONST                      49: 'Random.normalvariate'
                226     MAKE_FUNCTION                   0
                228     STORE_NAME                      27: normalvariate
                230     LOAD_CONST                      50: <CODE> gauss
                232     LOAD_CONST                      51: 'Random.gauss'
                234     MAKE_FUNCTION                   0
                236     STORE_NAME                      28: gauss
                238     LOAD_CONST                      52: <CODE> lognormvariate
                240     LOAD_CONST                      53: 'Random.lognormvariate'
                242     MAKE_FUNCTION                   0
                244     STORE_NAME                      29: lognormvariate
                246     LOAD_CONST                      54: <CODE> expovariate
                248     LOAD_CONST                      55: 'Random.expovariate'
                250     MAKE_FUNCTION                   0
                252     STORE_NAME                      30: expovariate
                254     LOAD_CONST                      56: <CODE> vonmisesvariate
                256     LOAD_CONST                      57: 'Random.vonmisesvariate'
                258     MAKE_FUNCTION                   0
                260     STORE_NAME                      31: vonmisesvariate
                262     LOAD_CONST                      58: <CODE> gammavariate
                264     LOAD_CONST                      59: 'Random.gammavariate'
                266     MAKE_FUNCTION                   0
                268     STORE_NAME                      32: gammavariate
                270     LOAD_CONST                      60: <CODE> betavariate
                272     LOAD_CONST                      61: 'Random.betavariate'
                274     MAKE_FUNCTION                   0
                276     STORE_NAME                      33: betavariate
                278     LOAD_CONST                      62: <CODE> paretovariate
                280     LOAD_CONST                      63: 'Random.paretovariate'
                282     MAKE_FUNCTION                   0
                284     STORE_NAME                      34: paretovariate
                286     LOAD_CONST                      64: <CODE> weibullvariate
                288     LOAD_CONST                      65: 'Random.weibullvariate'
                290     MAKE_FUNCTION                   0
                292     STORE_NAME                      35: weibullvariate
                294     LOAD_CLOSURE                    0: __class__
                296     DUP_TOP                         
                298     STORE_NAME                      36: __classcell__
                300     RETURN_VALUE                    
        'Random'
        [Code]
            File Name: random.py
            Object Name: SystemRandom
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'random'
                'getrandbits'
                'randbytes'
                'seed'
                '_notimplemented'
                'getstate'
                'setstate'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'SystemRandom'
                'Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n\n     Not available on all systems (see os.urandom() for details).\n\n    '
                [Code]
                    File Name: random.py
                    Object Name: random
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'int'
                        'from_bytes'
                        '_urandom'
                        'RECIP_BPF'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Get the next random number in the range [0.0, 1.0).'
                        7
                        'big'
                        3
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: int
                        2       LOAD_METHOD                     1: from_bytes
                        4       LOAD_GLOBAL                     2: _urandom
                        6       LOAD_CONST                      1: 7
                        8       CALL_FUNCTION                   1
                        10      LOAD_CONST                      2: 'big'
                        12      CALL_METHOD                     2
                        14      LOAD_CONST                      3: 3
                        16      BINARY_RSHIFT                   
                        18      LOAD_GLOBAL                     3: RECIP_BPF
                        20      BINARY_MULTIPLY                 
                        22      RETURN_VALUE                    
                'SystemRandom.random'
                [Code]
                    File Name: random.py
                    Object Name: getrandbits
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ValueError'
                        'int'
                        'from_bytes'
                        '_urandom'
                    [Var Names]
                        'self'
                        'k'
                        'numbytes'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'getrandbits(k) -> x.  Generates an int with k random bits.'
                        0
                        'number of bits must be non-negative'
                        7
                        8
                        'big'
                    [Disassembly]
                        0       LOAD_FAST                       1: k
                        2       LOAD_CONST                      1: 0
                        4       COMPARE_OP                      0 (<)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: ValueError
                        10      LOAD_CONST                      2: 'number of bits must be non-negative'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_FAST                       1: k
                        18      LOAD_CONST                      3: 7
                        20      BINARY_ADD                      
                        22      LOAD_CONST                      4: 8
                        24      BINARY_FLOOR_DIVIDE             
                        26      STORE_FAST                      2: numbytes
                        28      LOAD_GLOBAL                     1: int
                        30      LOAD_METHOD                     2: from_bytes
                        32      LOAD_GLOBAL                     3: _urandom
                        34      LOAD_FAST                       2: numbytes
                        36      CALL_FUNCTION                   1
                        38      LOAD_CONST                      5: 'big'
                        40      CALL_METHOD                     2
                        42      STORE_FAST                      3: x
                        44      LOAD_FAST                       3: x
                        46      LOAD_FAST                       2: numbytes
                        48      LOAD_CONST                      4: 8
                        50      BINARY_MULTIPLY                 
                        52      LOAD_FAST                       1: k
                        54      BINARY_SUBTRACT                 
                        56      BINARY_RSHIFT                   
                        58      RETURN_VALUE                    
                'SystemRandom.getrandbits'
                [Code]
                    File Name: random.py
                    Object Name: randbytes
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_urandom'
                    [Var Names]
                        'self'
                        'n'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Generate n random bytes.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _urandom
                        2       LOAD_FAST                       1: n
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                'SystemRandom.randbytes'
                [Code]
                    File Name: random.py
                    Object Name: seed
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 1
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'args'
                        'kwds'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Stub method.  Not used for a system random number generator.'
                        None
                    [Disassembly]
                        0       LOAD_CONST                      1: None
                        2       RETURN_VALUE                    
                'SystemRandom.seed'
                [Code]
                    File Name: random.py
                    Object Name: _notimplemented
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'NotImplementedError'
                    [Var Names]
                        'self'
                        'args'
                        'kwds'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Method should not be called for a system random number generator.'
                        'System entropy source does not have state.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: NotImplementedError
                        2       LOAD_CONST                      1: 'System entropy source does not have state.'
                        4       CALL_FUNCTION                   1
                        6       RAISE_VARARGS                   1
                'SystemRandom._notimplemented'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SystemRandom'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n\n     Not available on all systems (see os.urandom() for details).\n\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> random
                14      LOAD_CONST                      3: 'SystemRandom.random'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: random
                20      LOAD_CONST                      4: <CODE> getrandbits
                22      LOAD_CONST                      5: 'SystemRandom.getrandbits'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: getrandbits
                28      LOAD_CONST                      6: <CODE> randbytes
                30      LOAD_CONST                      7: 'SystemRandom.randbytes'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: randbytes
                36      LOAD_CONST                      8: <CODE> seed
                38      LOAD_CONST                      9: 'SystemRandom.seed'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: seed
                44      LOAD_CONST                      10: <CODE> _notimplemented
                46      LOAD_CONST                      11: 'SystemRandom._notimplemented'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      8: _notimplemented
                52      LOAD_NAME                       8: _notimplemented
                54      DUP_TOP                         
                56      STORE_NAME                      9: getstate
                58      STORE_NAME                      10: setstate
                60      LOAD_CONST                      12: None
                62      RETURN_VALUE                    
        'SystemRandom'
        [Code]
            File Name: random.py
            Object Name: _test_generator
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 13
            Stack Size: 6
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'statistics'
                'stdev'
                'fmean'
                'time'
                'perf_counter'
                '_repeat'
                'min'
                'max'
                'print'
                '__name__'
            [Var Names]
                'n'
                'func'
                'args'
                'stdev'
                'mean'
                'perf_counter'
                't0'
                'data'
                't1'
                'xbar'
                'sigma'
                'low'
                'high'
            [Free Vars]
            [Cell Vars]
                'args'
                'func'
            [Constants]
                None
                0
                (
                    'stdev'
                    'fmean'
                )
                (
                    'perf_counter'
                )
                [Code]
                    File Name: random.py
                    Object Name: <listcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                    [Var Names]
                        '.0'
                        'i'
                    [Free Vars]
                        'args'
                        'func'
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        6 (to 18)
                        6       STORE_FAST                      1: i
                        8       LOAD_DEREF                      1: func
                        10      LOAD_DEREF                      0: args
                        12      CALL_FUNCTION_EX                0
                        14      LIST_APPEND                     2
                        16      JUMP_ABSOLUTE                   2 (to 4)
                        18      RETURN_VALUE                    
                '_test_generator.<locals>.<listcomp>'
                '.3f'
                ' sec, '
                ' times '
                'avg %g, stddev %g, min %g, max %g\n'
            [Disassembly]
                0       LOAD_CONST                      1: 0
                2       LOAD_CONST                      2: ('stdev', 'fmean')
                4       IMPORT_NAME                     0: statistics
                6       IMPORT_FROM                     1: stdev
                8       STORE_FAST                      3: stdev
                10      IMPORT_FROM                     2: fmean
                12      STORE_FAST                      4: mean
                14      POP_TOP                         
                16      LOAD_CONST                      1: 0
                18      LOAD_CONST                      3: ('perf_counter',)
                20      IMPORT_NAME                     3: time
                22      IMPORT_FROM                     4: perf_counter
                24      STORE_FAST                      5: perf_counter
                26      POP_TOP                         
                28      LOAD_FAST                       5: perf_counter
                30      CALL_FUNCTION                   0
                32      STORE_FAST                      6: t0
                34      LOAD_CLOSURE                    0: args
                36      LOAD_CLOSURE                    1: func
                38      BUILD_TUPLE                     2
                40      LOAD_CONST                      4: <CODE> <listcomp>
                42      LOAD_CONST                      5: '_test_generator.<locals>.<listcomp>'
                44      MAKE_FUNCTION                   8
                46      LOAD_GLOBAL                     5: _repeat
                48      LOAD_CONST                      0: None
                50      LOAD_FAST                       0: n
                52      CALL_FUNCTION                   2
                54      GET_ITER                        
                56      CALL_FUNCTION                   1
                58      STORE_FAST                      7: data
                60      LOAD_FAST                       5: perf_counter
                62      CALL_FUNCTION                   0
                64      STORE_FAST                      8: t1
                66      LOAD_FAST                       4: mean
                68      LOAD_FAST                       7: data
                70      CALL_FUNCTION                   1
                72      STORE_FAST                      9: xbar
                74      LOAD_FAST                       3: stdev
                76      LOAD_FAST                       7: data
                78      LOAD_FAST                       9: xbar
                80      CALL_FUNCTION                   2
                82      STORE_FAST                      10: sigma
                84      LOAD_GLOBAL                     6: min
                86      LOAD_FAST                       7: data
                88      CALL_FUNCTION                   1
                90      STORE_FAST                      11: low
                92      LOAD_GLOBAL                     7: max
                94      LOAD_FAST                       7: data
                96      CALL_FUNCTION                   1
                98      STORE_FAST                      12: high
                100     LOAD_GLOBAL                     8: print
                102     LOAD_FAST                       8: t1
                104     LOAD_FAST                       6: t0
                106     BINARY_SUBTRACT                 
                108     LOAD_CONST                      6: '.3f'
                110     FORMAT_VALUE                    4 (FVC_NONE | FVS_HAVE_SPEC)
                112     LOAD_CONST                      7: ' sec, '
                114     LOAD_FAST                       0: n
                116     FORMAT_VALUE                    0 (FVC_NONE)
                118     LOAD_CONST                      8: ' times '
                120     LOAD_DEREF                      1: func
                122     LOAD_ATTR                       9: __name__
                124     FORMAT_VALUE                    0 (FVC_NONE)
                126     BUILD_STRING                    5
                128     CALL_FUNCTION                   1
                130     POP_TOP                         
                132     LOAD_GLOBAL                     8: print
                134     LOAD_CONST                      9: 'avg %g, stddev %g, min %g, max %g\n'
                136     LOAD_FAST                       9: xbar
                138     LOAD_FAST                       10: sigma
                140     LOAD_FAST                       11: low
                142     LOAD_FAST                       12: high
                144     BUILD_TUPLE                     4
                146     BINARY_MODULO                   
                148     CALL_FUNCTION                   1
                150     POP_TOP                         
                152     LOAD_CONST                      0: None
                154     RETURN_VALUE                    
        '_test_generator'
        2000
        [Code]
            File Name: random.py
            Object Name: _test
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_test_generator'
                'random'
                'normalvariate'
                'lognormvariate'
                'vonmisesvariate'
                'gammavariate'
                'gauss'
                'betavariate'
                'triangular'
            [Var Names]
                'N'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                (
                )
                (
                    0
                    1
                )
                (
                    0.01
                    1
                )
                (
                    0.1
                    1
                )
                (
                    0.1
                    2
                )
                (
                    0.5
                    1
                )
                (
                    0.9
                    1
                )
                (
                    1
                    1
                )
                (
                    2
                    1
                )
                (
                    20
                    1
                )
                (
                    200
                    1
                )
                (
                    3
                    3
                )
                (
                    0
                    1
                    0.333333
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: _test_generator
                2       LOAD_FAST                       0: N
                4       LOAD_GLOBAL                     1: random
                6       LOAD_CONST                      1: ()
                8       CALL_FUNCTION                   3
                10      POP_TOP                         
                12      LOAD_GLOBAL                     0: _test_generator
                14      LOAD_FAST                       0: N
                16      LOAD_GLOBAL                     2: normalvariate
                18      LOAD_CONST                      2: (0, 1)
                20      CALL_FUNCTION                   3
                22      POP_TOP                         
                24      LOAD_GLOBAL                     0: _test_generator
                26      LOAD_FAST                       0: N
                28      LOAD_GLOBAL                     3: lognormvariate
                30      LOAD_CONST                      2: (0, 1)
                32      CALL_FUNCTION                   3
                34      POP_TOP                         
                36      LOAD_GLOBAL                     0: _test_generator
                38      LOAD_FAST                       0: N
                40      LOAD_GLOBAL                     4: vonmisesvariate
                42      LOAD_CONST                      2: (0, 1)
                44      CALL_FUNCTION                   3
                46      POP_TOP                         
                48      LOAD_GLOBAL                     0: _test_generator
                50      LOAD_FAST                       0: N
                52      LOAD_GLOBAL                     5: gammavariate
                54      LOAD_CONST                      3: (0.01, 1)
                56      CALL_FUNCTION                   3
                58      POP_TOP                         
                60      LOAD_GLOBAL                     0: _test_generator
                62      LOAD_FAST                       0: N
                64      LOAD_GLOBAL                     5: gammavariate
                66      LOAD_CONST                      4: (0.1, 1)
                68      CALL_FUNCTION                   3
                70      POP_TOP                         
                72      LOAD_GLOBAL                     0: _test_generator
                74      LOAD_FAST                       0: N
                76      LOAD_GLOBAL                     5: gammavariate
                78      LOAD_CONST                      5: (0.1, 2)
                80      CALL_FUNCTION                   3
                82      POP_TOP                         
                84      LOAD_GLOBAL                     0: _test_generator
                86      LOAD_FAST                       0: N
                88      LOAD_GLOBAL                     5: gammavariate
                90      LOAD_CONST                      6: (0.5, 1)
                92      CALL_FUNCTION                   3
                94      POP_TOP                         
                96      LOAD_GLOBAL                     0: _test_generator
                98      LOAD_FAST                       0: N
                100     LOAD_GLOBAL                     5: gammavariate
                102     LOAD_CONST                      7: (0.9, 1)
                104     CALL_FUNCTION                   3
                106     POP_TOP                         
                108     LOAD_GLOBAL                     0: _test_generator
                110     LOAD_FAST                       0: N
                112     LOAD_GLOBAL                     5: gammavariate
                114     LOAD_CONST                      8: (1, 1)
                116     CALL_FUNCTION                   3
                118     POP_TOP                         
                120     LOAD_GLOBAL                     0: _test_generator
                122     LOAD_FAST                       0: N
                124     LOAD_GLOBAL                     5: gammavariate
                126     LOAD_CONST                      9: (2, 1)
                128     CALL_FUNCTION                   3
                130     POP_TOP                         
                132     LOAD_GLOBAL                     0: _test_generator
                134     LOAD_FAST                       0: N
                136     LOAD_GLOBAL                     5: gammavariate
                138     LOAD_CONST                      10: (20, 1)
                140     CALL_FUNCTION                   3
                142     POP_TOP                         
                144     LOAD_GLOBAL                     0: _test_generator
                146     LOAD_FAST                       0: N
                148     LOAD_GLOBAL                     5: gammavariate
                150     LOAD_CONST                      11: (200, 1)
                152     CALL_FUNCTION                   3
                154     POP_TOP                         
                156     LOAD_GLOBAL                     0: _test_generator
                158     LOAD_FAST                       0: N
                160     LOAD_GLOBAL                     6: gauss
                162     LOAD_CONST                      2: (0, 1)
                164     CALL_FUNCTION                   3
                166     POP_TOP                         
                168     LOAD_GLOBAL                     0: _test_generator
                170     LOAD_FAST                       0: N
                172     LOAD_GLOBAL                     7: betavariate
                174     LOAD_CONST                      12: (3, 3)
                176     CALL_FUNCTION                   3
                178     POP_TOP                         
                180     LOAD_GLOBAL                     0: _test_generator
                182     LOAD_FAST                       0: N
                184     LOAD_GLOBAL                     8: triangular
                186     LOAD_CONST                      13: (0, 1, 0.333333)
                188     CALL_FUNCTION                   3
                190     POP_TOP                         
                192     LOAD_CONST                      0: None
                194     RETURN_VALUE                    
        '_test'
        'fork'
        (
            'after_in_child'
        )
        '__main__'
        (
            2000
        )
    [Disassembly]
        0       LOAD_CONST                      0: 'Random variable generators.\n\n    bytes\n    -----\n           uniform bytes (values between 0 and 255)\n\n    integers\n    --------\n           uniform within range\n\n    sequences\n    ---------\n           pick random element\n           pick random sample\n           pick weighted random sample\n           generate random permutation\n\n    distributions on the real line:\n    ------------------------------\n           uniform\n           triangular\n           normal (Gaussian)\n           lognormal\n           negative exponential\n           gamma\n           beta\n           pareto\n           Weibull\n\n    distributions on the circle (angles 0 to 2pi)\n    ---------------------------------------------\n           circular uniform\n           von Mises\n\nGeneral notes on the underlying Mersenne Twister core generator:\n\n* The period is 2**19937-1.\n* It is one of the most extensively tested generators in existence.\n* The random() method is implemented in C, executes in a single Python step,\n  and is, therefore, threadsafe.\n\n'
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: 0
        6       LOAD_CONST                      2: ('warn',)
        8       IMPORT_NAME                     1: warnings
        10      IMPORT_FROM                     2: warn
        12      STORE_NAME                      3: _warn
        14      POP_TOP                         
        16      LOAD_CONST                      1: 0
        18      LOAD_CONST                      3: ('log', 'exp', 'pi', 'e', 'ceil')
        20      IMPORT_NAME                     4: math
        22      IMPORT_FROM                     5: log
        24      STORE_NAME                      6: _log
        26      IMPORT_FROM                     7: exp
        28      STORE_NAME                      8: _exp
        30      IMPORT_FROM                     9: pi
        32      STORE_NAME                      10: _pi
        34      IMPORT_FROM                     11: e
        36      STORE_NAME                      12: _e
        38      IMPORT_FROM                     13: ceil
        40      STORE_NAME                      14: _ceil
        42      POP_TOP                         
        44      LOAD_CONST                      1: 0
        46      LOAD_CONST                      4: ('sqrt', 'acos', 'cos', 'sin')
        48      IMPORT_NAME                     4: math
        50      IMPORT_FROM                     15: sqrt
        52      STORE_NAME                      16: _sqrt
        54      IMPORT_FROM                     17: acos
        56      STORE_NAME                      18: _acos
        58      IMPORT_FROM                     19: cos
        60      STORE_NAME                      20: _cos
        62      IMPORT_FROM                     21: sin
        64      STORE_NAME                      22: _sin
        66      POP_TOP                         
        68      LOAD_CONST                      1: 0
        70      LOAD_CONST                      5: ('tau', 'floor', 'isfinite')
        72      IMPORT_NAME                     4: math
        74      IMPORT_FROM                     23: tau
        76      STORE_NAME                      24: TWOPI
        78      IMPORT_FROM                     25: floor
        80      STORE_NAME                      26: _floor
        82      IMPORT_FROM                     27: isfinite
        84      STORE_NAME                      28: _isfinite
        86      POP_TOP                         
        88      LOAD_CONST                      1: 0
        90      LOAD_CONST                      6: ('urandom',)
        92      IMPORT_NAME                     29: os
        94      IMPORT_FROM                     30: urandom
        96      STORE_NAME                      31: _urandom
        98      POP_TOP                         
        100     LOAD_CONST                      1: 0
        102     LOAD_CONST                      7: ('Set', 'Sequence')
        104     IMPORT_NAME                     32: _collections_abc
        106     IMPORT_FROM                     33: Set
        108     STORE_NAME                      34: _Set
        110     IMPORT_FROM                     35: Sequence
        112     STORE_NAME                      36: _Sequence
        114     POP_TOP                         
        116     LOAD_CONST                      1: 0
        118     LOAD_CONST                      8: ('index',)
        120     IMPORT_NAME                     37: operator
        122     IMPORT_FROM                     38: index
        124     STORE_NAME                      39: _index
        126     POP_TOP                         
        128     LOAD_CONST                      1: 0
        130     LOAD_CONST                      9: ('accumulate', 'repeat')
        132     IMPORT_NAME                     40: itertools
        134     IMPORT_FROM                     41: accumulate
        136     STORE_NAME                      42: _accumulate
        138     IMPORT_FROM                     43: repeat
        140     STORE_NAME                      44: _repeat
        142     POP_TOP                         
        144     LOAD_CONST                      1: 0
        146     LOAD_CONST                      10: ('bisect',)
        148     IMPORT_NAME                     45: bisect
        150     IMPORT_FROM                     45: bisect
        152     STORE_NAME                      46: _bisect
        154     POP_TOP                         
        156     LOAD_CONST                      1: 0
        158     LOAD_CONST                      11: None
        160     IMPORT_NAME                     29: os
        162     STORE_NAME                      47: _os
        164     LOAD_CONST                      1: 0
        166     LOAD_CONST                      11: None
        168     IMPORT_NAME                     48: _random
        170     STORE_NAME                      48: _random
        172     SETUP_FINALLY                   8 (to 190)
        174     LOAD_CONST                      1: 0
        176     LOAD_CONST                      12: ('sha512',)
        178     IMPORT_NAME                     49: _sha512
        180     IMPORT_FROM                     50: sha512
        182     STORE_NAME                      49: _sha512
        184     POP_TOP                         
        186     POP_BLOCK                       
        188     JUMP_FORWARD                    15 (to 220)
        190     DUP_TOP                         
        192     LOAD_NAME                       51: ImportError
        194     JUMP_IF_NOT_EXC_MATCH           109 (to 218)
        196     POP_TOP                         
        198     POP_TOP                         
        200     POP_TOP                         
        202     LOAD_CONST                      1: 0
        204     LOAD_CONST                      12: ('sha512',)
        206     IMPORT_NAME                     52: hashlib
        208     IMPORT_FROM                     50: sha512
        210     STORE_NAME                      49: _sha512
        212     POP_TOP                         
        214     POP_EXCEPT                      
        216     JUMP_FORWARD                    1 (to 220)
        218     RERAISE                         0
        220     BUILD_LIST                      0
        222     LOAD_CONST                      13: ('Random', 'SystemRandom', 'betavariate', 'choice', 'choices', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'lognormvariate', 'normalvariate', 'paretovariate', 'randbytes', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate')
        224     LIST_EXTEND                     1
        226     STORE_NAME                      53: __all__
        228     LOAD_CONST                      14: 4
        230     LOAD_NAME                       8: _exp
        232     LOAD_CONST                      15: -0.5
        234     CALL_FUNCTION                   1
        236     BINARY_MULTIPLY                 
        238     LOAD_NAME                       16: _sqrt
        240     LOAD_CONST                      16: 2
        242     CALL_FUNCTION                   1
        244     BINARY_TRUE_DIVIDE              
        246     STORE_NAME                      54: NV_MAGICCONST
        248     LOAD_NAME                       6: _log
        250     LOAD_CONST                      17: 4
        252     CALL_FUNCTION                   1
        254     STORE_NAME                      55: LOG4
        256     LOAD_CONST                      18: 1
        258     LOAD_NAME                       6: _log
        260     LOAD_CONST                      19: 4.5
        262     CALL_FUNCTION                   1
        264     BINARY_ADD                      
        266     STORE_NAME                      56: SG_MAGICCONST
        268     LOAD_CONST                      20: 53
        270     STORE_NAME                      57: BPF
        272     LOAD_CONST                      21: 2
        274     LOAD_NAME                       57: BPF
        276     UNARY_NEGATIVE                  
        278     BINARY_POWER                    
        280     STORE_NAME                      58: RECIP_BPF
        282     LOAD_CONST                      22: 1
        284     STORE_NAME                      59: _ONE
        286     LOAD_BUILD_CLASS                
        288     LOAD_CONST                      23: <CODE> Random
        290     LOAD_CONST                      24: 'Random'
        292     MAKE_FUNCTION                   0
        294     LOAD_CONST                      24: 'Random'
        296     LOAD_NAME                       48: _random
        298     LOAD_ATTR                       60: Random
        300     CALL_FUNCTION                   3
        302     STORE_NAME                      60: Random
        304     LOAD_BUILD_CLASS                
        306     LOAD_CONST                      25: <CODE> SystemRandom
        308     LOAD_CONST                      26: 'SystemRandom'
        310     MAKE_FUNCTION                   0
        312     LOAD_CONST                      26: 'SystemRandom'
        314     LOAD_NAME                       60: Random
        316     CALL_FUNCTION                   3
        318     STORE_NAME                      61: SystemRandom
        320     LOAD_NAME                       60: Random
        322     CALL_FUNCTION                   0
        324     STORE_NAME                      62: _inst
        326     LOAD_NAME                       62: _inst
        328     LOAD_ATTR                       63: seed
        330     STORE_NAME                      63: seed
        332     LOAD_NAME                       62: _inst
        334     LOAD_ATTR                       64: random
        336     STORE_NAME                      64: random
        338     LOAD_NAME                       62: _inst
        340     LOAD_ATTR                       65: uniform
        342     STORE_NAME                      65: uniform
        344     LOAD_NAME                       62: _inst
        346     LOAD_ATTR                       66: triangular
        348     STORE_NAME                      66: triangular
        350     LOAD_NAME                       62: _inst
        352     LOAD_ATTR                       67: randint
        354     STORE_NAME                      67: randint
        356     LOAD_NAME                       62: _inst
        358     LOAD_ATTR                       68: choice
        360     STORE_NAME                      68: choice
        362     LOAD_NAME                       62: _inst
        364     LOAD_ATTR                       69: randrange
        366     STORE_NAME                      69: randrange
        368     LOAD_NAME                       62: _inst
        370     LOAD_ATTR                       70: sample
        372     STORE_NAME                      70: sample
        374     LOAD_NAME                       62: _inst
        376     LOAD_ATTR                       71: shuffle
        378     STORE_NAME                      71: shuffle
        380     LOAD_NAME                       62: _inst
        382     LOAD_ATTR                       72: choices
        384     STORE_NAME                      72: choices
        386     LOAD_NAME                       62: _inst
        388     LOAD_ATTR                       73: normalvariate
        390     STORE_NAME                      73: normalvariate
        392     LOAD_NAME                       62: _inst
        394     LOAD_ATTR                       74: lognormvariate
        396     STORE_NAME                      74: lognormvariate
        398     LOAD_NAME                       62: _inst
        400     LOAD_ATTR                       75: expovariate
        402     STORE_NAME                      75: expovariate
        404     LOAD_NAME                       62: _inst
        406     LOAD_ATTR                       76: vonmisesvariate
        408     STORE_NAME                      76: vonmisesvariate
        410     LOAD_NAME                       62: _inst
        412     LOAD_ATTR                       77: gammavariate
        414     STORE_NAME                      77: gammavariate
        416     LOAD_NAME                       62: _inst
        418     LOAD_ATTR                       78: gauss
        420     STORE_NAME                      78: gauss
        422     LOAD_NAME                       62: _inst
        424     LOAD_ATTR                       79: betavariate
        426     STORE_NAME                      79: betavariate
        428     LOAD_NAME                       62: _inst
        430     LOAD_ATTR                       80: paretovariate
        432     STORE_NAME                      80: paretovariate
        434     LOAD_NAME                       62: _inst
        436     LOAD_ATTR                       81: weibullvariate
        438     STORE_NAME                      81: weibullvariate
        440     LOAD_NAME                       62: _inst
        442     LOAD_ATTR                       82: getstate
        444     STORE_NAME                      82: getstate
        446     LOAD_NAME                       62: _inst
        448     LOAD_ATTR                       83: setstate
        450     STORE_NAME                      83: setstate
        452     LOAD_NAME                       62: _inst
        454     LOAD_ATTR                       84: getrandbits
        456     STORE_NAME                      84: getrandbits
        458     LOAD_NAME                       62: _inst
        460     LOAD_ATTR                       85: randbytes
        462     STORE_NAME                      85: randbytes
        464     LOAD_CONST                      27: <CODE> _test_generator
        466     LOAD_CONST                      28: '_test_generator'
        468     MAKE_FUNCTION                   0
        470     STORE_NAME                      86: _test_generator
        472     LOAD_CONST                      35: (2000,)
        474     LOAD_CONST                      30: <CODE> _test
        476     LOAD_CONST                      31: '_test'
        478     MAKE_FUNCTION                   1
        480     STORE_NAME                      87: _test
        482     LOAD_NAME                       88: hasattr
        484     LOAD_NAME                       47: _os
        486     LOAD_CONST                      32: 'fork'
        488     CALL_FUNCTION                   2
        490     POP_JUMP_IF_FALSE               253 (to 506)
        492     LOAD_NAME                       47: _os
        494     LOAD_ATTR                       89: register_at_fork
        496     LOAD_NAME                       62: _inst
        498     LOAD_ATTR                       63: seed
        500     LOAD_CONST                      33: ('after_in_child',)
        502     CALL_FUNCTION_KW                1
        504     POP_TOP                         
        506     LOAD_NAME                       90: __name__
        508     LOAD_CONST                      34: '__main__'
        510     COMPARE_OP                      2 (==)
        512     POP_JUMP_IF_FALSE               263 (to 526)
        516     LOAD_NAME                       87: _test
        518     CALL_FUNCTION                   0
        520     POP_TOP                         
        522     LOAD_CONST                      11: None
        524     RETURN_VALUE                    
        526     LOAD_CONST                      11: None
        528     RETURN_VALUE                    
