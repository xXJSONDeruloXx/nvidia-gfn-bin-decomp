statistics.pyc (Python 3.10)
[Code]
    File Name: statistics.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 8
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        '__all__'
        'math'
        'numbers'
        'random'
        'fractions'
        'Fraction'
        'decimal'
        'Decimal'
        'itertools'
        'groupby'
        'repeat'
        'bisect'
        'bisect_left'
        'bisect_right'
        'hypot'
        'sqrt'
        'fabs'
        'exp'
        'erf'
        'tau'
        'log'
        'fsum'
        'operator'
        'itemgetter'
        'collections'
        'Counter'
        'namedtuple'
        'ValueError'
        'StatisticsError'
        '_sum'
        '_isfinite'
        '_coerce'
        '_exact_ratio'
        '_convert'
        '_find_lteq'
        '_find_rteq'
        '_fail_neg'
        'mean'
        'fmean'
        'geometric_mean'
        'harmonic_mean'
        'median'
        'median_low'
        'median_high'
        'median_grouped'
        'mode'
        'multimode'
        'quantiles'
        '_ss'
        'variance'
        'pvariance'
        'stdev'
        'pstdev'
        'covariance'
        'correlation'
        'LinearRegression'
        'linear_regression'
        '_normal_dist_inv_cdf'
        '_statistics'
        'ImportError'
        'NormalDist'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        '\nBasic statistics module.\n\nThis module provides functions for calculating statistics of data, including\naverages, variance, and standard deviation.\n\nCalculating averages\n--------------------\n\n==================  ==================================================\nFunction            Description\n==================  ==================================================\nmean                Arithmetic mean (average) of data.\nfmean               Fast, floating point arithmetic mean.\ngeometric_mean      Geometric mean of data.\nharmonic_mean       Harmonic mean of data.\nmedian              Median (middle value) of data.\nmedian_low          Low median of data.\nmedian_high         High median of data.\nmedian_grouped      Median, or 50th percentile, of grouped data.\nmode                Mode (most common value) of data.\nmultimode           List of modes (most common values of data).\nquantiles           Divide data into intervals with equal probability.\n==================  ==================================================\n\nCalculate the arithmetic mean ("the average") of data:\n\n>>> mean([-1.0, 2.5, 3.25, 5.75])\n2.625\n\n\nCalculate the standard median of discrete data:\n\n>>> median([2, 3, 4, 5])\n3.5\n\n\nCalculate the median, or 50th percentile, of data grouped into class intervals\ncentred on the data values provided. E.g. if your data points are rounded to\nthe nearest whole number:\n\n>>> median_grouped([2, 2, 3, 3, 3, 4])  #doctest: +ELLIPSIS\n2.8333333333...\n\nThis should be interpreted in this way: you have two data points in the class\ninterval 1.5-2.5, three data points in the class interval 2.5-3.5, and one in\nthe class interval 3.5-4.5. The median of these data points is 2.8333...\n\n\nCalculating variability or spread\n---------------------------------\n\n==================  =============================================\nFunction            Description\n==================  =============================================\npvariance           Population variance of data.\nvariance            Sample variance of data.\npstdev              Population standard deviation of data.\nstdev               Sample standard deviation of data.\n==================  =============================================\n\nCalculate the standard deviation of sample data:\n\n>>> stdev([2.5, 3.25, 5.5, 11.25, 11.75])  #doctest: +ELLIPSIS\n4.38961843444...\n\nIf you have previously calculated the mean, you can pass it as the optional\nsecond argument to the four "spread" functions to avoid recalculating it:\n\n>>> data = [1, 2, 2, 4, 4, 4, 5, 6]\n>>> mu = mean(data)\n>>> pvariance(data, mu)\n2.5\n\n\nStatistics for relations between two inputs\n-------------------------------------------\n\n==================  ====================================================\nFunction            Description\n==================  ====================================================\ncovariance          Sample covariance for two variables.\ncorrelation         Pearson\'s correlation coefficient for two variables.\nlinear_regression   Intercept and slope for simple linear regression.\n==================  ====================================================\n\nCalculate covariance, Pearson\'s correlation, and simple linear regression\nfor two inputs:\n\n>>> x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> y = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> covariance(x, y)\n0.75\n>>> correlation(x, y)  #doctest: +ELLIPSIS\n0.31622776601...\n>>> linear_regression(x, y)  #doctest:\nLinearRegression(slope=0.1, intercept=1.5)\n\n\nExceptions\n----------\n\nA single exception is defined: StatisticsError is a subclass of ValueError.\n\n'
        (
            'NormalDist'
            'StatisticsError'
            'correlation'
            'covariance'
            'fmean'
            'geometric_mean'
            'harmonic_mean'
            'linear_regression'
            'mean'
            'median'
            'median_grouped'
            'median_high'
            'median_low'
            'mode'
            'multimode'
            'pstdev'
            'pvariance'
            'quantiles'
            'stdev'
            'variance'
        )
        0
        None
        (
            'Fraction'
        )
        (
            'Decimal'
        )
        (
            'groupby'
            'repeat'
        )
        (
            'bisect_left'
            'bisect_right'
        )
        (
            'hypot'
            'sqrt'
            'fabs'
            'exp'
            'erf'
            'tau'
            'log'
            'fsum'
        )
        (
            'itemgetter'
        )
        (
            'Counter'
            'namedtuple'
        )
        [Code]
            File Name: statistics.py
            Object Name: StatisticsError
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'StatisticsError'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'StatisticsError'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: None
                10      RETURN_VALUE                    
        'StatisticsError'
        [Code]
            File Name: statistics.py
            Object Name: _sum
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 10
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'get'
                'int'
                'groupby'
                'type'
                '_coerce'
                'map'
                '_exact_ratio'
                '_isfinite'
                'sum'
                'items'
            [Var Names]
                'data'
                'count'
                'partials'
                'partials_get'
                'T'
                'typ'
                'values'
                'n'
                'd'
                'total'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_sum(data) -> (type, sum, count)\n\n    Return a high-precision sum of the given numeric data as a fraction,\n    together with the type to be converted to and the count of items.\n\n    Examples\n    --------\n\n    >>> _sum([3, 2.25, 4.5, -0.5, 0.25])\n    (<class \'float\'>, Fraction(19, 2), 5)\n\n    Some sources of round-off error will be avoided:\n\n    # Built-in sum returns zero.\n    >>> _sum([1e50, 1, -1e50] * 1000)\n    (<class \'float\'>, Fraction(1000, 1), 3000)\n\n    Fractions and Decimals are also supported:\n\n    >>> from fractions import Fraction as F\n    >>> _sum([F(2, 3), F(7, 5), F(1, 4), F(5, 6)])\n    (<class \'fractions.Fraction\'>, Fraction(63, 20), 4)\n\n    >>> from decimal import Decimal as D\n    >>> data = [D("0.1375"), D("0.2108"), D("0.3061"), D("0.0419")]\n    >>> _sum(data)\n    (<class \'decimal.Decimal\'>, Fraction(6963, 10000), 4)\n\n    Mixed types are currently treated as an error, except that int is\n    allowed.\n    '
                0
                1
                None
                [Code]
                    File Name: statistics.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'Fraction'
                    [Var Names]
                        '.0'
                        'd'
                        'n'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        10 (to 26)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: d
                        10      STORE_FAST                      2: n
                        12      LOAD_GLOBAL                     0: Fraction
                        14      LOAD_FAST                       2: n
                        16      LOAD_FAST                       1: d
                        18      CALL_FUNCTION                   2
                        20      YIELD_VALUE                     
                        22      POP_TOP                         
                        24      JUMP_ABSOLUTE                   2 (to 4)
                        26      LOAD_CONST                      0: None
                        28      RETURN_VALUE                    
                '_sum.<locals>.<genexpr>'
            [Disassembly]
                0       LOAD_CONST                      1: 0
                2       STORE_FAST                      1: count
                4       BUILD_MAP                       0
                6       STORE_FAST                      2: partials
                8       LOAD_FAST                       2: partials
                10      LOAD_ATTR                       0: get
                12      STORE_FAST                      3: partials_get
                14      LOAD_GLOBAL                     1: int
                16      STORE_FAST                      4: T
                18      LOAD_GLOBAL                     2: groupby
                20      LOAD_FAST                       0: data
                22      LOAD_GLOBAL                     3: type
                24      CALL_FUNCTION                   2
                26      GET_ITER                        
                28      FOR_ITER                        32 (to 94)
                30      UNPACK_SEQUENCE                 2
                32      STORE_FAST                      5: typ
                34      STORE_FAST                      6: values
                36      LOAD_GLOBAL                     4: _coerce
                38      LOAD_FAST                       4: T
                40      LOAD_FAST                       5: typ
                42      CALL_FUNCTION                   2
                44      STORE_FAST                      4: T
                46      LOAD_GLOBAL                     5: map
                48      LOAD_GLOBAL                     6: _exact_ratio
                50      LOAD_FAST                       6: values
                52      CALL_FUNCTION                   2
                54      GET_ITER                        
                56      FOR_ITER                        17 (to 92)
                58      UNPACK_SEQUENCE                 2
                60      STORE_FAST                      7: n
                62      STORE_FAST                      8: d
                64      LOAD_FAST                       1: count
                66      LOAD_CONST                      2: 1
                68      INPLACE_ADD                     
                70      STORE_FAST                      1: count
                72      LOAD_FAST                       3: partials_get
                74      LOAD_FAST                       8: d
                76      LOAD_CONST                      1: 0
                78      CALL_FUNCTION                   2
                80      LOAD_FAST                       7: n
                82      BINARY_ADD                      
                84      LOAD_FAST                       2: partials
                86      LOAD_FAST                       8: d
                88      STORE_SUBSCR                    
                90      JUMP_ABSOLUTE                   28 (to 56)
                92      JUMP_ABSOLUTE                   14 (to 28)
                94      LOAD_CONST                      3: None
                96      LOAD_FAST                       2: partials
                98      CONTAINS_OP                     0 (in)
                100     POP_JUMP_IF_FALSE               62 (to 124)
                102     LOAD_FAST                       2: partials
                104     LOAD_CONST                      3: None
                106     BINARY_SUBSCR                   
                108     STORE_FAST                      9: total
                110     LOAD_GLOBAL                     7: _isfinite
                112     LOAD_FAST                       9: total
                114     CALL_FUNCTION                   1
                116     POP_JUMP_IF_FALSE               61 (to 122)
                118     LOAD_ASSERTION_ERROR            
                120     RAISE_VARARGS                   1
                122     JUMP_FORWARD                    11 (to 146)
                124     LOAD_GLOBAL                     8: sum
                126     LOAD_CONST                      4: <CODE> <genexpr>
                128     LOAD_CONST                      5: '_sum.<locals>.<genexpr>'
                130     MAKE_FUNCTION                   0
                132     LOAD_FAST                       2: partials
                134     LOAD_METHOD                     9: items
                136     CALL_METHOD                     0
                138     GET_ITER                        
                140     CALL_FUNCTION                   1
                142     CALL_FUNCTION                   1
                144     STORE_FAST                      9: total
                146     LOAD_FAST                       4: T
                148     LOAD_FAST                       9: total
                150     LOAD_FAST                       1: count
                152     BUILD_TUPLE                     3
                154     RETURN_VALUE                    
        '_sum'
        [Code]
            File Name: statistics.py
            Object Name: _isfinite
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'is_finite'
                'AttributeError'
                'math'
                'isfinite'
            [Var Names]
                'x'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       SETUP_FINALLY                   5 (to 12)
                2       LOAD_FAST                       0: x
                4       LOAD_METHOD                     0: is_finite
                6       CALL_METHOD                     0
                8       POP_BLOCK                       
                10      RETURN_VALUE                    
                12      DUP_TOP                         
                14      LOAD_GLOBAL                     1: AttributeError
                16      JUMP_IF_NOT_EXC_MATCH           19 (to 38)
                18      POP_TOP                         
                20      POP_TOP                         
                22      POP_TOP                         
                24      LOAD_GLOBAL                     2: math
                26      LOAD_METHOD                     3: isfinite
                28      LOAD_FAST                       0: x
                30      CALL_METHOD                     1
                32      ROT_FOUR                        
                34      POP_EXCEPT                      
                36      RETURN_VALUE                    
                38      RERAISE                         0
        '_isfinite'
        [Code]
            File Name: statistics.py
            Object Name: _coerce
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'bool'
                'int'
                'issubclass'
                'Fraction'
                'float'
                'TypeError'
                '__name__'
            [Var Names]
                'T'
                'S'
                'msg'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Coerce types T and S to a common type, or raise TypeError.\n\n    Coercion rules are currently an implementation detail. See the CoerceTest\n    test class in test_statistics for details.\n    '
                'initial type T is bool'
                "don't know how to coerce %s and %s"
            [Disassembly]
                0       LOAD_FAST                       0: T
                2       LOAD_GLOBAL                     0: bool
                4       IS_OP                           1 (is not)
                6       POP_JUMP_IF_TRUE                8 (to 16)
                8       LOAD_ASSERTION_ERROR            
                10      LOAD_CONST                      1: 'initial type T is bool'
                12      CALL_FUNCTION                   1
                14      RAISE_VARARGS                   1
                16      LOAD_FAST                       0: T
                18      LOAD_FAST                       1: S
                20      IS_OP                           0 (is)
                22      POP_JUMP_IF_FALSE               14 (to 28)
                24      LOAD_FAST                       0: T
                26      RETURN_VALUE                    
                28      LOAD_FAST                       1: S
                30      LOAD_GLOBAL                     1: int
                32      IS_OP                           0 (is)
                34      POP_JUMP_IF_TRUE                22 (to 44)
                36      LOAD_FAST                       1: S
                38      LOAD_GLOBAL                     0: bool
                40      IS_OP                           0 (is)
                42      POP_JUMP_IF_FALSE               24 (to 48)
                44      LOAD_FAST                       0: T
                46      RETURN_VALUE                    
                48      LOAD_FAST                       0: T
                50      LOAD_GLOBAL                     1: int
                52      IS_OP                           0 (is)
                54      POP_JUMP_IF_FALSE               30 (to 60)
                56      LOAD_FAST                       1: S
                58      RETURN_VALUE                    
                60      LOAD_GLOBAL                     2: issubclass
                62      LOAD_FAST                       1: S
                64      LOAD_FAST                       0: T
                66      CALL_FUNCTION                   2
                68      POP_JUMP_IF_FALSE               37 (to 74)
                70      LOAD_FAST                       1: S
                72      RETURN_VALUE                    
                74      LOAD_GLOBAL                     2: issubclass
                76      LOAD_FAST                       0: T
                78      LOAD_FAST                       1: S
                80      CALL_FUNCTION                   2
                82      POP_JUMP_IF_FALSE               44 (to 88)
                84      LOAD_FAST                       0: T
                86      RETURN_VALUE                    
                88      LOAD_GLOBAL                     2: issubclass
                90      LOAD_FAST                       0: T
                92      LOAD_GLOBAL                     1: int
                94      CALL_FUNCTION                   2
                96      POP_JUMP_IF_FALSE               51 (to 102)
                98      LOAD_FAST                       1: S
                100     RETURN_VALUE                    
                102     LOAD_GLOBAL                     2: issubclass
                104     LOAD_FAST                       1: S
                106     LOAD_GLOBAL                     1: int
                108     CALL_FUNCTION                   2
                110     POP_JUMP_IF_FALSE               58 (to 116)
                112     LOAD_FAST                       0: T
                114     RETURN_VALUE                    
                116     LOAD_GLOBAL                     2: issubclass
                118     LOAD_FAST                       0: T
                120     LOAD_GLOBAL                     3: Fraction
                122     CALL_FUNCTION                   2
                124     POP_JUMP_IF_FALSE               70 (to 140)
                126     LOAD_GLOBAL                     2: issubclass
                128     LOAD_FAST                       1: S
                130     LOAD_GLOBAL                     4: float
                132     CALL_FUNCTION                   2
                134     POP_JUMP_IF_FALSE               70 (to 140)
                136     LOAD_FAST                       1: S
                138     RETURN_VALUE                    
                140     LOAD_GLOBAL                     2: issubclass
                142     LOAD_FAST                       0: T
                144     LOAD_GLOBAL                     4: float
                146     CALL_FUNCTION                   2
                148     POP_JUMP_IF_FALSE               82 (to 164)
                150     LOAD_GLOBAL                     2: issubclass
                152     LOAD_FAST                       1: S
                154     LOAD_GLOBAL                     3: Fraction
                156     CALL_FUNCTION                   2
                158     POP_JUMP_IF_FALSE               82 (to 164)
                160     LOAD_FAST                       0: T
                162     RETURN_VALUE                    
                164     LOAD_CONST                      2: "don't know how to coerce %s and %s"
                166     STORE_FAST                      2: msg
                168     LOAD_GLOBAL                     5: TypeError
                170     LOAD_FAST                       2: msg
                172     LOAD_FAST                       0: T
                174     LOAD_ATTR                       6: __name__
                176     LOAD_FAST                       1: S
                178     LOAD_ATTR                       6: __name__
                180     BUILD_TUPLE                     2
                182     BINARY_MODULO                   
                184     CALL_FUNCTION                   1
                186     RAISE_VARARGS                   1
        '_coerce'
        [Code]
            File Name: statistics.py
            Object Name: _exact_ratio
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'as_integer_ratio'
                'AttributeError'
                'OverflowError'
                'ValueError'
                '_isfinite'
                'numerator'
                'denominator'
                'type'
                '__name__'
                'TypeError'
            [Var Names]
                'x'
                'msg'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return Real number x to exact (numerator, denominator) pair.\n\n    >>> _exact_ratio(0.25)\n    (1, 4)\n\n    x is expected to be an int, Fraction, Decimal or float.\n    '
                None
                "can't convert type '"
                "' to numerator/denominator"
            [Disassembly]
                0       SETUP_FINALLY                   5 (to 12)
                2       LOAD_FAST                       0: x
                4       LOAD_METHOD                     0: as_integer_ratio
                6       CALL_METHOD                     0
                8       POP_BLOCK                       
                10      RETURN_VALUE                    
                12      DUP_TOP                         
                14      LOAD_GLOBAL                     1: AttributeError
                16      JUMP_IF_NOT_EXC_MATCH           14 (to 28)
                18      POP_TOP                         
                20      POP_TOP                         
                22      POP_TOP                         
                24      POP_EXCEPT                      
                26      JUMP_FORWARD                    21 (to 70)
                28      DUP_TOP                         
                30      LOAD_GLOBAL                     2: OverflowError
                32      LOAD_GLOBAL                     3: ValueError
                34      BUILD_TUPLE                     2
                36      JUMP_IF_NOT_EXC_MATCH           34 (to 68)
                38      POP_TOP                         
                40      POP_TOP                         
                42      POP_TOP                         
                44      LOAD_GLOBAL                     4: _isfinite
                46      LOAD_FAST                       0: x
                48      CALL_FUNCTION                   1
                50      POP_JUMP_IF_FALSE               28 (to 56)
                52      LOAD_ASSERTION_ERROR            
                54      RAISE_VARARGS                   1
                56      LOAD_FAST                       0: x
                58      LOAD_CONST                      1: None
                60      BUILD_TUPLE                     2
                62      ROT_FOUR                        
                64      POP_EXCEPT                      
                66      RETURN_VALUE                    
                68      RERAISE                         0
                70      SETUP_FINALLY                   7 (to 86)
                72      LOAD_FAST                       0: x
                74      LOAD_ATTR                       5: numerator
                76      LOAD_FAST                       0: x
                78      LOAD_ATTR                       6: denominator
                80      BUILD_TUPLE                     2
                82      POP_BLOCK                       
                84      RETURN_VALUE                    
                86      DUP_TOP                         
                88      LOAD_GLOBAL                     1: AttributeError
                90      JUMP_IF_NOT_EXC_MATCH           62 (to 124)
                92      POP_TOP                         
                94      POP_TOP                         
                96      POP_TOP                         
                98      LOAD_CONST                      2: "can't convert type '"
                100     LOAD_GLOBAL                     7: type
                102     LOAD_FAST                       0: x
                104     CALL_FUNCTION                   1
                106     LOAD_ATTR                       8: __name__
                108     FORMAT_VALUE                    0 (FVC_NONE)
                110     LOAD_CONST                      3: "' to numerator/denominator"
                112     BUILD_STRING                    3
                114     STORE_FAST                      1: msg
                116     LOAD_GLOBAL                     9: TypeError
                118     LOAD_FAST                       1: msg
                120     CALL_FUNCTION                   1
                122     RAISE_VARARGS                   1
                124     RERAISE                         0
        '_exact_ratio'
        [Code]
            File Name: statistics.py
            Object Name: _convert
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'type'
                'issubclass'
                'int'
                'denominator'
                'float'
                'TypeError'
                'Decimal'
                'numerator'
            [Var Names]
                'value'
                'T'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Convert value to given numeric type T.'
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: type
                2       LOAD_FAST                       0: value
                4       CALL_FUNCTION                   1
                6       LOAD_FAST                       1: T
                8       IS_OP                           0 (is)
                10      POP_JUMP_IF_FALSE               8 (to 16)
                12      LOAD_FAST                       0: value
                14      RETURN_VALUE                    
                16      LOAD_GLOBAL                     1: issubclass
                18      LOAD_FAST                       1: T
                20      LOAD_GLOBAL                     2: int
                22      CALL_FUNCTION                   2
                24      POP_JUMP_IF_FALSE               20 (to 40)
                26      LOAD_FAST                       0: value
                28      LOAD_ATTR                       3: denominator
                30      LOAD_CONST                      1: 1
                32      COMPARE_OP                      3 (!=)
                34      POP_JUMP_IF_FALSE               20 (to 40)
                36      LOAD_GLOBAL                     4: float
                38      STORE_FAST                      1: T
                40      SETUP_FINALLY                   5 (to 52)
                42      LOAD_FAST                       1: T
                44      LOAD_FAST                       0: value
                46      CALL_FUNCTION                   1
                48      POP_BLOCK                       
                50      RETURN_VALUE                    
                52      DUP_TOP                         
                54      LOAD_GLOBAL                     5: TypeError
                56      JUMP_IF_NOT_EXC_MATCH           50 (to 100)
                58      POP_TOP                         
                60      POP_TOP                         
                62      POP_TOP                         
                64      LOAD_GLOBAL                     1: issubclass
                66      LOAD_FAST                       1: T
                68      LOAD_GLOBAL                     6: Decimal
                70      CALL_FUNCTION                   2
                72      POP_JUMP_IF_FALSE               49 (to 98)
                74      LOAD_FAST                       1: T
                76      LOAD_FAST                       0: value
                78      LOAD_ATTR                       7: numerator
                80      CALL_FUNCTION                   1
                82      LOAD_FAST                       1: T
                84      LOAD_FAST                       0: value
                86      LOAD_ATTR                       3: denominator
                88      CALL_FUNCTION                   1
                90      BINARY_TRUE_DIVIDE              
                92      ROT_FOUR                        
                94      POP_EXCEPT                      
                96      RETURN_VALUE                    
                98      RAISE_VARARGS                   0
                100     RERAISE                         0
        '_convert'
        [Code]
            File Name: statistics.py
            Object Name: _find_lteq
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'bisect_left'
                'len'
                'ValueError'
            [Var Names]
                'a'
                'x'
                'i'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Locate the leftmost value exactly equal to x'
            [Disassembly]
                0       LOAD_GLOBAL                     0: bisect_left
                2       LOAD_FAST                       0: a
                4       LOAD_FAST                       1: x
                6       CALL_FUNCTION                   2
                8       STORE_FAST                      2: i
                10      LOAD_FAST                       2: i
                12      LOAD_GLOBAL                     1: len
                14      LOAD_FAST                       0: a
                16      CALL_FUNCTION                   1
                18      COMPARE_OP                      3 (!=)
                20      POP_JUMP_IF_FALSE               19 (to 38)
                22      LOAD_FAST                       0: a
                24      LOAD_FAST                       2: i
                26      BINARY_SUBSCR                   
                28      LOAD_FAST                       1: x
                30      COMPARE_OP                      2 (==)
                32      POP_JUMP_IF_FALSE               19 (to 38)
                34      LOAD_FAST                       2: i
                36      RETURN_VALUE                    
                38      LOAD_GLOBAL                     2: ValueError
                40      RAISE_VARARGS                   1
        '_find_lteq'
        [Code]
            File Name: statistics.py
            Object Name: _find_rteq
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'bisect_right'
                'len'
                'ValueError'
            [Var Names]
                'a'
                'l'
                'x'
                'i'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Locate the rightmost value exactly equal to x'
                (
                    'lo'
                )
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: bisect_right
                2       LOAD_FAST                       0: a
                4       LOAD_FAST                       2: x
                6       LOAD_FAST                       1: l
                8       LOAD_CONST                      1: ('lo',)
                10      CALL_FUNCTION_KW                3
                12      STORE_FAST                      3: i
                14      LOAD_FAST                       3: i
                16      LOAD_GLOBAL                     1: len
                18      LOAD_FAST                       0: a
                20      CALL_FUNCTION                   1
                22      LOAD_CONST                      2: 1
                24      BINARY_ADD                      
                26      COMPARE_OP                      3 (!=)
                28      POP_JUMP_IF_FALSE               27 (to 54)
                30      LOAD_FAST                       0: a
                32      LOAD_FAST                       3: i
                34      LOAD_CONST                      2: 1
                36      BINARY_SUBTRACT                 
                38      BINARY_SUBSCR                   
                40      LOAD_FAST                       2: x
                42      COMPARE_OP                      2 (==)
                44      POP_JUMP_IF_FALSE               27 (to 54)
                46      LOAD_FAST                       3: i
                48      LOAD_CONST                      2: 1
                50      BINARY_SUBTRACT                 
                52      RETURN_VALUE                    
                54      LOAD_GLOBAL                     2: ValueError
                56      RAISE_VARARGS                   1
        '_find_rteq'
        'negative value'
        [Code]
            File Name: statistics.py
            Object Name: _fail_neg
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
            [Names]
                'StatisticsError'
            [Var Names]
                'values'
                'errmsg'
                'x'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Iterate over values, failing if any are less than zero.'
                0
                None
            [Disassembly]
                0       GEN_START                       0
                2       LOAD_FAST                       0: values
                4       GET_ITER                        
                6       FOR_ITER                        13 (to 34)
                8       STORE_FAST                      2: x
                10      LOAD_FAST                       2: x
                12      LOAD_CONST                      1: 0
                14      COMPARE_OP                      0 (<)
                16      POP_JUMP_IF_FALSE               13 (to 26)
                18      LOAD_GLOBAL                     0: StatisticsError
                20      LOAD_FAST                       1: errmsg
                22      CALL_FUNCTION                   1
                24      RAISE_VARARGS                   1
                26      LOAD_FAST                       2: x
                28      YIELD_VALUE                     
                30      POP_TOP                         
                32      JUMP_ABSOLUTE                   3 (to 6)
                34      LOAD_CONST                      2: None
                36      RETURN_VALUE                    
        '_fail_neg'
        [Code]
            File Name: statistics.py
            Object Name: mean
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'iter'
                'list'
                'len'
                'StatisticsError'
                '_sum'
                '_convert'
            [Var Names]
                'data'
                'n'
                'T'
                'total'
                'count'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the sample arithmetic mean of data.\n\n    >>> mean([1, 2, 3, 4, 4])\n    2.8\n\n    >>> from fractions import Fraction as F\n    >>> mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\n    Fraction(13, 21)\n\n    >>> from decimal import Decimal as D\n    >>> mean([D("0.5"), D("0.75"), D("0.625"), D("0.375")])\n    Decimal(\'0.5625\')\n\n    If ``data`` is empty, StatisticsError will be raised.\n    '
                1
                'mean requires at least one data point'
            [Disassembly]
                0       LOAD_GLOBAL                     0: iter
                2       LOAD_FAST                       0: data
                4       CALL_FUNCTION                   1
                6       LOAD_FAST                       0: data
                8       IS_OP                           0 (is)
                10      POP_JUMP_IF_FALSE               10 (to 20)
                12      LOAD_GLOBAL                     1: list
                14      LOAD_FAST                       0: data
                16      CALL_FUNCTION                   1
                18      STORE_FAST                      0: data
                20      LOAD_GLOBAL                     2: len
                22      LOAD_FAST                       0: data
                24      CALL_FUNCTION                   1
                26      STORE_FAST                      1: n
                28      LOAD_FAST                       1: n
                30      LOAD_CONST                      1: 1
                32      COMPARE_OP                      0 (<)
                34      POP_JUMP_IF_FALSE               22 (to 44)
                36      LOAD_GLOBAL                     3: StatisticsError
                38      LOAD_CONST                      2: 'mean requires at least one data point'
                40      CALL_FUNCTION                   1
                42      RAISE_VARARGS                   1
                44      LOAD_GLOBAL                     4: _sum
                46      LOAD_FAST                       0: data
                48      CALL_FUNCTION                   1
                50      UNPACK_SEQUENCE                 3
                52      STORE_FAST                      2: T
                54      STORE_FAST                      3: total
                56      STORE_FAST                      4: count
                58      LOAD_FAST                       4: count
                60      LOAD_FAST                       1: n
                62      COMPARE_OP                      2 (==)
                64      POP_JUMP_IF_TRUE                35 (to 70)
                66      LOAD_ASSERTION_ERROR            
                68      RAISE_VARARGS                   1
                70      LOAD_GLOBAL                     5: _convert
                72      LOAD_FAST                       3: total
                74      LOAD_FAST                       1: n
                76      BINARY_TRUE_DIVIDE              
                78      LOAD_FAST                       2: T
                80      CALL_FUNCTION                   2
                82      RETURN_VALUE                    
        'mean'
        [Code]
            File Name: statistics.py
            Object Name: fmean
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 8
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'len'
                'TypeError'
                'fsum'
                'ZeroDivisionError'
                'StatisticsError'
            [Var Names]
                'data'
                'count'
                'total'
            [Free Vars]
            [Cell Vars]
                'n'
            [Constants]
                'Convert data to floats and compute the arithmetic mean.\n\n    This runs faster than the mean() function and it always returns a float.\n    If the input dataset is empty, it raises a StatisticsError.\n\n    >>> fmean([3.5, 4.0, 5.25])\n    4.25\n    '
                0
                [Code]
                    File Name: statistics.py
                    Object Name: count
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                        'enumerate'
                    [Var Names]
                        'iterable'
                        'x'
                    [Free Vars]
                        'n'
                    [Cell Vars]
                    [Constants]
                        None
                        1
                        (
                            'start'
                        )
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_GLOBAL                     0: enumerate
                        4       LOAD_FAST                       0: iterable
                        6       LOAD_CONST                      1: 1
                        8       LOAD_CONST                      2: ('start',)
                        10      CALL_FUNCTION_KW                2
                        12      GET_ITER                        
                        14      FOR_ITER                        7 (to 30)
                        16      UNPACK_SEQUENCE                 2
                        18      STORE_DEREF                     0: n
                        20      STORE_FAST                      1: x
                        22      LOAD_FAST                       1: x
                        24      YIELD_VALUE                     
                        26      POP_TOP                         
                        28      JUMP_ABSOLUTE                   7 (to 14)
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'fmean.<locals>.count'
                'fmean requires at least one data point'
                None
            [Disassembly]
                0       SETUP_FINALLY                   6 (to 14)
                2       LOAD_GLOBAL                     0: len
                4       LOAD_FAST                       0: data
                6       CALL_FUNCTION                   1
                8       STORE_DEREF                     0: n
                10      POP_BLOCK                       
                12      JUMP_FORWARD                    23 (to 60)
                14      DUP_TOP                         
                16      LOAD_GLOBAL                     1: TypeError
                18      JUMP_IF_NOT_EXC_MATCH           29 (to 58)
                20      POP_TOP                         
                22      POP_TOP                         
                24      POP_TOP                         
                26      LOAD_CONST                      1: 0
                28      STORE_DEREF                     0: n
                30      LOAD_CLOSURE                    0: n
                32      BUILD_TUPLE                     1
                34      LOAD_CONST                      2: <CODE> count
                36      LOAD_CONST                      3: 'fmean.<locals>.count'
                38      MAKE_FUNCTION                   8
                40      STORE_FAST                      1: count
                42      LOAD_GLOBAL                     2: fsum
                44      LOAD_FAST                       1: count
                46      LOAD_FAST                       0: data
                48      CALL_FUNCTION                   1
                50      CALL_FUNCTION                   1
                52      STORE_FAST                      2: total
                54      POP_EXCEPT                      
                56      JUMP_FORWARD                    5 (to 68)
                58      RERAISE                         0
                60      LOAD_GLOBAL                     2: fsum
                62      LOAD_FAST                       0: data
                64      CALL_FUNCTION                   1
                66      STORE_FAST                      2: total
                68      SETUP_FINALLY                   5 (to 80)
                70      LOAD_FAST                       2: total
                72      LOAD_DEREF                      0: n
                74      BINARY_TRUE_DIVIDE              
                76      POP_BLOCK                       
                78      RETURN_VALUE                    
                80      DUP_TOP                         
                82      LOAD_GLOBAL                     3: ZeroDivisionError
                84      JUMP_IF_NOT_EXC_MATCH           51 (to 102)
                86      POP_TOP                         
                88      POP_TOP                         
                90      POP_TOP                         
                92      LOAD_GLOBAL                     4: StatisticsError
                94      LOAD_CONST                      4: 'fmean requires at least one data point'
                96      CALL_FUNCTION                   1
                98      LOAD_CONST                      5: None
                100     RAISE_VARARGS                   2
                102     RERAISE                         0
        'fmean'
        [Code]
            File Name: statistics.py
            Object Name: geometric_mean
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'exp'
                'fmean'
                'map'
                'log'
                'ValueError'
                'StatisticsError'
            [Var Names]
                'data'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Convert data to floats and compute the geometric mean.\n\n    Raises a StatisticsError if the input dataset is empty,\n    if it contains a zero, or if it contains a negative value.\n\n    No special efforts are made to achieve exact results.\n    (However, this may change in the future.)\n\n    >>> round(geometric_mean([54, 24, 36]), 9)\n    36.0\n    '
                'geometric mean requires a non-empty dataset containing positive numbers'
                None
            [Disassembly]
                0       SETUP_FINALLY                   10 (to 22)
                2       LOAD_GLOBAL                     0: exp
                4       LOAD_GLOBAL                     1: fmean
                6       LOAD_GLOBAL                     2: map
                8       LOAD_GLOBAL                     3: log
                10      LOAD_FAST                       0: data
                12      CALL_FUNCTION                   2
                14      CALL_FUNCTION                   1
                16      CALL_FUNCTION                   1
                18      POP_BLOCK                       
                20      RETURN_VALUE                    
                22      DUP_TOP                         
                24      LOAD_GLOBAL                     4: ValueError
                26      JUMP_IF_NOT_EXC_MATCH           22 (to 44)
                28      POP_TOP                         
                30      POP_TOP                         
                32      POP_TOP                         
                34      LOAD_GLOBAL                     5: StatisticsError
                36      LOAD_CONST                      1: 'geometric mean requires a non-empty dataset containing positive numbers'
                38      CALL_FUNCTION                   1
                40      LOAD_CONST                      2: None
                42      RAISE_VARARGS                   2
                44      RERAISE                         0
        'geometric_mean'
        [Code]
            File Name: statistics.py
            Object Name: harmonic_mean
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 10
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'iter'
                'list'
                'len'
                'StatisticsError'
                'isinstance'
                'numbers'
                'Real'
                'Decimal'
                'TypeError'
                'repeat'
                '_sum'
                '_fail_neg'
                'zip'
                'ZeroDivisionError'
                '_convert'
            [Var Names]
                'data'
                'weights'
                'errmsg'
                'n'
                'x'
                'sum_weights'
                '_'
                'T'
                'total'
                'count'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the harmonic mean of data.\n\n    The harmonic mean is the reciprocal of the arithmetic mean of the\n    reciprocals of the data.  It can be used for averaging ratios or\n    rates, for example speeds.\n\n    Suppose a car travels 40 km/hr for 5 km and then speeds-up to\n    60 km/hr for another 5 km. What is the average speed?\n\n        >>> harmonic_mean([40, 60])\n        48.0\n\n    Suppose a car travels 40 km/hr for 5 km, and when traffic clears,\n    speeds-up to 60 km/hr for the remaining 30 km of the journey. What\n    is the average speed?\n\n        >>> harmonic_mean([40, 60], weights=[5, 30])\n        56.0\n\n    If ``data`` is empty, or any element is less than zero,\n    ``harmonic_mean`` will raise ``StatisticsError``.\n    '
                'harmonic mean does not support negative values'
                1
                'harmonic_mean requires at least one data point'
                None
                0
                'unsupported type'
                'Number of weights does not match data size'
                [Code]
                    File Name: statistics.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                    [Var Names]
                        '.0'
                        'w'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        5 (to 16)
                        6       STORE_FAST                      1: w
                        8       LOAD_FAST                       1: w
                        10      YIELD_VALUE                     
                        12      POP_TOP                         
                        14      JUMP_ABSOLUTE                   2 (to 4)
                        16      LOAD_CONST                      0: None
                        18      RETURN_VALUE                    
                'harmonic_mean.<locals>.<genexpr>'
                [Code]
                    File Name: statistics.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                    [Var Names]
                        '.0'
                        'w'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        0
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        13 (to 32)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: w
                        10      STORE_FAST                      2: x
                        12      LOAD_FAST                       1: w
                        14      POP_JUMP_IF_FALSE               12 (to 24)
                        16      LOAD_FAST                       1: w
                        18      LOAD_FAST                       2: x
                        20      BINARY_TRUE_DIVIDE              
                        22      JUMP_FORWARD                    1 (to 26)
                        24      LOAD_CONST                      0: 0
                        26      YIELD_VALUE                     
                        28      POP_TOP                         
                        30      JUMP_ABSOLUTE                   2 (to 4)
                        32      LOAD_CONST                      1: None
                        34      RETURN_VALUE                    
                'Weighted sum must be positive'
            [Disassembly]
                0       LOAD_GLOBAL                     0: iter
                2       LOAD_FAST                       0: data
                4       CALL_FUNCTION                   1
                6       LOAD_FAST                       0: data
                8       IS_OP                           0 (is)
                10      POP_JUMP_IF_FALSE               10 (to 20)
                12      LOAD_GLOBAL                     1: list
                14      LOAD_FAST                       0: data
                16      CALL_FUNCTION                   1
                18      STORE_FAST                      0: data
                20      LOAD_CONST                      1: 'harmonic mean does not support negative values'
                22      STORE_FAST                      2: errmsg
                24      LOAD_GLOBAL                     2: len
                26      LOAD_FAST                       0: data
                28      CALL_FUNCTION                   1
                30      STORE_FAST                      3: n
                32      LOAD_FAST                       3: n
                34      LOAD_CONST                      2: 1
                36      COMPARE_OP                      0 (<)
                38      POP_JUMP_IF_FALSE               24 (to 48)
                40      LOAD_GLOBAL                     3: StatisticsError
                42      LOAD_CONST                      3: 'harmonic_mean requires at least one data point'
                44      CALL_FUNCTION                   1
                46      RAISE_VARARGS                   1
                48      LOAD_FAST                       3: n
                50      LOAD_CONST                      2: 1
                52      COMPARE_OP                      2 (==)
                54      POP_JUMP_IF_FALSE               58 (to 116)
                56      LOAD_FAST                       1: weights
                58      LOAD_CONST                      4: None
                60      IS_OP                           0 (is)
                62      POP_JUMP_IF_FALSE               58 (to 116)
                64      LOAD_FAST                       0: data
                66      LOAD_CONST                      5: 0
                68      BINARY_SUBSCR                   
                70      STORE_FAST                      4: x
                72      LOAD_GLOBAL                     4: isinstance
                74      LOAD_FAST                       4: x
                76      LOAD_GLOBAL                     5: numbers
                78      LOAD_ATTR                       6: Real
                80      LOAD_GLOBAL                     7: Decimal
                82      BUILD_TUPLE                     2
                84      CALL_FUNCTION                   2
                86      POP_JUMP_IF_FALSE               54 (to 108)
                88      LOAD_FAST                       4: x
                90      LOAD_CONST                      5: 0
                92      COMPARE_OP                      0 (<)
                94      POP_JUMP_IF_FALSE               52 (to 104)
                96      LOAD_GLOBAL                     3: StatisticsError
                98      LOAD_FAST                       2: errmsg
                100     CALL_FUNCTION                   1
                102     RAISE_VARARGS                   1
                104     LOAD_FAST                       4: x
                106     RETURN_VALUE                    
                108     LOAD_GLOBAL                     8: TypeError
                110     LOAD_CONST                      6: 'unsupported type'
                112     CALL_FUNCTION                   1
                114     RAISE_VARARGS                   1
                116     LOAD_FAST                       1: weights
                118     LOAD_CONST                      4: None
                120     IS_OP                           0 (is)
                122     POP_JUMP_IF_FALSE               70 (to 140)
                124     LOAD_GLOBAL                     9: repeat
                126     LOAD_CONST                      2: 1
                128     LOAD_FAST                       3: n
                130     CALL_FUNCTION                   2
                132     STORE_FAST                      1: weights
                134     LOAD_FAST                       3: n
                136     STORE_FAST                      5: sum_weights
                138     JUMP_FORWARD                    35 (to 210)
                140     LOAD_GLOBAL                     0: iter
                142     LOAD_FAST                       1: weights
                144     CALL_FUNCTION                   1
                146     LOAD_FAST                       1: weights
                148     IS_OP                           0 (is)
                150     POP_JUMP_IF_FALSE               80 (to 160)
                152     LOAD_GLOBAL                     1: list
                154     LOAD_FAST                       1: weights
                156     CALL_FUNCTION                   1
                158     STORE_FAST                      1: weights
                160     LOAD_GLOBAL                     2: len
                162     LOAD_FAST                       1: weights
                164     CALL_FUNCTION                   1
                166     LOAD_FAST                       3: n
                168     COMPARE_OP                      3 (!=)
                170     POP_JUMP_IF_FALSE               90 (to 180)
                172     LOAD_GLOBAL                     3: StatisticsError
                174     LOAD_CONST                      7: 'Number of weights does not match data size'
                176     CALL_FUNCTION                   1
                178     RAISE_VARARGS                   1
                180     LOAD_GLOBAL                     10: _sum
                182     LOAD_CONST                      8: <CODE> <genexpr>
                184     LOAD_CONST                      9: 'harmonic_mean.<locals>.<genexpr>'
                186     MAKE_FUNCTION                   0
                188     LOAD_GLOBAL                     11: _fail_neg
                190     LOAD_FAST                       1: weights
                192     LOAD_FAST                       2: errmsg
                194     CALL_FUNCTION                   2
                196     GET_ITER                        
                198     CALL_FUNCTION                   1
                200     CALL_FUNCTION                   1
                202     UNPACK_SEQUENCE                 3
                204     STORE_FAST                      6: _
                206     STORE_FAST                      5: sum_weights
                208     STORE_FAST                      6: _
                210     SETUP_FINALLY                   22 (to 256)
                212     LOAD_GLOBAL                     11: _fail_neg
                214     LOAD_FAST                       0: data
                216     LOAD_FAST                       2: errmsg
                218     CALL_FUNCTION                   2
                220     STORE_FAST                      0: data
                222     LOAD_GLOBAL                     10: _sum
                224     LOAD_CONST                      10: <CODE> <genexpr>
                226     LOAD_CONST                      9: 'harmonic_mean.<locals>.<genexpr>'
                228     MAKE_FUNCTION                   0
                230     LOAD_GLOBAL                     12: zip
                232     LOAD_FAST                       1: weights
                234     LOAD_FAST                       0: data
                236     CALL_FUNCTION                   2
                238     GET_ITER                        
                240     CALL_FUNCTION                   1
                242     CALL_FUNCTION                   1
                244     UNPACK_SEQUENCE                 3
                246     STORE_FAST                      7: T
                248     STORE_FAST                      8: total
                250     STORE_FAST                      9: count
                252     POP_BLOCK                       
                254     JUMP_FORWARD                    10 (to 276)
                256     DUP_TOP                         
                258     LOAD_GLOBAL                     13: ZeroDivisionError
                260     JUMP_IF_NOT_EXC_MATCH           137 (to 274)
                262     POP_TOP                         
                264     POP_TOP                         
                266     POP_TOP                         
                268     POP_EXCEPT                      
                270     LOAD_CONST                      5: 0
                272     RETURN_VALUE                    
                274     RERAISE                         0
                276     LOAD_FAST                       8: total
                278     LOAD_CONST                      5: 0
                280     COMPARE_OP                      1 (<=)
                282     POP_JUMP_IF_FALSE               146 (to 292)
                284     LOAD_GLOBAL                     3: StatisticsError
                286     LOAD_CONST                      11: 'Weighted sum must be positive'
                288     CALL_FUNCTION                   1
                290     RAISE_VARARGS                   1
                292     LOAD_GLOBAL                     14: _convert
                294     LOAD_FAST                       5: sum_weights
                296     LOAD_FAST                       8: total
                298     BINARY_TRUE_DIVIDE              
                300     LOAD_FAST                       7: T
                302     CALL_FUNCTION                   2
                304     RETURN_VALUE                    
        'harmonic_mean'
        [Code]
            File Name: statistics.py
            Object Name: median
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'sorted'
                'len'
                'StatisticsError'
            [Var Names]
                'data'
                'n'
                'i'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the median (middle value) of numeric data.\n\n    When the number of data points is odd, return the middle data point.\n    When the number of data points is even, the median is interpolated by\n    taking the average of the two middle values:\n\n    >>> median([1, 3, 5])\n    3\n    >>> median([1, 3, 5, 7])\n    4.0\n\n    '
                0
                'no median for empty data'
                2
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: sorted
                2       LOAD_FAST                       0: data
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      0: data
                8       LOAD_GLOBAL                     1: len
                10      LOAD_FAST                       0: data
                12      CALL_FUNCTION                   1
                14      STORE_FAST                      1: n
                16      LOAD_FAST                       1: n
                18      LOAD_CONST                      1: 0
                20      COMPARE_OP                      2 (==)
                22      POP_JUMP_IF_FALSE               16 (to 32)
                24      LOAD_GLOBAL                     2: StatisticsError
                26      LOAD_CONST                      2: 'no median for empty data'
                28      CALL_FUNCTION                   1
                30      RAISE_VARARGS                   1
                32      LOAD_FAST                       1: n
                34      LOAD_CONST                      3: 2
                36      BINARY_MODULO                   
                38      LOAD_CONST                      4: 1
                40      COMPARE_OP                      2 (==)
                42      POP_JUMP_IF_FALSE               28 (to 56)
                44      LOAD_FAST                       0: data
                46      LOAD_FAST                       1: n
                48      LOAD_CONST                      3: 2
                50      BINARY_FLOOR_DIVIDE             
                52      BINARY_SUBSCR                   
                54      RETURN_VALUE                    
                56      LOAD_FAST                       1: n
                58      LOAD_CONST                      3: 2
                60      BINARY_FLOOR_DIVIDE             
                62      STORE_FAST                      2: i
                64      LOAD_FAST                       0: data
                66      LOAD_FAST                       2: i
                68      LOAD_CONST                      4: 1
                70      BINARY_SUBTRACT                 
                72      BINARY_SUBSCR                   
                74      LOAD_FAST                       0: data
                76      LOAD_FAST                       2: i
                78      BINARY_SUBSCR                   
                80      BINARY_ADD                      
                82      LOAD_CONST                      3: 2
                84      BINARY_TRUE_DIVIDE              
                86      RETURN_VALUE                    
        'median'
        [Code]
            File Name: statistics.py
            Object Name: median_low
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'sorted'
                'len'
                'StatisticsError'
            [Var Names]
                'data'
                'n'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the low median of numeric data.\n\n    When the number of data points is odd, the middle value is returned.\n    When it is even, the smaller of the two middle values is returned.\n\n    >>> median_low([1, 3, 5])\n    3\n    >>> median_low([1, 3, 5, 7])\n    3\n\n    '
                0
                'no median for empty data'
                2
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: sorted
                2       LOAD_FAST                       0: data
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      0: data
                8       LOAD_GLOBAL                     1: len
                10      LOAD_FAST                       0: data
                12      CALL_FUNCTION                   1
                14      STORE_FAST                      1: n
                16      LOAD_FAST                       1: n
                18      LOAD_CONST                      1: 0
                20      COMPARE_OP                      2 (==)
                22      POP_JUMP_IF_FALSE               16 (to 32)
                24      LOAD_GLOBAL                     2: StatisticsError
                26      LOAD_CONST                      2: 'no median for empty data'
                28      CALL_FUNCTION                   1
                30      RAISE_VARARGS                   1
                32      LOAD_FAST                       1: n
                34      LOAD_CONST                      3: 2
                36      BINARY_MODULO                   
                38      LOAD_CONST                      4: 1
                40      COMPARE_OP                      2 (==)
                42      POP_JUMP_IF_FALSE               28 (to 56)
                44      LOAD_FAST                       0: data
                46      LOAD_FAST                       1: n
                48      LOAD_CONST                      3: 2
                50      BINARY_FLOOR_DIVIDE             
                52      BINARY_SUBSCR                   
                54      RETURN_VALUE                    
                56      LOAD_FAST                       0: data
                58      LOAD_FAST                       1: n
                60      LOAD_CONST                      3: 2
                62      BINARY_FLOOR_DIVIDE             
                64      LOAD_CONST                      4: 1
                66      BINARY_SUBTRACT                 
                68      BINARY_SUBSCR                   
                70      RETURN_VALUE                    
        'median_low'
        [Code]
            File Name: statistics.py
            Object Name: median_high
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'sorted'
                'len'
                'StatisticsError'
            [Var Names]
                'data'
                'n'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the high median of data.\n\n    When the number of data points is odd, the middle value is returned.\n    When it is even, the larger of the two middle values is returned.\n\n    >>> median_high([1, 3, 5])\n    3\n    >>> median_high([1, 3, 5, 7])\n    5\n\n    '
                0
                'no median for empty data'
                2
            [Disassembly]
                0       LOAD_GLOBAL                     0: sorted
                2       LOAD_FAST                       0: data
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      0: data
                8       LOAD_GLOBAL                     1: len
                10      LOAD_FAST                       0: data
                12      CALL_FUNCTION                   1
                14      STORE_FAST                      1: n
                16      LOAD_FAST                       1: n
                18      LOAD_CONST                      1: 0
                20      COMPARE_OP                      2 (==)
                22      POP_JUMP_IF_FALSE               16 (to 32)
                24      LOAD_GLOBAL                     2: StatisticsError
                26      LOAD_CONST                      2: 'no median for empty data'
                28      CALL_FUNCTION                   1
                30      RAISE_VARARGS                   1
                32      LOAD_FAST                       0: data
                34      LOAD_FAST                       1: n
                36      LOAD_CONST                      3: 2
                38      BINARY_FLOOR_DIVIDE             
                40      BINARY_SUBSCR                   
                42      RETURN_VALUE                    
        'median_high'
        1
        [Code]
            File Name: statistics.py
            Object Name: median_grouped
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 10
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'sorted'
                'len'
                'StatisticsError'
                'isinstance'
                'str'
                'bytes'
                'TypeError'
                'float'
                '_find_lteq'
                '_find_rteq'
            [Var Names]
                'data'
                'interval'
                'n'
                'x'
                'obj'
                'L'
                'l1'
                'l2'
                'cf'
                'f'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the 50th percentile (median) of grouped continuous data.\n\n    >>> median_grouped([1, 2, 2, 3, 4, 4, 4, 4, 4, 5])\n    3.7\n    >>> median_grouped([52, 52, 53, 54])\n    52.5\n\n    This calculates the median as the 50th percentile, and should be\n    used when your data is continuous and grouped. In the above example,\n    the values 1, 2, 3, etc. actually represent the midpoint of classes\n    0.5-1.5, 1.5-2.5, 2.5-3.5, etc. The middle value falls somewhere in\n    class 3.5-4.5, and interpolation is used to estimate it.\n\n    Optional argument ``interval`` represents the class interval, and\n    defaults to 1. Changing the class interval naturally will change the\n    interpolated 50th percentile value:\n\n    >>> median_grouped([1, 3, 3, 5, 7], interval=1)\n    3.25\n    >>> median_grouped([1, 3, 3, 5, 7], interval=2)\n    3.5\n\n    This function does not check whether the data points are at least\n    ``interval`` apart.\n    '
                0
                'no median for empty data'
                1
                2
                'expected number but got %r'
            [Disassembly]
                0       LOAD_GLOBAL                     0: sorted
                2       LOAD_FAST                       0: data
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      0: data
                8       LOAD_GLOBAL                     1: len
                10      LOAD_FAST                       0: data
                12      CALL_FUNCTION                   1
                14      STORE_FAST                      2: n
                16      LOAD_FAST                       2: n
                18      LOAD_CONST                      1: 0
                20      COMPARE_OP                      2 (==)
                22      POP_JUMP_IF_FALSE               16 (to 32)
                24      LOAD_GLOBAL                     2: StatisticsError
                26      LOAD_CONST                      2: 'no median for empty data'
                28      CALL_FUNCTION                   1
                30      RAISE_VARARGS                   1
                32      LOAD_FAST                       2: n
                34      LOAD_CONST                      3: 1
                36      COMPARE_OP                      2 (==)
                38      POP_JUMP_IF_FALSE               24 (to 48)
                40      LOAD_FAST                       0: data
                42      LOAD_CONST                      1: 0
                44      BINARY_SUBSCR                   
                46      RETURN_VALUE                    
                48      LOAD_FAST                       0: data
                50      LOAD_FAST                       2: n
                52      LOAD_CONST                      4: 2
                54      BINARY_FLOOR_DIVIDE             
                56      BINARY_SUBSCR                   
                58      STORE_FAST                      3: x
                60      LOAD_FAST                       3: x
                62      LOAD_FAST                       1: interval
                64      BUILD_TUPLE                     2
                66      GET_ITER                        
                68      FOR_ITER                        15 (to 100)
                70      STORE_FAST                      4: obj
                72      LOAD_GLOBAL                     3: isinstance
                74      LOAD_FAST                       4: obj
                76      LOAD_GLOBAL                     4: str
                78      LOAD_GLOBAL                     5: bytes
                80      BUILD_TUPLE                     2
                82      CALL_FUNCTION                   2
                84      POP_JUMP_IF_FALSE               49 (to 98)
                86      LOAD_GLOBAL                     6: TypeError
                88      LOAD_CONST                      5: 'expected number but got %r'
                90      LOAD_FAST                       4: obj
                92      BINARY_MODULO                   
                94      CALL_FUNCTION                   1
                96      RAISE_VARARGS                   1
                98      JUMP_ABSOLUTE                   34 (to 68)
                100     SETUP_FINALLY                   8 (to 118)
                102     LOAD_FAST                       3: x
                104     LOAD_FAST                       1: interval
                106     LOAD_CONST                      4: 2
                108     BINARY_TRUE_DIVIDE              
                110     BINARY_SUBTRACT                 
                112     STORE_FAST                      5: L
                114     POP_BLOCK                       
                116     JUMP_FORWARD                    19 (to 156)
                118     DUP_TOP                         
                120     LOAD_GLOBAL                     6: TypeError
                122     JUMP_IF_NOT_EXC_MATCH           77 (to 154)
                124     POP_TOP                         
                126     POP_TOP                         
                128     POP_TOP                         
                130     LOAD_GLOBAL                     7: float
                132     LOAD_FAST                       3: x
                134     CALL_FUNCTION                   1
                136     LOAD_GLOBAL                     7: float
                138     LOAD_FAST                       1: interval
                140     CALL_FUNCTION                   1
                142     LOAD_CONST                      4: 2
                144     BINARY_TRUE_DIVIDE              
                146     BINARY_SUBTRACT                 
                148     STORE_FAST                      5: L
                150     POP_EXCEPT                      
                152     JUMP_FORWARD                    1 (to 156)
                154     RERAISE                         0
                156     LOAD_GLOBAL                     8: _find_lteq
                158     LOAD_FAST                       0: data
                160     LOAD_FAST                       3: x
                162     CALL_FUNCTION                   2
                164     STORE_FAST                      6: l1
                166     LOAD_GLOBAL                     9: _find_rteq
                168     LOAD_FAST                       0: data
                170     LOAD_FAST                       6: l1
                172     LOAD_FAST                       3: x
                174     CALL_FUNCTION                   3
                176     STORE_FAST                      7: l2
                178     LOAD_FAST                       6: l1
                180     STORE_FAST                      8: cf
                182     LOAD_FAST                       7: l2
                184     LOAD_FAST                       6: l1
                186     BINARY_SUBTRACT                 
                188     LOAD_CONST                      3: 1
                190     BINARY_ADD                      
                192     STORE_FAST                      9: f
                194     LOAD_FAST                       5: L
                196     LOAD_FAST                       1: interval
                198     LOAD_FAST                       2: n
                200     LOAD_CONST                      4: 2
                202     BINARY_TRUE_DIVIDE              
                204     LOAD_FAST                       8: cf
                206     BINARY_SUBTRACT                 
                208     BINARY_MULTIPLY                 
                210     LOAD_FAST                       9: f
                212     BINARY_TRUE_DIVIDE              
                214     BINARY_ADD                      
                216     RETURN_VALUE                    
        'median_grouped'
        [Code]
            File Name: statistics.py
            Object Name: mode
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Counter'
                'iter'
                'most_common'
                'IndexError'
                'StatisticsError'
            [Var Names]
                'data'
                'pairs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the most common data point from discrete or nominal data.\n\n    ``mode`` assumes discrete data, and returns a single value. This is the\n    standard treatment of the mode as commonly taught in schools:\n\n        >>> mode([1, 1, 2, 3, 3, 3, 3, 4])\n        3\n\n    This also works with nominal (non-numeric) data:\n\n        >>> mode(["red", "blue", "blue", "red", "green", "red", "red"])\n        \'red\'\n\n    If there are multiple modes with same frequency, return the first one\n    encountered:\n\n        >>> mode([\'red\', \'red\', \'green\', \'blue\', \'blue\'])\n        \'red\'\n\n    If *data* is empty, ``mode``, raises StatisticsError.\n\n    '
                1
                0
                'no mode for empty data'
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: Counter
                2       LOAD_GLOBAL                     1: iter
                4       LOAD_FAST                       0: data
                6       CALL_FUNCTION                   1
                8       CALL_FUNCTION                   1
                10      LOAD_METHOD                     2: most_common
                12      LOAD_CONST                      1: 1
                14      CALL_METHOD                     1
                16      STORE_FAST                      1: pairs
                18      SETUP_FINALLY                   7 (to 34)
                20      LOAD_FAST                       1: pairs
                22      LOAD_CONST                      2: 0
                24      BINARY_SUBSCR                   
                26      LOAD_CONST                      2: 0
                28      BINARY_SUBSCR                   
                30      POP_BLOCK                       
                32      RETURN_VALUE                    
                34      DUP_TOP                         
                36      LOAD_GLOBAL                     3: IndexError
                38      JUMP_IF_NOT_EXC_MATCH           28 (to 56)
                40      POP_TOP                         
                42      POP_TOP                         
                44      POP_TOP                         
                46      LOAD_GLOBAL                     4: StatisticsError
                48      LOAD_CONST                      3: 'no mode for empty data'
                50      CALL_FUNCTION                   1
                52      LOAD_CONST                      4: None
                54      RAISE_VARARGS                   2
                56      RERAISE                         0
        'mode'
        [Code]
            File Name: statistics.py
            Object Name: multimode
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Counter'
                'iter'
                'most_common'
                'next'
                'groupby'
                'itemgetter'
                'list'
                'map'
            [Var Names]
                'data'
                'counts'
                'maxcount'
                'mode_items'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Return a list of the most frequently occurring values.\n\n    Will return more than one result if there are multiple modes\n    or an empty list if *data* is empty.\n\n    >>> multimode('aabbbbbbbbcc')\n    ['b']\n    >>> multimode('aabbbbccddddeeffffgg')\n    ['b', 'd', 'f']\n    >>> multimode('')\n    []\n    "
                1
                (
                    'key'
                )
                0
            [Disassembly]
                0       LOAD_GLOBAL                     0: Counter
                2       LOAD_GLOBAL                     1: iter
                4       LOAD_FAST                       0: data
                6       CALL_FUNCTION                   1
                8       CALL_FUNCTION                   1
                10      LOAD_METHOD                     2: most_common
                12      CALL_METHOD                     0
                14      STORE_FAST                      1: counts
                16      LOAD_GLOBAL                     3: next
                18      LOAD_GLOBAL                     4: groupby
                20      LOAD_FAST                       1: counts
                22      LOAD_GLOBAL                     5: itemgetter
                24      LOAD_CONST                      1: 1
                26      CALL_FUNCTION                   1
                28      LOAD_CONST                      2: ('key',)
                30      CALL_FUNCTION_KW                2
                32      LOAD_CONST                      3: 0
                34      BUILD_LIST                      0
                36      BUILD_TUPLE                     2
                38      CALL_FUNCTION                   2
                40      UNPACK_SEQUENCE                 2
                42      STORE_FAST                      2: maxcount
                44      STORE_FAST                      3: mode_items
                46      LOAD_GLOBAL                     6: list
                48      LOAD_GLOBAL                     7: map
                50      LOAD_GLOBAL                     5: itemgetter
                52      LOAD_CONST                      3: 0
                54      CALL_FUNCTION                   1
                56      LOAD_FAST                       3: mode_items
                58      CALL_FUNCTION                   2
                60      CALL_FUNCTION                   1
                62      RETURN_VALUE                    
        'multimode'
        4
        'exclusive'
        (
            'n'
            'method'
        )
        [Code]
            File Name: statistics.py
            Object Name: quantiles
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 2
            Locals: 10
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'StatisticsError'
                'sorted'
                'len'
                'range'
                'divmod'
                'append'
                'ValueError'
            [Var Names]
                'data'
                'n'
                'method'
                'ld'
                'm'
                'result'
                'i'
                'j'
                'delta'
                'interpolated'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Divide *data* into *n* continuous intervals with equal probability.\n\n    Returns a list of (n - 1) cut points separating the intervals.\n\n    Set *n* to 4 for quartiles (the default).  Set *n* to 10 for deciles.\n    Set *n* to 100 for percentiles which gives the 99 cuts points that\n    separate *data* in to 100 equal sized groups.\n\n    The *data* can be any iterable containing sample.\n    The cut points are linearly interpolated between data points.\n\n    If *method* is set to *inclusive*, *data* is treated as population\n    data.  The minimum value is treated as the 0th percentile and the\n    maximum value is treated as the 100th percentile.\n    '
                1
                'n must be at least 1'
                2
                'must have at least two data points'
                'inclusive'
                'exclusive'
                'Unknown method: '
            [Disassembly]
                0       LOAD_FAST                       1: n
                2       LOAD_CONST                      1: 1
                4       COMPARE_OP                      0 (<)
                6       POP_JUMP_IF_FALSE               8 (to 16)
                8       LOAD_GLOBAL                     0: StatisticsError
                10      LOAD_CONST                      2: 'n must be at least 1'
                12      CALL_FUNCTION                   1
                14      RAISE_VARARGS                   1
                16      LOAD_GLOBAL                     1: sorted
                18      LOAD_FAST                       0: data
                20      CALL_FUNCTION                   1
                22      STORE_FAST                      0: data
                24      LOAD_GLOBAL                     2: len
                26      LOAD_FAST                       0: data
                28      CALL_FUNCTION                   1
                30      STORE_FAST                      3: ld
                32      LOAD_FAST                       3: ld
                34      LOAD_CONST                      3: 2
                36      COMPARE_OP                      0 (<)
                38      POP_JUMP_IF_FALSE               24 (to 48)
                40      LOAD_GLOBAL                     0: StatisticsError
                42      LOAD_CONST                      4: 'must have at least two data points'
                44      CALL_FUNCTION                   1
                46      RAISE_VARARGS                   1
                48      LOAD_FAST                       2: method
                50      LOAD_CONST                      5: 'inclusive'
                52      COMPARE_OP                      2 (==)
                54      POP_JUMP_IF_FALSE               76 (to 152)
                56      LOAD_FAST                       3: ld
                58      LOAD_CONST                      1: 1
                60      BINARY_SUBTRACT                 
                62      STORE_FAST                      4: m
                64      BUILD_LIST                      0
                66      STORE_FAST                      5: result
                68      LOAD_GLOBAL                     3: range
                70      LOAD_CONST                      1: 1
                72      LOAD_FAST                       1: n
                74      CALL_FUNCTION                   2
                76      GET_ITER                        
                78      FOR_ITER                        34 (to 148)
                80      STORE_FAST                      6: i
                82      LOAD_GLOBAL                     4: divmod
                84      LOAD_FAST                       6: i
                86      LOAD_FAST                       4: m
                88      BINARY_MULTIPLY                 
                90      LOAD_FAST                       1: n
                92      CALL_FUNCTION                   2
                94      UNPACK_SEQUENCE                 2
                96      STORE_FAST                      7: j
                98      STORE_FAST                      8: delta
                100     LOAD_FAST                       0: data
                102     LOAD_FAST                       7: j
                104     BINARY_SUBSCR                   
                106     LOAD_FAST                       1: n
                108     LOAD_FAST                       8: delta
                110     BINARY_SUBTRACT                 
                112     BINARY_MULTIPLY                 
                114     LOAD_FAST                       0: data
                116     LOAD_FAST                       7: j
                118     LOAD_CONST                      1: 1
                120     BINARY_ADD                      
                122     BINARY_SUBSCR                   
                124     LOAD_FAST                       8: delta
                126     BINARY_MULTIPLY                 
                128     BINARY_ADD                      
                130     LOAD_FAST                       1: n
                132     BINARY_TRUE_DIVIDE              
                134     STORE_FAST                      9: interpolated
                136     LOAD_FAST                       5: result
                138     LOAD_METHOD                     5: append
                140     LOAD_FAST                       9: interpolated
                142     CALL_METHOD                     1
                144     POP_TOP                         
                146     JUMP_ABSOLUTE                   39 (to 78)
                148     LOAD_FAST                       5: result
                150     RETURN_VALUE                    
                152     LOAD_FAST                       2: method
                154     LOAD_CONST                      6: 'exclusive'
                156     COMPARE_OP                      2 (==)
                158     POP_JUMP_IF_FALSE               151 (to 302)
                160     LOAD_FAST                       3: ld
                162     LOAD_CONST                      1: 1
                164     BINARY_ADD                      
                166     STORE_FAST                      4: m
                168     BUILD_LIST                      0
                170     STORE_FAST                      5: result
                172     LOAD_GLOBAL                     3: range
                174     LOAD_CONST                      1: 1
                176     LOAD_FAST                       1: n
                178     CALL_FUNCTION                   2
                180     GET_ITER                        
                182     FOR_ITER                        57 (to 298)
                184     STORE_FAST                      6: i
                186     LOAD_FAST                       6: i
                188     LOAD_FAST                       4: m
                190     BINARY_MULTIPLY                 
                192     LOAD_FAST                       1: n
                194     BINARY_FLOOR_DIVIDE             
                196     STORE_FAST                      7: j
                198     LOAD_FAST                       7: j
                200     LOAD_CONST                      1: 1
                202     COMPARE_OP                      0 (<)
                204     POP_JUMP_IF_FALSE               105 (to 210)
                206     LOAD_CONST                      1: 1
                208     JUMP_FORWARD                    11 (to 232)
                210     LOAD_FAST                       7: j
                212     LOAD_FAST                       3: ld
                214     LOAD_CONST                      1: 1
                216     BINARY_SUBTRACT                 
                218     COMPARE_OP                      4 (>)
                220     POP_JUMP_IF_FALSE               115 (to 230)
                222     LOAD_FAST                       3: ld
                224     LOAD_CONST                      1: 1
                226     BINARY_SUBTRACT                 
                228     JUMP_FORWARD                    1 (to 232)
                230     LOAD_FAST                       7: j
                232     STORE_FAST                      7: j
                234     LOAD_FAST                       6: i
                236     LOAD_FAST                       4: m
                238     BINARY_MULTIPLY                 
                240     LOAD_FAST                       7: j
                242     LOAD_FAST                       1: n
                244     BINARY_MULTIPLY                 
                246     BINARY_SUBTRACT                 
                248     STORE_FAST                      8: delta
                250     LOAD_FAST                       0: data
                252     LOAD_FAST                       7: j
                254     LOAD_CONST                      1: 1
                256     BINARY_SUBTRACT                 
                258     BINARY_SUBSCR                   
                260     LOAD_FAST                       1: n
                262     LOAD_FAST                       8: delta
                264     BINARY_SUBTRACT                 
                266     BINARY_MULTIPLY                 
                268     LOAD_FAST                       0: data
                270     LOAD_FAST                       7: j
                272     BINARY_SUBSCR                   
                274     LOAD_FAST                       8: delta
                276     BINARY_MULTIPLY                 
                278     BINARY_ADD                      
                280     LOAD_FAST                       1: n
                282     BINARY_TRUE_DIVIDE              
                284     STORE_FAST                      9: interpolated
                286     LOAD_FAST                       5: result
                288     LOAD_METHOD                     5: append
                290     LOAD_FAST                       9: interpolated
                292     CALL_METHOD                     1
                294     POP_TOP                         
                296     JUMP_ABSOLUTE                   91 (to 182)
                298     LOAD_FAST                       5: result
                300     RETURN_VALUE                    
                302     LOAD_GLOBAL                     6: ValueError
                304     LOAD_CONST                      7: 'Unknown method: '
                306     LOAD_FAST                       2: method
                308     FORMAT_VALUE                    2 (FVC_REPR)
                310     BUILD_STRING                    2
                312     CALL_FUNCTION                   1
                314     RAISE_VARARGS                   1
        'quantiles'
        [Code]
            File Name: statistics.py
            Object Name: _ss
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 12
            Stack Size: 6
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                '_sum'
                'as_integer_ratio'
                'Counter'
                'map'
                '_exact_ratio'
                '_isfinite'
                'sum'
                'items'
            [Var Names]
                'data'
                'c'
                'T'
                'total'
                'count'
                'mean_n'
                'mean_d'
                'partials'
                'n'
                'd'
                'diff_n'
                'diff_d'
            [Free Vars]
            [Cell Vars]
                'c'
            [Constants]
                'Return sum of square deviations of sequence data.\n\n    If ``c`` is None, the mean is calculated in one pass, and the deviations\n    from the mean are calculated in a second pass. Otherwise, deviations are\n    calculated from ``c`` as given. Use the second case with care, as it can\n    lead to garbage results.\n    '
                None
                [Code]
                    File Name: statistics.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                    [Var Names]
                        '.0'
                        'x'
                    [Free Vars]
                        'c'
                    [Cell Vars]
                    [Constants]
                        2
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        9 (to 24)
                        6       STORE_FAST                      1: x
                        8       LOAD_FAST                       1: x
                        10      LOAD_DEREF                      0: c
                        12      BINARY_SUBTRACT                 
                        14      LOAD_CONST                      0: 2
                        16      BINARY_POWER                    
                        18      YIELD_VALUE                     
                        20      POP_TOP                         
                        22      JUMP_ABSOLUTE                   2 (to 4)
                        24      LOAD_CONST                      1: None
                        26      RETURN_VALUE                    
                '_ss.<locals>.<genexpr>'
                [Code]
                    File Name: statistics.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'Fraction'
                    [Var Names]
                        '.0'
                        'd'
                        'n'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        10 (to 26)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: d
                        10      STORE_FAST                      2: n
                        12      LOAD_GLOBAL                     0: Fraction
                        14      LOAD_FAST                       2: n
                        16      LOAD_FAST                       1: d
                        18      CALL_FUNCTION                   2
                        20      YIELD_VALUE                     
                        22      POP_TOP                         
                        24      JUMP_ABSOLUTE                   2 (to 4)
                        26      LOAD_CONST                      0: None
                        28      RETURN_VALUE                    
            [Disassembly]
                0       LOAD_DEREF                      0: c
                2       LOAD_CONST                      1: None
                4       IS_OP                           1 (is not)
                6       POP_JUMP_IF_FALSE               22 (to 44)
                8       LOAD_GLOBAL                     0: _sum
                10      LOAD_CLOSURE                    0: c
                12      BUILD_TUPLE                     1
                14      LOAD_CONST                      2: <CODE> <genexpr>
                16      LOAD_CONST                      3: '_ss.<locals>.<genexpr>'
                18      MAKE_FUNCTION                   8
                20      LOAD_FAST                       0: data
                22      GET_ITER                        
                24      CALL_FUNCTION                   1
                26      CALL_FUNCTION                   1
                28      UNPACK_SEQUENCE                 3
                30      STORE_FAST                      2: T
                32      STORE_FAST                      3: total
                34      STORE_FAST                      4: count
                36      LOAD_FAST                       2: T
                38      LOAD_FAST                       3: total
                40      BUILD_TUPLE                     2
                42      RETURN_VALUE                    
                44      LOAD_GLOBAL                     0: _sum
                46      LOAD_FAST                       0: data
                48      CALL_FUNCTION                   1
                50      UNPACK_SEQUENCE                 3
                52      STORE_FAST                      2: T
                54      STORE_FAST                      3: total
                56      STORE_FAST                      4: count
                58      LOAD_FAST                       3: total
                60      LOAD_FAST                       4: count
                62      BINARY_TRUE_DIVIDE              
                64      LOAD_METHOD                     1: as_integer_ratio
                66      CALL_METHOD                     0
                68      UNPACK_SEQUENCE                 2
                70      STORE_FAST                      5: mean_n
                72      STORE_FAST                      6: mean_d
                74      LOAD_GLOBAL                     2: Counter
                76      CALL_FUNCTION                   0
                78      STORE_FAST                      7: partials
                80      LOAD_GLOBAL                     3: map
                82      LOAD_GLOBAL                     4: _exact_ratio
                84      LOAD_FAST                       0: data
                86      CALL_FUNCTION                   2
                88      GET_ITER                        
                90      FOR_ITER                        28 (to 148)
                92      UNPACK_SEQUENCE                 2
                94      STORE_FAST                      8: n
                96      STORE_FAST                      9: d
                98      LOAD_FAST                       8: n
                100     LOAD_FAST                       6: mean_d
                102     BINARY_MULTIPLY                 
                104     LOAD_FAST                       9: d
                106     LOAD_FAST                       5: mean_n
                108     BINARY_MULTIPLY                 
                110     BINARY_SUBTRACT                 
                112     STORE_FAST                      10: diff_n
                114     LOAD_FAST                       9: d
                116     LOAD_FAST                       6: mean_d
                118     BINARY_MULTIPLY                 
                120     STORE_FAST                      11: diff_d
                122     LOAD_FAST                       7: partials
                124     LOAD_FAST                       11: diff_d
                126     LOAD_FAST                       11: diff_d
                128     BINARY_MULTIPLY                 
                130     DUP_TOP_TWO                     
                132     BINARY_SUBSCR                   
                134     LOAD_FAST                       10: diff_n
                136     LOAD_FAST                       10: diff_n
                138     BINARY_MULTIPLY                 
                140     INPLACE_ADD                     
                142     ROT_THREE                       
                144     STORE_SUBSCR                    
                146     JUMP_ABSOLUTE                   45 (to 90)
                148     LOAD_CONST                      1: None
                150     LOAD_FAST                       7: partials
                152     CONTAINS_OP                     0 (in)
                154     POP_JUMP_IF_FALSE               92 (to 184)
                156     LOAD_FAST                       7: partials
                158     LOAD_CONST                      1: None
                160     BINARY_SUBSCR                   
                162     STORE_FAST                      3: total
                164     LOAD_GLOBAL                     5: _isfinite
                166     LOAD_FAST                       3: total
                168     CALL_FUNCTION                   1
                170     POP_JUMP_IF_FALSE               88 (to 176)
                172     LOAD_ASSERTION_ERROR            
                174     RAISE_VARARGS                   1
                176     LOAD_FAST                       2: T
                178     LOAD_FAST                       3: total
                180     BUILD_TUPLE                     2
                182     RETURN_VALUE                    
                184     LOAD_GLOBAL                     6: sum
                186     LOAD_CONST                      4: <CODE> <genexpr>
                188     LOAD_CONST                      3: '_ss.<locals>.<genexpr>'
                190     MAKE_FUNCTION                   0
                192     LOAD_FAST                       7: partials
                194     LOAD_METHOD                     7: items
                196     CALL_METHOD                     0
                198     GET_ITER                        
                200     CALL_FUNCTION                   1
                202     CALL_FUNCTION                   1
                204     STORE_FAST                      3: total
                206     LOAD_FAST                       2: T
                208     LOAD_FAST                       3: total
                210     BUILD_TUPLE                     2
                212     RETURN_VALUE                    
        '_ss'
        [Code]
            File Name: statistics.py
            Object Name: variance
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'iter'
                'list'
                'len'
                'StatisticsError'
                '_ss'
                '_convert'
            [Var Names]
                'data'
                'xbar'
                'n'
                'T'
                'ss'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the sample variance of data.\n\n    data should be an iterable of Real-valued numbers, with at least two\n    values. The optional argument xbar, if given, should be the mean of\n    the data. If it is missing or None, the mean is automatically calculated.\n\n    Use this function when your data is a sample from a population. To\n    calculate the variance from the entire population, see ``pvariance``.\n\n    Examples:\n\n    >>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n    >>> variance(data)\n    1.3720238095238095\n\n    If you have already calculated the mean of your data, you can pass it as\n    the optional second argument ``xbar`` to avoid recalculating it:\n\n    >>> m = mean(data)\n    >>> variance(data, m)\n    1.3720238095238095\n\n    This function does not check that ``xbar`` is actually the mean of\n    ``data``. Giving arbitrary values for ``xbar`` may lead to invalid or\n    impossible results.\n\n    Decimals and Fractions are supported:\n\n    >>> from decimal import Decimal as D\n    >>> variance([D("27.5"), D("30.25"), D("30.25"), D("34.5"), D("41.75")])\n    Decimal(\'31.01875\')\n\n    >>> from fractions import Fraction as F\n    >>> variance([F(1, 6), F(1, 2), F(5, 3)])\n    Fraction(67, 108)\n\n    '
                2
                'variance requires at least two data points'
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: iter
                2       LOAD_FAST                       0: data
                4       CALL_FUNCTION                   1
                6       LOAD_FAST                       0: data
                8       IS_OP                           0 (is)
                10      POP_JUMP_IF_FALSE               10 (to 20)
                12      LOAD_GLOBAL                     1: list
                14      LOAD_FAST                       0: data
                16      CALL_FUNCTION                   1
                18      STORE_FAST                      0: data
                20      LOAD_GLOBAL                     2: len
                22      LOAD_FAST                       0: data
                24      CALL_FUNCTION                   1
                26      STORE_FAST                      2: n
                28      LOAD_FAST                       2: n
                30      LOAD_CONST                      1: 2
                32      COMPARE_OP                      0 (<)
                34      POP_JUMP_IF_FALSE               22 (to 44)
                36      LOAD_GLOBAL                     3: StatisticsError
                38      LOAD_CONST                      2: 'variance requires at least two data points'
                40      CALL_FUNCTION                   1
                42      RAISE_VARARGS                   1
                44      LOAD_GLOBAL                     4: _ss
                46      LOAD_FAST                       0: data
                48      LOAD_FAST                       1: xbar
                50      CALL_FUNCTION                   2
                52      UNPACK_SEQUENCE                 2
                54      STORE_FAST                      3: T
                56      STORE_FAST                      4: ss
                58      LOAD_GLOBAL                     5: _convert
                60      LOAD_FAST                       4: ss
                62      LOAD_FAST                       2: n
                64      LOAD_CONST                      3: 1
                66      BINARY_SUBTRACT                 
                68      BINARY_TRUE_DIVIDE              
                70      LOAD_FAST                       3: T
                72      CALL_FUNCTION                   2
                74      RETURN_VALUE                    
        'variance'
        [Code]
            File Name: statistics.py
            Object Name: pvariance
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'iter'
                'list'
                'len'
                'StatisticsError'
                '_ss'
                '_convert'
            [Var Names]
                'data'
                'mu'
                'n'
                'T'
                'ss'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the population variance of ``data``.\n\n    data should be a sequence or iterable of Real-valued numbers, with at least one\n    value. The optional argument mu, if given, should be the mean of\n    the data. If it is missing or None, the mean is automatically calculated.\n\n    Use this function to calculate the variance from the entire population.\n    To estimate the variance from a sample, the ``variance`` function is\n    usually a better choice.\n\n    Examples:\n\n    >>> data = [0.0, 0.25, 0.25, 1.25, 1.5, 1.75, 2.75, 3.25]\n    >>> pvariance(data)\n    1.25\n\n    If you have already calculated the mean of the data, you can pass it as\n    the optional second argument to avoid recalculating it:\n\n    >>> mu = mean(data)\n    >>> pvariance(data, mu)\n    1.25\n\n    Decimals and Fractions are supported:\n\n    >>> from decimal import Decimal as D\n    >>> pvariance([D("27.5"), D("30.25"), D("30.25"), D("34.5"), D("41.75")])\n    Decimal(\'24.815\')\n\n    >>> from fractions import Fraction as F\n    >>> pvariance([F(1, 4), F(5, 4), F(1, 2)])\n    Fraction(13, 72)\n\n    '
                1
                'pvariance requires at least one data point'
            [Disassembly]
                0       LOAD_GLOBAL                     0: iter
                2       LOAD_FAST                       0: data
                4       CALL_FUNCTION                   1
                6       LOAD_FAST                       0: data
                8       IS_OP                           0 (is)
                10      POP_JUMP_IF_FALSE               10 (to 20)
                12      LOAD_GLOBAL                     1: list
                14      LOAD_FAST                       0: data
                16      CALL_FUNCTION                   1
                18      STORE_FAST                      0: data
                20      LOAD_GLOBAL                     2: len
                22      LOAD_FAST                       0: data
                24      CALL_FUNCTION                   1
                26      STORE_FAST                      2: n
                28      LOAD_FAST                       2: n
                30      LOAD_CONST                      1: 1
                32      COMPARE_OP                      0 (<)
                34      POP_JUMP_IF_FALSE               22 (to 44)
                36      LOAD_GLOBAL                     3: StatisticsError
                38      LOAD_CONST                      2: 'pvariance requires at least one data point'
                40      CALL_FUNCTION                   1
                42      RAISE_VARARGS                   1
                44      LOAD_GLOBAL                     4: _ss
                46      LOAD_FAST                       0: data
                48      LOAD_FAST                       1: mu
                50      CALL_FUNCTION                   2
                52      UNPACK_SEQUENCE                 2
                54      STORE_FAST                      3: T
                56      STORE_FAST                      4: ss
                58      LOAD_GLOBAL                     5: _convert
                60      LOAD_FAST                       4: ss
                62      LOAD_FAST                       2: n
                64      BINARY_TRUE_DIVIDE              
                66      LOAD_FAST                       3: T
                68      CALL_FUNCTION                   2
                70      RETURN_VALUE                    
        'pvariance'
        [Code]
            File Name: statistics.py
            Object Name: stdev
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'variance'
                'sqrt'
                'AttributeError'
                'math'
            [Var Names]
                'data'
                'xbar'
                'var'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the square root of the sample variance.\n\n    See ``variance`` for arguments and other details.\n\n    >>> stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n    1.0810874155219827\n\n    '
            [Disassembly]
                0       LOAD_GLOBAL                     0: variance
                2       LOAD_FAST                       0: data
                4       LOAD_FAST                       1: xbar
                6       CALL_FUNCTION                   2
                8       STORE_FAST                      2: var
                10      SETUP_FINALLY                   5 (to 22)
                12      LOAD_FAST                       2: var
                14      LOAD_METHOD                     1: sqrt
                16      CALL_METHOD                     0
                18      POP_BLOCK                       
                20      RETURN_VALUE                    
                22      DUP_TOP                         
                24      LOAD_GLOBAL                     2: AttributeError
                26      JUMP_IF_NOT_EXC_MATCH           24 (to 48)
                28      POP_TOP                         
                30      POP_TOP                         
                32      POP_TOP                         
                34      LOAD_GLOBAL                     3: math
                36      LOAD_METHOD                     1: sqrt
                38      LOAD_FAST                       2: var
                40      CALL_METHOD                     1
                42      ROT_FOUR                        
                44      POP_EXCEPT                      
                46      RETURN_VALUE                    
                48      RERAISE                         0
        'stdev'
        [Code]
            File Name: statistics.py
            Object Name: pstdev
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'pvariance'
                'sqrt'
                'AttributeError'
                'math'
            [Var Names]
                'data'
                'mu'
                'var'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the square root of the population variance.\n\n    See ``pvariance`` for arguments and other details.\n\n    >>> pstdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n    0.986893273527251\n\n    '
            [Disassembly]
                0       LOAD_GLOBAL                     0: pvariance
                2       LOAD_FAST                       0: data
                4       LOAD_FAST                       1: mu
                6       CALL_FUNCTION                   2
                8       STORE_FAST                      2: var
                10      SETUP_FINALLY                   5 (to 22)
                12      LOAD_FAST                       2: var
                14      LOAD_METHOD                     1: sqrt
                16      CALL_METHOD                     0
                18      POP_BLOCK                       
                20      RETURN_VALUE                    
                22      DUP_TOP                         
                24      LOAD_GLOBAL                     2: AttributeError
                26      JUMP_IF_NOT_EXC_MATCH           24 (to 48)
                28      POP_TOP                         
                30      POP_TOP                         
                32      POP_TOP                         
                34      LOAD_GLOBAL                     3: math
                36      LOAD_METHOD                     1: sqrt
                38      LOAD_FAST                       2: var
                40      CALL_METHOD                     1
                42      ROT_FOUR                        
                44      POP_EXCEPT                      
                46      RETURN_VALUE                    
                48      RERAISE                         0
        'pstdev'
        [Code]
            File Name: statistics.py
            Object Name: covariance
            Arg Count: 2
            Pos Only Arg Count: 2
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'len'
                'StatisticsError'
                'fsum'
                'zip'
            [Var Names]
                'x'
                'y'
                'n'
                'sxy'
            [Free Vars]
            [Cell Vars]
                'xbar'
                'ybar'
            [Constants]
                'Covariance\n\n    Return the sample covariance of two inputs *x* and *y*. Covariance\n    is a measure of the joint variability of two inputs.\n\n    >>> x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> y = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n    >>> covariance(x, y)\n    0.75\n    >>> z = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    >>> covariance(x, z)\n    -7.5\n    >>> covariance(z, x)\n    -7.5\n\n    '
                'covariance requires that both inputs have same number of data points'
                2
                'covariance requires at least two data points'
                [Code]
                    File Name: statistics.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                    [Var Names]
                        '.0'
                        'xi'
                        'yi'
                    [Free Vars]
                        'xbar'
                        'ybar'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        13 (to 32)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: xi
                        10      STORE_FAST                      2: yi
                        12      LOAD_FAST                       1: xi
                        14      LOAD_DEREF                      0: xbar
                        16      BINARY_SUBTRACT                 
                        18      LOAD_FAST                       2: yi
                        20      LOAD_DEREF                      1: ybar
                        22      BINARY_SUBTRACT                 
                        24      BINARY_MULTIPLY                 
                        26      YIELD_VALUE                     
                        28      POP_TOP                         
                        30      JUMP_ABSOLUTE                   2 (to 4)
                        32      LOAD_CONST                      0: None
                        34      RETURN_VALUE                    
                'covariance.<locals>.<genexpr>'
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_FAST                       0: x
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      2: n
                8       LOAD_GLOBAL                     0: len
                10      LOAD_FAST                       1: y
                12      CALL_FUNCTION                   1
                14      LOAD_FAST                       2: n
                16      COMPARE_OP                      3 (!=)
                18      POP_JUMP_IF_FALSE               14 (to 28)
                20      LOAD_GLOBAL                     1: StatisticsError
                22      LOAD_CONST                      1: 'covariance requires that both inputs have same number of data points'
                24      CALL_FUNCTION                   1
                26      RAISE_VARARGS                   1
                28      LOAD_FAST                       2: n
                30      LOAD_CONST                      2: 2
                32      COMPARE_OP                      0 (<)
                34      POP_JUMP_IF_FALSE               22 (to 44)
                36      LOAD_GLOBAL                     1: StatisticsError
                38      LOAD_CONST                      3: 'covariance requires at least two data points'
                40      CALL_FUNCTION                   1
                42      RAISE_VARARGS                   1
                44      LOAD_GLOBAL                     2: fsum
                46      LOAD_FAST                       0: x
                48      CALL_FUNCTION                   1
                50      LOAD_FAST                       2: n
                52      BINARY_TRUE_DIVIDE              
                54      STORE_DEREF                     0: xbar
                56      LOAD_GLOBAL                     2: fsum
                58      LOAD_FAST                       1: y
                60      CALL_FUNCTION                   1
                62      LOAD_FAST                       2: n
                64      BINARY_TRUE_DIVIDE              
                66      STORE_DEREF                     1: ybar
                68      LOAD_GLOBAL                     2: fsum
                70      LOAD_CLOSURE                    0: xbar
                72      LOAD_CLOSURE                    1: ybar
                74      BUILD_TUPLE                     2
                76      LOAD_CONST                      4: <CODE> <genexpr>
                78      LOAD_CONST                      5: 'covariance.<locals>.<genexpr>'
                80      MAKE_FUNCTION                   8
                82      LOAD_GLOBAL                     3: zip
                84      LOAD_FAST                       0: x
                86      LOAD_FAST                       1: y
                88      CALL_FUNCTION                   2
                90      GET_ITER                        
                92      CALL_FUNCTION                   1
                94      CALL_FUNCTION                   1
                96      STORE_FAST                      3: sxy
                98      LOAD_FAST                       3: sxy
                100     LOAD_FAST                       2: n
                102     LOAD_CONST                      6: 1
                104     BINARY_SUBTRACT                 
                106     BINARY_TRUE_DIVIDE              
                108     RETURN_VALUE                    
        'covariance'
        [Code]
            File Name: statistics.py
            Object Name: correlation
            Arg Count: 2
            Pos Only Arg Count: 2
            KW Only Arg Count: 0
            Locals: 6
            Stack Size: 8
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'len'
                'StatisticsError'
                'fsum'
                'zip'
                'sqrt'
                'ZeroDivisionError'
            [Var Names]
                'x'
                'y'
                'n'
                'sxy'
                'sxx'
                'syy'
            [Free Vars]
            [Cell Vars]
                'xbar'
                'ybar'
            [Constants]
                "Pearson's correlation coefficient\n\n    Return the Pearson's correlation coefficient for two inputs. Pearson's\n    correlation coefficient *r* takes values between -1 and +1. It measures the\n    strength and direction of the linear relationship, where +1 means very\n    strong, positive linear relationship, -1 very strong, negative linear\n    relationship, and 0 no linear relationship.\n\n    >>> x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> y = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    >>> correlation(x, x)\n    1.0\n    >>> correlation(x, y)\n    -1.0\n\n    "
                'correlation requires that both inputs have same number of data points'
                2
                'correlation requires at least two data points'
                [Code]
                    File Name: statistics.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                    [Var Names]
                        '.0'
                        'xi'
                        'yi'
                    [Free Vars]
                        'xbar'
                        'ybar'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        13 (to 32)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: xi
                        10      STORE_FAST                      2: yi
                        12      LOAD_FAST                       1: xi
                        14      LOAD_DEREF                      0: xbar
                        16      BINARY_SUBTRACT                 
                        18      LOAD_FAST                       2: yi
                        20      LOAD_DEREF                      1: ybar
                        22      BINARY_SUBTRACT                 
                        24      BINARY_MULTIPLY                 
                        26      YIELD_VALUE                     
                        28      POP_TOP                         
                        30      JUMP_ABSOLUTE                   2 (to 4)
                        32      LOAD_CONST                      0: None
                        34      RETURN_VALUE                    
                'correlation.<locals>.<genexpr>'
                [Code]
                    File Name: statistics.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                    [Var Names]
                        '.0'
                        'xi'
                    [Free Vars]
                        'xbar'
                    [Cell Vars]
                    [Constants]
                        2
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        9 (to 24)
                        6       STORE_FAST                      1: xi
                        8       LOAD_FAST                       1: xi
                        10      LOAD_DEREF                      0: xbar
                        12      BINARY_SUBTRACT                 
                        14      LOAD_CONST                      0: 2
                        16      BINARY_POWER                    
                        18      YIELD_VALUE                     
                        20      POP_TOP                         
                        22      JUMP_ABSOLUTE                   2 (to 4)
                        24      LOAD_CONST                      1: None
                        26      RETURN_VALUE                    
                [Code]
                    File Name: statistics.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                    [Var Names]
                        '.0'
                        'yi'
                    [Free Vars]
                        'ybar'
                    [Cell Vars]
                    [Constants]
                        2
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        9 (to 24)
                        6       STORE_FAST                      1: yi
                        8       LOAD_FAST                       1: yi
                        10      LOAD_DEREF                      0: ybar
                        12      BINARY_SUBTRACT                 
                        14      LOAD_CONST                      0: 2
                        16      BINARY_POWER                    
                        18      YIELD_VALUE                     
                        20      POP_TOP                         
                        22      JUMP_ABSOLUTE                   2 (to 4)
                        24      LOAD_CONST                      1: None
                        26      RETURN_VALUE                    
                'at least one of the inputs is constant'
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_FAST                       0: x
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      2: n
                8       LOAD_GLOBAL                     0: len
                10      LOAD_FAST                       1: y
                12      CALL_FUNCTION                   1
                14      LOAD_FAST                       2: n
                16      COMPARE_OP                      3 (!=)
                18      POP_JUMP_IF_FALSE               14 (to 28)
                20      LOAD_GLOBAL                     1: StatisticsError
                22      LOAD_CONST                      1: 'correlation requires that both inputs have same number of data points'
                24      CALL_FUNCTION                   1
                26      RAISE_VARARGS                   1
                28      LOAD_FAST                       2: n
                30      LOAD_CONST                      2: 2
                32      COMPARE_OP                      0 (<)
                34      POP_JUMP_IF_FALSE               22 (to 44)
                36      LOAD_GLOBAL                     1: StatisticsError
                38      LOAD_CONST                      3: 'correlation requires at least two data points'
                40      CALL_FUNCTION                   1
                42      RAISE_VARARGS                   1
                44      LOAD_GLOBAL                     2: fsum
                46      LOAD_FAST                       0: x
                48      CALL_FUNCTION                   1
                50      LOAD_FAST                       2: n
                52      BINARY_TRUE_DIVIDE              
                54      STORE_DEREF                     0: xbar
                56      LOAD_GLOBAL                     2: fsum
                58      LOAD_FAST                       1: y
                60      CALL_FUNCTION                   1
                62      LOAD_FAST                       2: n
                64      BINARY_TRUE_DIVIDE              
                66      STORE_DEREF                     1: ybar
                68      LOAD_GLOBAL                     2: fsum
                70      LOAD_CLOSURE                    0: xbar
                72      LOAD_CLOSURE                    1: ybar
                74      BUILD_TUPLE                     2
                76      LOAD_CONST                      4: <CODE> <genexpr>
                78      LOAD_CONST                      5: 'correlation.<locals>.<genexpr>'
                80      MAKE_FUNCTION                   8
                82      LOAD_GLOBAL                     3: zip
                84      LOAD_FAST                       0: x
                86      LOAD_FAST                       1: y
                88      CALL_FUNCTION                   2
                90      GET_ITER                        
                92      CALL_FUNCTION                   1
                94      CALL_FUNCTION                   1
                96      STORE_FAST                      3: sxy
                98      LOAD_GLOBAL                     2: fsum
                100     LOAD_CLOSURE                    0: xbar
                102     BUILD_TUPLE                     1
                104     LOAD_CONST                      6: <CODE> <genexpr>
                106     LOAD_CONST                      5: 'correlation.<locals>.<genexpr>'
                108     MAKE_FUNCTION                   8
                110     LOAD_FAST                       0: x
                112     GET_ITER                        
                114     CALL_FUNCTION                   1
                116     CALL_FUNCTION                   1
                118     STORE_FAST                      4: sxx
                120     LOAD_GLOBAL                     2: fsum
                122     LOAD_CLOSURE                    1: ybar
                124     BUILD_TUPLE                     1
                126     LOAD_CONST                      7: <CODE> <genexpr>
                128     LOAD_CONST                      5: 'correlation.<locals>.<genexpr>'
                130     MAKE_FUNCTION                   8
                132     LOAD_FAST                       1: y
                134     GET_ITER                        
                136     CALL_FUNCTION                   1
                138     CALL_FUNCTION                   1
                140     STORE_FAST                      5: syy
                142     SETUP_FINALLY                   9 (to 162)
                144     LOAD_FAST                       3: sxy
                146     LOAD_GLOBAL                     4: sqrt
                148     LOAD_FAST                       4: sxx
                150     LOAD_FAST                       5: syy
                152     BINARY_MULTIPLY                 
                154     CALL_FUNCTION                   1
                156     BINARY_TRUE_DIVIDE              
                158     POP_BLOCK                       
                160     RETURN_VALUE                    
                162     DUP_TOP                         
                164     LOAD_GLOBAL                     5: ZeroDivisionError
                166     JUMP_IF_NOT_EXC_MATCH           91 (to 182)
                168     POP_TOP                         
                170     POP_TOP                         
                172     POP_TOP                         
                174     LOAD_GLOBAL                     1: StatisticsError
                176     LOAD_CONST                      8: 'at least one of the inputs is constant'
                178     CALL_FUNCTION                   1
                180     RAISE_VARARGS                   1
                182     RERAISE                         0
        'correlation'
        'LinearRegression'
        (
            'slope'
            'intercept'
        )
        [Code]
            File Name: statistics.py
            Object Name: linear_regression
            Arg Count: 2
            Pos Only Arg Count: 2
            KW Only Arg Count: 0
            Locals: 7
            Stack Size: 8
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'len'
                'StatisticsError'
                'fsum'
                'zip'
                'ZeroDivisionError'
                'LinearRegression'
            [Var Names]
                'x'
                'y'
                'n'
                'sxy'
                'sxx'
                'slope'
                'intercept'
            [Free Vars]
            [Cell Vars]
                'xbar'
                'ybar'
            [Constants]
                'Slope and intercept for simple linear regression.\n\n    Return the slope and intercept of simple linear regression\n    parameters estimated using ordinary least squares. Simple linear\n    regression describes relationship between an independent variable\n    *x* and a dependent variable *y* in terms of linear function:\n\n        y = slope * x + intercept + noise\n\n    where *slope* and *intercept* are the regression parameters that are\n    estimated, and noise represents the variability of the data that was\n    not explained by the linear regression (it is equal to the\n    difference between predicted and actual values of the dependent\n    variable).\n\n    The parameters are returned as a named tuple.\n\n    >>> x = [1, 2, 3, 4, 5]\n    >>> noise = NormalDist().samples(5, seed=42)\n    >>> y = [3 * x[i] + 2 + noise[i] for i in range(5)]\n    >>> linear_regression(x, y)  #doctest: +ELLIPSIS\n    LinearRegression(slope=3.09078914170..., intercept=1.75684970486...)\n\n    '
                'linear regression requires that both inputs have same number of data points'
                2
                'linear regression requires at least two data points'
                [Code]
                    File Name: statistics.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                    [Var Names]
                        '.0'
                        'xi'
                        'yi'
                    [Free Vars]
                        'xbar'
                        'ybar'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        13 (to 32)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: xi
                        10      STORE_FAST                      2: yi
                        12      LOAD_FAST                       1: xi
                        14      LOAD_DEREF                      0: xbar
                        16      BINARY_SUBTRACT                 
                        18      LOAD_FAST                       2: yi
                        20      LOAD_DEREF                      1: ybar
                        22      BINARY_SUBTRACT                 
                        24      BINARY_MULTIPLY                 
                        26      YIELD_VALUE                     
                        28      POP_TOP                         
                        30      JUMP_ABSOLUTE                   2 (to 4)
                        32      LOAD_CONST                      0: None
                        34      RETURN_VALUE                    
                'linear_regression.<locals>.<genexpr>'
                [Code]
                    File Name: statistics.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                    [Var Names]
                        '.0'
                        'xi'
                    [Free Vars]
                        'xbar'
                    [Cell Vars]
                    [Constants]
                        2
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        9 (to 24)
                        6       STORE_FAST                      1: xi
                        8       LOAD_FAST                       1: xi
                        10      LOAD_DEREF                      0: xbar
                        12      BINARY_SUBTRACT                 
                        14      LOAD_CONST                      0: 2
                        16      BINARY_POWER                    
                        18      YIELD_VALUE                     
                        20      POP_TOP                         
                        22      JUMP_ABSOLUTE                   2 (to 4)
                        24      LOAD_CONST                      1: None
                        26      RETURN_VALUE                    
                'x is constant'
                (
                    'slope'
                    'intercept'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_FAST                       0: x
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      2: n
                8       LOAD_GLOBAL                     0: len
                10      LOAD_FAST                       1: y
                12      CALL_FUNCTION                   1
                14      LOAD_FAST                       2: n
                16      COMPARE_OP                      3 (!=)
                18      POP_JUMP_IF_FALSE               14 (to 28)
                20      LOAD_GLOBAL                     1: StatisticsError
                22      LOAD_CONST                      1: 'linear regression requires that both inputs have same number of data points'
                24      CALL_FUNCTION                   1
                26      RAISE_VARARGS                   1
                28      LOAD_FAST                       2: n
                30      LOAD_CONST                      2: 2
                32      COMPARE_OP                      0 (<)
                34      POP_JUMP_IF_FALSE               22 (to 44)
                36      LOAD_GLOBAL                     1: StatisticsError
                38      LOAD_CONST                      3: 'linear regression requires at least two data points'
                40      CALL_FUNCTION                   1
                42      RAISE_VARARGS                   1
                44      LOAD_GLOBAL                     2: fsum
                46      LOAD_FAST                       0: x
                48      CALL_FUNCTION                   1
                50      LOAD_FAST                       2: n
                52      BINARY_TRUE_DIVIDE              
                54      STORE_DEREF                     0: xbar
                56      LOAD_GLOBAL                     2: fsum
                58      LOAD_FAST                       1: y
                60      CALL_FUNCTION                   1
                62      LOAD_FAST                       2: n
                64      BINARY_TRUE_DIVIDE              
                66      STORE_DEREF                     1: ybar
                68      LOAD_GLOBAL                     2: fsum
                70      LOAD_CLOSURE                    0: xbar
                72      LOAD_CLOSURE                    1: ybar
                74      BUILD_TUPLE                     2
                76      LOAD_CONST                      4: <CODE> <genexpr>
                78      LOAD_CONST                      5: 'linear_regression.<locals>.<genexpr>'
                80      MAKE_FUNCTION                   8
                82      LOAD_GLOBAL                     3: zip
                84      LOAD_FAST                       0: x
                86      LOAD_FAST                       1: y
                88      CALL_FUNCTION                   2
                90      GET_ITER                        
                92      CALL_FUNCTION                   1
                94      CALL_FUNCTION                   1
                96      STORE_FAST                      3: sxy
                98      LOAD_GLOBAL                     2: fsum
                100     LOAD_CLOSURE                    0: xbar
                102     BUILD_TUPLE                     1
                104     LOAD_CONST                      6: <CODE> <genexpr>
                106     LOAD_CONST                      5: 'linear_regression.<locals>.<genexpr>'
                108     MAKE_FUNCTION                   8
                110     LOAD_FAST                       0: x
                112     GET_ITER                        
                114     CALL_FUNCTION                   1
                116     CALL_FUNCTION                   1
                118     STORE_FAST                      4: sxx
                120     SETUP_FINALLY                   6 (to 134)
                122     LOAD_FAST                       3: sxy
                124     LOAD_FAST                       4: sxx
                126     BINARY_TRUE_DIVIDE              
                128     STORE_FAST                      5: slope
                130     POP_BLOCK                       
                132     JUMP_FORWARD                    11 (to 156)
                134     DUP_TOP                         
                136     LOAD_GLOBAL                     4: ZeroDivisionError
                138     JUMP_IF_NOT_EXC_MATCH           77 (to 154)
                140     POP_TOP                         
                142     POP_TOP                         
                144     POP_TOP                         
                146     LOAD_GLOBAL                     1: StatisticsError
                148     LOAD_CONST                      7: 'x is constant'
                150     CALL_FUNCTION                   1
                152     RAISE_VARARGS                   1
                154     RERAISE                         0
                156     LOAD_DEREF                      1: ybar
                158     LOAD_FAST                       5: slope
                160     LOAD_DEREF                      0: xbar
                162     BINARY_MULTIPLY                 
                164     BINARY_SUBTRACT                 
                166     STORE_FAST                      6: intercept
                168     LOAD_GLOBAL                     5: LinearRegression
                170     LOAD_FAST                       5: slope
                172     LOAD_FAST                       6: intercept
                174     LOAD_CONST                      8: ('slope', 'intercept')
                176     CALL_FUNCTION_KW                2
                178     RETURN_VALUE                    
        'linear_regression'
        [Code]
            File Name: statistics.py
            Object Name: _normal_dist_inv_cdf
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'fabs'
                'sqrt'
                'log'
            [Var Names]
                'p'
                'mu'
                'sigma'
                'q'
                'r'
                'num'
                'den'
                'x'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                0.5
                0.425
                0.180625
                2509.08
                33430.6
                67265.8
                45922
                13731.7
                1971.59
                133.142
                3.38713
                5226.5
                28729.1
                39307.9
                21213.8
                5394.2
                687.187
                42.3133
                1
                0
                5
                1.6
                0.000774545
                0.0227238
                0.241781
                1.27046
                3.64785
                5.7695
                4.63034
                1.42344
                1.05075e-09
                0.000547594
                0.0151987
                0.148104
                0.689767
                1.67638
                2.05319
                2.01033e-07
                2.71156e-05
                0.00124266
                0.0265322
                0.296561
                1.78483
                5.46378
                6.6579
                2.04426e-15
                1.42151e-07
                1.84632e-05
                0.000786869
                0.0148754
                0.13693
                0.599832
            [Disassembly]
                0       LOAD_FAST                       0: p
                2       LOAD_CONST                      1: 0.5
                4       BINARY_SUBTRACT                 
                6       STORE_FAST                      3: q
                8       LOAD_GLOBAL                     0: fabs
                10      LOAD_FAST                       3: q
                12      CALL_FUNCTION                   1
                14      LOAD_CONST                      2: 0.425
                16      COMPARE_OP                      1 (<=)
                18      POP_JUMP_IF_FALSE               88 (to 176)
                20      LOAD_CONST                      3: 0.180625
                22      LOAD_FAST                       3: q
                24      LOAD_FAST                       3: q
                26      BINARY_MULTIPLY                 
                28      BINARY_SUBTRACT                 
                30      STORE_FAST                      4: r
                32      LOAD_CONST                      4: 2509.08
                34      LOAD_FAST                       4: r
                36      BINARY_MULTIPLY                 
                38      LOAD_CONST                      5: 33430.6
                40      BINARY_ADD                      
                42      LOAD_FAST                       4: r
                44      BINARY_MULTIPLY                 
                46      LOAD_CONST                      6: 67265.8
                48      BINARY_ADD                      
                50      LOAD_FAST                       4: r
                52      BINARY_MULTIPLY                 
                54      LOAD_CONST                      7: 45922
                56      BINARY_ADD                      
                58      LOAD_FAST                       4: r
                60      BINARY_MULTIPLY                 
                62      LOAD_CONST                      8: 13731.7
                64      BINARY_ADD                      
                66      LOAD_FAST                       4: r
                68      BINARY_MULTIPLY                 
                70      LOAD_CONST                      9: 1971.59
                72      BINARY_ADD                      
                74      LOAD_FAST                       4: r
                76      BINARY_MULTIPLY                 
                78      LOAD_CONST                      10: 133.142
                80      BINARY_ADD                      
                82      LOAD_FAST                       4: r
                84      BINARY_MULTIPLY                 
                86      LOAD_CONST                      11: 3.38713
                88      BINARY_ADD                      
                90      LOAD_FAST                       3: q
                92      BINARY_MULTIPLY                 
                94      STORE_FAST                      5: num
                96      LOAD_CONST                      12: 5226.5
                98      LOAD_FAST                       4: r
                100     BINARY_MULTIPLY                 
                102     LOAD_CONST                      13: 28729.1
                104     BINARY_ADD                      
                106     LOAD_FAST                       4: r
                108     BINARY_MULTIPLY                 
                110     LOAD_CONST                      14: 39307.9
                112     BINARY_ADD                      
                114     LOAD_FAST                       4: r
                116     BINARY_MULTIPLY                 
                118     LOAD_CONST                      15: 21213.8
                120     BINARY_ADD                      
                122     LOAD_FAST                       4: r
                124     BINARY_MULTIPLY                 
                126     LOAD_CONST                      16: 5394.2
                128     BINARY_ADD                      
                130     LOAD_FAST                       4: r
                132     BINARY_MULTIPLY                 
                134     LOAD_CONST                      17: 687.187
                136     BINARY_ADD                      
                138     LOAD_FAST                       4: r
                140     BINARY_MULTIPLY                 
                142     LOAD_CONST                      18: 42.3133
                144     BINARY_ADD                      
                146     LOAD_FAST                       4: r
                148     BINARY_MULTIPLY                 
                150     LOAD_CONST                      19: 1
                152     BINARY_ADD                      
                154     STORE_FAST                      6: den
                156     LOAD_FAST                       5: num
                158     LOAD_FAST                       6: den
                160     BINARY_TRUE_DIVIDE              
                162     STORE_FAST                      7: x
                164     LOAD_FAST                       1: mu
                166     LOAD_FAST                       7: x
                168     LOAD_FAST                       2: sigma
                170     BINARY_MULTIPLY                 
                172     BINARY_ADD                      
                174     RETURN_VALUE                    
                176     LOAD_FAST                       3: q
                178     LOAD_CONST                      20: 0
                180     COMPARE_OP                      1 (<=)
                182     POP_JUMP_IF_FALSE               94 (to 188)
                184     LOAD_FAST                       0: p
                186     JUMP_FORWARD                    3 (to 194)
                188     LOAD_CONST                      19: 1
                190     LOAD_FAST                       0: p
                192     BINARY_SUBTRACT                 
                194     STORE_FAST                      4: r
                196     LOAD_GLOBAL                     1: sqrt
                198     LOAD_GLOBAL                     2: log
                200     LOAD_FAST                       4: r
                202     CALL_FUNCTION                   1
                204     UNARY_NEGATIVE                  
                206     CALL_FUNCTION                   1
                208     STORE_FAST                      4: r
                210     LOAD_FAST                       4: r
                212     LOAD_CONST                      21: 5
                214     COMPARE_OP                      1 (<=)
                216     POP_JUMP_IF_FALSE               174 (to 348)
                218     LOAD_FAST                       4: r
                220     LOAD_CONST                      22: 1.6
                222     BINARY_SUBTRACT                 
                224     STORE_FAST                      4: r
                226     LOAD_CONST                      23: 0.000774545
                228     LOAD_FAST                       4: r
                230     BINARY_MULTIPLY                 
                232     LOAD_CONST                      24: 0.0227238
                234     BINARY_ADD                      
                236     LOAD_FAST                       4: r
                238     BINARY_MULTIPLY                 
                240     LOAD_CONST                      25: 0.241781
                242     BINARY_ADD                      
                244     LOAD_FAST                       4: r
                246     BINARY_MULTIPLY                 
                248     LOAD_CONST                      26: 1.27046
                250     BINARY_ADD                      
                252     LOAD_FAST                       4: r
                254     BINARY_MULTIPLY                 
                256     LOAD_CONST                      27: 3.64785
                258     BINARY_ADD                      
                260     LOAD_FAST                       4: r
                262     BINARY_MULTIPLY                 
                264     LOAD_CONST                      28: 5.7695
                266     BINARY_ADD                      
                268     LOAD_FAST                       4: r
                270     BINARY_MULTIPLY                 
                272     LOAD_CONST                      29: 4.63034
                274     BINARY_ADD                      
                276     LOAD_FAST                       4: r
                278     BINARY_MULTIPLY                 
                280     LOAD_CONST                      30: 1.42344
                282     BINARY_ADD                      
                284     STORE_FAST                      5: num
                286     LOAD_CONST                      31: 1.05075e-09
                288     LOAD_FAST                       4: r
                290     BINARY_MULTIPLY                 
                292     LOAD_CONST                      32: 0.000547594
                294     BINARY_ADD                      
                296     LOAD_FAST                       4: r
                298     BINARY_MULTIPLY                 
                300     LOAD_CONST                      33: 0.0151987
                302     BINARY_ADD                      
                304     LOAD_FAST                       4: r
                306     BINARY_MULTIPLY                 
                308     LOAD_CONST                      34: 0.148104
                310     BINARY_ADD                      
                312     LOAD_FAST                       4: r
                314     BINARY_MULTIPLY                 
                316     LOAD_CONST                      35: 0.689767
                318     BINARY_ADD                      
                320     LOAD_FAST                       4: r
                322     BINARY_MULTIPLY                 
                324     LOAD_CONST                      36: 1.67638
                326     BINARY_ADD                      
                328     LOAD_FAST                       4: r
                330     BINARY_MULTIPLY                 
                332     LOAD_CONST                      37: 2.05319
                334     BINARY_ADD                      
                336     LOAD_FAST                       4: r
                338     BINARY_MULTIPLY                 
                340     LOAD_CONST                      19: 1
                342     BINARY_ADD                      
                344     STORE_FAST                      6: den
                346     JUMP_FORWARD                    64 (to 476)
                348     LOAD_FAST                       4: r
                350     LOAD_CONST                      21: 5
                352     BINARY_SUBTRACT                 
                354     STORE_FAST                      4: r
                356     LOAD_CONST                      38: 2.01033e-07
                358     LOAD_FAST                       4: r
                360     BINARY_MULTIPLY                 
                362     LOAD_CONST                      39: 2.71156e-05
                364     BINARY_ADD                      
                366     LOAD_FAST                       4: r
                368     BINARY_MULTIPLY                 
                370     LOAD_CONST                      40: 0.00124266
                372     BINARY_ADD                      
                374     LOAD_FAST                       4: r
                376     BINARY_MULTIPLY                 
                378     LOAD_CONST                      41: 0.0265322
                380     BINARY_ADD                      
                382     LOAD_FAST                       4: r
                384     BINARY_MULTIPLY                 
                386     LOAD_CONST                      42: 0.296561
                388     BINARY_ADD                      
                390     LOAD_FAST                       4: r
                392     BINARY_MULTIPLY                 
                394     LOAD_CONST                      43: 1.78483
                396     BINARY_ADD                      
                398     LOAD_FAST                       4: r
                400     BINARY_MULTIPLY                 
                402     LOAD_CONST                      44: 5.46378
                404     BINARY_ADD                      
                406     LOAD_FAST                       4: r
                408     BINARY_MULTIPLY                 
                410     LOAD_CONST                      45: 6.6579
                412     BINARY_ADD                      
                414     STORE_FAST                      5: num
                416     LOAD_CONST                      46: 2.04426e-15
                418     LOAD_FAST                       4: r
                420     BINARY_MULTIPLY                 
                422     LOAD_CONST                      47: 1.42151e-07
                424     BINARY_ADD                      
                426     LOAD_FAST                       4: r
                428     BINARY_MULTIPLY                 
                430     LOAD_CONST                      48: 1.84632e-05
                432     BINARY_ADD                      
                434     LOAD_FAST                       4: r
                436     BINARY_MULTIPLY                 
                438     LOAD_CONST                      49: 0.000786869
                440     BINARY_ADD                      
                442     LOAD_FAST                       4: r
                444     BINARY_MULTIPLY                 
                446     LOAD_CONST                      50: 0.0148754
                448     BINARY_ADD                      
                450     LOAD_FAST                       4: r
                452     BINARY_MULTIPLY                 
                454     LOAD_CONST                      51: 0.13693
                456     BINARY_ADD                      
                458     LOAD_FAST                       4: r
                460     BINARY_MULTIPLY                 
                462     LOAD_CONST                      52: 0.599832
                464     BINARY_ADD                      
                466     LOAD_FAST                       4: r
                468     BINARY_MULTIPLY                 
                470     LOAD_CONST                      19: 1
                472     BINARY_ADD                      
                474     STORE_FAST                      6: den
                476     LOAD_FAST                       5: num
                478     LOAD_FAST                       6: den
                480     BINARY_TRUE_DIVIDE              
                482     STORE_FAST                      7: x
                484     LOAD_FAST                       3: q
                486     LOAD_CONST                      20: 0
                488     COMPARE_OP                      0 (<)
                490     POP_JUMP_IF_FALSE               249 (to 498)
                492     LOAD_FAST                       7: x
                494     UNARY_NEGATIVE                  
                496     STORE_FAST                      7: x
                498     LOAD_FAST                       1: mu
                500     LOAD_FAST                       7: x
                502     LOAD_FAST                       2: sigma
                504     BINARY_MULTIPLY                 
                506     BINARY_ADD                      
                508     RETURN_VALUE                    
        '_normal_dist_inv_cdf'
        (
            '_normal_dist_inv_cdf'
        )
        [Code]
            File Name: statistics.py
            Object Name: NormalDist
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__init__'
                'classmethod'
                'from_samples'
                'samples'
                'pdf'
                'cdf'
                'inv_cdf'
                'quantiles'
                'overlap'
                'zscore'
                'property'
                'mean'
                'median'
                'mode'
                'stdev'
                'variance'
                '__add__'
                '__sub__'
                '__mul__'
                '__truediv__'
                '__pos__'
                '__neg__'
                '__radd__'
                '__rsub__'
                '__rmul__'
                '__eq__'
                '__hash__'
                '__repr__'
                '__getstate__'
                '__setstate__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'NormalDist'
                'Normal distribution of a random variable'
                'Arithmetic mean of a normal distribution'
                'Standard deviation of a normal distribution'
                (
                    '_mu'
                    '_sigma'
                )
                0
                1
                [Code]
                    File Name: statistics.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'StatisticsError'
                        'float'
                        '_mu'
                        '_sigma'
                    [Var Names]
                        'self'
                        'mu'
                        'sigma'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'NormalDist where mu is the mean and sigma is the standard deviation.'
                        0
                        'sigma must be non-negative'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       2: sigma
                        2       LOAD_CONST                      1: 0
                        4       COMPARE_OP                      0 (<)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: StatisticsError
                        10      LOAD_CONST                      2: 'sigma must be non-negative'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_GLOBAL                     1: float
                        18      LOAD_FAST                       1: mu
                        20      CALL_FUNCTION                   1
                        22      LOAD_FAST                       0: self
                        24      STORE_ATTR                      2: _mu
                        26      LOAD_GLOBAL                     1: float
                        28      LOAD_FAST                       2: sigma
                        30      CALL_FUNCTION                   1
                        32      LOAD_FAST                       0: self
                        34      STORE_ATTR                      3: _sigma
                        36      LOAD_CONST                      3: None
                        38      RETURN_VALUE                    
                'NormalDist.__init__'
                [Code]
                    File Name: statistics.py
                    Object Name: from_samples
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'list'
                        'tuple'
                        'fmean'
                        'stdev'
                    [Var Names]
                        'cls'
                        'data'
                        'xbar'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Make a normal distribution instance from sample data.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: data
                        4       LOAD_GLOBAL                     1: list
                        6       LOAD_GLOBAL                     2: tuple
                        8       BUILD_TUPLE                     2
                        10      CALL_FUNCTION                   2
                        12      POP_JUMP_IF_TRUE                11 (to 22)
                        14      LOAD_GLOBAL                     1: list
                        16      LOAD_FAST                       1: data
                        18      CALL_FUNCTION                   1
                        20      STORE_FAST                      1: data
                        22      LOAD_GLOBAL                     3: fmean
                        24      LOAD_FAST                       1: data
                        26      CALL_FUNCTION                   1
                        28      STORE_FAST                      2: xbar
                        30      LOAD_FAST                       0: cls
                        32      LOAD_FAST                       2: xbar
                        34      LOAD_GLOBAL                     4: stdev
                        36      LOAD_FAST                       1: data
                        38      LOAD_FAST                       2: xbar
                        40      CALL_FUNCTION                   2
                        42      CALL_FUNCTION                   2
                        44      RETURN_VALUE                    
                'NormalDist.from_samples'
                None
                (
                    'seed'
                )
                [Code]
                    File Name: statistics.py
                    Object Name: samples
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'random'
                        'gauss'
                        'Random'
                        '_mu'
                        '_sigma'
                        'range'
                    [Var Names]
                        'self'
                        'n'
                        'seed'
                    [Free Vars]
                    [Cell Vars]
                        'gauss'
                        'mu'
                        'sigma'
                    [Constants]
                        'Generate *n* samples for a given mean and standard deviation.'
                        None
                        [Code]
                            File Name: statistics.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 5
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                            [Var Names]
                                '.0'
                                'i'
                            [Free Vars]
                                'gauss'
                                'mu'
                                'sigma'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: i
                                8       LOAD_DEREF                      0: gauss
                                10      LOAD_DEREF                      1: mu
                                12      LOAD_DEREF                      2: sigma
                                14      CALL_FUNCTION                   2
                                16      LIST_APPEND                     2
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      RETURN_VALUE                    
                        'NormalDist.samples.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_FAST                       2: seed
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: random
                        10      LOAD_ATTR                       1: gauss
                        12      JUMP_FORWARD                    5 (to 24)
                        14      LOAD_GLOBAL                     0: random
                        16      LOAD_METHOD                     2: Random
                        18      LOAD_FAST                       2: seed
                        20      CALL_METHOD                     1
                        22      LOAD_ATTR                       1: gauss
                        24      STORE_DEREF                     0: gauss
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       3: _mu
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       4: _sigma
                        34      ROT_TWO                         
                        36      STORE_DEREF                     1: mu
                        38      STORE_DEREF                     2: sigma
                        40      LOAD_CLOSURE                    0: gauss
                        42      LOAD_CLOSURE                    1: mu
                        44      LOAD_CLOSURE                    2: sigma
                        46      BUILD_TUPLE                     3
                        48      LOAD_CONST                      2: <CODE> <listcomp>
                        50      LOAD_CONST                      3: 'NormalDist.samples.<locals>.<listcomp>'
                        52      MAKE_FUNCTION                   8
                        54      LOAD_GLOBAL                     5: range
                        56      LOAD_FAST                       1: n
                        58      CALL_FUNCTION                   1
                        60      GET_ITER                        
                        62      CALL_FUNCTION                   1
                        64      RETURN_VALUE                    
                'NormalDist.samples'
                [Code]
                    File Name: statistics.py
                    Object Name: pdf
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sigma'
                        'StatisticsError'
                        'exp'
                        '_mu'
                        'sqrt'
                        'tau'
                    [Var Names]
                        'self'
                        'x'
                        'variance'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Probability density function.  P(x <= X < x+dx) / dx'
                        2
                        'pdf() not defined when sigma is zero'
                        -2
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _sigma
                        4       LOAD_CONST                      1: 2
                        6       BINARY_POWER                    
                        8       STORE_FAST                      2: variance
                        10      LOAD_FAST                       2: variance
                        12      POP_JUMP_IF_TRUE                11 (to 22)
                        14      LOAD_GLOBAL                     1: StatisticsError
                        16      LOAD_CONST                      2: 'pdf() not defined when sigma is zero'
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                        22      LOAD_GLOBAL                     2: exp
                        24      LOAD_FAST                       1: x
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       3: _mu
                        30      BINARY_SUBTRACT                 
                        32      LOAD_CONST                      1: 2
                        34      BINARY_POWER                    
                        36      LOAD_CONST                      3: -2
                        38      LOAD_FAST                       2: variance
                        40      BINARY_MULTIPLY                 
                        42      BINARY_TRUE_DIVIDE              
                        44      CALL_FUNCTION                   1
                        46      LOAD_GLOBAL                     4: sqrt
                        48      LOAD_GLOBAL                     5: tau
                        50      LOAD_FAST                       2: variance
                        52      BINARY_MULTIPLY                 
                        54      CALL_FUNCTION                   1
                        56      BINARY_TRUE_DIVIDE              
                        58      RETURN_VALUE                    
                'NormalDist.pdf'
                [Code]
                    File Name: statistics.py
                    Object Name: cdf
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sigma'
                        'StatisticsError'
                        'erf'
                        '_mu'
                        'sqrt'
                    [Var Names]
                        'self'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Cumulative distribution function.  P(X <= x)'
                        'cdf() not defined when sigma is zero'
                        0.5
                        1
                        2
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _sigma
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_GLOBAL                     1: StatisticsError
                        8       LOAD_CONST                      1: 'cdf() not defined when sigma is zero'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_CONST                      2: 0.5
                        16      LOAD_CONST                      3: 1
                        18      LOAD_GLOBAL                     2: erf
                        20      LOAD_FAST                       1: x
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       3: _mu
                        26      BINARY_SUBTRACT                 
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       0: _sigma
                        32      LOAD_GLOBAL                     4: sqrt
                        34      LOAD_CONST                      4: 2
                        36      CALL_FUNCTION                   1
                        38      BINARY_MULTIPLY                 
                        40      BINARY_TRUE_DIVIDE              
                        42      CALL_FUNCTION                   1
                        44      BINARY_ADD                      
                        46      BINARY_MULTIPLY                 
                        48      RETURN_VALUE                    
                'NormalDist.cdf'
                [Code]
                    File Name: statistics.py
                    Object Name: inv_cdf
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'StatisticsError'
                        '_sigma'
                        '_normal_dist_inv_cdf'
                        '_mu'
                    [Var Names]
                        'self'
                        'p'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Inverse cumulative distribution function.  x : P(X <= x) = p\n\n        Finds the value of the random variable such that the probability of\n        the variable being less than or equal to that value equals the given\n        probability.\n\n        This function is also called the percent point function or quantile\n        function.\n        '
                        0
                        1
                        'p must be in the range 0.0 < p < 1.0'
                        'cdf() not defined when sigma at or below zero'
                    [Disassembly]
                        0       LOAD_FAST                       1: p
                        2       LOAD_CONST                      1: 0
                        4       COMPARE_OP                      1 (<=)
                        6       POP_JUMP_IF_TRUE                8 (to 16)
                        8       LOAD_FAST                       1: p
                        10      LOAD_CONST                      2: 1
                        12      COMPARE_OP                      5 (>=)
                        14      POP_JUMP_IF_FALSE               12 (to 24)
                        16      LOAD_GLOBAL                     0: StatisticsError
                        18      LOAD_CONST                      3: 'p must be in the range 0.0 < p < 1.0'
                        20      CALL_FUNCTION                   1
                        22      RAISE_VARARGS                   1
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       1: _sigma
                        28      LOAD_CONST                      1: 0
                        30      COMPARE_OP                      1 (<=)
                        32      POP_JUMP_IF_FALSE               21 (to 42)
                        34      LOAD_GLOBAL                     0: StatisticsError
                        36      LOAD_CONST                      4: 'cdf() not defined when sigma at or below zero'
                        38      CALL_FUNCTION                   1
                        40      RAISE_VARARGS                   1
                        42      LOAD_GLOBAL                     2: _normal_dist_inv_cdf
                        44      LOAD_FAST                       1: p
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       3: _mu
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       1: _sigma
                        54      CALL_FUNCTION                   3
                        56      RETURN_VALUE                    
                'NormalDist.inv_cdf'
                4
                [Code]
                    File Name: statistics.py
                    Object Name: quantiles
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'range'
                    [Var Names]
                        'self'
                        'n'
                    [Free Vars]
                    [Cell Vars]
                        'n'
                        'self'
                    [Constants]
                        'Divide into *n* continuous intervals with equal probability.\n\n        Returns a list of (n - 1) cut points separating the intervals.\n\n        Set *n* to 4 for quartiles (the default).  Set *n* to 10 for deciles.\n        Set *n* to 100 for percentiles which gives the 99 cuts points that\n        separate the normal distribution in to 100 equal sized groups.\n        '
                        [Code]
                            File Name: statistics.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 6
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'inv_cdf'
                            [Var Names]
                                '.0'
                                'i'
                            [Free Vars]
                                'n'
                                'self'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       STORE_FAST                      1: i
                                8       LOAD_DEREF                      1: self
                                10      LOAD_METHOD                     0: inv_cdf
                                12      LOAD_FAST                       1: i
                                14      LOAD_DEREF                      0: n
                                16      BINARY_TRUE_DIVIDE              
                                18      CALL_METHOD                     1
                                20      LIST_APPEND                     2
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      RETURN_VALUE                    
                        'NormalDist.quantiles.<locals>.<listcomp>'
                        1
                    [Disassembly]
                        0       LOAD_CLOSURE                    0: n
                        2       LOAD_CLOSURE                    1: self
                        4       BUILD_TUPLE                     2
                        6       LOAD_CONST                      1: <CODE> <listcomp>
                        8       LOAD_CONST                      2: 'NormalDist.quantiles.<locals>.<listcomp>'
                        10      MAKE_FUNCTION                   8
                        12      LOAD_GLOBAL                     0: range
                        14      LOAD_CONST                      3: 1
                        16      LOAD_DEREF                      0: n
                        18      CALL_FUNCTION                   2
                        20      GET_ITER                        
                        22      CALL_FUNCTION                   1
                        24      RETURN_VALUE                    
                'NormalDist.quantiles'
                [Code]
                    File Name: statistics.py
                    Object Name: overlap
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 12
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'NormalDist'
                        'TypeError'
                        '_sigma'
                        '_mu'
                        'variance'
                        'StatisticsError'
                        'fabs'
                        'erf'
                        'sqrt'
                        'log'
                        'cdf'
                    [Var Names]
                        'self'
                        'other'
                        'X'
                        'Y'
                        'X_var'
                        'Y_var'
                        'dv'
                        'dm'
                        'a'
                        'b'
                        'x1'
                        'x2'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Compute the overlapping coefficient (OVL) between two normal distributions.\n\n        Measures the agreement between two normal probability distributions.\n        Returns a value between 0.0 and 1.0 giving the overlapping area in\n        the two underlying probability density functions.\n\n            >>> N1 = NormalDist(2.4, 1.6)\n            >>> N2 = NormalDist(3.2, 2.0)\n            >>> N1.overlap(N2)\n            0.8035050657330205\n        '
                        'Expected another NormalDist instance'
                        'overlap() not defined when sigma is zero'
                        1
                        2
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: NormalDist
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                9 (to 18)
                        10      LOAD_GLOBAL                     2: TypeError
                        12      LOAD_CONST                      1: 'Expected another NormalDist instance'
                        14      CALL_FUNCTION                   1
                        16      RAISE_VARARGS                   1
                        18      LOAD_FAST                       0: self
                        20      LOAD_FAST                       1: other
                        22      ROT_TWO                         
                        24      STORE_FAST                      2: X
                        26      STORE_FAST                      3: Y
                        28      LOAD_FAST                       3: Y
                        30      LOAD_ATTR                       3: _sigma
                        32      LOAD_FAST                       3: Y
                        34      LOAD_ATTR                       4: _mu
                        36      BUILD_TUPLE                     2
                        38      LOAD_FAST                       2: X
                        40      LOAD_ATTR                       3: _sigma
                        42      LOAD_FAST                       2: X
                        44      LOAD_ATTR                       4: _mu
                        46      BUILD_TUPLE                     2
                        48      COMPARE_OP                      0 (<)
                        50      POP_JUMP_IF_FALSE               31 (to 62)
                        52      LOAD_FAST                       3: Y
                        54      LOAD_FAST                       2: X
                        56      ROT_TWO                         
                        58      STORE_FAST                      2: X
                        60      STORE_FAST                      3: Y
                        62      LOAD_FAST                       2: X
                        64      LOAD_ATTR                       5: variance
                        66      LOAD_FAST                       3: Y
                        68      LOAD_ATTR                       5: variance
                        70      ROT_TWO                         
                        72      STORE_FAST                      4: X_var
                        74      STORE_FAST                      5: Y_var
                        76      LOAD_FAST                       4: X_var
                        78      POP_JUMP_IF_FALSE               42 (to 84)
                        80      LOAD_FAST                       5: Y_var
                        82      POP_JUMP_IF_TRUE                46 (to 92)
                        84      LOAD_GLOBAL                     6: StatisticsError
                        86      LOAD_CONST                      2: 'overlap() not defined when sigma is zero'
                        88      CALL_FUNCTION                   1
                        90      RAISE_VARARGS                   1
                        92      LOAD_FAST                       5: Y_var
                        94      LOAD_FAST                       4: X_var
                        96      BINARY_SUBTRACT                 
                        98      STORE_FAST                      6: dv
                        100     LOAD_GLOBAL                     7: fabs
                        102     LOAD_FAST                       3: Y
                        104     LOAD_ATTR                       4: _mu
                        106     LOAD_FAST                       2: X
                        108     LOAD_ATTR                       4: _mu
                        110     BINARY_SUBTRACT                 
                        112     CALL_FUNCTION                   1
                        114     STORE_FAST                      7: dm
                        116     LOAD_FAST                       6: dv
                        118     POP_JUMP_IF_TRUE                75 (to 150)
                        120     LOAD_CONST                      3: 1
                        122     LOAD_GLOBAL                     8: erf
                        124     LOAD_FAST                       7: dm
                        126     LOAD_CONST                      4: 2
                        128     LOAD_FAST                       2: X
                        130     LOAD_ATTR                       3: _sigma
                        132     BINARY_MULTIPLY                 
                        134     LOAD_GLOBAL                     9: sqrt
                        136     LOAD_CONST                      4: 2
                        138     CALL_FUNCTION                   1
                        140     BINARY_MULTIPLY                 
                        142     BINARY_TRUE_DIVIDE              
                        144     CALL_FUNCTION                   1
                        146     BINARY_SUBTRACT                 
                        148     RETURN_VALUE                    
                        150     LOAD_FAST                       2: X
                        152     LOAD_ATTR                       4: _mu
                        154     LOAD_FAST                       5: Y_var
                        156     BINARY_MULTIPLY                 
                        158     LOAD_FAST                       3: Y
                        160     LOAD_ATTR                       4: _mu
                        162     LOAD_FAST                       4: X_var
                        164     BINARY_MULTIPLY                 
                        166     BINARY_SUBTRACT                 
                        168     STORE_FAST                      8: a
                        170     LOAD_FAST                       2: X
                        172     LOAD_ATTR                       3: _sigma
                        174     LOAD_FAST                       3: Y
                        176     LOAD_ATTR                       3: _sigma
                        178     BINARY_MULTIPLY                 
                        180     LOAD_GLOBAL                     9: sqrt
                        182     LOAD_FAST                       7: dm
                        184     LOAD_CONST                      4: 2
                        186     BINARY_POWER                    
                        188     LOAD_FAST                       6: dv
                        190     LOAD_GLOBAL                     10: log
                        192     LOAD_FAST                       5: Y_var
                        194     LOAD_FAST                       4: X_var
                        196     BINARY_TRUE_DIVIDE              
                        198     CALL_FUNCTION                   1
                        200     BINARY_MULTIPLY                 
                        202     BINARY_ADD                      
                        204     CALL_FUNCTION                   1
                        206     BINARY_MULTIPLY                 
                        208     STORE_FAST                      9: b
                        210     LOAD_FAST                       8: a
                        212     LOAD_FAST                       9: b
                        214     BINARY_ADD                      
                        216     LOAD_FAST                       6: dv
                        218     BINARY_TRUE_DIVIDE              
                        220     STORE_FAST                      10: x1
                        222     LOAD_FAST                       8: a
                        224     LOAD_FAST                       9: b
                        226     BINARY_SUBTRACT                 
                        228     LOAD_FAST                       6: dv
                        230     BINARY_TRUE_DIVIDE              
                        232     STORE_FAST                      11: x2
                        234     LOAD_CONST                      3: 1
                        236     LOAD_GLOBAL                     7: fabs
                        238     LOAD_FAST                       3: Y
                        240     LOAD_METHOD                     11: cdf
                        242     LOAD_FAST                       10: x1
                        244     CALL_METHOD                     1
                        246     LOAD_FAST                       2: X
                        248     LOAD_METHOD                     11: cdf
                        250     LOAD_FAST                       10: x1
                        252     CALL_METHOD                     1
                        254     BINARY_SUBTRACT                 
                        256     CALL_FUNCTION                   1
                        258     LOAD_GLOBAL                     7: fabs
                        260     LOAD_FAST                       3: Y
                        262     LOAD_METHOD                     11: cdf
                        264     LOAD_FAST                       11: x2
                        266     CALL_METHOD                     1
                        268     LOAD_FAST                       2: X
                        270     LOAD_METHOD                     11: cdf
                        272     LOAD_FAST                       11: x2
                        274     CALL_METHOD                     1
                        276     BINARY_SUBTRACT                 
                        278     CALL_FUNCTION                   1
                        280     BINARY_ADD                      
                        282     BINARY_SUBTRACT                 
                        284     RETURN_VALUE                    
                'NormalDist.overlap'
                [Code]
                    File Name: statistics.py
                    Object Name: zscore
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sigma'
                        'StatisticsError'
                        '_mu'
                    [Var Names]
                        'self'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Compute the Standard Score.  (x - mean) / stdev\n\n        Describes *x* in terms of the number of standard deviations\n        above or below the mean of the normal distribution.\n        '
                        'zscore() not defined when sigma is zero'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _sigma
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_GLOBAL                     1: StatisticsError
                        8       LOAD_CONST                      1: 'zscore() not defined when sigma is zero'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       1: x
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       2: _mu
                        20      BINARY_SUBTRACT                 
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       0: _sigma
                        26      BINARY_TRUE_DIVIDE              
                        28      RETURN_VALUE                    
                'NormalDist.zscore'
                [Code]
                    File Name: statistics.py
                    Object Name: mean
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_mu'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Arithmetic mean of the normal distribution.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _mu
                        4       RETURN_VALUE                    
                'NormalDist.mean'
                [Code]
                    File Name: statistics.py
                    Object Name: median
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_mu'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the median of the normal distribution'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _mu
                        4       RETURN_VALUE                    
                'NormalDist.median'
                [Code]
                    File Name: statistics.py
                    Object Name: mode
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_mu'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the mode of the normal distribution\n\n        The mode is the value x where which the probability density\n        function (pdf) takes its maximum value.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _mu
                        4       RETURN_VALUE                    
                'NormalDist.mode'
                [Code]
                    File Name: statistics.py
                    Object Name: stdev
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sigma'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Standard deviation of the normal distribution.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _sigma
                        4       RETURN_VALUE                    
                'NormalDist.stdev'
                [Code]
                    File Name: statistics.py
                    Object Name: variance
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sigma'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Square of the standard deviation.'
                        2
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _sigma
                        4       LOAD_CONST                      1: 2
                        6       BINARY_POWER                    
                        8       RETURN_VALUE                    
                'NormalDist.variance'
                [Code]
                    File Name: statistics.py
                    Object Name: __add__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'NormalDist'
                        '_mu'
                        'hypot'
                        '_sigma'
                    [Var Names]
                        'x1'
                        'x2'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Add a constant or another NormalDist instance.\n\n        If *other* is a constant, translate mu by the constant,\n        leaving sigma unchanged.\n\n        If *other* is a NormalDist, add both the means and the variances.\n        Mathematically, this works only if the two distributions are\n        independent or if they are jointly normally distributed.\n        '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: x2
                        4       LOAD_GLOBAL                     1: NormalDist
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               19 (to 38)
                        10      LOAD_GLOBAL                     1: NormalDist
                        12      LOAD_FAST                       0: x1
                        14      LOAD_ATTR                       2: _mu
                        16      LOAD_FAST                       1: x2
                        18      LOAD_ATTR                       2: _mu
                        20      BINARY_ADD                      
                        22      LOAD_GLOBAL                     3: hypot
                        24      LOAD_FAST                       0: x1
                        26      LOAD_ATTR                       4: _sigma
                        28      LOAD_FAST                       1: x2
                        30      LOAD_ATTR                       4: _sigma
                        32      CALL_FUNCTION                   2
                        34      CALL_FUNCTION                   2
                        36      RETURN_VALUE                    
                        38      LOAD_GLOBAL                     1: NormalDist
                        40      LOAD_FAST                       0: x1
                        42      LOAD_ATTR                       2: _mu
                        44      LOAD_FAST                       1: x2
                        46      BINARY_ADD                      
                        48      LOAD_FAST                       0: x1
                        50      LOAD_ATTR                       4: _sigma
                        52      CALL_FUNCTION                   2
                        54      RETURN_VALUE                    
                'NormalDist.__add__'
                [Code]
                    File Name: statistics.py
                    Object Name: __sub__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'NormalDist'
                        '_mu'
                        'hypot'
                        '_sigma'
                    [Var Names]
                        'x1'
                        'x2'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Subtract a constant or another NormalDist instance.\n\n        If *other* is a constant, translate by the constant mu,\n        leaving sigma unchanged.\n\n        If *other* is a NormalDist, subtract the means and add the variances.\n        Mathematically, this works only if the two distributions are\n        independent or if they are jointly normally distributed.\n        '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: x2
                        4       LOAD_GLOBAL                     1: NormalDist
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               19 (to 38)
                        10      LOAD_GLOBAL                     1: NormalDist
                        12      LOAD_FAST                       0: x1
                        14      LOAD_ATTR                       2: _mu
                        16      LOAD_FAST                       1: x2
                        18      LOAD_ATTR                       2: _mu
                        20      BINARY_SUBTRACT                 
                        22      LOAD_GLOBAL                     3: hypot
                        24      LOAD_FAST                       0: x1
                        26      LOAD_ATTR                       4: _sigma
                        28      LOAD_FAST                       1: x2
                        30      LOAD_ATTR                       4: _sigma
                        32      CALL_FUNCTION                   2
                        34      CALL_FUNCTION                   2
                        36      RETURN_VALUE                    
                        38      LOAD_GLOBAL                     1: NormalDist
                        40      LOAD_FAST                       0: x1
                        42      LOAD_ATTR                       2: _mu
                        44      LOAD_FAST                       1: x2
                        46      BINARY_SUBTRACT                 
                        48      LOAD_FAST                       0: x1
                        50      LOAD_ATTR                       4: _sigma
                        52      CALL_FUNCTION                   2
                        54      RETURN_VALUE                    
                'NormalDist.__sub__'
                [Code]
                    File Name: statistics.py
                    Object Name: __mul__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'NormalDist'
                        '_mu'
                        '_sigma'
                        'fabs'
                    [Var Names]
                        'x1'
                        'x2'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Multiply both mu and sigma by a constant.\n\n        Used for rescaling, perhaps to change measurement units.\n        Sigma is scaled with the absolute value of the constant.\n        '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: NormalDist
                        2       LOAD_FAST                       0: x1
                        4       LOAD_ATTR                       1: _mu
                        6       LOAD_FAST                       1: x2
                        8       BINARY_MULTIPLY                 
                        10      LOAD_FAST                       0: x1
                        12      LOAD_ATTR                       2: _sigma
                        14      LOAD_GLOBAL                     3: fabs
                        16      LOAD_FAST                       1: x2
                        18      CALL_FUNCTION                   1
                        20      BINARY_MULTIPLY                 
                        22      CALL_FUNCTION                   2
                        24      RETURN_VALUE                    
                'NormalDist.__mul__'
                [Code]
                    File Name: statistics.py
                    Object Name: __truediv__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'NormalDist'
                        '_mu'
                        '_sigma'
                        'fabs'
                    [Var Names]
                        'x1'
                        'x2'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Divide both mu and sigma by a constant.\n\n        Used for rescaling, perhaps to change measurement units.\n        Sigma is scaled with the absolute value of the constant.\n        '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: NormalDist
                        2       LOAD_FAST                       0: x1
                        4       LOAD_ATTR                       1: _mu
                        6       LOAD_FAST                       1: x2
                        8       BINARY_TRUE_DIVIDE              
                        10      LOAD_FAST                       0: x1
                        12      LOAD_ATTR                       2: _sigma
                        14      LOAD_GLOBAL                     3: fabs
                        16      LOAD_FAST                       1: x2
                        18      CALL_FUNCTION                   1
                        20      BINARY_TRUE_DIVIDE              
                        22      CALL_FUNCTION                   2
                        24      RETURN_VALUE                    
                'NormalDist.__truediv__'
                [Code]
                    File Name: statistics.py
                    Object Name: __pos__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'NormalDist'
                        '_mu'
                        '_sigma'
                    [Var Names]
                        'x1'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return a copy of the instance.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: NormalDist
                        2       LOAD_FAST                       0: x1
                        4       LOAD_ATTR                       1: _mu
                        6       LOAD_FAST                       0: x1
                        8       LOAD_ATTR                       2: _sigma
                        10      CALL_FUNCTION                   2
                        12      RETURN_VALUE                    
                'NormalDist.__pos__'
                [Code]
                    File Name: statistics.py
                    Object Name: __neg__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'NormalDist'
                        '_mu'
                        '_sigma'
                    [Var Names]
                        'x1'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Negates mu while keeping sigma the same.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: NormalDist
                        2       LOAD_FAST                       0: x1
                        4       LOAD_ATTR                       1: _mu
                        6       UNARY_NEGATIVE                  
                        8       LOAD_FAST                       0: x1
                        10      LOAD_ATTR                       2: _sigma
                        12      CALL_FUNCTION                   2
                        14      RETURN_VALUE                    
                'NormalDist.__neg__'
                [Code]
                    File Name: statistics.py
                    Object Name: __rsub__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'x1'
                        'x2'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Subtract a NormalDist from a constant or another NormalDist.'
                    [Disassembly]
                        0       LOAD_FAST                       0: x1
                        2       LOAD_FAST                       1: x2
                        4       BINARY_SUBTRACT                 
                        6       UNARY_NEGATIVE                  
                        8       RETURN_VALUE                    
                'NormalDist.__rsub__'
                [Code]
                    File Name: statistics.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'NormalDist'
                        'NotImplemented'
                        '_mu'
                        '_sigma'
                    [Var Names]
                        'x1'
                        'x2'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Two NormalDist objects are equal if their mu and sigma are both equal.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: x2
                        4       LOAD_GLOBAL                     1: NormalDist
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: x1
                        16      LOAD_ATTR                       3: _mu
                        18      LOAD_FAST                       1: x2
                        20      LOAD_ATTR                       3: _mu
                        22      COMPARE_OP                      2 (==)
                        24      JUMP_IF_FALSE_OR_POP            18 (to 36)
                        26      LOAD_FAST                       0: x1
                        28      LOAD_ATTR                       4: _sigma
                        30      LOAD_FAST                       1: x2
                        32      LOAD_ATTR                       4: _sigma
                        34      COMPARE_OP                      2 (==)
                        36      RETURN_VALUE                    
                'NormalDist.__eq__'
                [Code]
                    File Name: statistics.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        '_mu'
                        '_sigma'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'NormalDist objects hash equal if their mu and sigma are both equal.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _mu
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: _sigma
                        10      BUILD_TUPLE                     2
                        12      CALL_FUNCTION                   1
                        14      RETURN_VALUE                    
                'NormalDist.__hash__'
                [Code]
                    File Name: statistics.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        '__name__'
                        '_mu'
                        '_sigma'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '(mu='
                        ', sigma='
                        ')'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: type
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_ATTR                       1: __name__
                        8       FORMAT_VALUE                    0 (FVC_NONE)
                        10      LOAD_CONST                      1: '(mu='
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: _mu
                        16      FORMAT_VALUE                    2 (FVC_REPR)
                        18      LOAD_CONST                      2: ', sigma='
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       3: _sigma
                        24      FORMAT_VALUE                    2 (FVC_REPR)
                        26      LOAD_CONST                      3: ')'
                        28      BUILD_STRING                    6
                        30      RETURN_VALUE                    
                'NormalDist.__repr__'
                [Code]
                    File Name: statistics.py
                    Object Name: __getstate__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_mu'
                        '_sigma'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _mu
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: _sigma
                        8       BUILD_TUPLE                     2
                        10      RETURN_VALUE                    
                'NormalDist.__getstate__'
                [Code]
                    File Name: statistics.py
                    Object Name: __setstate__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_mu'
                        '_sigma'
                    [Var Names]
                        'self'
                        'state'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: state
                        2       UNPACK_SEQUENCE                 2
                        4       LOAD_FAST                       0: self
                        6       STORE_ATTR                      0: _mu
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _sigma
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                'NormalDist.__setstate__'
                (
                    0
                    1
                )
                (
                    4
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'NormalDist'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Normal distribution of a random variable'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: 'Arithmetic mean of a normal distribution'
                14      LOAD_CONST                      3: 'Standard deviation of a normal distribution'
                16      LOAD_CONST                      4: ('_mu', '_sigma')
                18      BUILD_CONST_KEY_MAP             2
                20      STORE_NAME                      4: __slots__
                22      LOAD_CONST                      62: (0, 1)
                24      LOAD_CONST                      7: <CODE> __init__
                26      LOAD_CONST                      8: 'NormalDist.__init__'
                28      MAKE_FUNCTION                   1
                30      STORE_NAME                      5: __init__
                32      LOAD_NAME                       6: classmethod
                34      LOAD_CONST                      9: <CODE> from_samples
                36      LOAD_CONST                      10: 'NormalDist.from_samples'
                38      MAKE_FUNCTION                   0
                40      CALL_FUNCTION                   1
                42      STORE_NAME                      7: from_samples
                44      LOAD_CONST                      11: None
                46      LOAD_CONST                      12: ('seed',)
                48      BUILD_CONST_KEY_MAP             1
                50      LOAD_CONST                      13: <CODE> samples
                52      LOAD_CONST                      14: 'NormalDist.samples'
                54      MAKE_FUNCTION                   2
                56      STORE_NAME                      8: samples
                58      LOAD_CONST                      15: <CODE> pdf
                60      LOAD_CONST                      16: 'NormalDist.pdf'
                62      MAKE_FUNCTION                   0
                64      STORE_NAME                      9: pdf
                66      LOAD_CONST                      17: <CODE> cdf
                68      LOAD_CONST                      18: 'NormalDist.cdf'
                70      MAKE_FUNCTION                   0
                72      STORE_NAME                      10: cdf
                74      LOAD_CONST                      19: <CODE> inv_cdf
                76      LOAD_CONST                      20: 'NormalDist.inv_cdf'
                78      MAKE_FUNCTION                   0
                80      STORE_NAME                      11: inv_cdf
                82      LOAD_CONST                      63: (4,)
                84      LOAD_CONST                      22: <CODE> quantiles
                86      LOAD_CONST                      23: 'NormalDist.quantiles'
                88      MAKE_FUNCTION                   1
                90      STORE_NAME                      12: quantiles
                92      LOAD_CONST                      24: <CODE> overlap
                94      LOAD_CONST                      25: 'NormalDist.overlap'
                96      MAKE_FUNCTION                   0
                98      STORE_NAME                      13: overlap
                100     LOAD_CONST                      26: <CODE> zscore
                102     LOAD_CONST                      27: 'NormalDist.zscore'
                104     MAKE_FUNCTION                   0
                106     STORE_NAME                      14: zscore
                108     LOAD_NAME                       15: property
                110     LOAD_CONST                      28: <CODE> mean
                112     LOAD_CONST                      29: 'NormalDist.mean'
                114     MAKE_FUNCTION                   0
                116     CALL_FUNCTION                   1
                118     STORE_NAME                      16: mean
                120     LOAD_NAME                       15: property
                122     LOAD_CONST                      30: <CODE> median
                124     LOAD_CONST                      31: 'NormalDist.median'
                126     MAKE_FUNCTION                   0
                128     CALL_FUNCTION                   1
                130     STORE_NAME                      17: median
                132     LOAD_NAME                       15: property
                134     LOAD_CONST                      32: <CODE> mode
                136     LOAD_CONST                      33: 'NormalDist.mode'
                138     MAKE_FUNCTION                   0
                140     CALL_FUNCTION                   1
                142     STORE_NAME                      18: mode
                144     LOAD_NAME                       15: property
                146     LOAD_CONST                      34: <CODE> stdev
                148     LOAD_CONST                      35: 'NormalDist.stdev'
                150     MAKE_FUNCTION                   0
                152     CALL_FUNCTION                   1
                154     STORE_NAME                      19: stdev
                156     LOAD_NAME                       15: property
                158     LOAD_CONST                      36: <CODE> variance
                160     LOAD_CONST                      37: 'NormalDist.variance'
                162     MAKE_FUNCTION                   0
                164     CALL_FUNCTION                   1
                166     STORE_NAME                      20: variance
                168     LOAD_CONST                      38: <CODE> __add__
                170     LOAD_CONST                      39: 'NormalDist.__add__'
                172     MAKE_FUNCTION                   0
                174     STORE_NAME                      21: __add__
                176     LOAD_CONST                      40: <CODE> __sub__
                178     LOAD_CONST                      41: 'NormalDist.__sub__'
                180     MAKE_FUNCTION                   0
                182     STORE_NAME                      22: __sub__
                184     LOAD_CONST                      42: <CODE> __mul__
                186     LOAD_CONST                      43: 'NormalDist.__mul__'
                188     MAKE_FUNCTION                   0
                190     STORE_NAME                      23: __mul__
                192     LOAD_CONST                      44: <CODE> __truediv__
                194     LOAD_CONST                      45: 'NormalDist.__truediv__'
                196     MAKE_FUNCTION                   0
                198     STORE_NAME                      24: __truediv__
                200     LOAD_CONST                      46: <CODE> __pos__
                202     LOAD_CONST                      47: 'NormalDist.__pos__'
                204     MAKE_FUNCTION                   0
                206     STORE_NAME                      25: __pos__
                208     LOAD_CONST                      48: <CODE> __neg__
                210     LOAD_CONST                      49: 'NormalDist.__neg__'
                212     MAKE_FUNCTION                   0
                214     STORE_NAME                      26: __neg__
                216     LOAD_NAME                       21: __add__
                218     STORE_NAME                      27: __radd__
                220     LOAD_CONST                      50: <CODE> __rsub__
                222     LOAD_CONST                      51: 'NormalDist.__rsub__'
                224     MAKE_FUNCTION                   0
                226     STORE_NAME                      28: __rsub__
                228     LOAD_NAME                       23: __mul__
                230     STORE_NAME                      29: __rmul__
                232     LOAD_CONST                      52: <CODE> __eq__
                234     LOAD_CONST                      53: 'NormalDist.__eq__'
                236     MAKE_FUNCTION                   0
                238     STORE_NAME                      30: __eq__
                240     LOAD_CONST                      54: <CODE> __hash__
                242     LOAD_CONST                      55: 'NormalDist.__hash__'
                244     MAKE_FUNCTION                   0
                246     STORE_NAME                      31: __hash__
                248     LOAD_CONST                      56: <CODE> __repr__
                250     LOAD_CONST                      57: 'NormalDist.__repr__'
                252     MAKE_FUNCTION                   0
                254     STORE_NAME                      32: __repr__
                256     LOAD_CONST                      58: <CODE> __getstate__
                258     LOAD_CONST                      59: 'NormalDist.__getstate__'
                260     MAKE_FUNCTION                   0
                262     STORE_NAME                      33: __getstate__
                264     LOAD_CONST                      60: <CODE> __setstate__
                266     LOAD_CONST                      61: 'NormalDist.__setstate__'
                268     MAKE_FUNCTION                   0
                270     STORE_NAME                      34: __setstate__
                272     LOAD_CONST                      11: None
                274     RETURN_VALUE                    
        'NormalDist'
        (
            'negative value'
        )
        (
            None
        )
        (
            1
        )
    [Disassembly]
        0       LOAD_CONST                      0: '\nBasic statistics module.\n\nThis module provides functions for calculating statistics of data, including\naverages, variance, and standard deviation.\n\nCalculating averages\n--------------------\n\n==================  ==================================================\nFunction            Description\n==================  ==================================================\nmean                Arithmetic mean (average) of data.\nfmean               Fast, floating point arithmetic mean.\ngeometric_mean      Geometric mean of data.\nharmonic_mean       Harmonic mean of data.\nmedian              Median (middle value) of data.\nmedian_low          Low median of data.\nmedian_high         High median of data.\nmedian_grouped      Median, or 50th percentile, of grouped data.\nmode                Mode (most common value) of data.\nmultimode           List of modes (most common values of data).\nquantiles           Divide data into intervals with equal probability.\n==================  ==================================================\n\nCalculate the arithmetic mean ("the average") of data:\n\n>>> mean([-1.0, 2.5, 3.25, 5.75])\n2.625\n\n\nCalculate the standard median of discrete data:\n\n>>> median([2, 3, 4, 5])\n3.5\n\n\nCalculate the median, or 50th percentile, of data grouped into class intervals\ncentred on the data values provided. E.g. if your data points are rounded to\nthe nearest whole number:\n\n>>> median_grouped([2, 2, 3, 3, 3, 4])  #doctest: +ELLIPSIS\n2.8333333333...\n\nThis should be interpreted in this way: you have two data points in the class\ninterval 1.5-2.5, three data points in the class interval 2.5-3.5, and one in\nthe class interval 3.5-4.5. The median of these data points is 2.8333...\n\n\nCalculating variability or spread\n---------------------------------\n\n==================  =============================================\nFunction            Description\n==================  =============================================\npvariance           Population variance of data.\nvariance            Sample variance of data.\npstdev              Population standard deviation of data.\nstdev               Sample standard deviation of data.\n==================  =============================================\n\nCalculate the standard deviation of sample data:\n\n>>> stdev([2.5, 3.25, 5.5, 11.25, 11.75])  #doctest: +ELLIPSIS\n4.38961843444...\n\nIf you have previously calculated the mean, you can pass it as the optional\nsecond argument to the four "spread" functions to avoid recalculating it:\n\n>>> data = [1, 2, 2, 4, 4, 4, 5, 6]\n>>> mu = mean(data)\n>>> pvariance(data, mu)\n2.5\n\n\nStatistics for relations between two inputs\n-------------------------------------------\n\n==================  ====================================================\nFunction            Description\n==================  ====================================================\ncovariance          Sample covariance for two variables.\ncorrelation         Pearson\'s correlation coefficient for two variables.\nlinear_regression   Intercept and slope for simple linear regression.\n==================  ====================================================\n\nCalculate covariance, Pearson\'s correlation, and simple linear regression\nfor two inputs:\n\n>>> x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> y = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> covariance(x, y)\n0.75\n>>> correlation(x, y)  #doctest: +ELLIPSIS\n0.31622776601...\n>>> linear_regression(x, y)  #doctest:\nLinearRegression(slope=0.1, intercept=1.5)\n\n\nExceptions\n----------\n\nA single exception is defined: StatisticsError is a subclass of ValueError.\n\n'
        2       STORE_NAME                      0: __doc__
        4       BUILD_LIST                      0
        6       LOAD_CONST                      1: ('NormalDist', 'StatisticsError', 'correlation', 'covariance', 'fmean', 'geometric_mean', 'harmonic_mean', 'linear_regression', 'mean', 'median', 'median_grouped', 'median_high', 'median_low', 'mode', 'multimode', 'pstdev', 'pvariance', 'quantiles', 'stdev', 'variance')
        8       LIST_EXTEND                     1
        10      STORE_NAME                      1: __all__
        12      LOAD_CONST                      2: 0
        14      LOAD_CONST                      3: None
        16      IMPORT_NAME                     2: math
        18      STORE_NAME                      2: math
        20      LOAD_CONST                      2: 0
        22      LOAD_CONST                      3: None
        24      IMPORT_NAME                     3: numbers
        26      STORE_NAME                      3: numbers
        28      LOAD_CONST                      2: 0
        30      LOAD_CONST                      3: None
        32      IMPORT_NAME                     4: random
        34      STORE_NAME                      4: random
        36      LOAD_CONST                      2: 0
        38      LOAD_CONST                      4: ('Fraction',)
        40      IMPORT_NAME                     5: fractions
        42      IMPORT_FROM                     6: Fraction
        44      STORE_NAME                      6: Fraction
        46      POP_TOP                         
        48      LOAD_CONST                      2: 0
        50      LOAD_CONST                      5: ('Decimal',)
        52      IMPORT_NAME                     7: decimal
        54      IMPORT_FROM                     8: Decimal
        56      STORE_NAME                      8: Decimal
        58      POP_TOP                         
        60      LOAD_CONST                      2: 0
        62      LOAD_CONST                      6: ('groupby', 'repeat')
        64      IMPORT_NAME                     9: itertools
        66      IMPORT_FROM                     10: groupby
        68      STORE_NAME                      10: groupby
        70      IMPORT_FROM                     11: repeat
        72      STORE_NAME                      11: repeat
        74      POP_TOP                         
        76      LOAD_CONST                      2: 0
        78      LOAD_CONST                      7: ('bisect_left', 'bisect_right')
        80      IMPORT_NAME                     12: bisect
        82      IMPORT_FROM                     13: bisect_left
        84      STORE_NAME                      13: bisect_left
        86      IMPORT_FROM                     14: bisect_right
        88      STORE_NAME                      14: bisect_right
        90      POP_TOP                         
        92      LOAD_CONST                      2: 0
        94      LOAD_CONST                      8: ('hypot', 'sqrt', 'fabs', 'exp', 'erf', 'tau', 'log', 'fsum')
        96      IMPORT_NAME                     2: math
        98      IMPORT_FROM                     15: hypot
        100     STORE_NAME                      15: hypot
        102     IMPORT_FROM                     16: sqrt
        104     STORE_NAME                      16: sqrt
        106     IMPORT_FROM                     17: fabs
        108     STORE_NAME                      17: fabs
        110     IMPORT_FROM                     18: exp
        112     STORE_NAME                      18: exp
        114     IMPORT_FROM                     19: erf
        116     STORE_NAME                      19: erf
        118     IMPORT_FROM                     20: tau
        120     STORE_NAME                      20: tau
        122     IMPORT_FROM                     21: log
        124     STORE_NAME                      21: log
        126     IMPORT_FROM                     22: fsum
        128     STORE_NAME                      22: fsum
        130     POP_TOP                         
        132     LOAD_CONST                      2: 0
        134     LOAD_CONST                      9: ('itemgetter',)
        136     IMPORT_NAME                     23: operator
        138     IMPORT_FROM                     24: itemgetter
        140     STORE_NAME                      24: itemgetter
        142     POP_TOP                         
        144     LOAD_CONST                      2: 0
        146     LOAD_CONST                      10: ('Counter', 'namedtuple')
        148     IMPORT_NAME                     25: collections
        150     IMPORT_FROM                     26: Counter
        152     STORE_NAME                      26: Counter
        154     IMPORT_FROM                     27: namedtuple
        156     STORE_NAME                      27: namedtuple
        158     POP_TOP                         
        160     LOAD_BUILD_CLASS                
        162     LOAD_CONST                      11: <CODE> StatisticsError
        164     LOAD_CONST                      12: 'StatisticsError'
        166     MAKE_FUNCTION                   0
        168     LOAD_CONST                      12: 'StatisticsError'
        170     LOAD_NAME                       28: ValueError
        172     CALL_FUNCTION                   3
        174     STORE_NAME                      29: StatisticsError
        176     LOAD_CONST                      13: <CODE> _sum
        178     LOAD_CONST                      14: '_sum'
        180     MAKE_FUNCTION                   0
        182     STORE_NAME                      30: _sum
        184     LOAD_CONST                      15: <CODE> _isfinite
        186     LOAD_CONST                      16: '_isfinite'
        188     MAKE_FUNCTION                   0
        190     STORE_NAME                      31: _isfinite
        192     LOAD_CONST                      17: <CODE> _coerce
        194     LOAD_CONST                      18: '_coerce'
        196     MAKE_FUNCTION                   0
        198     STORE_NAME                      32: _coerce
        200     LOAD_CONST                      19: <CODE> _exact_ratio
        202     LOAD_CONST                      20: '_exact_ratio'
        204     MAKE_FUNCTION                   0
        206     STORE_NAME                      33: _exact_ratio
        208     LOAD_CONST                      21: <CODE> _convert
        210     LOAD_CONST                      22: '_convert'
        212     MAKE_FUNCTION                   0
        214     STORE_NAME                      34: _convert
        216     LOAD_CONST                      23: <CODE> _find_lteq
        218     LOAD_CONST                      24: '_find_lteq'
        220     MAKE_FUNCTION                   0
        222     STORE_NAME                      35: _find_lteq
        224     LOAD_CONST                      25: <CODE> _find_rteq
        226     LOAD_CONST                      26: '_find_rteq'
        228     MAKE_FUNCTION                   0
        230     STORE_NAME                      36: _find_rteq
        232     LOAD_CONST                      79: ('negative value',)
        234     LOAD_CONST                      28: <CODE> _fail_neg
        236     LOAD_CONST                      29: '_fail_neg'
        238     MAKE_FUNCTION                   1
        240     STORE_NAME                      37: _fail_neg
        242     LOAD_CONST                      30: <CODE> mean
        244     LOAD_CONST                      31: 'mean'
        246     MAKE_FUNCTION                   0
        248     STORE_NAME                      38: mean
        250     LOAD_CONST                      32: <CODE> fmean
        252     LOAD_CONST                      33: 'fmean'
        254     MAKE_FUNCTION                   0
        256     STORE_NAME                      39: fmean
        258     LOAD_CONST                      34: <CODE> geometric_mean
        260     LOAD_CONST                      35: 'geometric_mean'
        262     MAKE_FUNCTION                   0
        264     STORE_NAME                      40: geometric_mean
        266     LOAD_CONST                      80: (None,)
        268     LOAD_CONST                      36: <CODE> harmonic_mean
        270     LOAD_CONST                      37: 'harmonic_mean'
        272     MAKE_FUNCTION                   1
        274     STORE_NAME                      41: harmonic_mean
        276     LOAD_CONST                      38: <CODE> median
        278     LOAD_CONST                      39: 'median'
        280     MAKE_FUNCTION                   0
        282     STORE_NAME                      42: median
        284     LOAD_CONST                      40: <CODE> median_low
        286     LOAD_CONST                      41: 'median_low'
        288     MAKE_FUNCTION                   0
        290     STORE_NAME                      43: median_low
        292     LOAD_CONST                      42: <CODE> median_high
        294     LOAD_CONST                      43: 'median_high'
        296     MAKE_FUNCTION                   0
        298     STORE_NAME                      44: median_high
        300     LOAD_CONST                      81: (1,)
        302     LOAD_CONST                      45: <CODE> median_grouped
        304     LOAD_CONST                      46: 'median_grouped'
        306     MAKE_FUNCTION                   1
        308     STORE_NAME                      45: median_grouped
        310     LOAD_CONST                      47: <CODE> mode
        312     LOAD_CONST                      48: 'mode'
        314     MAKE_FUNCTION                   0
        316     STORE_NAME                      46: mode
        318     LOAD_CONST                      49: <CODE> multimode
        320     LOAD_CONST                      50: 'multimode'
        322     MAKE_FUNCTION                   0
        324     STORE_NAME                      47: multimode
        326     LOAD_CONST                      51: 4
        328     LOAD_CONST                      52: 'exclusive'
        330     LOAD_CONST                      53: ('n', 'method')
        332     BUILD_CONST_KEY_MAP             2
        334     LOAD_CONST                      54: <CODE> quantiles
        336     LOAD_CONST                      55: 'quantiles'
        338     MAKE_FUNCTION                   2
        340     STORE_NAME                      48: quantiles
        342     LOAD_CONST                      80: (None,)
        344     LOAD_CONST                      56: <CODE> _ss
        346     LOAD_CONST                      57: '_ss'
        348     MAKE_FUNCTION                   1
        350     STORE_NAME                      49: _ss
        352     LOAD_CONST                      80: (None,)
        354     LOAD_CONST                      58: <CODE> variance
        356     LOAD_CONST                      59: 'variance'
        358     MAKE_FUNCTION                   1
        360     STORE_NAME                      50: variance
        362     LOAD_CONST                      80: (None,)
        364     LOAD_CONST                      60: <CODE> pvariance
        366     LOAD_CONST                      61: 'pvariance'
        368     MAKE_FUNCTION                   1
        370     STORE_NAME                      51: pvariance
        372     LOAD_CONST                      80: (None,)
        374     LOAD_CONST                      62: <CODE> stdev
        376     LOAD_CONST                      63: 'stdev'
        378     MAKE_FUNCTION                   1
        380     STORE_NAME                      52: stdev
        382     LOAD_CONST                      80: (None,)
        384     LOAD_CONST                      64: <CODE> pstdev
        386     LOAD_CONST                      65: 'pstdev'
        388     MAKE_FUNCTION                   1
        390     STORE_NAME                      53: pstdev
        392     LOAD_CONST                      66: <CODE> covariance
        394     LOAD_CONST                      67: 'covariance'
        396     MAKE_FUNCTION                   0
        398     STORE_NAME                      54: covariance
        400     LOAD_CONST                      68: <CODE> correlation
        402     LOAD_CONST                      69: 'correlation'
        404     MAKE_FUNCTION                   0
        406     STORE_NAME                      55: correlation
        408     LOAD_NAME                       27: namedtuple
        410     LOAD_CONST                      70: 'LinearRegression'
        412     LOAD_CONST                      71: ('slope', 'intercept')
        414     CALL_FUNCTION                   2
        416     STORE_NAME                      56: LinearRegression
        418     LOAD_CONST                      72: <CODE> linear_regression
        420     LOAD_CONST                      73: 'linear_regression'
        422     MAKE_FUNCTION                   0
        424     STORE_NAME                      57: linear_regression
        426     LOAD_CONST                      74: <CODE> _normal_dist_inv_cdf
        428     LOAD_CONST                      75: '_normal_dist_inv_cdf'
        430     MAKE_FUNCTION                   0
        432     STORE_NAME                      58: _normal_dist_inv_cdf
        434     SETUP_FINALLY                   8 (to 452)
        436     LOAD_CONST                      2: 0
        438     LOAD_CONST                      76: ('_normal_dist_inv_cdf',)
        440     IMPORT_NAME                     59: _statistics
        442     IMPORT_FROM                     58: _normal_dist_inv_cdf
        444     STORE_NAME                      58: _normal_dist_inv_cdf
        446     POP_TOP                         
        448     POP_BLOCK                       
        450     JUMP_FORWARD                    9 (to 470)
        452     DUP_TOP                         
        454     LOAD_NAME                       60: ImportError
        456     JUMP_IF_NOT_EXC_MATCH           234 (to 468)
        458     POP_TOP                         
        460     POP_TOP                         
        462     POP_TOP                         
        464     POP_EXCEPT                      
        466     JUMP_FORWARD                    1 (to 470)
        468     RERAISE                         0
        470     LOAD_BUILD_CLASS                
        472     LOAD_CONST                      77: <CODE> NormalDist
        474     LOAD_CONST                      78: 'NormalDist'
        476     MAKE_FUNCTION                   0
        478     LOAD_CONST                      78: 'NormalDist'
        480     CALL_FUNCTION                   2
        482     STORE_NAME                      61: NormalDist
        484     LOAD_CONST                      3: None
        486     RETURN_VALUE                    
