threading.pyc (Python 3.10)
[Code]
    File Name: threading.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 8
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        'os'
        '_os'
        'sys'
        '_sys'
        '_thread'
        'functools'
        'time'
        'monotonic'
        '_time'
        '_weakrefset'
        'WeakSet'
        'itertools'
        'islice'
        '_islice'
        'count'
        '_count'
        '_collections'
        'deque'
        '_deque'
        'ImportError'
        'collections'
        '__all__'
        'start_new_thread'
        '_start_new_thread'
        'allocate_lock'
        '_allocate_lock'
        '_set_sentinel'
        'get_ident'
        'get_native_id'
        '_HAVE_THREAD_NATIVE_ID'
        'append'
        'AttributeError'
        'error'
        'ThreadError'
        'RLock'
        '_CRLock'
        'TIMEOUT_MAX'
        '_profile_hook'
        '_trace_hook'
        'setprofile'
        'getprofile'
        'settrace'
        'gettrace'
        'Lock'
        '_RLock'
        '_PyRLock'
        'Condition'
        'Semaphore'
        'BoundedSemaphore'
        'Event'
        'Barrier'
        'RuntimeError'
        'BrokenBarrierError'
        '__next__'
        '_counter'
        '_newname'
        '_active_limbo_lock'
        '_active'
        '_limbo'
        '_dangling'
        '_shutdown_locks_lock'
        'set'
        '_shutdown_locks'
        '_maintain_shutdown_locks'
        'Thread'
        '_excepthook'
        'excepthook'
        '_ExceptHookArgs'
        'ExceptHookArgs'
        'traceback'
        'print_exception'
        '_print_exception'
        'namedtuple'
        '__excepthook__'
        '_make_invoke_excepthook'
        'Timer'
        '_MainThread'
        '_DummyThread'
        'current_thread'
        'currentThread'
        'active_count'
        'activeCount'
        '_enumerate'
        'enumerate'
        '_threading_atexits'
        '_SHUTTING_DOWN'
        '_register_atexit'
        'stack_size'
        '_main_thread'
        '_shutdown'
        'main_thread'
        '_local'
        'local'
        '_threading_local'
        '_after_fork'
        'hasattr'
        'register_at_fork'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        "Thread module emulating a subset of Java's threading model."
        0
        None
        (
            'monotonic'
        )
        (
            'WeakSet'
        )
        (
            'islice'
            'count'
        )
        (
            'deque'
        )
        (
            'get_ident'
            'active_count'
            'Condition'
            'current_thread'
            'enumerate'
            'main_thread'
            'TIMEOUT_MAX'
            'Event'
            'Lock'
            'RLock'
            'Semaphore'
            'BoundedSemaphore'
            'Thread'
            'Barrier'
            'BrokenBarrierError'
            'Timer'
            'ThreadError'
            'setprofile'
            'settrace'
            'local'
            'stack_size'
            'excepthook'
            'ExceptHookArgs'
            'gettrace'
            'getprofile'
        )
        True
        'get_native_id'
        False
        [Code]
            File Name: threading.py
            Object Name: setprofile
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_profile_hook'
            [Var Names]
                'func'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Set a profile function for all threads started from the threading module.\n\n    The func will be passed to sys.setprofile() for each thread, before its\n    run() method is called.\n\n    '
                None
            [Disassembly]
                0       LOAD_FAST                       0: func
                2       STORE_GLOBAL                    0: _profile_hook
                4       LOAD_CONST                      1: None
                6       RETURN_VALUE                    
        'setprofile'
        [Code]
            File Name: threading.py
            Object Name: getprofile
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_profile_hook'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get the profiler function as set by threading.setprofile().'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _profile_hook
                2       RETURN_VALUE                    
        'getprofile'
        [Code]
            File Name: threading.py
            Object Name: settrace
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_trace_hook'
            [Var Names]
                'func'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Set a trace function for all threads started from the threading module.\n\n    The func will be passed to sys.settrace() for each thread, before its run()\n    method is called.\n\n    '
                None
            [Disassembly]
                0       LOAD_FAST                       0: func
                2       STORE_GLOBAL                    0: _trace_hook
                4       LOAD_CONST                      1: None
                6       RETURN_VALUE                    
        'settrace'
        [Code]
            File Name: threading.py
            Object Name: gettrace
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_trace_hook'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get the trace function as set by threading.settrace().'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _trace_hook
                2       RETURN_VALUE                    
        'gettrace'
        [Code]
            File Name: threading.py
            Object Name: RLock
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                '_CRLock'
                '_PyRLock'
            [Var Names]
                'args'
                'kwargs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Factory function that returns a new reentrant lock.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it again\n    without blocking; the thread must release it once for each time it has\n    acquired it.\n\n    '
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _CRLock
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               11 (to 22)
                8       LOAD_GLOBAL                     1: _PyRLock
                10      LOAD_FAST                       0: args
                12      BUILD_MAP                       0
                14      LOAD_FAST                       1: kwargs
                16      DICT_MERGE                      1
                18      CALL_FUNCTION_EX                1
                20      RETURN_VALUE                    
                22      LOAD_GLOBAL                     0: _CRLock
                24      LOAD_FAST                       0: args
                26      BUILD_MAP                       0
                28      LOAD_FAST                       1: kwargs
                30      DICT_MERGE                      1
                32      CALL_FUNCTION_EX                1
                34      RETURN_VALUE                    
        'RLock'
        [Code]
            File Name: threading.py
            Object Name: _RLock
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__repr__'
                '_at_fork_reinit'
                'acquire'
                '__enter__'
                'release'
                '__exit__'
                '_acquire_restore'
                '_release_save'
                '_is_owned'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_RLock'
                'This class implements reentrant lock objects.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it\n    again without blocking; the thread must release it once for each time it\n    has acquired it.\n\n    '
                [Code]
                    File Name: threading.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_allocate_lock'
                        '_block'
                        '_owner'
                        '_count'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _allocate_lock
                        2       CALL_FUNCTION                   0
                        4       LOAD_FAST                       0: self
                        6       STORE_ATTR                      1: _block
                        8       LOAD_CONST                      0: None
                        10      LOAD_FAST                       0: self
                        12      STORE_ATTR                      2: _owner
                        14      LOAD_CONST                      1: 0
                        16      LOAD_FAST                       0: self
                        18      STORE_ATTR                      3: _count
                        20      LOAD_CONST                      0: None
                        22      RETURN_VALUE                    
                '_RLock.__init__'
                [Code]
                    File Name: threading.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 9
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_owner'
                        '_active'
                        'name'
                        'KeyError'
                        '_block'
                        'locked'
                        '__class__'
                        '__module__'
                        '__qualname__'
                        '_count'
                        'hex'
                        'id'
                    [Var Names]
                        'self'
                        'owner'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<%s %s.%s object owner=%r count=%d at %s>'
                        'locked'
                        'unlocked'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _owner
                        4       STORE_FAST                      1: owner
                        6       SETUP_FINALLY                   7 (to 22)
                        8       LOAD_GLOBAL                     1: _active
                        10      LOAD_FAST                       1: owner
                        12      BINARY_SUBSCR                   
                        14      LOAD_ATTR                       2: name
                        16      STORE_FAST                      1: owner
                        18      POP_BLOCK                       
                        20      JUMP_FORWARD                    9 (to 40)
                        22      DUP_TOP                         
                        24      LOAD_GLOBAL                     3: KeyError
                        26      JUMP_IF_NOT_EXC_MATCH           19 (to 38)
                        28      POP_TOP                         
                        30      POP_TOP                         
                        32      POP_TOP                         
                        34      POP_EXCEPT                      
                        36      JUMP_FORWARD                    1 (to 40)
                        38      RERAISE                         0
                        40      LOAD_CONST                      1: '<%s %s.%s object owner=%r count=%d at %s>'
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       4: _block
                        46      LOAD_METHOD                     5: locked
                        48      CALL_METHOD                     0
                        50      POP_JUMP_IF_FALSE               28 (to 56)
                        52      LOAD_CONST                      2: 'locked'
                        54      JUMP_FORWARD                    1 (to 58)
                        56      LOAD_CONST                      3: 'unlocked'
                        58      LOAD_FAST                       0: self
                        60      LOAD_ATTR                       6: __class__
                        62      LOAD_ATTR                       7: __module__
                        64      LOAD_FAST                       0: self
                        66      LOAD_ATTR                       6: __class__
                        68      LOAD_ATTR                       8: __qualname__
                        70      LOAD_FAST                       1: owner
                        72      LOAD_FAST                       0: self
                        74      LOAD_ATTR                       9: _count
                        76      LOAD_GLOBAL                     10: hex
                        78      LOAD_GLOBAL                     11: id
                        80      LOAD_FAST                       0: self
                        82      CALL_FUNCTION                   1
                        84      CALL_FUNCTION                   1
                        86      BUILD_TUPLE                     6
                        88      BINARY_MODULO                   
                        90      RETURN_VALUE                    
                '_RLock.__repr__'
                [Code]
                    File Name: threading.py
                    Object Name: _at_fork_reinit
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_block'
                        '_at_fork_reinit'
                        '_owner'
                        '_count'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _block
                        4       LOAD_METHOD                     1: _at_fork_reinit
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      LOAD_FAST                       0: self
                        14      STORE_ATTR                      2: _owner
                        16      LOAD_CONST                      1: 0
                        18      LOAD_FAST                       0: self
                        20      STORE_ATTR                      3: _count
                        22      LOAD_CONST                      0: None
                        24      RETURN_VALUE                    
                '_RLock._at_fork_reinit'
                True
                -1
                [Code]
                    File Name: threading.py
                    Object Name: acquire
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'get_ident'
                        '_owner'
                        '_count'
                        '_block'
                        'acquire'
                    [Var Names]
                        'self'
                        'blocking'
                        'timeout'
                        'me'
                        'rc'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Acquire a lock, blocking or non-blocking.\n\n        When invoked without arguments: if this thread already owns the lock,\n        increment the recursion level by one, and return immediately. Otherwise,\n        if another thread owns the lock, block until the lock is unlocked. Once\n        the lock is unlocked (not owned by any thread), then grab ownership, set\n        the recursion level to one, and return. If more than one thread is\n        blocked waiting until the lock is unlocked, only one at a time will be\n        able to grab ownership of the lock. There is no return value in this\n        case.\n\n        When invoked with the blocking argument set to true, do the same thing\n        as when called without arguments, and return true.\n\n        When invoked with the blocking argument set to false, do not block. If a\n        call without an argument would block, return false immediately;\n        otherwise, do the same thing as when called without arguments, and\n        return true.\n\n        When invoked with the floating-point timeout argument set to a positive\n        value, block for at most the number of seconds specified by timeout\n        and as long as the lock cannot be acquired.  Return true if the lock has\n        been acquired, false if the timeout has elapsed.\n\n        '
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: get_ident
                        2       CALL_FUNCTION                   0
                        4       STORE_FAST                      3: me
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _owner
                        10      LOAD_FAST                       3: me
                        12      COMPARE_OP                      2 (==)
                        14      POP_JUMP_IF_FALSE               17 (to 34)
                        16      LOAD_FAST                       0: self
                        18      DUP_TOP                         
                        20      LOAD_ATTR                       2: _count
                        22      LOAD_CONST                      1: 1
                        24      INPLACE_ADD                     
                        26      ROT_TWO                         
                        28      STORE_ATTR                      2: _count
                        30      LOAD_CONST                      1: 1
                        32      RETURN_VALUE                    
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       3: _block
                        38      LOAD_METHOD                     4: acquire
                        40      LOAD_FAST                       1: blocking
                        42      LOAD_FAST                       2: timeout
                        44      CALL_METHOD                     2
                        46      STORE_FAST                      4: rc
                        48      LOAD_FAST                       4: rc
                        50      POP_JUMP_IF_FALSE               32 (to 64)
                        52      LOAD_FAST                       3: me
                        54      LOAD_FAST                       0: self
                        56      STORE_ATTR                      1: _owner
                        58      LOAD_CONST                      1: 1
                        60      LOAD_FAST                       0: self
                        62      STORE_ATTR                      2: _count
                        64      LOAD_FAST                       4: rc
                        66      RETURN_VALUE                    
                '_RLock.acquire'
                [Code]
                    File Name: threading.py
                    Object Name: release
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_owner'
                        'get_ident'
                        'RuntimeError'
                        '_count'
                        '_block'
                        'release'
                    [Var Names]
                        'self'
                        'count'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Release a lock, decrementing the recursion level.\n\n        If after the decrement it is zero, reset the lock to unlocked (not owned\n        by any thread), and if any other threads are blocked waiting for the\n        lock to become unlocked, allow exactly one of them to proceed. If after\n        the decrement the recursion level is still nonzero, the lock remains\n        locked and owned by the calling thread.\n\n        Only call this method when the calling thread owns the lock. A\n        RuntimeError is raised if this method is called when the lock is\n        unlocked.\n\n        There is no return value.\n\n        '
                        'cannot release un-acquired lock'
                        1
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _owner
                        4       LOAD_GLOBAL                     1: get_ident
                        6       CALL_FUNCTION                   0
                        8       COMPARE_OP                      3 (!=)
                        10      POP_JUMP_IF_FALSE               10 (to 20)
                        12      LOAD_GLOBAL                     2: RuntimeError
                        14      LOAD_CONST                      1: 'cannot release un-acquired lock'
                        16      CALL_FUNCTION                   1
                        18      RAISE_VARARGS                   1
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       3: _count
                        24      LOAD_CONST                      2: 1
                        26      BINARY_SUBTRACT                 
                        28      DUP_TOP                         
                        30      LOAD_FAST                       0: self
                        32      STORE_ATTR                      3: _count
                        34      STORE_FAST                      1: count
                        36      LOAD_FAST                       1: count
                        38      POP_JUMP_IF_TRUE                30 (to 60)
                        40      LOAD_CONST                      3: None
                        42      LOAD_FAST                       0: self
                        44      STORE_ATTR                      0: _owner
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       4: _block
                        50      LOAD_METHOD                     5: release
                        52      CALL_METHOD                     0
                        54      POP_TOP                         
                        56      LOAD_CONST                      3: None
                        58      RETURN_VALUE                    
                        60      LOAD_CONST                      3: None
                        62      RETURN_VALUE                    
                '_RLock.release'
                [Code]
                    File Name: threading.py
                    Object Name: __exit__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'release'
                    [Var Names]
                        'self'
                        't'
                        'v'
                        'tb'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: release
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_CONST                      0: None
                        10      RETURN_VALUE                    
                '_RLock.__exit__'
                [Code]
                    File Name: threading.py
                    Object Name: _acquire_restore
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_block'
                        'acquire'
                        '_count'
                        '_owner'
                    [Var Names]
                        'self'
                        'state'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _block
                        4       LOAD_METHOD                     1: acquire
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      LOAD_FAST                       1: state
                        12      UNPACK_SEQUENCE                 2
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: _count
                        18      LOAD_FAST                       0: self
                        20      STORE_ATTR                      3: _owner
                        22      LOAD_CONST                      0: None
                        24      RETURN_VALUE                    
                '_RLock._acquire_restore'
                [Code]
                    File Name: threading.py
                    Object Name: _release_save
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_count'
                        'RuntimeError'
                        '_owner'
                        '_block'
                        'release'
                    [Var Names]
                        'self'
                        'count'
                        'owner'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'cannot release un-acquired lock'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _count
                        4       LOAD_CONST                      1: 0
                        6       COMPARE_OP                      2 (==)
                        8       POP_JUMP_IF_FALSE               9 (to 18)
                        10      LOAD_GLOBAL                     1: RuntimeError
                        12      LOAD_CONST                      2: 'cannot release un-acquired lock'
                        14      CALL_FUNCTION                   1
                        16      RAISE_VARARGS                   1
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       0: _count
                        22      STORE_FAST                      1: count
                        24      LOAD_CONST                      1: 0
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      0: _count
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       2: _owner
                        34      STORE_FAST                      2: owner
                        36      LOAD_CONST                      0: None
                        38      LOAD_FAST                       0: self
                        40      STORE_ATTR                      2: _owner
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       3: _block
                        46      LOAD_METHOD                     4: release
                        48      CALL_METHOD                     0
                        50      POP_TOP                         
                        52      LOAD_FAST                       1: count
                        54      LOAD_FAST                       2: owner
                        56      BUILD_TUPLE                     2
                        58      RETURN_VALUE                    
                '_RLock._release_save'
                [Code]
                    File Name: threading.py
                    Object Name: _is_owned
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_owner'
                        'get_ident'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _owner
                        4       LOAD_GLOBAL                     1: get_ident
                        6       CALL_FUNCTION                   0
                        8       COMPARE_OP                      2 (==)
                        10      RETURN_VALUE                    
                '_RLock._is_owned'
                None
                (
                    True
                    -1
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_RLock'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'This class implements reentrant lock objects.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it\n    again without blocking; the thread must release it once for each time it\n    has acquired it.\n\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: '_RLock.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __repr__
                22      LOAD_CONST                      5: '_RLock.__repr__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __repr__
                28      LOAD_CONST                      6: <CODE> _at_fork_reinit
                30      LOAD_CONST                      7: '_RLock._at_fork_reinit'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: _at_fork_reinit
                36      LOAD_CONST                      23: (True, -1)
                38      LOAD_CONST                      10: <CODE> acquire
                40      LOAD_CONST                      11: '_RLock.acquire'
                42      MAKE_FUNCTION                   1
                44      STORE_NAME                      7: acquire
                46      LOAD_NAME                       7: acquire
                48      STORE_NAME                      8: __enter__
                50      LOAD_CONST                      12: <CODE> release
                52      LOAD_CONST                      13: '_RLock.release'
                54      MAKE_FUNCTION                   0
                56      STORE_NAME                      9: release
                58      LOAD_CONST                      14: <CODE> __exit__
                60      LOAD_CONST                      15: '_RLock.__exit__'
                62      MAKE_FUNCTION                   0
                64      STORE_NAME                      10: __exit__
                66      LOAD_CONST                      16: <CODE> _acquire_restore
                68      LOAD_CONST                      17: '_RLock._acquire_restore'
                70      MAKE_FUNCTION                   0
                72      STORE_NAME                      11: _acquire_restore
                74      LOAD_CONST                      18: <CODE> _release_save
                76      LOAD_CONST                      19: '_RLock._release_save'
                78      MAKE_FUNCTION                   0
                80      STORE_NAME                      12: _release_save
                82      LOAD_CONST                      20: <CODE> _is_owned
                84      LOAD_CONST                      21: '_RLock._is_owned'
                86      MAKE_FUNCTION                   0
                88      STORE_NAME                      13: _is_owned
                90      LOAD_CONST                      22: None
                92      RETURN_VALUE                    
        '_RLock'
        [Code]
            File Name: threading.py
            Object Name: Condition
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '_at_fork_reinit'
                '__enter__'
                '__exit__'
                '__repr__'
                '_release_save'
                '_acquire_restore'
                '_is_owned'
                'wait'
                'wait_for'
                'notify'
                'notify_all'
                'notifyAll'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Condition'
                'Class that implements a condition variable.\n\n    A condition variable allows one or more threads to wait until they are\n    notified by another thread.\n\n    If the lock argument is given and not None, it must be a Lock or RLock\n    object, and it is used as the underlying lock. Otherwise, a new RLock object\n    is created and used as the underlying lock.\n\n    '
                None
                [Code]
                    File Name: threading.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'RLock'
                        '_lock'
                        'acquire'
                        'release'
                        '_release_save'
                        'AttributeError'
                        '_acquire_restore'
                        '_is_owned'
                        '_deque'
                        '_waiters'
                    [Var Names]
                        'self'
                        'lock'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: lock
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_GLOBAL                     0: RLock
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      1: lock
                        14      LOAD_FAST                       1: lock
                        16      LOAD_FAST                       0: self
                        18      STORE_ATTR                      1: _lock
                        20      LOAD_FAST                       1: lock
                        22      LOAD_ATTR                       2: acquire
                        24      LOAD_FAST                       0: self
                        26      STORE_ATTR                      2: acquire
                        28      LOAD_FAST                       1: lock
                        30      LOAD_ATTR                       3: release
                        32      LOAD_FAST                       0: self
                        34      STORE_ATTR                      3: release
                        36      SETUP_FINALLY                   6 (to 50)
                        38      LOAD_FAST                       1: lock
                        40      LOAD_ATTR                       4: _release_save
                        42      LOAD_FAST                       0: self
                        44      STORE_ATTR                      4: _release_save
                        46      POP_BLOCK                       
                        48      JUMP_FORWARD                    9 (to 68)
                        50      DUP_TOP                         
                        52      LOAD_GLOBAL                     5: AttributeError
                        54      JUMP_IF_NOT_EXC_MATCH           33 (to 66)
                        56      POP_TOP                         
                        58      POP_TOP                         
                        60      POP_TOP                         
                        62      POP_EXCEPT                      
                        64      JUMP_FORWARD                    1 (to 68)
                        66      RERAISE                         0
                        68      SETUP_FINALLY                   6 (to 82)
                        70      LOAD_FAST                       1: lock
                        72      LOAD_ATTR                       6: _acquire_restore
                        74      LOAD_FAST                       0: self
                        76      STORE_ATTR                      6: _acquire_restore
                        78      POP_BLOCK                       
                        80      JUMP_FORWARD                    9 (to 100)
                        82      DUP_TOP                         
                        84      LOAD_GLOBAL                     5: AttributeError
                        86      JUMP_IF_NOT_EXC_MATCH           49 (to 98)
                        88      POP_TOP                         
                        90      POP_TOP                         
                        92      POP_TOP                         
                        94      POP_EXCEPT                      
                        96      JUMP_FORWARD                    1 (to 100)
                        98      RERAISE                         0
                        100     SETUP_FINALLY                   6 (to 114)
                        102     LOAD_FAST                       1: lock
                        104     LOAD_ATTR                       7: _is_owned
                        106     LOAD_FAST                       0: self
                        108     STORE_ATTR                      7: _is_owned
                        110     POP_BLOCK                       
                        112     JUMP_FORWARD                    9 (to 132)
                        114     DUP_TOP                         
                        116     LOAD_GLOBAL                     5: AttributeError
                        118     JUMP_IF_NOT_EXC_MATCH           65 (to 130)
                        120     POP_TOP                         
                        122     POP_TOP                         
                        124     POP_TOP                         
                        126     POP_EXCEPT                      
                        128     JUMP_FORWARD                    1 (to 132)
                        130     RERAISE                         0
                        132     LOAD_GLOBAL                     8: _deque
                        134     CALL_FUNCTION                   0
                        136     LOAD_FAST                       0: self
                        138     STORE_ATTR                      9: _waiters
                        140     LOAD_CONST                      0: None
                        142     RETURN_VALUE                    
                'Condition.__init__'
                [Code]
                    File Name: threading.py
                    Object Name: _at_fork_reinit
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_lock'
                        '_at_fork_reinit'
                        '_waiters'
                        'clear'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _lock
                        4       LOAD_METHOD                     1: _at_fork_reinit
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _waiters
                        14      LOAD_METHOD                     3: clear
                        16      CALL_METHOD                     0
                        18      POP_TOP                         
                        20      LOAD_CONST                      0: None
                        22      RETURN_VALUE                    
                'Condition._at_fork_reinit'
                [Code]
                    File Name: threading.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_lock'
                        '__enter__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _lock
                        4       LOAD_METHOD                     1: __enter__
                        6       CALL_METHOD                     0
                        8       RETURN_VALUE                    
                'Condition.__enter__'
                [Code]
                    File Name: threading.py
                    Object Name: __exit__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_lock'
                        '__exit__'
                    [Var Names]
                        'self'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _lock
                        4       LOAD_ATTR                       1: __exit__
                        6       LOAD_FAST                       1: args
                        8       CALL_FUNCTION_EX                0
                        10      RETURN_VALUE                    
                'Condition.__exit__'
                [Code]
                    File Name: threading.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_lock'
                        'len'
                        '_waiters'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<Condition(%s, %d)>'
                    [Disassembly]
                        0       LOAD_CONST                      1: '<Condition(%s, %d)>'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _lock
                        6       LOAD_GLOBAL                     1: len
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: _waiters
                        12      CALL_FUNCTION                   1
                        14      BUILD_TUPLE                     2
                        16      BINARY_MODULO                   
                        18      RETURN_VALUE                    
                'Condition.__repr__'
                [Code]
                    File Name: threading.py
                    Object Name: _release_save
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_lock'
                        'release'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _lock
                        4       LOAD_METHOD                     1: release
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                'Condition._release_save'
                [Code]
                    File Name: threading.py
                    Object Name: _acquire_restore
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_lock'
                        'acquire'
                    [Var Names]
                        'self'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _lock
                        4       LOAD_METHOD                     1: acquire
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                'Condition._acquire_restore'
                [Code]
                    File Name: threading.py
                    Object Name: _is_owned
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_lock'
                        'acquire'
                        'release'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _lock
                        4       LOAD_METHOD                     1: acquire
                        6       LOAD_CONST                      1: False
                        8       CALL_METHOD                     1
                        10      POP_JUMP_IF_FALSE               13 (to 26)
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       0: _lock
                        16      LOAD_METHOD                     2: release
                        18      CALL_METHOD                     0
                        20      POP_TOP                         
                        22      LOAD_CONST                      1: False
                        24      RETURN_VALUE                    
                        26      LOAD_CONST                      2: True
                        28      RETURN_VALUE                    
                'Condition._is_owned'
                [Code]
                    File Name: threading.py
                    Object Name: wait
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 14
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_owned'
                        'RuntimeError'
                        '_allocate_lock'
                        'acquire'
                        '_waiters'
                        'append'
                        '_release_save'
                        '_acquire_restore'
                        'remove'
                        'ValueError'
                    [Var Names]
                        'self'
                        'timeout'
                        'waiter'
                        'saved_state'
                        'gotit'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Wait until notified or until a timeout occurs.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method releases the underlying lock, and then blocks until it is\n        awakened by a notify() or notify_all() call for the same condition\n        variable in another thread, or until the optional timeout occurs. Once\n        awakened or timed out, it re-acquires the lock and returns.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        When the underlying lock is an RLock, it is not released using its\n        release() method, since this may not actually unlock the lock when it\n        was acquired multiple times recursively. Instead, an internal interface\n        of the RLock class is used, which really unlocks it even when it has\n        been recursively acquired several times. Another internal interface is\n        then used to restore the recursion level when the lock is reacquired.\n\n        '
                        'cannot wait on un-acquired lock'
                        False
                        None
                        True
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _is_owned
                        4       CALL_METHOD                     0
                        6       POP_JUMP_IF_TRUE                8 (to 16)
                        8       LOAD_GLOBAL                     1: RuntimeError
                        10      LOAD_CONST                      1: 'cannot wait on un-acquired lock'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_GLOBAL                     2: _allocate_lock
                        18      CALL_FUNCTION                   0
                        20      STORE_FAST                      2: waiter
                        22      LOAD_FAST                       2: waiter
                        24      LOAD_METHOD                     3: acquire
                        26      CALL_METHOD                     0
                        28      POP_TOP                         
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       4: _waiters
                        34      LOAD_METHOD                     5: append
                        36      LOAD_FAST                       2: waiter
                        38      CALL_METHOD                     1
                        40      POP_TOP                         
                        42      LOAD_FAST                       0: self
                        44      LOAD_METHOD                     6: _release_save
                        46      CALL_METHOD                     0
                        48      STORE_FAST                      3: saved_state
                        50      LOAD_CONST                      2: False
                        52      STORE_FAST                      4: gotit
                        54      SETUP_FINALLY                   55 (to 166)
                        56      LOAD_FAST                       1: timeout
                        58      LOAD_CONST                      3: None
                        60      IS_OP                           0 (is)
                        62      POP_JUMP_IF_FALSE               39 (to 78)
                        64      LOAD_FAST                       2: waiter
                        66      LOAD_METHOD                     3: acquire
                        68      CALL_METHOD                     0
                        70      POP_TOP                         
                        72      LOAD_CONST                      4: True
                        74      STORE_FAST                      4: gotit
                        76      JUMP_FORWARD                    16 (to 110)
                        78      LOAD_FAST                       1: timeout
                        80      LOAD_CONST                      5: 0
                        82      COMPARE_OP                      4 (>)
                        84      POP_JUMP_IF_FALSE               50 (to 100)
                        86      LOAD_FAST                       2: waiter
                        88      LOAD_METHOD                     3: acquire
                        90      LOAD_CONST                      4: True
                        92      LOAD_FAST                       1: timeout
                        94      CALL_METHOD                     2
                        96      STORE_FAST                      4: gotit
                        98      JUMP_FORWARD                    5 (to 110)
                        100     LOAD_FAST                       2: waiter
                        102     LOAD_METHOD                     3: acquire
                        104     LOAD_CONST                      2: False
                        106     CALL_METHOD                     1
                        108     STORE_FAST                      4: gotit
                        110     LOAD_FAST                       4: gotit
                        112     POP_BLOCK                       
                        114     LOAD_FAST                       0: self
                        116     LOAD_METHOD                     7: _acquire_restore
                        118     LOAD_FAST                       3: saved_state
                        120     CALL_METHOD                     1
                        122     POP_TOP                         
                        124     LOAD_FAST                       4: gotit
                        126     POP_JUMP_IF_TRUE                82 (to 164)
                        128     SETUP_FINALLY                   8 (to 146)
                        130     LOAD_FAST                       0: self
                        132     LOAD_ATTR                       4: _waiters
                        134     LOAD_METHOD                     8: remove
                        136     LOAD_FAST                       2: waiter
                        138     CALL_METHOD                     1
                        140     POP_TOP                         
                        142     POP_BLOCK                       
                        144     RETURN_VALUE                    
                        146     DUP_TOP                         
                        148     LOAD_GLOBAL                     9: ValueError
                        150     JUMP_IF_NOT_EXC_MATCH           81 (to 162)
                        152     POP_TOP                         
                        154     POP_TOP                         
                        156     POP_TOP                         
                        158     POP_EXCEPT                      
                        160     RETURN_VALUE                    
                        162     RERAISE                         0
                        164     RETURN_VALUE                    
                        166     LOAD_FAST                       0: self
                        168     LOAD_METHOD                     7: _acquire_restore
                        170     LOAD_FAST                       3: saved_state
                        172     CALL_METHOD                     1
                        174     POP_TOP                         
                        176     LOAD_FAST                       4: gotit
                        178     POP_JUMP_IF_TRUE                108 (to 216)
                        180     SETUP_FINALLY                   8 (to 198)
                        182     LOAD_FAST                       0: self
                        184     LOAD_ATTR                       4: _waiters
                        186     LOAD_METHOD                     8: remove
                        188     LOAD_FAST                       2: waiter
                        190     CALL_METHOD                     1
                        192     POP_TOP                         
                        194     POP_BLOCK                       
                        196     RERAISE                         0
                        198     DUP_TOP                         
                        200     LOAD_GLOBAL                     9: ValueError
                        202     JUMP_IF_NOT_EXC_MATCH           107 (to 214)
                        204     POP_TOP                         
                        206     POP_TOP                         
                        208     POP_TOP                         
                        210     POP_EXCEPT                      
                        212     RERAISE                         0
                        214     RERAISE                         0
                        216     RERAISE                         0
                'Condition.wait'
                [Code]
                    File Name: threading.py
                    Object Name: wait_for
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_time'
                        'wait'
                    [Var Names]
                        'self'
                        'predicate'
                        'timeout'
                        'endtime'
                        'waittime'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Wait until a condition evaluates to True.\n\n        predicate should be a callable which result will be interpreted as a\n        boolean value.  A timeout may be provided giving the maximum time to\n        wait.\n\n        '
                        None
                        0
                    [Disassembly]
                        0       LOAD_CONST                      1: None
                        2       STORE_FAST                      3: endtime
                        4       LOAD_FAST                       2: timeout
                        6       STORE_FAST                      4: waittime
                        8       LOAD_FAST                       1: predicate
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      5: result
                        14      LOAD_FAST                       5: result
                        16      POP_JUMP_IF_TRUE                45 (to 90)
                        18      LOAD_FAST                       4: waittime
                        20      LOAD_CONST                      1: None
                        22      IS_OP                           1 (is not)
                        24      POP_JUMP_IF_FALSE               35 (to 70)
                        26      LOAD_FAST                       3: endtime
                        28      LOAD_CONST                      1: None
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               23 (to 46)
                        34      LOAD_GLOBAL                     0: _time
                        36      CALL_FUNCTION                   0
                        38      LOAD_FAST                       4: waittime
                        40      BINARY_ADD                      
                        42      STORE_FAST                      3: endtime
                        44      JUMP_FORWARD                    12 (to 70)
                        46      LOAD_FAST                       3: endtime
                        48      LOAD_GLOBAL                     0: _time
                        50      CALL_FUNCTION                   0
                        52      BINARY_SUBTRACT                 
                        54      STORE_FAST                      4: waittime
                        56      LOAD_FAST                       4: waittime
                        58      LOAD_CONST                      2: 0
                        60      COMPARE_OP                      1 (<=)
                        62      POP_JUMP_IF_FALSE               35 (to 70)
                        64      NOP                             
                        66      LOAD_FAST                       5: result
                        68      RETURN_VALUE                    
                        70      LOAD_FAST                       0: self
                        72      LOAD_METHOD                     1: wait
                        74      LOAD_FAST                       4: waittime
                        76      CALL_METHOD                     1
                        78      POP_TOP                         
                        80      LOAD_FAST                       1: predicate
                        82      CALL_FUNCTION                   0
                        84      STORE_FAST                      5: result
                        86      LOAD_FAST                       5: result
                        88      POP_JUMP_IF_FALSE               9 (to 18)
                        90      LOAD_FAST                       5: result
                        92      RETURN_VALUE                    
                'Condition.wait_for'
                1
                [Code]
                    File Name: threading.py
                    Object Name: notify
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_owned'
                        'RuntimeError'
                        '_waiters'
                        'release'
                        'remove'
                        'ValueError'
                    [Var Names]
                        'self'
                        'n'
                        'waiters'
                        'waiter'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Wake up one or more threads waiting on this condition, if any.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method wakes up at most n of the threads waiting for the condition\n        variable; it is a no-op if no threads are waiting.\n\n        '
                        'cannot notify on un-acquired lock'
                        0
                        1
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _is_owned
                        4       CALL_METHOD                     0
                        6       POP_JUMP_IF_TRUE                8 (to 16)
                        8       LOAD_GLOBAL                     1: RuntimeError
                        10      LOAD_CONST                      1: 'cannot notify on un-acquired lock'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       2: _waiters
                        20      STORE_FAST                      2: waiters
                        22      LOAD_FAST                       2: waiters
                        24      POP_JUMP_IF_FALSE               66 (to 132)
                        26      LOAD_FAST                       1: n
                        28      LOAD_CONST                      2: 0
                        30      COMPARE_OP                      4 (>)
                        32      POP_JUMP_IF_FALSE               68 (to 136)
                        34      LOAD_FAST                       2: waiters
                        36      LOAD_CONST                      2: 0
                        38      BINARY_SUBSCR                   
                        40      STORE_FAST                      3: waiter
                        42      SETUP_FINALLY                   6 (to 56)
                        44      LOAD_FAST                       3: waiter
                        46      LOAD_METHOD                     3: release
                        48      CALL_METHOD                     0
                        50      POP_TOP                         
                        52      POP_BLOCK                       
                        54      JUMP_FORWARD                    9 (to 74)
                        56      DUP_TOP                         
                        58      LOAD_GLOBAL                     1: RuntimeError
                        60      JUMP_IF_NOT_EXC_MATCH           36 (to 72)
                        62      POP_TOP                         
                        64      POP_TOP                         
                        66      POP_TOP                         
                        68      POP_EXCEPT                      
                        70      JUMP_FORWARD                    5 (to 82)
                        72      RERAISE                         0
                        74      LOAD_FAST                       1: n
                        76      LOAD_CONST                      3: 1
                        78      INPLACE_SUBTRACT                
                        80      STORE_FAST                      1: n
                        82      SETUP_FINALLY                   7 (to 98)
                        84      LOAD_FAST                       2: waiters
                        86      LOAD_METHOD                     4: remove
                        88      LOAD_FAST                       3: waiter
                        90      CALL_METHOD                     1
                        92      POP_TOP                         
                        94      POP_BLOCK                       
                        96      JUMP_FORWARD                    9 (to 116)
                        98      DUP_TOP                         
                        100     LOAD_GLOBAL                     5: ValueError
                        102     JUMP_IF_NOT_EXC_MATCH           57 (to 114)
                        104     POP_TOP                         
                        106     POP_TOP                         
                        108     POP_TOP                         
                        110     POP_EXCEPT                      
                        112     JUMP_FORWARD                    1 (to 116)
                        114     RERAISE                         0
                        116     LOAD_FAST                       2: waiters
                        118     POP_JUMP_IF_FALSE               70 (to 140)
                        120     LOAD_FAST                       1: n
                        122     LOAD_CONST                      2: 0
                        124     COMPARE_OP                      4 (>)
                        126     POP_JUMP_IF_TRUE                17 (to 34)
                        128     LOAD_CONST                      4: None
                        130     RETURN_VALUE                    
                        132     LOAD_CONST                      4: None
                        134     RETURN_VALUE                    
                        136     LOAD_CONST                      4: None
                        138     RETURN_VALUE                    
                        140     LOAD_CONST                      4: None
                        142     RETURN_VALUE                    
                'Condition.notify'
                [Code]
                    File Name: threading.py
                    Object Name: notify_all
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'notify'
                        'len'
                        '_waiters'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Wake up all threads waiting on this condition.\n\n        If the calling thread has not acquired the lock when this method\n        is called, a RuntimeError is raised.\n\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: notify
                        4       LOAD_GLOBAL                     1: len
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: _waiters
                        10      CALL_FUNCTION                   1
                        12      CALL_METHOD                     1
                        14      POP_TOP                         
                        16      LOAD_CONST                      1: None
                        18      RETURN_VALUE                    
                'Condition.notify_all'
                [Code]
                    File Name: threading.py
                    Object Name: notifyAll
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'warnings'
                        'warn'
                        'DeprecationWarning'
                        'notify_all'
                    [Var Names]
                        'self'
                        'warnings'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Wake up all threads waiting on this condition.\n\n        This method is deprecated, use notify_all() instead.\n\n        '
                        0
                        None
                        'notifyAll() is deprecated, use notify_all() instead'
                        2
                        (
                            'stacklevel'
                        )
                    [Disassembly]
                        0       LOAD_CONST                      1: 0
                        2       LOAD_CONST                      2: None
                        4       IMPORT_NAME                     0: warnings
                        6       STORE_FAST                      1: warnings
                        8       LOAD_FAST                       1: warnings
                        10      LOAD_ATTR                       1: warn
                        12      LOAD_CONST                      3: 'notifyAll() is deprecated, use notify_all() instead'
                        14      LOAD_GLOBAL                     2: DeprecationWarning
                        16      LOAD_CONST                      4: 2
                        18      LOAD_CONST                      5: ('stacklevel',)
                        20      CALL_FUNCTION_KW                3
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     3: notify_all
                        28      CALL_METHOD                     0
                        30      POP_TOP                         
                        32      LOAD_CONST                      2: None
                        34      RETURN_VALUE                    
                'Condition.notifyAll'
                (
                    None
                )
                (
                    1
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Condition'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Class that implements a condition variable.\n\n    A condition variable allows one or more threads to wait until they are\n    notified by another thread.\n\n    If the lock argument is given and not None, it must be a Lock or RLock\n    object, and it is used as the underlying lock. Otherwise, a new RLock object\n    is created and used as the underlying lock.\n\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      30: (None,)
                14      LOAD_CONST                      3: <CODE> __init__
                16      LOAD_CONST                      4: 'Condition.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      5: <CODE> _at_fork_reinit
                24      LOAD_CONST                      6: 'Condition._at_fork_reinit'
                26      MAKE_FUNCTION                   0
                28      STORE_NAME                      5: _at_fork_reinit
                30      LOAD_CONST                      7: <CODE> __enter__
                32      LOAD_CONST                      8: 'Condition.__enter__'
                34      MAKE_FUNCTION                   0
                36      STORE_NAME                      6: __enter__
                38      LOAD_CONST                      9: <CODE> __exit__
                40      LOAD_CONST                      10: 'Condition.__exit__'
                42      MAKE_FUNCTION                   0
                44      STORE_NAME                      7: __exit__
                46      LOAD_CONST                      11: <CODE> __repr__
                48      LOAD_CONST                      12: 'Condition.__repr__'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      8: __repr__
                54      LOAD_CONST                      13: <CODE> _release_save
                56      LOAD_CONST                      14: 'Condition._release_save'
                58      MAKE_FUNCTION                   0
                60      STORE_NAME                      9: _release_save
                62      LOAD_CONST                      15: <CODE> _acquire_restore
                64      LOAD_CONST                      16: 'Condition._acquire_restore'
                66      MAKE_FUNCTION                   0
                68      STORE_NAME                      10: _acquire_restore
                70      LOAD_CONST                      17: <CODE> _is_owned
                72      LOAD_CONST                      18: 'Condition._is_owned'
                74      MAKE_FUNCTION                   0
                76      STORE_NAME                      11: _is_owned
                78      LOAD_CONST                      30: (None,)
                80      LOAD_CONST                      19: <CODE> wait
                82      LOAD_CONST                      20: 'Condition.wait'
                84      MAKE_FUNCTION                   1
                86      STORE_NAME                      12: wait
                88      LOAD_CONST                      30: (None,)
                90      LOAD_CONST                      21: <CODE> wait_for
                92      LOAD_CONST                      22: 'Condition.wait_for'
                94      MAKE_FUNCTION                   1
                96      STORE_NAME                      13: wait_for
                98      LOAD_CONST                      31: (1,)
                100     LOAD_CONST                      24: <CODE> notify
                102     LOAD_CONST                      25: 'Condition.notify'
                104     MAKE_FUNCTION                   1
                106     STORE_NAME                      14: notify
                108     LOAD_CONST                      26: <CODE> notify_all
                110     LOAD_CONST                      27: 'Condition.notify_all'
                112     MAKE_FUNCTION                   0
                114     STORE_NAME                      15: notify_all
                116     LOAD_CONST                      28: <CODE> notifyAll
                118     LOAD_CONST                      29: 'Condition.notifyAll'
                120     MAKE_FUNCTION                   0
                122     STORE_NAME                      16: notifyAll
                124     LOAD_CONST                      2: None
                126     RETURN_VALUE                    
        'Condition'
        [Code]
            File Name: threading.py
            Object Name: Semaphore
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'acquire'
                '__enter__'
                'release'
                '__exit__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Semaphore'
                'This class implements semaphore objects.\n\n    Semaphores manage a counter representing the number of release() calls minus\n    the number of acquire() calls, plus an initial value. The acquire() method\n    blocks if necessary until it can return without making the counter\n    negative. If not given, value defaults to 1.\n\n    '
                1
                [Code]
                    File Name: threading.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ValueError'
                        'Condition'
                        'Lock'
                        '_cond'
                        '_value'
                    [Var Names]
                        'self'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'semaphore initial value must be >= 0'
                    [Disassembly]
                        0       LOAD_FAST                       1: value
                        2       LOAD_CONST                      1: 0
                        4       COMPARE_OP                      0 (<)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: ValueError
                        10      LOAD_CONST                      2: 'semaphore initial value must be >= 0'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_GLOBAL                     1: Condition
                        18      LOAD_GLOBAL                     2: Lock
                        20      CALL_FUNCTION                   0
                        22      CALL_FUNCTION                   1
                        24      LOAD_FAST                       0: self
                        26      STORE_ATTR                      3: _cond
                        28      LOAD_FAST                       1: value
                        30      LOAD_FAST                       0: self
                        32      STORE_ATTR                      4: _value
                        34      LOAD_CONST                      0: None
                        36      RETURN_VALUE                    
                'Semaphore.__init__'
                True
                None
                [Code]
                    File Name: threading.py
                    Object Name: acquire
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ValueError'
                        '_cond'
                        '_value'
                        '_time'
                        'wait'
                    [Var Names]
                        'self'
                        'blocking'
                        'timeout'
                        'rc'
                        'endtime'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Acquire a semaphore, decrementing the internal counter by one.\n\n        When invoked without arguments: if the internal counter is larger than\n        zero on entry, decrement it by one and return immediately. If it is zero\n        on entry, block, waiting until some other thread has called release() to\n        make it larger than zero. This is done with proper interlocking so that\n        if multiple acquire() calls are blocked, release() will wake exactly one\n        of them up. The implementation may pick one at random, so the order in\n        which blocked threads are awakened should not be relied on. There is no\n        return value in this case.\n\n        When invoked with blocking set to true, do the same thing as when called\n        without arguments, and return true.\n\n        When invoked with blocking set to false, do not block. If a call without\n        an argument would block, return false immediately; otherwise, do the\n        same thing as when called without arguments, and return true.\n\n        When invoked with a timeout other than None, it will block for at\n        most timeout seconds.  If acquire does not complete successfully in\n        that interval, return false.  Return true otherwise.\n\n        '
                        None
                        "can't specify timeout for non-blocking acquire"
                        False
                        0
                        1
                        True
                    [Disassembly]
                        0       LOAD_FAST                       1: blocking
                        2       POP_JUMP_IF_TRUE                10 (to 20)
                        4       LOAD_FAST                       2: timeout
                        6       LOAD_CONST                      1: None
                        8       IS_OP                           1 (is not)
                        10      POP_JUMP_IF_FALSE               10 (to 20)
                        12      LOAD_GLOBAL                     0: ValueError
                        14      LOAD_CONST                      2: "can't specify timeout for non-blocking acquire"
                        16      CALL_FUNCTION                   1
                        18      RAISE_VARARGS                   1
                        20      LOAD_CONST                      3: False
                        22      STORE_FAST                      3: rc
                        24      LOAD_CONST                      1: None
                        26      STORE_FAST                      4: endtime
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       1: _cond
                        32      SETUP_WITH                      77 (to 188)
                        34      POP_TOP                         
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       2: _value
                        40      LOAD_CONST                      4: 0
                        42      COMPARE_OP                      2 (==)
                        44      POP_JUMP_IF_FALSE               61 (to 122)
                        46      LOAD_FAST                       1: blocking
                        48      POP_JUMP_IF_TRUE                26 (to 52)
                        50      JUMP_FORWARD                    52 (to 156)
                        52      LOAD_FAST                       2: timeout
                        54      LOAD_CONST                      1: None
                        56      IS_OP                           1 (is not)
                        58      POP_JUMP_IF_FALSE               50 (to 100)
                        60      LOAD_FAST                       4: endtime
                        62      LOAD_CONST                      1: None
                        64      IS_OP                           0 (is)
                        66      POP_JUMP_IF_FALSE               40 (to 80)
                        68      LOAD_GLOBAL                     3: _time
                        70      CALL_FUNCTION                   0
                        72      LOAD_FAST                       2: timeout
                        74      BINARY_ADD                      
                        76      STORE_FAST                      4: endtime
                        78      JUMP_FORWARD                    10 (to 100)
                        80      LOAD_FAST                       4: endtime
                        82      LOAD_GLOBAL                     3: _time
                        84      CALL_FUNCTION                   0
                        86      BINARY_SUBTRACT                 
                        88      STORE_FAST                      2: timeout
                        90      LOAD_FAST                       2: timeout
                        92      LOAD_CONST                      4: 0
                        94      COMPARE_OP                      1 (<=)
                        96      POP_JUMP_IF_FALSE               50 (to 100)
                        98      JUMP_FORWARD                    36 (to 172)
                        100     LOAD_FAST                       0: self
                        102     LOAD_ATTR                       1: _cond
                        104     LOAD_METHOD                     4: wait
                        106     LOAD_FAST                       2: timeout
                        108     CALL_METHOD                     1
                        110     POP_TOP                         
                        112     LOAD_FAST                       0: self
                        114     LOAD_ATTR                       2: _value
                        116     LOAD_CONST                      4: 0
                        118     COMPARE_OP                      2 (==)
                        120     POP_JUMP_IF_TRUE                23 (to 46)
                        122     LOAD_FAST                       0: self
                        124     DUP_TOP                         
                        126     LOAD_ATTR                       2: _value
                        128     LOAD_CONST                      5: 1
                        130     INPLACE_SUBTRACT                
                        132     ROT_TWO                         
                        134     STORE_ATTR                      2: _value
                        136     LOAD_CONST                      6: True
                        138     STORE_FAST                      3: rc
                        140     POP_BLOCK                       
                        142     LOAD_CONST                      1: None
                        144     DUP_TOP                         
                        146     DUP_TOP                         
                        148     CALL_FUNCTION                   3
                        150     POP_TOP                         
                        152     LOAD_FAST                       3: rc
                        154     RETURN_VALUE                    
                        156     POP_BLOCK                       
                        158     LOAD_CONST                      1: None
                        160     DUP_TOP                         
                        162     DUP_TOP                         
                        164     CALL_FUNCTION                   3
                        166     POP_TOP                         
                        168     LOAD_FAST                       3: rc
                        170     RETURN_VALUE                    
                        172     POP_BLOCK                       
                        174     LOAD_CONST                      1: None
                        176     DUP_TOP                         
                        178     DUP_TOP                         
                        180     CALL_FUNCTION                   3
                        182     POP_TOP                         
                        184     LOAD_FAST                       3: rc
                        186     RETURN_VALUE                    
                        188     WITH_EXCEPT_START               
                        190     POP_JUMP_IF_TRUE                97 (to 194)
                        192     RERAISE                         1
                        194     POP_TOP                         
                        196     POP_TOP                         
                        198     POP_TOP                         
                        200     POP_EXCEPT                      
                        202     POP_TOP                         
                        204     LOAD_FAST                       3: rc
                        206     RETURN_VALUE                    
                'Semaphore.acquire'
                [Code]
                    File Name: threading.py
                    Object Name: release
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ValueError'
                        '_cond'
                        '_value'
                        'range'
                        'notify'
                    [Var Names]
                        'self'
                        'n'
                        'i'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Release a semaphore, incrementing the internal counter by one or more.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        '
                        1
                        'n must be one or more'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: n
                        2       LOAD_CONST                      1: 1
                        4       COMPARE_OP                      0 (<)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: ValueError
                        10      LOAD_CONST                      2: 'n must be one or more'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       1: _cond
                        20      SETUP_WITH                      28 (to 78)
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      DUP_TOP                         
                        28      LOAD_ATTR                       2: _value
                        30      LOAD_FAST                       1: n
                        32      INPLACE_ADD                     
                        34      ROT_TWO                         
                        36      STORE_ATTR                      2: _value
                        38      LOAD_GLOBAL                     3: range
                        40      LOAD_FAST                       1: n
                        42      CALL_FUNCTION                   1
                        44      GET_ITER                        
                        46      FOR_ITER                        7 (to 62)
                        48      STORE_FAST                      2: i
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       1: _cond
                        54      LOAD_METHOD                     4: notify
                        56      CALL_METHOD                     0
                        58      POP_TOP                         
                        60      JUMP_ABSOLUTE                   23 (to 46)
                        62      POP_BLOCK                       
                        64      LOAD_CONST                      3: None
                        66      DUP_TOP                         
                        68      DUP_TOP                         
                        70      CALL_FUNCTION                   3
                        72      POP_TOP                         
                        74      LOAD_CONST                      3: None
                        76      RETURN_VALUE                    
                        78      WITH_EXCEPT_START               
                        80      POP_JUMP_IF_TRUE                42 (to 84)
                        82      RERAISE                         1
                        84      POP_TOP                         
                        86      POP_TOP                         
                        88      POP_TOP                         
                        90      POP_EXCEPT                      
                        92      POP_TOP                         
                        94      LOAD_CONST                      3: None
                        96      RETURN_VALUE                    
                'Semaphore.release'
                [Code]
                    File Name: threading.py
                    Object Name: __exit__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'release'
                    [Var Names]
                        'self'
                        't'
                        'v'
                        'tb'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: release
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_CONST                      0: None
                        10      RETURN_VALUE                    
                'Semaphore.__exit__'
                (
                    1
                )
                (
                    True
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Semaphore'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'This class implements semaphore objects.\n\n    Semaphores manage a counter representing the number of release() calls minus\n    the number of acquire() calls, plus an initial value. The acquire() method\n    blocks if necessary until it can return without making the counter\n    negative. If not given, value defaults to 1.\n\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      13: (1,)
                14      LOAD_CONST                      3: <CODE> __init__
                16      LOAD_CONST                      4: 'Semaphore.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      14: (True, None)
                24      LOAD_CONST                      7: <CODE> acquire
                26      LOAD_CONST                      8: 'Semaphore.acquire'
                28      MAKE_FUNCTION                   1
                30      STORE_NAME                      5: acquire
                32      LOAD_NAME                       5: acquire
                34      STORE_NAME                      6: __enter__
                36      LOAD_CONST                      13: (1,)
                38      LOAD_CONST                      9: <CODE> release
                40      LOAD_CONST                      10: 'Semaphore.release'
                42      MAKE_FUNCTION                   1
                44      STORE_NAME                      7: release
                46      LOAD_CONST                      11: <CODE> __exit__
                48      LOAD_CONST                      12: 'Semaphore.__exit__'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      8: __exit__
                54      LOAD_CONST                      6: None
                56      RETURN_VALUE                    
        'Semaphore'
        [Code]
            File Name: threading.py
            Object Name: BoundedSemaphore
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'release'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'BoundedSemaphore'
                "Implements a bounded semaphore.\n\n    A bounded semaphore checks to make sure its current value doesn't exceed its\n    initial value. If it does, ValueError is raised. In most situations\n    semaphores are used to guard resources with limited capacity.\n\n    If the semaphore is released too many times it's a sign of a bug. If not\n    given, value defaults to 1.\n\n    Like regular semaphores, bounded semaphores manage a counter representing\n    the number of release() calls minus the number of acquire() calls, plus an\n    initial value. The acquire() method blocks if necessary until it can return\n    without making the counter negative. If not given, value defaults to 1.\n\n    "
                1
                [Code]
                    File Name: threading.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Semaphore'
                        '__init__'
                        '_initial_value'
                    [Var Names]
                        'self'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Semaphore
                        2       LOAD_METHOD                     1: __init__
                        4       LOAD_FAST                       0: self
                        6       LOAD_FAST                       1: value
                        8       CALL_METHOD                     2
                        10      POP_TOP                         
                        12      LOAD_FAST                       1: value
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: _initial_value
                        18      LOAD_CONST                      0: None
                        20      RETURN_VALUE                    
                'BoundedSemaphore.__init__'
                [Code]
                    File Name: threading.py
                    Object Name: release
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ValueError'
                        '_cond'
                        '_value'
                        '_initial_value'
                        'range'
                        'notify'
                    [Var Names]
                        'self'
                        'n'
                        'i'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Release a semaphore, incrementing the internal counter by one or more.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        If the number of releases exceeds the number of acquires,\n        raise a ValueError.\n\n        '
                        1
                        'n must be one or more'
                        'Semaphore released too many times'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: n
                        2       LOAD_CONST                      1: 1
                        4       COMPARE_OP                      0 (<)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: ValueError
                        10      LOAD_CONST                      2: 'n must be one or more'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       1: _cond
                        20      SETUP_WITH                      40 (to 102)
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       2: _value
                        28      LOAD_FAST                       1: n
                        30      BINARY_ADD                      
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       3: _initial_value
                        36      COMPARE_OP                      4 (>)
                        38      POP_JUMP_IF_FALSE               24 (to 48)
                        40      LOAD_GLOBAL                     0: ValueError
                        42      LOAD_CONST                      3: 'Semaphore released too many times'
                        44      CALL_FUNCTION                   1
                        46      RAISE_VARARGS                   1
                        48      LOAD_FAST                       0: self
                        50      DUP_TOP                         
                        52      LOAD_ATTR                       2: _value
                        54      LOAD_FAST                       1: n
                        56      INPLACE_ADD                     
                        58      ROT_TWO                         
                        60      STORE_ATTR                      2: _value
                        62      LOAD_GLOBAL                     4: range
                        64      LOAD_FAST                       1: n
                        66      CALL_FUNCTION                   1
                        68      GET_ITER                        
                        70      FOR_ITER                        7 (to 86)
                        72      STORE_FAST                      2: i
                        74      LOAD_FAST                       0: self
                        76      LOAD_ATTR                       1: _cond
                        78      LOAD_METHOD                     5: notify
                        80      CALL_METHOD                     0
                        82      POP_TOP                         
                        84      JUMP_ABSOLUTE                   35 (to 70)
                        86      POP_BLOCK                       
                        88      LOAD_CONST                      4: None
                        90      DUP_TOP                         
                        92      DUP_TOP                         
                        94      CALL_FUNCTION                   3
                        96      POP_TOP                         
                        98      LOAD_CONST                      4: None
                        100     RETURN_VALUE                    
                        102     WITH_EXCEPT_START               
                        104     POP_JUMP_IF_TRUE                54 (to 108)
                        106     RERAISE                         1
                        108     POP_TOP                         
                        110     POP_TOP                         
                        112     POP_TOP                         
                        114     POP_EXCEPT                      
                        116     POP_TOP                         
                        118     LOAD_CONST                      4: None
                        120     RETURN_VALUE                    
                'BoundedSemaphore.release'
                None
                (
                    1
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'BoundedSemaphore'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Implements a bounded semaphore.\n\n    A bounded semaphore checks to make sure its current value doesn't exceed its\n    initial value. If it does, ValueError is raised. In most situations\n    semaphores are used to guard resources with limited capacity.\n\n    If the semaphore is released too many times it's a sign of a bug. If not\n    given, value defaults to 1.\n\n    Like regular semaphores, bounded semaphores manage a counter representing\n    the number of release() calls minus the number of acquire() calls, plus an\n    initial value. The acquire() method blocks if necessary until it can return\n    without making the counter negative. If not given, value defaults to 1.\n\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      8: (1,)
                14      LOAD_CONST                      3: <CODE> __init__
                16      LOAD_CONST                      4: 'BoundedSemaphore.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      8: (1,)
                24      LOAD_CONST                      5: <CODE> release
                26      LOAD_CONST                      6: 'BoundedSemaphore.release'
                28      MAKE_FUNCTION                   1
                30      STORE_NAME                      5: release
                32      LOAD_CONST                      7: None
                34      RETURN_VALUE                    
        'BoundedSemaphore'
        [Code]
            File Name: threading.py
            Object Name: Event
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '_at_fork_reinit'
                'is_set'
                'isSet'
                'set'
                'clear'
                'wait'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Event'
                'Class implementing event objects.\n\n    Events manage a flag that can be set to true with the set() method and reset\n    to false with the clear() method. The wait() method blocks until the flag is\n    true.  The flag is initially false.\n\n    '
                [Code]
                    File Name: threading.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Condition'
                        'Lock'
                        '_cond'
                        '_flag'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Condition
                        2       LOAD_GLOBAL                     1: Lock
                        4       CALL_FUNCTION                   0
                        6       CALL_FUNCTION                   1
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      2: _cond
                        12      LOAD_CONST                      1: False
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      3: _flag
                        18      LOAD_CONST                      0: None
                        20      RETURN_VALUE                    
                'Event.__init__'
                [Code]
                    File Name: threading.py
                    Object Name: _at_fork_reinit
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_cond'
                        '_at_fork_reinit'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _cond
                        4       LOAD_METHOD                     1: _at_fork_reinit
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                'Event._at_fork_reinit'
                [Code]
                    File Name: threading.py
                    Object Name: is_set
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_flag'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return true if and only if the internal flag is true.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _flag
                        4       RETURN_VALUE                    
                'Event.is_set'
                [Code]
                    File Name: threading.py
                    Object Name: isSet
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'warnings'
                        'warn'
                        'DeprecationWarning'
                        'is_set'
                    [Var Names]
                        'self'
                        'warnings'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return true if and only if the internal flag is true.\n\n        This method is deprecated, use is_set() instead.\n\n        '
                        0
                        None
                        'isSet() is deprecated, use is_set() instead'
                        2
                        (
                            'stacklevel'
                        )
                    [Disassembly]
                        0       LOAD_CONST                      1: 0
                        2       LOAD_CONST                      2: None
                        4       IMPORT_NAME                     0: warnings
                        6       STORE_FAST                      1: warnings
                        8       LOAD_FAST                       1: warnings
                        10      LOAD_ATTR                       1: warn
                        12      LOAD_CONST                      3: 'isSet() is deprecated, use is_set() instead'
                        14      LOAD_GLOBAL                     2: DeprecationWarning
                        16      LOAD_CONST                      4: 2
                        18      LOAD_CONST                      5: ('stacklevel',)
                        20      CALL_FUNCTION_KW                3
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     3: is_set
                        28      CALL_METHOD                     0
                        30      RETURN_VALUE                    
                'Event.isSet'
                [Code]
                    File Name: threading.py
                    Object Name: set
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_cond'
                        '_flag'
                        'notify_all'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Set the internal flag to true.\n\n        All threads waiting for it to become true are awakened. Threads\n        that call wait() once the flag is true will not block at all.\n\n        '
                        True
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _cond
                        4       SETUP_WITH                      17 (to 40)
                        6       POP_TOP                         
                        8       LOAD_CONST                      1: True
                        10      LOAD_FAST                       0: self
                        12      STORE_ATTR                      1: _flag
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       0: _cond
                        18      LOAD_METHOD                     2: notify_all
                        20      CALL_METHOD                     0
                        22      POP_TOP                         
                        24      POP_BLOCK                       
                        26      LOAD_CONST                      2: None
                        28      DUP_TOP                         
                        30      DUP_TOP                         
                        32      CALL_FUNCTION                   3
                        34      POP_TOP                         
                        36      LOAD_CONST                      2: None
                        38      RETURN_VALUE                    
                        40      WITH_EXCEPT_START               
                        42      POP_JUMP_IF_TRUE                23 (to 46)
                        44      RERAISE                         1
                        46      POP_TOP                         
                        48      POP_TOP                         
                        50      POP_TOP                         
                        52      POP_EXCEPT                      
                        54      POP_TOP                         
                        56      LOAD_CONST                      2: None
                        58      RETURN_VALUE                    
                'Event.set'
                [Code]
                    File Name: threading.py
                    Object Name: clear
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_cond'
                        '_flag'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Reset the internal flag to false.\n\n        Subsequently, threads calling wait() will block until set() is called to\n        set the internal flag to true again.\n\n        '
                        False
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _cond
                        4       SETUP_WITH                      12 (to 30)
                        6       POP_TOP                         
                        8       LOAD_CONST                      1: False
                        10      LOAD_FAST                       0: self
                        12      STORE_ATTR                      1: _flag
                        14      POP_BLOCK                       
                        16      LOAD_CONST                      2: None
                        18      DUP_TOP                         
                        20      DUP_TOP                         
                        22      CALL_FUNCTION                   3
                        24      POP_TOP                         
                        26      LOAD_CONST                      2: None
                        28      RETURN_VALUE                    
                        30      WITH_EXCEPT_START               
                        32      POP_JUMP_IF_TRUE                18 (to 36)
                        34      RERAISE                         1
                        36      POP_TOP                         
                        38      POP_TOP                         
                        40      POP_TOP                         
                        42      POP_EXCEPT                      
                        44      POP_TOP                         
                        46      LOAD_CONST                      2: None
                        48      RETURN_VALUE                    
                'Event.clear'
                None
                [Code]
                    File Name: threading.py
                    Object Name: wait
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_cond'
                        '_flag'
                        'wait'
                    [Var Names]
                        'self'
                        'timeout'
                        'signaled'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Block until the internal flag is true.\n\n        If the internal flag is true on entry, return immediately. Otherwise,\n        block until another thread calls set() to set the flag to true, or until\n        the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        This method returns the internal flag on exit, so it will always return\n        True except if a timeout is given and the operation times out.\n\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _cond
                        4       SETUP_WITH                      21 (to 48)
                        6       POP_TOP                         
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: _flag
                        12      STORE_FAST                      2: signaled
                        14      LOAD_FAST                       2: signaled
                        16      POP_JUMP_IF_TRUE                15 (to 30)
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       0: _cond
                        22      LOAD_METHOD                     2: wait
                        24      LOAD_FAST                       1: timeout
                        26      CALL_METHOD                     1
                        28      STORE_FAST                      2: signaled
                        30      LOAD_FAST                       2: signaled
                        32      POP_BLOCK                       
                        34      ROT_TWO                         
                        36      LOAD_CONST                      1: None
                        38      DUP_TOP                         
                        40      DUP_TOP                         
                        42      CALL_FUNCTION                   3
                        44      POP_TOP                         
                        46      RETURN_VALUE                    
                        48      WITH_EXCEPT_START               
                        50      POP_JUMP_IF_TRUE                27 (to 54)
                        52      RERAISE                         1
                        54      POP_TOP                         
                        56      POP_TOP                         
                        58      POP_TOP                         
                        60      POP_EXCEPT                      
                        62      POP_TOP                         
                        64      LOAD_CONST                      1: None
                        66      RETURN_VALUE                    
                'Event.wait'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Event'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Class implementing event objects.\n\n    Events manage a flag that can be set to true with the set() method and reset\n    to false with the clear() method. The wait() method blocks until the flag is\n    true.  The flag is initially false.\n\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'Event.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> _at_fork_reinit
                22      LOAD_CONST                      5: 'Event._at_fork_reinit'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: _at_fork_reinit
                28      LOAD_CONST                      6: <CODE> is_set
                30      LOAD_CONST                      7: 'Event.is_set'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: is_set
                36      LOAD_CONST                      8: <CODE> isSet
                38      LOAD_CONST                      9: 'Event.isSet'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: isSet
                44      LOAD_CONST                      10: <CODE> set
                46      LOAD_CONST                      11: 'Event.set'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      8: set
                52      LOAD_CONST                      12: <CODE> clear
                54      LOAD_CONST                      13: 'Event.clear'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      9: clear
                60      LOAD_CONST                      17: (None,)
                62      LOAD_CONST                      15: <CODE> wait
                64      LOAD_CONST                      16: 'Event.wait'
                66      MAKE_FUNCTION                   1
                68      STORE_NAME                      10: wait
                70      LOAD_CONST                      14: None
                72      RETURN_VALUE                    
        'Event'
        [Code]
            File Name: threading.py
            Object Name: Barrier
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'wait'
                '_enter'
                '_release'
                '_wait'
                '_exit'
                'reset'
                'abort'
                '_break'
                'property'
                'parties'
                'n_waiting'
                'broken'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Barrier'
                "Implements a Barrier.\n\n    Useful for synchronizing a fixed number of threads at known synchronization\n    points.  Threads block on 'wait()' and are simultaneously awoken once they\n    have all made that call.\n\n    "
                None
                [Code]
                    File Name: threading.py
                    Object Name: __init__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Condition'
                        'Lock'
                        '_cond'
                        '_action'
                        '_timeout'
                        '_parties'
                        '_state'
                        '_count'
                    [Var Names]
                        'self'
                        'parties'
                        'action'
                        'timeout'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Create a barrier, initialised to 'parties' threads.\n\n        'action' is a callable which, when supplied, will be called by one of\n        the threads after they have all entered the barrier and just prior to\n        releasing them all. If a 'timeout' is provided, it is used as the\n        default for all subsequent 'wait()' calls.\n\n        "
                        0
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Condition
                        2       LOAD_GLOBAL                     1: Lock
                        4       CALL_FUNCTION                   0
                        6       CALL_FUNCTION                   1
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      2: _cond
                        12      LOAD_FAST                       2: action
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      3: _action
                        18      LOAD_FAST                       3: timeout
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      4: _timeout
                        24      LOAD_FAST                       1: parties
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      5: _parties
                        30      LOAD_CONST                      1: 0
                        32      LOAD_FAST                       0: self
                        34      STORE_ATTR                      6: _state
                        36      LOAD_CONST                      1: 0
                        38      LOAD_FAST                       0: self
                        40      STORE_ATTR                      7: _count
                        42      LOAD_CONST                      2: None
                        44      RETURN_VALUE                    
                'Barrier.__init__'
                [Code]
                    File Name: threading.py
                    Object Name: wait
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_timeout'
                        '_cond'
                        '_enter'
                        '_count'
                        '_parties'
                        '_release'
                        '_wait'
                        '_exit'
                    [Var Names]
                        'self'
                        'timeout'
                        'index'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Wait for the barrier.\n\n        When the specified number of threads have started waiting, they are all\n        simultaneously awoken. If an 'action' was provided for the barrier, one\n        of the threads will have executed that callback prior to returning.\n        Returns an individual index number from 0 to 'parties-1'.\n\n        "
                        None
                        1
                    [Disassembly]
                        0       LOAD_FAST                       1: timeout
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       0: _timeout
                        12      STORE_FAST                      1: timeout
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _cond
                        18      SETUP_WITH                      66 (to 152)
                        20      POP_TOP                         
                        22      LOAD_FAST                       0: self
                        24      LOAD_METHOD                     2: _enter
                        26      CALL_METHOD                     0
                        28      POP_TOP                         
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       3: _count
                        34      STORE_FAST                      2: index
                        36      LOAD_FAST                       0: self
                        38      DUP_TOP                         
                        40      LOAD_ATTR                       3: _count
                        42      LOAD_CONST                      2: 1
                        44      INPLACE_ADD                     
                        46      ROT_TWO                         
                        48      STORE_ATTR                      3: _count
                        50      SETUP_FINALLY                   38 (to 128)
                        52      LOAD_FAST                       2: index
                        54      LOAD_CONST                      2: 1
                        56      BINARY_ADD                      
                        58      LOAD_FAST                       0: self
                        60      LOAD_ATTR                       4: _parties
                        62      COMPARE_OP                      2 (==)
                        64      POP_JUMP_IF_FALSE               38 (to 76)
                        66      LOAD_FAST                       0: self
                        68      LOAD_METHOD                     5: _release
                        70      CALL_METHOD                     0
                        72      POP_TOP                         
                        74      JUMP_FORWARD                    5 (to 86)
                        76      LOAD_FAST                       0: self
                        78      LOAD_METHOD                     6: _wait
                        80      LOAD_FAST                       1: timeout
                        82      CALL_METHOD                     1
                        84      POP_TOP                         
                        86      LOAD_FAST                       2: index
                        88      POP_BLOCK                       
                        90      LOAD_FAST                       0: self
                        92      DUP_TOP                         
                        94      LOAD_ATTR                       3: _count
                        96      LOAD_CONST                      2: 1
                        98      INPLACE_SUBTRACT                
                        100     ROT_TWO                         
                        102     STORE_ATTR                      3: _count
                        104     LOAD_FAST                       0: self
                        106     LOAD_METHOD                     7: _exit
                        108     CALL_METHOD                     0
                        110     POP_TOP                         
                        112     POP_BLOCK                       
                        114     ROT_TWO                         
                        116     LOAD_CONST                      1: None
                        118     DUP_TOP                         
                        120     DUP_TOP                         
                        122     CALL_FUNCTION                   3
                        124     POP_TOP                         
                        126     RETURN_VALUE                    
                        128     LOAD_FAST                       0: self
                        130     DUP_TOP                         
                        132     LOAD_ATTR                       3: _count
                        134     LOAD_CONST                      2: 1
                        136     INPLACE_SUBTRACT                
                        138     ROT_TWO                         
                        140     STORE_ATTR                      3: _count
                        142     LOAD_FAST                       0: self
                        144     LOAD_METHOD                     7: _exit
                        146     CALL_METHOD                     0
                        148     POP_TOP                         
                        150     RERAISE                         0
                        152     WITH_EXCEPT_START               
                        154     POP_JUMP_IF_TRUE                79 (to 158)
                        156     RERAISE                         1
                        158     POP_TOP                         
                        160     POP_TOP                         
                        162     POP_TOP                         
                        164     POP_EXCEPT                      
                        166     POP_TOP                         
                        168     LOAD_CONST                      1: None
                        170     RETURN_VALUE                    
                'Barrier.wait'
                [Code]
                    File Name: threading.py
                    Object Name: _enter
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_state'
                        '_cond'
                        'wait'
                        'BrokenBarrierError'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            -1
                            1
                        )
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _state
                        4       LOAD_CONST                      1: (-1, 1)
                        6       CONTAINS_OP                     0 (in)
                        8       POP_JUMP_IF_FALSE               15 (to 30)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: _cond
                        14      LOAD_METHOD                     2: wait
                        16      CALL_METHOD                     0
                        18      POP_TOP                         
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       0: _state
                        24      LOAD_CONST                      1: (-1, 1)
                        26      CONTAINS_OP                     0 (in)
                        28      POP_JUMP_IF_TRUE                5 (to 10)
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       0: _state
                        34      LOAD_CONST                      2: 0
                        36      COMPARE_OP                      0 (<)
                        38      POP_JUMP_IF_FALSE               22 (to 44)
                        40      LOAD_GLOBAL                     3: BrokenBarrierError
                        42      RAISE_VARARGS                   1
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       0: _state
                        48      LOAD_CONST                      2: 0
                        50      COMPARE_OP                      2 (==)
                        52      POP_JUMP_IF_TRUE                29 (to 58)
                        54      LOAD_ASSERTION_ERROR            
                        56      RAISE_VARARGS                   1
                        58      LOAD_CONST                      0: None
                        60      RETURN_VALUE                    
                'Barrier._enter'
                [Code]
                    File Name: threading.py
                    Object Name: _release
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_action'
                        '_state'
                        '_cond'
                        'notify_all'
                        '_break'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                    [Disassembly]
                        0       SETUP_FINALLY                   18 (to 38)
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _action
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     0: _action
                        12      CALL_METHOD                     0
                        14      POP_TOP                         
                        16      LOAD_CONST                      1: 1
                        18      LOAD_FAST                       0: self
                        20      STORE_ATTR                      1: _state
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       2: _cond
                        26      LOAD_METHOD                     3: notify_all
                        28      CALL_METHOD                     0
                        30      POP_TOP                         
                        32      POP_BLOCK                       
                        34      LOAD_CONST                      0: None
                        36      RETURN_VALUE                    
                        38      POP_TOP                         
                        40      POP_TOP                         
                        42      POP_TOP                         
                        44      LOAD_FAST                       0: self
                        46      LOAD_METHOD                     4: _break
                        48      CALL_METHOD                     0
                        50      POP_TOP                         
                        52      RAISE_VARARGS                   0
                'Barrier._release'
                [Code]
                    File Name: threading.py
                    Object Name: _wait
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_cond'
                        'wait_for'
                        '_break'
                        'BrokenBarrierError'
                        '_state'
                    [Var Names]
                        'self'
                        'timeout'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        [Code]
                            File Name: threading.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 2
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '_state'
                            [Var Names]
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                                0
                            [Disassembly]
                                0       LOAD_DEREF                      0: self
                                2       LOAD_ATTR                       0: _state
                                4       LOAD_CONST                      1: 0
                                6       COMPARE_OP                      3 (!=)
                                8       RETURN_VALUE                    
                        'Barrier._wait.<locals>.<lambda>'
                        0
                        1
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_ATTR                       0: _cond
                        4       LOAD_METHOD                     1: wait_for
                        6       LOAD_CLOSURE                    0: self
                        8       BUILD_TUPLE                     1
                        10      LOAD_CONST                      1: <CODE> <lambda>
                        12      LOAD_CONST                      2: 'Barrier._wait.<locals>.<lambda>'
                        14      MAKE_FUNCTION                   8
                        16      LOAD_FAST                       1: timeout
                        18      CALL_METHOD                     2
                        20      POP_JUMP_IF_TRUE                17 (to 34)
                        22      LOAD_DEREF                      0: self
                        24      LOAD_METHOD                     2: _break
                        26      CALL_METHOD                     0
                        28      POP_TOP                         
                        30      LOAD_GLOBAL                     3: BrokenBarrierError
                        32      RAISE_VARARGS                   1
                        34      LOAD_DEREF                      0: self
                        36      LOAD_ATTR                       4: _state
                        38      LOAD_CONST                      3: 0
                        40      COMPARE_OP                      0 (<)
                        42      POP_JUMP_IF_FALSE               24 (to 48)
                        44      LOAD_GLOBAL                     3: BrokenBarrierError
                        46      RAISE_VARARGS                   1
                        48      LOAD_DEREF                      0: self
                        50      LOAD_ATTR                       4: _state
                        52      LOAD_CONST                      4: 1
                        54      COMPARE_OP                      2 (==)
                        56      POP_JUMP_IF_TRUE                31 (to 62)
                        58      LOAD_ASSERTION_ERROR            
                        60      RAISE_VARARGS                   1
                        62      LOAD_CONST                      0: None
                        64      RETURN_VALUE                    
                'Barrier._wait'
                [Code]
                    File Name: threading.py
                    Object Name: _exit
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_count'
                        '_state'
                        '_cond'
                        'notify_all'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        (
                            -1
                            1
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _count
                        4       LOAD_CONST                      1: 0
                        6       COMPARE_OP                      2 (==)
                        8       POP_JUMP_IF_FALSE               20 (to 40)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: _state
                        14      LOAD_CONST                      2: (-1, 1)
                        16      CONTAINS_OP                     0 (in)
                        18      POP_JUMP_IF_FALSE               22 (to 44)
                        20      LOAD_CONST                      1: 0
                        22      LOAD_FAST                       0: self
                        24      STORE_ATTR                      1: _state
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       2: _cond
                        30      LOAD_METHOD                     3: notify_all
                        32      CALL_METHOD                     0
                        34      POP_TOP                         
                        36      LOAD_CONST                      0: None
                        38      RETURN_VALUE                    
                        40      LOAD_CONST                      0: None
                        42      RETURN_VALUE                    
                        44      LOAD_CONST                      0: None
                        46      RETURN_VALUE                    
                'Barrier._exit'
                [Code]
                    File Name: threading.py
                    Object Name: reset
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_cond'
                        '_count'
                        '_state'
                        'notify_all'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Reset the barrier to the initial state.\n\n        Any threads currently waiting will get the BrokenBarrier exception\n        raised.\n\n        '
                        0
                        -1
                        -2
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _cond
                        4       SETUP_WITH                      40 (to 86)
                        6       POP_TOP                         
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: _count
                        12      LOAD_CONST                      1: 0
                        14      COMPARE_OP                      4 (>)
                        16      POP_JUMP_IF_FALSE               27 (to 54)
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       2: _state
                        22      LOAD_CONST                      1: 0
                        24      COMPARE_OP                      2 (==)
                        26      POP_JUMP_IF_FALSE               18 (to 36)
                        28      LOAD_CONST                      2: -1
                        30      LOAD_FAST                       0: self
                        32      STORE_ATTR                      2: _state
                        34      JUMP_FORWARD                    12 (to 60)
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       2: _state
                        40      LOAD_CONST                      3: -2
                        42      COMPARE_OP                      2 (==)
                        44      POP_JUMP_IF_FALSE               26 (to 52)
                        46      LOAD_CONST                      2: -1
                        48      LOAD_FAST                       0: self
                        50      STORE_ATTR                      2: _state
                        52      JUMP_FORWARD                    3 (to 60)
                        54      LOAD_CONST                      1: 0
                        56      LOAD_FAST                       0: self
                        58      STORE_ATTR                      2: _state
                        60      LOAD_FAST                       0: self
                        62      LOAD_ATTR                       0: _cond
                        64      LOAD_METHOD                     3: notify_all
                        66      CALL_METHOD                     0
                        68      POP_TOP                         
                        70      POP_BLOCK                       
                        72      LOAD_CONST                      4: None
                        74      DUP_TOP                         
                        76      DUP_TOP                         
                        78      CALL_FUNCTION                   3
                        80      POP_TOP                         
                        82      LOAD_CONST                      4: None
                        84      RETURN_VALUE                    
                        86      WITH_EXCEPT_START               
                        88      POP_JUMP_IF_TRUE                46 (to 92)
                        90      RERAISE                         1
                        92      POP_TOP                         
                        94      POP_TOP                         
                        96      POP_TOP                         
                        98      POP_EXCEPT                      
                        100     POP_TOP                         
                        102     LOAD_CONST                      4: None
                        104     RETURN_VALUE                    
                'Barrier.reset'
                [Code]
                    File Name: threading.py
                    Object Name: abort
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_cond'
                        '_break'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Place the barrier into a 'broken' state.\n\n        Useful in case of error.  Any currently waiting threads and threads\n        attempting to 'wait()' will have BrokenBarrierError raised.\n\n        "
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _cond
                        4       SETUP_WITH                      13 (to 32)
                        6       POP_TOP                         
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     1: _break
                        12      CALL_METHOD                     0
                        14      POP_TOP                         
                        16      POP_BLOCK                       
                        18      LOAD_CONST                      1: None
                        20      DUP_TOP                         
                        22      DUP_TOP                         
                        24      CALL_FUNCTION                   3
                        26      POP_TOP                         
                        28      LOAD_CONST                      1: None
                        30      RETURN_VALUE                    
                        32      WITH_EXCEPT_START               
                        34      POP_JUMP_IF_TRUE                19 (to 38)
                        36      RERAISE                         1
                        38      POP_TOP                         
                        40      POP_TOP                         
                        42      POP_TOP                         
                        44      POP_EXCEPT                      
                        46      POP_TOP                         
                        48      LOAD_CONST                      1: None
                        50      RETURN_VALUE                    
                'Barrier.abort'
                [Code]
                    File Name: threading.py
                    Object Name: _break
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_state'
                        '_cond'
                        'notify_all'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        -2
                    [Disassembly]
                        0       LOAD_CONST                      1: -2
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _state
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _cond
                        10      LOAD_METHOD                     2: notify_all
                        12      CALL_METHOD                     0
                        14      POP_TOP                         
                        16      LOAD_CONST                      0: None
                        18      RETURN_VALUE                    
                'Barrier._break'
                [Code]
                    File Name: threading.py
                    Object Name: parties
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_parties'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the number of threads required to trip the barrier.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _parties
                        4       RETURN_VALUE                    
                'Barrier.parties'
                [Code]
                    File Name: threading.py
                    Object Name: n_waiting
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_state'
                        '_count'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the number of threads currently waiting at the barrier.'
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _state
                        4       LOAD_CONST                      1: 0
                        6       COMPARE_OP                      2 (==)
                        8       POP_JUMP_IF_FALSE               8 (to 16)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: _count
                        14      RETURN_VALUE                    
                        16      LOAD_CONST                      1: 0
                        18      RETURN_VALUE                    
                'Barrier.n_waiting'
                [Code]
                    File Name: threading.py
                    Object Name: broken
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_state'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if the barrier is in a broken state.'
                        -2
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _state
                        4       LOAD_CONST                      1: -2
                        6       COMPARE_OP                      2 (==)
                        8       RETURN_VALUE                    
                'Barrier.broken'
                (
                    None
                    None
                )
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Barrier'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Implements a Barrier.\n\n    Useful for synchronizing a fixed number of threads at known synchronization\n    points.  Threads block on 'wait()' and are simultaneously awoken once they\n    have all made that call.\n\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      27: (None, None)
                14      LOAD_CONST                      3: <CODE> __init__
                16      LOAD_CONST                      4: 'Barrier.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      28: (None,)
                24      LOAD_CONST                      5: <CODE> wait
                26      LOAD_CONST                      6: 'Barrier.wait'
                28      MAKE_FUNCTION                   1
                30      STORE_NAME                      5: wait
                32      LOAD_CONST                      7: <CODE> _enter
                34      LOAD_CONST                      8: 'Barrier._enter'
                36      MAKE_FUNCTION                   0
                38      STORE_NAME                      6: _enter
                40      LOAD_CONST                      9: <CODE> _release
                42      LOAD_CONST                      10: 'Barrier._release'
                44      MAKE_FUNCTION                   0
                46      STORE_NAME                      7: _release
                48      LOAD_CONST                      11: <CODE> _wait
                50      LOAD_CONST                      12: 'Barrier._wait'
                52      MAKE_FUNCTION                   0
                54      STORE_NAME                      8: _wait
                56      LOAD_CONST                      13: <CODE> _exit
                58      LOAD_CONST                      14: 'Barrier._exit'
                60      MAKE_FUNCTION                   0
                62      STORE_NAME                      9: _exit
                64      LOAD_CONST                      15: <CODE> reset
                66      LOAD_CONST                      16: 'Barrier.reset'
                68      MAKE_FUNCTION                   0
                70      STORE_NAME                      10: reset
                72      LOAD_CONST                      17: <CODE> abort
                74      LOAD_CONST                      18: 'Barrier.abort'
                76      MAKE_FUNCTION                   0
                78      STORE_NAME                      11: abort
                80      LOAD_CONST                      19: <CODE> _break
                82      LOAD_CONST                      20: 'Barrier._break'
                84      MAKE_FUNCTION                   0
                86      STORE_NAME                      12: _break
                88      LOAD_NAME                       13: property
                90      LOAD_CONST                      21: <CODE> parties
                92      LOAD_CONST                      22: 'Barrier.parties'
                94      MAKE_FUNCTION                   0
                96      CALL_FUNCTION                   1
                98      STORE_NAME                      14: parties
                100     LOAD_NAME                       13: property
                102     LOAD_CONST                      23: <CODE> n_waiting
                104     LOAD_CONST                      24: 'Barrier.n_waiting'
                106     MAKE_FUNCTION                   0
                108     CALL_FUNCTION                   1
                110     STORE_NAME                      15: n_waiting
                112     LOAD_NAME                       13: property
                114     LOAD_CONST                      25: <CODE> broken
                116     LOAD_CONST                      26: 'Barrier.broken'
                118     MAKE_FUNCTION                   0
                120     CALL_FUNCTION                   1
                122     STORE_NAME                      16: broken
                124     LOAD_CONST                      2: None
                126     RETURN_VALUE                    
        'Barrier'
        [Code]
            File Name: threading.py
            Object Name: BrokenBarrierError
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'BrokenBarrierError'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'BrokenBarrierError'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: None
                10      RETURN_VALUE                    
        'BrokenBarrierError'
        1
        [Code]
            File Name: threading.py
            Object Name: _newname
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_counter'
            [Var Names]
                'name_template'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_FAST                       0: name_template
                2       LOAD_GLOBAL                     0: _counter
                4       CALL_FUNCTION                   0
                6       BINARY_MODULO                   
                8       RETURN_VALUE                    
        '_newname'
        [Code]
            File Name: threading.py
            Object Name: _maintain_shutdown_locks
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_shutdown_locks'
                'difference_update'
            [Var Names]
                'to_remove'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "\n    Drop any shutdown locks that don't correspond to running threads anymore.\n\n    Calling this from time to time avoids an ever-growing _shutdown_locks\n    set when Thread objects are not joined explicitly. See bpo-37788.\n\n    This must be called with _shutdown_locks_lock acquired.\n    "
                [Code]
                    File Name: threading.py
                    Object Name: <listcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        'locked'
                    [Var Names]
                        '.0'
                        'lock'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        8 (to 22)
                        6       STORE_FAST                      1: lock
                        8       LOAD_FAST                       1: lock
                        10      LOAD_METHOD                     0: locked
                        12      CALL_METHOD                     0
                        14      POP_JUMP_IF_TRUE                2 (to 4)
                        16      LOAD_FAST                       1: lock
                        18      LIST_APPEND                     2
                        20      JUMP_ABSOLUTE                   2 (to 4)
                        22      RETURN_VALUE                    
                '_maintain_shutdown_locks.<locals>.<listcomp>'
                None
            [Disassembly]
                0       LOAD_CONST                      1: <CODE> <listcomp>
                2       LOAD_CONST                      2: '_maintain_shutdown_locks.<locals>.<listcomp>'
                4       MAKE_FUNCTION                   0
                6       LOAD_GLOBAL                     0: _shutdown_locks
                8       GET_ITER                        
                10      CALL_FUNCTION                   1
                12      STORE_FAST                      0: to_remove
                14      LOAD_GLOBAL                     0: _shutdown_locks
                16      LOAD_METHOD                     1: difference_update
                18      LOAD_FAST                       0: to_remove
                20      CALL_METHOD                     1
                22      POP_TOP                         
                24      LOAD_CONST                      3: None
                26      RETURN_VALUE                    
        '_maintain_shutdown_locks'
        [Code]
            File Name: threading.py
            Object Name: Thread
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '_initialized'
                '__init__'
                '_reset_internal_locks'
                '__repr__'
                'start'
                'run'
                '_bootstrap'
                '_set_ident'
                '_HAVE_THREAD_NATIVE_ID'
                '_set_native_id'
                '_set_tstate_lock'
                '_bootstrap_inner'
                '_stop'
                '_delete'
                'join'
                '_wait_for_tstate_lock'
                'property'
                'name'
                'setter'
                'ident'
                'native_id'
                'is_alive'
                'daemon'
                'isDaemon'
                'setDaemon'
                'getName'
                'setName'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Thread'
                'A class that represents a thread of control.\n\n    This class can be safely subclassed in a limited fashion. There are two ways\n    to specify the activity: by passing a callable object to the constructor, or\n    by overriding the run() method in a subclass.\n\n    '
                False
                None
                (
                )
                (
                    'daemon'
                )
                [Code]
                    File Name: threading.py
                    Object Name: __init__
                    Arg Count: 6
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 8
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'str'
                        '_newname'
                        '__name__'
                        'AttributeError'
                        '_target'
                        '_name'
                        '_args'
                        '_kwargs'
                        '_daemonic'
                        'current_thread'
                        'daemon'
                        '_ident'
                        '_HAVE_THREAD_NATIVE_ID'
                        '_native_id'
                        '_tstate_lock'
                        'Event'
                        '_started'
                        '_is_stopped'
                        '_initialized'
                        '_sys'
                        'stderr'
                        '_stderr'
                        '_make_invoke_excepthook'
                        '_invoke_excepthook'
                        '_dangling'
                        'add'
                    [Var Names]
                        'self'
                        'group'
                        'target'
                        'name'
                        'args'
                        'kwargs'
                        'daemon'
                        'target_name'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'This constructor should always be called with keyword arguments. Arguments are:\n\n        *group* should be None; reserved for future extension when a ThreadGroup\n        class is implemented.\n\n        *target* is the callable object to be invoked by the run()\n        method. Defaults to None, meaning nothing is called.\n\n        *name* is the thread name. By default, a unique name is constructed of\n        the form "Thread-N" where N is a small decimal number.\n\n        *args* is the argument tuple for the target invocation. Defaults to ().\n\n        *kwargs* is a dictionary of keyword arguments for the target\n        invocation. Defaults to {}.\n\n        If a subclass overrides the constructor, it must make sure to invoke\n        the base class constructor (Thread.__init__()) before doing anything\n        else to the thread.\n\n        '
                        None
                        'group argument must be None for now'
                        'Thread-%d'
                        ' ('
                        ')'
                        False
                        True
                    [Disassembly]
                        0       LOAD_FAST                       1: group
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_TRUE                8 (to 16)
                        8       LOAD_ASSERTION_ERROR            
                        10      LOAD_CONST                      2: 'group argument must be None for now'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_FAST                       5: kwargs
                        18      LOAD_CONST                      1: None
                        20      IS_OP                           0 (is)
                        22      POP_JUMP_IF_FALSE               14 (to 28)
                        24      BUILD_MAP                       0
                        26      STORE_FAST                      5: kwargs
                        28      LOAD_FAST                       3: name
                        30      POP_JUMP_IF_FALSE               21 (to 42)
                        32      LOAD_GLOBAL                     0: str
                        34      LOAD_FAST                       3: name
                        36      CALL_FUNCTION                   1
                        38      STORE_FAST                      3: name
                        40      JUMP_FORWARD                    31 (to 104)
                        42      LOAD_GLOBAL                     1: _newname
                        44      LOAD_CONST                      3: 'Thread-%d'
                        46      CALL_FUNCTION                   1
                        48      STORE_FAST                      3: name
                        50      LOAD_FAST                       2: target
                        52      LOAD_CONST                      1: None
                        54      IS_OP                           1 (is not)
                        56      POP_JUMP_IF_FALSE               52 (to 104)
                        58      SETUP_FINALLY                   13 (to 86)
                        60      LOAD_FAST                       2: target
                        62      LOAD_ATTR                       2: __name__
                        64      STORE_FAST                      7: target_name
                        66      LOAD_FAST                       3: name
                        68      LOAD_CONST                      4: ' ('
                        70      LOAD_FAST                       7: target_name
                        72      FORMAT_VALUE                    0 (FVC_NONE)
                        74      LOAD_CONST                      5: ')'
                        76      BUILD_STRING                    3
                        78      INPLACE_ADD                     
                        80      STORE_FAST                      3: name
                        82      POP_BLOCK                       
                        84      JUMP_FORWARD                    9 (to 104)
                        86      DUP_TOP                         
                        88      LOAD_GLOBAL                     3: AttributeError
                        90      JUMP_IF_NOT_EXC_MATCH           51 (to 102)
                        92      POP_TOP                         
                        94      POP_TOP                         
                        96      POP_TOP                         
                        98      POP_EXCEPT                      
                        100     JUMP_FORWARD                    1 (to 104)
                        102     RERAISE                         0
                        104     LOAD_FAST                       2: target
                        106     LOAD_FAST                       0: self
                        108     STORE_ATTR                      4: _target
                        110     LOAD_FAST                       3: name
                        112     LOAD_FAST                       0: self
                        114     STORE_ATTR                      5: _name
                        116     LOAD_FAST                       4: args
                        118     LOAD_FAST                       0: self
                        120     STORE_ATTR                      6: _args
                        122     LOAD_FAST                       5: kwargs
                        124     LOAD_FAST                       0: self
                        126     STORE_ATTR                      7: _kwargs
                        128     LOAD_FAST                       6: daemon
                        130     LOAD_CONST                      1: None
                        132     IS_OP                           1 (is not)
                        134     POP_JUMP_IF_FALSE               72 (to 144)
                        136     LOAD_FAST                       6: daemon
                        138     LOAD_FAST                       0: self
                        140     STORE_ATTR                      8: _daemonic
                        142     JUMP_FORWARD                    5 (to 154)
                        144     LOAD_GLOBAL                     9: current_thread
                        146     CALL_FUNCTION                   0
                        148     LOAD_ATTR                       10: daemon
                        150     LOAD_FAST                       0: self
                        152     STORE_ATTR                      8: _daemonic
                        154     LOAD_CONST                      1: None
                        156     LOAD_FAST                       0: self
                        158     STORE_ATTR                      11: _ident
                        160     LOAD_GLOBAL                     12: _HAVE_THREAD_NATIVE_ID
                        162     POP_JUMP_IF_FALSE               85 (to 170)
                        164     LOAD_CONST                      1: None
                        166     LOAD_FAST                       0: self
                        168     STORE_ATTR                      13: _native_id
                        170     LOAD_CONST                      1: None
                        172     LOAD_FAST                       0: self
                        174     STORE_ATTR                      14: _tstate_lock
                        176     LOAD_GLOBAL                     15: Event
                        178     CALL_FUNCTION                   0
                        180     LOAD_FAST                       0: self
                        182     STORE_ATTR                      16: _started
                        184     LOAD_CONST                      6: False
                        186     LOAD_FAST                       0: self
                        188     STORE_ATTR                      17: _is_stopped
                        190     LOAD_CONST                      7: True
                        192     LOAD_FAST                       0: self
                        194     STORE_ATTR                      18: _initialized
                        196     LOAD_GLOBAL                     19: _sys
                        198     LOAD_ATTR                       20: stderr
                        200     LOAD_FAST                       0: self
                        202     STORE_ATTR                      21: _stderr
                        204     LOAD_GLOBAL                     22: _make_invoke_excepthook
                        206     CALL_FUNCTION                   0
                        208     LOAD_FAST                       0: self
                        210     STORE_ATTR                      23: _invoke_excepthook
                        212     LOAD_GLOBAL                     24: _dangling
                        214     LOAD_METHOD                     25: add
                        216     LOAD_FAST                       0: self
                        218     CALL_METHOD                     1
                        220     POP_TOP                         
                        222     LOAD_CONST                      1: None
                        224     RETURN_VALUE                    
                'Thread.__init__'
                [Code]
                    File Name: threading.py
                    Object Name: _reset_internal_locks
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_started'
                        '_at_fork_reinit'
                        '_tstate_lock'
                        'acquire'
                        '_is_stopped'
                    [Var Names]
                        'self'
                        'is_alive'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _started
                        4       LOAD_METHOD                     1: _at_fork_reinit
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      LOAD_FAST                       1: is_alive
                        12      POP_JUMP_IF_FALSE               26 (to 52)
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _tstate_lock
                        18      LOAD_CONST                      0: None
                        20      IS_OP                           1 (is not)
                        22      POP_JUMP_IF_FALSE               24 (to 48)
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       2: _tstate_lock
                        28      LOAD_METHOD                     1: _at_fork_reinit
                        30      CALL_METHOD                     0
                        32      POP_TOP                         
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       2: _tstate_lock
                        38      LOAD_METHOD                     3: acquire
                        40      CALL_METHOD                     0
                        42      POP_TOP                         
                        44      LOAD_CONST                      0: None
                        46      RETURN_VALUE                    
                        48      LOAD_CONST                      0: None
                        50      RETURN_VALUE                    
                        52      LOAD_CONST                      1: True
                        54      LOAD_FAST                       0: self
                        56      STORE_ATTR                      4: _is_stopped
                        58      LOAD_CONST                      0: None
                        60      LOAD_FAST                       0: self
                        62      STORE_ATTR                      2: _tstate_lock
                        64      LOAD_CONST                      0: None
                        66      RETURN_VALUE                    
                'Thread._reset_internal_locks'
                [Code]
                    File Name: threading.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_initialized'
                        '_started'
                        'is_set'
                        'is_alive'
                        '_is_stopped'
                        '_daemonic'
                        '_ident'
                        '__class__'
                        '__name__'
                        '_name'
                    [Var Names]
                        'self'
                        'status'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Thread.__init__() was not called'
                        'initial'
                        'started'
                        'stopped'
                        ' daemon'
                        ' %s'
                        '<%s(%s, %s)>'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _initialized
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_ASSERTION_ERROR            
                        8       LOAD_CONST                      1: 'Thread.__init__() was not called'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_CONST                      2: 'initial'
                        16      STORE_FAST                      1: status
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       1: _started
                        22      LOAD_METHOD                     2: is_set
                        24      CALL_METHOD                     0
                        26      POP_JUMP_IF_FALSE               16 (to 32)
                        28      LOAD_CONST                      3: 'started'
                        30      STORE_FAST                      1: status
                        32      LOAD_FAST                       0: self
                        34      LOAD_METHOD                     3: is_alive
                        36      CALL_METHOD                     0
                        38      POP_TOP                         
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       4: _is_stopped
                        44      POP_JUMP_IF_FALSE               25 (to 50)
                        46      LOAD_CONST                      4: 'stopped'
                        48      STORE_FAST                      1: status
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       5: _daemonic
                        54      POP_JUMP_IF_FALSE               32 (to 64)
                        56      LOAD_FAST                       1: status
                        58      LOAD_CONST                      5: ' daemon'
                        60      INPLACE_ADD                     
                        62      STORE_FAST                      1: status
                        64      LOAD_FAST                       0: self
                        66      LOAD_ATTR                       6: _ident
                        68      LOAD_CONST                      0: None
                        70      IS_OP                           1 (is not)
                        72      POP_JUMP_IF_FALSE               44 (to 88)
                        74      LOAD_FAST                       1: status
                        76      LOAD_CONST                      6: ' %s'
                        78      LOAD_FAST                       0: self
                        80      LOAD_ATTR                       6: _ident
                        82      BINARY_MODULO                   
                        84      INPLACE_ADD                     
                        86      STORE_FAST                      1: status
                        88      LOAD_CONST                      7: '<%s(%s, %s)>'
                        90      LOAD_FAST                       0: self
                        92      LOAD_ATTR                       7: __class__
                        94      LOAD_ATTR                       8: __name__
                        96      LOAD_FAST                       0: self
                        98      LOAD_ATTR                       9: _name
                        100     LOAD_FAST                       1: status
                        102     BUILD_TUPLE                     3
                        104     BINARY_MODULO                   
                        106     RETURN_VALUE                    
                'Thread.__repr__'
                [Code]
                    File Name: threading.py
                    Object Name: start
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 11
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_initialized'
                        'RuntimeError'
                        '_started'
                        'is_set'
                        '_active_limbo_lock'
                        '_limbo'
                        '_start_new_thread'
                        '_bootstrap'
                        'Exception'
                        'wait'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Start the thread's activity.\n\n        It must be called at most once per thread object. It arranges for the\n        object's run() method to be invoked in a separate thread of control.\n\n        This method will raise a RuntimeError if called more than once on the\n        same thread object.\n\n        "
                        'thread.__init__() not called'
                        'threads can only be started once'
                        None
                        (
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _initialized
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_GLOBAL                     1: RuntimeError
                        8       LOAD_CONST                      1: 'thread.__init__() not called'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _started
                        18      LOAD_METHOD                     3: is_set
                        20      CALL_METHOD                     0
                        22      POP_JUMP_IF_FALSE               16 (to 32)
                        24      LOAD_GLOBAL                     1: RuntimeError
                        26      LOAD_CONST                      2: 'threads can only be started once'
                        28      CALL_FUNCTION                   1
                        30      RAISE_VARARGS                   1
                        32      LOAD_GLOBAL                     4: _active_limbo_lock
                        34      SETUP_WITH                      12 (to 60)
                        36      POP_TOP                         
                        38      LOAD_FAST                       0: self
                        40      LOAD_GLOBAL                     5: _limbo
                        42      LOAD_FAST                       0: self
                        44      STORE_SUBSCR                    
                        46      POP_BLOCK                       
                        48      LOAD_CONST                      3: None
                        50      DUP_TOP                         
                        52      DUP_TOP                         
                        54      CALL_FUNCTION                   3
                        56      POP_TOP                         
                        58      JUMP_FORWARD                    8 (to 76)
                        60      WITH_EXCEPT_START               
                        62      POP_JUMP_IF_TRUE                33 (to 66)
                        64      RERAISE                         1
                        66      POP_TOP                         
                        68      POP_TOP                         
                        70      POP_TOP                         
                        72      POP_EXCEPT                      
                        74      POP_TOP                         
                        76      SETUP_FINALLY                   8 (to 94)
                        78      LOAD_GLOBAL                     6: _start_new_thread
                        80      LOAD_FAST                       0: self
                        82      LOAD_ATTR                       7: _bootstrap
                        84      LOAD_CONST                      4: ()
                        86      CALL_FUNCTION                   2
                        88      POP_TOP                         
                        90      POP_BLOCK                       
                        92      JUMP_FORWARD                    29 (to 152)
                        94      DUP_TOP                         
                        96      LOAD_GLOBAL                     8: Exception
                        98      JUMP_IF_NOT_EXC_MATCH           75 (to 150)
                        100     POP_TOP                         
                        102     POP_TOP                         
                        104     POP_TOP                         
                        106     LOAD_GLOBAL                     4: _active_limbo_lock
                        108     SETUP_WITH                      11 (to 132)
                        110     POP_TOP                         
                        112     LOAD_GLOBAL                     5: _limbo
                        114     LOAD_FAST                       0: self
                        116     DELETE_SUBSCR                   
                        118     POP_BLOCK                       
                        120     LOAD_CONST                      3: None
                        122     DUP_TOP                         
                        124     DUP_TOP                         
                        126     CALL_FUNCTION                   3
                        128     POP_TOP                         
                        130     RAISE_VARARGS                   0
                        132     WITH_EXCEPT_START               
                        134     POP_JUMP_IF_TRUE                69 (to 138)
                        136     RERAISE                         1
                        138     POP_TOP                         
                        140     POP_TOP                         
                        142     POP_TOP                         
                        144     POP_EXCEPT                      
                        146     POP_TOP                         
                        148     RAISE_VARARGS                   0
                        150     RERAISE                         0
                        152     LOAD_FAST                       0: self
                        154     LOAD_ATTR                       2: _started
                        156     LOAD_METHOD                     9: wait
                        158     CALL_METHOD                     0
                        160     POP_TOP                         
                        162     LOAD_CONST                      3: None
                        164     RETURN_VALUE                    
                'Thread.start'
                [Code]
                    File Name: threading.py
                    Object Name: run
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_target'
                        '_args'
                        '_kwargs'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Method representing the thread's activity.\n\n        You may override this method in a subclass. The standard run() method\n        invokes the callable object passed to the object's constructor as the\n        target argument, if any, with sequential and keyword arguments taken\n        from the args and kwargs arguments, respectively.\n\n        "
                        None
                    [Disassembly]
                        0       SETUP_FINALLY                   33 (to 68)
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _target
                        6       LOAD_CONST                      1: None
                        8       IS_OP                           1 (is not)
                        10      POP_JUMP_IF_FALSE               25 (to 50)
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       0: _target
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       1: _args
                        20      BUILD_MAP                       0
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       2: _kwargs
                        26      DICT_MERGE                      1
                        28      CALL_FUNCTION_EX                1
                        30      POP_TOP                         
                        32      POP_BLOCK                       
                        34      LOAD_FAST                       0: self
                        36      DELETE_ATTR                     0: _target
                        38      LOAD_FAST                       0: self
                        40      DELETE_ATTR                     1: _args
                        42      LOAD_FAST                       0: self
                        44      DELETE_ATTR                     2: _kwargs
                        46      LOAD_CONST                      1: None
                        48      RETURN_VALUE                    
                        50      POP_BLOCK                       
                        52      LOAD_FAST                       0: self
                        54      DELETE_ATTR                     0: _target
                        56      LOAD_FAST                       0: self
                        58      DELETE_ATTR                     1: _args
                        60      LOAD_FAST                       0: self
                        62      DELETE_ATTR                     2: _kwargs
                        64      LOAD_CONST                      1: None
                        66      RETURN_VALUE                    
                        68      LOAD_FAST                       0: self
                        70      DELETE_ATTR                     0: _target
                        72      LOAD_FAST                       0: self
                        74      DELETE_ATTR                     1: _args
                        76      LOAD_FAST                       0: self
                        78      DELETE_ATTR                     2: _kwargs
                        80      RERAISE                         0
                'Thread.run'
                [Code]
                    File Name: threading.py
                    Object Name: _bootstrap
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_bootstrap_inner'
                        '_daemonic'
                        '_sys'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       SETUP_FINALLY                   7 (to 16)
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _bootstrap_inner
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      POP_BLOCK                       
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                        16      POP_TOP                         
                        18      POP_TOP                         
                        20      POP_TOP                         
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       1: _daemonic
                        26      POP_JUMP_IF_FALSE               21 (to 42)
                        28      LOAD_GLOBAL                     2: _sys
                        30      LOAD_CONST                      0: None
                        32      IS_OP                           0 (is)
                        34      POP_JUMP_IF_FALSE               21 (to 42)
                        36      POP_EXCEPT                      
                        38      LOAD_CONST                      0: None
                        40      RETURN_VALUE                    
                        42      RAISE_VARARGS                   0
                'Thread._bootstrap'
                [Code]
                    File Name: threading.py
                    Object Name: _set_ident
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'get_ident'
                        '_ident'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: get_ident
                        2       CALL_FUNCTION                   0
                        4       LOAD_FAST                       0: self
                        6       STORE_ATTR                      1: _ident
                        8       LOAD_CONST                      0: None
                        10      RETURN_VALUE                    
                'Thread._set_ident'
                [Code]
                    File Name: threading.py
                    Object Name: _set_native_id
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'get_native_id'
                        '_native_id'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: get_native_id
                        2       CALL_FUNCTION                   0
                        4       LOAD_FAST                       0: self
                        6       STORE_ATTR                      1: _native_id
                        8       LOAD_CONST                      0: None
                        10      RETURN_VALUE                    
                'Thread._set_native_id'
                [Code]
                    File Name: threading.py
                    Object Name: _set_tstate_lock
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_set_sentinel'
                        '_tstate_lock'
                        'acquire'
                        'daemon'
                        '_shutdown_locks_lock'
                        '_maintain_shutdown_locks'
                        '_shutdown_locks'
                        'add'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '\n        Set a lock object which will be released by the interpreter when\n        the underlying thread state (see pystate.h) gets deleted.\n        '
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _set_sentinel
                        2       CALL_FUNCTION                   0
                        4       LOAD_FAST                       0: self
                        6       STORE_ATTR                      1: _tstate_lock
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: _tstate_lock
                        12      LOAD_METHOD                     2: acquire
                        14      CALL_METHOD                     0
                        16      POP_TOP                         
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       3: daemon
                        22      POP_JUMP_IF_TRUE                42 (to 84)
                        24      LOAD_GLOBAL                     4: _shutdown_locks_lock
                        26      SETUP_WITH                      18 (to 64)
                        28      POP_TOP                         
                        30      LOAD_GLOBAL                     5: _maintain_shutdown_locks
                        32      CALL_FUNCTION                   0
                        34      POP_TOP                         
                        36      LOAD_GLOBAL                     6: _shutdown_locks
                        38      LOAD_METHOD                     7: add
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       1: _tstate_lock
                        44      CALL_METHOD                     1
                        46      POP_TOP                         
                        48      POP_BLOCK                       
                        50      LOAD_CONST                      1: None
                        52      DUP_TOP                         
                        54      DUP_TOP                         
                        56      CALL_FUNCTION                   3
                        58      POP_TOP                         
                        60      LOAD_CONST                      1: None
                        62      RETURN_VALUE                    
                        64      WITH_EXCEPT_START               
                        66      POP_JUMP_IF_TRUE                35 (to 70)
                        68      RERAISE                         1
                        70      POP_TOP                         
                        72      POP_TOP                         
                        74      POP_TOP                         
                        76      POP_EXCEPT                      
                        78      POP_TOP                         
                        80      LOAD_CONST                      1: None
                        82      RETURN_VALUE                    
                        84      LOAD_CONST                      1: None
                        86      RETURN_VALUE                    
                'Thread._set_tstate_lock'
                [Code]
                    File Name: threading.py
                    Object Name: _bootstrap_inner
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 14
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_set_ident'
                        '_set_tstate_lock'
                        '_HAVE_THREAD_NATIVE_ID'
                        '_set_native_id'
                        '_started'
                        'set'
                        '_active_limbo_lock'
                        '_active'
                        '_ident'
                        '_limbo'
                        '_trace_hook'
                        '_sys'
                        'settrace'
                        '_profile_hook'
                        'setprofile'
                        'run'
                        '_invoke_excepthook'
                        'get_ident'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       SETUP_FINALLY                   116 (to 234)
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _set_ident
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     1: _set_tstate_lock
                        14      CALL_METHOD                     0
                        16      POP_TOP                         
                        18      LOAD_GLOBAL                     2: _HAVE_THREAD_NATIVE_ID
                        20      POP_JUMP_IF_FALSE               15 (to 30)
                        22      LOAD_FAST                       0: self
                        24      LOAD_METHOD                     3: _set_native_id
                        26      CALL_METHOD                     0
                        28      POP_TOP                         
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       4: _started
                        34      LOAD_METHOD                     5: set
                        36      CALL_METHOD                     0
                        38      POP_TOP                         
                        40      LOAD_GLOBAL                     6: _active_limbo_lock
                        42      SETUP_WITH                      16 (to 76)
                        44      POP_TOP                         
                        46      LOAD_FAST                       0: self
                        48      LOAD_GLOBAL                     7: _active
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       8: _ident
                        54      STORE_SUBSCR                    
                        56      LOAD_GLOBAL                     9: _limbo
                        58      LOAD_FAST                       0: self
                        60      DELETE_SUBSCR                   
                        62      POP_BLOCK                       
                        64      LOAD_CONST                      0: None
                        66      DUP_TOP                         
                        68      DUP_TOP                         
                        70      CALL_FUNCTION                   3
                        72      POP_TOP                         
                        74      JUMP_FORWARD                    8 (to 92)
                        76      WITH_EXCEPT_START               
                        78      POP_JUMP_IF_TRUE                41 (to 82)
                        80      RERAISE                         1
                        82      POP_TOP                         
                        84      POP_TOP                         
                        86      POP_TOP                         
                        88      POP_EXCEPT                      
                        90      POP_TOP                         
                        92      LOAD_GLOBAL                     10: _trace_hook
                        94      POP_JUMP_IF_FALSE               53 (to 106)
                        96      LOAD_GLOBAL                     11: _sys
                        98      LOAD_METHOD                     12: settrace
                        100     LOAD_GLOBAL                     10: _trace_hook
                        102     CALL_METHOD                     1
                        104     POP_TOP                         
                        106     LOAD_GLOBAL                     13: _profile_hook
                        108     POP_JUMP_IF_FALSE               60 (to 120)
                        110     LOAD_GLOBAL                     11: _sys
                        112     LOAD_METHOD                     14: setprofile
                        114     LOAD_GLOBAL                     13: _profile_hook
                        116     CALL_METHOD                     1
                        118     POP_TOP                         
                        120     SETUP_FINALLY                   6 (to 134)
                        122     LOAD_FAST                       0: self
                        124     LOAD_METHOD                     15: run
                        126     CALL_METHOD                     0
                        128     POP_TOP                         
                        130     POP_BLOCK                       
                        132     JUMP_FORWARD                    9 (to 152)
                        134     POP_TOP                         
                        136     POP_TOP                         
                        138     POP_TOP                         
                        140     LOAD_FAST                       0: self
                        142     LOAD_METHOD                     16: _invoke_excepthook
                        144     LOAD_FAST                       0: self
                        146     CALL_METHOD                     1
                        148     POP_TOP                         
                        150     POP_EXCEPT                      
                        152     POP_BLOCK                       
                        154     LOAD_GLOBAL                     6: _active_limbo_lock
                        156     SETUP_WITH                      28 (to 214)
                        158     POP_TOP                         
                        160     SETUP_FINALLY                   6 (to 174)
                        162     LOAD_GLOBAL                     7: _active
                        164     LOAD_GLOBAL                     17: get_ident
                        166     CALL_FUNCTION                   0
                        168     DELETE_SUBSCR                   
                        170     POP_BLOCK                       
                        172     JUMP_FORWARD                    12 (to 198)
                        174     POP_TOP                         
                        176     POP_TOP                         
                        178     POP_TOP                         
                        180     POP_EXCEPT                      
                        182     POP_BLOCK                       
                        184     LOAD_CONST                      0: None
                        186     DUP_TOP                         
                        188     DUP_TOP                         
                        190     CALL_FUNCTION                   3
                        192     POP_TOP                         
                        194     LOAD_CONST                      0: None
                        196     RETURN_VALUE                    
                        198     POP_BLOCK                       
                        200     LOAD_CONST                      0: None
                        202     DUP_TOP                         
                        204     DUP_TOP                         
                        206     CALL_FUNCTION                   3
                        208     POP_TOP                         
                        210     LOAD_CONST                      0: None
                        212     RETURN_VALUE                    
                        214     WITH_EXCEPT_START               
                        216     POP_JUMP_IF_TRUE                110 (to 220)
                        218     RERAISE                         1
                        220     POP_TOP                         
                        222     POP_TOP                         
                        224     POP_TOP                         
                        226     POP_EXCEPT                      
                        228     POP_TOP                         
                        230     LOAD_CONST                      0: None
                        232     RETURN_VALUE                    
                        234     LOAD_GLOBAL                     6: _active_limbo_lock
                        236     SETUP_WITH                      26 (to 290)
                        238     POP_TOP                         
                        240     SETUP_FINALLY                   6 (to 254)
                        242     LOAD_GLOBAL                     7: _active
                        244     LOAD_GLOBAL                     17: get_ident
                        246     CALL_FUNCTION                   0
                        248     DELETE_SUBSCR                   
                        250     POP_BLOCK                       
                        252     JUMP_FORWARD                    11 (to 276)
                        254     POP_TOP                         
                        256     POP_TOP                         
                        258     POP_TOP                         
                        260     POP_EXCEPT                      
                        262     POP_BLOCK                       
                        264     LOAD_CONST                      0: None
                        266     DUP_TOP                         
                        268     DUP_TOP                         
                        270     CALL_FUNCTION                   3
                        272     POP_TOP                         
                        274     RERAISE                         0
                        276     POP_BLOCK                       
                        278     LOAD_CONST                      0: None
                        280     DUP_TOP                         
                        282     DUP_TOP                         
                        284     CALL_FUNCTION                   3
                        286     POP_TOP                         
                        288     RERAISE                         0
                        290     WITH_EXCEPT_START               
                        292     POP_JUMP_IF_TRUE                148 (to 296)
                        294     RERAISE                         1
                        296     POP_TOP                         
                        298     POP_TOP                         
                        300     POP_TOP                         
                        302     POP_EXCEPT                      
                        304     POP_TOP                         
                        306     RERAISE                         0
                'Thread._bootstrap_inner'
                [Code]
                    File Name: threading.py
                    Object Name: _stop
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_tstate_lock'
                        'locked'
                        '_is_stopped'
                        'daemon'
                        '_shutdown_locks_lock'
                        '_maintain_shutdown_locks'
                    [Var Names]
                        'self'
                        'lock'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _tstate_lock
                        4       STORE_FAST                      1: lock
                        6       LOAD_FAST                       1: lock
                        8       LOAD_CONST                      0: None
                        10      IS_OP                           1 (is not)
                        12      POP_JUMP_IF_FALSE               13 (to 26)
                        14      LOAD_FAST                       1: lock
                        16      LOAD_METHOD                     1: locked
                        18      CALL_METHOD                     0
                        20      POP_JUMP_IF_FALSE               13 (to 26)
                        22      LOAD_ASSERTION_ERROR            
                        24      RAISE_VARARGS                   1
                        26      LOAD_CONST                      1: True
                        28      LOAD_FAST                       0: self
                        30      STORE_ATTR                      2: _is_stopped
                        32      LOAD_CONST                      0: None
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      0: _tstate_lock
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       3: daemon
                        42      POP_JUMP_IF_TRUE                46 (to 92)
                        44      LOAD_GLOBAL                     4: _shutdown_locks_lock
                        46      SETUP_WITH                      12 (to 72)
                        48      POP_TOP                         
                        50      LOAD_GLOBAL                     5: _maintain_shutdown_locks
                        52      CALL_FUNCTION                   0
                        54      POP_TOP                         
                        56      POP_BLOCK                       
                        58      LOAD_CONST                      0: None
                        60      DUP_TOP                         
                        62      DUP_TOP                         
                        64      CALL_FUNCTION                   3
                        66      POP_TOP                         
                        68      LOAD_CONST                      0: None
                        70      RETURN_VALUE                    
                        72      WITH_EXCEPT_START               
                        74      POP_JUMP_IF_TRUE                39 (to 78)
                        76      RERAISE                         1
                        78      POP_TOP                         
                        80      POP_TOP                         
                        82      POP_TOP                         
                        84      POP_EXCEPT                      
                        86      POP_TOP                         
                        88      LOAD_CONST                      0: None
                        90      RETURN_VALUE                    
                        92      LOAD_CONST                      0: None
                        94      RETURN_VALUE                    
                'Thread._stop'
                [Code]
                    File Name: threading.py
                    Object Name: _delete
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_active_limbo_lock'
                        '_active'
                        'get_ident'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Remove current thread from the dict of currently running threads.'
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _active_limbo_lock
                        2       SETUP_WITH                      13 (to 30)
                        4       POP_TOP                         
                        6       LOAD_GLOBAL                     1: _active
                        8       LOAD_GLOBAL                     2: get_ident
                        10      CALL_FUNCTION                   0
                        12      DELETE_SUBSCR                   
                        14      POP_BLOCK                       
                        16      LOAD_CONST                      1: None
                        18      DUP_TOP                         
                        20      DUP_TOP                         
                        22      CALL_FUNCTION                   3
                        24      POP_TOP                         
                        26      LOAD_CONST                      1: None
                        28      RETURN_VALUE                    
                        30      WITH_EXCEPT_START               
                        32      POP_JUMP_IF_TRUE                18 (to 36)
                        34      RERAISE                         1
                        36      POP_TOP                         
                        38      POP_TOP                         
                        40      POP_TOP                         
                        42      POP_EXCEPT                      
                        44      POP_TOP                         
                        46      LOAD_CONST                      1: None
                        48      RETURN_VALUE                    
                'Thread._delete'
                [Code]
                    File Name: threading.py
                    Object Name: join
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_initialized'
                        'RuntimeError'
                        '_started'
                        'is_set'
                        'current_thread'
                        '_wait_for_tstate_lock'
                        'max'
                    [Var Names]
                        'self'
                        'timeout'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Wait until the thread terminates.\n\n        This blocks the calling thread until the thread whose join() method is\n        called terminates -- either normally or through an unhandled exception\n        or until the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof). As join() always returns None, you must call\n        is_alive() after join() to decide whether a timeout happened -- if the\n        thread is still alive, the join() call timed out.\n\n        When the timeout argument is not present or None, the operation will\n        block until the thread terminates.\n\n        A thread can be join()ed many times.\n\n        join() raises a RuntimeError if an attempt is made to join the current\n        thread as that would cause a deadlock. It is also an error to join() a\n        thread before it has been started and attempts to do so raises the same\n        exception.\n\n        '
                        'Thread.__init__() not called'
                        'cannot join thread before it is started'
                        'cannot join current thread'
                        None
                        0
                        (
                            'timeout'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _initialized
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_GLOBAL                     1: RuntimeError
                        8       LOAD_CONST                      1: 'Thread.__init__() not called'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _started
                        18      LOAD_METHOD                     3: is_set
                        20      CALL_METHOD                     0
                        22      POP_JUMP_IF_TRUE                16 (to 32)
                        24      LOAD_GLOBAL                     1: RuntimeError
                        26      LOAD_CONST                      2: 'cannot join thread before it is started'
                        28      CALL_FUNCTION                   1
                        30      RAISE_VARARGS                   1
                        32      LOAD_FAST                       0: self
                        34      LOAD_GLOBAL                     4: current_thread
                        36      CALL_FUNCTION                   0
                        38      IS_OP                           0 (is)
                        40      POP_JUMP_IF_FALSE               25 (to 50)
                        42      LOAD_GLOBAL                     1: RuntimeError
                        44      LOAD_CONST                      3: 'cannot join current thread'
                        46      CALL_FUNCTION                   1
                        48      RAISE_VARARGS                   1
                        50      LOAD_FAST                       1: timeout
                        52      LOAD_CONST                      4: None
                        54      IS_OP                           0 (is)
                        56      POP_JUMP_IF_FALSE               35 (to 70)
                        58      LOAD_FAST                       0: self
                        60      LOAD_METHOD                     5: _wait_for_tstate_lock
                        62      CALL_METHOD                     0
                        64      POP_TOP                         
                        66      LOAD_CONST                      4: None
                        68      RETURN_VALUE                    
                        70      LOAD_FAST                       0: self
                        72      LOAD_ATTR                       5: _wait_for_tstate_lock
                        74      LOAD_GLOBAL                     6: max
                        76      LOAD_FAST                       1: timeout
                        78      LOAD_CONST                      5: 0
                        80      CALL_FUNCTION                   2
                        82      LOAD_CONST                      6: ('timeout',)
                        84      CALL_FUNCTION_KW                1
                        86      POP_TOP                         
                        88      LOAD_CONST                      4: None
                        90      RETURN_VALUE                    
                'Thread.join'
                True
                -1
                [Code]
                    File Name: threading.py
                    Object Name: _wait_for_tstate_lock
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_tstate_lock'
                        '_is_stopped'
                        'acquire'
                        'release'
                        '_stop'
                        'locked'
                    [Var Names]
                        'self'
                        'block'
                        'timeout'
                        'lock'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _tstate_lock
                        4       STORE_FAST                      3: lock
                        6       LOAD_FAST                       3: lock
                        8       LOAD_CONST                      0: None
                        10      IS_OP                           0 (is)
                        12      POP_JUMP_IF_FALSE               14 (to 28)
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _is_stopped
                        18      POP_JUMP_IF_TRUE                12 (to 24)
                        20      LOAD_ASSERTION_ERROR            
                        22      RAISE_VARARGS                   1
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                        28      SETUP_FINALLY                   20 (to 70)
                        30      LOAD_FAST                       3: lock
                        32      LOAD_METHOD                     2: acquire
                        34      LOAD_FAST                       1: block
                        36      LOAD_FAST                       2: timeout
                        38      CALL_METHOD                     2
                        40      POP_JUMP_IF_FALSE               32 (to 64)
                        42      LOAD_FAST                       3: lock
                        44      LOAD_METHOD                     3: release
                        46      CALL_METHOD                     0
                        48      POP_TOP                         
                        50      LOAD_FAST                       0: self
                        52      LOAD_METHOD                     4: _stop
                        54      CALL_METHOD                     0
                        56      POP_TOP                         
                        58      POP_BLOCK                       
                        60      LOAD_CONST                      0: None
                        62      RETURN_VALUE                    
                        64      POP_BLOCK                       
                        66      LOAD_CONST                      0: None
                        68      RETURN_VALUE                    
                        70      POP_TOP                         
                        72      POP_TOP                         
                        74      POP_TOP                         
                        76      LOAD_FAST                       3: lock
                        78      LOAD_METHOD                     5: locked
                        80      CALL_METHOD                     0
                        82      POP_JUMP_IF_FALSE               50 (to 100)
                        84      LOAD_FAST                       3: lock
                        86      LOAD_METHOD                     3: release
                        88      CALL_METHOD                     0
                        90      POP_TOP                         
                        92      LOAD_FAST                       0: self
                        94      LOAD_METHOD                     4: _stop
                        96      CALL_METHOD                     0
                        98      POP_TOP                         
                        100     RAISE_VARARGS                   0
                'Thread._wait_for_tstate_lock'
                [Code]
                    File Name: threading.py
                    Object Name: name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_initialized'
                        '_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'A string used for identification purposes only.\n\n        It has no semantics. Multiple threads may be given the same name. The\n        initial name is set by the constructor.\n\n        '
                        'Thread.__init__() not called'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _initialized
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_ASSERTION_ERROR            
                        8       LOAD_CONST                      1: 'Thread.__init__() not called'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _name
                        18      RETURN_VALUE                    
                'Thread.name'
                [Code]
                    File Name: threading.py
                    Object Name: name
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_initialized'
                        'str'
                        '_name'
                    [Var Names]
                        'self'
                        'name'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Thread.__init__() not called'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _initialized
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_ASSERTION_ERROR            
                        8       LOAD_CONST                      1: 'Thread.__init__() not called'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_GLOBAL                     1: str
                        16      LOAD_FAST                       1: name
                        18      CALL_FUNCTION                   1
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      2: _name
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                [Code]
                    File Name: threading.py
                    Object Name: ident
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_initialized'
                        '_ident'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Thread identifier of this thread or None if it has not been started.\n\n        This is a nonzero integer. See the get_ident() function. Thread\n        identifiers may be recycled when a thread exits and another thread is\n        created. The identifier is available even after the thread has exited.\n\n        '
                        'Thread.__init__() not called'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _initialized
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_ASSERTION_ERROR            
                        8       LOAD_CONST                      1: 'Thread.__init__() not called'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _ident
                        18      RETURN_VALUE                    
                'Thread.ident'
                [Code]
                    File Name: threading.py
                    Object Name: native_id
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_initialized'
                        '_native_id'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Native integral thread ID of this thread, or None if it has not been started.\n\n            This is a non-negative integer. See the get_native_id() function.\n            This represents the Thread ID as reported by the kernel.\n\n            '
                        'Thread.__init__() not called'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _initialized
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_ASSERTION_ERROR            
                        8       LOAD_CONST                      1: 'Thread.__init__() not called'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _native_id
                        18      RETURN_VALUE                    
                'Thread.native_id'
                [Code]
                    File Name: threading.py
                    Object Name: is_alive
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_initialized'
                        '_is_stopped'
                        '_started'
                        'is_set'
                        '_wait_for_tstate_lock'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return whether the thread is alive.\n\n        This method returns True just before the run() method starts until just\n        after the run() method terminates. See also the module function\n        enumerate().\n\n        '
                        'Thread.__init__() not called'
                        False
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _initialized
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_ASSERTION_ERROR            
                        8       LOAD_CONST                      1: 'Thread.__init__() not called'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _is_stopped
                        18      POP_JUMP_IF_TRUE                15 (to 30)
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: _started
                        24      LOAD_METHOD                     3: is_set
                        26      CALL_METHOD                     0
                        28      POP_JUMP_IF_TRUE                17 (to 34)
                        30      LOAD_CONST                      2: False
                        32      RETURN_VALUE                    
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     4: _wait_for_tstate_lock
                        38      LOAD_CONST                      2: False
                        40      CALL_METHOD                     1
                        42      POP_TOP                         
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       1: _is_stopped
                        48      UNARY_NOT                       
                        50      RETURN_VALUE                    
                'Thread.is_alive'
                [Code]
                    File Name: threading.py
                    Object Name: daemon
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_initialized'
                        '_daemonic'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'A boolean value indicating whether this thread is a daemon thread.\n\n        This must be set before start() is called, otherwise RuntimeError is\n        raised. Its initial value is inherited from the creating thread; the\n        main thread is not a daemon thread and therefore all threads created in\n        the main thread default to daemon = False.\n\n        The entire Python program exits when only daemon threads are left.\n\n        '
                        'Thread.__init__() not called'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _initialized
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_ASSERTION_ERROR            
                        8       LOAD_CONST                      1: 'Thread.__init__() not called'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _daemonic
                        18      RETURN_VALUE                    
                'Thread.daemon'
                [Code]
                    File Name: threading.py
                    Object Name: daemon
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_initialized'
                        'RuntimeError'
                        '_started'
                        'is_set'
                        '_daemonic'
                    [Var Names]
                        'self'
                        'daemonic'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Thread.__init__() not called'
                        'cannot set daemon status of active thread'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _initialized
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_GLOBAL                     1: RuntimeError
                        8       LOAD_CONST                      1: 'Thread.__init__() not called'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _started
                        18      LOAD_METHOD                     3: is_set
                        20      CALL_METHOD                     0
                        22      POP_JUMP_IF_FALSE               16 (to 32)
                        24      LOAD_GLOBAL                     1: RuntimeError
                        26      LOAD_CONST                      2: 'cannot set daemon status of active thread'
                        28      CALL_FUNCTION                   1
                        30      RAISE_VARARGS                   1
                        32      LOAD_FAST                       1: daemonic
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      4: _daemonic
                        38      LOAD_CONST                      0: None
                        40      RETURN_VALUE                    
                [Code]
                    File Name: threading.py
                    Object Name: isDaemon
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'warnings'
                        'warn'
                        'DeprecationWarning'
                        'daemon'
                    [Var Names]
                        'self'
                        'warnings'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return whether this thread is a daemon.\n\n        This method is deprecated, use the daemon attribute instead.\n\n        '
                        0
                        None
                        'isDaemon() is deprecated, get the daemon attribute instead'
                        2
                        (
                            'stacklevel'
                        )
                    [Disassembly]
                        0       LOAD_CONST                      1: 0
                        2       LOAD_CONST                      2: None
                        4       IMPORT_NAME                     0: warnings
                        6       STORE_FAST                      1: warnings
                        8       LOAD_FAST                       1: warnings
                        10      LOAD_ATTR                       1: warn
                        12      LOAD_CONST                      3: 'isDaemon() is deprecated, get the daemon attribute instead'
                        14      LOAD_GLOBAL                     2: DeprecationWarning
                        16      LOAD_CONST                      4: 2
                        18      LOAD_CONST                      5: ('stacklevel',)
                        20      CALL_FUNCTION_KW                3
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       3: daemon
                        28      RETURN_VALUE                    
                'Thread.isDaemon'
                [Code]
                    File Name: threading.py
                    Object Name: setDaemon
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'warnings'
                        'warn'
                        'DeprecationWarning'
                        'daemon'
                    [Var Names]
                        'self'
                        'daemonic'
                        'warnings'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Set whether this thread is a daemon.\n\n        This method is deprecated, use the .daemon property instead.\n\n        '
                        0
                        None
                        'setDaemon() is deprecated, set the daemon attribute instead'
                        2
                        (
                            'stacklevel'
                        )
                    [Disassembly]
                        0       LOAD_CONST                      1: 0
                        2       LOAD_CONST                      2: None
                        4       IMPORT_NAME                     0: warnings
                        6       STORE_FAST                      2: warnings
                        8       LOAD_FAST                       2: warnings
                        10      LOAD_ATTR                       1: warn
                        12      LOAD_CONST                      3: 'setDaemon() is deprecated, set the daemon attribute instead'
                        14      LOAD_GLOBAL                     2: DeprecationWarning
                        16      LOAD_CONST                      4: 2
                        18      LOAD_CONST                      5: ('stacklevel',)
                        20      CALL_FUNCTION_KW                3
                        22      POP_TOP                         
                        24      LOAD_FAST                       1: daemonic
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      3: daemon
                        30      LOAD_CONST                      2: None
                        32      RETURN_VALUE                    
                'Thread.setDaemon'
                [Code]
                    File Name: threading.py
                    Object Name: getName
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'warnings'
                        'warn'
                        'DeprecationWarning'
                        'name'
                    [Var Names]
                        'self'
                        'warnings'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return a string used for identification purposes only.\n\n        This method is deprecated, use the name attribute instead.\n\n        '
                        0
                        None
                        'getName() is deprecated, get the name attribute instead'
                        2
                        (
                            'stacklevel'
                        )
                    [Disassembly]
                        0       LOAD_CONST                      1: 0
                        2       LOAD_CONST                      2: None
                        4       IMPORT_NAME                     0: warnings
                        6       STORE_FAST                      1: warnings
                        8       LOAD_FAST                       1: warnings
                        10      LOAD_ATTR                       1: warn
                        12      LOAD_CONST                      3: 'getName() is deprecated, get the name attribute instead'
                        14      LOAD_GLOBAL                     2: DeprecationWarning
                        16      LOAD_CONST                      4: 2
                        18      LOAD_CONST                      5: ('stacklevel',)
                        20      CALL_FUNCTION_KW                3
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       3: name
                        28      RETURN_VALUE                    
                'Thread.getName'
                [Code]
                    File Name: threading.py
                    Object Name: setName
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'warnings'
                        'warn'
                        'DeprecationWarning'
                        'name'
                    [Var Names]
                        'self'
                        'name'
                        'warnings'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Set the name string for this thread.\n\n        This method is deprecated, use the name attribute instead.\n\n        '
                        0
                        None
                        'setName() is deprecated, set the name attribute instead'
                        2
                        (
                            'stacklevel'
                        )
                    [Disassembly]
                        0       LOAD_CONST                      1: 0
                        2       LOAD_CONST                      2: None
                        4       IMPORT_NAME                     0: warnings
                        6       STORE_FAST                      2: warnings
                        8       LOAD_FAST                       2: warnings
                        10      LOAD_ATTR                       1: warn
                        12      LOAD_CONST                      3: 'setName() is deprecated, set the name attribute instead'
                        14      LOAD_GLOBAL                     2: DeprecationWarning
                        16      LOAD_CONST                      4: 2
                        18      LOAD_CONST                      5: ('stacklevel',)
                        20      CALL_FUNCTION_KW                3
                        22      POP_TOP                         
                        24      LOAD_FAST                       1: name
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      3: name
                        30      LOAD_CONST                      2: None
                        32      RETURN_VALUE                    
                'Thread.setName'
                (
                    None
                    None
                    None
                    (
                    )
                    None
                )
                (
                    None
                )
                (
                    True
                    -1
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Thread'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A class that represents a thread of control.\n\n    This class can be safely subclassed in a limited fashion. There are two ways\n    to specify the activity: by passing a callable object to the constructor, or\n    by overriding the run() method in a subclass.\n\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: _initialized
                16      NOP                             
                18      NOP                             
                20      LOAD_CONST                      56: (None, None, None, (), None)
                22      LOAD_CONST                      3: None
                24      LOAD_CONST                      5: ('daemon',)
                26      BUILD_CONST_KEY_MAP             1
                28      LOAD_CONST                      6: <CODE> __init__
                30      LOAD_CONST                      7: 'Thread.__init__'
                32      MAKE_FUNCTION                   3
                34      STORE_NAME                      5: __init__
                36      LOAD_CONST                      8: <CODE> _reset_internal_locks
                38      LOAD_CONST                      9: 'Thread._reset_internal_locks'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      6: _reset_internal_locks
                44      LOAD_CONST                      10: <CODE> __repr__
                46      LOAD_CONST                      11: 'Thread.__repr__'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      7: __repr__
                52      LOAD_CONST                      12: <CODE> start
                54      LOAD_CONST                      13: 'Thread.start'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      8: start
                60      LOAD_CONST                      14: <CODE> run
                62      LOAD_CONST                      15: 'Thread.run'
                64      MAKE_FUNCTION                   0
                66      STORE_NAME                      9: run
                68      LOAD_CONST                      16: <CODE> _bootstrap
                70      LOAD_CONST                      17: 'Thread._bootstrap'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      10: _bootstrap
                76      LOAD_CONST                      18: <CODE> _set_ident
                78      LOAD_CONST                      19: 'Thread._set_ident'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      11: _set_ident
                84      LOAD_NAME                       12: _HAVE_THREAD_NATIVE_ID
                86      POP_JUMP_IF_FALSE               48 (to 96)
                88      LOAD_CONST                      20: <CODE> _set_native_id
                90      LOAD_CONST                      21: 'Thread._set_native_id'
                92      MAKE_FUNCTION                   0
                94      STORE_NAME                      13: _set_native_id
                96      LOAD_CONST                      22: <CODE> _set_tstate_lock
                98      LOAD_CONST                      23: 'Thread._set_tstate_lock'
                100     MAKE_FUNCTION                   0
                102     STORE_NAME                      14: _set_tstate_lock
                104     LOAD_CONST                      24: <CODE> _bootstrap_inner
                106     LOAD_CONST                      25: 'Thread._bootstrap_inner'
                108     MAKE_FUNCTION                   0
                110     STORE_NAME                      15: _bootstrap_inner
                112     LOAD_CONST                      26: <CODE> _stop
                114     LOAD_CONST                      27: 'Thread._stop'
                116     MAKE_FUNCTION                   0
                118     STORE_NAME                      16: _stop
                120     LOAD_CONST                      28: <CODE> _delete
                122     LOAD_CONST                      29: 'Thread._delete'
                124     MAKE_FUNCTION                   0
                126     STORE_NAME                      17: _delete
                128     LOAD_CONST                      57: (None,)
                130     LOAD_CONST                      30: <CODE> join
                132     LOAD_CONST                      31: 'Thread.join'
                134     MAKE_FUNCTION                   1
                136     STORE_NAME                      18: join
                138     LOAD_CONST                      58: (True, -1)
                140     LOAD_CONST                      34: <CODE> _wait_for_tstate_lock
                142     LOAD_CONST                      35: 'Thread._wait_for_tstate_lock'
                144     MAKE_FUNCTION                   1
                146     STORE_NAME                      19: _wait_for_tstate_lock
                148     LOAD_NAME                       20: property
                150     LOAD_CONST                      36: <CODE> name
                152     LOAD_CONST                      37: 'Thread.name'
                154     MAKE_FUNCTION                   0
                156     CALL_FUNCTION                   1
                158     STORE_NAME                      21: name
                160     LOAD_NAME                       21: name
                162     LOAD_ATTR                       22: setter
                164     LOAD_CONST                      38: <CODE> name
                166     LOAD_CONST                      37: 'Thread.name'
                168     MAKE_FUNCTION                   0
                170     CALL_FUNCTION                   1
                172     STORE_NAME                      21: name
                174     LOAD_NAME                       20: property
                176     LOAD_CONST                      39: <CODE> ident
                178     LOAD_CONST                      40: 'Thread.ident'
                180     MAKE_FUNCTION                   0
                182     CALL_FUNCTION                   1
                184     STORE_NAME                      23: ident
                186     LOAD_NAME                       12: _HAVE_THREAD_NATIVE_ID
                188     POP_JUMP_IF_FALSE               101 (to 202)
                190     LOAD_NAME                       20: property
                192     LOAD_CONST                      41: <CODE> native_id
                194     LOAD_CONST                      42: 'Thread.native_id'
                196     MAKE_FUNCTION                   0
                198     CALL_FUNCTION                   1
                200     STORE_NAME                      24: native_id
                202     LOAD_CONST                      43: <CODE> is_alive
                204     LOAD_CONST                      44: 'Thread.is_alive'
                206     MAKE_FUNCTION                   0
                208     STORE_NAME                      25: is_alive
                210     LOAD_NAME                       20: property
                212     LOAD_CONST                      45: <CODE> daemon
                214     LOAD_CONST                      46: 'Thread.daemon'
                216     MAKE_FUNCTION                   0
                218     CALL_FUNCTION                   1
                220     STORE_NAME                      26: daemon
                222     LOAD_NAME                       26: daemon
                224     LOAD_ATTR                       22: setter
                226     LOAD_CONST                      47: <CODE> daemon
                228     LOAD_CONST                      46: 'Thread.daemon'
                230     MAKE_FUNCTION                   0
                232     CALL_FUNCTION                   1
                234     STORE_NAME                      26: daemon
                236     LOAD_CONST                      48: <CODE> isDaemon
                238     LOAD_CONST                      49: 'Thread.isDaemon'
                240     MAKE_FUNCTION                   0
                242     STORE_NAME                      27: isDaemon
                244     LOAD_CONST                      50: <CODE> setDaemon
                246     LOAD_CONST                      51: 'Thread.setDaemon'
                248     MAKE_FUNCTION                   0
                250     STORE_NAME                      28: setDaemon
                252     LOAD_CONST                      52: <CODE> getName
                254     LOAD_CONST                      53: 'Thread.getName'
                256     MAKE_FUNCTION                   0
                258     STORE_NAME                      29: getName
                260     LOAD_CONST                      54: <CODE> setName
                262     LOAD_CONST                      55: 'Thread.setName'
                264     MAKE_FUNCTION                   0
                266     STORE_NAME                      30: setName
                268     LOAD_CONST                      3: None
                270     RETURN_VALUE                    
        'Thread'
        (
            '_excepthook'
            '_ExceptHookArgs'
        )
        (
            'print_exception'
        )
        (
            'namedtuple'
        )
        'ExceptHookArgs'
        'exc_type exc_value exc_traceback thread'
        [Code]
            File Name: threading.py
            Object Name: ExceptHookArgs
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_ExceptHookArgs'
            [Var Names]
                'args'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _ExceptHookArgs
                2       LOAD_FAST                       0: args
                4       CALL_FUNCTION_EX                0
                6       RETURN_VALUE                    
        [Code]
            File Name: threading.py
            Object Name: excepthook
            Arg Count: 1
            Pos Only Arg Count: 1
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'exc_type'
                'SystemExit'
                '_sys'
                'stderr'
                'thread'
                '_stderr'
                'name'
                'get_ident'
                'print'
                '_print_exception'
                'exc_value'
                'exc_traceback'
                'flush'
            [Var Names]
                'args'
                'stderr'
                'name'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n        Handle uncaught Thread.run() exception.\n        '
                None
                'Exception in thread '
                ':'
                True
                (
                    'file'
                    'flush'
                )
                (
                    'file'
                )
            [Disassembly]
                0       LOAD_FAST                       0: args
                2       LOAD_ATTR                       0: exc_type
                4       LOAD_GLOBAL                     1: SystemExit
                6       COMPARE_OP                      2 (==)
                8       POP_JUMP_IF_FALSE               7 (to 14)
                10      LOAD_CONST                      1: None
                12      RETURN_VALUE                    
                14      LOAD_GLOBAL                     2: _sys
                16      LOAD_CONST                      1: None
                18      IS_OP                           1 (is not)
                20      POP_JUMP_IF_FALSE               20 (to 40)
                22      LOAD_GLOBAL                     2: _sys
                24      LOAD_ATTR                       3: stderr
                26      LOAD_CONST                      1: None
                28      IS_OP                           1 (is not)
                30      POP_JUMP_IF_FALSE               20 (to 40)
                32      LOAD_GLOBAL                     2: _sys
                34      LOAD_ATTR                       3: stderr
                36      STORE_FAST                      1: stderr
                38      JUMP_FORWARD                    18 (to 76)
                40      LOAD_FAST                       0: args
                42      LOAD_ATTR                       4: thread
                44      LOAD_CONST                      1: None
                46      IS_OP                           1 (is not)
                48      POP_JUMP_IF_FALSE               36 (to 72)
                50      LOAD_FAST                       0: args
                52      LOAD_ATTR                       4: thread
                54      LOAD_ATTR                       5: _stderr
                56      STORE_FAST                      1: stderr
                58      LOAD_FAST                       1: stderr
                60      LOAD_CONST                      1: None
                62      IS_OP                           0 (is)
                64      POP_JUMP_IF_FALSE               35 (to 70)
                66      LOAD_CONST                      1: None
                68      RETURN_VALUE                    
                70      JUMP_FORWARD                    2 (to 76)
                72      LOAD_CONST                      1: None
                74      RETURN_VALUE                    
                76      LOAD_FAST                       0: args
                78      LOAD_ATTR                       4: thread
                80      LOAD_CONST                      1: None
                82      IS_OP                           1 (is not)
                84      POP_JUMP_IF_FALSE               48 (to 96)
                86      LOAD_FAST                       0: args
                88      LOAD_ATTR                       4: thread
                90      LOAD_ATTR                       6: name
                92      STORE_FAST                      2: name
                94      JUMP_FORWARD                    3 (to 102)
                96      LOAD_GLOBAL                     7: get_ident
                98      CALL_FUNCTION                   0
                100     STORE_FAST                      2: name
                102     LOAD_GLOBAL                     8: print
                104     LOAD_CONST                      2: 'Exception in thread '
                106     LOAD_FAST                       2: name
                108     FORMAT_VALUE                    0 (FVC_NONE)
                110     LOAD_CONST                      3: ':'
                112     BUILD_STRING                    3
                114     LOAD_FAST                       1: stderr
                116     LOAD_CONST                      4: True
                118     LOAD_CONST                      5: ('file', 'flush')
                120     CALL_FUNCTION_KW                3
                122     POP_TOP                         
                124     LOAD_GLOBAL                     9: _print_exception
                126     LOAD_FAST                       0: args
                128     LOAD_ATTR                       0: exc_type
                130     LOAD_FAST                       0: args
                132     LOAD_ATTR                       10: exc_value
                134     LOAD_FAST                       0: args
                136     LOAD_ATTR                       11: exc_traceback
                138     LOAD_FAST                       1: stderr
                140     LOAD_CONST                      6: ('file',)
                142     CALL_FUNCTION_KW                4
                144     POP_TOP                         
                146     LOAD_FAST                       1: stderr
                148     LOAD_METHOD                     12: flush
                150     CALL_METHOD                     0
                152     POP_TOP                         
                154     LOAD_CONST                      1: None
                156     RETURN_VALUE                    
        'excepthook'
        [Code]
            File Name: threading.py
            Object Name: _make_invoke_excepthook
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'excepthook'
                '_sys'
                'RuntimeError'
                'exc_info'
                'print'
            [Var Names]
                'invoke_excepthook'
            [Free Vars]
            [Cell Vars]
                'local_print'
                'local_sys'
                'old_excepthook'
                'old_sys_excepthook'
                'sys_exc_info'
            [Constants]
                None
                'threading.excepthook is None'
                'sys.excepthook is None'
                [Code]
                    File Name: threading.py
                    Object Name: invoke_excepthook
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 10
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'excepthook'
                        'ExceptHookArgs'
                        'Exception'
                        '__suppress_context__'
                        'stderr'
                        '_stderr'
                    [Var Names]
                        'thread'
                        'hook'
                        'args'
                        'exc'
                        'stderr'
                        'sys_excepthook'
                    [Free Vars]
                        'local_print'
                        'local_sys'
                        'old_excepthook'
                        'old_sys_excepthook'
                        'sys_exc_info'
                    [Cell Vars]
                    [Constants]
                        None
                        True
                        'Exception in threading.excepthook:'
                        (
                            'file'
                            'flush'
                        )
                    [Disassembly]
                        0       SETUP_FINALLY                   99 (to 200)
                        2       SETUP_FINALLY                   23 (to 50)
                        4       LOAD_GLOBAL                     0: excepthook
                        6       STORE_FAST                      1: hook
                        8       LOAD_FAST                       1: hook
                        10      LOAD_CONST                      0: None
                        12      IS_OP                           0 (is)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_DEREF                      2: old_excepthook
                        18      STORE_FAST                      1: hook
                        20      LOAD_GLOBAL                     1: ExceptHookArgs
                        22      BUILD_LIST                      0
                        24      LOAD_DEREF                      4: sys_exc_info
                        26      CALL_FUNCTION                   0
                        28      LIST_EXTEND                     1
                        30      LOAD_FAST                       0: thread
                        32      LIST_APPEND                     1
                        34      CALL_FUNCTION                   1
                        36      STORE_FAST                      2: args
                        38      LOAD_FAST                       1: hook
                        40      LOAD_FAST                       2: args
                        42      CALL_FUNCTION                   1
                        44      POP_TOP                         
                        46      POP_BLOCK                       
                        48      JUMP_FORWARD                    65 (to 180)
                        50      DUP_TOP                         
                        52      LOAD_GLOBAL                     2: Exception
                        54      JUMP_IF_NOT_EXC_MATCH           89 (to 178)
                        56      POP_TOP                         
                        58      STORE_FAST                      3: exc
                        60      POP_TOP                         
                        62      SETUP_FINALLY                   53 (to 170)
                        64      LOAD_CONST                      1: True
                        66      LOAD_FAST                       3: exc
                        68      STORE_ATTR                      3: __suppress_context__
                        70      DELETE_FAST                     3: exc
                        72      LOAD_DEREF                      1: local_sys
                        74      LOAD_CONST                      0: None
                        76      IS_OP                           1 (is not)
                        78      POP_JUMP_IF_FALSE               49 (to 98)
                        80      LOAD_DEREF                      1: local_sys
                        82      LOAD_ATTR                       4: stderr
                        84      LOAD_CONST                      0: None
                        86      IS_OP                           1 (is not)
                        88      POP_JUMP_IF_FALSE               49 (to 98)
                        90      LOAD_DEREF                      1: local_sys
                        92      LOAD_ATTR                       4: stderr
                        94      STORE_FAST                      4: stderr
                        96      JUMP_FORWARD                    3 (to 104)
                        98      LOAD_FAST                       0: thread
                        100     LOAD_ATTR                       5: _stderr
                        102     STORE_FAST                      4: stderr
                        104     LOAD_DEREF                      0: local_print
                        106     LOAD_CONST                      2: 'Exception in threading.excepthook:'
                        108     LOAD_FAST                       4: stderr
                        110     LOAD_CONST                      1: True
                        112     LOAD_CONST                      3: ('file', 'flush')
                        114     CALL_FUNCTION_KW                3
                        116     POP_TOP                         
                        118     LOAD_DEREF                      1: local_sys
                        120     LOAD_CONST                      0: None
                        122     IS_OP                           1 (is not)
                        124     POP_JUMP_IF_FALSE               72 (to 144)
                        126     LOAD_DEREF                      1: local_sys
                        128     LOAD_ATTR                       0: excepthook
                        130     LOAD_CONST                      0: None
                        132     IS_OP                           1 (is not)
                        134     POP_JUMP_IF_FALSE               72 (to 144)
                        136     LOAD_DEREF                      1: local_sys
                        138     LOAD_ATTR                       0: excepthook
                        140     STORE_FAST                      5: sys_excepthook
                        142     JUMP_FORWARD                    2 (to 148)
                        144     LOAD_DEREF                      3: old_sys_excepthook
                        146     STORE_FAST                      5: sys_excepthook
                        148     LOAD_FAST                       5: sys_excepthook
                        150     LOAD_DEREF                      4: sys_exc_info
                        152     CALL_FUNCTION                   0
                        154     CALL_FUNCTION_EX                0
                        156     POP_TOP                         
                        158     POP_BLOCK                       
                        160     POP_EXCEPT                      
                        162     LOAD_CONST                      0: None
                        164     STORE_FAST                      3: exc
                        166     DELETE_FAST                     3: exc
                        168     JUMP_FORWARD                    10 (to 190)
                        170     LOAD_CONST                      0: None
                        172     STORE_FAST                      3: exc
                        174     DELETE_FAST                     3: exc
                        176     RERAISE                         1
                        178     RERAISE                         0
                        180     POP_BLOCK                       
                        182     LOAD_CONST                      0: None
                        184     STORE_FAST                      2: args
                        186     LOAD_CONST                      0: None
                        188     RETURN_VALUE                    
                        190     POP_BLOCK                       
                        192     LOAD_CONST                      0: None
                        194     STORE_FAST                      2: args
                        196     LOAD_CONST                      0: None
                        198     RETURN_VALUE                    
                        200     LOAD_CONST                      0: None
                        202     STORE_FAST                      2: args
                        204     RERAISE                         0
                '_make_invoke_excepthook.<locals>.invoke_excepthook'
            [Disassembly]
                0       LOAD_GLOBAL                     0: excepthook
                2       STORE_DEREF                     2: old_excepthook
                4       LOAD_GLOBAL                     1: _sys
                6       LOAD_ATTR                       0: excepthook
                8       STORE_DEREF                     3: old_sys_excepthook
                10      LOAD_DEREF                      2: old_excepthook
                12      LOAD_CONST                      0: None
                14      IS_OP                           0 (is)
                16      POP_JUMP_IF_FALSE               13 (to 26)
                18      LOAD_GLOBAL                     2: RuntimeError
                20      LOAD_CONST                      1: 'threading.excepthook is None'
                22      CALL_FUNCTION                   1
                24      RAISE_VARARGS                   1
                26      LOAD_DEREF                      3: old_sys_excepthook
                28      LOAD_CONST                      0: None
                30      IS_OP                           0 (is)
                32      POP_JUMP_IF_FALSE               21 (to 42)
                34      LOAD_GLOBAL                     2: RuntimeError
                36      LOAD_CONST                      2: 'sys.excepthook is None'
                38      CALL_FUNCTION                   1
                40      RAISE_VARARGS                   1
                42      LOAD_GLOBAL                     1: _sys
                44      LOAD_ATTR                       3: exc_info
                46      STORE_DEREF                     4: sys_exc_info
                48      LOAD_GLOBAL                     4: print
                50      STORE_DEREF                     0: local_print
                52      LOAD_GLOBAL                     1: _sys
                54      STORE_DEREF                     1: local_sys
                56      LOAD_CLOSURE                    0: local_print
                58      LOAD_CLOSURE                    1: local_sys
                60      LOAD_CLOSURE                    2: old_excepthook
                62      LOAD_CLOSURE                    3: old_sys_excepthook
                64      LOAD_CLOSURE                    4: sys_exc_info
                66      BUILD_TUPLE                     5
                68      LOAD_CONST                      3: <CODE> invoke_excepthook
                70      LOAD_CONST                      4: '_make_invoke_excepthook.<locals>.invoke_excepthook'
                72      MAKE_FUNCTION                   8
                74      STORE_FAST                      0: invoke_excepthook
                76      LOAD_FAST                       0: invoke_excepthook
                78      RETURN_VALUE                    
        '_make_invoke_excepthook'
        [Code]
            File Name: threading.py
            Object Name: Timer
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'cancel'
                'run'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Timer'
                "Call a function after a specified number of seconds:\n\n            t = Timer(30.0, f, args=None, kwargs=None)\n            t.start()\n            t.cancel()     # stop the timer's action if it's still waiting\n\n    "
                None
                [Code]
                    File Name: threading.py
                    Object Name: __init__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Thread'
                        '__init__'
                        'interval'
                        'function'
                        'args'
                        'kwargs'
                        'Event'
                        'finished'
                    [Var Names]
                        'self'
                        'interval'
                        'function'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Thread
                        2       LOAD_METHOD                     1: __init__
                        4       LOAD_FAST                       0: self
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_FAST                       1: interval
                        12      LOAD_FAST                       0: self
                        14      STORE_ATTR                      2: interval
                        16      LOAD_FAST                       2: function
                        18      LOAD_FAST                       0: self
                        20      STORE_ATTR                      3: function
                        22      LOAD_FAST                       3: args
                        24      LOAD_CONST                      0: None
                        26      IS_OP                           1 (is not)
                        28      POP_JUMP_IF_FALSE               17 (to 34)
                        30      LOAD_FAST                       3: args
                        32      JUMP_FORWARD                    1 (to 36)
                        34      BUILD_LIST                      0
                        36      LOAD_FAST                       0: self
                        38      STORE_ATTR                      4: args
                        40      LOAD_FAST                       4: kwargs
                        42      LOAD_CONST                      0: None
                        44      IS_OP                           1 (is not)
                        46      POP_JUMP_IF_FALSE               26 (to 52)
                        48      LOAD_FAST                       4: kwargs
                        50      JUMP_FORWARD                    1 (to 54)
                        52      BUILD_MAP                       0
                        54      LOAD_FAST                       0: self
                        56      STORE_ATTR                      5: kwargs
                        58      LOAD_GLOBAL                     6: Event
                        60      CALL_FUNCTION                   0
                        62      LOAD_FAST                       0: self
                        64      STORE_ATTR                      7: finished
                        66      LOAD_CONST                      0: None
                        68      RETURN_VALUE                    
                'Timer.__init__'
                [Code]
                    File Name: threading.py
                    Object Name: cancel
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'finished'
                        'set'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Stop the timer if it hasn't finished yet."
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: finished
                        4       LOAD_METHOD                     1: set
                        6       CALL_METHOD                     0
                        8       POP_TOP                         
                        10      LOAD_CONST                      1: None
                        12      RETURN_VALUE                    
                'Timer.cancel'
                [Code]
                    File Name: threading.py
                    Object Name: run
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'finished'
                        'wait'
                        'interval'
                        'is_set'
                        'function'
                        'args'
                        'kwargs'
                        'set'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: finished
                        4       LOAD_METHOD                     1: wait
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: interval
                        10      CALL_METHOD                     1
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       0: finished
                        18      LOAD_METHOD                     3: is_set
                        20      CALL_METHOD                     0
                        22      POP_JUMP_IF_TRUE                22 (to 44)
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       4: function
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       5: args
                        32      BUILD_MAP                       0
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       6: kwargs
                        38      DICT_MERGE                      1
                        40      CALL_FUNCTION_EX                1
                        42      POP_TOP                         
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       0: finished
                        48      LOAD_METHOD                     7: set
                        50      CALL_METHOD                     0
                        52      POP_TOP                         
                        54      LOAD_CONST                      0: None
                        56      RETURN_VALUE                    
                'Timer.run'
                (
                    None
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Timer'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Call a function after a specified number of seconds:\n\n            t = Timer(30.0, f, args=None, kwargs=None)\n            t.start()\n            t.cancel()     # stop the timer's action if it's still waiting\n\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      9: (None, None)
                14      LOAD_CONST                      3: <CODE> __init__
                16      LOAD_CONST                      4: 'Timer.__init__'
                18      MAKE_FUNCTION                   1
                20      STORE_NAME                      4: __init__
                22      LOAD_CONST                      5: <CODE> cancel
                24      LOAD_CONST                      6: 'Timer.cancel'
                26      MAKE_FUNCTION                   0
                28      STORE_NAME                      5: cancel
                30      LOAD_CONST                      7: <CODE> run
                32      LOAD_CONST                      8: 'Timer.run'
                34      MAKE_FUNCTION                   0
                36      STORE_NAME                      6: run
                38      LOAD_CONST                      2: None
                40      RETURN_VALUE                    
        'Timer'
        [Code]
            File Name: threading.py
            Object Name: _MainThread
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_MainThread'
                [Code]
                    File Name: threading.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Thread'
                        '__init__'
                        '_set_tstate_lock'
                        '_started'
                        'set'
                        '_set_ident'
                        '_HAVE_THREAD_NATIVE_ID'
                        '_set_native_id'
                        '_active_limbo_lock'
                        '_active'
                        '_ident'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'MainThread'
                        False
                        (
                            'name'
                            'daemon'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Thread
                        2       LOAD_ATTR                       1: __init__
                        4       LOAD_FAST                       0: self
                        6       LOAD_CONST                      1: 'MainThread'
                        8       LOAD_CONST                      2: False
                        10      LOAD_CONST                      3: ('name', 'daemon')
                        12      CALL_FUNCTION_KW                3
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     2: _set_tstate_lock
                        20      CALL_METHOD                     0
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       3: _started
                        28      LOAD_METHOD                     4: set
                        30      CALL_METHOD                     0
                        32      POP_TOP                         
                        34      LOAD_FAST                       0: self
                        36      LOAD_METHOD                     5: _set_ident
                        38      CALL_METHOD                     0
                        40      POP_TOP                         
                        42      LOAD_GLOBAL                     6: _HAVE_THREAD_NATIVE_ID
                        44      POP_JUMP_IF_FALSE               27 (to 54)
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     7: _set_native_id
                        50      CALL_METHOD                     0
                        52      POP_TOP                         
                        54      LOAD_GLOBAL                     8: _active_limbo_lock
                        56      SETUP_WITH                      14 (to 86)
                        58      POP_TOP                         
                        60      LOAD_FAST                       0: self
                        62      LOAD_GLOBAL                     9: _active
                        64      LOAD_FAST                       0: self
                        66      LOAD_ATTR                       10: _ident
                        68      STORE_SUBSCR                    
                        70      POP_BLOCK                       
                        72      LOAD_CONST                      0: None
                        74      DUP_TOP                         
                        76      DUP_TOP                         
                        78      CALL_FUNCTION                   3
                        80      POP_TOP                         
                        82      LOAD_CONST                      0: None
                        84      RETURN_VALUE                    
                        86      WITH_EXCEPT_START               
                        88      POP_JUMP_IF_TRUE                46 (to 92)
                        90      RERAISE                         1
                        92      POP_TOP                         
                        94      POP_TOP                         
                        96      POP_TOP                         
                        98      POP_EXCEPT                      
                        100     POP_TOP                         
                        102     LOAD_CONST                      0: None
                        104     RETURN_VALUE                    
                '_MainThread.__init__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_MainThread'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: <CODE> __init__
                10      LOAD_CONST                      2: '_MainThread.__init__'
                12      MAKE_FUNCTION                   0
                14      STORE_NAME                      3: __init__
                16      LOAD_CONST                      3: None
                18      RETURN_VALUE                    
        '_MainThread'
        [Code]
            File Name: threading.py
            Object Name: _DummyThread
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '_stop'
                'is_alive'
                'join'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_DummyThread'
                [Code]
                    File Name: threading.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Thread'
                        '__init__'
                        '_newname'
                        '_started'
                        'set'
                        '_set_ident'
                        '_HAVE_THREAD_NATIVE_ID'
                        '_set_native_id'
                        '_active_limbo_lock'
                        '_active'
                        '_ident'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Dummy-%d'
                        True
                        (
                            'name'
                            'daemon'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Thread
                        2       LOAD_ATTR                       1: __init__
                        4       LOAD_FAST                       0: self
                        6       LOAD_GLOBAL                     2: _newname
                        8       LOAD_CONST                      1: 'Dummy-%d'
                        10      CALL_FUNCTION                   1
                        12      LOAD_CONST                      2: True
                        14      LOAD_CONST                      3: ('name', 'daemon')
                        16      CALL_FUNCTION_KW                3
                        18      POP_TOP                         
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       3: _started
                        24      LOAD_METHOD                     4: set
                        26      CALL_METHOD                     0
                        28      POP_TOP                         
                        30      LOAD_FAST                       0: self
                        32      LOAD_METHOD                     5: _set_ident
                        34      CALL_METHOD                     0
                        36      POP_TOP                         
                        38      LOAD_GLOBAL                     6: _HAVE_THREAD_NATIVE_ID
                        40      POP_JUMP_IF_FALSE               25 (to 50)
                        42      LOAD_FAST                       0: self
                        44      LOAD_METHOD                     7: _set_native_id
                        46      CALL_METHOD                     0
                        48      POP_TOP                         
                        50      LOAD_GLOBAL                     8: _active_limbo_lock
                        52      SETUP_WITH                      14 (to 82)
                        54      POP_TOP                         
                        56      LOAD_FAST                       0: self
                        58      LOAD_GLOBAL                     9: _active
                        60      LOAD_FAST                       0: self
                        62      LOAD_ATTR                       10: _ident
                        64      STORE_SUBSCR                    
                        66      POP_BLOCK                       
                        68      LOAD_CONST                      0: None
                        70      DUP_TOP                         
                        72      DUP_TOP                         
                        74      CALL_FUNCTION                   3
                        76      POP_TOP                         
                        78      LOAD_CONST                      0: None
                        80      RETURN_VALUE                    
                        82      WITH_EXCEPT_START               
                        84      POP_JUMP_IF_TRUE                44 (to 88)
                        86      RERAISE                         1
                        88      POP_TOP                         
                        90      POP_TOP                         
                        92      POP_TOP                         
                        94      POP_EXCEPT                      
                        96      POP_TOP                         
                        98      LOAD_CONST                      0: None
                        100     RETURN_VALUE                    
                '_DummyThread.__init__'
                [Code]
                    File Name: threading.py
                    Object Name: _stop
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                '_DummyThread._stop'
                [Code]
                    File Name: threading.py
                    Object Name: is_alive
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_stopped'
                        '_started'
                        'is_set'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _is_stopped
                        4       POP_JUMP_IF_TRUE                8 (to 16)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _started
                        10      LOAD_METHOD                     2: is_set
                        12      CALL_METHOD                     0
                        14      POP_JUMP_IF_TRUE                10 (to 20)
                        16      LOAD_ASSERTION_ERROR            
                        18      RAISE_VARARGS                   1
                        20      LOAD_CONST                      1: True
                        22      RETURN_VALUE                    
                '_DummyThread.is_alive'
                None
                [Code]
                    File Name: threading.py
                    Object Name: join
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'timeout'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        'cannot join a dummy thread'
                    [Disassembly]
                        0       LOAD_ASSERTION_ERROR            
                        2       LOAD_CONST                      2: 'cannot join a dummy thread'
                        4       CALL_FUNCTION                   1
                        6       RAISE_VARARGS                   1
                '_DummyThread.join'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_DummyThread'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: <CODE> __init__
                10      LOAD_CONST                      2: '_DummyThread.__init__'
                12      MAKE_FUNCTION                   0
                14      STORE_NAME                      3: __init__
                16      LOAD_CONST                      3: <CODE> _stop
                18      LOAD_CONST                      4: '_DummyThread._stop'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      4: _stop
                24      LOAD_CONST                      5: <CODE> is_alive
                26      LOAD_CONST                      6: '_DummyThread.is_alive'
                28      MAKE_FUNCTION                   0
                30      STORE_NAME                      5: is_alive
                32      LOAD_CONST                      10: (None,)
                34      LOAD_CONST                      8: <CODE> join
                36      LOAD_CONST                      9: '_DummyThread.join'
                38      MAKE_FUNCTION                   1
                40      STORE_NAME                      6: join
                42      LOAD_CONST                      7: None
                44      RETURN_VALUE                    
        '_DummyThread'
        [Code]
            File Name: threading.py
            Object Name: current_thread
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_active'
                'get_ident'
                'KeyError'
                '_DummyThread'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Return the current Thread object, corresponding to the caller's thread of control.\n\n    If the caller's thread of control was not created through the threading\n    module, a dummy thread object with limited functionality is returned.\n\n    "
            [Disassembly]
                0       SETUP_FINALLY                   6 (to 14)
                2       LOAD_GLOBAL                     0: _active
                4       LOAD_GLOBAL                     1: get_ident
                6       CALL_FUNCTION                   0
                8       BINARY_SUBSCR                   
                10      POP_BLOCK                       
                12      RETURN_VALUE                    
                14      DUP_TOP                         
                16      LOAD_GLOBAL                     2: KeyError
                18      JUMP_IF_NOT_EXC_MATCH           18 (to 36)
                20      POP_TOP                         
                22      POP_TOP                         
                24      POP_TOP                         
                26      LOAD_GLOBAL                     3: _DummyThread
                28      CALL_FUNCTION                   0
                30      ROT_FOUR                        
                32      POP_EXCEPT                      
                34      RETURN_VALUE                    
                36      RERAISE                         0
        'current_thread'
        [Code]
            File Name: threading.py
            Object Name: currentThread
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                'current_thread'
            [Var Names]
                'warnings'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Return the current Thread object, corresponding to the caller's thread of control.\n\n    This function is deprecated, use current_thread() instead.\n\n    "
                0
                None
                'currentThread() is deprecated, use current_thread() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_CONST                      1: 0
                2       LOAD_CONST                      2: None
                4       IMPORT_NAME                     0: warnings
                6       STORE_FAST                      0: warnings
                8       LOAD_FAST                       0: warnings
                10      LOAD_ATTR                       1: warn
                12      LOAD_CONST                      3: 'currentThread() is deprecated, use current_thread() instead'
                14      LOAD_GLOBAL                     2: DeprecationWarning
                16      LOAD_CONST                      4: 2
                18      LOAD_CONST                      5: ('stacklevel',)
                20      CALL_FUNCTION_KW                3
                22      POP_TOP                         
                24      LOAD_GLOBAL                     3: current_thread
                26      CALL_FUNCTION                   0
                28      RETURN_VALUE                    
        'currentThread'
        [Code]
            File Name: threading.py
            Object Name: active_count
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_active_limbo_lock'
                'len'
                '_active'
                '_limbo'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the number of Thread objects currently alive.\n\n    The returned count is equal to the length of the list returned by\n    enumerate().\n\n    '
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _active_limbo_lock
                2       SETUP_WITH                      16 (to 36)
                4       POP_TOP                         
                6       LOAD_GLOBAL                     1: len
                8       LOAD_GLOBAL                     2: _active
                10      CALL_FUNCTION                   1
                12      LOAD_GLOBAL                     1: len
                14      LOAD_GLOBAL                     3: _limbo
                16      CALL_FUNCTION                   1
                18      BINARY_ADD                      
                20      POP_BLOCK                       
                22      ROT_TWO                         
                24      LOAD_CONST                      1: None
                26      DUP_TOP                         
                28      DUP_TOP                         
                30      CALL_FUNCTION                   3
                32      POP_TOP                         
                34      RETURN_VALUE                    
                36      WITH_EXCEPT_START               
                38      POP_JUMP_IF_TRUE                21 (to 42)
                40      RERAISE                         1
                42      POP_TOP                         
                44      POP_TOP                         
                46      POP_TOP                         
                48      POP_EXCEPT                      
                50      POP_TOP                         
                52      LOAD_CONST                      1: None
                54      RETURN_VALUE                    
        'active_count'
        [Code]
            File Name: threading.py
            Object Name: activeCount
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                'active_count'
            [Var Names]
                'warnings'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the number of Thread objects currently alive.\n\n    This function is deprecated, use active_count() instead.\n\n    '
                0
                None
                'activeCount() is deprecated, use active_count() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_CONST                      1: 0
                2       LOAD_CONST                      2: None
                4       IMPORT_NAME                     0: warnings
                6       STORE_FAST                      0: warnings
                8       LOAD_FAST                       0: warnings
                10      LOAD_ATTR                       1: warn
                12      LOAD_CONST                      3: 'activeCount() is deprecated, use active_count() instead'
                14      LOAD_GLOBAL                     2: DeprecationWarning
                16      LOAD_CONST                      4: 2
                18      LOAD_CONST                      5: ('stacklevel',)
                20      CALL_FUNCTION_KW                3
                22      POP_TOP                         
                24      LOAD_GLOBAL                     3: active_count
                26      CALL_FUNCTION                   0
                28      RETURN_VALUE                    
        'activeCount'
        [Code]
            File Name: threading.py
            Object Name: _enumerate
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'list'
                '_active'
                'values'
                '_limbo'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: list
                2       LOAD_GLOBAL                     1: _active
                4       LOAD_METHOD                     2: values
                6       CALL_METHOD                     0
                8       CALL_FUNCTION                   1
                10      LOAD_GLOBAL                     0: list
                12      LOAD_GLOBAL                     3: _limbo
                14      LOAD_METHOD                     2: values
                16      CALL_METHOD                     0
                18      CALL_FUNCTION                   1
                20      BINARY_ADD                      
                22      RETURN_VALUE                    
        '_enumerate'
        [Code]
            File Name: threading.py
            Object Name: enumerate
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_active_limbo_lock'
                'list'
                '_active'
                'values'
                '_limbo'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return a list of all Thread objects currently alive.\n\n    The list includes daemonic threads, dummy thread objects created by\n    current_thread(), and the main thread. It excludes terminated threads and\n    threads that have not yet been started.\n\n    '
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _active_limbo_lock
                2       SETUP_WITH                      20 (to 44)
                4       POP_TOP                         
                6       LOAD_GLOBAL                     1: list
                8       LOAD_GLOBAL                     2: _active
                10      LOAD_METHOD                     3: values
                12      CALL_METHOD                     0
                14      CALL_FUNCTION                   1
                16      LOAD_GLOBAL                     1: list
                18      LOAD_GLOBAL                     4: _limbo
                20      LOAD_METHOD                     3: values
                22      CALL_METHOD                     0
                24      CALL_FUNCTION                   1
                26      BINARY_ADD                      
                28      POP_BLOCK                       
                30      ROT_TWO                         
                32      LOAD_CONST                      1: None
                34      DUP_TOP                         
                36      DUP_TOP                         
                38      CALL_FUNCTION                   3
                40      POP_TOP                         
                42      RETURN_VALUE                    
                44      WITH_EXCEPT_START               
                46      POP_JUMP_IF_TRUE                25 (to 50)
                48      RERAISE                         1
                50      POP_TOP                         
                52      POP_TOP                         
                54      POP_TOP                         
                56      POP_EXCEPT                      
                58      POP_TOP                         
                60      LOAD_CONST                      1: None
                62      RETURN_VALUE                    
        'enumerate'
        [Code]
            File Name: threading.py
            Object Name: _register_atexit
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 4
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                '_SHUTTING_DOWN'
                'RuntimeError'
                'functools'
                'partial'
                '_threading_atexits'
                'append'
            [Var Names]
                'func'
                'arg'
                'kwargs'
                'call'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'CPython internal: register *func* to be called before joining threads.\n\n    The registered *func* is called with its arguments just before all\n    non-daemon threads are joined in `_shutdown()`. It provides a similar\n    purpose to `atexit.register()`, but its functions are called prior to\n    threading shutdown instead of interpreter shutdown.\n\n    For similarity to atexit, the registered functions are called in reverse.\n    '
                "can't register atexit after shutdown"
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _SHUTTING_DOWN
                2       POP_JUMP_IF_FALSE               6 (to 12)
                4       LOAD_GLOBAL                     1: RuntimeError
                6       LOAD_CONST                      1: "can't register atexit after shutdown"
                8       CALL_FUNCTION                   1
                10      RAISE_VARARGS                   1
                12      LOAD_GLOBAL                     2: functools
                14      LOAD_ATTR                       3: partial
                16      LOAD_FAST                       0: func
                18      BUILD_LIST                      1
                20      LOAD_FAST                       1: arg
                22      LIST_EXTEND                     1
                24      LIST_TO_TUPLE                   
                26      BUILD_MAP                       0
                28      LOAD_FAST                       2: kwargs
                30      DICT_MERGE                      1
                32      CALL_FUNCTION_EX                1
                34      STORE_FAST                      3: call
                36      LOAD_GLOBAL                     4: _threading_atexits
                38      LOAD_METHOD                     5: append
                40      LOAD_FAST                       3: call
                42      CALL_METHOD                     1
                44      POP_TOP                         
                46      LOAD_CONST                      2: None
                48      RETURN_VALUE                    
        '_register_atexit'
        (
            'stack_size'
        )
        [Code]
            File Name: threading.py
            Object Name: _shutdown
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_main_thread'
                '_is_stopped'
                '_SHUTTING_DOWN'
                'reversed'
                '_threading_atexits'
                'ident'
                'get_ident'
                '_tstate_lock'
                'locked'
                'release'
                '_stop'
                '_shutdown_locks_lock'
                'list'
                '_shutdown_locks'
                'clear'
                'acquire'
            [Var Names]
                'atexit_call'
                'tlock'
                'locks'
                'lock'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Wait until the Python thread state of all non-daemon threads get deleted.\n    '
                None
                True
            [Disassembly]
                0       LOAD_GLOBAL                     0: _main_thread
                2       LOAD_ATTR                       1: _is_stopped
                4       POP_JUMP_IF_FALSE               5 (to 10)
                6       LOAD_CONST                      1: None
                8       RETURN_VALUE                    
                10      LOAD_CONST                      2: True
                12      STORE_GLOBAL                    2: _SHUTTING_DOWN
                14      LOAD_GLOBAL                     3: reversed
                16      LOAD_GLOBAL                     4: _threading_atexits
                18      CALL_FUNCTION                   1
                20      GET_ITER                        
                22      FOR_ITER                        5 (to 34)
                24      STORE_FAST                      0: atexit_call
                26      LOAD_FAST                       0: atexit_call
                28      CALL_FUNCTION                   0
                30      POP_TOP                         
                32      JUMP_ABSOLUTE                   11 (to 22)
                34      LOAD_GLOBAL                     0: _main_thread
                36      LOAD_ATTR                       5: ident
                38      LOAD_GLOBAL                     6: get_ident
                40      CALL_FUNCTION                   0
                42      COMPARE_OP                      2 (==)
                44      POP_JUMP_IF_FALSE               47 (to 94)
                46      LOAD_GLOBAL                     0: _main_thread
                48      LOAD_ATTR                       7: _tstate_lock
                50      STORE_FAST                      1: tlock
                52      LOAD_FAST                       1: tlock
                54      LOAD_CONST                      1: None
                56      IS_OP                           1 (is not)
                58      POP_JUMP_IF_TRUE                32 (to 64)
                60      LOAD_ASSERTION_ERROR            
                62      RAISE_VARARGS                   1
                64      LOAD_FAST                       1: tlock
                66      LOAD_METHOD                     8: locked
                68      CALL_METHOD                     0
                70      POP_JUMP_IF_TRUE                38 (to 76)
                72      LOAD_ASSERTION_ERROR            
                74      RAISE_VARARGS                   1
                76      LOAD_FAST                       1: tlock
                78      LOAD_METHOD                     9: release
                80      CALL_METHOD                     0
                82      POP_TOP                         
                84      LOAD_GLOBAL                     0: _main_thread
                86      LOAD_METHOD                     10: _stop
                88      CALL_METHOD                     0
                90      POP_TOP                         
                92      JUMP_FORWARD                    1 (to 96)
                94      NOP                             
                96      NOP                             
                98      LOAD_GLOBAL                     11: _shutdown_locks_lock
                100     SETUP_WITH                      16 (to 134)
                102     POP_TOP                         
                104     LOAD_GLOBAL                     12: list
                106     LOAD_GLOBAL                     13: _shutdown_locks
                108     CALL_FUNCTION                   1
                110     STORE_FAST                      2: locks
                112     LOAD_GLOBAL                     13: _shutdown_locks
                114     LOAD_METHOD                     14: clear
                116     CALL_METHOD                     0
                118     POP_TOP                         
                120     POP_BLOCK                       
                122     LOAD_CONST                      1: None
                124     DUP_TOP                         
                126     DUP_TOP                         
                128     CALL_FUNCTION                   3
                130     POP_TOP                         
                132     JUMP_FORWARD                    8 (to 150)
                134     WITH_EXCEPT_START               
                136     POP_JUMP_IF_TRUE                70 (to 140)
                138     RERAISE                         1
                140     POP_TOP                         
                142     POP_TOP                         
                144     POP_TOP                         
                146     POP_EXCEPT                      
                148     POP_TOP                         
                150     LOAD_FAST                       2: locks
                152     POP_JUMP_IF_TRUE                79 (to 158)
                154     LOAD_CONST                      1: None
                156     RETURN_VALUE                    
                158     LOAD_FAST                       2: locks
                160     GET_ITER                        
                162     FOR_ITER                        10 (to 184)
                164     STORE_FAST                      3: lock
                166     LOAD_FAST                       3: lock
                168     LOAD_METHOD                     15: acquire
                170     CALL_METHOD                     0
                172     POP_TOP                         
                174     LOAD_FAST                       3: lock
                176     LOAD_METHOD                     9: release
                178     CALL_METHOD                     0
                180     POP_TOP                         
                182     JUMP_ABSOLUTE                   81 (to 162)
                184     JUMP_ABSOLUTE                   49 (to 98)
        '_shutdown'
        [Code]
            File Name: threading.py
            Object Name: main_thread
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_main_thread'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the main thread object.\n\n    In normal conditions, the main thread is the thread from which the\n    Python interpreter was started.\n    '
            [Disassembly]
                0       LOAD_GLOBAL                     0: _main_thread
                2       RETURN_VALUE                    
        'main_thread'
        (
            '_local'
        )
        (
            'local'
        )
        [Code]
            File Name: threading.py
            Object Name: _after_fork
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'RLock'
                '_active_limbo_lock'
                '_active'
                'get_ident'
                'KeyError'
                '_MainThread'
                '_main_thread'
                '_allocate_lock'
                '_shutdown_locks_lock'
                'set'
                '_shutdown_locks'
                '_enumerate'
                'update'
                '_dangling'
                '_reset_internal_locks'
                '_ident'
                '_stop'
                '_limbo'
                'clear'
                'len'
            [Var Names]
                'new_active'
                'current'
                'threads'
                'thread'
                'ident'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Cleanup threading module state that should not exist after a fork.\n    '
                True
                False
                1
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: RLock
                2       CALL_FUNCTION                   0
                4       STORE_GLOBAL                    1: _active_limbo_lock
                6       BUILD_MAP                       0
                8       STORE_FAST                      0: new_active
                10      SETUP_FINALLY                   7 (to 26)
                12      LOAD_GLOBAL                     2: _active
                14      LOAD_GLOBAL                     3: get_ident
                16      CALL_FUNCTION                   0
                18      BINARY_SUBSCR                   
                20      STORE_FAST                      1: current
                22      POP_BLOCK                       
                24      JUMP_FORWARD                    12 (to 50)
                26      DUP_TOP                         
                28      LOAD_GLOBAL                     4: KeyError
                30      JUMP_IF_NOT_EXC_MATCH           24 (to 48)
                32      POP_TOP                         
                34      POP_TOP                         
                36      POP_TOP                         
                38      LOAD_GLOBAL                     5: _MainThread
                40      CALL_FUNCTION                   0
                42      STORE_FAST                      1: current
                44      POP_EXCEPT                      
                46      JUMP_FORWARD                    1 (to 50)
                48      RERAISE                         0
                50      LOAD_FAST                       1: current
                52      STORE_GLOBAL                    6: _main_thread
                54      LOAD_GLOBAL                     7: _allocate_lock
                56      CALL_FUNCTION                   0
                58      STORE_GLOBAL                    8: _shutdown_locks_lock
                60      LOAD_GLOBAL                     9: set
                62      CALL_FUNCTION                   0
                64      STORE_GLOBAL                    10: _shutdown_locks
                66      LOAD_GLOBAL                     1: _active_limbo_lock
                68      SETUP_WITH                      74 (to 218)
                70      POP_TOP                         
                72      LOAD_GLOBAL                     9: set
                74      LOAD_GLOBAL                     11: _enumerate
                76      CALL_FUNCTION                   0
                78      CALL_FUNCTION                   1
                80      STORE_FAST                      2: threads
                82      LOAD_FAST                       2: threads
                84      LOAD_METHOD                     12: update
                86      LOAD_GLOBAL                     13: _dangling
                88      CALL_METHOD                     1
                90      POP_TOP                         
                92      LOAD_FAST                       2: threads
                94      GET_ITER                        
                96      FOR_ITER                        31 (to 160)
                98      STORE_FAST                      3: thread
                100     LOAD_FAST                       3: thread
                102     LOAD_FAST                       1: current
                104     IS_OP                           0 (is)
                106     POP_JUMP_IF_FALSE               70 (to 140)
                108     LOAD_FAST                       3: thread
                110     LOAD_METHOD                     14: _reset_internal_locks
                112     LOAD_CONST                      1: True
                114     CALL_METHOD                     1
                116     POP_TOP                         
                118     LOAD_GLOBAL                     3: get_ident
                120     CALL_FUNCTION                   0
                122     STORE_FAST                      4: ident
                124     LOAD_FAST                       4: ident
                126     LOAD_FAST                       3: thread
                128     STORE_ATTR                      15: _ident
                130     LOAD_FAST                       3: thread
                132     LOAD_FAST                       0: new_active
                134     LOAD_FAST                       4: ident
                136     STORE_SUBSCR                    
                138     JUMP_ABSOLUTE                   48 (to 96)
                140     LOAD_FAST                       3: thread
                142     LOAD_METHOD                     14: _reset_internal_locks
                144     LOAD_CONST                      2: False
                146     CALL_METHOD                     1
                148     POP_TOP                         
                150     LOAD_FAST                       3: thread
                152     LOAD_METHOD                     16: _stop
                154     CALL_METHOD                     0
                156     POP_TOP                         
                158     JUMP_ABSOLUTE                   48 (to 96)
                160     LOAD_GLOBAL                     17: _limbo
                162     LOAD_METHOD                     18: clear
                164     CALL_METHOD                     0
                166     POP_TOP                         
                168     LOAD_GLOBAL                     2: _active
                170     LOAD_METHOD                     18: clear
                172     CALL_METHOD                     0
                174     POP_TOP                         
                176     LOAD_GLOBAL                     2: _active
                178     LOAD_METHOD                     12: update
                180     LOAD_FAST                       0: new_active
                182     CALL_METHOD                     1
                184     POP_TOP                         
                186     LOAD_GLOBAL                     19: len
                188     LOAD_GLOBAL                     2: _active
                190     CALL_FUNCTION                   1
                192     LOAD_CONST                      3: 1
                194     COMPARE_OP                      2 (==)
                196     POP_JUMP_IF_TRUE                101 (to 202)
                198     LOAD_ASSERTION_ERROR            
                200     RAISE_VARARGS                   1
                202     POP_BLOCK                       
                204     LOAD_CONST                      4: None
                206     DUP_TOP                         
                208     DUP_TOP                         
                210     CALL_FUNCTION                   3
                212     POP_TOP                         
                214     LOAD_CONST                      4: None
                216     RETURN_VALUE                    
                218     WITH_EXCEPT_START               
                220     POP_JUMP_IF_TRUE                112 (to 224)
                222     RERAISE                         1
                224     POP_TOP                         
                226     POP_TOP                         
                228     POP_TOP                         
                230     POP_EXCEPT                      
                232     POP_TOP                         
                234     LOAD_CONST                      4: None
                236     RETURN_VALUE                    
        '_after_fork'
        'register_at_fork'
        (
            'after_in_child'
        )
    [Disassembly]
        0       LOAD_CONST                      0: "Thread module emulating a subset of Java's threading model."
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: 0
        6       LOAD_CONST                      2: None
        8       IMPORT_NAME                     1: os
        10      STORE_NAME                      2: _os
        12      LOAD_CONST                      1: 0
        14      LOAD_CONST                      2: None
        16      IMPORT_NAME                     3: sys
        18      STORE_NAME                      4: _sys
        20      LOAD_CONST                      1: 0
        22      LOAD_CONST                      2: None
        24      IMPORT_NAME                     5: _thread
        26      STORE_NAME                      5: _thread
        28      LOAD_CONST                      1: 0
        30      LOAD_CONST                      2: None
        32      IMPORT_NAME                     6: functools
        34      STORE_NAME                      6: functools
        36      LOAD_CONST                      1: 0
        38      LOAD_CONST                      3: ('monotonic',)
        40      IMPORT_NAME                     7: time
        42      IMPORT_FROM                     8: monotonic
        44      STORE_NAME                      9: _time
        46      POP_TOP                         
        48      LOAD_CONST                      1: 0
        50      LOAD_CONST                      4: ('WeakSet',)
        52      IMPORT_NAME                     10: _weakrefset
        54      IMPORT_FROM                     11: WeakSet
        56      STORE_NAME                      11: WeakSet
        58      POP_TOP                         
        60      LOAD_CONST                      1: 0
        62      LOAD_CONST                      5: ('islice', 'count')
        64      IMPORT_NAME                     12: itertools
        66      IMPORT_FROM                     13: islice
        68      STORE_NAME                      14: _islice
        70      IMPORT_FROM                     15: count
        72      STORE_NAME                      16: _count
        74      POP_TOP                         
        76      SETUP_FINALLY                   8 (to 94)
        78      LOAD_CONST                      1: 0
        80      LOAD_CONST                      6: ('deque',)
        82      IMPORT_NAME                     17: _collections
        84      IMPORT_FROM                     18: deque
        86      STORE_NAME                      19: _deque
        88      POP_TOP                         
        90      POP_BLOCK                       
        92      JUMP_FORWARD                    15 (to 124)
        94      DUP_TOP                         
        96      LOAD_NAME                       20: ImportError
        98      JUMP_IF_NOT_EXC_MATCH           61 (to 122)
        100     POP_TOP                         
        102     POP_TOP                         
        104     POP_TOP                         
        106     LOAD_CONST                      1: 0
        108     LOAD_CONST                      6: ('deque',)
        110     IMPORT_NAME                     21: collections
        112     IMPORT_FROM                     18: deque
        114     STORE_NAME                      19: _deque
        116     POP_TOP                         
        118     POP_EXCEPT                      
        120     JUMP_FORWARD                    1 (to 124)
        122     RERAISE                         0
        124     BUILD_LIST                      0
        126     LOAD_CONST                      7: ('get_ident', 'active_count', 'Condition', 'current_thread', 'enumerate', 'main_thread', 'TIMEOUT_MAX', 'Event', 'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Thread', 'Barrier', 'BrokenBarrierError', 'Timer', 'ThreadError', 'setprofile', 'settrace', 'local', 'stack_size', 'excepthook', 'ExceptHookArgs', 'gettrace', 'getprofile')
        128     LIST_EXTEND                     1
        130     STORE_NAME                      22: __all__
        132     LOAD_NAME                       5: _thread
        134     LOAD_ATTR                       23: start_new_thread
        136     STORE_NAME                      24: _start_new_thread
        138     LOAD_NAME                       5: _thread
        140     LOAD_ATTR                       25: allocate_lock
        142     STORE_NAME                      26: _allocate_lock
        144     LOAD_NAME                       5: _thread
        146     LOAD_ATTR                       27: _set_sentinel
        148     STORE_NAME                      27: _set_sentinel
        150     LOAD_NAME                       5: _thread
        152     LOAD_ATTR                       28: get_ident
        154     STORE_NAME                      28: get_ident
        156     SETUP_FINALLY                   12 (to 182)
        158     LOAD_NAME                       5: _thread
        160     LOAD_ATTR                       29: get_native_id
        162     STORE_NAME                      29: get_native_id
        164     LOAD_CONST                      8: True
        166     STORE_NAME                      30: _HAVE_THREAD_NATIVE_ID
        168     LOAD_NAME                       22: __all__
        170     LOAD_METHOD                     31: append
        172     LOAD_CONST                      9: 'get_native_id'
        174     CALL_METHOD                     1
        176     POP_TOP                         
        178     POP_BLOCK                       
        180     JUMP_FORWARD                    11 (to 204)
        182     DUP_TOP                         
        184     LOAD_NAME                       32: AttributeError
        186     JUMP_IF_NOT_EXC_MATCH           101 (to 202)
        188     POP_TOP                         
        190     POP_TOP                         
        192     POP_TOP                         
        194     LOAD_CONST                      10: False
        196     STORE_NAME                      30: _HAVE_THREAD_NATIVE_ID
        198     POP_EXCEPT                      
        200     JUMP_FORWARD                    1 (to 204)
        202     RERAISE                         0
        204     LOAD_NAME                       5: _thread
        206     LOAD_ATTR                       33: error
        208     STORE_NAME                      34: ThreadError
        210     SETUP_FINALLY                   5 (to 222)
        212     LOAD_NAME                       5: _thread
        214     LOAD_ATTR                       35: RLock
        216     STORE_NAME                      36: _CRLock
        218     POP_BLOCK                       
        220     JUMP_FORWARD                    11 (to 244)
        222     DUP_TOP                         
        224     LOAD_NAME                       32: AttributeError
        226     JUMP_IF_NOT_EXC_MATCH           121 (to 242)
        228     POP_TOP                         
        230     POP_TOP                         
        232     POP_TOP                         
        234     LOAD_CONST                      2: None
        236     STORE_NAME                      36: _CRLock
        238     POP_EXCEPT                      
        240     JUMP_FORWARD                    1 (to 244)
        242     RERAISE                         0
        244     LOAD_NAME                       5: _thread
        246     LOAD_ATTR                       37: TIMEOUT_MAX
        248     STORE_NAME                      37: TIMEOUT_MAX
        250     DELETE_NAME                     5: _thread
        252     LOAD_CONST                      2: None
        254     STORE_GLOBAL                    38: _profile_hook
        256     LOAD_CONST                      2: None
        258     STORE_GLOBAL                    39: _trace_hook
        260     LOAD_CONST                      11: <CODE> setprofile
        262     LOAD_CONST                      12: 'setprofile'
        264     MAKE_FUNCTION                   0
        266     STORE_NAME                      40: setprofile
        268     LOAD_CONST                      13: <CODE> getprofile
        270     LOAD_CONST                      14: 'getprofile'
        272     MAKE_FUNCTION                   0
        274     STORE_NAME                      41: getprofile
        276     LOAD_CONST                      15: <CODE> settrace
        278     LOAD_CONST                      16: 'settrace'
        280     MAKE_FUNCTION                   0
        282     STORE_NAME                      42: settrace
        284     LOAD_CONST                      17: <CODE> gettrace
        286     LOAD_CONST                      18: 'gettrace'
        288     MAKE_FUNCTION                   0
        290     STORE_NAME                      43: gettrace
        292     LOAD_NAME                       26: _allocate_lock
        294     STORE_NAME                      44: Lock
        296     LOAD_CONST                      19: <CODE> RLock
        298     LOAD_CONST                      20: 'RLock'
        300     MAKE_FUNCTION                   0
        302     STORE_NAME                      35: RLock
        304     LOAD_BUILD_CLASS                
        306     LOAD_CONST                      21: <CODE> _RLock
        308     LOAD_CONST                      22: '_RLock'
        310     MAKE_FUNCTION                   0
        312     LOAD_CONST                      22: '_RLock'
        314     CALL_FUNCTION                   2
        316     STORE_NAME                      45: _RLock
        318     LOAD_NAME                       45: _RLock
        320     STORE_NAME                      46: _PyRLock
        322     LOAD_BUILD_CLASS                
        324     LOAD_CONST                      23: <CODE> Condition
        326     LOAD_CONST                      24: 'Condition'
        328     MAKE_FUNCTION                   0
        330     LOAD_CONST                      24: 'Condition'
        332     CALL_FUNCTION                   2
        334     STORE_NAME                      47: Condition
        336     LOAD_BUILD_CLASS                
        338     LOAD_CONST                      25: <CODE> Semaphore
        340     LOAD_CONST                      26: 'Semaphore'
        342     MAKE_FUNCTION                   0
        344     LOAD_CONST                      26: 'Semaphore'
        346     CALL_FUNCTION                   2
        348     STORE_NAME                      48: Semaphore
        350     LOAD_BUILD_CLASS                
        352     LOAD_CONST                      27: <CODE> BoundedSemaphore
        354     LOAD_CONST                      28: 'BoundedSemaphore'
        356     MAKE_FUNCTION                   0
        358     LOAD_CONST                      28: 'BoundedSemaphore'
        360     LOAD_NAME                       48: Semaphore
        362     CALL_FUNCTION                   3
        364     STORE_NAME                      49: BoundedSemaphore
        366     LOAD_BUILD_CLASS                
        368     LOAD_CONST                      29: <CODE> Event
        370     LOAD_CONST                      30: 'Event'
        372     MAKE_FUNCTION                   0
        374     LOAD_CONST                      30: 'Event'
        376     CALL_FUNCTION                   2
        378     STORE_NAME                      50: Event
        380     LOAD_BUILD_CLASS                
        382     LOAD_CONST                      31: <CODE> Barrier
        384     LOAD_CONST                      32: 'Barrier'
        386     MAKE_FUNCTION                   0
        388     LOAD_CONST                      32: 'Barrier'
        390     CALL_FUNCTION                   2
        392     STORE_NAME                      51: Barrier
        394     LOAD_BUILD_CLASS                
        396     LOAD_CONST                      33: <CODE> BrokenBarrierError
        398     LOAD_CONST                      34: 'BrokenBarrierError'
        400     MAKE_FUNCTION                   0
        402     LOAD_CONST                      34: 'BrokenBarrierError'
        404     LOAD_NAME                       52: RuntimeError
        406     CALL_FUNCTION                   3
        408     STORE_NAME                      53: BrokenBarrierError
        410     LOAD_NAME                       16: _count
        412     LOAD_CONST                      35: 1
        414     CALL_FUNCTION                   1
        416     LOAD_ATTR                       54: __next__
        418     STORE_NAME                      55: _counter
        420     LOAD_CONST                      36: <CODE> _newname
        422     LOAD_CONST                      37: '_newname'
        424     MAKE_FUNCTION                   0
        426     STORE_NAME                      56: _newname
        428     LOAD_NAME                       35: RLock
        430     CALL_FUNCTION                   0
        432     STORE_GLOBAL                    57: _active_limbo_lock
        434     BUILD_MAP                       0
        436     STORE_NAME                      58: _active
        438     BUILD_MAP                       0
        440     STORE_NAME                      59: _limbo
        442     LOAD_NAME                       11: WeakSet
        444     CALL_FUNCTION                   0
        446     STORE_NAME                      60: _dangling
        448     LOAD_NAME                       26: _allocate_lock
        450     CALL_FUNCTION                   0
        452     STORE_GLOBAL                    61: _shutdown_locks_lock
        454     LOAD_NAME                       62: set
        456     CALL_FUNCTION                   0
        458     STORE_GLOBAL                    63: _shutdown_locks
        460     LOAD_CONST                      38: <CODE> _maintain_shutdown_locks
        462     LOAD_CONST                      39: '_maintain_shutdown_locks'
        464     MAKE_FUNCTION                   0
        466     STORE_NAME                      64: _maintain_shutdown_locks
        468     LOAD_BUILD_CLASS                
        470     LOAD_CONST                      40: <CODE> Thread
        472     LOAD_CONST                      41: 'Thread'
        474     MAKE_FUNCTION                   0
        476     LOAD_CONST                      41: 'Thread'
        478     CALL_FUNCTION                   2
        480     STORE_NAME                      65: Thread
        482     SETUP_FINALLY                   10 (to 504)
        484     LOAD_CONST                      1: 0
        486     LOAD_CONST                      42: ('_excepthook', '_ExceptHookArgs')
        488     IMPORT_NAME                     5: _thread
        490     IMPORT_FROM                     66: _excepthook
        492     STORE_GLOBAL                    67: excepthook
        494     IMPORT_FROM                     68: _ExceptHookArgs
        496     STORE_NAME                      69: ExceptHookArgs
        498     POP_TOP                         
        500     POP_BLOCK                       
        502     JUMP_FORWARD                    35 (to 574)
        504     DUP_TOP                         
        506     LOAD_NAME                       20: ImportError
        508     JUMP_IF_NOT_EXC_MATCH           286 (to 572)
        512     POP_TOP                         
        514     POP_TOP                         
        516     POP_TOP                         
        518     LOAD_CONST                      1: 0
        520     LOAD_CONST                      43: ('print_exception',)
        522     IMPORT_NAME                     70: traceback
        524     IMPORT_FROM                     71: print_exception
        526     STORE_NAME                      72: _print_exception
        528     POP_TOP                         
        530     LOAD_CONST                      1: 0
        532     LOAD_CONST                      44: ('namedtuple',)
        534     IMPORT_NAME                     21: collections
        536     IMPORT_FROM                     73: namedtuple
        538     STORE_NAME                      73: namedtuple
        540     POP_TOP                         
        542     LOAD_NAME                       73: namedtuple
        544     LOAD_CONST                      45: 'ExceptHookArgs'
        546     LOAD_CONST                      46: 'exc_type exc_value exc_traceback thread'
        548     CALL_FUNCTION                   2
        550     STORE_NAME                      68: _ExceptHookArgs
        552     LOAD_CONST                      47: <CODE> ExceptHookArgs
        554     LOAD_CONST                      45: 'ExceptHookArgs'
        556     MAKE_FUNCTION                   0
        558     STORE_NAME                      69: ExceptHookArgs
        560     LOAD_CONST                      48: <CODE> excepthook
        562     LOAD_CONST                      49: 'excepthook'
        564     MAKE_FUNCTION                   0
        566     STORE_GLOBAL                    67: excepthook
        568     POP_EXCEPT                      
        570     JUMP_FORWARD                    1 (to 574)
        572     RERAISE                         0
        574     LOAD_GLOBAL                     67: excepthook
        576     STORE_NAME                      74: __excepthook__
        578     LOAD_CONST                      50: <CODE> _make_invoke_excepthook
        580     LOAD_CONST                      51: '_make_invoke_excepthook'
        582     MAKE_FUNCTION                   0
        584     STORE_NAME                      75: _make_invoke_excepthook
        586     LOAD_BUILD_CLASS                
        588     LOAD_CONST                      52: <CODE> Timer
        590     LOAD_CONST                      53: 'Timer'
        592     MAKE_FUNCTION                   0
        594     LOAD_CONST                      53: 'Timer'
        596     LOAD_NAME                       65: Thread
        598     CALL_FUNCTION                   3
        600     STORE_NAME                      76: Timer
        602     LOAD_BUILD_CLASS                
        604     LOAD_CONST                      54: <CODE> _MainThread
        606     LOAD_CONST                      55: '_MainThread'
        608     MAKE_FUNCTION                   0
        610     LOAD_CONST                      55: '_MainThread'
        612     LOAD_NAME                       65: Thread
        614     CALL_FUNCTION                   3
        616     STORE_NAME                      77: _MainThread
        618     LOAD_BUILD_CLASS                
        620     LOAD_CONST                      56: <CODE> _DummyThread
        622     LOAD_CONST                      57: '_DummyThread'
        624     MAKE_FUNCTION                   0
        626     LOAD_CONST                      57: '_DummyThread'
        628     LOAD_NAME                       65: Thread
        630     CALL_FUNCTION                   3
        632     STORE_NAME                      78: _DummyThread
        634     LOAD_CONST                      58: <CODE> current_thread
        636     LOAD_CONST                      59: 'current_thread'
        638     MAKE_FUNCTION                   0
        640     STORE_NAME                      79: current_thread
        642     LOAD_CONST                      60: <CODE> currentThread
        644     LOAD_CONST                      61: 'currentThread'
        646     MAKE_FUNCTION                   0
        648     STORE_NAME                      80: currentThread
        650     LOAD_CONST                      62: <CODE> active_count
        652     LOAD_CONST                      63: 'active_count'
        654     MAKE_FUNCTION                   0
        656     STORE_NAME                      81: active_count
        658     LOAD_CONST                      64: <CODE> activeCount
        660     LOAD_CONST                      65: 'activeCount'
        662     MAKE_FUNCTION                   0
        664     STORE_NAME                      82: activeCount
        666     LOAD_CONST                      66: <CODE> _enumerate
        668     LOAD_CONST                      67: '_enumerate'
        670     MAKE_FUNCTION                   0
        672     STORE_NAME                      83: _enumerate
        674     LOAD_CONST                      68: <CODE> enumerate
        676     LOAD_CONST                      69: 'enumerate'
        678     MAKE_FUNCTION                   0
        680     STORE_NAME                      84: enumerate
        682     BUILD_LIST                      0
        684     STORE_NAME                      85: _threading_atexits
        686     LOAD_CONST                      10: False
        688     STORE_GLOBAL                    86: _SHUTTING_DOWN
        690     LOAD_CONST                      70: <CODE> _register_atexit
        692     LOAD_CONST                      71: '_register_atexit'
        694     MAKE_FUNCTION                   0
        696     STORE_NAME                      87: _register_atexit
        698     LOAD_CONST                      1: 0
        700     LOAD_CONST                      72: ('stack_size',)
        702     IMPORT_NAME                     5: _thread
        704     IMPORT_FROM                     88: stack_size
        706     STORE_NAME                      88: stack_size
        708     POP_TOP                         
        710     LOAD_NAME                       77: _MainThread
        712     CALL_FUNCTION                   0
        714     STORE_GLOBAL                    89: _main_thread
        716     LOAD_CONST                      73: <CODE> _shutdown
        718     LOAD_CONST                      74: '_shutdown'
        720     MAKE_FUNCTION                   0
        722     STORE_NAME                      90: _shutdown
        724     LOAD_CONST                      75: <CODE> main_thread
        726     LOAD_CONST                      76: 'main_thread'
        728     MAKE_FUNCTION                   0
        730     STORE_NAME                      91: main_thread
        732     SETUP_FINALLY                   8 (to 750)
        734     LOAD_CONST                      1: 0
        736     LOAD_CONST                      77: ('_local',)
        738     IMPORT_NAME                     5: _thread
        740     IMPORT_FROM                     92: _local
        742     STORE_NAME                      93: local
        744     POP_TOP                         
        746     POP_BLOCK                       
        748     JUMP_FORWARD                    16 (to 782)
        750     DUP_TOP                         
        752     LOAD_NAME                       20: ImportError
        754     JUMP_IF_NOT_EXC_MATCH           390 (to 780)
        758     POP_TOP                         
        760     POP_TOP                         
        762     POP_TOP                         
        764     LOAD_CONST                      1: 0
        766     LOAD_CONST                      78: ('local',)
        768     IMPORT_NAME                     94: _threading_local
        770     IMPORT_FROM                     93: local
        772     STORE_NAME                      93: local
        774     POP_TOP                         
        776     POP_EXCEPT                      
        778     JUMP_FORWARD                    1 (to 782)
        780     RERAISE                         0
        782     LOAD_CONST                      79: <CODE> _after_fork
        784     LOAD_CONST                      80: '_after_fork'
        786     MAKE_FUNCTION                   0
        788     STORE_NAME                      95: _after_fork
        790     LOAD_NAME                       96: hasattr
        792     LOAD_NAME                       2: _os
        794     LOAD_CONST                      81: 'register_at_fork'
        796     CALL_FUNCTION                   2
        798     POP_JUMP_IF_FALSE               409 (to 818)
        802     LOAD_NAME                       2: _os
        804     LOAD_ATTR                       97: register_at_fork
        806     LOAD_NAME                       95: _after_fork
        808     LOAD_CONST                      82: ('after_in_child',)
        810     CALL_FUNCTION_KW                1
        812     POP_TOP                         
        814     LOAD_CONST                      2: None
        816     RETURN_VALUE                    
        818     LOAD_CONST                      2: None
        820     RETURN_VALUE                    
