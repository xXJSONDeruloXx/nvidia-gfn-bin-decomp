typing.pyc (Python 3.10)
[Code]
    File Name: typing.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 8
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        'abc'
        'abstractmethod'
        'ABCMeta'
        'collections'
        'collections.abc'
        'contextlib'
        'functools'
        'operator'
        're'
        'stdlib_re'
        'sys'
        'types'
        'WrapperDescriptorType'
        'MethodWrapperType'
        'MethodDescriptorType'
        'GenericAlias'
        '__all__'
        '_type_convert'
        '_type_check'
        '_is_param_expr'
        '_type_repr'
        '_collect_type_vars'
        '_check_generic'
        '_prepare_paramspec_params'
        '_deduplicate'
        '_remove_dups_flatten'
        '_flatten_literal_params'
        '_cleanups'
        '_tp_cache'
        'frozenset'
        '_eval_type'
        '_Final'
        '_Immutable'
        '_SpecialForm'
        '_LiteralSpecialForm'
        'Any'
        'NoReturn'
        'ClassVar'
        'Final'
        'Union'
        'Optional'
        'Literal'
        'TypeAlias'
        'Concatenate'
        'TypeGuard'
        'ForwardRef'
        '_TypeVarLike'
        'TypeVar'
        'ParamSpecArgs'
        'ParamSpecKwargs'
        'ParamSpec'
        '_is_dunder'
        '_BaseGenericAlias'
        '_GenericAlias'
        '_SpecialGenericAlias'
        '_CallableGenericAlias'
        '_CallableType'
        '_TupleType'
        '_UnionGenericAlias'
        '_value_and_type_iter'
        '_LiteralGenericAlias'
        '_ConcatenateGenericAlias'
        'Generic'
        '_TypingEmpty'
        '_TypingEllipsis'
        '_TYPING_INTERNALS'
        '_SPECIAL_NAMES'
        'EXCLUDED_ATTRIBUTES'
        '_get_protocol_attrs'
        '_is_callable_members_only'
        '_no_init_or_replace_init'
        '_caller'
        '_allow_reckless_class_checks'
        '_PROTO_ALLOWLIST'
        '_ProtocolMeta'
        'Protocol'
        '_AnnotatedAlias'
        'Annotated'
        'runtime_checkable'
        'cast'
        '_get_defaults'
        'FunctionType'
        'BuiltinFunctionType'
        'MethodType'
        'ModuleType'
        '_allowed_types'
        'get_type_hints'
        '_strip_annotations'
        'get_origin'
        'get_args'
        'is_typeddict'
        'no_type_check'
        'no_type_check_decorator'
        '_overload_dummy'
        'overload'
        'final'
        'T'
        'KT'
        'VT'
        'T_co'
        'V_co'
        'VT_co'
        'T_contra'
        'type'
        'CT_co'
        'bytes'
        'str'
        'AnyStr'
        '_alias'
        'Hashable'
        'Awaitable'
        'Coroutine'
        'AsyncIterable'
        'AsyncIterator'
        'Iterable'
        'Iterator'
        'Reversible'
        'Sized'
        'Container'
        'Collection'
        'Callable'
        'Set'
        'AbstractSet'
        'MutableSet'
        'Mapping'
        'MutableMapping'
        'Sequence'
        'MutableSequence'
        'ByteString'
        'tuple'
        'Tuple'
        'list'
        'List'
        'deque'
        'Deque'
        'set'
        'FrozenSet'
        'MappingView'
        'KeysView'
        'ItemsView'
        'ValuesView'
        'AbstractContextManager'
        'ContextManager'
        'AbstractAsyncContextManager'
        'AsyncContextManager'
        'dict'
        'Dict'
        'defaultdict'
        'DefaultDict'
        'OrderedDict'
        'Counter'
        'ChainMap'
        'Generator'
        'AsyncGenerator'
        'Type'
        'SupportsInt'
        'SupportsFloat'
        'SupportsComplex'
        'SupportsBytes'
        'SupportsIndex'
        'SupportsAbs'
        'SupportsRound'
        '_make_nmtuple'
        '_prohibited'
        '_special'
        'NamedTupleMeta'
        'NamedTuple'
        '__new__'
        '_NamedTuple'
        '_namedtuple_mro_entries'
        '__mro_entries__'
        '_TypedDictMeta'
        'TypedDict'
        '_TypedDict'
        'NewType'
        'Text'
        'TYPE_CHECKING'
        'IO'
        'BinaryIO'
        'TextIO'
        'io'
        '__name__'
        'modules'
        'Pattern'
        'Match'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        '\nThe typing module: Support for gradual typing as defined by PEP 484.\n\nAt large scale, the structure of the module is following:\n* Imports and exports, all public names should be explicitly added to __all__.\n* Internal helper functions: these should never be used in code outside this module.\n* _SpecialForm and its instances (special forms):\n  Any, NoReturn, ClassVar, Union, Optional, Concatenate\n* Classes whose instances can be type arguments in addition to types:\n  ForwardRef, TypeVar and ParamSpec\n* The core of internal generics API: _GenericAlias and _VariadicGenericAlias, the latter is\n  currently only used by Tuple and Callable. All subscripted types like X[int], Union[int, str],\n  etc., are instances of either of these classes.\n* The public counterpart of the generics API consists of two classes: Generic and Protocol.\n* Public helper functions: get_type_hints, overload, cast, no_type_check,\n  no_type_check_decorator.\n* Generic aliases for collections.abc ABCs and few additional protocols.\n* Special types: NewType, NamedTuple, TypedDict.\n* Wrapper submodules for re and io related types.\n'
        0
        (
            'abstractmethod'
            'ABCMeta'
        )
        None
        (
            'WrapperDescriptorType'
            'MethodWrapperType'
            'MethodDescriptorType'
            'GenericAlias'
        )
        (
            'Annotated'
            'Any'
            'Callable'
            'ClassVar'
            'Concatenate'
            'Final'
            'ForwardRef'
            'Generic'
            'Literal'
            'Optional'
            'ParamSpec'
            'Protocol'
            'Tuple'
            'Type'
            'TypeVar'
            'Union'
            'AbstractSet'
            'ByteString'
            'Container'
            'ContextManager'
            'Hashable'
            'ItemsView'
            'Iterable'
            'Iterator'
            'KeysView'
            'Mapping'
            'MappingView'
            'MutableMapping'
            'MutableSequence'
            'MutableSet'
            'Sequence'
            'Sized'
            'ValuesView'
            'Awaitable'
            'AsyncIterator'
            'AsyncIterable'
            'Coroutine'
            'Collection'
            'AsyncGenerator'
            'AsyncContextManager'
            'Reversible'
            'SupportsAbs'
            'SupportsBytes'
            'SupportsComplex'
            'SupportsFloat'
            'SupportsIndex'
            'SupportsInt'
            'SupportsRound'
            'ChainMap'
            'Counter'
            'Deque'
            'Dict'
            'DefaultDict'
            'List'
            'OrderedDict'
            'Set'
            'FrozenSet'
            'NamedTuple'
            'TypedDict'
            'Generator'
            'BinaryIO'
            'IO'
            'Match'
            'Pattern'
            'TextIO'
            'AnyStr'
            'cast'
            'final'
            'get_args'
            'get_origin'
            'get_type_hints'
            'is_typeddict'
            'NewType'
            'no_type_check'
            'no_type_check_decorator'
            'NoReturn'
            'overload'
            'ParamSpecArgs'
            'ParamSpecKwargs'
            'runtime_checkable'
            'Text'
            'TYPE_CHECKING'
            'TypeAlias'
            'TypeGuard'
        )
        False
        (
            'allow_special_forms'
        )
        [Code]
            File Name: typing.py
            Object Name: _type_convert
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 1
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'type'
                'isinstance'
                'str'
                'ForwardRef'
            [Var Names]
                'arg'
                'module'
                'allow_special_forms'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'For converting None to type(None), and strings to ForwardRef.'
                None
                (
                    'module'
                    'is_class'
                )
            [Disassembly]
                0       LOAD_FAST                       0: arg
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               8 (to 16)
                8       LOAD_GLOBAL                     0: type
                10      LOAD_CONST                      1: None
                12      CALL_FUNCTION                   1
                14      RETURN_VALUE                    
                16      LOAD_GLOBAL                     1: isinstance
                18      LOAD_FAST                       0: arg
                20      LOAD_GLOBAL                     2: str
                22      CALL_FUNCTION                   2
                24      POP_JUMP_IF_FALSE               20 (to 40)
                26      LOAD_GLOBAL                     3: ForwardRef
                28      LOAD_FAST                       0: arg
                30      LOAD_FAST                       1: module
                32      LOAD_FAST                       2: allow_special_forms
                34      LOAD_CONST                      2: ('module', 'is_class')
                36      CALL_FUNCTION_KW                3
                38      RETURN_VALUE                    
                40      LOAD_FAST                       0: arg
                42      RETURN_VALUE                    
        '_type_convert'
        True
        [Code]
            File Name: typing.py
            Object Name: _type_check
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 1
            Locals: 6
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Generic'
                'Protocol'
                'ClassVar'
                'Final'
                '_type_convert'
                'isinstance'
                '_GenericAlias'
                '__origin__'
                'TypeError'
                'Any'
                'NoReturn'
                'TypeAlias'
                '_SpecialForm'
                'type'
                'TypeVar'
                'ForwardRef'
                'types'
                'UnionType'
                'ParamSpec'
                'ParamSpecArgs'
                'ParamSpecKwargs'
                'callable'
            [Var Names]
                'arg'
                'msg'
                'is_argument'
                'module'
                'allow_special_forms'
                'invalid_generic_forms'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Check that the argument is a type, and return it (internal helper).\n\n    As a special case, accept None and return type(None) instead. Also wrap strings\n    into ForwardRef instances. Consider several corner cases, for example plain\n    special forms like Union are not valid, while Union[int, str] is OK, etc.\n    The msg argument is a human-readable error message, e.g::\n\n        "Union[arg, ...]: arg should be a type."\n\n    We append the repr() of the actual value (truncated to 100 chars).\n    '
                (
                    'module'
                    'allow_special_forms'
                )
                ' is not valid as type argument'
                'Plain '
                ' Got '
                '.100'
                '.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: Generic
                2       LOAD_GLOBAL                     1: Protocol
                4       BUILD_TUPLE                     2
                6       STORE_FAST                      5: invalid_generic_forms
                8       LOAD_FAST                       4: allow_special_forms
                10      POP_JUMP_IF_TRUE                18 (to 36)
                12      LOAD_FAST                       5: invalid_generic_forms
                14      LOAD_GLOBAL                     2: ClassVar
                16      BUILD_TUPLE                     1
                18      INPLACE_ADD                     
                20      STORE_FAST                      5: invalid_generic_forms
                22      LOAD_FAST                       2: is_argument
                24      POP_JUMP_IF_FALSE               18 (to 36)
                26      LOAD_FAST                       5: invalid_generic_forms
                28      LOAD_GLOBAL                     3: Final
                30      BUILD_TUPLE                     1
                32      INPLACE_ADD                     
                34      STORE_FAST                      5: invalid_generic_forms
                36      LOAD_GLOBAL                     4: _type_convert
                38      LOAD_FAST                       0: arg
                40      LOAD_FAST                       3: module
                42      LOAD_FAST                       4: allow_special_forms
                44      LOAD_CONST                      1: ('module', 'allow_special_forms')
                46      CALL_FUNCTION_KW                3
                48      STORE_FAST                      0: arg
                50      LOAD_GLOBAL                     5: isinstance
                52      LOAD_FAST                       0: arg
                54      LOAD_GLOBAL                     6: _GenericAlias
                56      CALL_FUNCTION                   2
                58      POP_JUMP_IF_FALSE               42 (to 84)
                60      LOAD_FAST                       0: arg
                62      LOAD_ATTR                       7: __origin__
                64      LOAD_FAST                       5: invalid_generic_forms
                66      CONTAINS_OP                     0 (in)
                68      POP_JUMP_IF_FALSE               42 (to 84)
                70      LOAD_GLOBAL                     8: TypeError
                72      LOAD_FAST                       0: arg
                74      FORMAT_VALUE                    0 (FVC_NONE)
                76      LOAD_CONST                      2: ' is not valid as type argument'
                78      BUILD_STRING                    2
                80      CALL_FUNCTION                   1
                82      RAISE_VARARGS                   1
                84      LOAD_FAST                       0: arg
                86      LOAD_GLOBAL                     9: Any
                88      LOAD_GLOBAL                     10: NoReturn
                90      LOAD_GLOBAL                     3: Final
                92      LOAD_GLOBAL                     11: TypeAlias
                94      BUILD_TUPLE                     4
                96      CONTAINS_OP                     0 (in)
                98      POP_JUMP_IF_FALSE               52 (to 104)
                100     LOAD_FAST                       0: arg
                102     RETURN_VALUE                    
                104     LOAD_GLOBAL                     5: isinstance
                106     LOAD_FAST                       0: arg
                108     LOAD_GLOBAL                     12: _SpecialForm
                110     CALL_FUNCTION                   2
                112     POP_JUMP_IF_TRUE                63 (to 126)
                114     LOAD_FAST                       0: arg
                116     LOAD_GLOBAL                     0: Generic
                118     LOAD_GLOBAL                     1: Protocol
                120     BUILD_TUPLE                     2
                122     CONTAINS_OP                     0 (in)
                124     POP_JUMP_IF_FALSE               71 (to 142)
                126     LOAD_GLOBAL                     8: TypeError
                128     LOAD_CONST                      3: 'Plain '
                130     LOAD_FAST                       0: arg
                132     FORMAT_VALUE                    0 (FVC_NONE)
                134     LOAD_CONST                      2: ' is not valid as type argument'
                136     BUILD_STRING                    3
                138     CALL_FUNCTION                   1
                140     RAISE_VARARGS                   1
                142     LOAD_GLOBAL                     5: isinstance
                144     LOAD_FAST                       0: arg
                146     LOAD_GLOBAL                     13: type
                148     LOAD_GLOBAL                     14: TypeVar
                150     LOAD_GLOBAL                     15: ForwardRef
                152     LOAD_GLOBAL                     16: types
                154     LOAD_ATTR                       17: UnionType
                156     LOAD_GLOBAL                     18: ParamSpec
                158     LOAD_GLOBAL                     19: ParamSpecArgs
                160     LOAD_GLOBAL                     20: ParamSpecKwargs
                162     BUILD_TUPLE                     7
                164     CALL_FUNCTION                   2
                166     POP_JUMP_IF_FALSE               86 (to 172)
                168     LOAD_FAST                       0: arg
                170     RETURN_VALUE                    
                172     LOAD_GLOBAL                     21: callable
                174     LOAD_FAST                       0: arg
                176     CALL_FUNCTION                   1
                178     POP_JUMP_IF_TRUE                101 (to 202)
                180     LOAD_GLOBAL                     8: TypeError
                182     LOAD_FAST                       1: msg
                184     FORMAT_VALUE                    0 (FVC_NONE)
                186     LOAD_CONST                      4: ' Got '
                188     LOAD_FAST                       0: arg
                190     LOAD_CONST                      5: '.100'
                192     FORMAT_VALUE                    6 (FVC_REPR | FVS_HAVE_SPEC)
                194     LOAD_CONST                      6: '.'
                196     BUILD_STRING                    4
                198     CALL_FUNCTION                   1
                200     RAISE_VARARGS                   1
                202     LOAD_FAST                       0: arg
                204     RETURN_VALUE                    
        '_type_check'
        [Code]
            File Name: typing.py
            Object Name: _is_param_expr
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'tuple'
                'list'
                'ParamSpec'
                '_ConcatenateGenericAlias'
            [Var Names]
                'arg'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                ...
            [Disassembly]
                0       LOAD_FAST                       0: arg
                2       LOAD_CONST                      1: ...
                4       IS_OP                           0 (is)
                6       JUMP_IF_TRUE_OR_POP             12 (to 24)
                8       LOAD_GLOBAL                     0: isinstance
                10      LOAD_FAST                       0: arg
                12      LOAD_GLOBAL                     1: tuple
                14      LOAD_GLOBAL                     2: list
                16      LOAD_GLOBAL                     3: ParamSpec
                18      LOAD_GLOBAL                     4: _ConcatenateGenericAlias
                20      BUILD_TUPLE                     4
                22      CALL_FUNCTION                   2
                24      RETURN_VALUE                    
        '_is_param_expr'
        [Code]
            File Name: typing.py
            Object Name: _type_repr
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'GenericAlias'
                'repr'
                'type'
                '__module__'
                '__qualname__'
                'FunctionType'
                '__name__'
            [Var Names]
                'obj'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the repr() of an object, special-casing types (internal helper).\n\n    If obj is a type, we return a shorter version than the default\n    type.__repr__, based on the module and qualified name, which is\n    typically enough to uniquely identify a type.  For everything\n    else, we fall back on repr(obj).\n    '
                'builtins'
                '.'
                ...
                '...'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: obj
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: GenericAlias
                8       CALL_FUNCTION                   2
                10      POP_JUMP_IF_FALSE               10 (to 20)
                12      LOAD_GLOBAL                     3: repr
                14      LOAD_FAST                       0: obj
                16      CALL_FUNCTION                   1
                18      RETURN_VALUE                    
                20      LOAD_GLOBAL                     0: isinstance
                22      LOAD_FAST                       0: obj
                24      LOAD_GLOBAL                     4: type
                26      CALL_FUNCTION                   2
                28      POP_JUMP_IF_FALSE               32 (to 64)
                30      LOAD_FAST                       0: obj
                32      LOAD_ATTR                       5: __module__
                34      LOAD_CONST                      1: 'builtins'
                36      COMPARE_OP                      2 (==)
                38      POP_JUMP_IF_FALSE               23 (to 46)
                40      LOAD_FAST                       0: obj
                42      LOAD_ATTR                       6: __qualname__
                44      RETURN_VALUE                    
                46      LOAD_FAST                       0: obj
                48      LOAD_ATTR                       5: __module__
                50      FORMAT_VALUE                    0 (FVC_NONE)
                52      LOAD_CONST                      2: '.'
                54      LOAD_FAST                       0: obj
                56      LOAD_ATTR                       6: __qualname__
                58      FORMAT_VALUE                    0 (FVC_NONE)
                60      BUILD_STRING                    3
                62      RETURN_VALUE                    
                64      LOAD_FAST                       0: obj
                66      LOAD_CONST                      3: ...
                68      IS_OP                           0 (is)
                70      POP_JUMP_IF_FALSE               38 (to 76)
                72      LOAD_CONST                      4: '...'
                74      RETURN_VALUE                    
                76      LOAD_GLOBAL                     0: isinstance
                78      LOAD_FAST                       0: obj
                80      LOAD_GLOBAL                     1: types
                82      LOAD_ATTR                       7: FunctionType
                84      CALL_FUNCTION                   2
                86      POP_JUMP_IF_FALSE               47 (to 94)
                88      LOAD_FAST                       0: obj
                90      LOAD_ATTR                       8: __name__
                92      RETURN_VALUE                    
                94      LOAD_GLOBAL                     3: repr
                96      LOAD_FAST                       0: obj
                98      CALL_FUNCTION                   1
                100     RETURN_VALUE                    
        '_type_repr'
        [Code]
            File Name: typing.py
            Object Name: _collect_type_vars
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 6
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'TypeVar'
                'isinstance'
                'append'
                '_GenericAlias'
                'GenericAlias'
                'types'
                'UnionType'
                'extend'
                '__parameters__'
                'tuple'
            [Var Names]
                'types_'
                'typevar_types'
                't'
            [Free Vars]
            [Cell Vars]
                'tvars'
            [Constants]
                'Collect all type variable contained\n    in types in order of first appearance (lexicographic order). For example::\n\n        _collect_type_vars((T, List[S, T])) == (T, S)\n    '
                None
                [Code]
                    File Name: typing.py
                    Object Name: <listcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                    [Var Names]
                        '.0'
                        't'
                    [Free Vars]
                        'tvars'
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        8 (to 22)
                        6       STORE_FAST                      1: t
                        8       LOAD_FAST                       1: t
                        10      LOAD_DEREF                      0: tvars
                        12      CONTAINS_OP                     1 (not in)
                        14      POP_JUMP_IF_FALSE               2 (to 4)
                        16      LOAD_FAST                       1: t
                        18      LIST_APPEND                     2
                        20      JUMP_ABSOLUTE                   2 (to 4)
                        22      RETURN_VALUE                    
                '_collect_type_vars.<locals>.<listcomp>'
            [Disassembly]
                0       LOAD_FAST                       1: typevar_types
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               6 (to 12)
                8       LOAD_GLOBAL                     0: TypeVar
                10      STORE_FAST                      1: typevar_types
                12      BUILD_LIST                      0
                14      STORE_DEREF                     0: tvars
                16      LOAD_FAST                       0: types_
                18      GET_ITER                        
                20      FOR_ITER                        38 (to 98)
                22      STORE_FAST                      2: t
                24      LOAD_GLOBAL                     1: isinstance
                26      LOAD_FAST                       2: t
                28      LOAD_FAST                       1: typevar_types
                30      CALL_FUNCTION                   2
                32      POP_JUMP_IF_FALSE               26 (to 52)
                34      LOAD_FAST                       2: t
                36      LOAD_DEREF                      0: tvars
                38      CONTAINS_OP                     1 (not in)
                40      POP_JUMP_IF_FALSE               26 (to 52)
                42      LOAD_DEREF                      0: tvars
                44      LOAD_METHOD                     2: append
                46      LOAD_FAST                       2: t
                48      CALL_METHOD                     1
                50      POP_TOP                         
                52      LOAD_GLOBAL                     1: isinstance
                54      LOAD_FAST                       2: t
                56      LOAD_GLOBAL                     3: _GenericAlias
                58      LOAD_GLOBAL                     4: GenericAlias
                60      LOAD_GLOBAL                     5: types
                62      LOAD_ATTR                       6: UnionType
                64      BUILD_TUPLE                     3
                66      CALL_FUNCTION                   2
                68      POP_JUMP_IF_FALSE               48 (to 96)
                70      LOAD_DEREF                      0: tvars
                72      LOAD_METHOD                     7: extend
                74      LOAD_CLOSURE                    0: tvars
                76      BUILD_TUPLE                     1
                78      LOAD_CONST                      2: <CODE> <listcomp>
                80      LOAD_CONST                      3: '_collect_type_vars.<locals>.<listcomp>'
                82      MAKE_FUNCTION                   8
                84      LOAD_FAST                       2: t
                86      LOAD_ATTR                       8: __parameters__
                88      GET_ITER                        
                90      CALL_FUNCTION                   1
                92      CALL_METHOD                     1
                94      POP_TOP                         
                96      JUMP_ABSOLUTE                   10 (to 20)
                98      LOAD_GLOBAL                     9: tuple
                100     LOAD_DEREF                      0: tvars
                102     CALL_FUNCTION                   1
                104     RETURN_VALUE                    
        '_collect_type_vars'
        [Code]
            File Name: typing.py
            Object Name: _check_generic
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'TypeError'
                'len'
            [Var Names]
                'cls'
                'parameters'
                'elen'
                'alen'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Check correct count for parameters of a generic cls (internal helper).\n    This gives a nice error message in case of count mismatch.\n    '
                ' is not a generic class'
                'Too '
                'many'
                'few'
                ' arguments for '
                '; actual '
                ', expected '
                None
            [Disassembly]
                0       LOAD_FAST                       2: elen
                2       POP_JUMP_IF_TRUE                9 (to 18)
                4       LOAD_GLOBAL                     0: TypeError
                6       LOAD_FAST                       0: cls
                8       FORMAT_VALUE                    0 (FVC_NONE)
                10      LOAD_CONST                      1: ' is not a generic class'
                12      BUILD_STRING                    2
                14      CALL_FUNCTION                   1
                16      RAISE_VARARGS                   1
                18      LOAD_GLOBAL                     1: len
                20      LOAD_FAST                       1: parameters
                22      CALL_FUNCTION                   1
                24      STORE_FAST                      3: alen
                26      LOAD_FAST                       3: alen
                28      LOAD_FAST                       2: elen
                30      COMPARE_OP                      3 (!=)
                32      POP_JUMP_IF_FALSE               39 (to 78)
                34      LOAD_GLOBAL                     0: TypeError
                36      LOAD_CONST                      2: 'Too '
                38      LOAD_FAST                       3: alen
                40      LOAD_FAST                       2: elen
                42      COMPARE_OP                      4 (>)
                44      POP_JUMP_IF_FALSE               25 (to 50)
                46      LOAD_CONST                      3: 'many'
                48      JUMP_FORWARD                    1 (to 52)
                50      LOAD_CONST                      4: 'few'
                52      FORMAT_VALUE                    0 (FVC_NONE)
                54      LOAD_CONST                      5: ' arguments for '
                56      LOAD_FAST                       0: cls
                58      FORMAT_VALUE                    0 (FVC_NONE)
                60      LOAD_CONST                      6: '; actual '
                62      LOAD_FAST                       3: alen
                64      FORMAT_VALUE                    0 (FVC_NONE)
                66      LOAD_CONST                      7: ', expected '
                68      LOAD_FAST                       2: elen
                70      FORMAT_VALUE                    0 (FVC_NONE)
                72      BUILD_STRING                    8
                74      CALL_FUNCTION                   1
                76      RAISE_VARARGS                   1
                78      LOAD_CONST                      8: None
                80      RETURN_VALUE                    
        '_check_generic'
        [Code]
            File Name: typing.py
            Object Name: _prepare_paramspec_params
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'len'
                '__parameters__'
                '_is_param_expr'
                'isinstance'
                'ParamSpec'
                '_check_generic'
                'zip'
                'list'
                'tuple'
                'append'
            [Var Names]
                'cls'
                'params'
                '_params'
                'p'
                'tvar'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Prepares the parameters for a Generic containing ParamSpec\n    variables (internal helper).\n    '
                1
                0
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_FAST                       0: cls
                4       LOAD_ATTR                       1: __parameters__
                6       CALL_FUNCTION                   1
                8       LOAD_CONST                      1: 1
                10      COMPARE_OP                      2 (==)
                12      POP_JUMP_IF_FALSE               28 (to 56)
                14      LOAD_FAST                       1: params
                16      POP_JUMP_IF_FALSE               28 (to 56)
                18      LOAD_GLOBAL                     2: _is_param_expr
                20      LOAD_FAST                       1: params
                22      LOAD_CONST                      2: 0
                24      BINARY_SUBSCR                   
                26      CALL_FUNCTION                   1
                28      POP_JUMP_IF_TRUE                28 (to 56)
                30      LOAD_GLOBAL                     3: isinstance
                32      LOAD_FAST                       0: cls
                34      LOAD_ATTR                       1: __parameters__
                36      LOAD_CONST                      2: 0
                38      BINARY_SUBSCR                   
                40      LOAD_GLOBAL                     4: ParamSpec
                42      CALL_FUNCTION                   2
                44      POP_JUMP_IF_TRUE                25 (to 50)
                46      LOAD_ASSERTION_ERROR            
                48      RAISE_VARARGS                   1
                50      LOAD_FAST                       1: params
                52      BUILD_TUPLE                     1
                54      RETURN_VALUE                    
                56      LOAD_GLOBAL                     5: _check_generic
                58      LOAD_FAST                       0: cls
                60      LOAD_FAST                       1: params
                62      LOAD_GLOBAL                     0: len
                64      LOAD_FAST                       0: cls
                66      LOAD_ATTR                       1: __parameters__
                68      CALL_FUNCTION                   1
                70      CALL_FUNCTION                   3
                72      POP_TOP                         
                74      BUILD_LIST                      0
                76      STORE_FAST                      2: _params
                78      LOAD_GLOBAL                     6: zip
                80      LOAD_FAST                       1: params
                82      LOAD_FAST                       0: cls
                84      LOAD_ATTR                       1: __parameters__
                86      CALL_FUNCTION                   2
                88      GET_ITER                        
                90      FOR_ITER                        23 (to 138)
                92      UNPACK_SEQUENCE                 2
                94      STORE_FAST                      3: p
                96      STORE_FAST                      4: tvar
                98      LOAD_GLOBAL                     3: isinstance
                100     LOAD_FAST                       4: tvar
                102     LOAD_GLOBAL                     4: ParamSpec
                104     CALL_FUNCTION                   2
                106     POP_JUMP_IF_FALSE               63 (to 126)
                108     LOAD_GLOBAL                     3: isinstance
                110     LOAD_FAST                       3: p
                112     LOAD_GLOBAL                     7: list
                114     CALL_FUNCTION                   2
                116     POP_JUMP_IF_FALSE               63 (to 126)
                118     LOAD_GLOBAL                     8: tuple
                120     LOAD_FAST                       3: p
                122     CALL_FUNCTION                   1
                124     STORE_FAST                      3: p
                126     LOAD_FAST                       2: _params
                128     LOAD_METHOD                     9: append
                130     LOAD_FAST                       3: p
                132     CALL_METHOD                     1
                134     POP_TOP                         
                136     JUMP_ABSOLUTE                   45 (to 90)
                138     LOAD_GLOBAL                     8: tuple
                140     LOAD_FAST                       2: _params
                142     CALL_FUNCTION                   1
                144     RETURN_VALUE                    
        '_prepare_paramspec_params'
        [Code]
            File Name: typing.py
            Object Name: _deduplicate
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'set'
                'len'
                'append'
                'remove'
            [Var Names]
                'params'
                'all_params'
                'new_params'
                't'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: set
                2       LOAD_FAST                       0: params
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      1: all_params
                8       LOAD_GLOBAL                     1: len
                10      LOAD_FAST                       1: all_params
                12      CALL_FUNCTION                   1
                14      LOAD_GLOBAL                     1: len
                16      LOAD_FAST                       0: params
                18      CALL_FUNCTION                   1
                20      COMPARE_OP                      0 (<)
                22      POP_JUMP_IF_FALSE               41 (to 82)
                24      BUILD_LIST                      0
                26      STORE_FAST                      2: new_params
                28      LOAD_FAST                       0: params
                30      GET_ITER                        
                32      FOR_ITER                        16 (to 66)
                34      STORE_FAST                      3: t
                36      LOAD_FAST                       3: t
                38      LOAD_FAST                       1: all_params
                40      CONTAINS_OP                     0 (in)
                42      POP_JUMP_IF_FALSE               32 (to 64)
                44      LOAD_FAST                       2: new_params
                46      LOAD_METHOD                     2: append
                48      LOAD_FAST                       3: t
                50      CALL_METHOD                     1
                52      POP_TOP                         
                54      LOAD_FAST                       1: all_params
                56      LOAD_METHOD                     3: remove
                58      LOAD_FAST                       3: t
                60      CALL_METHOD                     1
                62      POP_TOP                         
                64      JUMP_ABSOLUTE                   16 (to 32)
                66      LOAD_FAST                       2: new_params
                68      STORE_FAST                      0: params
                70      LOAD_FAST                       1: all_params
                72      POP_JUMP_IF_FALSE               41 (to 82)
                74      LOAD_ASSERTION_ERROR            
                76      LOAD_FAST                       1: all_params
                78      CALL_FUNCTION                   1
                80      RAISE_VARARGS                   1
                82      LOAD_FAST                       0: params
                84      RETURN_VALUE                    
        '_deduplicate'
        [Code]
            File Name: typing.py
            Object Name: _remove_dups_flatten
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                '_UnionGenericAlias'
                'types'
                'UnionType'
                'extend'
                '__args__'
                'tuple'
                'len'
                'Union'
                'append'
                '_deduplicate'
            [Var Names]
                'parameters'
                'params'
                'p'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'An internal helper for Union creation and substitution: flatten Unions\n    among parameters, then remove duplicates.\n    '
                0
                1
                None
            [Disassembly]
                0       BUILD_LIST                      0
                2       STORE_FAST                      1: params
                4       LOAD_FAST                       0: parameters
                6       GET_ITER                        
                8       FOR_ITER                        49 (to 108)
                10      STORE_FAST                      2: p
                12      LOAD_GLOBAL                     0: isinstance
                14      LOAD_FAST                       2: p
                16      LOAD_GLOBAL                     1: _UnionGenericAlias
                18      LOAD_GLOBAL                     2: types
                20      LOAD_ATTR                       3: UnionType
                22      BUILD_TUPLE                     2
                24      CALL_FUNCTION                   2
                26      POP_JUMP_IF_FALSE               21 (to 42)
                28      LOAD_FAST                       1: params
                30      LOAD_METHOD                     4: extend
                32      LOAD_FAST                       2: p
                34      LOAD_ATTR                       5: __args__
                36      CALL_METHOD                     1
                38      POP_TOP                         
                40      JUMP_ABSOLUTE                   4 (to 8)
                42      LOAD_GLOBAL                     0: isinstance
                44      LOAD_FAST                       2: p
                46      LOAD_GLOBAL                     6: tuple
                48      CALL_FUNCTION                   2
                50      POP_JUMP_IF_FALSE               48 (to 96)
                52      LOAD_GLOBAL                     7: len
                54      LOAD_FAST                       2: p
                56      CALL_FUNCTION                   1
                58      LOAD_CONST                      1: 0
                60      COMPARE_OP                      4 (>)
                62      POP_JUMP_IF_FALSE               48 (to 96)
                64      LOAD_FAST                       2: p
                66      LOAD_CONST                      1: 0
                68      BINARY_SUBSCR                   
                70      LOAD_GLOBAL                     8: Union
                72      IS_OP                           0 (is)
                74      POP_JUMP_IF_FALSE               48 (to 96)
                76      LOAD_FAST                       1: params
                78      LOAD_METHOD                     4: extend
                80      LOAD_FAST                       2: p
                82      LOAD_CONST                      2: 1
                84      LOAD_CONST                      3: None
                86      BUILD_SLICE                     2
                88      BINARY_SUBSCR                   
                90      CALL_METHOD                     1
                92      POP_TOP                         
                94      JUMP_ABSOLUTE                   4 (to 8)
                96      LOAD_FAST                       1: params
                98      LOAD_METHOD                     9: append
                100     LOAD_FAST                       2: p
                102     CALL_METHOD                     1
                104     POP_TOP                         
                106     JUMP_ABSOLUTE                   4 (to 8)
                108     LOAD_GLOBAL                     6: tuple
                110     LOAD_GLOBAL                     10: _deduplicate
                112     LOAD_FAST                       1: params
                114     CALL_FUNCTION                   1
                116     CALL_FUNCTION                   1
                118     RETURN_VALUE                    
        '_remove_dups_flatten'
        [Code]
            File Name: typing.py
            Object Name: _flatten_literal_params
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                '_LiteralGenericAlias'
                'extend'
                '__args__'
                'append'
                'tuple'
            [Var Names]
                'parameters'
                'params'
                'p'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'An internal helper for Literal creation: flatten Literals among parameters'
            [Disassembly]
                0       BUILD_LIST                      0
                2       STORE_FAST                      1: params
                4       LOAD_FAST                       0: parameters
                6       GET_ITER                        
                8       FOR_ITER                        19 (to 48)
                10      STORE_FAST                      2: p
                12      LOAD_GLOBAL                     0: isinstance
                14      LOAD_FAST                       2: p
                16      LOAD_GLOBAL                     1: _LiteralGenericAlias
                18      CALL_FUNCTION                   2
                20      POP_JUMP_IF_FALSE               18 (to 36)
                22      LOAD_FAST                       1: params
                24      LOAD_METHOD                     2: extend
                26      LOAD_FAST                       2: p
                28      LOAD_ATTR                       3: __args__
                30      CALL_METHOD                     1
                32      POP_TOP                         
                34      JUMP_ABSOLUTE                   4 (to 8)
                36      LOAD_FAST                       1: params
                38      LOAD_METHOD                     4: append
                40      LOAD_FAST                       2: p
                42      CALL_METHOD                     1
                44      POP_TOP                         
                46      JUMP_ABSOLUTE                   4 (to 8)
                48      LOAD_GLOBAL                     5: tuple
                50      LOAD_FAST                       1: params
                52      CALL_FUNCTION                   1
                54      RETURN_VALUE                    
        '_flatten_literal_params'
        (
            'typed'
        )
        [Code]
            File Name: typing.py
            Object Name: _tp_cache
            Arg Count: 1
            Pos Only Arg Count: 1
            KW Only Arg Count: 1
            Locals: 3
            Stack Size: 3
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
            [Var Names]
                'func'
                'typed'
                'decorator'
            [Free Vars]
            [Cell Vars]
                'typed'
            [Constants]
                'Internal wrapper caching __getitem__ of generic types with a fallback to\n    original function for non-hashable arguments.\n    '
                [Code]
                    File Name: typing.py
                    Object Name: decorator
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'functools'
                        'lru_cache'
                        '_cleanups'
                        'append'
                        'cache_clear'
                        'wraps'
                    [Var Names]
                        'func'
                        'inner'
                    [Free Vars]
                        'typed'
                    [Cell Vars]
                        'cached'
                        'func'
                    [Constants]
                        None
                        (
                            'typed'
                        )
                        [Code]
                            File Name: typing.py
                            Object Name: inner
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 8
                            Flags: 0x0000001F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NESTED)
                            [Names]
                                'TypeError'
                            [Var Names]
                                'args'
                                'kwds'
                            [Free Vars]
                                'cached'
                                'func'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       SETUP_FINALLY                   8 (to 18)
                                2       LOAD_DEREF                      0: cached
                                4       LOAD_FAST                       0: args
                                6       BUILD_MAP                       0
                                8       LOAD_FAST                       1: kwds
                                10      DICT_MERGE                      1
                                12      CALL_FUNCTION_EX                1
                                14      POP_BLOCK                       
                                16      RETURN_VALUE                    
                                18      DUP_TOP                         
                                20      LOAD_GLOBAL                     0: TypeError
                                22      JUMP_IF_NOT_EXC_MATCH           17 (to 34)
                                24      POP_TOP                         
                                26      POP_TOP                         
                                28      POP_TOP                         
                                30      POP_EXCEPT                      
                                32      JUMP_FORWARD                    1 (to 36)
                                34      RERAISE                         0
                                36      LOAD_DEREF                      1: func
                                38      LOAD_FAST                       0: args
                                40      BUILD_MAP                       0
                                42      LOAD_FAST                       1: kwds
                                44      DICT_MERGE                      1
                                46      CALL_FUNCTION_EX                1
                                48      RETURN_VALUE                    
                        '_tp_cache.<locals>.decorator.<locals>.inner'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: functools
                        2       LOAD_ATTR                       1: lru_cache
                        4       LOAD_DEREF                      2: typed
                        6       LOAD_CONST                      1: ('typed',)
                        8       CALL_FUNCTION_KW                1
                        10      LOAD_DEREF                      1: func
                        12      CALL_FUNCTION                   1
                        14      STORE_DEREF                     0: cached
                        16      LOAD_GLOBAL                     2: _cleanups
                        18      LOAD_METHOD                     3: append
                        20      LOAD_DEREF                      0: cached
                        22      LOAD_ATTR                       4: cache_clear
                        24      CALL_METHOD                     1
                        26      POP_TOP                         
                        28      LOAD_GLOBAL                     0: functools
                        30      LOAD_METHOD                     5: wraps
                        32      LOAD_DEREF                      1: func
                        34      CALL_METHOD                     1
                        36      LOAD_CLOSURE                    0: cached
                        38      LOAD_CLOSURE                    1: func
                        40      BUILD_TUPLE                     2
                        42      LOAD_CONST                      2: <CODE> inner
                        44      LOAD_CONST                      3: '_tp_cache.<locals>.decorator.<locals>.inner'
                        46      MAKE_FUNCTION                   8
                        48      CALL_FUNCTION                   1
                        50      STORE_FAST                      1: inner
                        52      LOAD_FAST                       1: inner
                        54      RETURN_VALUE                    
                '_tp_cache.<locals>.decorator'
                None
            [Disassembly]
                0       LOAD_CLOSURE                    0: typed
                2       BUILD_TUPLE                     1
                4       LOAD_CONST                      1: <CODE> decorator
                6       LOAD_CONST                      2: '_tp_cache.<locals>.decorator'
                8       MAKE_FUNCTION                   8
                10      STORE_FAST                      2: decorator
                12      LOAD_FAST                       0: func
                14      LOAD_CONST                      3: None
                16      IS_OP                           1 (is not)
                18      POP_JUMP_IF_FALSE               14 (to 28)
                20      LOAD_FAST                       2: decorator
                22      LOAD_FAST                       0: func
                24      CALL_FUNCTION                   1
                26      RETURN_VALUE                    
                28      LOAD_FAST                       2: decorator
                30      RETURN_VALUE                    
        '_tp_cache'
        [Code]
            File Name: typing.py
            Object Name: _eval_type
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 5
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'isinstance'
                'ForwardRef'
                '_evaluate'
                '_GenericAlias'
                'GenericAlias'
                'types'
                'UnionType'
                'tuple'
                '__args__'
                '__origin__'
                'functools'
                'reduce'
                'operator'
                'or_'
                'copy_with'
            [Var Names]
                't'
                'globalns'
                'localns'
                'recursive_guard'
                'ev_args'
            [Free Vars]
            [Cell Vars]
                'globalns'
                'localns'
                'recursive_guard'
            [Constants]
                'Evaluate all forward references in the given type t.\n    For use of globalns and localns see the docstring for get_type_hints().\n    recursive_guard is used to prevent infinite recursion with a recursive\n    ForwardRef.\n    '
                [Code]
                    File Name: typing.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 6
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                        '_eval_type'
                    [Var Names]
                        '.0'
                        'a'
                    [Free Vars]
                        'globalns'
                        'localns'
                        'recursive_guard'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        10 (to 26)
                        6       STORE_FAST                      1: a
                        8       LOAD_GLOBAL                     0: _eval_type
                        10      LOAD_FAST                       1: a
                        12      LOAD_DEREF                      0: globalns
                        14      LOAD_DEREF                      1: localns
                        16      LOAD_DEREF                      2: recursive_guard
                        18      CALL_FUNCTION                   4
                        20      YIELD_VALUE                     
                        22      POP_TOP                         
                        24      JUMP_ABSOLUTE                   2 (to 4)
                        26      LOAD_CONST                      0: None
                        28      RETURN_VALUE                    
                '_eval_type.<locals>.<genexpr>'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: t
                4       LOAD_GLOBAL                     1: ForwardRef
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               12 (to 24)
                10      LOAD_FAST                       0: t
                12      LOAD_METHOD                     2: _evaluate
                14      LOAD_DEREF                      0: globalns
                16      LOAD_DEREF                      1: localns
                18      LOAD_DEREF                      2: recursive_guard
                20      CALL_METHOD                     3
                22      RETURN_VALUE                    
                24      LOAD_GLOBAL                     0: isinstance
                26      LOAD_FAST                       0: t
                28      LOAD_GLOBAL                     3: _GenericAlias
                30      LOAD_GLOBAL                     4: GenericAlias
                32      LOAD_GLOBAL                     5: types
                34      LOAD_ATTR                       6: UnionType
                36      BUILD_TUPLE                     3
                38      CALL_FUNCTION                   2
                40      POP_JUMP_IF_FALSE               71 (to 142)
                42      LOAD_GLOBAL                     7: tuple
                44      LOAD_CLOSURE                    0: globalns
                46      LOAD_CLOSURE                    1: localns
                48      LOAD_CLOSURE                    2: recursive_guard
                50      BUILD_TUPLE                     3
                52      LOAD_CONST                      1: <CODE> <genexpr>
                54      LOAD_CONST                      2: '_eval_type.<locals>.<genexpr>'
                56      MAKE_FUNCTION                   8
                58      LOAD_FAST                       0: t
                60      LOAD_ATTR                       8: __args__
                62      GET_ITER                        
                64      CALL_FUNCTION                   1
                66      CALL_FUNCTION                   1
                68      STORE_FAST                      4: ev_args
                70      LOAD_FAST                       4: ev_args
                72      LOAD_FAST                       0: t
                74      LOAD_ATTR                       8: __args__
                76      COMPARE_OP                      2 (==)
                78      POP_JUMP_IF_FALSE               42 (to 84)
                80      LOAD_FAST                       0: t
                82      RETURN_VALUE                    
                84      LOAD_GLOBAL                     0: isinstance
                86      LOAD_FAST                       0: t
                88      LOAD_GLOBAL                     4: GenericAlias
                90      CALL_FUNCTION                   2
                92      POP_JUMP_IF_FALSE               53 (to 106)
                94      LOAD_GLOBAL                     4: GenericAlias
                96      LOAD_FAST                       0: t
                98      LOAD_ATTR                       9: __origin__
                100     LOAD_FAST                       4: ev_args
                102     CALL_FUNCTION                   2
                104     RETURN_VALUE                    
                106     LOAD_GLOBAL                     0: isinstance
                108     LOAD_FAST                       0: t
                110     LOAD_GLOBAL                     5: types
                112     LOAD_ATTR                       6: UnionType
                114     CALL_FUNCTION                   2
                116     POP_JUMP_IF_FALSE               66 (to 132)
                118     LOAD_GLOBAL                     10: functools
                120     LOAD_METHOD                     11: reduce
                122     LOAD_GLOBAL                     12: operator
                124     LOAD_ATTR                       13: or_
                126     LOAD_FAST                       4: ev_args
                128     CALL_METHOD                     2
                130     RETURN_VALUE                    
                132     LOAD_FAST                       0: t
                134     LOAD_METHOD                     14: copy_with
                136     LOAD_FAST                       4: ev_args
                138     CALL_METHOD                     1
                140     RETURN_VALUE                    
                142     LOAD_FAST                       0: t
                144     RETURN_VALUE                    
        '_eval_type'
        [Code]
            File Name: typing.py
            Object Name: _Final
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__init_subclass__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_Final'
                'Mixin to prohibit subclassing'
                (
                    '__weakref__'
                )
                [Code]
                    File Name: typing.py
                    Object Name: __init_subclass__
                    Arg Count: 1
                    Pos Only Arg Count: 1
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'TypeError'
                    [Var Names]
                        'self'
                        'args'
                        'kwds'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '_root'
                        'Cannot subclass special typing classes'
                    [Disassembly]
                        0       LOAD_CONST                      1: '_root'
                        2       LOAD_FAST                       2: kwds
                        4       CONTAINS_OP                     1 (not in)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: TypeError
                        10      LOAD_CONST                      2: 'Cannot subclass special typing classes'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_CONST                      0: None
                        18      RETURN_VALUE                    
                '_Final.__init_subclass__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_Final'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Mixin to prohibit subclassing'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ('__weakref__',)
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: <CODE> __init_subclass__
                18      LOAD_CONST                      4: '_Final.__init_subclass__'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      5: __init_subclass__
                24      LOAD_CONST                      5: None
                26      RETURN_VALUE                    
        '_Final'
        [Code]
            File Name: typing.py
            Object Name: _Immutable
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__copy__'
                '__deepcopy__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_Immutable'
                'Mixin to indicate that object should not be copied.'
                (
                )
                [Code]
                    File Name: typing.py
                    Object Name: __copy__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       RETURN_VALUE                    
                '_Immutable.__copy__'
                [Code]
                    File Name: typing.py
                    Object Name: __deepcopy__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'memo'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       RETURN_VALUE                    
                '_Immutable.__deepcopy__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_Immutable'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Mixin to indicate that object should not be copied.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: <CODE> __copy__
                18      LOAD_CONST                      4: '_Immutable.__copy__'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      5: __copy__
                24      LOAD_CONST                      5: <CODE> __deepcopy__
                26      LOAD_CONST                      6: '_Immutable.__deepcopy__'
                28      MAKE_FUNCTION                   0
                30      STORE_NAME                      6: __deepcopy__
                32      LOAD_CONST                      7: None
                34      RETURN_VALUE                    
        '_Immutable'
        [Code]
            File Name: typing.py
            Object Name: _SpecialForm
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__slots__'
                '__init__'
                '__getattr__'
                '__mro_entries__'
                '__repr__'
                '__reduce__'
                '__call__'
                '__or__'
                '__ror__'
                '__instancecheck__'
                '__subclasscheck__'
                '_tp_cache'
                '__getitem__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_SpecialForm'
                (
                    '_name'
                    '__doc__'
                    '_getitem'
                )
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_getitem'
                        '__name__'
                        '_name'
                        '__doc__'
                    [Var Names]
                        'self'
                        'getitem'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: getitem
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _getitem
                        6       LOAD_FAST                       1: getitem
                        8       LOAD_ATTR                       1: __name__
                        10      LOAD_FAST                       0: self
                        12      STORE_ATTR                      2: _name
                        14      LOAD_FAST                       1: getitem
                        16      LOAD_ATTR                       3: __doc__
                        18      LOAD_FAST                       0: self
                        20      STORE_ATTR                      3: __doc__
                        22      LOAD_CONST                      0: None
                        24      RETURN_VALUE                    
                '_SpecialForm.__init__'
                [Code]
                    File Name: typing.py
                    Object Name: __getattr__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                        'AttributeError'
                    [Var Names]
                        'self'
                        'item'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        frozenset({
                            '__name__'
                            '__qualname__'
                        })
                    [Disassembly]
                        0       LOAD_FAST                       1: item
                        2       LOAD_CONST                      1: frozenset({'__name__', '__qualname__'})
                        4       CONTAINS_OP                     0 (in)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       0: _name
                        12      RETURN_VALUE                    
                        14      LOAD_GLOBAL                     1: AttributeError
                        16      LOAD_FAST                       1: item
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                '_SpecialForm.__getattr__'
                [Code]
                    File Name: typing.py
                    Object Name: __mro_entries__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'TypeError'
                    [Var Names]
                        'self'
                        'bases'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Cannot subclass '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: TypeError
                        2       LOAD_CONST                      1: 'Cannot subclass '
                        4       LOAD_FAST                       0: self
                        6       FORMAT_VALUE                    2 (FVC_REPR)
                        8       BUILD_STRING                    2
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                '_SpecialForm.__mro_entries__'
                [Code]
                    File Name: typing.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'typing.'
                    [Disassembly]
                        0       LOAD_CONST                      1: 'typing.'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _name
                        6       BINARY_ADD                      
                        8       RETURN_VALUE                    
                '_SpecialForm.__repr__'
                [Code]
                    File Name: typing.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _name
                        4       RETURN_VALUE                    
                '_SpecialForm.__reduce__'
                [Code]
                    File Name: typing.py
                    Object Name: __call__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'TypeError'
                    [Var Names]
                        'self'
                        'args'
                        'kwds'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Cannot instantiate '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: TypeError
                        2       LOAD_CONST                      1: 'Cannot instantiate '
                        4       LOAD_FAST                       0: self
                        6       FORMAT_VALUE                    2 (FVC_REPR)
                        8       BUILD_STRING                    2
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                '_SpecialForm.__call__'
                [Code]
                    File Name: typing.py
                    Object Name: __or__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Union'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Union
                        2       LOAD_FAST                       0: self
                        4       LOAD_FAST                       1: other
                        6       BUILD_TUPLE                     2
                        8       BINARY_SUBSCR                   
                        10      RETURN_VALUE                    
                '_SpecialForm.__or__'
                [Code]
                    File Name: typing.py
                    Object Name: __ror__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Union'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Union
                        2       LOAD_FAST                       1: other
                        4       LOAD_FAST                       0: self
                        6       BUILD_TUPLE                     2
                        8       BINARY_SUBSCR                   
                        10      RETURN_VALUE                    
                '_SpecialForm.__ror__'
                [Code]
                    File Name: typing.py
                    Object Name: __instancecheck__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'TypeError'
                    [Var Names]
                        'self'
                        'obj'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' cannot be used with isinstance()'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: TypeError
                        2       LOAD_FAST                       0: self
                        4       FORMAT_VALUE                    0 (FVC_NONE)
                        6       LOAD_CONST                      1: ' cannot be used with isinstance()'
                        8       BUILD_STRING                    2
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                '_SpecialForm.__instancecheck__'
                [Code]
                    File Name: typing.py
                    Object Name: __subclasscheck__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'TypeError'
                    [Var Names]
                        'self'
                        'cls'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' cannot be used with issubclass()'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: TypeError
                        2       LOAD_FAST                       0: self
                        4       FORMAT_VALUE                    0 (FVC_NONE)
                        6       LOAD_CONST                      1: ' cannot be used with issubclass()'
                        8       BUILD_STRING                    2
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                '_SpecialForm.__subclasscheck__'
                [Code]
                    File Name: typing.py
                    Object Name: __getitem__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_getitem'
                    [Var Names]
                        'self'
                        'parameters'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _getitem
                        4       LOAD_FAST                       0: self
                        6       LOAD_FAST                       1: parameters
                        8       CALL_METHOD                     2
                        10      RETURN_VALUE                    
                '_SpecialForm.__getitem__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_SpecialForm'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ('_name', '__doc__', '_getitem')
                10      STORE_NAME                      3: __slots__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: '_SpecialForm.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __getattr__
                22      LOAD_CONST                      5: '_SpecialForm.__getattr__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __getattr__
                28      LOAD_CONST                      6: <CODE> __mro_entries__
                30      LOAD_CONST                      7: '_SpecialForm.__mro_entries__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __mro_entries__
                36      LOAD_CONST                      8: <CODE> __repr__
                38      LOAD_CONST                      9: '_SpecialForm.__repr__'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: __repr__
                44      LOAD_CONST                      10: <CODE> __reduce__
                46      LOAD_CONST                      11: '_SpecialForm.__reduce__'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      8: __reduce__
                52      LOAD_CONST                      12: <CODE> __call__
                54      LOAD_CONST                      13: '_SpecialForm.__call__'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      9: __call__
                60      LOAD_CONST                      14: <CODE> __or__
                62      LOAD_CONST                      15: '_SpecialForm.__or__'
                64      MAKE_FUNCTION                   0
                66      STORE_NAME                      10: __or__
                68      LOAD_CONST                      16: <CODE> __ror__
                70      LOAD_CONST                      17: '_SpecialForm.__ror__'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      11: __ror__
                76      LOAD_CONST                      18: <CODE> __instancecheck__
                78      LOAD_CONST                      19: '_SpecialForm.__instancecheck__'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      12: __instancecheck__
                84      LOAD_CONST                      20: <CODE> __subclasscheck__
                86      LOAD_CONST                      21: '_SpecialForm.__subclasscheck__'
                88      MAKE_FUNCTION                   0
                90      STORE_NAME                      13: __subclasscheck__
                92      LOAD_NAME                       14: _tp_cache
                94      LOAD_CONST                      22: <CODE> __getitem__
                96      LOAD_CONST                      23: '_SpecialForm.__getitem__'
                98      MAKE_FUNCTION                   0
                100     CALL_FUNCTION                   1
                102     STORE_NAME                      15: __getitem__
                104     LOAD_CONST                      24: None
                106     RETURN_VALUE                    
        '_SpecialForm'
        (
            '_root'
        )
        [Code]
            File Name: typing.py
            Object Name: _LiteralSpecialForm
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__getitem__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_LiteralSpecialForm'
                [Code]
                    File Name: typing.py
                    Object Name: __getitem__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'tuple'
                        '_getitem'
                    [Var Names]
                        'self'
                        'parameters'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: parameters
                        4       LOAD_GLOBAL                     1: tuple
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                8 (to 16)
                        10      LOAD_FAST                       1: parameters
                        12      BUILD_TUPLE                     1
                        14      STORE_FAST                      1: parameters
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       2: _getitem
                        20      LOAD_FAST                       0: self
                        22      BUILD_LIST                      1
                        24      LOAD_FAST                       1: parameters
                        26      LIST_EXTEND                     1
                        28      LIST_TO_TUPLE                   
                        30      CALL_FUNCTION_EX                0
                        32      RETURN_VALUE                    
                '_LiteralSpecialForm.__getitem__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_LiteralSpecialForm'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: <CODE> __getitem__
                10      LOAD_CONST                      2: '_LiteralSpecialForm.__getitem__'
                12      MAKE_FUNCTION                   0
                14      STORE_NAME                      3: __getitem__
                16      LOAD_CONST                      3: None
                18      RETURN_VALUE                    
        '_LiteralSpecialForm'
        [Code]
            File Name: typing.py
            Object Name: Any
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'TypeError'
            [Var Names]
                'self'
                'parameters'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Special type indicating an unconstrained type.\n\n    - Any is compatible with every type.\n    - Any assumed to have all methods.\n    - All values assumed to be instances of Any.\n\n    Note that all the above statements are true from the point of view of\n    static type checkers. At runtime, Any should not be used with instance\n    or class checks.\n    '
                ' is not subscriptable'
            [Disassembly]
                0       LOAD_GLOBAL                     0: TypeError
                2       LOAD_FAST                       0: self
                4       FORMAT_VALUE                    0 (FVC_NONE)
                6       LOAD_CONST                      1: ' is not subscriptable'
                8       BUILD_STRING                    2
                10      CALL_FUNCTION                   1
                12      RAISE_VARARGS                   1
        'Any'
        [Code]
            File Name: typing.py
            Object Name: NoReturn
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'TypeError'
            [Var Names]
                'self'
                'parameters'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Special type indicating functions that never return.\n    Example::\n\n      from typing import NoReturn\n\n      def stop() -> NoReturn:\n          raise Exception('no way')\n\n    This type is invalid in other positions, e.g., ``List[NoReturn]``\n    will fail in static type checkers.\n    "
                ' is not subscriptable'
            [Disassembly]
                0       LOAD_GLOBAL                     0: TypeError
                2       LOAD_FAST                       0: self
                4       FORMAT_VALUE                    0 (FVC_NONE)
                6       LOAD_CONST                      1: ' is not subscriptable'
                8       BUILD_STRING                    2
                10      CALL_FUNCTION                   1
                12      RAISE_VARARGS                   1
        'NoReturn'
        [Code]
            File Name: typing.py
            Object Name: ClassVar
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_type_check'
                '_GenericAlias'
            [Var Names]
                'self'
                'parameters'
                'item'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Special type construct to mark class variables.\n\n    An annotation wrapped in ClassVar indicates that a given\n    attribute is intended to be used as a class variable and\n    should not be set on instances of that class. Usage::\n\n      class Starship:\n          stats: ClassVar[Dict[str, int]] = {} # class variable\n          damage: int = 10                     # instance variable\n\n    ClassVar accepts only types and cannot be further subscribed.\n\n    Note that ClassVar is not a class itself, and should not\n    be used with isinstance() or issubclass().\n    '
                ' accepts only single type.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _type_check
                2       LOAD_FAST                       1: parameters
                4       LOAD_FAST                       0: self
                6       FORMAT_VALUE                    0 (FVC_NONE)
                8       LOAD_CONST                      1: ' accepts only single type.'
                10      BUILD_STRING                    2
                12      CALL_FUNCTION                   2
                14      STORE_FAST                      2: item
                16      LOAD_GLOBAL                     1: _GenericAlias
                18      LOAD_FAST                       0: self
                20      LOAD_FAST                       2: item
                22      BUILD_TUPLE                     1
                24      CALL_FUNCTION                   2
                26      RETURN_VALUE                    
        'ClassVar'
        [Code]
            File Name: typing.py
            Object Name: Final
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_type_check'
                '_GenericAlias'
            [Var Names]
                'self'
                'parameters'
                'item'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Special typing construct to indicate final names to type checkers.\n\n    A final name cannot be re-assigned or overridden in a subclass.\n    For example:\n\n      MAX_SIZE: Final = 9000\n      MAX_SIZE += 1  # Error reported by type checker\n\n      class Connection:\n          TIMEOUT: Final[int] = 10\n\n      class FastConnector(Connection):\n          TIMEOUT = 1  # Error reported by type checker\n\n    There is no runtime checking of these properties.\n    '
                ' accepts only single type.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _type_check
                2       LOAD_FAST                       1: parameters
                4       LOAD_FAST                       0: self
                6       FORMAT_VALUE                    0 (FVC_NONE)
                8       LOAD_CONST                      1: ' accepts only single type.'
                10      BUILD_STRING                    2
                12      CALL_FUNCTION                   2
                14      STORE_FAST                      2: item
                16      LOAD_GLOBAL                     1: _GenericAlias
                18      LOAD_FAST                       0: self
                20      LOAD_FAST                       2: item
                22      BUILD_TUPLE                     1
                24      CALL_FUNCTION                   2
                26      RETURN_VALUE                    
        'Final'
        [Code]
            File Name: typing.py
            Object Name: Union
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 5
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'TypeError'
                'isinstance'
                'tuple'
                '_remove_dups_flatten'
                'len'
                'type'
                '_UnionGenericAlias'
            [Var Names]
                'self'
                'parameters'
            [Free Vars]
            [Cell Vars]
                'msg'
            [Constants]
                'Union type; Union[X, Y] means either X or Y.\n\n    To define a union, use e.g. Union[int, str].  Details:\n    - The arguments must be types and there must be at least one.\n    - None as an argument is a special case and is replaced by\n      type(None).\n    - Unions of unions are flattened, e.g.::\n\n        Union[Union[int, str], float] == Union[int, str, float]\n\n    - Unions of a single argument vanish, e.g.::\n\n        Union[int] == int  # The constructor actually returns int\n\n    - Redundant arguments are skipped, e.g.::\n\n        Union[int, str, int] == Union[int, str]\n\n    - When comparing unions, the argument order is ignored, e.g.::\n\n        Union[int, str] == Union[str, int]\n\n    - You cannot subclass or instantiate a union.\n    - You can use Optional[X] as a shorthand for Union[X, None].\n    '
                (
                )
                'Cannot take a Union of no types.'
                'Union[arg, ...]: each arg must be a type.'
                [Code]
                    File Name: typing.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                        '_type_check'
                    [Var Names]
                        '.0'
                        'p'
                    [Free Vars]
                        'msg'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        8 (to 22)
                        6       STORE_FAST                      1: p
                        8       LOAD_GLOBAL                     0: _type_check
                        10      LOAD_FAST                       1: p
                        12      LOAD_DEREF                      0: msg
                        14      CALL_FUNCTION                   2
                        16      YIELD_VALUE                     
                        18      POP_TOP                         
                        20      JUMP_ABSOLUTE                   2 (to 4)
                        22      LOAD_CONST                      0: None
                        24      RETURN_VALUE                    
                'Union.<locals>.<genexpr>'
                1
                0
                2
                None
                'Optional'
                (
                    'name'
                )
            [Disassembly]
                0       LOAD_FAST                       1: parameters
                2       LOAD_CONST                      1: ()
                4       COMPARE_OP                      2 (==)
                6       POP_JUMP_IF_FALSE               8 (to 16)
                8       LOAD_GLOBAL                     0: TypeError
                10      LOAD_CONST                      2: 'Cannot take a Union of no types.'
                12      CALL_FUNCTION                   1
                14      RAISE_VARARGS                   1
                16      LOAD_GLOBAL                     1: isinstance
                18      LOAD_FAST                       1: parameters
                20      LOAD_GLOBAL                     2: tuple
                22      CALL_FUNCTION                   2
                24      POP_JUMP_IF_TRUE                16 (to 32)
                26      LOAD_FAST                       1: parameters
                28      BUILD_TUPLE                     1
                30      STORE_FAST                      1: parameters
                32      LOAD_CONST                      3: 'Union[arg, ...]: each arg must be a type.'
                34      STORE_DEREF                     0: msg
                36      LOAD_GLOBAL                     2: tuple
                38      LOAD_CLOSURE                    0: msg
                40      BUILD_TUPLE                     1
                42      LOAD_CONST                      4: <CODE> <genexpr>
                44      LOAD_CONST                      5: 'Union.<locals>.<genexpr>'
                46      MAKE_FUNCTION                   8
                48      LOAD_FAST                       1: parameters
                50      GET_ITER                        
                52      CALL_FUNCTION                   1
                54      CALL_FUNCTION                   1
                56      STORE_FAST                      1: parameters
                58      LOAD_GLOBAL                     3: _remove_dups_flatten
                60      LOAD_FAST                       1: parameters
                62      CALL_FUNCTION                   1
                64      STORE_FAST                      1: parameters
                66      LOAD_GLOBAL                     4: len
                68      LOAD_FAST                       1: parameters
                70      CALL_FUNCTION                   1
                72      LOAD_CONST                      6: 1
                74      COMPARE_OP                      2 (==)
                76      POP_JUMP_IF_FALSE               43 (to 86)
                78      LOAD_FAST                       1: parameters
                80      LOAD_CONST                      7: 0
                82      BINARY_SUBSCR                   
                84      RETURN_VALUE                    
                86      LOAD_GLOBAL                     4: len
                88      LOAD_FAST                       1: parameters
                90      CALL_FUNCTION                   1
                92      LOAD_CONST                      8: 2
                94      COMPARE_OP                      2 (==)
                96      POP_JUMP_IF_FALSE               62 (to 124)
                98      LOAD_GLOBAL                     5: type
                100     LOAD_CONST                      9: None
                102     CALL_FUNCTION                   1
                104     LOAD_FAST                       1: parameters
                106     CONTAINS_OP                     0 (in)
                108     POP_JUMP_IF_FALSE               62 (to 124)
                110     LOAD_GLOBAL                     6: _UnionGenericAlias
                112     LOAD_FAST                       0: self
                114     LOAD_FAST                       1: parameters
                116     LOAD_CONST                      10: 'Optional'
                118     LOAD_CONST                      11: ('name',)
                120     CALL_FUNCTION_KW                3
                122     RETURN_VALUE                    
                124     LOAD_GLOBAL                     6: _UnionGenericAlias
                126     LOAD_FAST                       0: self
                128     LOAD_FAST                       1: parameters
                130     CALL_FUNCTION                   2
                132     RETURN_VALUE                    
        'Union'
        [Code]
            File Name: typing.py
            Object Name: Optional
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_type_check'
                'Union'
                'type'
            [Var Names]
                'self'
                'parameters'
                'arg'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Optional type.\n\n    Optional[X] is equivalent to Union[X, None].\n    '
                ' requires a single type.'
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _type_check
                2       LOAD_FAST                       1: parameters
                4       LOAD_FAST                       0: self
                6       FORMAT_VALUE                    0 (FVC_NONE)
                8       LOAD_CONST                      1: ' requires a single type.'
                10      BUILD_STRING                    2
                12      CALL_FUNCTION                   2
                14      STORE_FAST                      2: arg
                16      LOAD_GLOBAL                     1: Union
                18      LOAD_FAST                       2: arg
                20      LOAD_GLOBAL                     2: type
                22      LOAD_CONST                      2: None
                24      CALL_FUNCTION                   1
                26      BUILD_TUPLE                     2
                28      BINARY_SUBSCR                   
                30      RETURN_VALUE                    
        'Optional'
        [Code]
            File Name: typing.py
            Object Name: Literal
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 8
            Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
            [Names]
                '_flatten_literal_params'
                'tuple'
                '_deduplicate'
                'list'
                '_value_and_type_iter'
                'TypeError'
                '_LiteralGenericAlias'
            [Var Names]
                'self'
                'parameters'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Special typing form to define literal types (a.k.a. value types).\n\n    This form can be used to indicate to type checkers that the corresponding\n    variable or function parameter has a value equivalent to the provided\n    literal (or one of several literals):\n\n      def validate_simple(data: Any) -> Literal[True]:  # always returns True\n          ...\n\n      MODE = Literal['r', 'rb', 'w', 'wb']\n      def open_helper(file: str, mode: MODE) -> str:\n          ...\n\n      open_helper('/some/path', 'r')  # Passes type check\n      open_helper('/other/path', 'typo')  # Error in type checker\n\n    Literal[...] cannot be subclassed. At runtime, an arbitrary value\n    is allowed as type argument to Literal[...], but type checkers may\n    impose restrictions.\n    "
                [Code]
                    File Name: typing.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                    [Var Names]
                        '.0'
                        'p'
                        '_'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        7 (to 20)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: p
                        10      STORE_FAST                      2: _
                        12      LOAD_FAST                       1: p
                        14      YIELD_VALUE                     
                        16      POP_TOP                         
                        18      JUMP_ABSOLUTE                   2 (to 4)
                        20      LOAD_CONST                      0: None
                        22      RETURN_VALUE                    
                'Literal.<locals>.<genexpr>'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _flatten_literal_params
                2       LOAD_FAST                       1: parameters
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      1: parameters
                8       SETUP_FINALLY                   17 (to 44)
                10      LOAD_GLOBAL                     1: tuple
                12      LOAD_CONST                      1: <CODE> <genexpr>
                14      LOAD_CONST                      2: 'Literal.<locals>.<genexpr>'
                16      MAKE_FUNCTION                   0
                18      LOAD_GLOBAL                     2: _deduplicate
                20      LOAD_GLOBAL                     3: list
                22      LOAD_GLOBAL                     4: _value_and_type_iter
                24      LOAD_FAST                       1: parameters
                26      CALL_FUNCTION                   1
                28      CALL_FUNCTION                   1
                30      CALL_FUNCTION                   1
                32      GET_ITER                        
                34      CALL_FUNCTION                   1
                36      CALL_FUNCTION                   1
                38      STORE_FAST                      1: parameters
                40      POP_BLOCK                       
                42      JUMP_FORWARD                    9 (to 62)
                44      DUP_TOP                         
                46      LOAD_GLOBAL                     5: TypeError
                48      JUMP_IF_NOT_EXC_MATCH           30 (to 60)
                50      POP_TOP                         
                52      POP_TOP                         
                54      POP_TOP                         
                56      POP_EXCEPT                      
                58      JUMP_FORWARD                    1 (to 62)
                60      RERAISE                         0
                62      LOAD_GLOBAL                     6: _LiteralGenericAlias
                64      LOAD_FAST                       0: self
                66      LOAD_FAST                       1: parameters
                68      CALL_FUNCTION                   2
                70      RETURN_VALUE                    
        'Literal'
        [Code]
            File Name: typing.py
            Object Name: TypeAlias
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'TypeError'
            [Var Names]
                'self'
                'parameters'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Special marker indicating that an assignment should\n    be recognized as a proper type alias definition by type\n    checkers.\n\n    For example::\n\n        Predicate: TypeAlias = Callable[..., bool]\n\n    It's invalid when used anywhere except as in the example above.\n    "
                ' is not subscriptable'
            [Disassembly]
                0       LOAD_GLOBAL                     0: TypeError
                2       LOAD_FAST                       0: self
                4       FORMAT_VALUE                    0 (FVC_NONE)
                6       LOAD_CONST                      1: ' is not subscriptable'
                8       BUILD_STRING                    2
                10      CALL_FUNCTION                   1
                12      RAISE_VARARGS                   1
        'TypeAlias'
        [Code]
            File Name: typing.py
            Object Name: Concatenate
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 6
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'TypeError'
                'isinstance'
                'tuple'
                'ParamSpec'
                '_ConcatenateGenericAlias'
                'TypeVar'
            [Var Names]
                'self'
                'parameters'
            [Free Vars]
            [Cell Vars]
                'msg'
            [Constants]
                'Used in conjunction with ``ParamSpec`` and ``Callable`` to represent a\n    higher order function which adds, removes or transforms parameters of a\n    callable.\n\n    For example::\n\n       Callable[Concatenate[int, P], int]\n\n    See PEP 612 for detailed information.\n    '
                (
                )
                'Cannot take a Concatenate of no types.'
                -1
                'The last parameter to Concatenate should be a ParamSpec variable.'
                'Concatenate[arg, ...]: each arg must be a type.'
                [Code]
                    File Name: typing.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                        '_type_check'
                    [Var Names]
                        '.0'
                        'p'
                    [Free Vars]
                        'msg'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        8 (to 22)
                        6       STORE_FAST                      1: p
                        8       LOAD_GLOBAL                     0: _type_check
                        10      LOAD_FAST                       1: p
                        12      LOAD_DEREF                      0: msg
                        14      CALL_FUNCTION                   2
                        16      YIELD_VALUE                     
                        18      POP_TOP                         
                        20      JUMP_ABSOLUTE                   2 (to 4)
                        22      LOAD_CONST                      0: None
                        24      RETURN_VALUE                    
                'Concatenate.<locals>.<genexpr>'
                None
                True
                (
                    '_typevar_types'
                    '_paramspec_tvars'
                )
            [Disassembly]
                0       LOAD_FAST                       1: parameters
                2       LOAD_CONST                      1: ()
                4       COMPARE_OP                      2 (==)
                6       POP_JUMP_IF_FALSE               8 (to 16)
                8       LOAD_GLOBAL                     0: TypeError
                10      LOAD_CONST                      2: 'Cannot take a Concatenate of no types.'
                12      CALL_FUNCTION                   1
                14      RAISE_VARARGS                   1
                16      LOAD_GLOBAL                     1: isinstance
                18      LOAD_FAST                       1: parameters
                20      LOAD_GLOBAL                     2: tuple
                22      CALL_FUNCTION                   2
                24      POP_JUMP_IF_TRUE                16 (to 32)
                26      LOAD_FAST                       1: parameters
                28      BUILD_TUPLE                     1
                30      STORE_FAST                      1: parameters
                32      LOAD_GLOBAL                     1: isinstance
                34      LOAD_FAST                       1: parameters
                36      LOAD_CONST                      3: -1
                38      BINARY_SUBSCR                   
                40      LOAD_GLOBAL                     3: ParamSpec
                42      CALL_FUNCTION                   2
                44      POP_JUMP_IF_TRUE                27 (to 54)
                46      LOAD_GLOBAL                     0: TypeError
                48      LOAD_CONST                      4: 'The last parameter to Concatenate should be a ParamSpec variable.'
                50      CALL_FUNCTION                   1
                52      RAISE_VARARGS                   1
                54      LOAD_CONST                      5: 'Concatenate[arg, ...]: each arg must be a type.'
                56      STORE_DEREF                     0: msg
                58      BUILD_LIST                      0
                60      LOAD_CLOSURE                    0: msg
                62      BUILD_TUPLE                     1
                64      LOAD_CONST                      6: <CODE> <genexpr>
                66      LOAD_CONST                      7: 'Concatenate.<locals>.<genexpr>'
                68      MAKE_FUNCTION                   8
                70      LOAD_FAST                       1: parameters
                72      LOAD_CONST                      8: None
                74      LOAD_CONST                      3: -1
                76      BUILD_SLICE                     2
                78      BINARY_SUBSCR                   
                80      GET_ITER                        
                82      CALL_FUNCTION                   1
                84      LIST_EXTEND                     1
                86      LOAD_FAST                       1: parameters
                88      LOAD_CONST                      3: -1
                90      BINARY_SUBSCR                   
                92      LIST_APPEND                     1
                94      LIST_TO_TUPLE                   
                96      STORE_FAST                      1: parameters
                98      LOAD_GLOBAL                     4: _ConcatenateGenericAlias
                100     LOAD_FAST                       0: self
                102     LOAD_FAST                       1: parameters
                104     LOAD_GLOBAL                     5: TypeVar
                106     LOAD_GLOBAL                     3: ParamSpec
                108     BUILD_TUPLE                     2
                110     LOAD_CONST                      9: True
                112     LOAD_CONST                      10: ('_typevar_types', '_paramspec_tvars')
                114     CALL_FUNCTION_KW                4
                116     RETURN_VALUE                    
        'Concatenate'
        [Code]
            File Name: typing.py
            Object Name: TypeGuard
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_type_check'
                '_GenericAlias'
            [Var Names]
                'self'
                'parameters'
                'item'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Special typing form used to annotate the return type of a user-defined\n    type guard function.  ``TypeGuard`` only accepts a single type argument.\n    At runtime, functions marked this way should return a boolean.\n\n    ``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static\n    type checkers to determine a more precise type of an expression within a\n    program\'s code flow.  Usually type narrowing is done by analyzing\n    conditional code flow and applying the narrowing to a block of code.  The\n    conditional expression here is sometimes referred to as a "type guard".\n\n    Sometimes it would be convenient to use a user-defined boolean function\n    as a type guard.  Such a function should use ``TypeGuard[...]`` as its\n    return type to alert static type checkers to this intention.\n\n    Using  ``-> TypeGuard`` tells the static type checker that for a given\n    function:\n\n    1. The return value is a boolean.\n    2. If the return value is ``True``, the type of its argument\n       is the type inside ``TypeGuard``.\n\n       For example::\n\n          def is_str(val: Union[str, float]):\n              # "isinstance" type guard\n              if isinstance(val, str):\n                  # Type of ``val`` is narrowed to ``str``\n                  ...\n              else:\n                  # Else, type of ``val`` is narrowed to ``float``.\n                  ...\n\n    Strict type narrowing is not enforced -- ``TypeB`` need not be a narrower\n    form of ``TypeA`` (it can even be a wider form) and this may lead to\n    type-unsafe results.  The main reason is to allow for things like\n    narrowing ``List[object]`` to ``List[str]`` even though the latter is not\n    a subtype of the former, since ``List`` is invariant.  The responsibility of\n    writing type-safe type guards is left to the user.\n\n    ``TypeGuard`` also works with type variables.  For more information, see\n    PEP 647 (User-Defined Type Guards).\n    '
                ' accepts only single type.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _type_check
                2       LOAD_FAST                       1: parameters
                4       LOAD_FAST                       0: self
                6       FORMAT_VALUE                    0 (FVC_NONE)
                8       LOAD_CONST                      1: ' accepts only single type.'
                10      BUILD_STRING                    2
                12      CALL_FUNCTION                   2
                14      STORE_FAST                      2: item
                16      LOAD_GLOBAL                     1: _GenericAlias
                18      LOAD_FAST                       0: self
                20      LOAD_FAST                       2: item
                22      BUILD_TUPLE                     1
                24      CALL_FUNCTION                   2
                26      RETURN_VALUE                    
        'TypeGuard'
        [Code]
            File Name: typing.py
            Object Name: ForwardRef
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__init__'
                '_evaluate'
                '__eq__'
                '__hash__'
                '__repr__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ForwardRef'
                'Internal wrapper to hold a forward reference.'
                (
                    '__forward_arg__'
                    '__forward_code__'
                    '__forward_evaluated__'
                    '__forward_value__'
                    '__forward_is_argument__'
                    '__forward_is_class__'
                    '__forward_module__'
                )
                True
                None
                False
                (
                    'is_class'
                )
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'str'
                        'TypeError'
                        'compile'
                        'SyntaxError'
                        '__forward_arg__'
                        '__forward_code__'
                        '__forward_evaluated__'
                        '__forward_value__'
                        '__forward_is_argument__'
                        '__forward_is_class__'
                        '__forward_module__'
                    [Var Names]
                        'self'
                        'arg'
                        'is_argument'
                        'module'
                        'is_class'
                        'code'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Forward reference must be a string -- got '
                        '<string>'
                        'eval'
                        'Forward reference must be an expression -- got '
                        False
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: arg
                        4       LOAD_GLOBAL                     1: str
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                12 (to 24)
                        10      LOAD_GLOBAL                     2: TypeError
                        12      LOAD_CONST                      1: 'Forward reference must be a string -- got '
                        14      LOAD_FAST                       1: arg
                        16      FORMAT_VALUE                    2 (FVC_REPR)
                        18      BUILD_STRING                    2
                        20      CALL_FUNCTION                   1
                        22      RAISE_VARARGS                   1
                        24      SETUP_FINALLY                   8 (to 42)
                        26      LOAD_GLOBAL                     3: compile
                        28      LOAD_FAST                       1: arg
                        30      LOAD_CONST                      2: '<string>'
                        32      LOAD_CONST                      3: 'eval'
                        34      CALL_FUNCTION                   3
                        36      STORE_FAST                      5: code
                        38      POP_BLOCK                       
                        40      JUMP_FORWARD                    14 (to 70)
                        42      DUP_TOP                         
                        44      LOAD_GLOBAL                     4: SyntaxError
                        46      JUMP_IF_NOT_EXC_MATCH           34 (to 68)
                        48      POP_TOP                         
                        50      POP_TOP                         
                        52      POP_TOP                         
                        54      LOAD_GLOBAL                     4: SyntaxError
                        56      LOAD_CONST                      4: 'Forward reference must be an expression -- got '
                        58      LOAD_FAST                       1: arg
                        60      FORMAT_VALUE                    2 (FVC_REPR)
                        62      BUILD_STRING                    2
                        64      CALL_FUNCTION                   1
                        66      RAISE_VARARGS                   1
                        68      RERAISE                         0
                        70      LOAD_FAST                       1: arg
                        72      LOAD_FAST                       0: self
                        74      STORE_ATTR                      5: __forward_arg__
                        76      LOAD_FAST                       5: code
                        78      LOAD_FAST                       0: self
                        80      STORE_ATTR                      6: __forward_code__
                        82      LOAD_CONST                      5: False
                        84      LOAD_FAST                       0: self
                        86      STORE_ATTR                      7: __forward_evaluated__
                        88      LOAD_CONST                      0: None
                        90      LOAD_FAST                       0: self
                        92      STORE_ATTR                      8: __forward_value__
                        94      LOAD_FAST                       2: is_argument
                        96      LOAD_FAST                       0: self
                        98      STORE_ATTR                      9: __forward_is_argument__
                        100     LOAD_FAST                       4: is_class
                        102     LOAD_FAST                       0: self
                        104     STORE_ATTR                      10: __forward_is_class__
                        106     LOAD_FAST                       3: module
                        108     LOAD_FAST                       0: self
                        110     STORE_ATTR                      11: __forward_module__
                        112     LOAD_CONST                      0: None
                        114     RETURN_VALUE                    
                'ForwardRef.__init__'
                [Code]
                    File Name: typing.py
                    Object Name: _evaluate
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__forward_arg__'
                        '__forward_evaluated__'
                        '__forward_module__'
                        'getattr'
                        'sys'
                        'modules'
                        'get'
                        '_type_check'
                        'eval'
                        '__forward_code__'
                        '__forward_is_argument__'
                        '__forward_is_class__'
                        '_eval_type'
                        '__forward_value__'
                    [Var Names]
                        'self'
                        'globalns'
                        'localns'
                        'recursive_guard'
                        'type_'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '__dict__'
                        'Forward references must evaluate to types.'
                        (
                            'is_argument'
                            'allow_special_forms'
                        )
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __forward_arg__
                        4       LOAD_FAST                       3: recursive_guard
                        6       CONTAINS_OP                     0 (in)
                        8       POP_JUMP_IF_FALSE               7 (to 14)
                        10      LOAD_FAST                       0: self
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: __forward_evaluated__
                        18      POP_JUMP_IF_FALSE               14 (to 28)
                        20      LOAD_FAST                       2: localns
                        22      LOAD_FAST                       1: globalns
                        24      IS_OP                           1 (is not)
                        26      POP_JUMP_IF_FALSE               87 (to 174)
                        28      LOAD_FAST                       1: globalns
                        30      LOAD_CONST                      0: None
                        32      IS_OP                           0 (is)
                        34      POP_JUMP_IF_FALSE               27 (to 54)
                        36      LOAD_FAST                       2: localns
                        38      LOAD_CONST                      0: None
                        40      IS_OP                           0 (is)
                        42      POP_JUMP_IF_FALSE               27 (to 54)
                        44      BUILD_MAP                       0
                        46      DUP_TOP                         
                        48      STORE_FAST                      1: globalns
                        50      STORE_FAST                      2: localns
                        52      JUMP_FORWARD                    13 (to 80)
                        54      LOAD_FAST                       1: globalns
                        56      LOAD_CONST                      0: None
                        58      IS_OP                           0 (is)
                        60      POP_JUMP_IF_FALSE               34 (to 68)
                        62      LOAD_FAST                       2: localns
                        64      STORE_FAST                      1: globalns
                        66      JUMP_FORWARD                    6 (to 80)
                        68      LOAD_FAST                       2: localns
                        70      LOAD_CONST                      0: None
                        72      IS_OP                           0 (is)
                        74      POP_JUMP_IF_FALSE               40 (to 80)
                        76      LOAD_FAST                       1: globalns
                        78      STORE_FAST                      2: localns
                        80      LOAD_FAST                       0: self
                        82      LOAD_ATTR                       2: __forward_module__
                        84      LOAD_CONST                      0: None
                        86      IS_OP                           1 (is not)
                        88      POP_JUMP_IF_FALSE               57 (to 114)
                        90      LOAD_GLOBAL                     3: getattr
                        92      LOAD_GLOBAL                     4: sys
                        94      LOAD_ATTR                       5: modules
                        96      LOAD_METHOD                     6: get
                        98      LOAD_FAST                       0: self
                        100     LOAD_ATTR                       2: __forward_module__
                        102     LOAD_CONST                      0: None
                        104     CALL_METHOD                     2
                        106     LOAD_CONST                      1: '__dict__'
                        108     LOAD_FAST                       1: globalns
                        110     CALL_FUNCTION                   3
                        112     STORE_FAST                      1: globalns
                        114     LOAD_GLOBAL                     7: _type_check
                        116     LOAD_GLOBAL                     8: eval
                        118     LOAD_FAST                       0: self
                        120     LOAD_ATTR                       9: __forward_code__
                        122     LOAD_FAST                       1: globalns
                        124     LOAD_FAST                       2: localns
                        126     CALL_FUNCTION                   3
                        128     LOAD_CONST                      2: 'Forward references must evaluate to types.'
                        130     LOAD_FAST                       0: self
                        132     LOAD_ATTR                       10: __forward_is_argument__
                        134     LOAD_FAST                       0: self
                        136     LOAD_ATTR                       11: __forward_is_class__
                        138     LOAD_CONST                      3: ('is_argument', 'allow_special_forms')
                        140     CALL_FUNCTION_KW                4
                        142     STORE_FAST                      4: type_
                        144     LOAD_GLOBAL                     12: _eval_type
                        146     LOAD_FAST                       4: type_
                        148     LOAD_FAST                       1: globalns
                        150     LOAD_FAST                       2: localns
                        152     LOAD_FAST                       3: recursive_guard
                        154     LOAD_FAST                       0: self
                        156     LOAD_ATTR                       0: __forward_arg__
                        158     BUILD_SET                       1
                        160     BINARY_OR                       
                        162     CALL_FUNCTION                   4
                        164     LOAD_FAST                       0: self
                        166     STORE_ATTR                      13: __forward_value__
                        168     LOAD_CONST                      4: True
                        170     LOAD_FAST                       0: self
                        172     STORE_ATTR                      1: __forward_evaluated__
                        174     LOAD_FAST                       0: self
                        176     LOAD_ATTR                       13: __forward_value__
                        178     RETURN_VALUE                    
                'ForwardRef._evaluate'
                [Code]
                    File Name: typing.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'ForwardRef'
                        'NotImplemented'
                        '__forward_evaluated__'
                        '__forward_arg__'
                        '__forward_value__'
                        '__forward_module__'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: ForwardRef
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: __forward_evaluated__
                        18      POP_JUMP_IF_FALSE               25 (to 50)
                        20      LOAD_FAST                       1: other
                        22      LOAD_ATTR                       3: __forward_evaluated__
                        24      POP_JUMP_IF_FALSE               25 (to 50)
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       4: __forward_arg__
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       4: __forward_arg__
                        34      COMPARE_OP                      2 (==)
                        36      JUMP_IF_FALSE_OR_POP            24 (to 48)
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       5: __forward_value__
                        42      LOAD_FAST                       1: other
                        44      LOAD_ATTR                       5: __forward_value__
                        46      COMPARE_OP                      2 (==)
                        48      RETURN_VALUE                    
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       4: __forward_arg__
                        54      LOAD_FAST                       1: other
                        56      LOAD_ATTR                       4: __forward_arg__
                        58      COMPARE_OP                      2 (==)
                        60      JUMP_IF_FALSE_OR_POP            36 (to 72)
                        62      LOAD_FAST                       0: self
                        64      LOAD_ATTR                       6: __forward_module__
                        66      LOAD_FAST                       1: other
                        68      LOAD_ATTR                       6: __forward_module__
                        70      COMPARE_OP                      2 (==)
                        72      RETURN_VALUE                    
                'ForwardRef.__eq__'
                [Code]
                    File Name: typing.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        '__forward_arg__'
                        '__forward_module__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: __forward_arg__
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: __forward_module__
                        10      BUILD_TUPLE                     2
                        12      CALL_FUNCTION                   1
                        14      RETURN_VALUE                    
                'ForwardRef.__hash__'
                [Code]
                    File Name: typing.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__forward_arg__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'ForwardRef('
                        ')'
                    [Disassembly]
                        0       LOAD_CONST                      1: 'ForwardRef('
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: __forward_arg__
                        6       FORMAT_VALUE                    2 (FVC_REPR)
                        8       LOAD_CONST                      2: ')'
                        10      BUILD_STRING                    3
                        12      RETURN_VALUE                    
                'ForwardRef.__repr__'
                (
                    True
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ForwardRef'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Internal wrapper to hold a forward reference.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ('__forward_arg__', '__forward_code__', '__forward_evaluated__', '__forward_value__', '__forward_is_argument__', '__forward_is_class__', '__forward_module__')
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      17: (True, None)
                18      LOAD_CONST                      5: False
                20      LOAD_CONST                      6: ('is_class',)
                22      BUILD_CONST_KEY_MAP             1
                24      LOAD_CONST                      7: <CODE> __init__
                26      LOAD_CONST                      8: 'ForwardRef.__init__'
                28      MAKE_FUNCTION                   3
                30      STORE_NAME                      5: __init__
                32      LOAD_CONST                      9: <CODE> _evaluate
                34      LOAD_CONST                      10: 'ForwardRef._evaluate'
                36      MAKE_FUNCTION                   0
                38      STORE_NAME                      6: _evaluate
                40      LOAD_CONST                      11: <CODE> __eq__
                42      LOAD_CONST                      12: 'ForwardRef.__eq__'
                44      MAKE_FUNCTION                   0
                46      STORE_NAME                      7: __eq__
                48      LOAD_CONST                      13: <CODE> __hash__
                50      LOAD_CONST                      14: 'ForwardRef.__hash__'
                52      MAKE_FUNCTION                   0
                54      STORE_NAME                      8: __hash__
                56      LOAD_CONST                      15: <CODE> __repr__
                58      LOAD_CONST                      16: 'ForwardRef.__repr__'
                60      MAKE_FUNCTION                   0
                62      STORE_NAME                      9: __repr__
                64      LOAD_CONST                      4: None
                66      RETURN_VALUE                    
        'ForwardRef'
        [Code]
            File Name: typing.py
            Object Name: _TypeVarLike
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__or__'
                '__ror__'
                '__repr__'
                '__reduce__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_TypeVarLike'
                'Mixin for TypeVar-like types (TypeVar and ParamSpec).'
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ValueError'
                        'bool'
                        '__covariant__'
                        '__contravariant__'
                        '_type_check'
                        '__bound__'
                    [Var Names]
                        'self'
                        'bound'
                        'covariant'
                        'contravariant'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Used to setup TypeVars and ParamSpec's bound, covariant and\n        contravariant attributes.\n        "
                        'Bivariant types are not supported.'
                        'Bound must be a type.'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       2: covariant
                        2       POP_JUMP_IF_FALSE               8 (to 16)
                        4       LOAD_FAST                       3: contravariant
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: ValueError
                        10      LOAD_CONST                      1: 'Bivariant types are not supported.'
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                        16      LOAD_GLOBAL                     1: bool
                        18      LOAD_FAST                       2: covariant
                        20      CALL_FUNCTION                   1
                        22      LOAD_FAST                       0: self
                        24      STORE_ATTR                      2: __covariant__
                        26      LOAD_GLOBAL                     1: bool
                        28      LOAD_FAST                       3: contravariant
                        30      CALL_FUNCTION                   1
                        32      LOAD_FAST                       0: self
                        34      STORE_ATTR                      3: __contravariant__
                        36      LOAD_FAST                       1: bound
                        38      POP_JUMP_IF_FALSE               28 (to 56)
                        40      LOAD_GLOBAL                     4: _type_check
                        42      LOAD_FAST                       1: bound
                        44      LOAD_CONST                      2: 'Bound must be a type.'
                        46      CALL_FUNCTION                   2
                        48      LOAD_FAST                       0: self
                        50      STORE_ATTR                      5: __bound__
                        52      LOAD_CONST                      3: None
                        54      RETURN_VALUE                    
                        56      LOAD_CONST                      3: None
                        58      LOAD_FAST                       0: self
                        60      STORE_ATTR                      5: __bound__
                        62      LOAD_CONST                      3: None
                        64      RETURN_VALUE                    
                '_TypeVarLike.__init__'
                [Code]
                    File Name: typing.py
                    Object Name: __or__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Union'
                    [Var Names]
                        'self'
                        'right'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Union
                        2       LOAD_FAST                       0: self
                        4       LOAD_FAST                       1: right
                        6       BUILD_TUPLE                     2
                        8       BINARY_SUBSCR                   
                        10      RETURN_VALUE                    
                '_TypeVarLike.__or__'
                [Code]
                    File Name: typing.py
                    Object Name: __ror__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Union'
                    [Var Names]
                        'self'
                        'left'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Union
                        2       LOAD_FAST                       1: left
                        4       LOAD_FAST                       0: self
                        6       BUILD_TUPLE                     2
                        8       BINARY_SUBSCR                   
                        10      RETURN_VALUE                    
                '_TypeVarLike.__ror__'
                [Code]
                    File Name: typing.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__covariant__'
                        '__contravariant__'
                        '__name__'
                    [Var Names]
                        'self'
                        'prefix'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '+'
                        '-'
                        '~'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __covariant__
                        4       POP_JUMP_IF_FALSE               6 (to 12)
                        6       LOAD_CONST                      1: '+'
                        8       STORE_FAST                      1: prefix
                        10      JUMP_FORWARD                    8 (to 28)
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       1: __contravariant__
                        16      POP_JUMP_IF_FALSE               12 (to 24)
                        18      LOAD_CONST                      2: '-'
                        20      STORE_FAST                      1: prefix
                        22      JUMP_FORWARD                    2 (to 28)
                        24      LOAD_CONST                      3: '~'
                        26      STORE_FAST                      1: prefix
                        28      LOAD_FAST                       1: prefix
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       2: __name__
                        34      BINARY_ADD                      
                        36      RETURN_VALUE                    
                '_TypeVarLike.__repr__'
                [Code]
                    File Name: typing.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__name__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __name__
                        4       RETURN_VALUE                    
                '_TypeVarLike.__reduce__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_TypeVarLike'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Mixin for TypeVar-like types (TypeVar and ParamSpec).'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: '_TypeVarLike.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __or__
                22      LOAD_CONST                      5: '_TypeVarLike.__or__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __or__
                28      LOAD_CONST                      6: <CODE> __ror__
                30      LOAD_CONST                      7: '_TypeVarLike.__ror__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __ror__
                36      LOAD_CONST                      8: <CODE> __repr__
                38      LOAD_CONST                      9: '_TypeVarLike.__repr__'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: __repr__
                44      LOAD_CONST                      10: <CODE> __reduce__
                46      LOAD_CONST                      11: '_TypeVarLike.__reduce__'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      8: __reduce__
                52      LOAD_CONST                      12: None
                54      RETURN_VALUE                    
        '_TypeVarLike'
        [Code]
            File Name: typing.py
            Object Name: TypeVar
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__init__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'TypeVar'
                "Type variable.\n\n    Usage::\n\n      T = TypeVar('T')  # Can be anything\n      A = TypeVar('A', str, bytes)  # Must be str or bytes\n\n    Type variables exist primarily for the benefit of static type\n    checkers.  They serve as the parameters for generic types as well\n    as for generic function definitions.  See class Generic for more\n    information on generic types.  Generic functions work as follows:\n\n      def repeat(x: T, n: int) -> List[T]:\n          '''Return a list containing n references to x.'''\n          return [x]*n\n\n      def longest(x: A, y: A) -> A:\n          '''Return the longest of two strings.'''\n          return x if len(x) >= len(y) else y\n\n    The latter example's signature is essentially the overloading\n    of (str, str) -> str and (bytes, bytes) -> bytes.  Also note\n    that if the arguments are instances of some subclass of str,\n    the return type is still plain str.\n\n    At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\n\n    Type variables defined with covariant=True or contravariant=True\n    can be used to declare covariant or contravariant generic types.\n    See PEP 484 for more details. By default generic types are invariant\n    in all type variables.\n\n    Type variables can be introspected. e.g.:\n\n      T.__name__ == 'T'\n      T.__constraints__ == ()\n      T.__covariant__ == False\n      T.__contravariant__ = False\n      A.__constraints__ == (str, bytes)\n\n    Note that only type variables defined in global scope can be pickled.\n    "
                (
                    '__name__'
                    '__bound__'
                    '__constraints__'
                    '__covariant__'
                    '__contravariant__'
                    '__dict__'
                )
                None
                False
                (
                    'bound'
                    'covariant'
                    'contravariant'
                )
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 3
                    Locals: 7
                    Stack Size: 9
                    Flags: 0x00000007 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS)
                    [Names]
                        '__name__'
                        'super'
                        '__init__'
                        'TypeError'
                        'len'
                        'tuple'
                        '__constraints__'
                        'sys'
                        '_getframe'
                        'f_globals'
                        'get'
                        'AttributeError'
                        'ValueError'
                        '__module__'
                    [Var Names]
                        'self'
                        'name'
                        'bound'
                        'covariant'
                        'contravariant'
                        'constraints'
                        'def_mod'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                        'msg'
                    [Constants]
                        None
                        'Constraints cannot be combined with bound=...'
                        1
                        'A single constraint is not allowed'
                        'TypeVar(name, constraint, ...): constraints must be types.'
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                                '_type_check'
                            [Var Names]
                                '.0'
                                't'
                            [Free Vars]
                                'msg'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: t
                                8       LOAD_GLOBAL                     0: _type_check
                                10      LOAD_FAST                       1: t
                                12      LOAD_DEREF                      0: msg
                                14      CALL_FUNCTION                   2
                                16      YIELD_VALUE                     
                                18      POP_TOP                         
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      LOAD_CONST                      0: None
                                24      RETURN_VALUE                    
                        'TypeVar.__init__.<locals>.<genexpr>'
                        '__name__'
                        '__main__'
                        'typing'
                    [Disassembly]
                        0       LOAD_FAST                       1: name
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: __name__
                        6       LOAD_GLOBAL                     1: super
                        8       CALL_FUNCTION                   0
                        10      LOAD_METHOD                     2: __init__
                        12      LOAD_FAST                       2: bound
                        14      LOAD_FAST                       3: covariant
                        16      LOAD_FAST                       4: contravariant
                        18      CALL_METHOD                     3
                        20      POP_TOP                         
                        22      LOAD_FAST                       5: constraints
                        24      POP_JUMP_IF_FALSE               21 (to 42)
                        26      LOAD_FAST                       2: bound
                        28      LOAD_CONST                      0: None
                        30      IS_OP                           1 (is not)
                        32      POP_JUMP_IF_FALSE               21 (to 42)
                        34      LOAD_GLOBAL                     3: TypeError
                        36      LOAD_CONST                      1: 'Constraints cannot be combined with bound=...'
                        38      CALL_FUNCTION                   1
                        40      RAISE_VARARGS                   1
                        42      LOAD_FAST                       5: constraints
                        44      POP_JUMP_IF_FALSE               33 (to 66)
                        46      LOAD_GLOBAL                     4: len
                        48      LOAD_FAST                       5: constraints
                        50      CALL_FUNCTION                   1
                        52      LOAD_CONST                      2: 1
                        54      COMPARE_OP                      2 (==)
                        56      POP_JUMP_IF_FALSE               33 (to 66)
                        58      LOAD_GLOBAL                     3: TypeError
                        60      LOAD_CONST                      3: 'A single constraint is not allowed'
                        62      CALL_FUNCTION                   1
                        64      RAISE_VARARGS                   1
                        66      LOAD_CONST                      4: 'TypeVar(name, constraint, ...): constraints must be types.'
                        68      STORE_DEREF                     0: msg
                        70      LOAD_GLOBAL                     5: tuple
                        72      LOAD_CLOSURE                    0: msg
                        74      BUILD_TUPLE                     1
                        76      LOAD_CONST                      5: <CODE> <genexpr>
                        78      LOAD_CONST                      6: 'TypeVar.__init__.<locals>.<genexpr>'
                        80      MAKE_FUNCTION                   8
                        82      LOAD_FAST                       5: constraints
                        84      GET_ITER                        
                        86      CALL_FUNCTION                   1
                        88      CALL_FUNCTION                   1
                        90      LOAD_FAST                       0: self
                        92      STORE_ATTR                      6: __constraints__
                        94      SETUP_FINALLY                   12 (to 120)
                        96      LOAD_GLOBAL                     7: sys
                        98      LOAD_METHOD                     8: _getframe
                        100     LOAD_CONST                      2: 1
                        102     CALL_METHOD                     1
                        104     LOAD_ATTR                       9: f_globals
                        106     LOAD_METHOD                     10: get
                        108     LOAD_CONST                      7: '__name__'
                        110     LOAD_CONST                      8: '__main__'
                        112     CALL_METHOD                     2
                        114     STORE_FAST                      6: def_mod
                        116     POP_BLOCK                       
                        118     JUMP_FORWARD                    13 (to 146)
                        120     DUP_TOP                         
                        122     LOAD_GLOBAL                     11: AttributeError
                        124     LOAD_GLOBAL                     12: ValueError
                        126     BUILD_TUPLE                     2
                        128     JUMP_IF_NOT_EXC_MATCH           72 (to 144)
                        130     POP_TOP                         
                        132     POP_TOP                         
                        134     POP_TOP                         
                        136     LOAD_CONST                      0: None
                        138     STORE_FAST                      6: def_mod
                        140     POP_EXCEPT                      
                        142     JUMP_FORWARD                    1 (to 146)
                        144     RERAISE                         0
                        146     LOAD_FAST                       6: def_mod
                        148     LOAD_CONST                      9: 'typing'
                        150     COMPARE_OP                      3 (!=)
                        152     POP_JUMP_IF_FALSE               82 (to 164)
                        154     LOAD_FAST                       6: def_mod
                        156     LOAD_FAST                       0: self
                        158     STORE_ATTR                      13: __module__
                        160     LOAD_CONST                      0: None
                        162     RETURN_VALUE                    
                        164     LOAD_CONST                      0: None
                        166     RETURN_VALUE                    
                'TypeVar.__init__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'TypeVar'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Type variable.\n\n    Usage::\n\n      T = TypeVar('T')  # Can be anything\n      A = TypeVar('A', str, bytes)  # Must be str or bytes\n\n    Type variables exist primarily for the benefit of static type\n    checkers.  They serve as the parameters for generic types as well\n    as for generic function definitions.  See class Generic for more\n    information on generic types.  Generic functions work as follows:\n\n      def repeat(x: T, n: int) -> List[T]:\n          '''Return a list containing n references to x.'''\n          return [x]*n\n\n      def longest(x: A, y: A) -> A:\n          '''Return the longest of two strings.'''\n          return x if len(x) >= len(y) else y\n\n    The latter example's signature is essentially the overloading\n    of (str, str) -> str and (bytes, bytes) -> bytes.  Also note\n    that if the arguments are instances of some subclass of str,\n    the return type is still plain str.\n\n    At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\n\n    Type variables defined with covariant=True or contravariant=True\n    can be used to declare covariant or contravariant generic types.\n    See PEP 484 for more details. By default generic types are invariant\n    in all type variables.\n\n    Type variables can be introspected. e.g.:\n\n      T.__name__ == 'T'\n      T.__constraints__ == ()\n      T.__covariant__ == False\n      T.__contravariant__ = False\n      A.__constraints__ == (str, bytes)\n\n    Note that only type variables defined in global scope can be pickled.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ('__name__', '__bound__', '__constraints__', '__covariant__', '__contravariant__', '__dict__')
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: None
                18      LOAD_CONST                      4: False
                20      LOAD_CONST                      4: False
                22      LOAD_CONST                      5: ('bound', 'covariant', 'contravariant')
                24      BUILD_CONST_KEY_MAP             3
                26      LOAD_CLOSURE                    0: __class__
                28      BUILD_TUPLE                     1
                30      LOAD_CONST                      6: <CODE> __init__
                32      LOAD_CONST                      7: 'TypeVar.__init__'
                34      MAKE_FUNCTION                   10
                36      STORE_NAME                      5: __init__
                38      LOAD_CLOSURE                    0: __class__
                40      DUP_TOP                         
                42      STORE_NAME                      6: __classcell__
                44      RETURN_VALUE                    
        'TypeVar'
        [Code]
            File Name: typing.py
            Object Name: ParamSpecArgs
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__repr__'
                '__eq__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ParamSpecArgs'
                'The args for a ParamSpec object.\n\n    Given a ParamSpec object P, P.args is an instance of ParamSpecArgs.\n\n    ParamSpecArgs objects have a reference back to their ParamSpec:\n\n       P.args.__origin__ is P\n\n    This type is meant for runtime introspection and has no special meaning to\n    static type checkers.\n    '
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__origin__'
                    [Var Names]
                        'self'
                        'origin'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: origin
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: __origin__
                        6       LOAD_CONST                      0: None
                        8       RETURN_VALUE                    
                'ParamSpecArgs.__init__'
                [Code]
                    File Name: typing.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__origin__'
                        '__name__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '.args'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __origin__
                        4       LOAD_ATTR                       1: __name__
                        6       FORMAT_VALUE                    0 (FVC_NONE)
                        8       LOAD_CONST                      1: '.args'
                        10      BUILD_STRING                    2
                        12      RETURN_VALUE                    
                'ParamSpecArgs.__repr__'
                [Code]
                    File Name: typing.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'ParamSpecArgs'
                        'NotImplemented'
                        '__origin__'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: ParamSpecArgs
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: __origin__
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       3: __origin__
                        22      COMPARE_OP                      2 (==)
                        24      RETURN_VALUE                    
                'ParamSpecArgs.__eq__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ParamSpecArgs'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'The args for a ParamSpec object.\n\n    Given a ParamSpec object P, P.args is an instance of ParamSpecArgs.\n\n    ParamSpecArgs objects have a reference back to their ParamSpec:\n\n       P.args.__origin__ is P\n\n    This type is meant for runtime introspection and has no special meaning to\n    static type checkers.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'ParamSpecArgs.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __repr__
                22      LOAD_CONST                      5: 'ParamSpecArgs.__repr__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __repr__
                28      LOAD_CONST                      6: <CODE> __eq__
                30      LOAD_CONST                      7: 'ParamSpecArgs.__eq__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __eq__
                36      LOAD_CONST                      8: None
                38      RETURN_VALUE                    
        'ParamSpecArgs'
        [Code]
            File Name: typing.py
            Object Name: ParamSpecKwargs
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__repr__'
                '__eq__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ParamSpecKwargs'
                'The kwargs for a ParamSpec object.\n\n    Given a ParamSpec object P, P.kwargs is an instance of ParamSpecKwargs.\n\n    ParamSpecKwargs objects have a reference back to their ParamSpec:\n\n       P.kwargs.__origin__ is P\n\n    This type is meant for runtime introspection and has no special meaning to\n    static type checkers.\n    '
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__origin__'
                    [Var Names]
                        'self'
                        'origin'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: origin
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: __origin__
                        6       LOAD_CONST                      0: None
                        8       RETURN_VALUE                    
                'ParamSpecKwargs.__init__'
                [Code]
                    File Name: typing.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__origin__'
                        '__name__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '.kwargs'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __origin__
                        4       LOAD_ATTR                       1: __name__
                        6       FORMAT_VALUE                    0 (FVC_NONE)
                        8       LOAD_CONST                      1: '.kwargs'
                        10      BUILD_STRING                    2
                        12      RETURN_VALUE                    
                'ParamSpecKwargs.__repr__'
                [Code]
                    File Name: typing.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'ParamSpecKwargs'
                        'NotImplemented'
                        '__origin__'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: ParamSpecKwargs
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: __origin__
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       3: __origin__
                        22      COMPARE_OP                      2 (==)
                        24      RETURN_VALUE                    
                'ParamSpecKwargs.__eq__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ParamSpecKwargs'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'The kwargs for a ParamSpec object.\n\n    Given a ParamSpec object P, P.kwargs is an instance of ParamSpecKwargs.\n\n    ParamSpecKwargs objects have a reference back to their ParamSpec:\n\n       P.kwargs.__origin__ is P\n\n    This type is meant for runtime introspection and has no special meaning to\n    static type checkers.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'ParamSpecKwargs.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __repr__
                22      LOAD_CONST                      5: 'ParamSpecKwargs.__repr__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __repr__
                28      LOAD_CONST                      6: <CODE> __eq__
                30      LOAD_CONST                      7: 'ParamSpecKwargs.__eq__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __eq__
                36      LOAD_CONST                      8: None
                38      RETURN_VALUE                    
        'ParamSpecKwargs'
        [Code]
            File Name: typing.py
            Object Name: ParamSpec
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'property'
                'args'
                'kwargs'
                '__init__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'ParamSpec'
                "Parameter specification variable.\n\n    Usage::\n\n       P = ParamSpec('P')\n\n    Parameter specification variables exist primarily for the benefit of static\n    type checkers.  They are used to forward the parameter types of one\n    callable to another callable, a pattern commonly found in higher order\n    functions and decorators.  They are only valid when used in ``Concatenate``,\n    or as the first argument to ``Callable``, or as parameters for user-defined\n    Generics.  See class Generic for more information on generic types.  An\n    example for annotating a decorator::\n\n       T = TypeVar('T')\n       P = ParamSpec('P')\n\n       def add_logging(f: Callable[P, T]) -> Callable[P, T]:\n           '''A type-safe decorator to add logging to a function.'''\n           def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n               logging.info(f'{f.__name__} was called')\n               return f(*args, **kwargs)\n           return inner\n\n       @add_logging\n       def add_two(x: float, y: float) -> float:\n           '''Add two numbers together.'''\n           return x + y\n\n    Parameter specification variables defined with covariant=True or\n    contravariant=True can be used to declare covariant or contravariant\n    generic types.  These keyword arguments are valid, but their actual semantics\n    are yet to be decided.  See PEP 612 for details.\n\n    Parameter specification variables can be introspected. e.g.:\n\n       P.__name__ == 'P'\n       P.__bound__ == None\n       P.__covariant__ == False\n       P.__contravariant__ == False\n\n    Note that only parameter specification variables defined in global scope can\n    be pickled.\n    "
                (
                    '__name__'
                    '__bound__'
                    '__covariant__'
                    '__contravariant__'
                    '__dict__'
                )
                [Code]
                    File Name: typing.py
                    Object Name: args
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ParamSpecArgs'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: ParamSpecArgs
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                'ParamSpec.args'
                [Code]
                    File Name: typing.py
                    Object Name: kwargs
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ParamSpecKwargs'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: ParamSpecKwargs
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                'ParamSpec.kwargs'
                None
                False
                (
                    'bound'
                    'covariant'
                    'contravariant'
                )
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 3
                    Locals: 6
                    Stack Size: 9
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '__name__'
                        'super'
                        '__init__'
                        'sys'
                        '_getframe'
                        'f_globals'
                        'get'
                        'AttributeError'
                        'ValueError'
                        '__module__'
                    [Var Names]
                        'self'
                        'name'
                        'bound'
                        'covariant'
                        'contravariant'
                        'def_mod'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        1
                        '__name__'
                        '__main__'
                        'typing'
                    [Disassembly]
                        0       LOAD_FAST                       1: name
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: __name__
                        6       LOAD_GLOBAL                     1: super
                        8       CALL_FUNCTION                   0
                        10      LOAD_METHOD                     2: __init__
                        12      LOAD_FAST                       2: bound
                        14      LOAD_FAST                       3: covariant
                        16      LOAD_FAST                       4: contravariant
                        18      CALL_METHOD                     3
                        20      POP_TOP                         
                        22      SETUP_FINALLY                   12 (to 48)
                        24      LOAD_GLOBAL                     3: sys
                        26      LOAD_METHOD                     4: _getframe
                        28      LOAD_CONST                      1: 1
                        30      CALL_METHOD                     1
                        32      LOAD_ATTR                       5: f_globals
                        34      LOAD_METHOD                     6: get
                        36      LOAD_CONST                      2: '__name__'
                        38      LOAD_CONST                      3: '__main__'
                        40      CALL_METHOD                     2
                        42      STORE_FAST                      5: def_mod
                        44      POP_BLOCK                       
                        46      JUMP_FORWARD                    13 (to 74)
                        48      DUP_TOP                         
                        50      LOAD_GLOBAL                     7: AttributeError
                        52      LOAD_GLOBAL                     8: ValueError
                        54      BUILD_TUPLE                     2
                        56      JUMP_IF_NOT_EXC_MATCH           36 (to 72)
                        58      POP_TOP                         
                        60      POP_TOP                         
                        62      POP_TOP                         
                        64      LOAD_CONST                      0: None
                        66      STORE_FAST                      5: def_mod
                        68      POP_EXCEPT                      
                        70      JUMP_FORWARD                    1 (to 74)
                        72      RERAISE                         0
                        74      LOAD_FAST                       5: def_mod
                        76      LOAD_CONST                      4: 'typing'
                        78      COMPARE_OP                      3 (!=)
                        80      POP_JUMP_IF_FALSE               46 (to 92)
                        82      LOAD_FAST                       5: def_mod
                        84      LOAD_FAST                       0: self
                        86      STORE_ATTR                      9: __module__
                        88      LOAD_CONST                      0: None
                        90      RETURN_VALUE                    
                        92      LOAD_CONST                      0: None
                        94      RETURN_VALUE                    
                'ParamSpec.__init__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ParamSpec'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Parameter specification variable.\n\n    Usage::\n\n       P = ParamSpec('P')\n\n    Parameter specification variables exist primarily for the benefit of static\n    type checkers.  They are used to forward the parameter types of one\n    callable to another callable, a pattern commonly found in higher order\n    functions and decorators.  They are only valid when used in ``Concatenate``,\n    or as the first argument to ``Callable``, or as parameters for user-defined\n    Generics.  See class Generic for more information on generic types.  An\n    example for annotating a decorator::\n\n       T = TypeVar('T')\n       P = ParamSpec('P')\n\n       def add_logging(f: Callable[P, T]) -> Callable[P, T]:\n           '''A type-safe decorator to add logging to a function.'''\n           def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n               logging.info(f'{f.__name__} was called')\n               return f(*args, **kwargs)\n           return inner\n\n       @add_logging\n       def add_two(x: float, y: float) -> float:\n           '''Add two numbers together.'''\n           return x + y\n\n    Parameter specification variables defined with covariant=True or\n    contravariant=True can be used to declare covariant or contravariant\n    generic types.  These keyword arguments are valid, but their actual semantics\n    are yet to be decided.  See PEP 612 for details.\n\n    Parameter specification variables can be introspected. e.g.:\n\n       P.__name__ == 'P'\n       P.__bound__ == None\n       P.__covariant__ == False\n       P.__contravariant__ == False\n\n    Note that only parameter specification variables defined in global scope can\n    be pickled.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ('__name__', '__bound__', '__covariant__', '__contravariant__', '__dict__')
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: property
                18      LOAD_CONST                      3: <CODE> args
                20      LOAD_CONST                      4: 'ParamSpec.args'
                22      MAKE_FUNCTION                   0
                24      CALL_FUNCTION                   1
                26      STORE_NAME                      6: args
                28      LOAD_NAME                       5: property
                30      LOAD_CONST                      5: <CODE> kwargs
                32      LOAD_CONST                      6: 'ParamSpec.kwargs'
                34      MAKE_FUNCTION                   0
                36      CALL_FUNCTION                   1
                38      STORE_NAME                      7: kwargs
                40      LOAD_CONST                      7: None
                42      LOAD_CONST                      8: False
                44      LOAD_CONST                      8: False
                46      LOAD_CONST                      9: ('bound', 'covariant', 'contravariant')
                48      BUILD_CONST_KEY_MAP             3
                50      LOAD_CLOSURE                    0: __class__
                52      BUILD_TUPLE                     1
                54      LOAD_CONST                      10: <CODE> __init__
                56      LOAD_CONST                      11: 'ParamSpec.__init__'
                58      MAKE_FUNCTION                   10
                60      STORE_NAME                      8: __init__
                62      LOAD_CLOSURE                    0: __class__
                64      DUP_TOP                         
                66      STORE_NAME                      9: __classcell__
                68      RETURN_VALUE                    
        'ParamSpec'
        [Code]
            File Name: typing.py
            Object Name: _is_dunder
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'startswith'
                'endswith'
            [Var Names]
                'attr'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '__'
            [Disassembly]
                0       LOAD_FAST                       0: attr
                2       LOAD_METHOD                     0: startswith
                4       LOAD_CONST                      1: '__'
                6       CALL_METHOD                     1
                8       JUMP_IF_FALSE_OR_POP            9 (to 18)
                10      LOAD_FAST                       0: attr
                12      LOAD_METHOD                     1: endswith
                14      LOAD_CONST                      1: '__'
                16      CALL_METHOD                     1
                18      RETURN_VALUE                    
        '_is_dunder'
        [Code]
            File Name: typing.py
            Object Name: _BaseGenericAlias
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__call__'
                '__mro_entries__'
                '__getattr__'
                '__setattr__'
                '__instancecheck__'
                '__subclasscheck__'
                '__dir__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_BaseGenericAlias'
                "The central part of internal API.\n\n    This represents a generic version of type 'origin' with type arguments 'params'.\n    There are two kind of these aliases: user defined and special. The special ones\n    are wrappers around builtin collections and ABCs in collections.abc. These must\n    have 'name' always set. If 'inst' is False, then the alias can't be instantiated,\n    this is used by e.g. typing.List and typing.Dict.\n    "
                True
                None
                (
                    'inst'
                    'name'
                )
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 2
                    Locals: 4
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_inst'
                        '_name'
                        '__origin__'
                        '__slots__'
                    [Var Names]
                        'self'
                        'origin'
                        'inst'
                        'name'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       2: inst
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _inst
                        6       LOAD_FAST                       3: name
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _name
                        12      LOAD_FAST                       1: origin
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: __origin__
                        18      LOAD_CONST                      0: None
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      3: __slots__
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                '_BaseGenericAlias.__init__'
                [Code]
                    File Name: typing.py
                    Object Name: __call__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        '_inst'
                        'TypeError'
                        '_name'
                        '__origin__'
                        '__name__'
                        '__orig_class__'
                        'AttributeError'
                    [Var Names]
                        'self'
                        'args'
                        'kwargs'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Type '
                        ' cannot be instantiated; use '
                        '() instead'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _inst
                        4       POP_JUMP_IF_TRUE                17 (to 34)
                        6       LOAD_GLOBAL                     1: TypeError
                        8       LOAD_CONST                      1: 'Type '
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _name
                        14      FORMAT_VALUE                    0 (FVC_NONE)
                        16      LOAD_CONST                      2: ' cannot be instantiated; use '
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       3: __origin__
                        22      LOAD_ATTR                       4: __name__
                        24      FORMAT_VALUE                    0 (FVC_NONE)
                        26      LOAD_CONST                      3: '() instead'
                        28      BUILD_STRING                    5
                        30      CALL_FUNCTION                   1
                        32      RAISE_VARARGS                   1
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       3: __origin__
                        38      LOAD_FAST                       1: args
                        40      BUILD_MAP                       0
                        42      LOAD_FAST                       2: kwargs
                        44      DICT_MERGE                      1
                        46      CALL_FUNCTION_EX                1
                        48      STORE_FAST                      3: result
                        50      SETUP_FINALLY                   6 (to 64)
                        52      LOAD_FAST                       0: self
                        54      LOAD_FAST                       3: result
                        56      STORE_ATTR                      5: __orig_class__
                        58      POP_BLOCK                       
                        60      LOAD_FAST                       3: result
                        62      RETURN_VALUE                    
                        64      DUP_TOP                         
                        66      LOAD_GLOBAL                     6: AttributeError
                        68      JUMP_IF_NOT_EXC_MATCH           41 (to 82)
                        70      POP_TOP                         
                        72      POP_TOP                         
                        74      POP_TOP                         
                        76      POP_EXCEPT                      
                        78      LOAD_FAST                       3: result
                        80      RETURN_VALUE                    
                        82      RERAISE                         0
                '_BaseGenericAlias.__call__'
                [Code]
                    File Name: typing.py
                    Object Name: __mro_entries__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__origin__'
                        'append'
                        'index'
                        'isinstance'
                        '_BaseGenericAlias'
                        'issubclass'
                        'Generic'
                        'tuple'
                    [Var Names]
                        'self'
                        'bases'
                        'res'
                        'i'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      2: res
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       0: __origin__
                        8       LOAD_FAST                       1: bases
                        10      CONTAINS_OP                     1 (not in)
                        12      POP_JUMP_IF_FALSE               13 (to 26)
                        14      LOAD_FAST                       2: res
                        16      LOAD_METHOD                     1: append
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       0: __origin__
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       1: bases
                        28      LOAD_METHOD                     2: index
                        30      LOAD_FAST                       0: self
                        32      CALL_METHOD                     1
                        34      STORE_FAST                      3: i
                        36      LOAD_FAST                       1: bases
                        38      LOAD_FAST                       3: i
                        40      LOAD_CONST                      1: 1
                        42      BINARY_ADD                      
                        44      LOAD_CONST                      0: None
                        46      BUILD_SLICE                     2
                        48      BINARY_SUBSCR                   
                        50      GET_ITER                        
                        52      FOR_ITER                        17 (to 88)
                        54      STORE_FAST                      4: b
                        56      LOAD_GLOBAL                     3: isinstance
                        58      LOAD_FAST                       4: b
                        60      LOAD_GLOBAL                     4: _BaseGenericAlias
                        62      CALL_FUNCTION                   2
                        64      POP_JUMP_IF_TRUE                38 (to 76)
                        66      LOAD_GLOBAL                     5: issubclass
                        68      LOAD_FAST                       4: b
                        70      LOAD_GLOBAL                     6: Generic
                        72      CALL_FUNCTION                   2
                        74      POP_JUMP_IF_FALSE               43 (to 86)
                        76      POP_TOP                         
                        78      LOAD_GLOBAL                     7: tuple
                        80      LOAD_FAST                       2: res
                        82      CALL_FUNCTION                   1
                        84      RETURN_VALUE                    
                        86      JUMP_ABSOLUTE                   26 (to 52)
                        88      LOAD_FAST                       2: res
                        90      LOAD_METHOD                     1: append
                        92      LOAD_GLOBAL                     6: Generic
                        94      CALL_METHOD                     1
                        96      POP_TOP                         
                        98      LOAD_GLOBAL                     7: tuple
                        100     LOAD_FAST                       2: res
                        102     CALL_FUNCTION                   1
                        104     RETURN_VALUE                    
                '_BaseGenericAlias.__mro_entries__'
                [Code]
                    File Name: typing.py
                    Object Name: __getattr__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                        '__origin__'
                        '__name__'
                        '__dict__'
                        '_is_dunder'
                        'getattr'
                        'AttributeError'
                    [Var Names]
                        'self'
                        'attr'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        frozenset({
                            '__name__'
                            '__qualname__'
                        })
                        '__origin__'
                    [Disassembly]
                        0       LOAD_FAST                       1: attr
                        2       LOAD_CONST                      1: frozenset({'__name__', '__qualname__'})
                        4       CONTAINS_OP                     0 (in)
                        6       POP_JUMP_IF_FALSE               11 (to 22)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       0: _name
                        12      JUMP_IF_TRUE_OR_POP             10 (to 20)
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: __origin__
                        18      LOAD_ATTR                       2: __name__
                        20      RETURN_VALUE                    
                        22      LOAD_CONST                      2: '__origin__'
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       3: __dict__
                        28      CONTAINS_OP                     0 (in)
                        30      POP_JUMP_IF_FALSE               26 (to 52)
                        32      LOAD_GLOBAL                     4: _is_dunder
                        34      LOAD_FAST                       1: attr
                        36      CALL_FUNCTION                   1
                        38      POP_JUMP_IF_TRUE                26 (to 52)
                        40      LOAD_GLOBAL                     5: getattr
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       1: __origin__
                        46      LOAD_FAST                       1: attr
                        48      CALL_FUNCTION                   2
                        50      RETURN_VALUE                    
                        52      LOAD_GLOBAL                     6: AttributeError
                        54      LOAD_FAST                       1: attr
                        56      CALL_FUNCTION                   1
                        58      RAISE_VARARGS                   1
                '_BaseGenericAlias.__getattr__'
                [Code]
                    File Name: typing.py
                    Object Name: __setattr__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_is_dunder'
                        'super'
                        '__setattr__'
                        'setattr'
                        '__origin__'
                    [Var Names]
                        'self'
                        'attr'
                        'val'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        frozenset({
                            '_inst'
                            '_name'
                            '_nparams'
                            '_typevar_types'
                            '_paramspec_tvars'
                        })
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _is_dunder
                        2       LOAD_FAST                       1: attr
                        4       CALL_FUNCTION                   1
                        6       POP_JUMP_IF_TRUE                8 (to 16)
                        8       LOAD_FAST                       1: attr
                        10      LOAD_CONST                      1: frozenset({'_inst', '_name', '_nparams', '_typevar_types', '_paramspec_tvars'})
                        12      CONTAINS_OP                     0 (in)
                        14      POP_JUMP_IF_FALSE               17 (to 34)
                        16      LOAD_GLOBAL                     1: super
                        18      CALL_FUNCTION                   0
                        20      LOAD_METHOD                     2: __setattr__
                        22      LOAD_FAST                       1: attr
                        24      LOAD_FAST                       2: val
                        26      CALL_METHOD                     2
                        28      POP_TOP                         
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                        34      LOAD_GLOBAL                     3: setattr
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       4: __origin__
                        40      LOAD_FAST                       1: attr
                        42      LOAD_FAST                       2: val
                        44      CALL_FUNCTION                   3
                        46      POP_TOP                         
                        48      LOAD_CONST                      0: None
                        50      RETURN_VALUE                    
                '_BaseGenericAlias.__setattr__'
                [Code]
                    File Name: typing.py
                    Object Name: __instancecheck__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__subclasscheck__'
                        'type'
                    [Var Names]
                        'self'
                        'obj'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: __subclasscheck__
                        4       LOAD_GLOBAL                     1: type
                        6       LOAD_FAST                       1: obj
                        8       CALL_FUNCTION                   1
                        10      CALL_METHOD                     1
                        12      RETURN_VALUE                    
                '_BaseGenericAlias.__instancecheck__'
                [Code]
                    File Name: typing.py
                    Object Name: __subclasscheck__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'TypeError'
                    [Var Names]
                        'self'
                        'cls'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Subscripted generics cannot be used with class and instance checks'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: TypeError
                        2       LOAD_CONST                      1: 'Subscripted generics cannot be used with class and instance checks'
                        4       CALL_FUNCTION                   1
                        6       RAISE_VARARGS                   1
                '_BaseGenericAlias.__subclasscheck__'
                [Code]
                    File Name: typing.py
                    Object Name: __dir__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 6
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'list'
                        'set'
                        'super'
                        '__dir__'
                        'dir'
                        '__origin__'
                    [Var Names]
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: typing.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                '_is_dunder'
                            [Var Names]
                                '.0'
                                'attr'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: attr
                                8       LOAD_GLOBAL                     0: _is_dunder
                                10      LOAD_FAST                       1: attr
                                12      CALL_FUNCTION                   1
                                14      POP_JUMP_IF_TRUE                2 (to 4)
                                16      LOAD_FAST                       1: attr
                                18      LIST_APPEND                     2
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      RETURN_VALUE                    
                        '_BaseGenericAlias.__dir__.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: list
                        2       LOAD_GLOBAL                     1: set
                        4       LOAD_GLOBAL                     2: super
                        6       CALL_FUNCTION                   0
                        8       LOAD_METHOD                     3: __dir__
                        10      CALL_METHOD                     0
                        12      LOAD_CONST                      1: <CODE> <listcomp>
                        14      LOAD_CONST                      2: '_BaseGenericAlias.__dir__.<locals>.<listcomp>'
                        16      MAKE_FUNCTION                   0
                        18      LOAD_GLOBAL                     4: dir
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       5: __origin__
                        24      CALL_FUNCTION                   1
                        26      GET_ITER                        
                        28      CALL_FUNCTION                   1
                        30      BINARY_ADD                      
                        32      CALL_FUNCTION                   1
                        34      CALL_FUNCTION                   1
                        36      RETURN_VALUE                    
                '_BaseGenericAlias.__dir__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_BaseGenericAlias'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "The central part of internal API.\n\n    This represents a generic version of type 'origin' with type arguments 'params'.\n    There are two kind of these aliases: user defined and special. The special ones\n    are wrappers around builtin collections and ABCs in collections.abc. These must\n    have 'name' always set. If 'inst' is False, then the alias can't be instantiated,\n    this is used by e.g. typing.List and typing.Dict.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: True
                14      LOAD_CONST                      3: None
                16      LOAD_CONST                      4: ('inst', 'name')
                18      BUILD_CONST_KEY_MAP             2
                20      LOAD_CONST                      5: <CODE> __init__
                22      LOAD_CONST                      6: '_BaseGenericAlias.__init__'
                24      MAKE_FUNCTION                   2
                26      STORE_NAME                      4: __init__
                28      LOAD_CONST                      7: <CODE> __call__
                30      LOAD_CONST                      8: '_BaseGenericAlias.__call__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      5: __call__
                36      LOAD_CONST                      9: <CODE> __mro_entries__
                38      LOAD_CONST                      10: '_BaseGenericAlias.__mro_entries__'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      6: __mro_entries__
                44      LOAD_CONST                      11: <CODE> __getattr__
                46      LOAD_CONST                      12: '_BaseGenericAlias.__getattr__'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      7: __getattr__
                52      LOAD_CLOSURE                    0: __class__
                54      BUILD_TUPLE                     1
                56      LOAD_CONST                      13: <CODE> __setattr__
                58      LOAD_CONST                      14: '_BaseGenericAlias.__setattr__'
                60      MAKE_FUNCTION                   8
                62      STORE_NAME                      8: __setattr__
                64      LOAD_CONST                      15: <CODE> __instancecheck__
                66      LOAD_CONST                      16: '_BaseGenericAlias.__instancecheck__'
                68      MAKE_FUNCTION                   0
                70      STORE_NAME                      9: __instancecheck__
                72      LOAD_CONST                      17: <CODE> __subclasscheck__
                74      LOAD_CONST                      18: '_BaseGenericAlias.__subclasscheck__'
                76      MAKE_FUNCTION                   0
                78      STORE_NAME                      10: __subclasscheck__
                80      LOAD_CLOSURE                    0: __class__
                82      BUILD_TUPLE                     1
                84      LOAD_CONST                      19: <CODE> __dir__
                86      LOAD_CONST                      20: '_BaseGenericAlias.__dir__'
                88      MAKE_FUNCTION                   8
                90      STORE_NAME                      11: __dir__
                92      LOAD_CLOSURE                    0: __class__
                94      DUP_TOP                         
                96      STORE_NAME                      12: __classcell__
                98      RETURN_VALUE                    
        '_BaseGenericAlias'
        [Code]
            File Name: typing.py
            Object Name: _GenericAlias
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 5
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'TypeVar'
                '__init__'
                '__eq__'
                '__hash__'
                '__or__'
                '__ror__'
                '_tp_cache'
                '__getitem__'
                'copy_with'
                '__repr__'
                '__reduce__'
                '__mro_entries__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_GenericAlias'
                True
                None
                False
                (
                    'inst'
                    'name'
                    '_typevar_types'
                    '_paramspec_tvars'
                )
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 4
                    Locals: 7
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '__init__'
                        'isinstance'
                        'tuple'
                        '__args__'
                        '_collect_type_vars'
                        '__parameters__'
                        '_typevar_types'
                        '_paramspec_tvars'
                        '__module__'
                    [Var Names]
                        'self'
                        'origin'
                        'params'
                        'inst'
                        'name'
                        '_typevar_types'
                        '_paramspec_tvars'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            'inst'
                            'name'
                        )
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                '_TypingEllipsis'
                                '_TypingEmpty'
                            [Var Names]
                                '.0'
                                'a'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                ...
                                (
                                )
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        17 (to 40)
                                6       STORE_FAST                      1: a
                                8       LOAD_FAST                       1: a
                                10      LOAD_GLOBAL                     0: _TypingEllipsis
                                12      IS_OP                           0 (is)
                                14      POP_JUMP_IF_FALSE               10 (to 20)
                                16      LOAD_CONST                      0: ...
                                18      JUMP_FORWARD                    7 (to 34)
                                20      LOAD_FAST                       1: a
                                22      LOAD_GLOBAL                     1: _TypingEmpty
                                24      IS_OP                           0 (is)
                                26      POP_JUMP_IF_FALSE               16 (to 32)
                                28      LOAD_CONST                      1: ()
                                30      JUMP_FORWARD                    1 (to 34)
                                32      LOAD_FAST                       1: a
                                34      YIELD_VALUE                     
                                36      POP_TOP                         
                                38      JUMP_ABSOLUTE                   2 (to 4)
                                40      LOAD_CONST                      2: None
                                42      RETURN_VALUE                    
                        '_GenericAlias.__init__.<locals>.<genexpr>'
                        (
                            'typevar_types'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_ATTR                       1: __init__
                        6       LOAD_FAST                       1: origin
                        8       LOAD_FAST                       3: inst
                        10      LOAD_FAST                       4: name
                        12      LOAD_CONST                      1: ('inst', 'name')
                        14      CALL_FUNCTION_KW                3
                        16      POP_TOP                         
                        18      LOAD_GLOBAL                     2: isinstance
                        20      LOAD_FAST                       2: params
                        22      LOAD_GLOBAL                     3: tuple
                        24      CALL_FUNCTION                   2
                        26      POP_JUMP_IF_TRUE                17 (to 34)
                        28      LOAD_FAST                       2: params
                        30      BUILD_TUPLE                     1
                        32      STORE_FAST                      2: params
                        34      LOAD_GLOBAL                     3: tuple
                        36      LOAD_CONST                      2: <CODE> <genexpr>
                        38      LOAD_CONST                      3: '_GenericAlias.__init__.<locals>.<genexpr>'
                        40      MAKE_FUNCTION                   0
                        42      LOAD_FAST                       2: params
                        44      GET_ITER                        
                        46      CALL_FUNCTION                   1
                        48      CALL_FUNCTION                   1
                        50      LOAD_FAST                       0: self
                        52      STORE_ATTR                      4: __args__
                        54      LOAD_GLOBAL                     5: _collect_type_vars
                        56      LOAD_FAST                       2: params
                        58      LOAD_FAST                       5: _typevar_types
                        60      LOAD_CONST                      4: ('typevar_types',)
                        62      CALL_FUNCTION_KW                2
                        64      LOAD_FAST                       0: self
                        66      STORE_ATTR                      6: __parameters__
                        68      LOAD_FAST                       5: _typevar_types
                        70      LOAD_FAST                       0: self
                        72      STORE_ATTR                      7: _typevar_types
                        74      LOAD_FAST                       6: _paramspec_tvars
                        76      LOAD_FAST                       0: self
                        78      STORE_ATTR                      8: _paramspec_tvars
                        80      LOAD_FAST                       4: name
                        82      POP_JUMP_IF_TRUE                48 (to 96)
                        84      LOAD_FAST                       1: origin
                        86      LOAD_ATTR                       9: __module__
                        88      LOAD_FAST                       0: self
                        90      STORE_ATTR                      9: __module__
                        92      LOAD_CONST                      0: None
                        94      RETURN_VALUE                    
                        96      LOAD_CONST                      0: None
                        98      RETURN_VALUE                    
                '_GenericAlias.__init__'
                [Code]
                    File Name: typing.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        '_GenericAlias'
                        'NotImplemented'
                        '__origin__'
                        '__args__'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: _GenericAlias
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: __origin__
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       3: __origin__
                        22      COMPARE_OP                      2 (==)
                        24      JUMP_IF_FALSE_OR_POP            18 (to 36)
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       4: __args__
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       4: __args__
                        34      COMPARE_OP                      2 (==)
                        36      RETURN_VALUE                    
                '_GenericAlias.__eq__'
                [Code]
                    File Name: typing.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        '__origin__'
                        '__args__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: __origin__
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: __args__
                        10      BUILD_TUPLE                     2
                        12      CALL_FUNCTION                   1
                        14      RETURN_VALUE                    
                '_GenericAlias.__hash__'
                [Code]
                    File Name: typing.py
                    Object Name: __or__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Union'
                    [Var Names]
                        'self'
                        'right'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Union
                        2       LOAD_FAST                       0: self
                        4       LOAD_FAST                       1: right
                        6       BUILD_TUPLE                     2
                        8       BINARY_SUBSCR                   
                        10      RETURN_VALUE                    
                '_GenericAlias.__or__'
                [Code]
                    File Name: typing.py
                    Object Name: __ror__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Union'
                    [Var Names]
                        'self'
                        'left'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Union
                        2       LOAD_FAST                       1: left
                        4       LOAD_FAST                       0: self
                        6       BUILD_TUPLE                     2
                        8       BINARY_SUBSCR                   
                        10      RETURN_VALUE                    
                '_GenericAlias.__ror__'
                [Code]
                    File Name: typing.py
                    Object Name: __getitem__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 6
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '__origin__'
                        'Generic'
                        'Protocol'
                        'TypeError'
                        'isinstance'
                        'tuple'
                        '_paramspec_tvars'
                        'any'
                        '__parameters__'
                        '_prepare_paramspec_params'
                        '_check_generic'
                        'len'
                        'dict'
                        'zip'
                        '__args__'
                        '_typevar_types'
                        'ParamSpec'
                        '_is_param_expr'
                        '_GenericAlias'
                        'GenericAlias'
                        'types'
                        'UnionType'
                        'collections'
                        'abc'
                        'Callable'
                        'extend'
                        'append'
                        'copy_with'
                    [Var Names]
                        'self'
                        'params'
                        'new_args'
                        'arg'
                        'subparams'
                        'subargs'
                    [Free Vars]
                    [Cell Vars]
                        'subst'
                    [Constants]
                        None
                        'Cannot subscript already-subscripted '
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                '_type_convert'
                            [Var Names]
                                '.0'
                                'p'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: p
                                8       LOAD_GLOBAL                     0: _type_convert
                                10      LOAD_FAST                       1: p
                                12      CALL_FUNCTION                   1
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        '_GenericAlias.__getitem__.<locals>.<genexpr>'
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'isinstance'
                                'ParamSpec'
                            [Var Names]
                                '.0'
                                't'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: t
                                8       LOAD_GLOBAL                     0: isinstance
                                10      LOAD_FAST                       1: t
                                12      LOAD_GLOBAL                     1: ParamSpec
                                14      CALL_FUNCTION                   2
                                16      YIELD_VALUE                     
                                18      POP_TOP                         
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      LOAD_CONST                      0: None
                                24      RETURN_VALUE                    
                        'Expected a list of types, an ellipsis, ParamSpec, or Concatenate. Got '
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                                'subst'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: x
                                8       LOAD_DEREF                      0: subst
                                10      LOAD_FAST                       1: x
                                12      BINARY_SUBSCR                   
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __origin__
                        4       LOAD_GLOBAL                     1: Generic
                        6       LOAD_GLOBAL                     2: Protocol
                        8       BUILD_TUPLE                     2
                        10      CONTAINS_OP                     0 (in)
                        12      POP_JUMP_IF_FALSE               14 (to 28)
                        14      LOAD_GLOBAL                     3: TypeError
                        16      LOAD_CONST                      1: 'Cannot subscript already-subscripted '
                        18      LOAD_FAST                       0: self
                        20      FORMAT_VALUE                    0 (FVC_NONE)
                        22      BUILD_STRING                    2
                        24      CALL_FUNCTION                   1
                        26      RAISE_VARARGS                   1
                        28      LOAD_GLOBAL                     4: isinstance
                        30      LOAD_FAST                       1: params
                        32      LOAD_GLOBAL                     5: tuple
                        34      CALL_FUNCTION                   2
                        36      POP_JUMP_IF_TRUE                22 (to 44)
                        38      LOAD_FAST                       1: params
                        40      BUILD_TUPLE                     1
                        42      STORE_FAST                      1: params
                        44      LOAD_GLOBAL                     5: tuple
                        46      LOAD_CONST                      2: <CODE> <genexpr>
                        48      LOAD_CONST                      3: '_GenericAlias.__getitem__.<locals>.<genexpr>'
                        50      MAKE_FUNCTION                   0
                        52      LOAD_FAST                       1: params
                        54      GET_ITER                        
                        56      CALL_FUNCTION                   1
                        58      CALL_FUNCTION                   1
                        60      STORE_FAST                      1: params
                        62      LOAD_FAST                       0: self
                        64      LOAD_ATTR                       6: _paramspec_tvars
                        66      POP_JUMP_IF_FALSE               50 (to 100)
                        68      LOAD_GLOBAL                     7: any
                        70      LOAD_CONST                      4: <CODE> <genexpr>
                        72      LOAD_CONST                      3: '_GenericAlias.__getitem__.<locals>.<genexpr>'
                        74      MAKE_FUNCTION                   0
                        76      LOAD_FAST                       0: self
                        78      LOAD_ATTR                       8: __parameters__
                        80      GET_ITER                        
                        82      CALL_FUNCTION                   1
                        84      CALL_FUNCTION                   1
                        86      POP_JUMP_IF_FALSE               50 (to 100)
                        88      LOAD_GLOBAL                     9: _prepare_paramspec_params
                        90      LOAD_FAST                       0: self
                        92      LOAD_FAST                       1: params
                        94      CALL_FUNCTION                   2
                        96      STORE_FAST                      1: params
                        98      JUMP_FORWARD                    9 (to 118)
                        100     LOAD_GLOBAL                     10: _check_generic
                        102     LOAD_FAST                       0: self
                        104     LOAD_FAST                       1: params
                        106     LOAD_GLOBAL                     11: len
                        108     LOAD_FAST                       0: self
                        110     LOAD_ATTR                       8: __parameters__
                        112     CALL_FUNCTION                   1
                        114     CALL_FUNCTION                   3
                        116     POP_TOP                         
                        118     LOAD_GLOBAL                     12: dict
                        120     LOAD_GLOBAL                     13: zip
                        122     LOAD_FAST                       0: self
                        124     LOAD_ATTR                       8: __parameters__
                        126     LOAD_FAST                       1: params
                        128     CALL_FUNCTION                   2
                        130     CALL_FUNCTION                   1
                        132     STORE_DEREF                     0: subst
                        134     BUILD_LIST                      0
                        136     STORE_FAST                      2: new_args
                        138     LOAD_FAST                       0: self
                        140     LOAD_ATTR                       14: __args__
                        142     GET_ITER                        
                        144     FOR_ITER                        86 (to 318)
                        146     STORE_FAST                      3: arg
                        148     LOAD_GLOBAL                     4: isinstance
                        150     LOAD_FAST                       3: arg
                        152     LOAD_FAST                       0: self
                        154     LOAD_ATTR                       15: _typevar_types
                        156     CALL_FUNCTION                   2
                        158     POP_JUMP_IF_FALSE               106 (to 212)
                        160     LOAD_GLOBAL                     4: isinstance
                        162     LOAD_FAST                       3: arg
                        164     LOAD_GLOBAL                     16: ParamSpec
                        166     CALL_FUNCTION                   2
                        168     POP_JUMP_IF_FALSE               101 (to 202)
                        170     LOAD_DEREF                      0: subst
                        172     LOAD_FAST                       3: arg
                        174     BINARY_SUBSCR                   
                        176     STORE_FAST                      3: arg
                        178     LOAD_GLOBAL                     17: _is_param_expr
                        180     LOAD_FAST                       3: arg
                        182     CALL_FUNCTION                   1
                        184     POP_JUMP_IF_TRUE                100 (to 200)
                        186     LOAD_GLOBAL                     3: TypeError
                        188     LOAD_CONST                      5: 'Expected a list of types, an ellipsis, ParamSpec, or Concatenate. Got '
                        190     LOAD_FAST                       3: arg
                        192     FORMAT_VALUE                    0 (FVC_NONE)
                        194     BUILD_STRING                    2
                        196     CALL_FUNCTION                   1
                        198     RAISE_VARARGS                   1
                        200     JUMP_FORWARD                    34 (to 270)
                        202     LOAD_DEREF                      0: subst
                        204     LOAD_FAST                       3: arg
                        206     BINARY_SUBSCR                   
                        208     STORE_FAST                      3: arg
                        210     JUMP_FORWARD                    29 (to 270)
                        212     LOAD_GLOBAL                     4: isinstance
                        214     LOAD_FAST                       3: arg
                        216     LOAD_GLOBAL                     18: _GenericAlias
                        218     LOAD_GLOBAL                     19: GenericAlias
                        220     LOAD_GLOBAL                     20: types
                        222     LOAD_ATTR                       21: UnionType
                        224     BUILD_TUPLE                     3
                        226     CALL_FUNCTION                   2
                        228     POP_JUMP_IF_FALSE               135 (to 270)
                        230     LOAD_FAST                       3: arg
                        232     LOAD_ATTR                       8: __parameters__
                        234     STORE_FAST                      4: subparams
                        236     LOAD_FAST                       4: subparams
                        238     POP_JUMP_IF_FALSE               135 (to 270)
                        240     LOAD_GLOBAL                     5: tuple
                        242     LOAD_CLOSURE                    0: subst
                        244     BUILD_TUPLE                     1
                        246     LOAD_CONST                      6: <CODE> <genexpr>
                        248     LOAD_CONST                      3: '_GenericAlias.__getitem__.<locals>.<genexpr>'
                        250     MAKE_FUNCTION                   8
                        252     LOAD_FAST                       4: subparams
                        254     GET_ITER                        
                        256     CALL_FUNCTION                   1
                        258     CALL_FUNCTION                   1
                        260     STORE_FAST                      5: subargs
                        262     LOAD_FAST                       3: arg
                        264     LOAD_FAST                       5: subargs
                        266     BINARY_SUBSCR                   
                        268     STORE_FAST                      3: arg
                        270     LOAD_FAST                       0: self
                        272     LOAD_ATTR                       0: __origin__
                        274     LOAD_GLOBAL                     22: collections
                        276     LOAD_ATTR                       23: abc
                        278     LOAD_ATTR                       24: Callable
                        280     COMPARE_OP                      2 (==)
                        282     POP_JUMP_IF_FALSE               153 (to 306)
                        284     LOAD_GLOBAL                     4: isinstance
                        286     LOAD_FAST                       3: arg
                        288     LOAD_GLOBAL                     5: tuple
                        290     CALL_FUNCTION                   2
                        292     POP_JUMP_IF_FALSE               153 (to 306)
                        294     LOAD_FAST                       2: new_args
                        296     LOAD_METHOD                     25: extend
                        298     LOAD_FAST                       3: arg
                        300     CALL_METHOD                     1
                        302     POP_TOP                         
                        304     JUMP_ABSOLUTE                   72 (to 144)
                        306     LOAD_FAST                       2: new_args
                        308     LOAD_METHOD                     26: append
                        310     LOAD_FAST                       3: arg
                        312     CALL_METHOD                     1
                        314     POP_TOP                         
                        316     JUMP_ABSOLUTE                   72 (to 144)
                        318     LOAD_FAST                       0: self
                        320     LOAD_METHOD                     27: copy_with
                        322     LOAD_GLOBAL                     5: tuple
                        324     LOAD_FAST                       2: new_args
                        326     CALL_FUNCTION                   1
                        328     CALL_METHOD                     1
                        330     RETURN_VALUE                    
                '_GenericAlias.__getitem__'
                [Code]
                    File Name: typing.py
                    Object Name: copy_with
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__class__'
                        '__origin__'
                        '_name'
                        '_inst'
                        '_typevar_types'
                        '_paramspec_tvars'
                    [Var Names]
                        'self'
                        'params'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            'name'
                            'inst'
                            '_typevar_types'
                            '_paramspec_tvars'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __class__
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: __origin__
                        8       LOAD_FAST                       1: params
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _name
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: _inst
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       4: _typevar_types
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       5: _paramspec_tvars
                        26      LOAD_CONST                      1: ('name', 'inst', '_typevar_types', '_paramspec_tvars')
                        28      CALL_FUNCTION_KW                6
                        30      RETURN_VALUE                    
                '_GenericAlias.copy_with'
                [Code]
                    File Name: typing.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                        '_type_repr'
                        '__origin__'
                        'join'
                        '__args__'
                    [Var Names]
                        'self'
                        'name'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'typing.'
                        ', '
                        [Code]
                            File Name: typing.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                '_type_repr'
                            [Var Names]
                                '.0'
                                'a'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        6 (to 18)
                                6       STORE_FAST                      1: a
                                8       LOAD_GLOBAL                     0: _type_repr
                                10      LOAD_FAST                       1: a
                                12      CALL_FUNCTION                   1
                                14      LIST_APPEND                     2
                                16      JUMP_ABSOLUTE                   2 (to 4)
                                18      RETURN_VALUE                    
                        '_GenericAlias.__repr__.<locals>.<listcomp>'
                        '['
                        ']'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _name
                        4       POP_JUMP_IF_FALSE               9 (to 18)
                        6       LOAD_CONST                      1: 'typing.'
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       0: _name
                        12      BINARY_ADD                      
                        14      STORE_FAST                      1: name
                        16      JUMP_FORWARD                    5 (to 28)
                        18      LOAD_GLOBAL                     1: _type_repr
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: __origin__
                        24      CALL_FUNCTION                   1
                        26      STORE_FAST                      1: name
                        28      LOAD_CONST                      2: ', '
                        30      LOAD_METHOD                     3: join
                        32      LOAD_CONST                      3: <CODE> <listcomp>
                        34      LOAD_CONST                      4: '_GenericAlias.__repr__.<locals>.<listcomp>'
                        36      MAKE_FUNCTION                   0
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       4: __args__
                        42      GET_ITER                        
                        44      CALL_FUNCTION                   1
                        46      CALL_METHOD                     1
                        48      STORE_FAST                      2: args
                        50      LOAD_FAST                       1: name
                        52      FORMAT_VALUE                    0 (FVC_NONE)
                        54      LOAD_CONST                      5: '['
                        56      LOAD_FAST                       2: args
                        58      FORMAT_VALUE                    0 (FVC_NONE)
                        60      LOAD_CONST                      6: ']'
                        62      BUILD_STRING                    4
                        64      RETURN_VALUE                    
                '_GenericAlias.__repr__'
                [Code]
                    File Name: typing.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                        'globals'
                        '__origin__'
                        'tuple'
                        '__args__'
                        'len'
                        'isinstance'
                        'Tuple'
                        'operator'
                        'getitem'
                    [Var Names]
                        'self'
                        'origin'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _name
                        4       POP_JUMP_IF_FALSE               10 (to 20)
                        6       LOAD_GLOBAL                     1: globals
                        8       CALL_FUNCTION                   0
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       0: _name
                        14      BINARY_SUBSCR                   
                        16      STORE_FAST                      1: origin
                        18      JUMP_FORWARD                    3 (to 26)
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       2: __origin__
                        24      STORE_FAST                      1: origin
                        26      LOAD_GLOBAL                     3: tuple
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       4: __args__
                        32      CALL_FUNCTION                   1
                        34      STORE_FAST                      2: args
                        36      LOAD_GLOBAL                     5: len
                        38      LOAD_FAST                       2: args
                        40      CALL_FUNCTION                   1
                        42      LOAD_CONST                      1: 1
                        44      COMPARE_OP                      2 (==)
                        46      POP_JUMP_IF_FALSE               42 (to 84)
                        48      LOAD_GLOBAL                     6: isinstance
                        50      LOAD_FAST                       2: args
                        52      LOAD_CONST                      2: 0
                        54      BINARY_SUBSCR                   
                        56      LOAD_GLOBAL                     3: tuple
                        58      CALL_FUNCTION                   2
                        60      POP_JUMP_IF_FALSE               39 (to 78)
                        62      LOAD_FAST                       1: origin
                        64      LOAD_GLOBAL                     7: Tuple
                        66      IS_OP                           0 (is)
                        68      POP_JUMP_IF_FALSE               42 (to 84)
                        70      LOAD_FAST                       2: args
                        72      LOAD_CONST                      2: 0
                        74      BINARY_SUBSCR                   
                        76      POP_JUMP_IF_TRUE                42 (to 84)
                        78      LOAD_FAST                       2: args
                        80      UNPACK_SEQUENCE                 1
                        82      STORE_FAST                      2: args
                        84      LOAD_GLOBAL                     8: operator
                        86      LOAD_ATTR                       9: getitem
                        88      LOAD_FAST                       1: origin
                        90      LOAD_FAST                       2: args
                        92      BUILD_TUPLE                     2
                        94      BUILD_TUPLE                     2
                        96      RETURN_VALUE                    
                '_GenericAlias.__reduce__'
                [Code]
                    File Name: typing.py
                    Object Name: __mro_entries__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'isinstance'
                        '__origin__'
                        '_SpecialForm'
                        'TypeError'
                        '_name'
                        'super'
                        '__mro_entries__'
                        'Generic'
                        'Protocol'
                        'index'
                        '_BaseGenericAlias'
                    [Var Names]
                        'self'
                        'bases'
                        'i'
                        'b'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        'Cannot subclass '
                        (
                        )
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: __origin__
                        6       LOAD_GLOBAL                     2: _SpecialForm
                        8       CALL_FUNCTION                   2
                        10      POP_JUMP_IF_FALSE               13 (to 26)
                        12      LOAD_GLOBAL                     3: TypeError
                        14      LOAD_CONST                      1: 'Cannot subclass '
                        16      LOAD_FAST                       0: self
                        18      FORMAT_VALUE                    2 (FVC_REPR)
                        20      BUILD_STRING                    2
                        22      CALL_FUNCTION                   1
                        24      RAISE_VARARGS                   1
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       4: _name
                        30      POP_JUMP_IF_FALSE               22 (to 44)
                        32      LOAD_GLOBAL                     5: super
                        34      CALL_FUNCTION                   0
                        36      LOAD_METHOD                     6: __mro_entries__
                        38      LOAD_FAST                       1: bases
                        40      CALL_METHOD                     1
                        42      RETURN_VALUE                    
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       1: __origin__
                        48      LOAD_GLOBAL                     7: Generic
                        50      IS_OP                           0 (is)
                        52      POP_JUMP_IF_FALSE               61 (to 122)
                        54      LOAD_GLOBAL                     8: Protocol
                        56      LOAD_FAST                       1: bases
                        58      CONTAINS_OP                     0 (in)
                        60      POP_JUMP_IF_FALSE               33 (to 66)
                        62      LOAD_CONST                      2: ()
                        64      RETURN_VALUE                    
                        66      LOAD_FAST                       1: bases
                        68      LOAD_METHOD                     9: index
                        70      LOAD_FAST                       0: self
                        72      CALL_METHOD                     1
                        74      STORE_FAST                      2: i
                        76      LOAD_FAST                       1: bases
                        78      LOAD_FAST                       2: i
                        80      LOAD_CONST                      3: 1
                        82      BINARY_ADD                      
                        84      LOAD_CONST                      0: None
                        86      BUILD_SLICE                     2
                        88      BINARY_SUBSCR                   
                        90      GET_ITER                        
                        92      FOR_ITER                        14 (to 122)
                        94      STORE_FAST                      3: b
                        96      LOAD_GLOBAL                     0: isinstance
                        98      LOAD_FAST                       3: b
                        100     LOAD_GLOBAL                     10: _BaseGenericAlias
                        102     CALL_FUNCTION                   2
                        104     POP_JUMP_IF_FALSE               60 (to 120)
                        106     LOAD_FAST                       3: b
                        108     LOAD_FAST                       0: self
                        110     IS_OP                           1 (is not)
                        112     POP_JUMP_IF_FALSE               60 (to 120)
                        114     POP_TOP                         
                        116     LOAD_CONST                      2: ()
                        118     RETURN_VALUE                    
                        120     JUMP_ABSOLUTE                   46 (to 92)
                        122     LOAD_FAST                       0: self
                        124     LOAD_ATTR                       1: __origin__
                        126     BUILD_TUPLE                     1
                        128     RETURN_VALUE                    
                '_GenericAlias.__mro_entries__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_GenericAlias'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: True
                10      LOAD_CONST                      2: None
                12      LOAD_NAME                       3: TypeVar
                14      LOAD_CONST                      3: False
                16      LOAD_CONST                      4: ('inst', 'name', '_typevar_types', '_paramspec_tvars')
                18      BUILD_CONST_KEY_MAP             4
                20      LOAD_CLOSURE                    0: __class__
                22      BUILD_TUPLE                     1
                24      LOAD_CONST                      5: <CODE> __init__
                26      LOAD_CONST                      6: '_GenericAlias.__init__'
                28      MAKE_FUNCTION                   10
                30      STORE_NAME                      4: __init__
                32      LOAD_CONST                      7: <CODE> __eq__
                34      LOAD_CONST                      8: '_GenericAlias.__eq__'
                36      MAKE_FUNCTION                   0
                38      STORE_NAME                      5: __eq__
                40      LOAD_CONST                      9: <CODE> __hash__
                42      LOAD_CONST                      10: '_GenericAlias.__hash__'
                44      MAKE_FUNCTION                   0
                46      STORE_NAME                      6: __hash__
                48      LOAD_CONST                      11: <CODE> __or__
                50      LOAD_CONST                      12: '_GenericAlias.__or__'
                52      MAKE_FUNCTION                   0
                54      STORE_NAME                      7: __or__
                56      LOAD_CONST                      13: <CODE> __ror__
                58      LOAD_CONST                      14: '_GenericAlias.__ror__'
                60      MAKE_FUNCTION                   0
                62      STORE_NAME                      8: __ror__
                64      LOAD_NAME                       9: _tp_cache
                66      LOAD_CONST                      15: <CODE> __getitem__
                68      LOAD_CONST                      16: '_GenericAlias.__getitem__'
                70      MAKE_FUNCTION                   0
                72      CALL_FUNCTION                   1
                74      STORE_NAME                      10: __getitem__
                76      LOAD_CONST                      17: <CODE> copy_with
                78      LOAD_CONST                      18: '_GenericAlias.copy_with'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      11: copy_with
                84      LOAD_CONST                      19: <CODE> __repr__
                86      LOAD_CONST                      20: '_GenericAlias.__repr__'
                88      MAKE_FUNCTION                   0
                90      STORE_NAME                      12: __repr__
                92      LOAD_CONST                      21: <CODE> __reduce__
                94      LOAD_CONST                      22: '_GenericAlias.__reduce__'
                96      MAKE_FUNCTION                   0
                98      STORE_NAME                      13: __reduce__
                100     LOAD_CLOSURE                    0: __class__
                102     BUILD_TUPLE                     1
                104     LOAD_CONST                      23: <CODE> __mro_entries__
                106     LOAD_CONST                      24: '_GenericAlias.__mro_entries__'
                108     MAKE_FUNCTION                   8
                110     STORE_NAME                      14: __mro_entries__
                112     LOAD_CLOSURE                    0: __class__
                114     DUP_TOP                         
                116     STORE_NAME                      15: __classcell__
                118     RETURN_VALUE                    
        '_GenericAlias'
        [Code]
            File Name: typing.py
            Object Name: _SpecialGenericAlias
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                '_tp_cache'
                '__getitem__'
                'copy_with'
                '__repr__'
                '__subclasscheck__'
                '__reduce__'
                '__or__'
                '__ror__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_SpecialGenericAlias'
                True
                None
                (
                    'inst'
                    'name'
                )
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 2
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '__name__'
                        'super'
                        '__init__'
                        '_nparams'
                        '__module__'
                        '__qualname__'
                        '__doc__'
                    [Var Names]
                        'self'
                        'origin'
                        'nparams'
                        'inst'
                        'name'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            'inst'
                            'name'
                        )
                        'builtins'
                        'A generic version of '
                        '.'
                    [Disassembly]
                        0       LOAD_FAST                       4: name
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_FAST                       1: origin
                        10      LOAD_ATTR                       0: __name__
                        12      STORE_FAST                      4: name
                        14      LOAD_GLOBAL                     1: super
                        16      CALL_FUNCTION                   0
                        18      LOAD_ATTR                       2: __init__
                        20      LOAD_FAST                       1: origin
                        22      LOAD_FAST                       3: inst
                        24      LOAD_FAST                       4: name
                        26      LOAD_CONST                      1: ('inst', 'name')
                        28      CALL_FUNCTION_KW                3
                        30      POP_TOP                         
                        32      LOAD_FAST                       2: nparams
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      3: _nparams
                        38      LOAD_FAST                       1: origin
                        40      LOAD_ATTR                       4: __module__
                        42      LOAD_CONST                      2: 'builtins'
                        44      COMPARE_OP                      2 (==)
                        46      POP_JUMP_IF_FALSE               34 (to 68)
                        48      LOAD_CONST                      3: 'A generic version of '
                        50      LOAD_FAST                       1: origin
                        52      LOAD_ATTR                       5: __qualname__
                        54      FORMAT_VALUE                    0 (FVC_NONE)
                        56      LOAD_CONST                      4: '.'
                        58      BUILD_STRING                    3
                        60      LOAD_FAST                       0: self
                        62      STORE_ATTR                      6: __doc__
                        64      LOAD_CONST                      0: None
                        66      RETURN_VALUE                    
                        68      LOAD_CONST                      3: 'A generic version of '
                        70      LOAD_FAST                       1: origin
                        72      LOAD_ATTR                       4: __module__
                        74      FORMAT_VALUE                    0 (FVC_NONE)
                        76      LOAD_CONST                      4: '.'
                        78      LOAD_FAST                       1: origin
                        80      LOAD_ATTR                       5: __qualname__
                        82      FORMAT_VALUE                    0 (FVC_NONE)
                        84      LOAD_CONST                      4: '.'
                        86      BUILD_STRING                    5
                        88      LOAD_FAST                       0: self
                        90      STORE_ATTR                      6: __doc__
                        92      LOAD_CONST                      0: None
                        94      RETURN_VALUE                    
                '_SpecialGenericAlias.__init__'
                [Code]
                    File Name: typing.py
                    Object Name: __getitem__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'isinstance'
                        'tuple'
                        '_check_generic'
                        '_nparams'
                        'copy_with'
                    [Var Names]
                        'self'
                        'params'
                    [Free Vars]
                    [Cell Vars]
                        'msg'
                    [Constants]
                        None
                        'Parameters to generic types must be types.'
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                                '_type_check'
                            [Var Names]
                                '.0'
                                'p'
                            [Free Vars]
                                'msg'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: p
                                8       LOAD_GLOBAL                     0: _type_check
                                10      LOAD_FAST                       1: p
                                12      LOAD_DEREF                      0: msg
                                14      CALL_FUNCTION                   2
                                16      YIELD_VALUE                     
                                18      POP_TOP                         
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      LOAD_CONST                      0: None
                                24      RETURN_VALUE                    
                        '_SpecialGenericAlias.__getitem__.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: params
                        4       LOAD_GLOBAL                     1: tuple
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                8 (to 16)
                        10      LOAD_FAST                       1: params
                        12      BUILD_TUPLE                     1
                        14      STORE_FAST                      1: params
                        16      LOAD_CONST                      1: 'Parameters to generic types must be types.'
                        18      STORE_DEREF                     0: msg
                        20      LOAD_GLOBAL                     1: tuple
                        22      LOAD_CLOSURE                    0: msg
                        24      BUILD_TUPLE                     1
                        26      LOAD_CONST                      2: <CODE> <genexpr>
                        28      LOAD_CONST                      3: '_SpecialGenericAlias.__getitem__.<locals>.<genexpr>'
                        30      MAKE_FUNCTION                   8
                        32      LOAD_FAST                       1: params
                        34      GET_ITER                        
                        36      CALL_FUNCTION                   1
                        38      CALL_FUNCTION                   1
                        40      STORE_FAST                      1: params
                        42      LOAD_GLOBAL                     2: _check_generic
                        44      LOAD_FAST                       0: self
                        46      LOAD_FAST                       1: params
                        48      LOAD_FAST                       0: self
                        50      LOAD_ATTR                       3: _nparams
                        52      CALL_FUNCTION                   3
                        54      POP_TOP                         
                        56      LOAD_FAST                       0: self
                        58      LOAD_METHOD                     4: copy_with
                        60      LOAD_FAST                       1: params
                        62      CALL_METHOD                     1
                        64      RETURN_VALUE                    
                '_SpecialGenericAlias.__getitem__'
                [Code]
                    File Name: typing.py
                    Object Name: copy_with
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_GenericAlias'
                        '__origin__'
                        '_name'
                        '_inst'
                    [Var Names]
                        'self'
                        'params'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            'name'
                            'inst'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _GenericAlias
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: __origin__
                        6       LOAD_FAST                       1: params
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: _name
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: _inst
                        16      LOAD_CONST                      1: ('name', 'inst')
                        18      CALL_FUNCTION_KW                4
                        20      RETURN_VALUE                    
                '_SpecialGenericAlias.copy_with'
                [Code]
                    File Name: typing.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'typing.'
                    [Disassembly]
                        0       LOAD_CONST                      1: 'typing.'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _name
                        6       BINARY_ADD                      
                        8       RETURN_VALUE                    
                '_SpecialGenericAlias.__repr__'
                [Code]
                    File Name: typing.py
                    Object Name: __subclasscheck__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'isinstance'
                        '_SpecialGenericAlias'
                        'issubclass'
                        '__origin__'
                        '_GenericAlias'
                        'super'
                        '__subclasscheck__'
                    [Var Names]
                        'self'
                        'cls'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: cls
                        4       LOAD_GLOBAL                     1: _SpecialGenericAlias
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               12 (to 24)
                        10      LOAD_GLOBAL                     2: issubclass
                        12      LOAD_FAST                       1: cls
                        14      LOAD_ATTR                       3: __origin__
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       3: __origin__
                        20      CALL_FUNCTION                   2
                        22      RETURN_VALUE                    
                        24      LOAD_GLOBAL                     0: isinstance
                        26      LOAD_FAST                       1: cls
                        28      LOAD_GLOBAL                     4: _GenericAlias
                        30      CALL_FUNCTION                   2
                        32      POP_JUMP_IF_TRUE                23 (to 46)
                        34      LOAD_GLOBAL                     2: issubclass
                        36      LOAD_FAST                       1: cls
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       3: __origin__
                        42      CALL_FUNCTION                   2
                        44      RETURN_VALUE                    
                        46      LOAD_GLOBAL                     5: super
                        48      CALL_FUNCTION                   0
                        50      LOAD_METHOD                     6: __subclasscheck__
                        52      LOAD_FAST                       1: cls
                        54      CALL_METHOD                     1
                        56      RETURN_VALUE                    
                '_SpecialGenericAlias.__subclasscheck__'
                [Code]
                    File Name: typing.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _name
                        4       RETURN_VALUE                    
                '_SpecialGenericAlias.__reduce__'
                [Code]
                    File Name: typing.py
                    Object Name: __or__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Union'
                    [Var Names]
                        'self'
                        'right'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Union
                        2       LOAD_FAST                       0: self
                        4       LOAD_FAST                       1: right
                        6       BUILD_TUPLE                     2
                        8       BINARY_SUBSCR                   
                        10      RETURN_VALUE                    
                '_SpecialGenericAlias.__or__'
                [Code]
                    File Name: typing.py
                    Object Name: __ror__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Union'
                    [Var Names]
                        'self'
                        'left'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Union
                        2       LOAD_FAST                       1: left
                        4       LOAD_FAST                       0: self
                        6       BUILD_TUPLE                     2
                        8       BINARY_SUBSCR                   
                        10      RETURN_VALUE                    
                '_SpecialGenericAlias.__ror__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_SpecialGenericAlias'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: True
                10      LOAD_CONST                      2: None
                12      LOAD_CONST                      3: ('inst', 'name')
                14      BUILD_CONST_KEY_MAP             2
                16      LOAD_CLOSURE                    0: __class__
                18      BUILD_TUPLE                     1
                20      LOAD_CONST                      4: <CODE> __init__
                22      LOAD_CONST                      5: '_SpecialGenericAlias.__init__'
                24      MAKE_FUNCTION                   10
                26      STORE_NAME                      3: __init__
                28      LOAD_NAME                       4: _tp_cache
                30      LOAD_CONST                      6: <CODE> __getitem__
                32      LOAD_CONST                      7: '_SpecialGenericAlias.__getitem__'
                34      MAKE_FUNCTION                   0
                36      CALL_FUNCTION                   1
                38      STORE_NAME                      5: __getitem__
                40      LOAD_CONST                      8: <CODE> copy_with
                42      LOAD_CONST                      9: '_SpecialGenericAlias.copy_with'
                44      MAKE_FUNCTION                   0
                46      STORE_NAME                      6: copy_with
                48      LOAD_CONST                      10: <CODE> __repr__
                50      LOAD_CONST                      11: '_SpecialGenericAlias.__repr__'
                52      MAKE_FUNCTION                   0
                54      STORE_NAME                      7: __repr__
                56      LOAD_CLOSURE                    0: __class__
                58      BUILD_TUPLE                     1
                60      LOAD_CONST                      12: <CODE> __subclasscheck__
                62      LOAD_CONST                      13: '_SpecialGenericAlias.__subclasscheck__'
                64      MAKE_FUNCTION                   8
                66      STORE_NAME                      8: __subclasscheck__
                68      LOAD_CONST                      14: <CODE> __reduce__
                70      LOAD_CONST                      15: '_SpecialGenericAlias.__reduce__'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      9: __reduce__
                76      LOAD_CONST                      16: <CODE> __or__
                78      LOAD_CONST                      17: '_SpecialGenericAlias.__or__'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      10: __or__
                84      LOAD_CONST                      18: <CODE> __ror__
                86      LOAD_CONST                      19: '_SpecialGenericAlias.__ror__'
                88      MAKE_FUNCTION                   0
                90      STORE_NAME                      11: __ror__
                92      LOAD_CLOSURE                    0: __class__
                94      DUP_TOP                         
                96      STORE_NAME                      12: __classcell__
                98      RETURN_VALUE                    
        '_SpecialGenericAlias'
        [Code]
            File Name: typing.py
            Object Name: _CallableGenericAlias
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__repr__'
                '__reduce__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_CallableGenericAlias'
                [Code]
                    File Name: typing.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 7
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_name'
                        '__args__'
                        'len'
                        '_is_param_expr'
                        'super'
                        '__repr__'
                        'join'
                        '_type_repr'
                    [Var Names]
                        'self'
                        'args'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        'Callable'
                        2
                        0
                        'typing.Callable[['
                        ', '
                        [Code]
                            File Name: typing.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                '_type_repr'
                            [Var Names]
                                '.0'
                                'a'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        6 (to 18)
                                6       STORE_FAST                      1: a
                                8       LOAD_GLOBAL                     0: _type_repr
                                10      LOAD_FAST                       1: a
                                12      CALL_FUNCTION                   1
                                14      LIST_APPEND                     2
                                16      JUMP_ABSOLUTE                   2 (to 4)
                                18      RETURN_VALUE                    
                        '_CallableGenericAlias.__repr__.<locals>.<listcomp>'
                        -1
                        '], '
                        ']'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _name
                        4       LOAD_CONST                      1: 'Callable'
                        6       COMPARE_OP                      2 (==)
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_ASSERTION_ERROR            
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: __args__
                        18      STORE_FAST                      1: args
                        20      LOAD_GLOBAL                     2: len
                        22      LOAD_FAST                       1: args
                        24      CALL_FUNCTION                   1
                        26      LOAD_CONST                      2: 2
                        28      COMPARE_OP                      2 (==)
                        30      POP_JUMP_IF_FALSE               27 (to 54)
                        32      LOAD_GLOBAL                     3: _is_param_expr
                        34      LOAD_FAST                       1: args
                        36      LOAD_CONST                      3: 0
                        38      BINARY_SUBSCR                   
                        40      CALL_FUNCTION                   1
                        42      POP_JUMP_IF_FALSE               27 (to 54)
                        44      LOAD_GLOBAL                     4: super
                        46      CALL_FUNCTION                   0
                        48      LOAD_METHOD                     5: __repr__
                        50      CALL_METHOD                     0
                        52      RETURN_VALUE                    
                        54      LOAD_CONST                      4: 'typing.Callable[['
                        56      LOAD_CONST                      5: ', '
                        58      LOAD_METHOD                     6: join
                        60      LOAD_CONST                      6: <CODE> <listcomp>
                        62      LOAD_CONST                      7: '_CallableGenericAlias.__repr__.<locals>.<listcomp>'
                        64      MAKE_FUNCTION                   0
                        66      LOAD_FAST                       1: args
                        68      LOAD_CONST                      0: None
                        70      LOAD_CONST                      8: -1
                        72      BUILD_SLICE                     2
                        74      BINARY_SUBSCR                   
                        76      GET_ITER                        
                        78      CALL_FUNCTION                   1
                        80      CALL_METHOD                     1
                        82      FORMAT_VALUE                    0 (FVC_NONE)
                        84      LOAD_CONST                      9: '], '
                        86      LOAD_GLOBAL                     7: _type_repr
                        88      LOAD_FAST                       1: args
                        90      LOAD_CONST                      8: -1
                        92      BINARY_SUBSCR                   
                        94      CALL_FUNCTION                   1
                        96      FORMAT_VALUE                    0 (FVC_NONE)
                        98      LOAD_CONST                      10: ']'
                        100     BUILD_STRING                    5
                        102     RETURN_VALUE                    
                '_CallableGenericAlias.__repr__'
                [Code]
                    File Name: typing.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__args__'
                        'len'
                        '_is_param_expr'
                        'list'
                        'operator'
                        'getitem'
                        'Callable'
                    [Var Names]
                        'self'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        2
                        0
                        -1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __args__
                        4       STORE_FAST                      1: args
                        6       LOAD_GLOBAL                     1: len
                        8       LOAD_FAST                       1: args
                        10      CALL_FUNCTION                   1
                        12      LOAD_CONST                      1: 2
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               15 (to 30)
                        18      LOAD_GLOBAL                     2: _is_param_expr
                        20      LOAD_FAST                       1: args
                        22      LOAD_CONST                      2: 0
                        24      BINARY_SUBSCR                   
                        26      CALL_FUNCTION                   1
                        28      POP_JUMP_IF_TRUE                27 (to 54)
                        30      LOAD_GLOBAL                     3: list
                        32      LOAD_FAST                       1: args
                        34      LOAD_CONST                      0: None
                        36      LOAD_CONST                      3: -1
                        38      BUILD_SLICE                     2
                        40      BINARY_SUBSCR                   
                        42      CALL_FUNCTION                   1
                        44      LOAD_FAST                       1: args
                        46      LOAD_CONST                      3: -1
                        48      BINARY_SUBSCR                   
                        50      BUILD_TUPLE                     2
                        52      STORE_FAST                      1: args
                        54      LOAD_GLOBAL                     4: operator
                        56      LOAD_ATTR                       5: getitem
                        58      LOAD_GLOBAL                     6: Callable
                        60      LOAD_FAST                       1: args
                        62      BUILD_TUPLE                     2
                        64      BUILD_TUPLE                     2
                        66      RETURN_VALUE                    
                '_CallableGenericAlias.__reduce__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_CallableGenericAlias'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CLOSURE                    0: __class__
                10      BUILD_TUPLE                     1
                12      LOAD_CONST                      1: <CODE> __repr__
                14      LOAD_CONST                      2: '_CallableGenericAlias.__repr__'
                16      MAKE_FUNCTION                   8
                18      STORE_NAME                      3: __repr__
                20      LOAD_CONST                      3: <CODE> __reduce__
                22      LOAD_CONST                      4: '_CallableGenericAlias.__reduce__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      4: __reduce__
                28      LOAD_CLOSURE                    0: __class__
                30      DUP_TOP                         
                32      STORE_NAME                      5: __classcell__
                34      RETURN_VALUE                    
        '_CallableGenericAlias'
        [Code]
            File Name: typing.py
            Object Name: _CallableType
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'copy_with'
                '__getitem__'
                '_tp_cache'
                '__getitem_inner__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_CallableType'
                [Code]
                    File Name: typing.py
                    Object Name: copy_with
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_CallableGenericAlias'
                        '__origin__'
                        '_name'
                        '_inst'
                        'TypeVar'
                        'ParamSpec'
                    [Var Names]
                        'self'
                        'params'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                        (
                            'name'
                            'inst'
                            '_typevar_types'
                            '_paramspec_tvars'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _CallableGenericAlias
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: __origin__
                        6       LOAD_FAST                       1: params
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: _name
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: _inst
                        16      LOAD_GLOBAL                     4: TypeVar
                        18      LOAD_GLOBAL                     5: ParamSpec
                        20      BUILD_TUPLE                     2
                        22      LOAD_CONST                      1: True
                        24      LOAD_CONST                      2: ('name', 'inst', '_typevar_types', '_paramspec_tvars')
                        26      CALL_FUNCTION_KW                6
                        28      RETURN_VALUE                    
                '_CallableType.copy_with'
                [Code]
                    File Name: typing.py
                    Object Name: __getitem__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'tuple'
                        'len'
                        'TypeError'
                        'list'
                        '__getitem_inner__'
                    [Var Names]
                        'self'
                        'params'
                        'args'
                        'result'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        2
                        'Callable must be used as Callable[[arg, ...], result].'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: params
                        4       LOAD_GLOBAL                     1: tuple
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               11 (to 22)
                        10      LOAD_GLOBAL                     2: len
                        12      LOAD_FAST                       1: params
                        14      CALL_FUNCTION                   1
                        16      LOAD_CONST                      1: 2
                        18      COMPARE_OP                      3 (!=)
                        20      POP_JUMP_IF_FALSE               15 (to 30)
                        22      LOAD_GLOBAL                     3: TypeError
                        24      LOAD_CONST                      2: 'Callable must be used as Callable[[arg, ...], result].'
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      LOAD_FAST                       1: params
                        32      UNPACK_SEQUENCE                 2
                        34      STORE_FAST                      2: args
                        36      STORE_FAST                      3: result
                        38      LOAD_GLOBAL                     0: isinstance
                        40      LOAD_FAST                       2: args
                        42      LOAD_GLOBAL                     4: list
                        44      CALL_FUNCTION                   2
                        46      POP_JUMP_IF_FALSE               31 (to 62)
                        48      LOAD_GLOBAL                     1: tuple
                        50      LOAD_FAST                       2: args
                        52      CALL_FUNCTION                   1
                        54      LOAD_FAST                       3: result
                        56      BUILD_TUPLE                     2
                        58      STORE_FAST                      1: params
                        60      JUMP_FORWARD                    4 (to 70)
                        62      LOAD_FAST                       2: args
                        64      LOAD_FAST                       3: result
                        66      BUILD_TUPLE                     2
                        68      STORE_FAST                      1: params
                        70      LOAD_FAST                       0: self
                        72      LOAD_METHOD                     5: __getitem_inner__
                        74      LOAD_FAST                       1: params
                        76      CALL_METHOD                     1
                        78      RETURN_VALUE                    
                '_CallableType.__getitem__'
                [Code]
                    File Name: typing.py
                    Object Name: __getitem_inner__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_type_check'
                        'Ellipsis'
                        'copy_with'
                        '_TypingEllipsis'
                        'isinstance'
                        'tuple'
                    [Var Names]
                        'self'
                        'params'
                        'args'
                        'result'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Callable[args, result]: result must be a type.'
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                '_type_convert'
                            [Var Names]
                                '.0'
                                'arg'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: arg
                                8       LOAD_GLOBAL                     0: _type_convert
                                10      LOAD_FAST                       1: arg
                                12      CALL_FUNCTION                   1
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        '_CallableType.__getitem_inner__.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_FAST                       1: params
                        2       UNPACK_SEQUENCE                 2
                        4       STORE_FAST                      2: args
                        6       STORE_FAST                      3: result
                        8       LOAD_CONST                      1: 'Callable[args, result]: result must be a type.'
                        10      STORE_FAST                      4: msg
                        12      LOAD_GLOBAL                     0: _type_check
                        14      LOAD_FAST                       3: result
                        16      LOAD_FAST                       4: msg
                        18      CALL_FUNCTION                   2
                        20      STORE_FAST                      3: result
                        22      LOAD_FAST                       2: args
                        24      LOAD_GLOBAL                     1: Ellipsis
                        26      IS_OP                           0 (is)
                        28      POP_JUMP_IF_FALSE               22 (to 44)
                        30      LOAD_FAST                       0: self
                        32      LOAD_METHOD                     2: copy_with
                        34      LOAD_GLOBAL                     3: _TypingEllipsis
                        36      LOAD_FAST                       3: result
                        38      BUILD_TUPLE                     2
                        40      CALL_METHOD                     1
                        42      RETURN_VALUE                    
                        44      LOAD_GLOBAL                     4: isinstance
                        46      LOAD_FAST                       2: args
                        48      LOAD_GLOBAL                     5: tuple
                        50      CALL_FUNCTION                   2
                        52      POP_JUMP_IF_TRUE                30 (to 60)
                        54      LOAD_FAST                       2: args
                        56      BUILD_TUPLE                     1
                        58      STORE_FAST                      2: args
                        60      LOAD_GLOBAL                     5: tuple
                        62      LOAD_CONST                      2: <CODE> <genexpr>
                        64      LOAD_CONST                      3: '_CallableType.__getitem_inner__.<locals>.<genexpr>'
                        66      MAKE_FUNCTION                   0
                        68      LOAD_FAST                       2: args
                        70      GET_ITER                        
                        72      CALL_FUNCTION                   1
                        74      CALL_FUNCTION                   1
                        76      STORE_FAST                      2: args
                        78      LOAD_FAST                       2: args
                        80      LOAD_FAST                       3: result
                        82      BUILD_TUPLE                     1
                        84      BINARY_ADD                      
                        86      STORE_FAST                      1: params
                        88      LOAD_FAST                       0: self
                        90      LOAD_METHOD                     2: copy_with
                        92      LOAD_FAST                       1: params
                        94      CALL_METHOD                     1
                        96      RETURN_VALUE                    
                '_CallableType.__getitem_inner__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_CallableType'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: <CODE> copy_with
                10      LOAD_CONST                      2: '_CallableType.copy_with'
                12      MAKE_FUNCTION                   0
                14      STORE_NAME                      3: copy_with
                16      LOAD_CONST                      3: <CODE> __getitem__
                18      LOAD_CONST                      4: '_CallableType.__getitem__'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      4: __getitem__
                24      LOAD_NAME                       5: _tp_cache
                26      LOAD_CONST                      5: <CODE> __getitem_inner__
                28      LOAD_CONST                      6: '_CallableType.__getitem_inner__'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: __getitem_inner__
                36      LOAD_CONST                      7: None
                38      RETURN_VALUE                    
        '_CallableType'
        [Code]
            File Name: typing.py
            Object Name: _TupleType
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '_tp_cache'
                '__getitem__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_TupleType'
                [Code]
                    File Name: typing.py
                    Object Name: __getitem__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'copy_with'
                        '_TypingEmpty'
                        'isinstance'
                        'tuple'
                        'len'
                        '_type_check'
                        '_TypingEllipsis'
                    [Var Names]
                        'self'
                        'params'
                        'p'
                    [Free Vars]
                    [Cell Vars]
                        'msg'
                    [Constants]
                        None
                        (
                        )
                        2
                        1
                        ...
                        'Tuple[t, ...]: t must be a type.'
                        0
                        'Tuple[t0, t1, ...]: each t must be a type.'
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                                '_type_check'
                            [Var Names]
                                '.0'
                                'p'
                            [Free Vars]
                                'msg'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: p
                                8       LOAD_GLOBAL                     0: _type_check
                                10      LOAD_FAST                       1: p
                                12      LOAD_DEREF                      0: msg
                                14      CALL_FUNCTION                   2
                                16      YIELD_VALUE                     
                                18      POP_TOP                         
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      LOAD_CONST                      0: None
                                24      RETURN_VALUE                    
                        '_TupleType.__getitem__.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_FAST                       1: params
                        2       LOAD_CONST                      1: ()
                        4       COMPARE_OP                      2 (==)
                        6       POP_JUMP_IF_FALSE               10 (to 20)
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     0: copy_with
                        12      LOAD_GLOBAL                     1: _TypingEmpty
                        14      BUILD_TUPLE                     1
                        16      CALL_METHOD                     1
                        18      RETURN_VALUE                    
                        20      LOAD_GLOBAL                     2: isinstance
                        22      LOAD_FAST                       1: params
                        24      LOAD_GLOBAL                     3: tuple
                        26      CALL_FUNCTION                   2
                        28      POP_JUMP_IF_TRUE                18 (to 36)
                        30      LOAD_FAST                       1: params
                        32      BUILD_TUPLE                     1
                        34      STORE_FAST                      1: params
                        36      LOAD_GLOBAL                     4: len
                        38      LOAD_FAST                       1: params
                        40      CALL_FUNCTION                   1
                        42      LOAD_CONST                      2: 2
                        44      COMPARE_OP                      2 (==)
                        46      POP_JUMP_IF_FALSE               46 (to 92)
                        48      LOAD_FAST                       1: params
                        50      LOAD_CONST                      3: 1
                        52      BINARY_SUBSCR                   
                        54      LOAD_CONST                      4: ...
                        56      IS_OP                           0 (is)
                        58      POP_JUMP_IF_FALSE               46 (to 92)
                        60      LOAD_CONST                      5: 'Tuple[t, ...]: t must be a type.'
                        62      STORE_DEREF                     0: msg
                        64      LOAD_GLOBAL                     5: _type_check
                        66      LOAD_FAST                       1: params
                        68      LOAD_CONST                      6: 0
                        70      BINARY_SUBSCR                   
                        72      LOAD_DEREF                      0: msg
                        74      CALL_FUNCTION                   2
                        76      STORE_FAST                      2: p
                        78      LOAD_FAST                       0: self
                        80      LOAD_METHOD                     0: copy_with
                        82      LOAD_FAST                       2: p
                        84      LOAD_GLOBAL                     6: _TypingEllipsis
                        86      BUILD_TUPLE                     2
                        88      CALL_METHOD                     1
                        90      RETURN_VALUE                    
                        92      LOAD_CONST                      7: 'Tuple[t0, t1, ...]: each t must be a type.'
                        94      STORE_DEREF                     0: msg
                        96      LOAD_GLOBAL                     3: tuple
                        98      LOAD_CLOSURE                    0: msg
                        100     BUILD_TUPLE                     1
                        102     LOAD_CONST                      8: <CODE> <genexpr>
                        104     LOAD_CONST                      9: '_TupleType.__getitem__.<locals>.<genexpr>'
                        106     MAKE_FUNCTION                   8
                        108     LOAD_FAST                       1: params
                        110     GET_ITER                        
                        112     CALL_FUNCTION                   1
                        114     CALL_FUNCTION                   1
                        116     STORE_FAST                      1: params
                        118     LOAD_FAST                       0: self
                        120     LOAD_METHOD                     0: copy_with
                        122     LOAD_FAST                       1: params
                        124     CALL_METHOD                     1
                        126     RETURN_VALUE                    
                '_TupleType.__getitem__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_TupleType'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: _tp_cache
                10      LOAD_CONST                      1: <CODE> __getitem__
                12      LOAD_CONST                      2: '_TupleType.__getitem__'
                14      MAKE_FUNCTION                   0
                16      CALL_FUNCTION                   1
                18      STORE_NAME                      4: __getitem__
                20      LOAD_CONST                      3: None
                22      RETURN_VALUE                    
        '_TupleType'
        [Code]
            File Name: typing.py
            Object Name: _UnionGenericAlias
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'copy_with'
                '__eq__'
                '__hash__'
                '__repr__'
                '__instancecheck__'
                '__subclasscheck__'
                '__reduce__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_UnionGenericAlias'
                [Code]
                    File Name: typing.py
                    Object Name: copy_with
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Union'
                    [Var Names]
                        'self'
                        'params'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Union
                        2       LOAD_FAST                       1: params
                        4       BINARY_SUBSCR                   
                        6       RETURN_VALUE                    
                '_UnionGenericAlias.copy_with'
                [Code]
                    File Name: typing.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        '_UnionGenericAlias'
                        'types'
                        'UnionType'
                        'NotImplemented'
                        'set'
                        '__args__'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: _UnionGenericAlias
                        6       LOAD_GLOBAL                     2: types
                        8       LOAD_ATTR                       3: UnionType
                        10      BUILD_TUPLE                     2
                        12      CALL_FUNCTION                   2
                        14      POP_JUMP_IF_TRUE                10 (to 20)
                        16      LOAD_GLOBAL                     4: NotImplemented
                        18      RETURN_VALUE                    
                        20      LOAD_GLOBAL                     5: set
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       6: __args__
                        26      CALL_FUNCTION                   1
                        28      LOAD_GLOBAL                     5: set
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       6: __args__
                        34      CALL_FUNCTION                   1
                        36      COMPARE_OP                      2 (==)
                        38      RETURN_VALUE                    
                '_UnionGenericAlias.__eq__'
                [Code]
                    File Name: typing.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        'frozenset'
                        '__args__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_GLOBAL                     1: frozenset
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       2: __args__
                        8       CALL_FUNCTION                   1
                        10      CALL_FUNCTION                   1
                        12      RETURN_VALUE                    
                '_UnionGenericAlias.__hash__'
                [Code]
                    File Name: typing.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '__args__'
                        'len'
                        'type'
                        '_type_repr'
                        'super'
                        '__repr__'
                    [Var Names]
                        'self'
                        'args'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        2
                        0
                        'typing.Optional['
                        1
                        ']'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __args__
                        4       STORE_FAST                      1: args
                        6       LOAD_GLOBAL                     1: len
                        8       LOAD_FAST                       1: args
                        10      CALL_FUNCTION                   1
                        12      LOAD_CONST                      1: 2
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               45 (to 90)
                        18      LOAD_FAST                       1: args
                        20      LOAD_CONST                      2: 0
                        22      BINARY_SUBSCR                   
                        24      LOAD_GLOBAL                     2: type
                        26      LOAD_CONST                      0: None
                        28      CALL_FUNCTION                   1
                        30      IS_OP                           0 (is)
                        32      POP_JUMP_IF_FALSE               27 (to 54)
                        34      LOAD_CONST                      3: 'typing.Optional['
                        36      LOAD_GLOBAL                     3: _type_repr
                        38      LOAD_FAST                       1: args
                        40      LOAD_CONST                      4: 1
                        42      BINARY_SUBSCR                   
                        44      CALL_FUNCTION                   1
                        46      FORMAT_VALUE                    0 (FVC_NONE)
                        48      LOAD_CONST                      5: ']'
                        50      BUILD_STRING                    3
                        52      RETURN_VALUE                    
                        54      LOAD_FAST                       1: args
                        56      LOAD_CONST                      4: 1
                        58      BINARY_SUBSCR                   
                        60      LOAD_GLOBAL                     2: type
                        62      LOAD_CONST                      0: None
                        64      CALL_FUNCTION                   1
                        66      IS_OP                           0 (is)
                        68      POP_JUMP_IF_FALSE               45 (to 90)
                        70      LOAD_CONST                      3: 'typing.Optional['
                        72      LOAD_GLOBAL                     3: _type_repr
                        74      LOAD_FAST                       1: args
                        76      LOAD_CONST                      2: 0
                        78      BINARY_SUBSCR                   
                        80      CALL_FUNCTION                   1
                        82      FORMAT_VALUE                    0 (FVC_NONE)
                        84      LOAD_CONST                      5: ']'
                        86      BUILD_STRING                    3
                        88      RETURN_VALUE                    
                        90      LOAD_GLOBAL                     4: super
                        92      CALL_FUNCTION                   0
                        94      LOAD_METHOD                     5: __repr__
                        96      CALL_METHOD                     0
                        98      RETURN_VALUE                    
                '_UnionGenericAlias.__repr__'
                [Code]
                    File Name: typing.py
                    Object Name: __instancecheck__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__subclasscheck__'
                        'type'
                    [Var Names]
                        'self'
                        'obj'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: __subclasscheck__
                        4       LOAD_GLOBAL                     1: type
                        6       LOAD_FAST                       1: obj
                        8       CALL_FUNCTION                   1
                        10      CALL_METHOD                     1
                        12      RETURN_VALUE                    
                '_UnionGenericAlias.__instancecheck__'
                [Code]
                    File Name: typing.py
                    Object Name: __subclasscheck__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__args__'
                        'issubclass'
                    [Var Names]
                        'self'
                        'cls'
                        'arg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __args__
                        4       GET_ITER                        
                        6       FOR_ITER                        10 (to 28)
                        8       STORE_FAST                      2: arg
                        10      LOAD_GLOBAL                     1: issubclass
                        12      LOAD_FAST                       1: cls
                        14      LOAD_FAST                       2: arg
                        16      CALL_FUNCTION                   2
                        18      POP_JUMP_IF_FALSE               13 (to 26)
                        20      POP_TOP                         
                        22      LOAD_CONST                      1: True
                        24      RETURN_VALUE                    
                        26      JUMP_ABSOLUTE                   3 (to 6)
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                '_UnionGenericAlias.__subclasscheck__'
                [Code]
                    File Name: typing.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '__reduce__'
                        'Union'
                    [Var Names]
                        'self'
                        'func'
                        'origin'
                        'args'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_METHOD                     1: __reduce__
                        6       CALL_METHOD                     0
                        8       UNPACK_SEQUENCE                 2
                        10      STORE_FAST                      1: func
                        12      UNPACK_SEQUENCE                 2
                        14      STORE_FAST                      2: origin
                        16      STORE_FAST                      3: args
                        18      LOAD_FAST                       1: func
                        20      LOAD_GLOBAL                     2: Union
                        22      LOAD_FAST                       3: args
                        24      BUILD_TUPLE                     2
                        26      BUILD_TUPLE                     2
                        28      RETURN_VALUE                    
                '_UnionGenericAlias.__reduce__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_UnionGenericAlias'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: <CODE> copy_with
                10      LOAD_CONST                      2: '_UnionGenericAlias.copy_with'
                12      MAKE_FUNCTION                   0
                14      STORE_NAME                      3: copy_with
                16      LOAD_CONST                      3: <CODE> __eq__
                18      LOAD_CONST                      4: '_UnionGenericAlias.__eq__'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      4: __eq__
                24      LOAD_CONST                      5: <CODE> __hash__
                26      LOAD_CONST                      6: '_UnionGenericAlias.__hash__'
                28      MAKE_FUNCTION                   0
                30      STORE_NAME                      5: __hash__
                32      LOAD_CLOSURE                    0: __class__
                34      BUILD_TUPLE                     1
                36      LOAD_CONST                      7: <CODE> __repr__
                38      LOAD_CONST                      8: '_UnionGenericAlias.__repr__'
                40      MAKE_FUNCTION                   8
                42      STORE_NAME                      6: __repr__
                44      LOAD_CONST                      9: <CODE> __instancecheck__
                46      LOAD_CONST                      10: '_UnionGenericAlias.__instancecheck__'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      7: __instancecheck__
                52      LOAD_CONST                      11: <CODE> __subclasscheck__
                54      LOAD_CONST                      12: '_UnionGenericAlias.__subclasscheck__'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      8: __subclasscheck__
                60      LOAD_CLOSURE                    0: __class__
                62      BUILD_TUPLE                     1
                64      LOAD_CONST                      13: <CODE> __reduce__
                66      LOAD_CONST                      14: '_UnionGenericAlias.__reduce__'
                68      MAKE_FUNCTION                   8
                70      STORE_NAME                      9: __reduce__
                72      LOAD_CLOSURE                    0: __class__
                74      DUP_TOP                         
                76      STORE_NAME                      10: __classcell__
                78      RETURN_VALUE                    
        '_UnionGenericAlias'
        [Code]
            File Name: typing.py
            Object Name: _value_and_type_iter
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'parameters'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                [Code]
                    File Name: typing.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'type'
                    [Var Names]
                        '.0'
                        'p'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        9 (to 24)
                        6       STORE_FAST                      1: p
                        8       LOAD_FAST                       1: p
                        10      LOAD_GLOBAL                     0: type
                        12      LOAD_FAST                       1: p
                        14      CALL_FUNCTION                   1
                        16      BUILD_TUPLE                     2
                        18      YIELD_VALUE                     
                        20      POP_TOP                         
                        22      JUMP_ABSOLUTE                   2 (to 4)
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                '_value_and_type_iter.<locals>.<genexpr>'
            [Disassembly]
                0       LOAD_CONST                      1: <CODE> <genexpr>
                2       LOAD_CONST                      2: '_value_and_type_iter.<locals>.<genexpr>'
                4       MAKE_FUNCTION                   0
                6       LOAD_FAST                       0: parameters
                8       GET_ITER                        
                10      CALL_FUNCTION                   1
                12      RETURN_VALUE                    
        '_value_and_type_iter'
        [Code]
            File Name: typing.py
            Object Name: _LiteralGenericAlias
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__eq__'
                '__hash__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_LiteralGenericAlias'
                [Code]
                    File Name: typing.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        '_LiteralGenericAlias'
                        'NotImplemented'
                        'set'
                        '_value_and_type_iter'
                        '__args__'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: _LiteralGenericAlias
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_GLOBAL                     3: set
                        16      LOAD_GLOBAL                     4: _value_and_type_iter
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       5: __args__
                        22      CALL_FUNCTION                   1
                        24      CALL_FUNCTION                   1
                        26      LOAD_GLOBAL                     3: set
                        28      LOAD_GLOBAL                     4: _value_and_type_iter
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       5: __args__
                        34      CALL_FUNCTION                   1
                        36      CALL_FUNCTION                   1
                        38      COMPARE_OP                      2 (==)
                        40      RETURN_VALUE                    
                '_LiteralGenericAlias.__eq__'
                [Code]
                    File Name: typing.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        'frozenset'
                        '_value_and_type_iter'
                        '__args__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_GLOBAL                     1: frozenset
                        4       LOAD_GLOBAL                     2: _value_and_type_iter
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       3: __args__
                        10      CALL_FUNCTION                   1
                        12      CALL_FUNCTION                   1
                        14      CALL_FUNCTION                   1
                        16      RETURN_VALUE                    
                '_LiteralGenericAlias.__hash__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_LiteralGenericAlias'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: <CODE> __eq__
                10      LOAD_CONST                      2: '_LiteralGenericAlias.__eq__'
                12      MAKE_FUNCTION                   0
                14      STORE_NAME                      3: __eq__
                16      LOAD_CONST                      3: <CODE> __hash__
                18      LOAD_CONST                      4: '_LiteralGenericAlias.__hash__'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      4: __hash__
                24      LOAD_CONST                      5: None
                26      RETURN_VALUE                    
        '_LiteralGenericAlias'
        [Code]
            File Name: typing.py
            Object Name: _ConcatenateGenericAlias
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'copy_with'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_ConcatenateGenericAlias'
                [Code]
                    File Name: typing.py
                    Object Name: copy_with
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'isinstance'
                        'list'
                        'tuple'
                        '_ConcatenateGenericAlias'
                        '__args__'
                        'ParamSpec'
                        'TypeError'
                        'super'
                        'copy_with'
                    [Var Names]
                        'self'
                        'params'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        -1
                        'The last parameter to Concatenate should be a ParamSpec variable.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: params
                        4       LOAD_CONST                      1: -1
                        6       BINARY_SUBSCR                   
                        8       LOAD_GLOBAL                     1: list
                        10      LOAD_GLOBAL                     2: tuple
                        12      BUILD_TUPLE                     2
                        14      CALL_FUNCTION                   2
                        16      POP_JUMP_IF_FALSE               22 (to 44)
                        18      BUILD_LIST                      0
                        20      LOAD_FAST                       1: params
                        22      LOAD_CONST                      0: None
                        24      LOAD_CONST                      1: -1
                        26      BUILD_SLICE                     2
                        28      BINARY_SUBSCR                   
                        30      LIST_EXTEND                     1
                        32      LOAD_FAST                       1: params
                        34      LOAD_CONST                      1: -1
                        36      BINARY_SUBSCR                   
                        38      LIST_EXTEND                     1
                        40      LIST_TO_TUPLE                   
                        42      RETURN_VALUE                    
                        44      LOAD_GLOBAL                     0: isinstance
                        46      LOAD_FAST                       1: params
                        48      LOAD_CONST                      1: -1
                        50      BINARY_SUBSCR                   
                        52      LOAD_GLOBAL                     3: _ConcatenateGenericAlias
                        54      CALL_FUNCTION                   2
                        56      POP_JUMP_IF_FALSE               44 (to 88)
                        58      BUILD_LIST                      0
                        60      LOAD_FAST                       1: params
                        62      LOAD_CONST                      0: None
                        64      LOAD_CONST                      1: -1
                        66      BUILD_SLICE                     2
                        68      BINARY_SUBSCR                   
                        70      LIST_EXTEND                     1
                        72      LOAD_FAST                       1: params
                        74      LOAD_CONST                      1: -1
                        76      BINARY_SUBSCR                   
                        78      LOAD_ATTR                       4: __args__
                        80      LIST_EXTEND                     1
                        82      LIST_TO_TUPLE                   
                        84      STORE_FAST                      1: params
                        86      JUMP_FORWARD                    11 (to 110)
                        88      LOAD_GLOBAL                     0: isinstance
                        90      LOAD_FAST                       1: params
                        92      LOAD_CONST                      1: -1
                        94      BINARY_SUBSCR                   
                        96      LOAD_GLOBAL                     5: ParamSpec
                        98      CALL_FUNCTION                   2
                        100     POP_JUMP_IF_TRUE                55 (to 110)
                        102     LOAD_GLOBAL                     6: TypeError
                        104     LOAD_CONST                      2: 'The last parameter to Concatenate should be a ParamSpec variable.'
                        106     CALL_FUNCTION                   1
                        108     RAISE_VARARGS                   1
                        110     LOAD_GLOBAL                     7: super
                        112     CALL_FUNCTION                   0
                        114     LOAD_METHOD                     8: copy_with
                        116     LOAD_FAST                       1: params
                        118     CALL_METHOD                     1
                        120     RETURN_VALUE                    
                '_ConcatenateGenericAlias.copy_with'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_ConcatenateGenericAlias'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CLOSURE                    0: __class__
                10      BUILD_TUPLE                     1
                12      LOAD_CONST                      1: <CODE> copy_with
                14      LOAD_CONST                      2: '_ConcatenateGenericAlias.copy_with'
                16      MAKE_FUNCTION                   8
                18      STORE_NAME                      3: copy_with
                20      LOAD_CLOSURE                    0: __class__
                22      DUP_TOP                         
                24      STORE_NAME                      4: __classcell__
                26      RETURN_VALUE                    
        '_ConcatenateGenericAlias'
        [Code]
            File Name: typing.py
            Object Name: Generic
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '_is_protocol'
                '_tp_cache'
                '__class_getitem__'
                '__init_subclass__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'Generic'
                'Abstract base class for generic types.\n\n    A generic type is typically declared by inheriting from\n    this class parameterized with one or more type variables.\n    For example, a generic mapping type might be defined as::\n\n      class Mapping(Generic[KT, VT]):\n          def __getitem__(self, key: KT) -> VT:\n              ...\n          # Etc.\n\n    This class can then be used as follows::\n\n      def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n          try:\n              return mapping[key]\n          except KeyError:\n              return default\n    '
                (
                )
                False
                [Code]
                    File Name: typing.py
                    Object Name: __class_getitem__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'tuple'
                        'Tuple'
                        'TypeError'
                        '__qualname__'
                        'Generic'
                        'Protocol'
                        'all'
                        '__name__'
                        'len'
                        'set'
                        'any'
                        '__parameters__'
                        '_prepare_paramspec_params'
                        '_check_generic'
                        '_GenericAlias'
                        'TypeVar'
                        'ParamSpec'
                    [Var Names]
                        'cls'
                        'params'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Parameter list to '
                        '[...] cannot be empty'
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                '_type_convert'
                            [Var Names]
                                '.0'
                                'p'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: p
                                8       LOAD_GLOBAL                     0: _type_convert
                                10      LOAD_FAST                       1: p
                                12      CALL_FUNCTION                   1
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'Generic.__class_getitem__.<locals>.<genexpr>'
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 5
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'isinstance'
                                'TypeVar'
                                'ParamSpec'
                            [Var Names]
                                '.0'
                                'p'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        10 (to 26)
                                6       STORE_FAST                      1: p
                                8       LOAD_GLOBAL                     0: isinstance
                                10      LOAD_FAST                       1: p
                                12      LOAD_GLOBAL                     1: TypeVar
                                14      LOAD_GLOBAL                     2: ParamSpec
                                16      BUILD_TUPLE                     2
                                18      CALL_FUNCTION                   2
                                20      YIELD_VALUE                     
                                22      POP_TOP                         
                                24      JUMP_ABSOLUTE                   2 (to 4)
                                26      LOAD_CONST                      0: None
                                28      RETURN_VALUE                    
                        'Parameters to '
                        '[...] must all be type variables or parameter specification variables.'
                        '[...] must all be unique'
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'isinstance'
                                'ParamSpec'
                            [Var Names]
                                '.0'
                                't'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: t
                                8       LOAD_GLOBAL                     0: isinstance
                                10      LOAD_FAST                       1: t
                                12      LOAD_GLOBAL                     1: ParamSpec
                                14      CALL_FUNCTION                   2
                                16      YIELD_VALUE                     
                                18      POP_TOP                         
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      LOAD_CONST                      0: None
                                24      RETURN_VALUE                    
                        True
                        (
                            '_typevar_types'
                            '_paramspec_tvars'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: params
                        4       LOAD_GLOBAL                     1: tuple
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                8 (to 16)
                        10      LOAD_FAST                       1: params
                        12      BUILD_TUPLE                     1
                        14      STORE_FAST                      1: params
                        16      LOAD_FAST                       1: params
                        18      POP_JUMP_IF_TRUE                23 (to 46)
                        20      LOAD_FAST                       0: cls
                        22      LOAD_GLOBAL                     2: Tuple
                        24      IS_OP                           1 (is not)
                        26      POP_JUMP_IF_FALSE               23 (to 46)
                        28      LOAD_GLOBAL                     3: TypeError
                        30      LOAD_CONST                      1: 'Parameter list to '
                        32      LOAD_FAST                       0: cls
                        34      LOAD_ATTR                       4: __qualname__
                        36      FORMAT_VALUE                    0 (FVC_NONE)
                        38      LOAD_CONST                      2: '[...] cannot be empty'
                        40      BUILD_STRING                    3
                        42      CALL_FUNCTION                   1
                        44      RAISE_VARARGS                   1
                        46      LOAD_GLOBAL                     1: tuple
                        48      LOAD_CONST                      3: <CODE> <genexpr>
                        50      LOAD_CONST                      4: 'Generic.__class_getitem__.<locals>.<genexpr>'
                        52      MAKE_FUNCTION                   0
                        54      LOAD_FAST                       1: params
                        56      GET_ITER                        
                        58      CALL_FUNCTION                   1
                        60      CALL_FUNCTION                   1
                        62      STORE_FAST                      1: params
                        64      LOAD_FAST                       0: cls
                        66      LOAD_GLOBAL                     5: Generic
                        68      LOAD_GLOBAL                     6: Protocol
                        70      BUILD_TUPLE                     2
                        72      CONTAINS_OP                     0 (in)
                        74      POP_JUMP_IF_FALSE               76 (to 152)
                        76      LOAD_GLOBAL                     7: all
                        78      LOAD_CONST                      5: <CODE> <genexpr>
                        80      LOAD_CONST                      4: 'Generic.__class_getitem__.<locals>.<genexpr>'
                        82      MAKE_FUNCTION                   0
                        84      LOAD_FAST                       1: params
                        86      GET_ITER                        
                        88      CALL_FUNCTION                   1
                        90      CALL_FUNCTION                   1
                        92      POP_JUMP_IF_TRUE                56 (to 112)
                        94      LOAD_GLOBAL                     3: TypeError
                        96      LOAD_CONST                      6: 'Parameters to '
                        98      LOAD_FAST                       0: cls
                        100     LOAD_ATTR                       8: __name__
                        102     FORMAT_VALUE                    0 (FVC_NONE)
                        104     LOAD_CONST                      7: '[...] must all be type variables or parameter specification variables.'
                        106     BUILD_STRING                    3
                        108     CALL_FUNCTION                   1
                        110     RAISE_VARARGS                   1
                        112     LOAD_GLOBAL                     9: len
                        114     LOAD_GLOBAL                     10: set
                        116     LOAD_FAST                       1: params
                        118     CALL_FUNCTION                   1
                        120     CALL_FUNCTION                   1
                        122     LOAD_GLOBAL                     9: len
                        124     LOAD_FAST                       1: params
                        126     CALL_FUNCTION                   1
                        128     COMPARE_OP                      3 (!=)
                        130     POP_JUMP_IF_FALSE               75 (to 150)
                        132     LOAD_GLOBAL                     3: TypeError
                        134     LOAD_CONST                      6: 'Parameters to '
                        136     LOAD_FAST                       0: cls
                        138     LOAD_ATTR                       8: __name__
                        140     FORMAT_VALUE                    0 (FVC_NONE)
                        142     LOAD_CONST                      8: '[...] must all be unique'
                        144     BUILD_STRING                    3
                        146     CALL_FUNCTION                   1
                        148     RAISE_VARARGS                   1
                        150     JUMP_FORWARD                    25 (to 202)
                        152     LOAD_GLOBAL                     11: any
                        154     LOAD_CONST                      9: <CODE> <genexpr>
                        156     LOAD_CONST                      4: 'Generic.__class_getitem__.<locals>.<genexpr>'
                        158     MAKE_FUNCTION                   0
                        160     LOAD_FAST                       0: cls
                        162     LOAD_ATTR                       12: __parameters__
                        164     GET_ITER                        
                        166     CALL_FUNCTION                   1
                        168     CALL_FUNCTION                   1
                        170     POP_JUMP_IF_FALSE               92 (to 184)
                        172     LOAD_GLOBAL                     13: _prepare_paramspec_params
                        174     LOAD_FAST                       0: cls
                        176     LOAD_FAST                       1: params
                        178     CALL_FUNCTION                   2
                        180     STORE_FAST                      1: params
                        182     JUMP_FORWARD                    9 (to 202)
                        184     LOAD_GLOBAL                     14: _check_generic
                        186     LOAD_FAST                       0: cls
                        188     LOAD_FAST                       1: params
                        190     LOAD_GLOBAL                     9: len
                        192     LOAD_FAST                       0: cls
                        194     LOAD_ATTR                       12: __parameters__
                        196     CALL_FUNCTION                   1
                        198     CALL_FUNCTION                   3
                        200     POP_TOP                         
                        202     LOAD_GLOBAL                     15: _GenericAlias
                        204     LOAD_FAST                       0: cls
                        206     LOAD_FAST                       1: params
                        208     LOAD_GLOBAL                     16: TypeVar
                        210     LOAD_GLOBAL                     17: ParamSpec
                        212     BUILD_TUPLE                     2
                        214     LOAD_CONST                      10: True
                        216     LOAD_CONST                      11: ('_typevar_types', '_paramspec_tvars')
                        218     CALL_FUNCTION_KW                4
                        220     RETURN_VALUE                    
                'Generic.__class_getitem__'
                [Code]
                    File Name: typing.py
                    Object Name: __init_subclass__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 10
                    Stack Size: 6
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                        'super'
                        '__init_subclass__'
                        '__dict__'
                        'Generic'
                        '__orig_bases__'
                        '__bases__'
                        '__name__'
                        'TypeError'
                        '_collect_type_vars'
                        'TypeVar'
                        'ParamSpec'
                        'isinstance'
                        '_GenericAlias'
                        '__origin__'
                        '__parameters__'
                        'set'
                        'join'
                        'tuple'
                    [Var Names]
                        'cls'
                        'args'
                        'kwargs'
                        'tvars'
                        'error'
                        'gvars'
                        'base'
                        'tvarset'
                        's_vars'
                        's_args'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                        'gvarset'
                    [Constants]
                        None
                        '__orig_bases__'
                        'Protocol'
                        'Cannot inherit from plain Generic'
                        'Cannot inherit from Generic[...] multiple types.'
                        ', '
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                                'str'
                            [Var Names]
                                '.0'
                                't'
                            [Free Vars]
                                'gvarset'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        11 (to 28)
                                6       STORE_FAST                      1: t
                                8       LOAD_FAST                       1: t
                                10      LOAD_DEREF                      0: gvarset
                                12      CONTAINS_OP                     1 (not in)
                                14      POP_JUMP_IF_FALSE               2 (to 4)
                                16      LOAD_GLOBAL                     0: str
                                18      LOAD_FAST                       1: t
                                20      CALL_FUNCTION                   1
                                22      YIELD_VALUE                     
                                24      POP_TOP                         
                                26      JUMP_ABSOLUTE                   2 (to 4)
                                28      LOAD_CONST                      0: None
                                30      RETURN_VALUE                    
                        'Generic.__init_subclass__.<locals>.<genexpr>'
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'str'
                            [Var Names]
                                '.0'
                                'g'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: g
                                8       LOAD_GLOBAL                     0: str
                                10      LOAD_FAST                       1: g
                                12      CALL_FUNCTION                   1
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'Some type variables ('
                        ') are not listed in Generic['
                        ']'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_ATTR                       1: __init_subclass__
                        6       LOAD_FAST                       1: args
                        8       BUILD_MAP                       0
                        10      LOAD_FAST                       2: kwargs
                        12      DICT_MERGE                      1
                        14      CALL_FUNCTION_EX                1
                        16      POP_TOP                         
                        18      BUILD_LIST                      0
                        20      STORE_FAST                      3: tvars
                        22      LOAD_CONST                      1: '__orig_bases__'
                        24      LOAD_FAST                       0: cls
                        26      LOAD_ATTR                       2: __dict__
                        28      CONTAINS_OP                     0 (in)
                        30      POP_JUMP_IF_FALSE               22 (to 44)
                        32      LOAD_GLOBAL                     3: Generic
                        34      LOAD_FAST                       0: cls
                        36      LOAD_ATTR                       4: __orig_bases__
                        38      CONTAINS_OP                     0 (in)
                        40      STORE_FAST                      4: error
                        42      JUMP_FORWARD                    10 (to 64)
                        44      LOAD_GLOBAL                     3: Generic
                        46      LOAD_FAST                       0: cls
                        48      LOAD_ATTR                       5: __bases__
                        50      CONTAINS_OP                     0 (in)
                        52      JUMP_IF_FALSE_OR_POP            31 (to 62)
                        54      LOAD_FAST                       0: cls
                        56      LOAD_ATTR                       6: __name__
                        58      LOAD_CONST                      2: 'Protocol'
                        60      COMPARE_OP                      3 (!=)
                        62      STORE_FAST                      4: error
                        64      LOAD_FAST                       4: error
                        66      POP_JUMP_IF_FALSE               38 (to 76)
                        68      LOAD_GLOBAL                     7: TypeError
                        70      LOAD_CONST                      3: 'Cannot inherit from plain Generic'
                        72      CALL_FUNCTION                   1
                        74      RAISE_VARARGS                   1
                        76      LOAD_CONST                      1: '__orig_bases__'
                        78      LOAD_FAST                       0: cls
                        80      LOAD_ATTR                       2: __dict__
                        82      CONTAINS_OP                     0 (in)
                        84      POP_JUMP_IF_FALSE               131 (to 262)
                        86      LOAD_GLOBAL                     8: _collect_type_vars
                        88      LOAD_FAST                       0: cls
                        90      LOAD_ATTR                       4: __orig_bases__
                        92      LOAD_GLOBAL                     9: TypeVar
                        94      LOAD_GLOBAL                     10: ParamSpec
                        96      BUILD_TUPLE                     2
                        98      CALL_FUNCTION                   2
                        100     STORE_FAST                      3: tvars
                        102     LOAD_CONST                      0: None
                        104     STORE_FAST                      5: gvars
                        106     LOAD_FAST                       0: cls
                        108     LOAD_ATTR                       4: __orig_bases__
                        110     GET_ITER                        
                        112     FOR_ITER                        23 (to 160)
                        114     STORE_FAST                      6: base
                        116     LOAD_GLOBAL                     11: isinstance
                        118     LOAD_FAST                       6: base
                        120     LOAD_GLOBAL                     12: _GenericAlias
                        122     CALL_FUNCTION                   2
                        124     POP_JUMP_IF_FALSE               79 (to 158)
                        126     LOAD_FAST                       6: base
                        128     LOAD_ATTR                       13: __origin__
                        130     LOAD_GLOBAL                     3: Generic
                        132     IS_OP                           0 (is)
                        134     POP_JUMP_IF_FALSE               79 (to 158)
                        136     LOAD_FAST                       5: gvars
                        138     LOAD_CONST                      0: None
                        140     IS_OP                           1 (is not)
                        142     POP_JUMP_IF_FALSE               76 (to 152)
                        144     LOAD_GLOBAL                     7: TypeError
                        146     LOAD_CONST                      4: 'Cannot inherit from Generic[...] multiple types.'
                        148     CALL_FUNCTION                   1
                        150     RAISE_VARARGS                   1
                        152     LOAD_FAST                       6: base
                        154     LOAD_ATTR                       14: __parameters__
                        156     STORE_FAST                      5: gvars
                        158     JUMP_ABSOLUTE                   56 (to 112)
                        160     LOAD_FAST                       5: gvars
                        162     LOAD_CONST                      0: None
                        164     IS_OP                           1 (is not)
                        166     POP_JUMP_IF_FALSE               131 (to 262)
                        168     LOAD_GLOBAL                     15: set
                        170     LOAD_FAST                       3: tvars
                        172     CALL_FUNCTION                   1
                        174     STORE_FAST                      7: tvarset
                        176     LOAD_GLOBAL                     15: set
                        178     LOAD_FAST                       5: gvars
                        180     CALL_FUNCTION                   1
                        182     STORE_DEREF                     0: gvarset
                        184     LOAD_FAST                       7: tvarset
                        186     LOAD_DEREF                      0: gvarset
                        188     COMPARE_OP                      1 (<=)
                        190     POP_JUMP_IF_TRUE                129 (to 258)
                        192     LOAD_CONST                      5: ', '
                        194     LOAD_METHOD                     16: join
                        196     LOAD_CLOSURE                    0: gvarset
                        198     BUILD_TUPLE                     1
                        200     LOAD_CONST                      6: <CODE> <genexpr>
                        202     LOAD_CONST                      7: 'Generic.__init_subclass__.<locals>.<genexpr>'
                        204     MAKE_FUNCTION                   8
                        206     LOAD_FAST                       3: tvars
                        208     GET_ITER                        
                        210     CALL_FUNCTION                   1
                        212     CALL_METHOD                     1
                        214     STORE_FAST                      8: s_vars
                        216     LOAD_CONST                      5: ', '
                        218     LOAD_METHOD                     16: join
                        220     LOAD_CONST                      8: <CODE> <genexpr>
                        222     LOAD_CONST                      7: 'Generic.__init_subclass__.<locals>.<genexpr>'
                        224     MAKE_FUNCTION                   0
                        226     LOAD_FAST                       5: gvars
                        228     GET_ITER                        
                        230     CALL_FUNCTION                   1
                        232     CALL_METHOD                     1
                        234     STORE_FAST                      9: s_args
                        236     LOAD_GLOBAL                     7: TypeError
                        238     LOAD_CONST                      9: 'Some type variables ('
                        240     LOAD_FAST                       8: s_vars
                        242     FORMAT_VALUE                    0 (FVC_NONE)
                        244     LOAD_CONST                      10: ') are not listed in Generic['
                        246     LOAD_FAST                       9: s_args
                        248     FORMAT_VALUE                    0 (FVC_NONE)
                        250     LOAD_CONST                      11: ']'
                        252     BUILD_STRING                    5
                        254     CALL_FUNCTION                   1
                        256     RAISE_VARARGS                   1
                        258     LOAD_FAST                       5: gvars
                        260     STORE_FAST                      3: tvars
                        262     LOAD_GLOBAL                     17: tuple
                        264     LOAD_FAST                       3: tvars
                        266     CALL_FUNCTION                   1
                        268     LOAD_FAST                       0: cls
                        270     STORE_ATTR                      14: __parameters__
                        272     LOAD_CONST                      0: None
                        274     RETURN_VALUE                    
                'Generic.__init_subclass__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Generic'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Abstract base class for generic types.\n\n    A generic type is typically declared by inheriting from\n    this class parameterized with one or more type variables.\n    For example, a generic mapping type might be defined as::\n\n      class Mapping(Generic[KT, VT]):\n          def __getitem__(self, key: KT) -> VT:\n              ...\n          # Etc.\n\n    This class can then be used as follows::\n\n      def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n          try:\n              return mapping[key]\n          except KeyError:\n              return default\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: False
                18      STORE_NAME                      5: _is_protocol
                20      LOAD_NAME                       6: _tp_cache
                22      LOAD_CONST                      4: <CODE> __class_getitem__
                24      LOAD_CONST                      5: 'Generic.__class_getitem__'
                26      MAKE_FUNCTION                   0
                28      CALL_FUNCTION                   1
                30      STORE_NAME                      7: __class_getitem__
                32      LOAD_CLOSURE                    0: __class__
                34      BUILD_TUPLE                     1
                36      LOAD_CONST                      6: <CODE> __init_subclass__
                38      LOAD_CONST                      7: 'Generic.__init_subclass__'
                40      MAKE_FUNCTION                   8
                42      STORE_NAME                      8: __init_subclass__
                44      LOAD_CLOSURE                    0: __class__
                46      DUP_TOP                         
                48      STORE_NAME                      9: __classcell__
                50      RETURN_VALUE                    
        'Generic'
        [Code]
            File Name: typing.py
            Object Name: _TypingEmpty
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_TypingEmpty'
                'Internal placeholder for () or []. Used by TupleMeta and CallableMeta\n    to allow empty list/tuple in specific places, without allowing them\n    to sneak in where prohibited.\n    '
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_TypingEmpty'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Internal placeholder for () or []. Used by TupleMeta and CallableMeta\n    to allow empty list/tuple in specific places, without allowing them\n    to sneak in where prohibited.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        '_TypingEmpty'
        [Code]
            File Name: typing.py
            Object Name: _TypingEllipsis
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_TypingEllipsis'
                'Internal placeholder for ... (ellipsis).'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_TypingEllipsis'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Internal placeholder for ... (ellipsis).'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        '_TypingEllipsis'
        (
            '__parameters__'
            '__orig_bases__'
            '__orig_class__'
            '_is_protocol'
            '_is_runtime_protocol'
        )
        (
            '__abstractmethods__'
            '__annotations__'
            '__dict__'
            '__doc__'
            '__init__'
            '__module__'
            '__new__'
            '__slots__'
            '__subclasshook__'
            '__weakref__'
            '__class_getitem__'
        )
        '_MutableMapping__marker'
        [Code]
            File Name: typing.py
            Object Name: _get_protocol_attrs
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'set'
                '__mro__'
                '__name__'
                'getattr'
                'list'
                '__dict__'
                'keys'
                'startswith'
                'EXCLUDED_ATTRIBUTES'
                'add'
            [Var Names]
                'cls'
                'attrs'
                'base'
                'annotations'
                'attr'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Collect protocol members from a protocol class objects.\n\n    This includes names actually defined in the class dictionary, as well\n    as names that appear in annotations. Special names (above) are skipped.\n    '
                None
                -1
                (
                    'Protocol'
                    'Generic'
                )
                '__annotations__'
                '_abc_'
            [Disassembly]
                0       LOAD_GLOBAL                     0: set
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: attrs
                6       LOAD_FAST                       0: cls
                8       LOAD_ATTR                       1: __mro__
                10      LOAD_CONST                      1: None
                12      LOAD_CONST                      2: -1
                14      BUILD_SLICE                     2
                16      BINARY_SUBSCR                   
                18      GET_ITER                        
                20      FOR_ITER                        44 (to 110)
                22      STORE_FAST                      2: base
                24      LOAD_FAST                       2: base
                26      LOAD_ATTR                       2: __name__
                28      LOAD_CONST                      3: ('Protocol', 'Generic')
                30      CONTAINS_OP                     0 (in)
                32      POP_JUMP_IF_FALSE               18 (to 36)
                34      JUMP_ABSOLUTE                   10 (to 20)
                36      LOAD_GLOBAL                     3: getattr
                38      LOAD_FAST                       2: base
                40      LOAD_CONST                      4: '__annotations__'
                42      BUILD_MAP                       0
                44      CALL_FUNCTION                   3
                46      STORE_FAST                      3: annotations
                48      LOAD_GLOBAL                     4: list
                50      LOAD_FAST                       2: base
                52      LOAD_ATTR                       5: __dict__
                54      LOAD_METHOD                     6: keys
                56      CALL_METHOD                     0
                58      CALL_FUNCTION                   1
                60      LOAD_GLOBAL                     4: list
                62      LOAD_FAST                       3: annotations
                64      LOAD_METHOD                     6: keys
                66      CALL_METHOD                     0
                68      CALL_FUNCTION                   1
                70      BINARY_ADD                      
                72      GET_ITER                        
                74      FOR_ITER                        16 (to 108)
                76      STORE_FAST                      4: attr
                78      LOAD_FAST                       4: attr
                80      LOAD_METHOD                     7: startswith
                82      LOAD_CONST                      5: '_abc_'
                84      CALL_METHOD                     1
                86      POP_JUMP_IF_TRUE                53 (to 106)
                88      LOAD_FAST                       4: attr
                90      LOAD_GLOBAL                     8: EXCLUDED_ATTRIBUTES
                92      CONTAINS_OP                     1 (not in)
                94      POP_JUMP_IF_FALSE               53 (to 106)
                96      LOAD_FAST                       1: attrs
                98      LOAD_METHOD                     9: add
                100     LOAD_FAST                       4: attr
                102     CALL_METHOD                     1
                104     POP_TOP                         
                106     JUMP_ABSOLUTE                   37 (to 74)
                108     JUMP_ABSOLUTE                   10 (to 20)
                110     LOAD_FAST                       1: attrs
                112     RETURN_VALUE                    
        '_get_protocol_attrs'
        [Code]
            File Name: typing.py
            Object Name: _is_callable_members_only
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 4
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'all'
                '_get_protocol_attrs'
            [Var Names]
                'cls'
            [Free Vars]
            [Cell Vars]
                'cls'
            [Constants]
                None
                [Code]
                    File Name: typing.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 6
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                        'callable'
                        'getattr'
                    [Var Names]
                        '.0'
                        'attr'
                    [Free Vars]
                        'cls'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        11 (to 28)
                        6       STORE_FAST                      1: attr
                        8       LOAD_GLOBAL                     0: callable
                        10      LOAD_GLOBAL                     1: getattr
                        12      LOAD_DEREF                      0: cls
                        14      LOAD_FAST                       1: attr
                        16      LOAD_CONST                      0: None
                        18      CALL_FUNCTION                   3
                        20      CALL_FUNCTION                   1
                        22      YIELD_VALUE                     
                        24      POP_TOP                         
                        26      JUMP_ABSOLUTE                   2 (to 4)
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                '_is_callable_members_only.<locals>.<genexpr>'
            [Disassembly]
                0       LOAD_GLOBAL                     0: all
                2       LOAD_CLOSURE                    0: cls
                4       BUILD_TUPLE                     1
                6       LOAD_CONST                      1: <CODE> <genexpr>
                8       LOAD_CONST                      2: '_is_callable_members_only.<locals>.<genexpr>'
                10      MAKE_FUNCTION                   8
                12      LOAD_GLOBAL                     1: _get_protocol_attrs
                14      LOAD_DEREF                      0: cls
                16      CALL_FUNCTION                   1
                18      GET_ITER                        
                20      CALL_FUNCTION                   1
                22      CALL_FUNCTION                   1
                24      RETURN_VALUE                    
        '_is_callable_members_only'
        [Code]
            File Name: typing.py
            Object Name: _no_init_or_replace_init
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 6
            Stack Size: 5
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'type'
                '_is_protocol'
                'TypeError'
                '__init__'
                '_no_init_or_replace_init'
                '__mro__'
                '__dict__'
                'get'
                'object'
            [Var Names]
                'self'
                'args'
                'kwargs'
                'cls'
                'base'
                'init'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'Protocols cannot be instantiated'
                '__init__'
            [Disassembly]
                0       LOAD_GLOBAL                     0: type
                2       LOAD_FAST                       0: self
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      3: cls
                8       LOAD_FAST                       3: cls
                10      LOAD_ATTR                       1: _is_protocol
                12      POP_JUMP_IF_FALSE               11 (to 22)
                14      LOAD_GLOBAL                     2: TypeError
                16      LOAD_CONST                      1: 'Protocols cannot be instantiated'
                18      CALL_FUNCTION                   1
                20      RAISE_VARARGS                   1
                22      LOAD_FAST                       3: cls
                24      LOAD_ATTR                       3: __init__
                26      LOAD_GLOBAL                     4: _no_init_or_replace_init
                28      IS_OP                           1 (is not)
                30      POP_JUMP_IF_FALSE               18 (to 36)
                32      LOAD_CONST                      0: None
                34      RETURN_VALUE                    
                36      LOAD_FAST                       3: cls
                38      LOAD_ATTR                       5: __mro__
                40      GET_ITER                        
                42      FOR_ITER                        18 (to 80)
                44      STORE_FAST                      4: base
                46      LOAD_FAST                       4: base
                48      LOAD_ATTR                       6: __dict__
                50      LOAD_METHOD                     7: get
                52      LOAD_CONST                      2: '__init__'
                54      LOAD_GLOBAL                     4: _no_init_or_replace_init
                56      CALL_METHOD                     2
                58      STORE_FAST                      5: init
                60      LOAD_FAST                       5: init
                62      LOAD_GLOBAL                     4: _no_init_or_replace_init
                64      IS_OP                           1 (is not)
                66      POP_JUMP_IF_FALSE               39 (to 78)
                68      LOAD_FAST                       5: init
                70      LOAD_FAST                       3: cls
                72      STORE_ATTR                      3: __init__
                74      POP_TOP                         
                76      JUMP_FORWARD                    5 (to 88)
                78      JUMP_ABSOLUTE                   21 (to 42)
                80      LOAD_GLOBAL                     8: object
                82      LOAD_ATTR                       3: __init__
                84      LOAD_FAST                       3: cls
                86      STORE_ATTR                      3: __init__
                88      LOAD_FAST                       3: cls
                90      LOAD_ATTR                       3: __init__
                92      LOAD_FAST                       0: self
                94      BUILD_LIST                      1
                96      LOAD_FAST                       1: args
                98      LIST_EXTEND                     1
                100     LIST_TO_TUPLE                   
                102     BUILD_MAP                       0
                104     LOAD_FAST                       2: kwargs
                106     DICT_MERGE                      1
                108     CALL_FUNCTION_EX                1
                110     POP_TOP                         
                112     LOAD_CONST                      0: None
                114     RETURN_VALUE                    
        '_no_init_or_replace_init'
        1
        '__main__'
        [Code]
            File Name: typing.py
            Object Name: _caller
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'sys'
                '_getframe'
                'f_globals'
                'get'
                'AttributeError'
                'ValueError'
            [Var Names]
                'depth'
                'default'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                1
                '__name__'
            [Disassembly]
                0       SETUP_FINALLY                   13 (to 28)
                2       LOAD_GLOBAL                     0: sys
                4       LOAD_METHOD                     1: _getframe
                6       LOAD_FAST                       0: depth
                8       LOAD_CONST                      1: 1
                10      BINARY_ADD                      
                12      CALL_METHOD                     1
                14      LOAD_ATTR                       2: f_globals
                16      LOAD_METHOD                     3: get
                18      LOAD_CONST                      2: '__name__'
                20      LOAD_FAST                       1: default
                22      CALL_METHOD                     2
                24      POP_BLOCK                       
                26      RETURN_VALUE                    
                28      DUP_TOP                         
                30      LOAD_GLOBAL                     4: AttributeError
                32      LOAD_GLOBAL                     5: ValueError
                34      BUILD_TUPLE                     2
                36      JUMP_IF_NOT_EXC_MATCH           25 (to 50)
                38      POP_TOP                         
                40      POP_TOP                         
                42      POP_TOP                         
                44      POP_EXCEPT                      
                46      LOAD_CONST                      0: None
                48      RETURN_VALUE                    
                50      RERAISE                         0
        '_caller'
        3
        [Code]
            File Name: typing.py
            Object Name: _allow_reckless_class_checks
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'sys'
                '_getframe'
                'f_globals'
                'AttributeError'
                'ValueError'
            [Var Names]
                'depth'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Allow instance and class checks for special stdlib modules.\n\n    The abc and functools modules indiscriminately call isinstance() and\n    issubclass() on the whole MRO of a user class, which may contain protocols.\n    '
                '__name__'
                (
                    'abc'
                    'functools'
                )
                True
            [Disassembly]
                0       SETUP_FINALLY                   11 (to 24)
                2       LOAD_GLOBAL                     0: sys
                4       LOAD_METHOD                     1: _getframe
                6       LOAD_FAST                       0: depth
                8       CALL_METHOD                     1
                10      LOAD_ATTR                       2: f_globals
                12      LOAD_CONST                      1: '__name__'
                14      BINARY_SUBSCR                   
                16      LOAD_CONST                      2: ('abc', 'functools')
                18      CONTAINS_OP                     0 (in)
                20      POP_BLOCK                       
                22      RETURN_VALUE                    
                24      DUP_TOP                         
                26      LOAD_GLOBAL                     3: AttributeError
                28      LOAD_GLOBAL                     4: ValueError
                30      BUILD_TUPLE                     2
                32      JUMP_IF_NOT_EXC_MATCH           23 (to 46)
                34      POP_TOP                         
                36      POP_TOP                         
                38      POP_TOP                         
                40      POP_EXCEPT                      
                42      LOAD_CONST                      3: True
                44      RETURN_VALUE                    
                46      RERAISE                         0
        '_allow_reckless_class_checks'
        (
            'Callable'
            'Awaitable'
            'Iterable'
            'Iterator'
            'AsyncIterable'
            'Hashable'
            'Sized'
            'Container'
            'Collection'
            'Reversible'
        )
        'AbstractContextManager'
        'AbstractAsyncContextManager'
        (
            'collections.abc'
            'contextlib'
        )
        [Code]
            File Name: typing.py
            Object Name: _ProtocolMeta
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__instancecheck__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_ProtocolMeta'
                [Code]
                    File Name: typing.py
                    Object Name: __instancecheck__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'getattr'
                        '_allow_reckless_class_checks'
                        'TypeError'
                        '_is_callable_members_only'
                        'issubclass'
                        '__class__'
                        '_is_protocol'
                        'all'
                        '_get_protocol_attrs'
                        'super'
                        '__instancecheck__'
                    [Var Names]
                        'cls'
                        'instance'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                        'cls'
                        'instance'
                    [Constants]
                        None
                        '_is_protocol'
                        False
                        '_is_runtime_protocol'
                        2
                        (
                            'depth'
                        )
                        'Instance and class checks can only be used with @runtime_checkable protocols'
                        True
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 6
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                                'hasattr'
                                'callable'
                                'getattr'
                            [Var Names]
                                '.0'
                                'attr'
                            [Free Vars]
                                'cls'
                                'instance'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        24 (to 54)
                                6       STORE_FAST                      1: attr
                                8       LOAD_GLOBAL                     0: hasattr
                                10      LOAD_DEREF                      1: instance
                                12      LOAD_FAST                       1: attr
                                14      CALL_FUNCTION                   2
                                16      JUMP_IF_FALSE_OR_POP            24 (to 48)
                                18      LOAD_GLOBAL                     1: callable
                                20      LOAD_GLOBAL                     2: getattr
                                22      LOAD_DEREF                      0: cls
                                24      LOAD_FAST                       1: attr
                                26      LOAD_CONST                      0: None
                                28      CALL_FUNCTION                   3
                                30      CALL_FUNCTION                   1
                                32      UNARY_NOT                       
                                34      JUMP_IF_TRUE_OR_POP             24 (to 48)
                                36      LOAD_GLOBAL                     2: getattr
                                38      LOAD_DEREF                      1: instance
                                40      LOAD_FAST                       1: attr
                                42      CALL_FUNCTION                   2
                                44      LOAD_CONST                      0: None
                                46      IS_OP                           1 (is not)
                                48      YIELD_VALUE                     
                                50      POP_TOP                         
                                52      JUMP_ABSOLUTE                   2 (to 4)
                                54      LOAD_CONST                      0: None
                                56      RETURN_VALUE                    
                        '_ProtocolMeta.__instancecheck__.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getattr
                        2       LOAD_DEREF                      0: cls
                        4       LOAD_CONST                      1: '_is_protocol'
                        6       LOAD_CONST                      2: False
                        8       CALL_FUNCTION                   3
                        10      POP_JUMP_IF_FALSE               21 (to 42)
                        12      LOAD_GLOBAL                     0: getattr
                        14      LOAD_DEREF                      0: cls
                        16      LOAD_CONST                      3: '_is_runtime_protocol'
                        18      LOAD_CONST                      2: False
                        20      CALL_FUNCTION                   3
                        22      POP_JUMP_IF_TRUE                21 (to 42)
                        24      LOAD_GLOBAL                     1: _allow_reckless_class_checks
                        26      LOAD_CONST                      4: 2
                        28      LOAD_CONST                      5: ('depth',)
                        30      CALL_FUNCTION_KW                1
                        32      POP_JUMP_IF_TRUE                21 (to 42)
                        34      LOAD_GLOBAL                     2: TypeError
                        36      LOAD_CONST                      6: 'Instance and class checks can only be used with @runtime_checkable protocols'
                        38      CALL_FUNCTION                   1
                        40      RAISE_VARARGS                   1
                        42      LOAD_GLOBAL                     0: getattr
                        44      LOAD_DEREF                      0: cls
                        46      LOAD_CONST                      1: '_is_protocol'
                        48      LOAD_CONST                      2: False
                        50      CALL_FUNCTION                   3
                        52      POP_JUMP_IF_FALSE               31 (to 62)
                        54      LOAD_GLOBAL                     3: _is_callable_members_only
                        56      LOAD_DEREF                      0: cls
                        58      CALL_FUNCTION                   1
                        60      POP_JUMP_IF_FALSE               39 (to 78)
                        62      LOAD_GLOBAL                     4: issubclass
                        64      LOAD_DEREF                      1: instance
                        66      LOAD_ATTR                       5: __class__
                        68      LOAD_DEREF                      0: cls
                        70      CALL_FUNCTION                   2
                        72      POP_JUMP_IF_FALSE               39 (to 78)
                        74      LOAD_CONST                      7: True
                        76      RETURN_VALUE                    
                        78      LOAD_DEREF                      0: cls
                        80      LOAD_ATTR                       6: _is_protocol
                        82      POP_JUMP_IF_FALSE               58 (to 116)
                        84      LOAD_GLOBAL                     7: all
                        86      LOAD_CLOSURE                    0: cls
                        88      LOAD_CLOSURE                    1: instance
                        90      BUILD_TUPLE                     2
                        92      LOAD_CONST                      8: <CODE> <genexpr>
                        94      LOAD_CONST                      9: '_ProtocolMeta.__instancecheck__.<locals>.<genexpr>'
                        96      MAKE_FUNCTION                   8
                        98      LOAD_GLOBAL                     8: _get_protocol_attrs
                        100     LOAD_DEREF                      0: cls
                        102     CALL_FUNCTION                   1
                        104     GET_ITER                        
                        106     CALL_FUNCTION                   1
                        108     CALL_FUNCTION                   1
                        110     POP_JUMP_IF_FALSE               58 (to 116)
                        112     LOAD_CONST                      7: True
                        114     RETURN_VALUE                    
                        116     LOAD_GLOBAL                     9: super
                        118     CALL_FUNCTION                   0
                        120     LOAD_METHOD                     10: __instancecheck__
                        122     LOAD_DEREF                      1: instance
                        124     CALL_METHOD                     1
                        126     RETURN_VALUE                    
                '_ProtocolMeta.__instancecheck__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_ProtocolMeta'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CLOSURE                    0: __class__
                10      BUILD_TUPLE                     1
                12      LOAD_CONST                      1: <CODE> __instancecheck__
                14      LOAD_CONST                      2: '_ProtocolMeta.__instancecheck__'
                16      MAKE_FUNCTION                   8
                18      STORE_NAME                      3: __instancecheck__
                20      LOAD_CLOSURE                    0: __class__
                22      DUP_TOP                         
                24      STORE_NAME                      4: __classcell__
                26      RETURN_VALUE                    
        '_ProtocolMeta'
        [Code]
            File Name: typing.py
            Object Name: Protocol
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '_is_protocol'
                '_is_runtime_protocol'
                '__init_subclass__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'Protocol'
                'Base class for protocol classes.\n\n    Protocol classes are defined as::\n\n        class Proto(Protocol):\n            def meth(self) -> int:\n                ...\n\n    Such classes are primarily used with static type checkers that recognize\n    structural subtyping (static duck-typing), for example::\n\n        class C:\n            def meth(self) -> int:\n                return 0\n\n        def func(x: Proto) -> int:\n            return x.meth()\n\n        func(C())  # Passes static type check\n\n    See PEP 544 for details. Protocol classes decorated with\n    @typing.runtime_checkable act as simple-minded runtime protocols that check\n    only the presence of given attributes, ignoring their type signatures.\n    Protocol classes can be generic, they are defined as::\n\n        class GenProto(Protocol[T]):\n            def meth(self) -> T:\n                ...\n    '
                (
                )
                True
                False
                [Code]
                    File Name: typing.py
                    Object Name: __init_subclass__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                        'super'
                        '__init_subclass__'
                        '__dict__'
                        'get'
                        'any'
                        '__bases__'
                        '_is_protocol'
                        '__subclasshook__'
                        'object'
                        'Generic'
                        '__module__'
                        '_PROTO_ALLOWLIST'
                        '__name__'
                        'issubclass'
                        'TypeError'
                        '_no_init_or_replace_init'
                        '__init__'
                    [Var Names]
                        'cls'
                        'args'
                        'kwargs'
                        '_proto_hook'
                        'base'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                        'cls'
                    [Constants]
                        None
                        '_is_protocol'
                        False
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'Protocol'
                            [Var Names]
                                '.0'
                                'b'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: b
                                8       LOAD_FAST                       1: b
                                10      LOAD_GLOBAL                     0: Protocol
                                12      IS_OP                           0 (is)
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'Protocol.__init_subclass__.<locals>.<genexpr>'
                        [Code]
                            File Name: typing.py
                            Object Name: _proto_hook
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 4
                            Stack Size: 6
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '__dict__'
                                'get'
                                'NotImplemented'
                                'getattr'
                                '_allow_reckless_class_checks'
                                'TypeError'
                                '_is_callable_members_only'
                                'isinstance'
                                'type'
                                '_get_protocol_attrs'
                                '__mro__'
                                'collections'
                                'abc'
                                'Mapping'
                                'issubclass'
                                'Generic'
                                '_is_protocol'
                            [Var Names]
                                'other'
                                'attr'
                                'base'
                                'annotations'
                            [Free Vars]
                                'cls'
                            [Cell Vars]
                            [Constants]
                                None
                                '_is_protocol'
                                False
                                '_is_runtime_protocol'
                                'Instance and class checks can only be used with @runtime_checkable protocols'
                                "Protocols with non-method members don't support issubclass()"
                                'issubclass() arg 1 must be a class'
                                '__annotations__'
                                True
                            [Disassembly]
                                0       LOAD_DEREF                      0: cls
                                2       LOAD_ATTR                       0: __dict__
                                4       LOAD_METHOD                     1: get
                                6       LOAD_CONST                      1: '_is_protocol'
                                8       LOAD_CONST                      2: False
                                10      CALL_METHOD                     2
                                12      POP_JUMP_IF_TRUE                9 (to 18)
                                14      LOAD_GLOBAL                     2: NotImplemented
                                16      RETURN_VALUE                    
                                18      LOAD_GLOBAL                     3: getattr
                                20      LOAD_DEREF                      0: cls
                                22      LOAD_CONST                      3: '_is_runtime_protocol'
                                24      LOAD_CONST                      2: False
                                26      CALL_FUNCTION                   3
                                28      POP_JUMP_IF_TRUE                24 (to 48)
                                30      LOAD_GLOBAL                     4: _allow_reckless_class_checks
                                32      CALL_FUNCTION                   0
                                34      POP_JUMP_IF_FALSE               20 (to 40)
                                36      LOAD_GLOBAL                     2: NotImplemented
                                38      RETURN_VALUE                    
                                40      LOAD_GLOBAL                     5: TypeError
                                42      LOAD_CONST                      4: 'Instance and class checks can only be used with @runtime_checkable protocols'
                                44      CALL_FUNCTION                   1
                                46      RAISE_VARARGS                   1
                                48      LOAD_GLOBAL                     6: _is_callable_members_only
                                50      LOAD_DEREF                      0: cls
                                52      CALL_FUNCTION                   1
                                54      POP_JUMP_IF_TRUE                37 (to 74)
                                56      LOAD_GLOBAL                     4: _allow_reckless_class_checks
                                58      CALL_FUNCTION                   0
                                60      POP_JUMP_IF_FALSE               33 (to 66)
                                62      LOAD_GLOBAL                     2: NotImplemented
                                64      RETURN_VALUE                    
                                66      LOAD_GLOBAL                     5: TypeError
                                68      LOAD_CONST                      5: "Protocols with non-method members don't support issubclass()"
                                70      CALL_FUNCTION                   1
                                72      RAISE_VARARGS                   1
                                74      LOAD_GLOBAL                     7: isinstance
                                76      LOAD_FAST                       0: other
                                78      LOAD_GLOBAL                     8: type
                                80      CALL_FUNCTION                   2
                                82      POP_JUMP_IF_TRUE                46 (to 92)
                                84      LOAD_GLOBAL                     5: TypeError
                                86      LOAD_CONST                      6: 'issubclass() arg 1 must be a class'
                                88      CALL_FUNCTION                   1
                                90      RAISE_VARARGS                   1
                                92      LOAD_GLOBAL                     9: _get_protocol_attrs
                                94      LOAD_DEREF                      0: cls
                                96      CALL_FUNCTION                   1
                                98      GET_ITER                        
                                100     FOR_ITER                        59 (to 220)
                                102     STORE_FAST                      1: attr
                                104     LOAD_FAST                       0: other
                                106     LOAD_ATTR                       10: __mro__
                                108     GET_ITER                        
                                110     FOR_ITER                        49 (to 210)
                                112     STORE_FAST                      2: base
                                114     LOAD_FAST                       1: attr
                                116     LOAD_FAST                       2: base
                                118     LOAD_ATTR                       0: __dict__
                                120     CONTAINS_OP                     0 (in)
                                122     POP_JUMP_IF_FALSE               77 (to 154)
                                124     LOAD_FAST                       2: base
                                126     LOAD_ATTR                       0: __dict__
                                128     LOAD_FAST                       1: attr
                                130     BINARY_SUBSCR                   
                                132     LOAD_CONST                      0: None
                                134     IS_OP                           0 (is)
                                136     POP_JUMP_IF_FALSE               75 (to 150)
                                138     LOAD_GLOBAL                     2: NotImplemented
                                140     ROT_TWO                         
                                142     POP_TOP                         
                                144     ROT_TWO                         
                                146     POP_TOP                         
                                148     RETURN_VALUE                    
                                150     POP_TOP                         
                                152     JUMP_FORWARD                    32 (to 218)
                                154     LOAD_GLOBAL                     3: getattr
                                156     LOAD_FAST                       2: base
                                158     LOAD_CONST                      7: '__annotations__'
                                160     BUILD_MAP                       0
                                162     CALL_FUNCTION                   3
                                164     STORE_FAST                      3: annotations
                                166     LOAD_GLOBAL                     7: isinstance
                                168     LOAD_FAST                       3: annotations
                                170     LOAD_GLOBAL                     11: collections
                                172     LOAD_ATTR                       12: abc
                                174     LOAD_ATTR                       13: Mapping
                                176     CALL_FUNCTION                   2
                                178     POP_JUMP_IF_FALSE               104 (to 208)
                                180     LOAD_FAST                       1: attr
                                182     LOAD_FAST                       3: annotations
                                184     CONTAINS_OP                     0 (in)
                                186     POP_JUMP_IF_FALSE               104 (to 208)
                                188     LOAD_GLOBAL                     14: issubclass
                                190     LOAD_FAST                       0: other
                                192     LOAD_GLOBAL                     15: Generic
                                194     CALL_FUNCTION                   2
                                196     POP_JUMP_IF_FALSE               104 (to 208)
                                198     LOAD_FAST                       0: other
                                200     LOAD_ATTR                       16: _is_protocol
                                202     POP_JUMP_IF_FALSE               104 (to 208)
                                204     POP_TOP                         
                                206     JUMP_FORWARD                    5 (to 218)
                                208     JUMP_ABSOLUTE                   55 (to 110)
                                210     LOAD_GLOBAL                     2: NotImplemented
                                212     ROT_TWO                         
                                214     POP_TOP                         
                                216     RETURN_VALUE                    
                                218     JUMP_ABSOLUTE                   50 (to 100)
                                220     LOAD_CONST                      8: True
                                222     RETURN_VALUE                    
                        'Protocol.__init_subclass__.<locals>._proto_hook'
                        '__subclasshook__'
                        'Protocols can only inherit from other protocols, got %r'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_ATTR                       1: __init_subclass__
                        6       LOAD_FAST                       1: args
                        8       BUILD_MAP                       0
                        10      LOAD_FAST                       2: kwargs
                        12      DICT_MERGE                      1
                        14      CALL_FUNCTION_EX                1
                        16      POP_TOP                         
                        18      LOAD_DEREF                      0: cls
                        20      LOAD_ATTR                       2: __dict__
                        22      LOAD_METHOD                     3: get
                        24      LOAD_CONST                      1: '_is_protocol'
                        26      LOAD_CONST                      2: False
                        28      CALL_METHOD                     2
                        30      POP_JUMP_IF_TRUE                27 (to 54)
                        32      LOAD_GLOBAL                     4: any
                        34      LOAD_CONST                      3: <CODE> <genexpr>
                        36      LOAD_CONST                      4: 'Protocol.__init_subclass__.<locals>.<genexpr>'
                        38      MAKE_FUNCTION                   0
                        40      LOAD_DEREF                      0: cls
                        42      LOAD_ATTR                       5: __bases__
                        44      GET_ITER                        
                        46      CALL_FUNCTION                   1
                        48      CALL_FUNCTION                   1
                        50      LOAD_DEREF                      0: cls
                        52      STORE_ATTR                      6: _is_protocol
                        54      LOAD_CLOSURE                    0: cls
                        56      BUILD_TUPLE                     1
                        58      LOAD_CONST                      5: <CODE> _proto_hook
                        60      LOAD_CONST                      6: 'Protocol.__init_subclass__.<locals>._proto_hook'
                        62      MAKE_FUNCTION                   8
                        64      STORE_FAST                      3: _proto_hook
                        66      LOAD_CONST                      7: '__subclasshook__'
                        68      LOAD_DEREF                      0: cls
                        70      LOAD_ATTR                       2: __dict__
                        72      CONTAINS_OP                     1 (not in)
                        74      POP_JUMP_IF_FALSE               41 (to 82)
                        76      LOAD_FAST                       3: _proto_hook
                        78      LOAD_DEREF                      0: cls
                        80      STORE_ATTR                      7: __subclasshook__
                        82      LOAD_DEREF                      0: cls
                        84      LOAD_ATTR                       6: _is_protocol
                        86      POP_JUMP_IF_TRUE                46 (to 92)
                        88      LOAD_CONST                      0: None
                        90      RETURN_VALUE                    
                        92      LOAD_DEREF                      0: cls
                        94      LOAD_ATTR                       5: __bases__
                        96      GET_ITER                        
                        98      FOR_ITER                        35 (to 170)
                        100     STORE_FAST                      4: base
                        102     LOAD_FAST                       4: base
                        104     LOAD_GLOBAL                     8: object
                        106     LOAD_GLOBAL                     9: Generic
                        108     BUILD_TUPLE                     2
                        110     CONTAINS_OP                     0 (in)
                        112     POP_JUMP_IF_TRUE                84 (to 168)
                        114     LOAD_FAST                       4: base
                        116     LOAD_ATTR                       10: __module__
                        118     LOAD_GLOBAL                     11: _PROTO_ALLOWLIST
                        120     CONTAINS_OP                     0 (in)
                        122     POP_JUMP_IF_FALSE               70 (to 140)
                        124     LOAD_FAST                       4: base
                        126     LOAD_ATTR                       12: __name__
                        128     LOAD_GLOBAL                     11: _PROTO_ALLOWLIST
                        130     LOAD_FAST                       4: base
                        132     LOAD_ATTR                       10: __module__
                        134     BINARY_SUBSCR                   
                        136     CONTAINS_OP                     0 (in)
                        138     POP_JUMP_IF_TRUE                84 (to 168)
                        140     LOAD_GLOBAL                     13: issubclass
                        142     LOAD_FAST                       4: base
                        144     LOAD_GLOBAL                     9: Generic
                        146     CALL_FUNCTION                   2
                        148     POP_JUMP_IF_FALSE               78 (to 156)
                        150     LOAD_FAST                       4: base
                        152     LOAD_ATTR                       6: _is_protocol
                        154     POP_JUMP_IF_TRUE                84 (to 168)
                        156     LOAD_GLOBAL                     14: TypeError
                        158     LOAD_CONST                      8: 'Protocols can only inherit from other protocols, got %r'
                        160     LOAD_FAST                       4: base
                        162     BINARY_MODULO                   
                        164     CALL_FUNCTION                   1
                        166     RAISE_VARARGS                   1
                        168     JUMP_ABSOLUTE                   49 (to 98)
                        170     LOAD_GLOBAL                     15: _no_init_or_replace_init
                        172     LOAD_DEREF                      0: cls
                        174     STORE_ATTR                      16: __init__
                        176     LOAD_CONST                      0: None
                        178     RETURN_VALUE                    
                'Protocol.__init_subclass__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Protocol'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Base class for protocol classes.\n\n    Protocol classes are defined as::\n\n        class Proto(Protocol):\n            def meth(self) -> int:\n                ...\n\n    Such classes are primarily used with static type checkers that recognize\n    structural subtyping (static duck-typing), for example::\n\n        class C:\n            def meth(self) -> int:\n                return 0\n\n        def func(x: Proto) -> int:\n            return x.meth()\n\n        func(C())  # Passes static type check\n\n    See PEP 544 for details. Protocol classes decorated with\n    @typing.runtime_checkable act as simple-minded runtime protocols that check\n    only the presence of given attributes, ignoring their type signatures.\n    Protocol classes can be generic, they are defined as::\n\n        class GenProto(Protocol[T]):\n            def meth(self) -> T:\n                ...\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: True
                18      STORE_NAME                      5: _is_protocol
                20      LOAD_CONST                      4: False
                22      STORE_NAME                      6: _is_runtime_protocol
                24      LOAD_CLOSURE                    0: __class__
                26      BUILD_TUPLE                     1
                28      LOAD_CONST                      5: <CODE> __init_subclass__
                30      LOAD_CONST                      6: 'Protocol.__init_subclass__'
                32      MAKE_FUNCTION                   8
                34      STORE_NAME                      7: __init_subclass__
                36      LOAD_CLOSURE                    0: __class__
                38      DUP_TOP                         
                40      STORE_NAME                      8: __classcell__
                42      RETURN_VALUE                    
        'Protocol'
        (
            'metaclass'
        )
        [Code]
            File Name: typing.py
            Object Name: _AnnotatedAlias
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'copy_with'
                '__repr__'
                '__reduce__'
                '__eq__'
                '__hash__'
                '__getattr__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_AnnotatedAlias'
                "Runtime representation of an annotated type.\n\n    At its core 'Annotated[t, dec1, dec2, ...]' is an alias for the type 't'\n    with extra annotations. The alias behaves like a normal typing alias,\n    instantiating is the same as instantiating the underlying type, binding\n    it to types is also the same.\n    "
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'isinstance'
                        '_AnnotatedAlias'
                        '__metadata__'
                        '__origin__'
                        'super'
                        '__init__'
                    [Var Names]
                        'self'
                        'origin'
                        'metadata'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: origin
                        4       LOAD_GLOBAL                     1: _AnnotatedAlias
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               13 (to 26)
                        10      LOAD_FAST                       1: origin
                        12      LOAD_ATTR                       2: __metadata__
                        14      LOAD_FAST                       2: metadata
                        16      BINARY_ADD                      
                        18      STORE_FAST                      2: metadata
                        20      LOAD_FAST                       1: origin
                        22      LOAD_ATTR                       3: __origin__
                        24      STORE_FAST                      1: origin
                        26      LOAD_GLOBAL                     4: super
                        28      CALL_FUNCTION                   0
                        30      LOAD_METHOD                     5: __init__
                        32      LOAD_FAST                       1: origin
                        34      LOAD_FAST                       1: origin
                        36      CALL_METHOD                     2
                        38      POP_TOP                         
                        40      LOAD_FAST                       2: metadata
                        42      LOAD_FAST                       0: self
                        44      STORE_ATTR                      2: __metadata__
                        46      LOAD_CONST                      0: None
                        48      RETURN_VALUE                    
                '_AnnotatedAlias.__init__'
                [Code]
                    File Name: typing.py
                    Object Name: copy_with
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'len'
                        '_AnnotatedAlias'
                        '__metadata__'
                    [Var Names]
                        'self'
                        'params'
                        'new_type'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: len
                        2       LOAD_FAST                       1: params
                        4       CALL_FUNCTION                   1
                        6       LOAD_CONST                      1: 1
                        8       COMPARE_OP                      2 (==)
                        10      POP_JUMP_IF_TRUE                8 (to 16)
                        12      LOAD_ASSERTION_ERROR            
                        14      RAISE_VARARGS                   1
                        16      LOAD_FAST                       1: params
                        18      LOAD_CONST                      2: 0
                        20      BINARY_SUBSCR                   
                        22      STORE_FAST                      2: new_type
                        24      LOAD_GLOBAL                     1: _AnnotatedAlias
                        26      LOAD_FAST                       2: new_type
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       2: __metadata__
                        32      CALL_FUNCTION                   2
                        34      RETURN_VALUE                    
                '_AnnotatedAlias.copy_with'
                [Code]
                    File Name: typing.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'format'
                        '_type_repr'
                        '__origin__'
                        'join'
                        '__metadata__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'typing.Annotated[{}, {}]'
                        ', '
                        [Code]
                            File Name: typing.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'repr'
                            [Var Names]
                                '.0'
                                'a'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: a
                                8       LOAD_GLOBAL                     0: repr
                                10      LOAD_FAST                       1: a
                                12      CALL_FUNCTION                   1
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        '_AnnotatedAlias.__repr__.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_CONST                      1: 'typing.Annotated[{}, {}]'
                        2       LOAD_METHOD                     0: format
                        4       LOAD_GLOBAL                     1: _type_repr
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: __origin__
                        10      CALL_FUNCTION                   1
                        12      LOAD_CONST                      2: ', '
                        14      LOAD_METHOD                     3: join
                        16      LOAD_CONST                      3: <CODE> <genexpr>
                        18      LOAD_CONST                      4: '_AnnotatedAlias.__repr__.<locals>.<genexpr>'
                        20      MAKE_FUNCTION                   0
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       4: __metadata__
                        26      GET_ITER                        
                        28      CALL_FUNCTION                   1
                        30      CALL_METHOD                     1
                        32      CALL_METHOD                     2
                        34      RETURN_VALUE                    
                '_AnnotatedAlias.__repr__'
                [Code]
                    File Name: typing.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'operator'
                        'getitem'
                        'Annotated'
                        '__origin__'
                        '__metadata__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: operator
                        2       LOAD_ATTR                       1: getitem
                        4       LOAD_GLOBAL                     2: Annotated
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       3: __origin__
                        10      BUILD_TUPLE                     1
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       4: __metadata__
                        16      BINARY_ADD                      
                        18      BUILD_TUPLE                     2
                        20      BUILD_TUPLE                     2
                        22      RETURN_VALUE                    
                '_AnnotatedAlias.__reduce__'
                [Code]
                    File Name: typing.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        '_AnnotatedAlias'
                        'NotImplemented'
                        '__origin__'
                        '__metadata__'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: _AnnotatedAlias
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: __origin__
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       3: __origin__
                        22      COMPARE_OP                      2 (==)
                        24      JUMP_IF_FALSE_OR_POP            18 (to 36)
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       4: __metadata__
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       4: __metadata__
                        34      COMPARE_OP                      2 (==)
                        36      RETURN_VALUE                    
                '_AnnotatedAlias.__eq__'
                [Code]
                    File Name: typing.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        '__origin__'
                        '__metadata__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: __origin__
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: __metadata__
                        10      BUILD_TUPLE                     2
                        12      CALL_FUNCTION                   1
                        14      RETURN_VALUE                    
                '_AnnotatedAlias.__hash__'
                [Code]
                    File Name: typing.py
                    Object Name: __getattr__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '__getattr__'
                    [Var Names]
                        'self'
                        'attr'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        frozenset({
                            '__name__'
                            '__qualname__'
                        })
                        'Annotated'
                    [Disassembly]
                        0       LOAD_FAST                       1: attr
                        2       LOAD_CONST                      1: frozenset({'__name__', '__qualname__'})
                        4       CONTAINS_OP                     0 (in)
                        6       POP_JUMP_IF_FALSE               6 (to 12)
                        8       LOAD_CONST                      2: 'Annotated'
                        10      RETURN_VALUE                    
                        12      LOAD_GLOBAL                     0: super
                        14      CALL_FUNCTION                   0
                        16      LOAD_METHOD                     1: __getattr__
                        18      LOAD_FAST                       1: attr
                        20      CALL_METHOD                     1
                        22      RETURN_VALUE                    
                '_AnnotatedAlias.__getattr__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_AnnotatedAlias'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Runtime representation of an annotated type.\n\n    At its core 'Annotated[t, dec1, dec2, ...]' is an alias for the type 't'\n    with extra annotations. The alias behaves like a normal typing alias,\n    instantiating is the same as instantiating the underlying type, binding\n    it to types is also the same.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CLOSURE                    0: __class__
                14      BUILD_TUPLE                     1
                16      LOAD_CONST                      2: <CODE> __init__
                18      LOAD_CONST                      3: '_AnnotatedAlias.__init__'
                20      MAKE_FUNCTION                   8
                22      STORE_NAME                      4: __init__
                24      LOAD_CONST                      4: <CODE> copy_with
                26      LOAD_CONST                      5: '_AnnotatedAlias.copy_with'
                28      MAKE_FUNCTION                   0
                30      STORE_NAME                      5: copy_with
                32      LOAD_CONST                      6: <CODE> __repr__
                34      LOAD_CONST                      7: '_AnnotatedAlias.__repr__'
                36      MAKE_FUNCTION                   0
                38      STORE_NAME                      6: __repr__
                40      LOAD_CONST                      8: <CODE> __reduce__
                42      LOAD_CONST                      9: '_AnnotatedAlias.__reduce__'
                44      MAKE_FUNCTION                   0
                46      STORE_NAME                      7: __reduce__
                48      LOAD_CONST                      10: <CODE> __eq__
                50      LOAD_CONST                      11: '_AnnotatedAlias.__eq__'
                52      MAKE_FUNCTION                   0
                54      STORE_NAME                      8: __eq__
                56      LOAD_CONST                      12: <CODE> __hash__
                58      LOAD_CONST                      13: '_AnnotatedAlias.__hash__'
                60      MAKE_FUNCTION                   0
                62      STORE_NAME                      9: __hash__
                64      LOAD_CLOSURE                    0: __class__
                66      BUILD_TUPLE                     1
                68      LOAD_CONST                      14: <CODE> __getattr__
                70      LOAD_CONST                      15: '_AnnotatedAlias.__getattr__'
                72      MAKE_FUNCTION                   8
                74      STORE_NAME                      10: __getattr__
                76      LOAD_CLOSURE                    0: __class__
                78      DUP_TOP                         
                80      STORE_NAME                      11: __classcell__
                82      RETURN_VALUE                    
        '_AnnotatedAlias'
        [Code]
            File Name: typing.py
            Object Name: Annotated
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__new__'
                '_tp_cache'
                '__class_getitem__'
                '__init_subclass__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Annotated'
                "Add context specific metadata to a type.\n\n    Example: Annotated[int, runtime_check.Unsigned] indicates to the\n    hypothetical runtime_check module that this type is an unsigned int.\n    Every other consumer of this type can ignore this metadata and treat\n    this type as int.\n\n    The first argument to Annotated must be a valid type.\n\n    Details:\n\n    - It's an error to call `Annotated` with less than two arguments.\n    - Nested Annotated are flattened::\n\n        Annotated[Annotated[T, Ann1, Ann2], Ann3] == Annotated[T, Ann1, Ann2, Ann3]\n\n    - Instantiating an annotated type is equivalent to instantiating the\n    underlying type::\n\n        Annotated[C, Ann1](5) == C(5)\n\n    - Annotated can be used as a generic type alias::\n\n        Optimized = Annotated[T, runtime.Optimize()]\n        Optimized[int] == Annotated[int, runtime.Optimize()]\n\n        OptimizedList = Annotated[List[T], runtime.Optimize()]\n        OptimizedList[int] == Annotated[List[int], runtime.Optimize()]\n    "
                (
                )
                [Code]
                    File Name: typing.py
                    Object Name: __new__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'TypeError'
                    [Var Names]
                        'cls'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Type Annotated cannot be instantiated.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: TypeError
                        2       LOAD_CONST                      1: 'Type Annotated cannot be instantiated.'
                        4       CALL_FUNCTION                   1
                        6       RAISE_VARARGS                   1
                'Annotated.__new__'
                [Code]
                    File Name: typing.py
                    Object Name: __class_getitem__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'tuple'
                        'len'
                        'TypeError'
                        '_type_check'
                        '_AnnotatedAlias'
                    [Var Names]
                        'cls'
                        'params'
                        'msg'
                        'origin'
                        'metadata'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        2
                        'Annotated[...] should be used with at least two arguments (a type and an annotation).'
                        'Annotated[t, ...]: t must be a type.'
                        0
                        True
                        (
                            'allow_special_forms'
                        )
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: params
                        4       LOAD_GLOBAL                     1: tuple
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               11 (to 22)
                        10      LOAD_GLOBAL                     2: len
                        12      LOAD_FAST                       1: params
                        14      CALL_FUNCTION                   1
                        16      LOAD_CONST                      1: 2
                        18      COMPARE_OP                      0 (<)
                        20      POP_JUMP_IF_FALSE               15 (to 30)
                        22      LOAD_GLOBAL                     3: TypeError
                        24      LOAD_CONST                      2: 'Annotated[...] should be used with at least two arguments (a type and an annotation).'
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      LOAD_CONST                      3: 'Annotated[t, ...]: t must be a type.'
                        32      STORE_FAST                      2: msg
                        34      LOAD_GLOBAL                     4: _type_check
                        36      LOAD_FAST                       1: params
                        38      LOAD_CONST                      4: 0
                        40      BINARY_SUBSCR                   
                        42      LOAD_FAST                       2: msg
                        44      LOAD_CONST                      5: True
                        46      LOAD_CONST                      6: ('allow_special_forms',)
                        48      CALL_FUNCTION_KW                3
                        50      STORE_FAST                      3: origin
                        52      LOAD_GLOBAL                     1: tuple
                        54      LOAD_FAST                       1: params
                        56      LOAD_CONST                      7: 1
                        58      LOAD_CONST                      0: None
                        60      BUILD_SLICE                     2
                        62      BINARY_SUBSCR                   
                        64      CALL_FUNCTION                   1
                        66      STORE_FAST                      4: metadata
                        68      LOAD_GLOBAL                     5: _AnnotatedAlias
                        70      LOAD_FAST                       3: origin
                        72      LOAD_FAST                       4: metadata
                        74      CALL_FUNCTION                   2
                        76      RETURN_VALUE                    
                'Annotated.__class_getitem__'
                [Code]
                    File Name: typing.py
                    Object Name: __init_subclass__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        'TypeError'
                        'format'
                        '__module__'
                    [Var Names]
                        'cls'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'Cannot subclass {}.Annotated'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: TypeError
                        2       LOAD_CONST                      1: 'Cannot subclass {}.Annotated'
                        4       LOAD_METHOD                     1: format
                        6       LOAD_FAST                       0: cls
                        8       LOAD_ATTR                       2: __module__
                        10      CALL_METHOD                     1
                        12      CALL_FUNCTION                   1
                        14      RAISE_VARARGS                   1
                'Annotated.__init_subclass__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Annotated'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Add context specific metadata to a type.\n\n    Example: Annotated[int, runtime_check.Unsigned] indicates to the\n    hypothetical runtime_check module that this type is an unsigned int.\n    Every other consumer of this type can ignore this metadata and treat\n    this type as int.\n\n    The first argument to Annotated must be a valid type.\n\n    Details:\n\n    - It's an error to call `Annotated` with less than two arguments.\n    - Nested Annotated are flattened::\n\n        Annotated[Annotated[T, Ann1, Ann2], Ann3] == Annotated[T, Ann1, Ann2, Ann3]\n\n    - Instantiating an annotated type is equivalent to instantiating the\n    underlying type::\n\n        Annotated[C, Ann1](5) == C(5)\n\n    - Annotated can be used as a generic type alias::\n\n        Optimized = Annotated[T, runtime.Optimize()]\n        Optimized[int] == Annotated[int, runtime.Optimize()]\n\n        OptimizedList = Annotated[List[T], runtime.Optimize()]\n        OptimizedList[int] == Annotated[List[int], runtime.Optimize()]\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: <CODE> __new__
                18      LOAD_CONST                      4: 'Annotated.__new__'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      5: __new__
                24      LOAD_NAME                       6: _tp_cache
                26      LOAD_CONST                      5: <CODE> __class_getitem__
                28      LOAD_CONST                      6: 'Annotated.__class_getitem__'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      7: __class_getitem__
                36      LOAD_CONST                      7: <CODE> __init_subclass__
                38      LOAD_CONST                      8: 'Annotated.__init_subclass__'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      8: __init_subclass__
                44      LOAD_CONST                      9: None
                46      RETURN_VALUE                    
        'Annotated'
        [Code]
            File Name: typing.py
            Object Name: runtime_checkable
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'issubclass'
                'Generic'
                '_is_protocol'
                'TypeError'
                '_is_runtime_protocol'
            [Var Names]
                'cls'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Mark a protocol class as a runtime protocol.\n\n    Such protocol can be used with isinstance() and issubclass().\n    Raise TypeError if applied to a non-protocol class.\n    This allows a simple-minded structural check very similar to\n    one trick ponies in collections.abc such as Iterable.\n    For example::\n\n        @runtime_checkable\n        class Closable(Protocol):\n            def close(self): ...\n\n        assert isinstance(open('/some/file'), Closable)\n\n    Warning: this will check only the presence of the required methods,\n    not their type signatures!\n    "
                '@runtime_checkable can be only applied to protocol classes, got %r'
                True
            [Disassembly]
                0       LOAD_GLOBAL                     0: issubclass
                2       LOAD_FAST                       0: cls
                4       LOAD_GLOBAL                     1: Generic
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               8 (to 16)
                10      LOAD_FAST                       0: cls
                12      LOAD_ATTR                       2: _is_protocol
                14      POP_JUMP_IF_TRUE                14 (to 28)
                16      LOAD_GLOBAL                     3: TypeError
                18      LOAD_CONST                      1: '@runtime_checkable can be only applied to protocol classes, got %r'
                20      LOAD_FAST                       0: cls
                22      BINARY_MODULO                   
                24      CALL_FUNCTION                   1
                26      RAISE_VARARGS                   1
                28      LOAD_CONST                      2: True
                30      LOAD_FAST                       0: cls
                32      STORE_ATTR                      4: _is_runtime_protocol
                34      LOAD_FAST                       0: cls
                36      RETURN_VALUE                    
        'runtime_checkable'
        [Code]
            File Name: typing.py
            Object Name: cast
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'typ'
                'val'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Cast a value to a type.\n\n    This returns the value unchanged.  To the type checker this\n    signals that the return value has the designated type, but at\n    runtime we intentionally don't check anything (we want this\n    to be as fast as possible).\n    "
            [Disassembly]
                0       LOAD_FAST                       1: val
                2       RETURN_VALUE                    
        'cast'
        [Code]
            File Name: typing.py
            Object Name: _get_defaults
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 10
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '__code__'
                'AttributeError'
                'co_argcount'
                'co_varnames'
                '__defaults__'
                '__kwdefaults__'
                'dict'
                'len'
                'zip'
            [Var Names]
                'func'
                'code'
                'pos_count'
                'arg_names'
                'defaults'
                'kwdefaults'
                'res'
                'pos_offset'
                'name'
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Internal helper to extract the default arguments, by name.'
                None
                (
                )
            [Disassembly]
                0       SETUP_FINALLY                   5 (to 12)
                2       LOAD_FAST                       0: func
                4       LOAD_ATTR                       0: __code__
                6       STORE_FAST                      1: code
                8       POP_BLOCK                       
                10      JUMP_FORWARD                    11 (to 34)
                12      DUP_TOP                         
                14      LOAD_GLOBAL                     1: AttributeError
                16      JUMP_IF_NOT_EXC_MATCH           16 (to 32)
                18      POP_TOP                         
                20      POP_TOP                         
                22      POP_TOP                         
                24      BUILD_MAP                       0
                26      ROT_FOUR                        
                28      POP_EXCEPT                      
                30      RETURN_VALUE                    
                32      RERAISE                         0
                34      LOAD_FAST                       1: code
                36      LOAD_ATTR                       2: co_argcount
                38      STORE_FAST                      2: pos_count
                40      LOAD_FAST                       1: code
                42      LOAD_ATTR                       3: co_varnames
                44      STORE_FAST                      3: arg_names
                46      LOAD_FAST                       3: arg_names
                48      LOAD_CONST                      1: None
                50      LOAD_FAST                       2: pos_count
                52      BUILD_SLICE                     2
                54      BINARY_SUBSCR                   
                56      STORE_FAST                      3: arg_names
                58      LOAD_FAST                       0: func
                60      LOAD_ATTR                       4: __defaults__
                62      JUMP_IF_TRUE_OR_POP             33 (to 66)
                64      LOAD_CONST                      2: ()
                66      STORE_FAST                      4: defaults
                68      LOAD_FAST                       0: func
                70      LOAD_ATTR                       5: __kwdefaults__
                72      STORE_FAST                      5: kwdefaults
                74      LOAD_FAST                       5: kwdefaults
                76      POP_JUMP_IF_FALSE               43 (to 86)
                78      LOAD_GLOBAL                     6: dict
                80      LOAD_FAST                       5: kwdefaults
                82      CALL_FUNCTION                   1
                84      JUMP_FORWARD                    1 (to 88)
                86      BUILD_MAP                       0
                88      STORE_FAST                      6: res
                90      LOAD_FAST                       2: pos_count
                92      LOAD_GLOBAL                     7: len
                94      LOAD_FAST                       4: defaults
                96      CALL_FUNCTION                   1
                98      BINARY_SUBTRACT                 
                100     STORE_FAST                      7: pos_offset
                102     LOAD_GLOBAL                     8: zip
                104     LOAD_FAST                       3: arg_names
                106     LOAD_FAST                       7: pos_offset
                108     LOAD_CONST                      1: None
                110     BUILD_SLICE                     2
                112     BINARY_SUBSCR                   
                114     LOAD_FAST                       4: defaults
                116     CALL_FUNCTION                   2
                118     GET_ITER                        
                120     FOR_ITER                        14 (to 150)
                122     UNPACK_SEQUENCE                 2
                124     STORE_FAST                      8: name
                126     STORE_FAST                      9: value
                128     LOAD_FAST                       8: name
                130     LOAD_FAST                       6: res
                132     CONTAINS_OP                     1 (not in)
                134     POP_JUMP_IF_TRUE                70 (to 140)
                136     LOAD_ASSERTION_ERROR            
                138     RAISE_VARARGS                   1
                140     LOAD_FAST                       9: value
                142     LOAD_FAST                       6: res
                144     LOAD_FAST                       8: name
                146     STORE_SUBSCR                    
                148     JUMP_ABSOLUTE                   60 (to 120)
                150     LOAD_FAST                       6: res
                152     RETURN_VALUE                    
        '_get_defaults'
        [Code]
            File Name: typing.py
            Object Name: get_type_hints
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 13
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getattr'
                'isinstance'
                'type'
                'reversed'
                '__mro__'
                'sys'
                'modules'
                'get'
                '__module__'
                '__dict__'
                'types'
                'GetSetDescriptorType'
                'dict'
                'vars'
                'items'
                'str'
                'ForwardRef'
                '_eval_type'
                'ModuleType'
                'hasattr'
                '__wrapped__'
                '_allowed_types'
                'TypeError'
                'format'
                '_get_defaults'
                'Optional'
            [Var Names]
                'obj'
                'globalns'
                'localns'
                'include_extras'
                'hints'
                'base'
                'base_globals'
                'ann'
                'base_locals'
                'name'
                'value'
                'nsobj'
                'defaults'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Return type hints for an object.\n\n    This is often the same as obj.__annotations__, but it handles\n    forward references encoded as string literals, adds Optional[t] if a\n    default value equal to None is set and recursively replaces all\n    'Annotated[T, ...]' with 'T' (unless 'include_extras=True').\n\n    The argument may be a module, class, method, or function. The annotations\n    are returned as a dictionary. For classes, annotations include also\n    inherited members.\n\n    TypeError is raised if the argument is not of a type that can contain\n    annotations, and an empty dictionary is returned if no annotations are\n    present.\n\n    BEWARE -- the behavior of globalns and localns is counterintuitive\n    (unless you are familiar with how eval() and exec() work).  The\n    search order is locals first, then globals.\n\n    - If no dict arguments are passed, an attempt is made to use the\n      globals from obj (or the respective module's globals for classes),\n      and these are also used as the locals.  If the object does not appear\n      to have globals, an empty dictionary is used.  For classes, the search\n      order is globals first then locals.\n\n    - If one dict argument is passed, it is used for both globals and\n      locals.\n\n    - If two dict arguments are passed, they specify globals and\n      locals, respectively.\n    "
                '__no_type_check__'
                None
                '__dict__'
                '__annotations__'
                False
                True
                (
                    'is_argument'
                    'is_class'
                )
                [Code]
                    File Name: typing.py
                    Object Name: <dictcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        '_strip_annotations'
                    [Var Names]
                        '.0'
                        'k'
                        't'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_MAP                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        9 (to 24)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: k
                        10      STORE_FAST                      2: t
                        12      LOAD_FAST                       1: k
                        14      LOAD_GLOBAL                     0: _strip_annotations
                        16      LOAD_FAST                       2: t
                        18      CALL_FUNCTION                   1
                        20      MAP_ADD                         2
                        22      JUMP_ABSOLUTE                   2 (to 4)
                        24      RETURN_VALUE                    
                'get_type_hints.<locals>.<dictcomp>'
                '__wrapped__'
                '__globals__'
                '{!r} is not a module, class, method, or function.'
                [Code]
                    File Name: typing.py
                    Object Name: <dictcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        '_strip_annotations'
                    [Var Names]
                        '.0'
                        'k'
                        't'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_MAP                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        9 (to 24)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: k
                        10      STORE_FAST                      2: t
                        12      LOAD_FAST                       1: k
                        14      LOAD_GLOBAL                     0: _strip_annotations
                        16      LOAD_FAST                       2: t
                        18      CALL_FUNCTION                   1
                        20      MAP_ADD                         2
                        22      JUMP_ABSOLUTE                   2 (to 4)
                        24      RETURN_VALUE                    
            [Disassembly]
                0       LOAD_GLOBAL                     0: getattr
                2       LOAD_FAST                       0: obj
                4       LOAD_CONST                      1: '__no_type_check__'
                6       LOAD_CONST                      2: None
                8       CALL_FUNCTION                   3
                10      POP_JUMP_IF_FALSE               8 (to 16)
                12      BUILD_MAP                       0
                14      RETURN_VALUE                    
                16      LOAD_GLOBAL                     1: isinstance
                18      LOAD_FAST                       0: obj
                20      LOAD_GLOBAL                     2: type
                22      CALL_FUNCTION                   2
                24      POP_JUMP_IF_FALSE               134 (to 268)
                26      BUILD_MAP                       0
                28      STORE_FAST                      4: hints
                30      LOAD_GLOBAL                     3: reversed
                32      LOAD_FAST                       0: obj
                34      LOAD_ATTR                       4: __mro__
                36      CALL_FUNCTION                   1
                38      GET_ITER                        
                40      FOR_ITER                        100 (to 242)
                42      STORE_FAST                      5: base
                44      LOAD_FAST                       1: globalns
                46      LOAD_CONST                      2: None
                48      IS_OP                           0 (is)
                50      POP_JUMP_IF_FALSE               39 (to 78)
                52      LOAD_GLOBAL                     0: getattr
                54      LOAD_GLOBAL                     5: sys
                56      LOAD_ATTR                       6: modules
                58      LOAD_METHOD                     7: get
                60      LOAD_FAST                       5: base
                62      LOAD_ATTR                       8: __module__
                64      LOAD_CONST                      2: None
                66      CALL_METHOD                     2
                68      LOAD_CONST                      3: '__dict__'
                70      BUILD_MAP                       0
                72      CALL_FUNCTION                   3
                74      STORE_FAST                      6: base_globals
                76      JUMP_FORWARD                    2 (to 82)
                78      LOAD_FAST                       1: globalns
                80      STORE_FAST                      6: base_globals
                82      LOAD_FAST                       5: base
                84      LOAD_ATTR                       9: __dict__
                86      LOAD_METHOD                     7: get
                88      LOAD_CONST                      4: '__annotations__'
                90      BUILD_MAP                       0
                92      CALL_METHOD                     2
                94      STORE_FAST                      7: ann
                96      LOAD_GLOBAL                     1: isinstance
                98      LOAD_FAST                       7: ann
                100     LOAD_GLOBAL                     10: types
                102     LOAD_ATTR                       11: GetSetDescriptorType
                104     CALL_FUNCTION                   2
                106     POP_JUMP_IF_FALSE               56 (to 112)
                108     BUILD_MAP                       0
                110     STORE_FAST                      7: ann
                112     LOAD_FAST                       2: localns
                114     LOAD_CONST                      2: None
                116     IS_OP                           0 (is)
                118     POP_JUMP_IF_FALSE               66 (to 132)
                120     LOAD_GLOBAL                     12: dict
                122     LOAD_GLOBAL                     13: vars
                124     LOAD_FAST                       5: base
                126     CALL_FUNCTION                   1
                128     CALL_FUNCTION                   1
                130     JUMP_FORWARD                    1 (to 134)
                132     LOAD_FAST                       2: localns
                134     STORE_FAST                      8: base_locals
                136     LOAD_FAST                       2: localns
                138     LOAD_CONST                      2: None
                140     IS_OP                           0 (is)
                142     POP_JUMP_IF_FALSE               81 (to 162)
                144     LOAD_FAST                       1: globalns
                146     LOAD_CONST                      2: None
                148     IS_OP                           0 (is)
                150     POP_JUMP_IF_FALSE               81 (to 162)
                152     LOAD_FAST                       8: base_locals
                154     LOAD_FAST                       6: base_globals
                156     ROT_TWO                         
                158     STORE_FAST                      6: base_globals
                160     STORE_FAST                      8: base_locals
                162     LOAD_FAST                       7: ann
                164     LOAD_METHOD                     14: items
                166     CALL_METHOD                     0
                168     GET_ITER                        
                170     FOR_ITER                        34 (to 240)
                172     UNPACK_SEQUENCE                 2
                174     STORE_FAST                      9: name
                176     STORE_FAST                      10: value
                178     LOAD_FAST                       10: value
                180     LOAD_CONST                      2: None
                182     IS_OP                           0 (is)
                184     POP_JUMP_IF_FALSE               97 (to 194)
                186     LOAD_GLOBAL                     2: type
                188     LOAD_CONST                      2: None
                190     CALL_FUNCTION                   1
                192     STORE_FAST                      10: value
                194     LOAD_GLOBAL                     1: isinstance
                196     LOAD_FAST                       10: value
                198     LOAD_GLOBAL                     15: str
                200     CALL_FUNCTION                   2
                202     POP_JUMP_IF_FALSE               109 (to 218)
                204     LOAD_GLOBAL                     16: ForwardRef
                206     LOAD_FAST                       10: value
                208     LOAD_CONST                      5: False
                210     LOAD_CONST                      6: True
                212     LOAD_CONST                      7: ('is_argument', 'is_class')
                214     CALL_FUNCTION_KW                3
                216     STORE_FAST                      10: value
                218     LOAD_GLOBAL                     17: _eval_type
                220     LOAD_FAST                       10: value
                222     LOAD_FAST                       6: base_globals
                224     LOAD_FAST                       8: base_locals
                226     CALL_FUNCTION                   3
                228     STORE_FAST                      10: value
                230     LOAD_FAST                       10: value
                232     LOAD_FAST                       4: hints
                234     LOAD_FAST                       9: name
                236     STORE_SUBSCR                    
                238     JUMP_ABSOLUTE                   85 (to 170)
                240     JUMP_ABSOLUTE                   20 (to 40)
                242     LOAD_FAST                       3: include_extras
                244     POP_JUMP_IF_FALSE               125 (to 250)
                246     LOAD_FAST                       4: hints
                248     RETURN_VALUE                    
                250     LOAD_CONST                      8: <CODE> <dictcomp>
                252     LOAD_CONST                      9: 'get_type_hints.<locals>.<dictcomp>'
                254     MAKE_FUNCTION                   0
                256     LOAD_FAST                       4: hints
                258     LOAD_METHOD                     14: items
                260     CALL_METHOD                     0
                262     GET_ITER                        
                264     CALL_FUNCTION                   1
                266     RETURN_VALUE                    
                268     LOAD_FAST                       1: globalns
                270     LOAD_CONST                      2: None
                272     IS_OP                           0 (is)
                274     POP_JUMP_IF_FALSE               176 (to 352)
                276     LOAD_GLOBAL                     1: isinstance
                278     LOAD_FAST                       0: obj
                280     LOAD_GLOBAL                     10: types
                282     LOAD_ATTR                       18: ModuleType
                284     CALL_FUNCTION                   2
                286     POP_JUMP_IF_FALSE               148 (to 296)
                288     LOAD_FAST                       0: obj
                290     LOAD_ATTR                       9: __dict__
                292     STORE_FAST                      1: globalns
                294     JUMP_FORWARD                    21 (to 338)
                296     LOAD_FAST                       0: obj
                298     STORE_FAST                      11: nsobj
                300     LOAD_GLOBAL                     19: hasattr
                302     LOAD_FAST                       11: nsobj
                304     LOAD_CONST                      10: '__wrapped__'
                306     CALL_FUNCTION                   2
                308     POP_JUMP_IF_FALSE               163 (to 326)
                310     LOAD_FAST                       11: nsobj
                312     LOAD_ATTR                       20: __wrapped__
                314     STORE_FAST                      11: nsobj
                316     LOAD_GLOBAL                     19: hasattr
                318     LOAD_FAST                       11: nsobj
                320     LOAD_CONST                      10: '__wrapped__'
                322     CALL_FUNCTION                   2
                324     POP_JUMP_IF_TRUE                155 (to 310)
                326     LOAD_GLOBAL                     0: getattr
                328     LOAD_FAST                       11: nsobj
                330     LOAD_CONST                      11: '__globals__'
                332     BUILD_MAP                       0
                334     CALL_FUNCTION                   3
                336     STORE_FAST                      1: globalns
                338     LOAD_FAST                       2: localns
                340     LOAD_CONST                      2: None
                342     IS_OP                           0 (is)
                344     POP_JUMP_IF_FALSE               175 (to 350)
                346     LOAD_FAST                       1: globalns
                348     STORE_FAST                      2: localns
                350     JUMP_FORWARD                    6 (to 364)
                352     LOAD_FAST                       2: localns
                354     LOAD_CONST                      2: None
                356     IS_OP                           0 (is)
                358     POP_JUMP_IF_FALSE               182 (to 364)
                360     LOAD_FAST                       1: globalns
                362     STORE_FAST                      2: localns
                364     LOAD_GLOBAL                     0: getattr
                366     LOAD_FAST                       0: obj
                368     LOAD_CONST                      4: '__annotations__'
                370     LOAD_CONST                      2: None
                372     CALL_FUNCTION                   3
                374     STORE_FAST                      4: hints
                376     LOAD_FAST                       4: hints
                378     LOAD_CONST                      2: None
                380     IS_OP                           0 (is)
                382     POP_JUMP_IF_FALSE               206 (to 412)
                384     LOAD_GLOBAL                     1: isinstance
                386     LOAD_FAST                       0: obj
                388     LOAD_GLOBAL                     21: _allowed_types
                390     CALL_FUNCTION                   2
                392     POP_JUMP_IF_FALSE               199 (to 398)
                394     BUILD_MAP                       0
                396     RETURN_VALUE                    
                398     LOAD_GLOBAL                     22: TypeError
                400     LOAD_CONST                      12: '{!r} is not a module, class, method, or function.'
                402     LOAD_METHOD                     23: format
                404     LOAD_FAST                       0: obj
                406     CALL_METHOD                     1
                408     CALL_FUNCTION                   1
                410     RAISE_VARARGS                   1
                412     LOAD_GLOBAL                     24: _get_defaults
                414     LOAD_FAST                       0: obj
                416     CALL_FUNCTION                   1
                418     STORE_FAST                      12: defaults
                420     LOAD_GLOBAL                     12: dict
                422     LOAD_FAST                       4: hints
                424     CALL_FUNCTION                   1
                426     STORE_FAST                      4: hints
                428     LOAD_FAST                       4: hints
                430     LOAD_METHOD                     14: items
                432     CALL_METHOD                     0
                434     GET_ITER                        
                436     FOR_ITER                        55 (to 548)
                438     UNPACK_SEQUENCE                 2
                440     STORE_FAST                      9: name
                442     STORE_FAST                      10: value
                444     LOAD_FAST                       10: value
                446     LOAD_CONST                      2: None
                448     IS_OP                           0 (is)
                450     POP_JUMP_IF_FALSE               230 (to 460)
                452     LOAD_GLOBAL                     2: type
                454     LOAD_CONST                      2: None
                456     CALL_FUNCTION                   1
                458     STORE_FAST                      10: value
                460     LOAD_GLOBAL                     1: isinstance
                462     LOAD_FAST                       10: value
                464     LOAD_GLOBAL                     15: str
                466     CALL_FUNCTION                   2
                468     POP_JUMP_IF_FALSE               247 (to 494)
                470     LOAD_GLOBAL                     16: ForwardRef
                472     LOAD_FAST                       10: value
                474     LOAD_GLOBAL                     1: isinstance
                476     LOAD_FAST                       0: obj
                478     LOAD_GLOBAL                     10: types
                480     LOAD_ATTR                       18: ModuleType
                482     CALL_FUNCTION                   2
                484     UNARY_NOT                       
                486     LOAD_CONST                      5: False
                488     LOAD_CONST                      7: ('is_argument', 'is_class')
                490     CALL_FUNCTION_KW                3
                492     STORE_FAST                      10: value
                494     LOAD_GLOBAL                     17: _eval_type
                496     LOAD_FAST                       10: value
                498     LOAD_FAST                       1: globalns
                500     LOAD_FAST                       2: localns
                502     CALL_FUNCTION                   3
                504     STORE_FAST                      10: value
                506     LOAD_FAST                       9: name
                508     LOAD_FAST                       12: defaults
                510     CONTAINS_OP                     0 (in)
                512     POP_JUMP_IF_FALSE               269 (to 538)
                516     LOAD_FAST                       12: defaults
                518     LOAD_FAST                       9: name
                520     BINARY_SUBSCR                   
                522     LOAD_CONST                      2: None
                524     IS_OP                           0 (is)
                526     POP_JUMP_IF_FALSE               269 (to 538)
                530     LOAD_GLOBAL                     25: Optional
                532     LOAD_FAST                       10: value
                534     BINARY_SUBSCR                   
                536     STORE_FAST                      10: value
                538     LOAD_FAST                       10: value
                540     LOAD_FAST                       4: hints
                542     LOAD_FAST                       9: name
                544     STORE_SUBSCR                    
                546     JUMP_ABSOLUTE                   218 (to 436)
                548     LOAD_FAST                       3: include_extras
                550     POP_JUMP_IF_FALSE               279 (to 558)
                554     LOAD_FAST                       4: hints
                556     RETURN_VALUE                    
                558     LOAD_CONST                      13: <CODE> <dictcomp>
                560     LOAD_CONST                      9: 'get_type_hints.<locals>.<dictcomp>'
                562     MAKE_FUNCTION                   0
                564     LOAD_FAST                       4: hints
                566     LOAD_METHOD                     14: items
                568     CALL_METHOD                     0
                570     GET_ITER                        
                572     CALL_FUNCTION                   1
                574     RETURN_VALUE                    
        'get_type_hints'
        [Code]
            File Name: typing.py
            Object Name: _strip_annotations
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                '_AnnotatedAlias'
                '_strip_annotations'
                '__origin__'
                '_GenericAlias'
                'tuple'
                '__args__'
                'copy_with'
                'GenericAlias'
                'types'
                'UnionType'
                'functools'
                'reduce'
                'operator'
                'or_'
            [Var Names]
                't'
                'stripped_args'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Strips the annotations from a given type.\n    '
                [Code]
                    File Name: typing.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        '_strip_annotations'
                    [Var Names]
                        '.0'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        7 (to 20)
                        6       STORE_FAST                      1: a
                        8       LOAD_GLOBAL                     0: _strip_annotations
                        10      LOAD_FAST                       1: a
                        12      CALL_FUNCTION                   1
                        14      YIELD_VALUE                     
                        16      POP_TOP                         
                        18      JUMP_ABSOLUTE                   2 (to 4)
                        20      LOAD_CONST                      0: None
                        22      RETURN_VALUE                    
                '_strip_annotations.<locals>.<genexpr>'
                [Code]
                    File Name: typing.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        '_strip_annotations'
                    [Var Names]
                        '.0'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        7 (to 20)
                        6       STORE_FAST                      1: a
                        8       LOAD_GLOBAL                     0: _strip_annotations
                        10      LOAD_FAST                       1: a
                        12      CALL_FUNCTION                   1
                        14      YIELD_VALUE                     
                        16      POP_TOP                         
                        18      JUMP_ABSOLUTE                   2 (to 4)
                        20      LOAD_CONST                      0: None
                        22      RETURN_VALUE                    
                [Code]
                    File Name: typing.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        '_strip_annotations'
                    [Var Names]
                        '.0'
                        'a'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        7 (to 20)
                        6       STORE_FAST                      1: a
                        8       LOAD_GLOBAL                     0: _strip_annotations
                        10      LOAD_FAST                       1: a
                        12      CALL_FUNCTION                   1
                        14      YIELD_VALUE                     
                        16      POP_TOP                         
                        18      JUMP_ABSOLUTE                   2 (to 4)
                        20      LOAD_CONST                      0: None
                        22      RETURN_VALUE                    
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: t
                4       LOAD_GLOBAL                     1: _AnnotatedAlias
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               10 (to 20)
                10      LOAD_GLOBAL                     2: _strip_annotations
                12      LOAD_FAST                       0: t
                14      LOAD_ATTR                       3: __origin__
                16      CALL_FUNCTION                   1
                18      RETURN_VALUE                    
                20      LOAD_GLOBAL                     0: isinstance
                22      LOAD_FAST                       0: t
                24      LOAD_GLOBAL                     4: _GenericAlias
                26      CALL_FUNCTION                   2
                28      POP_JUMP_IF_FALSE               37 (to 74)
                30      LOAD_GLOBAL                     5: tuple
                32      LOAD_CONST                      1: <CODE> <genexpr>
                34      LOAD_CONST                      2: '_strip_annotations.<locals>.<genexpr>'
                36      MAKE_FUNCTION                   0
                38      LOAD_FAST                       0: t
                40      LOAD_ATTR                       6: __args__
                42      GET_ITER                        
                44      CALL_FUNCTION                   1
                46      CALL_FUNCTION                   1
                48      STORE_FAST                      1: stripped_args
                50      LOAD_FAST                       1: stripped_args
                52      LOAD_FAST                       0: t
                54      LOAD_ATTR                       6: __args__
                56      COMPARE_OP                      2 (==)
                58      POP_JUMP_IF_FALSE               32 (to 64)
                60      LOAD_FAST                       0: t
                62      RETURN_VALUE                    
                64      LOAD_FAST                       0: t
                66      LOAD_METHOD                     7: copy_with
                68      LOAD_FAST                       1: stripped_args
                70      CALL_METHOD                     1
                72      RETURN_VALUE                    
                74      LOAD_GLOBAL                     0: isinstance
                76      LOAD_FAST                       0: t
                78      LOAD_GLOBAL                     8: GenericAlias
                80      CALL_FUNCTION                   2
                82      POP_JUMP_IF_FALSE               65 (to 130)
                84      LOAD_GLOBAL                     5: tuple
                86      LOAD_CONST                      3: <CODE> <genexpr>
                88      LOAD_CONST                      2: '_strip_annotations.<locals>.<genexpr>'
                90      MAKE_FUNCTION                   0
                92      LOAD_FAST                       0: t
                94      LOAD_ATTR                       6: __args__
                96      GET_ITER                        
                98      CALL_FUNCTION                   1
                100     CALL_FUNCTION                   1
                102     STORE_FAST                      1: stripped_args
                104     LOAD_FAST                       1: stripped_args
                106     LOAD_FAST                       0: t
                108     LOAD_ATTR                       6: __args__
                110     COMPARE_OP                      2 (==)
                112     POP_JUMP_IF_FALSE               59 (to 118)
                114     LOAD_FAST                       0: t
                116     RETURN_VALUE                    
                118     LOAD_GLOBAL                     8: GenericAlias
                120     LOAD_FAST                       0: t
                122     LOAD_ATTR                       3: __origin__
                124     LOAD_FAST                       1: stripped_args
                126     CALL_FUNCTION                   2
                128     RETURN_VALUE                    
                130     LOAD_GLOBAL                     0: isinstance
                132     LOAD_FAST                       0: t
                134     LOAD_GLOBAL                     9: types
                136     LOAD_ATTR                       10: UnionType
                138     CALL_FUNCTION                   2
                140     POP_JUMP_IF_FALSE               95 (to 190)
                142     LOAD_GLOBAL                     5: tuple
                144     LOAD_CONST                      4: <CODE> <genexpr>
                146     LOAD_CONST                      2: '_strip_annotations.<locals>.<genexpr>'
                148     MAKE_FUNCTION                   0
                150     LOAD_FAST                       0: t
                152     LOAD_ATTR                       6: __args__
                154     GET_ITER                        
                156     CALL_FUNCTION                   1
                158     CALL_FUNCTION                   1
                160     STORE_FAST                      1: stripped_args
                162     LOAD_FAST                       1: stripped_args
                164     LOAD_FAST                       0: t
                166     LOAD_ATTR                       6: __args__
                168     COMPARE_OP                      2 (==)
                170     POP_JUMP_IF_FALSE               88 (to 176)
                172     LOAD_FAST                       0: t
                174     RETURN_VALUE                    
                176     LOAD_GLOBAL                     11: functools
                178     LOAD_METHOD                     12: reduce
                180     LOAD_GLOBAL                     13: operator
                182     LOAD_ATTR                       14: or_
                184     LOAD_FAST                       1: stripped_args
                186     CALL_METHOD                     2
                188     RETURN_VALUE                    
                190     LOAD_FAST                       0: t
                192     RETURN_VALUE                    
        '_strip_annotations'
        [Code]
            File Name: typing.py
            Object Name: get_origin
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                '_AnnotatedAlias'
                'Annotated'
                '_BaseGenericAlias'
                'GenericAlias'
                'ParamSpecArgs'
                'ParamSpecKwargs'
                '__origin__'
                'Generic'
                'types'
                'UnionType'
            [Var Names]
                'tp'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get the unsubscripted version of a type.\n\n    This supports generic types, Callable, Tuple, Union, Literal, Final, ClassVar\n    and Annotated. Return None for unsupported types. Examples::\n\n        get_origin(Literal[42]) is Literal\n        get_origin(int) is None\n        get_origin(ClassVar[int]) is ClassVar\n        get_origin(Generic) is Generic\n        get_origin(Generic[T]) is Generic\n        get_origin(Union[T, int]) is Union\n        get_origin(List[Tuple[T, T]][int]) == list\n        get_origin(P.args) is P\n    '
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: tp
                4       LOAD_GLOBAL                     1: _AnnotatedAlias
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               7 (to 14)
                10      LOAD_GLOBAL                     2: Annotated
                12      RETURN_VALUE                    
                14      LOAD_GLOBAL                     0: isinstance
                16      LOAD_FAST                       0: tp
                18      LOAD_GLOBAL                     3: _BaseGenericAlias
                20      LOAD_GLOBAL                     4: GenericAlias
                22      LOAD_GLOBAL                     5: ParamSpecArgs
                24      LOAD_GLOBAL                     6: ParamSpecKwargs
                26      BUILD_TUPLE                     4
                28      CALL_FUNCTION                   2
                30      POP_JUMP_IF_FALSE               19 (to 38)
                32      LOAD_FAST                       0: tp
                34      LOAD_ATTR                       7: __origin__
                36      RETURN_VALUE                    
                38      LOAD_FAST                       0: tp
                40      LOAD_GLOBAL                     8: Generic
                42      IS_OP                           0 (is)
                44      POP_JUMP_IF_FALSE               25 (to 50)
                46      LOAD_GLOBAL                     8: Generic
                48      RETURN_VALUE                    
                50      LOAD_GLOBAL                     0: isinstance
                52      LOAD_FAST                       0: tp
                54      LOAD_GLOBAL                     9: types
                56      LOAD_ATTR                       10: UnionType
                58      CALL_FUNCTION                   2
                60      POP_JUMP_IF_FALSE               34 (to 68)
                62      LOAD_GLOBAL                     9: types
                64      LOAD_ATTR                       10: UnionType
                66      RETURN_VALUE                    
                68      LOAD_CONST                      1: None
                70      RETURN_VALUE                    
        'get_origin'
        [Code]
            File Name: typing.py
            Object Name: get_args
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                '_AnnotatedAlias'
                '__origin__'
                '__metadata__'
                '_GenericAlias'
                'GenericAlias'
                '__args__'
                'collections'
                'abc'
                'Callable'
                'len'
                '_is_param_expr'
                'list'
                'types'
                'UnionType'
            [Var Names]
                'tp'
                'res'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get type arguments with all substitutions performed.\n\n    For unions, basic simplifications used by Union constructor are performed.\n    Examples::\n        get_args(Dict[str, int]) == (str, int)\n        get_args(int) == ()\n        get_args(Union[int, Union[T, int], str][int]) == (int, str)\n        get_args(Union[int, Tuple[T, int]][str]) == (int, Tuple[str, int])\n        get_args(Callable[[], T][int]) == ([], int)\n    '
                2
                0
                None
                -1
                (
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: tp
                4       LOAD_GLOBAL                     1: _AnnotatedAlias
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               12 (to 24)
                10      LOAD_FAST                       0: tp
                12      LOAD_ATTR                       2: __origin__
                14      BUILD_TUPLE                     1
                16      LOAD_FAST                       0: tp
                18      LOAD_ATTR                       3: __metadata__
                20      BINARY_ADD                      
                22      RETURN_VALUE                    
                24      LOAD_GLOBAL                     0: isinstance
                26      LOAD_FAST                       0: tp
                28      LOAD_GLOBAL                     4: _GenericAlias
                30      LOAD_GLOBAL                     5: GenericAlias
                32      BUILD_TUPLE                     2
                34      CALL_FUNCTION                   2
                36      POP_JUMP_IF_FALSE               55 (to 110)
                38      LOAD_FAST                       0: tp
                40      LOAD_ATTR                       6: __args__
                42      STORE_FAST                      1: res
                44      LOAD_FAST                       0: tp
                46      LOAD_ATTR                       2: __origin__
                48      LOAD_GLOBAL                     7: collections
                50      LOAD_ATTR                       8: abc
                52      LOAD_ATTR                       9: Callable
                54      IS_OP                           0 (is)
                56      POP_JUMP_IF_FALSE               53 (to 106)
                58      LOAD_GLOBAL                     10: len
                60      LOAD_FAST                       1: res
                62      CALL_FUNCTION                   1
                64      LOAD_CONST                      1: 2
                66      COMPARE_OP                      2 (==)
                68      POP_JUMP_IF_FALSE               41 (to 82)
                70      LOAD_GLOBAL                     11: _is_param_expr
                72      LOAD_FAST                       1: res
                74      LOAD_CONST                      2: 0
                76      BINARY_SUBSCR                   
                78      CALL_FUNCTION                   1
                80      POP_JUMP_IF_TRUE                53 (to 106)
                82      LOAD_GLOBAL                     12: list
                84      LOAD_FAST                       1: res
                86      LOAD_CONST                      3: None
                88      LOAD_CONST                      4: -1
                90      BUILD_SLICE                     2
                92      BINARY_SUBSCR                   
                94      CALL_FUNCTION                   1
                96      LOAD_FAST                       1: res
                98      LOAD_CONST                      4: -1
                100     BINARY_SUBSCR                   
                102     BUILD_TUPLE                     2
                104     STORE_FAST                      1: res
                106     LOAD_FAST                       1: res
                108     RETURN_VALUE                    
                110     LOAD_GLOBAL                     0: isinstance
                112     LOAD_FAST                       0: tp
                114     LOAD_GLOBAL                     13: types
                116     LOAD_ATTR                       14: UnionType
                118     CALL_FUNCTION                   2
                120     POP_JUMP_IF_FALSE               64 (to 128)
                122     LOAD_FAST                       0: tp
                124     LOAD_ATTR                       6: __args__
                126     RETURN_VALUE                    
                128     LOAD_CONST                      5: ()
                130     RETURN_VALUE                    
        'get_args'
        [Code]
            File Name: typing.py
            Object Name: is_typeddict
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                '_TypedDictMeta'
            [Var Names]
                'tp'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Check if an annotation is a TypedDict class\n\n    For example::\n        class Film(TypedDict):\n            title: str\n            year: int\n\n        is_typeddict(Film)  # => True\n        is_typeddict(Union[list, str])  # => False\n    '
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: tp
                4       LOAD_GLOBAL                     1: _TypedDictMeta
                6       CALL_FUNCTION                   2
                8       RETURN_VALUE                    
        'is_typeddict'
        [Code]
            File Name: typing.py
            Object Name: no_type_check
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'type'
                '__dict__'
                'copy'
                'items'
                '__bases__'
                'pop'
                'values'
                'types'
                'FunctionType'
                '__no_type_check__'
                'no_type_check'
                'TypeError'
            [Var Names]
                'arg'
                'arg_attrs'
                'attr'
                'val'
                'obj'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Decorator to indicate that annotations are not type hints.\n\n    The argument must be a class or function; if it is a class, it\n    applies recursively to all methods and classes defined in that class\n    (but not to methods defined in its superclasses or subclasses).\n\n    This mutates the function(s) or class(es) in place.\n    '
                True
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: arg
                4       LOAD_GLOBAL                     1: type
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               58 (to 116)
                10      LOAD_FAST                       0: arg
                12      LOAD_ATTR                       2: __dict__
                14      LOAD_METHOD                     3: copy
                16      CALL_METHOD                     0
                18      STORE_FAST                      1: arg_attrs
                20      LOAD_FAST                       0: arg
                22      LOAD_ATTR                       2: __dict__
                24      LOAD_METHOD                     4: items
                26      CALL_METHOD                     0
                28      GET_ITER                        
                30      FOR_ITER                        17 (to 66)
                32      UNPACK_SEQUENCE                 2
                34      STORE_FAST                      2: attr
                36      STORE_FAST                      3: val
                38      LOAD_FAST                       3: val
                40      LOAD_FAST                       0: arg
                42      LOAD_ATTR                       5: __bases__
                44      LOAD_FAST                       0: arg
                46      BUILD_TUPLE                     1
                48      BINARY_ADD                      
                50      CONTAINS_OP                     0 (in)
                52      POP_JUMP_IF_FALSE               32 (to 64)
                54      LOAD_FAST                       1: arg_attrs
                56      LOAD_METHOD                     6: pop
                58      LOAD_FAST                       2: attr
                60      CALL_METHOD                     1
                62      POP_TOP                         
                64      JUMP_ABSOLUTE                   15 (to 30)
                66      LOAD_FAST                       1: arg_attrs
                68      LOAD_METHOD                     7: values
                70      CALL_METHOD                     0
                72      GET_ITER                        
                74      FOR_ITER                        20 (to 116)
                76      STORE_FAST                      4: obj
                78      LOAD_GLOBAL                     0: isinstance
                80      LOAD_FAST                       4: obj
                82      LOAD_GLOBAL                     8: types
                84      LOAD_ATTR                       9: FunctionType
                86      CALL_FUNCTION                   2
                88      POP_JUMP_IF_FALSE               48 (to 96)
                90      LOAD_CONST                      1: True
                92      LOAD_FAST                       4: obj
                94      STORE_ATTR                      10: __no_type_check__
                96      LOAD_GLOBAL                     0: isinstance
                98      LOAD_FAST                       4: obj
                100     LOAD_GLOBAL                     1: type
                102     CALL_FUNCTION                   2
                104     POP_JUMP_IF_FALSE               57 (to 114)
                106     LOAD_GLOBAL                     11: no_type_check
                108     LOAD_FAST                       4: obj
                110     CALL_FUNCTION                   1
                112     POP_TOP                         
                114     JUMP_ABSOLUTE                   37 (to 74)
                116     SETUP_FINALLY                   6 (to 130)
                118     LOAD_CONST                      1: True
                120     LOAD_FAST                       0: arg
                122     STORE_ATTR                      10: __no_type_check__
                124     POP_BLOCK                       
                126     LOAD_FAST                       0: arg
                128     RETURN_VALUE                    
                130     DUP_TOP                         
                132     LOAD_GLOBAL                     12: TypeError
                134     JUMP_IF_NOT_EXC_MATCH           74 (to 148)
                136     POP_TOP                         
                138     POP_TOP                         
                140     POP_TOP                         
                142     POP_EXCEPT                      
                144     LOAD_FAST                       0: arg
                146     RETURN_VALUE                    
                148     RERAISE                         0
        'no_type_check'
        [Code]
            File Name: typing.py
            Object Name: no_type_check_decorator
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'functools'
                'wraps'
            [Var Names]
                'decorator'
                'wrapped_decorator'
            [Free Vars]
            [Cell Vars]
                'decorator'
            [Constants]
                'Decorator to give another decorator the @no_type_check effect.\n\n    This wraps the decorator with something that wraps the decorated\n    function in @no_type_check.\n    '
                [Code]
                    File Name: typing.py
                    Object Name: wrapped_decorator
                    Arg Count: 0
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000001F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NESTED)
                    [Names]
                        'no_type_check'
                    [Var Names]
                        'args'
                        'kwds'
                        'func'
                    [Free Vars]
                        'decorator'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_DEREF                      0: decorator
                        2       LOAD_FAST                       0: args
                        4       BUILD_MAP                       0
                        6       LOAD_FAST                       1: kwds
                        8       DICT_MERGE                      1
                        10      CALL_FUNCTION_EX                1
                        12      STORE_FAST                      2: func
                        14      LOAD_GLOBAL                     0: no_type_check
                        16      LOAD_FAST                       2: func
                        18      CALL_FUNCTION                   1
                        20      STORE_FAST                      2: func
                        22      LOAD_FAST                       2: func
                        24      RETURN_VALUE                    
                'no_type_check_decorator.<locals>.wrapped_decorator'
            [Disassembly]
                0       LOAD_GLOBAL                     0: functools
                2       LOAD_METHOD                     1: wraps
                4       LOAD_DEREF                      0: decorator
                6       CALL_METHOD                     1
                8       LOAD_CLOSURE                    0: decorator
                10      BUILD_TUPLE                     1
                12      LOAD_CONST                      1: <CODE> wrapped_decorator
                14      LOAD_CONST                      2: 'no_type_check_decorator.<locals>.wrapped_decorator'
                16      MAKE_FUNCTION                   8
                18      CALL_FUNCTION                   1
                20      STORE_FAST                      1: wrapped_decorator
                22      LOAD_FAST                       1: wrapped_decorator
                24      RETURN_VALUE                    
        'no_type_check_decorator'
        [Code]
            File Name: typing.py
            Object Name: _overload_dummy
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 2
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'NotImplementedError'
            [Var Names]
                'args'
                'kwds'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Helper for @overload to raise when called.'
                'You should not call an overloaded function. A series of @overload-decorated functions outside a stub module should always be followed by an implementation that is not @overload-ed.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: NotImplementedError
                2       LOAD_CONST                      1: 'You should not call an overloaded function. A series of @overload-decorated functions outside a stub module should always be followed by an implementation that is not @overload-ed.'
                4       CALL_FUNCTION                   1
                6       RAISE_VARARGS                   1
        '_overload_dummy'
        [Code]
            File Name: typing.py
            Object Name: overload
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_overload_dummy'
            [Var Names]
                'func'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Decorator for overloaded functions/methods.\n\n    In a stub file, place two or more stub definitions for the same\n    function in a row, each decorated with @overload.  For example:\n\n      @overload\n      def utf8(value: None) -> None: ...\n      @overload\n      def utf8(value: bytes) -> bytes: ...\n      @overload\n      def utf8(value: str) -> bytes: ...\n\n    In a non-stub file (i.e. a regular .py file), do the same but\n    follow it with an implementation.  The implementation should *not*\n    be decorated with @overload.  For example:\n\n      @overload\n      def utf8(value: None) -> None: ...\n      @overload\n      def utf8(value: bytes) -> bytes: ...\n      @overload\n      def utf8(value: str) -> bytes: ...\n      def utf8(value):\n          # implementation goes here\n    '
            [Disassembly]
                0       LOAD_GLOBAL                     0: _overload_dummy
                2       RETURN_VALUE                    
        'overload'
        [Code]
            File Name: typing.py
            Object Name: final
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'f'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'A decorator to indicate final methods and final classes.\n\n    Use this decorator to indicate to type checkers that the decorated\n    method cannot be overridden, and decorated class cannot be subclassed.\n    For example:\n\n      class Base:\n          @final\n          def done(self) -> None:\n              ...\n      class Sub(Base):\n          def done(self) -> None:  # Error reported by type checker\n                ...\n\n      @final\n      class Leaf:\n          ...\n      class Other(Leaf):  # Error reported by type checker\n          ...\n\n    There is no runtime checking of these properties.\n    '
            [Disassembly]
                0       LOAD_FAST                       0: f
                2       RETURN_VALUE                    
        'final'
        'T'
        'KT'
        'VT'
        'T_co'
        (
            'covariant'
        )
        'V_co'
        'VT_co'
        'T_contra'
        (
            'contravariant'
        )
        'CT_co'
        (
            'covariant'
            'bound'
        )
        'AnyStr'
        2
        'Callable type; Callable[[int], str] is a function of (int) -> str.\n\n    The subscription syntax must always be used with exactly two\n    values: the argument list and the return type.  The argument list\n    must be a list of types or ellipsis; the return type must be a single type.\n\n    There is no syntax to indicate optional or keyword arguments,\n    such function types are rarely used as callback types.\n    '
        'AbstractSet'
        (
            'name'
        )
        -1
        'Tuple'
        (
            'inst'
            'name'
        )
        'Tuple type; Tuple[X, Y] is the cross-product type of X and Y.\n\n    Example: Tuple[T1, T2] is a tuple of two elements corresponding\n    to type variables T1 and T2.  Tuple[int, float, str] is a tuple\n    of an int, a float and a string.\n\n    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].\n    '
        'List'
        'Deque'
        'Set'
        'FrozenSet'
        'ContextManager'
        'AsyncContextManager'
        'Dict'
        'DefaultDict'
        'Type'
        "A special construct usable to annotate class objects.\n\n    For example, suppose we have the following classes::\n\n      class User: ...  # Abstract base for User classes\n      class BasicUser(User): ...\n      class ProUser(User): ...\n      class TeamUser(User): ...\n\n    And a function that takes a class argument that's a subclass of\n    User and returns an instance of the corresponding class::\n\n      U = TypeVar('U', bound=User)\n      def new_user(user_class: Type[U]) -> U:\n          user = user_class()\n          # (Here we could write the user object to a database)\n          return user\n\n      joe = new_user(BasicUser)\n\n    At this point the type checker knows that joe has type BasicUser.\n    "
        [Code]
            File Name: typing.py
            Object Name: SupportsInt
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'abstractmethod'
                'int'
                '__int__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'SupportsInt'
                'An ABC with one abstract method __int__.'
                (
                )
                'return'
                [Code]
                    File Name: typing.py
                    Object Name: __int__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'SupportsInt.__int__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SupportsInt'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An ABC with one abstract method __int__.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: abstractmethod
                18      LOAD_CONST                      3: 'return'
                20      LOAD_NAME                       6: int
                22      BUILD_TUPLE                     2
                24      LOAD_CONST                      4: <CODE> __int__
                26      LOAD_CONST                      5: 'SupportsInt.__int__'
                28      MAKE_FUNCTION                   4
                30      CALL_FUNCTION                   1
                32      STORE_NAME                      7: __int__
                34      LOAD_CONST                      6: None
                36      RETURN_VALUE                    
        'SupportsInt'
        [Code]
            File Name: typing.py
            Object Name: SupportsFloat
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'abstractmethod'
                'float'
                '__float__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'SupportsFloat'
                'An ABC with one abstract method __float__.'
                (
                )
                'return'
                [Code]
                    File Name: typing.py
                    Object Name: __float__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'SupportsFloat.__float__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SupportsFloat'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An ABC with one abstract method __float__.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: abstractmethod
                18      LOAD_CONST                      3: 'return'
                20      LOAD_NAME                       6: float
                22      BUILD_TUPLE                     2
                24      LOAD_CONST                      4: <CODE> __float__
                26      LOAD_CONST                      5: 'SupportsFloat.__float__'
                28      MAKE_FUNCTION                   4
                30      CALL_FUNCTION                   1
                32      STORE_NAME                      7: __float__
                34      LOAD_CONST                      6: None
                36      RETURN_VALUE                    
        'SupportsFloat'
        [Code]
            File Name: typing.py
            Object Name: SupportsComplex
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'abstractmethod'
                'complex'
                '__complex__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'SupportsComplex'
                'An ABC with one abstract method __complex__.'
                (
                )
                'return'
                [Code]
                    File Name: typing.py
                    Object Name: __complex__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'SupportsComplex.__complex__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SupportsComplex'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An ABC with one abstract method __complex__.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: abstractmethod
                18      LOAD_CONST                      3: 'return'
                20      LOAD_NAME                       6: complex
                22      BUILD_TUPLE                     2
                24      LOAD_CONST                      4: <CODE> __complex__
                26      LOAD_CONST                      5: 'SupportsComplex.__complex__'
                28      MAKE_FUNCTION                   4
                30      CALL_FUNCTION                   1
                32      STORE_NAME                      7: __complex__
                34      LOAD_CONST                      6: None
                36      RETURN_VALUE                    
        'SupportsComplex'
        [Code]
            File Name: typing.py
            Object Name: SupportsBytes
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'abstractmethod'
                'bytes'
                '__bytes__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'SupportsBytes'
                'An ABC with one abstract method __bytes__.'
                (
                )
                'return'
                [Code]
                    File Name: typing.py
                    Object Name: __bytes__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'SupportsBytes.__bytes__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SupportsBytes'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An ABC with one abstract method __bytes__.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: abstractmethod
                18      LOAD_CONST                      3: 'return'
                20      LOAD_NAME                       6: bytes
                22      BUILD_TUPLE                     2
                24      LOAD_CONST                      4: <CODE> __bytes__
                26      LOAD_CONST                      5: 'SupportsBytes.__bytes__'
                28      MAKE_FUNCTION                   4
                30      CALL_FUNCTION                   1
                32      STORE_NAME                      7: __bytes__
                34      LOAD_CONST                      6: None
                36      RETURN_VALUE                    
        'SupportsBytes'
        [Code]
            File Name: typing.py
            Object Name: SupportsIndex
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'abstractmethod'
                'int'
                '__index__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'SupportsIndex'
                'An ABC with one abstract method __index__.'
                (
                )
                'return'
                [Code]
                    File Name: typing.py
                    Object Name: __index__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'SupportsIndex.__index__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SupportsIndex'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An ABC with one abstract method __index__.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: abstractmethod
                18      LOAD_CONST                      3: 'return'
                20      LOAD_NAME                       6: int
                22      BUILD_TUPLE                     2
                24      LOAD_CONST                      4: <CODE> __index__
                26      LOAD_CONST                      5: 'SupportsIndex.__index__'
                28      MAKE_FUNCTION                   4
                30      CALL_FUNCTION                   1
                32      STORE_NAME                      7: __index__
                34      LOAD_CONST                      6: None
                36      RETURN_VALUE                    
        'SupportsIndex'
        [Code]
            File Name: typing.py
            Object Name: SupportsAbs
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'abstractmethod'
                'T_co'
                '__abs__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'SupportsAbs'
                'An ABC with one abstract method __abs__ that is covariant in its return type.'
                (
                )
                'return'
                [Code]
                    File Name: typing.py
                    Object Name: __abs__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'SupportsAbs.__abs__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SupportsAbs'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An ABC with one abstract method __abs__ that is covariant in its return type.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: abstractmethod
                18      LOAD_CONST                      3: 'return'
                20      LOAD_NAME                       6: T_co
                22      BUILD_TUPLE                     2
                24      LOAD_CONST                      4: <CODE> __abs__
                26      LOAD_CONST                      5: 'SupportsAbs.__abs__'
                28      MAKE_FUNCTION                   4
                30      CALL_FUNCTION                   1
                32      STORE_NAME                      7: __abs__
                34      LOAD_CONST                      6: None
                36      RETURN_VALUE                    
        'SupportsAbs'
        [Code]
            File Name: typing.py
            Object Name: SupportsRound
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 6
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'abstractmethod'
                'int'
                'T_co'
                '__round__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'SupportsRound'
                'An ABC with one abstract method __round__ that is covariant in its return type.'
                (
                )
                0
                'ndigits'
                'return'
                [Code]
                    File Name: typing.py
                    Object Name: __round__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'ndigits'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'SupportsRound.__round__'
                None
                (
                    0
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SupportsRound'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'An ABC with one abstract method __round__ that is covariant in its return type.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: abstractmethod
                18      LOAD_CONST                      9: (0,)
                20      LOAD_CONST                      4: 'ndigits'
                22      LOAD_NAME                       6: int
                24      LOAD_CONST                      5: 'return'
                26      LOAD_NAME                       7: T_co
                28      BUILD_TUPLE                     4
                30      LOAD_CONST                      6: <CODE> __round__
                32      LOAD_CONST                      7: 'SupportsRound.__round__'
                34      MAKE_FUNCTION                   5
                36      CALL_FUNCTION                   1
                38      STORE_NAME                      8: __round__
                40      LOAD_CONST                      8: None
                42      RETURN_VALUE                    
        'SupportsRound'
        (
        )
        [Code]
            File Name: typing.py
            Object Name: _make_nmtuple
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 6
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'collections'
                'namedtuple'
                '__annotations__'
                '__new__'
            [Var Names]
                'name'
                'types'
                'module'
                'defaults'
                'fields'
                'nm_tpl'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                [Code]
                    File Name: typing.py
                    Object Name: <listcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                    [Var Names]
                        '.0'
                        'n'
                        't'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        6 (to 18)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: n
                        10      STORE_FAST                      2: t
                        12      LOAD_FAST                       1: n
                        14      LIST_APPEND                     2
                        16      JUMP_ABSOLUTE                   2 (to 4)
                        18      RETURN_VALUE                    
                '_make_nmtuple.<locals>.<listcomp>'
                [Code]
                    File Name: typing.py
                    Object Name: <dictcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        '_type_check'
                    [Var Names]
                        '.0'
                        'n'
                        't'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'field '
                        ' annotation must be a type'
                    [Disassembly]
                        0       BUILD_MAP                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        14 (to 34)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: n
                        10      STORE_FAST                      2: t
                        12      LOAD_FAST                       1: n
                        14      LOAD_GLOBAL                     0: _type_check
                        16      LOAD_FAST                       2: t
                        18      LOAD_CONST                      0: 'field '
                        20      LOAD_FAST                       1: n
                        22      FORMAT_VALUE                    0 (FVC_NONE)
                        24      LOAD_CONST                      1: ' annotation must be a type'
                        26      BUILD_STRING                    3
                        28      CALL_FUNCTION                   2
                        30      MAP_ADD                         2
                        32      JUMP_ABSOLUTE                   2 (to 4)
                        34      RETURN_VALUE                    
                '_make_nmtuple.<locals>.<dictcomp>'
                (
                    'defaults'
                    'module'
                )
            [Disassembly]
                0       LOAD_CONST                      1: <CODE> <listcomp>
                2       LOAD_CONST                      2: '_make_nmtuple.<locals>.<listcomp>'
                4       MAKE_FUNCTION                   0
                6       LOAD_FAST                       1: types
                8       GET_ITER                        
                10      CALL_FUNCTION                   1
                12      STORE_FAST                      4: fields
                14      LOAD_CONST                      3: <CODE> <dictcomp>
                16      LOAD_CONST                      4: '_make_nmtuple.<locals>.<dictcomp>'
                18      MAKE_FUNCTION                   0
                20      LOAD_FAST                       1: types
                22      GET_ITER                        
                24      CALL_FUNCTION                   1
                26      STORE_FAST                      1: types
                28      LOAD_GLOBAL                     0: collections
                30      LOAD_ATTR                       1: namedtuple
                32      LOAD_FAST                       0: name
                34      LOAD_FAST                       4: fields
                36      LOAD_FAST                       3: defaults
                38      LOAD_FAST                       2: module
                40      LOAD_CONST                      5: ('defaults', 'module')
                42      CALL_FUNCTION_KW                4
                44      STORE_FAST                      5: nm_tpl
                46      LOAD_FAST                       1: types
                48      DUP_TOP                         
                50      LOAD_FAST                       5: nm_tpl
                52      STORE_ATTR                      2: __annotations__
                54      LOAD_FAST                       5: nm_tpl
                56      LOAD_ATTR                       3: __new__
                58      STORE_ATTR                      2: __annotations__
                60      LOAD_FAST                       5: nm_tpl
                62      RETURN_VALUE                    
        '_make_nmtuple'
        frozenset({
            '_make'
            '__new__'
            '_asdict'
            '_fields'
            '_source'
            '__init__'
            '_replace'
            '__slots__'
            '__getnewargs__'
            '_field_defaults'
        })
        frozenset({
            '__name__'
            '__module__'
            '__annotations__'
        })
        [Code]
            File Name: typing.py
            Object Name: NamedTupleMeta
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__new__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'NamedTupleMeta'
                [Code]
                    File Name: typing.py
                    Object Name: __new__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 10
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_NamedTuple'
                        'get'
                        'append'
                        'TypeError'
                        'len'
                        'join'
                        '_make_nmtuple'
                        'items'
                        '_prohibited'
                        'AttributeError'
                        '_special'
                        '_fields'
                        'setattr'
                    [Var Names]
                        'cls'
                        'typename'
                        'bases'
                        'ns'
                        'types'
                        'default_names'
                        'field_name'
                        'nm_tpl'
                        'key'
                    [Free Vars]
                    [Cell Vars]
                        'ns'
                    [Constants]
                        None
                        0
                        '__annotations__'
                        'Non-default namedtuple field '
                        ' cannot follow default field'
                        1
                        's'
                        ''
                        ' '
                        ', '
                        [Code]
                            File Name: typing.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                            [Var Names]
                                '.0'
                                'n'
                            [Free Vars]
                                'ns'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        6 (to 18)
                                6       STORE_FAST                      1: n
                                8       LOAD_DEREF                      0: ns
                                10      LOAD_FAST                       1: n
                                12      BINARY_SUBSCR                   
                                14      LIST_APPEND                     2
                                16      JUMP_ABSOLUTE                   2 (to 4)
                                18      RETURN_VALUE                    
                        'NamedTupleMeta.__new__.<locals>.<listcomp>'
                        '__module__'
                        (
                            'defaults'
                            'module'
                        )
                        'Cannot overwrite NamedTuple attribute '
                    [Disassembly]
                        0       LOAD_FAST                       2: bases
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_GLOBAL                     0: _NamedTuple
                        8       IS_OP                           0 (is)
                        10      POP_JUMP_IF_TRUE                8 (to 16)
                        12      LOAD_ASSERTION_ERROR            
                        14      RAISE_VARARGS                   1
                        16      LOAD_DEREF                      0: ns
                        18      LOAD_METHOD                     1: get
                        20      LOAD_CONST                      2: '__annotations__'
                        22      BUILD_MAP                       0
                        24      CALL_METHOD                     2
                        26      STORE_FAST                      4: types
                        28      BUILD_LIST                      0
                        30      STORE_FAST                      5: default_names
                        32      LOAD_FAST                       4: types
                        34      GET_ITER                        
                        36      FOR_ITER                        38 (to 114)
                        38      STORE_FAST                      6: field_name
                        40      LOAD_FAST                       6: field_name
                        42      LOAD_DEREF                      0: ns
                        44      CONTAINS_OP                     0 (in)
                        46      POP_JUMP_IF_FALSE               30 (to 60)
                        48      LOAD_FAST                       5: default_names
                        50      LOAD_METHOD                     2: append
                        52      LOAD_FAST                       6: field_name
                        54      CALL_METHOD                     1
                        56      POP_TOP                         
                        58      JUMP_ABSOLUTE                   18 (to 36)
                        60      LOAD_FAST                       5: default_names
                        62      POP_JUMP_IF_FALSE               56 (to 112)
                        64      LOAD_GLOBAL                     3: TypeError
                        66      LOAD_CONST                      3: 'Non-default namedtuple field '
                        68      LOAD_FAST                       6: field_name
                        70      FORMAT_VALUE                    0 (FVC_NONE)
                        72      LOAD_CONST                      4: ' cannot follow default field'
                        74      LOAD_GLOBAL                     4: len
                        76      LOAD_FAST                       5: default_names
                        78      CALL_FUNCTION                   1
                        80      LOAD_CONST                      5: 1
                        82      COMPARE_OP                      4 (>)
                        84      POP_JUMP_IF_FALSE               45 (to 90)
                        86      LOAD_CONST                      6: 's'
                        88      JUMP_FORWARD                    1 (to 92)
                        90      LOAD_CONST                      7: ''
                        92      FORMAT_VALUE                    0 (FVC_NONE)
                        94      LOAD_CONST                      8: ' '
                        96      LOAD_CONST                      9: ', '
                        98      LOAD_METHOD                     5: join
                        100     LOAD_FAST                       5: default_names
                        102     CALL_METHOD                     1
                        104     FORMAT_VALUE                    0 (FVC_NONE)
                        106     BUILD_STRING                    6
                        108     CALL_FUNCTION                   1
                        110     RAISE_VARARGS                   1
                        112     JUMP_ABSOLUTE                   18 (to 36)
                        114     LOAD_GLOBAL                     6: _make_nmtuple
                        116     LOAD_FAST                       1: typename
                        118     LOAD_FAST                       4: types
                        120     LOAD_METHOD                     7: items
                        122     CALL_METHOD                     0
                        124     LOAD_CLOSURE                    0: ns
                        126     BUILD_TUPLE                     1
                        128     LOAD_CONST                      10: <CODE> <listcomp>
                        130     LOAD_CONST                      11: 'NamedTupleMeta.__new__.<locals>.<listcomp>'
                        132     MAKE_FUNCTION                   8
                        134     LOAD_FAST                       5: default_names
                        136     GET_ITER                        
                        138     CALL_FUNCTION                   1
                        140     LOAD_DEREF                      0: ns
                        142     LOAD_CONST                      12: '__module__'
                        144     BINARY_SUBSCR                   
                        146     LOAD_CONST                      13: ('defaults', 'module')
                        148     CALL_FUNCTION_KW                4
                        150     STORE_FAST                      7: nm_tpl
                        152     LOAD_DEREF                      0: ns
                        154     GET_ITER                        
                        156     FOR_ITER                        29 (to 216)
                        158     STORE_FAST                      8: key
                        160     LOAD_FAST                       8: key
                        162     LOAD_GLOBAL                     8: _prohibited
                        164     CONTAINS_OP                     0 (in)
                        166     POP_JUMP_IF_FALSE               90 (to 180)
                        168     LOAD_GLOBAL                     9: AttributeError
                        170     LOAD_CONST                      14: 'Cannot overwrite NamedTuple attribute '
                        172     LOAD_FAST                       8: key
                        174     BINARY_ADD                      
                        176     CALL_FUNCTION                   1
                        178     RAISE_VARARGS                   1
                        180     LOAD_FAST                       8: key
                        182     LOAD_GLOBAL                     10: _special
                        184     CONTAINS_OP                     1 (not in)
                        186     POP_JUMP_IF_FALSE               107 (to 214)
                        188     LOAD_FAST                       8: key
                        190     LOAD_FAST                       7: nm_tpl
                        192     LOAD_ATTR                       11: _fields
                        194     CONTAINS_OP                     1 (not in)
                        196     POP_JUMP_IF_FALSE               107 (to 214)
                        198     LOAD_GLOBAL                     12: setattr
                        200     LOAD_FAST                       7: nm_tpl
                        202     LOAD_FAST                       8: key
                        204     LOAD_DEREF                      0: ns
                        206     LOAD_FAST                       8: key
                        208     BINARY_SUBSCR                   
                        210     CALL_FUNCTION                   3
                        212     POP_TOP                         
                        214     JUMP_ABSOLUTE                   78 (to 156)
                        216     LOAD_FAST                       7: nm_tpl
                        218     RETURN_VALUE                    
                'NamedTupleMeta.__new__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'NamedTupleMeta'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: <CODE> __new__
                10      LOAD_CONST                      2: 'NamedTupleMeta.__new__'
                12      MAKE_FUNCTION                   0
                14      STORE_NAME                      3: __new__
                16      LOAD_CONST                      3: None
                18      RETURN_VALUE                    
        'NamedTupleMeta'
        [Code]
            File Name: typing.py
            Object Name: NamedTuple
            Arg Count: 2
            Pos Only Arg Count: 2
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 9
            Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'items'
                'TypeError'
                'sys'
                '_getframe'
                'f_globals'
                'get'
                'AttributeError'
                'ValueError'
                '_make_nmtuple'
            [Var Names]
                'typename'
                'fields'
                'kwargs'
                'module'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Typed version of namedtuple.\n\n    Usage in Python versions >= 3.6::\n\n        class Employee(NamedTuple):\n            name: str\n            id: int\n\n    This is equivalent to::\n\n        Employee = collections.namedtuple('Employee', ['name', 'id'])\n\n    The resulting class has an extra __annotations__ attribute, giving a\n    dict that maps field names to types.  (The field names are also in\n    the _fields attribute, which is part of the namedtuple API.)\n    Alternative equivalent keyword syntax is also accepted::\n\n        Employee = NamedTuple('Employee', name=str, id=int)\n\n    In Python versions <= 3.5 use::\n\n        Employee = NamedTuple('Employee', [('name', str), ('id', int)])\n    "
                None
                'Either list of fields or keywords can be provided to NamedTuple, not both'
                1
                '__name__'
                '__main__'
                (
                    'module'
                )
            [Disassembly]
                0       LOAD_FAST                       1: fields
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               9 (to 18)
                8       LOAD_FAST                       2: kwargs
                10      LOAD_METHOD                     0: items
                12      CALL_METHOD                     0
                14      STORE_FAST                      1: fields
                16      JUMP_FORWARD                    6 (to 30)
                18      LOAD_FAST                       2: kwargs
                20      POP_JUMP_IF_FALSE               15 (to 30)
                22      LOAD_GLOBAL                     1: TypeError
                24      LOAD_CONST                      2: 'Either list of fields or keywords can be provided to NamedTuple, not both'
                26      CALL_FUNCTION                   1
                28      RAISE_VARARGS                   1
                30      SETUP_FINALLY                   12 (to 56)
                32      LOAD_GLOBAL                     2: sys
                34      LOAD_METHOD                     3: _getframe
                36      LOAD_CONST                      3: 1
                38      CALL_METHOD                     1
                40      LOAD_ATTR                       4: f_globals
                42      LOAD_METHOD                     5: get
                44      LOAD_CONST                      4: '__name__'
                46      LOAD_CONST                      5: '__main__'
                48      CALL_METHOD                     2
                50      STORE_FAST                      3: module
                52      POP_BLOCK                       
                54      JUMP_FORWARD                    13 (to 82)
                56      DUP_TOP                         
                58      LOAD_GLOBAL                     6: AttributeError
                60      LOAD_GLOBAL                     7: ValueError
                62      BUILD_TUPLE                     2
                64      JUMP_IF_NOT_EXC_MATCH           40 (to 80)
                66      POP_TOP                         
                68      POP_TOP                         
                70      POP_TOP                         
                72      LOAD_CONST                      1: None
                74      STORE_FAST                      3: module
                76      POP_EXCEPT                      
                78      JUMP_FORWARD                    1 (to 82)
                80      RERAISE                         0
                82      LOAD_GLOBAL                     8: _make_nmtuple
                84      LOAD_FAST                       0: typename
                86      LOAD_FAST                       1: fields
                88      LOAD_FAST                       3: module
                90      LOAD_CONST                      6: ('module',)
                92      CALL_FUNCTION_KW                3
                94      RETURN_VALUE                    
        'NamedTuple'
        [Code]
            File Name: typing.py
            Object Name: _namedtuple_mro_entries
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'len'
                'TypeError'
                'NamedTuple'
                '_NamedTuple'
            [Var Names]
                'bases'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                1
                'Multiple inheritance with NamedTuple is not supported'
                0
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_FAST                       0: bases
                4       CALL_FUNCTION                   1
                6       LOAD_CONST                      1: 1
                8       COMPARE_OP                      4 (>)
                10      POP_JUMP_IF_FALSE               10 (to 20)
                12      LOAD_GLOBAL                     1: TypeError
                14      LOAD_CONST                      2: 'Multiple inheritance with NamedTuple is not supported'
                16      CALL_FUNCTION                   1
                18      RAISE_VARARGS                   1
                20      LOAD_FAST                       0: bases
                22      LOAD_CONST                      3: 0
                24      BINARY_SUBSCR                   
                26      LOAD_GLOBAL                     2: NamedTuple
                28      IS_OP                           0 (is)
                30      POP_JUMP_IF_TRUE                18 (to 36)
                32      LOAD_ASSERTION_ERROR            
                34      RAISE_VARARGS                   1
                36      LOAD_GLOBAL                     3: _NamedTuple
                38      BUILD_TUPLE                     1
                40      RETURN_VALUE                    
        '_namedtuple_mro_entries'
        [Code]
            File Name: typing.py
            Object Name: _TypedDictMeta
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__new__'
                'dict'
                '__call__'
                '__subclasscheck__'
                '__instancecheck__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_TypedDictMeta'
                True
                [Code]
                    File Name: typing.py
                    Object Name: __new__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 11
                    Stack Size: 7
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'type'
                        '_TypedDictMeta'
                        'TypeError'
                        '__new__'
                        'dict'
                        'get'
                        'set'
                        'keys'
                        'items'
                        'update'
                        '__dict__'
                        '__annotations__'
                        'frozenset'
                        '__required_keys__'
                        '__optional_keys__'
                        'hasattr'
                        '__total__'
                    [Var Names]
                        'cls'
                        'name'
                        'bases'
                        'ns'
                        'total'
                        'base'
                        'annotations'
                        'own_annotations'
                        'own_annotation_keys'
                        'required_keys'
                        'optional_keys'
                    [Free Vars]
                    [Cell Vars]
                        'msg'
                        'tp_dict'
                    [Constants]
                        'Create new typed dict class object.\n\n        This method is called when TypedDict is subclassed,\n        or when TypedDict is instantiated. This way\n        TypedDict supports all three syntax forms described in its docstring.\n        Subclasses and instances of TypedDict return actual dictionaries.\n        '
                        'cannot inherit from both a TypedDict type and a non-TypedDict base class'
                        '__annotations__'
                        "TypedDict('Name', {f0: t0, f1: t1, ...}); each t must be a type"
                        [Code]
                            File Name: typing.py
                            Object Name: <dictcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 3
                            Stack Size: 8
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                '_type_check'
                                '__module__'
                            [Var Names]
                                '.0'
                                'n'
                                'tp'
                            [Free Vars]
                                'msg'
                                'tp_dict'
                            [Cell Vars]
                            [Constants]
                                (
                                    'module'
                                )
                            [Disassembly]
                                0       BUILD_MAP                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        13 (to 32)
                                6       UNPACK_SEQUENCE                 2
                                8       STORE_FAST                      1: n
                                10      STORE_FAST                      2: tp
                                12      LOAD_FAST                       1: n
                                14      LOAD_GLOBAL                     0: _type_check
                                16      LOAD_FAST                       2: tp
                                18      LOAD_DEREF                      0: msg
                                20      LOAD_DEREF                      1: tp_dict
                                22      LOAD_ATTR                       1: __module__
                                24      LOAD_CONST                      0: ('module',)
                                26      CALL_FUNCTION_KW                3
                                28      MAP_ADD                         2
                                30      JUMP_ABSOLUTE                   2 (to 4)
                                32      RETURN_VALUE                    
                        '_TypedDictMeta.__new__.<locals>.<dictcomp>'
                        '__required_keys__'
                        (
                        )
                        '__optional_keys__'
                        '__total__'
                    [Disassembly]
                        0       LOAD_FAST                       2: bases
                        2       GET_ITER                        
                        4       FOR_ITER                        12 (to 30)
                        6       STORE_FAST                      5: base
                        8       LOAD_GLOBAL                     0: type
                        10      LOAD_FAST                       5: base
                        12      CALL_FUNCTION                   1
                        14      LOAD_GLOBAL                     1: _TypedDictMeta
                        16      IS_OP                           1 (is not)
                        18      POP_JUMP_IF_FALSE               14 (to 28)
                        20      LOAD_GLOBAL                     2: TypeError
                        22      LOAD_CONST                      1: 'cannot inherit from both a TypedDict type and a non-TypedDict base class'
                        24      CALL_FUNCTION                   1
                        26      RAISE_VARARGS                   1
                        28      JUMP_ABSOLUTE                   2 (to 4)
                        30      LOAD_GLOBAL                     0: type
                        32      LOAD_METHOD                     3: __new__
                        34      LOAD_GLOBAL                     1: _TypedDictMeta
                        36      LOAD_FAST                       1: name
                        38      LOAD_GLOBAL                     4: dict
                        40      BUILD_TUPLE                     1
                        42      LOAD_FAST                       3: ns
                        44      CALL_METHOD                     4
                        46      STORE_DEREF                     1: tp_dict
                        48      BUILD_MAP                       0
                        50      STORE_FAST                      6: annotations
                        52      LOAD_FAST                       3: ns
                        54      LOAD_METHOD                     5: get
                        56      LOAD_CONST                      2: '__annotations__'
                        58      BUILD_MAP                       0
                        60      CALL_METHOD                     2
                        62      STORE_FAST                      7: own_annotations
                        64      LOAD_GLOBAL                     6: set
                        66      LOAD_FAST                       7: own_annotations
                        68      LOAD_METHOD                     7: keys
                        70      CALL_METHOD                     0
                        72      CALL_FUNCTION                   1
                        74      STORE_FAST                      8: own_annotation_keys
                        76      LOAD_CONST                      3: "TypedDict('Name', {f0: t0, f1: t1, ...}); each t must be a type"
                        78      STORE_DEREF                     0: msg
                        80      LOAD_CLOSURE                    0: msg
                        82      LOAD_CLOSURE                    1: tp_dict
                        84      BUILD_TUPLE                     2
                        86      LOAD_CONST                      4: <CODE> <dictcomp>
                        88      LOAD_CONST                      5: '_TypedDictMeta.__new__.<locals>.<dictcomp>'
                        90      MAKE_FUNCTION                   8
                        92      LOAD_FAST                       7: own_annotations
                        94      LOAD_METHOD                     8: items
                        96      CALL_METHOD                     0
                        98      GET_ITER                        
                        100     CALL_FUNCTION                   1
                        102     STORE_FAST                      7: own_annotations
                        104     LOAD_GLOBAL                     6: set
                        106     CALL_FUNCTION                   0
                        108     STORE_FAST                      9: required_keys
                        110     LOAD_GLOBAL                     6: set
                        112     CALL_FUNCTION                   0
                        114     STORE_FAST                      10: optional_keys
                        116     LOAD_FAST                       2: bases
                        118     GET_ITER                        
                        120     FOR_ITER                        32 (to 186)
                        122     STORE_FAST                      5: base
                        124     LOAD_FAST                       6: annotations
                        126     LOAD_METHOD                     9: update
                        128     LOAD_FAST                       5: base
                        130     LOAD_ATTR                       10: __dict__
                        132     LOAD_METHOD                     5: get
                        134     LOAD_CONST                      2: '__annotations__'
                        136     BUILD_MAP                       0
                        138     CALL_METHOD                     2
                        140     CALL_METHOD                     1
                        142     POP_TOP                         
                        144     LOAD_FAST                       9: required_keys
                        146     LOAD_METHOD                     9: update
                        148     LOAD_FAST                       5: base
                        150     LOAD_ATTR                       10: __dict__
                        152     LOAD_METHOD                     5: get
                        154     LOAD_CONST                      6: '__required_keys__'
                        156     LOAD_CONST                      7: ()
                        158     CALL_METHOD                     2
                        160     CALL_METHOD                     1
                        162     POP_TOP                         
                        164     LOAD_FAST                       10: optional_keys
                        166     LOAD_METHOD                     9: update
                        168     LOAD_FAST                       5: base
                        170     LOAD_ATTR                       10: __dict__
                        172     LOAD_METHOD                     5: get
                        174     LOAD_CONST                      8: '__optional_keys__'
                        176     LOAD_CONST                      7: ()
                        178     CALL_METHOD                     2
                        180     CALL_METHOD                     1
                        182     POP_TOP                         
                        184     JUMP_ABSOLUTE                   60 (to 120)
                        186     LOAD_FAST                       6: annotations
                        188     LOAD_METHOD                     9: update
                        190     LOAD_FAST                       7: own_annotations
                        192     CALL_METHOD                     1
                        194     POP_TOP                         
                        196     LOAD_FAST                       4: total
                        198     POP_JUMP_IF_FALSE               106 (to 212)
                        200     LOAD_FAST                       9: required_keys
                        202     LOAD_METHOD                     9: update
                        204     LOAD_FAST                       8: own_annotation_keys
                        206     CALL_METHOD                     1
                        208     POP_TOP                         
                        210     JUMP_FORWARD                    5 (to 222)
                        212     LOAD_FAST                       10: optional_keys
                        214     LOAD_METHOD                     9: update
                        216     LOAD_FAST                       8: own_annotation_keys
                        218     CALL_METHOD                     1
                        220     POP_TOP                         
                        222     LOAD_FAST                       6: annotations
                        224     LOAD_DEREF                      1: tp_dict
                        226     STORE_ATTR                      11: __annotations__
                        228     LOAD_GLOBAL                     12: frozenset
                        230     LOAD_FAST                       9: required_keys
                        232     CALL_FUNCTION                   1
                        234     LOAD_DEREF                      1: tp_dict
                        236     STORE_ATTR                      13: __required_keys__
                        238     LOAD_GLOBAL                     12: frozenset
                        240     LOAD_FAST                       10: optional_keys
                        242     CALL_FUNCTION                   1
                        244     LOAD_DEREF                      1: tp_dict
                        246     STORE_ATTR                      14: __optional_keys__
                        248     LOAD_GLOBAL                     15: hasattr
                        250     LOAD_DEREF                      1: tp_dict
                        252     LOAD_CONST                      9: '__total__'
                        254     CALL_FUNCTION                   2
                        256     POP_JUMP_IF_TRUE                132 (to 264)
                        258     LOAD_FAST                       4: total
                        260     LOAD_DEREF                      1: tp_dict
                        262     STORE_ATTR                      16: __total__
                        264     LOAD_DEREF                      1: tp_dict
                        266     RETURN_VALUE                    
                '_TypedDictMeta.__new__'
                [Code]
                    File Name: typing.py
                    Object Name: __subclasscheck__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'TypeError'
                    [Var Names]
                        'cls'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'TypedDict does not support instance and class checks'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: TypeError
                        2       LOAD_CONST                      1: 'TypedDict does not support instance and class checks'
                        4       CALL_FUNCTION                   1
                        6       RAISE_VARARGS                   1
                '_TypedDictMeta.__subclasscheck__'
                None
                (
                    True
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_TypedDictMeta'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      7: (True,)
                10      LOAD_CONST                      2: <CODE> __new__
                12      LOAD_CONST                      3: '_TypedDictMeta.__new__'
                14      MAKE_FUNCTION                   1
                16      STORE_NAME                      3: __new__
                18      LOAD_NAME                       4: dict
                20      STORE_NAME                      5: __call__
                22      LOAD_CONST                      4: <CODE> __subclasscheck__
                24      LOAD_CONST                      5: '_TypedDictMeta.__subclasscheck__'
                26      MAKE_FUNCTION                   0
                28      STORE_NAME                      6: __subclasscheck__
                30      LOAD_NAME                       6: __subclasscheck__
                32      STORE_NAME                      7: __instancecheck__
                34      LOAD_CONST                      6: None
                36      RETURN_VALUE                    
        '_TypedDictMeta'
        (
            'total'
        )
        [Code]
            File Name: typing.py
            Object Name: TypedDict
            Arg Count: 2
            Pos Only Arg Count: 2
            KW Only Arg Count: 1
            Locals: 5
            Stack Size: 9
            Flags: 0x0000004B (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'TypeError'
                'dict'
                'sys'
                '_getframe'
                'f_globals'
                'get'
                'AttributeError'
                'ValueError'
                '_TypedDictMeta'
            [Var Names]
                'typename'
                'fields'
                'total'
                'kwargs'
                'ns'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "A simple typed namespace. At runtime it is equivalent to a plain dict.\n\n    TypedDict creates a dictionary type that expects all of its\n    instances to have a certain set of keys, where each key is\n    associated with a value of a consistent type. This expectation\n    is not checked at runtime but is only enforced by type checkers.\n    Usage::\n\n        class Point2D(TypedDict):\n            x: int\n            y: int\n            label: str\n\n        a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n        b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n\n        assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')\n\n    The type info can be accessed via the Point2D.__annotations__ dict, and\n    the Point2D.__required_keys__ and Point2D.__optional_keys__ frozensets.\n    TypedDict supports two additional equivalent forms::\n\n        Point2D = TypedDict('Point2D', x=int, y=int, label=str)\n        Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})\n\n    By default, all keys must be present in a TypedDict. It is possible\n    to override this by specifying totality.\n    Usage::\n\n        class point2D(TypedDict, total=False):\n            x: int\n            y: int\n\n    This means that a point2D TypedDict can have any of the keys omitted.A type\n    checker is only expected to support a literal False or True as the value of\n    the total argument. True is the default, and makes all items defined in the\n    class body be required.\n\n    The class syntax is only supported in Python 3.6+, while two other\n    syntax forms work for Python 2.7 and 3.2+\n    "
                None
                'TypedDict takes either a dict or keyword arguments, but not both'
                '__annotations__'
                1
                '__name__'
                '__main__'
                '__module__'
                (
                )
                (
                    'total'
                )
            [Disassembly]
                0       LOAD_FAST                       1: fields
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               7 (to 14)
                8       LOAD_FAST                       3: kwargs
                10      STORE_FAST                      1: fields
                12      JUMP_FORWARD                    6 (to 26)
                14      LOAD_FAST                       3: kwargs
                16      POP_JUMP_IF_FALSE               13 (to 26)
                18      LOAD_GLOBAL                     0: TypeError
                20      LOAD_CONST                      2: 'TypedDict takes either a dict or keyword arguments, but not both'
                22      CALL_FUNCTION                   1
                24      RAISE_VARARGS                   1
                26      LOAD_CONST                      3: '__annotations__'
                28      LOAD_GLOBAL                     1: dict
                30      LOAD_FAST                       1: fields
                32      CALL_FUNCTION                   1
                34      BUILD_MAP                       1
                36      STORE_FAST                      4: ns
                38      SETUP_FINALLY                   14 (to 68)
                40      LOAD_GLOBAL                     2: sys
                42      LOAD_METHOD                     3: _getframe
                44      LOAD_CONST                      4: 1
                46      CALL_METHOD                     1
                48      LOAD_ATTR                       4: f_globals
                50      LOAD_METHOD                     5: get
                52      LOAD_CONST                      5: '__name__'
                54      LOAD_CONST                      6: '__main__'
                56      CALL_METHOD                     2
                58      LOAD_FAST                       4: ns
                60      LOAD_CONST                      7: '__module__'
                62      STORE_SUBSCR                    
                64      POP_BLOCK                       
                66      JUMP_FORWARD                    11 (to 90)
                68      DUP_TOP                         
                70      LOAD_GLOBAL                     6: AttributeError
                72      LOAD_GLOBAL                     7: ValueError
                74      BUILD_TUPLE                     2
                76      JUMP_IF_NOT_EXC_MATCH           44 (to 88)
                78      POP_TOP                         
                80      POP_TOP                         
                82      POP_TOP                         
                84      POP_EXCEPT                      
                86      JUMP_FORWARD                    1 (to 90)
                88      RERAISE                         0
                90      LOAD_GLOBAL                     8: _TypedDictMeta
                92      LOAD_FAST                       0: typename
                94      LOAD_CONST                      8: ()
                96      LOAD_FAST                       4: ns
                98      LOAD_FAST                       2: total
                100     LOAD_CONST                      9: ('total',)
                102     CALL_FUNCTION_KW                4
                104     RETURN_VALUE                    
        'TypedDict'
        [Code]
            File Name: typing.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_TypedDict'
            [Var Names]
                'bases'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _TypedDict
                2       BUILD_TUPLE                     1
                4       RETURN_VALUE                    
        '<lambda>'
        [Code]
            File Name: typing.py
            Object Name: NewType
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__repr__'
                '__call__'
                '__reduce__'
                '__or__'
                '__ror__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'NewType'
                "NewType creates simple unique types with almost zero\n    runtime overhead. NewType(name, tp) is considered a subtype of tp\n    by static type checkers. At runtime, NewType(name, tp) returns\n    a dummy callable that simply returns its argument. Usage::\n\n        UserId = NewType('UserId', int)\n\n        def name_by_id(user_id: UserId) -> str:\n            ...\n\n        UserId('user')          # Fails type check\n\n        name_by_id(42)          # Fails type check\n        name_by_id(UserId(42))  # OK\n\n        num = UserId(5) + 1     # type: int\n    "
                [Code]
                    File Name: typing.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__qualname__'
                        'rpartition'
                        '__name__'
                        '__supertype__'
                        '_caller'
                        '__module__'
                    [Var Names]
                        'self'
                        'name'
                        'tp'
                        'def_mod'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '.'
                        -1
                        'typing'
                    [Disassembly]
                        0       LOAD_FAST                       1: name
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: __qualname__
                        6       LOAD_CONST                      1: '.'
                        8       LOAD_FAST                       1: name
                        10      CONTAINS_OP                     0 (in)
                        12      POP_JUMP_IF_FALSE               14 (to 28)
                        14      LOAD_FAST                       1: name
                        16      LOAD_METHOD                     1: rpartition
                        18      LOAD_CONST                      1: '.'
                        20      CALL_METHOD                     1
                        22      LOAD_CONST                      2: -1
                        24      BINARY_SUBSCR                   
                        26      STORE_FAST                      1: name
                        28      LOAD_FAST                       1: name
                        30      LOAD_FAST                       0: self
                        32      STORE_ATTR                      2: __name__
                        34      LOAD_FAST                       2: tp
                        36      LOAD_FAST                       0: self
                        38      STORE_ATTR                      3: __supertype__
                        40      LOAD_GLOBAL                     4: _caller
                        42      CALL_FUNCTION                   0
                        44      STORE_FAST                      3: def_mod
                        46      LOAD_FAST                       3: def_mod
                        48      LOAD_CONST                      3: 'typing'
                        50      COMPARE_OP                      3 (!=)
                        52      POP_JUMP_IF_FALSE               32 (to 64)
                        54      LOAD_FAST                       3: def_mod
                        56      LOAD_FAST                       0: self
                        58      STORE_ATTR                      5: __module__
                        60      LOAD_CONST                      0: None
                        62      RETURN_VALUE                    
                        64      LOAD_CONST                      0: None
                        66      RETURN_VALUE                    
                'NewType.__init__'
                [Code]
                    File Name: typing.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__module__'
                        '__qualname__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __module__
                        4       FORMAT_VALUE                    0 (FVC_NONE)
                        6       LOAD_CONST                      1: '.'
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: __qualname__
                        12      FORMAT_VALUE                    0 (FVC_NONE)
                        14      BUILD_STRING                    3
                        16      RETURN_VALUE                    
                'NewType.__repr__'
                [Code]
                    File Name: typing.py
                    Object Name: __call__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: x
                        2       RETURN_VALUE                    
                'NewType.__call__'
                [Code]
                    File Name: typing.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__qualname__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __qualname__
                        4       RETURN_VALUE                    
                'NewType.__reduce__'
                [Code]
                    File Name: typing.py
                    Object Name: __or__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Union'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Union
                        2       LOAD_FAST                       0: self
                        4       LOAD_FAST                       1: other
                        6       BUILD_TUPLE                     2
                        8       BINARY_SUBSCR                   
                        10      RETURN_VALUE                    
                'NewType.__or__'
                [Code]
                    File Name: typing.py
                    Object Name: __ror__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'Union'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: Union
                        2       LOAD_FAST                       1: other
                        4       LOAD_FAST                       0: self
                        6       BUILD_TUPLE                     2
                        8       BINARY_SUBSCR                   
                        10      RETURN_VALUE                    
                'NewType.__ror__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'NewType'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "NewType creates simple unique types with almost zero\n    runtime overhead. NewType(name, tp) is considered a subtype of tp\n    by static type checkers. At runtime, NewType(name, tp) returns\n    a dummy callable that simply returns its argument. Usage::\n\n        UserId = NewType('UserId', int)\n\n        def name_by_id(user_id: UserId) -> str:\n            ...\n\n        UserId('user')          # Fails type check\n\n        name_by_id(42)          # Fails type check\n        name_by_id(UserId(42))  # OK\n\n        num = UserId(5) + 1     # type: int\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'NewType.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __repr__
                22      LOAD_CONST                      5: 'NewType.__repr__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __repr__
                28      LOAD_CONST                      6: <CODE> __call__
                30      LOAD_CONST                      7: 'NewType.__call__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __call__
                36      LOAD_CONST                      8: <CODE> __reduce__
                38      LOAD_CONST                      9: 'NewType.__reduce__'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: __reduce__
                44      LOAD_CONST                      10: <CODE> __or__
                46      LOAD_CONST                      11: 'NewType.__or__'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      8: __or__
                52      LOAD_CONST                      12: <CODE> __ror__
                54      LOAD_CONST                      13: 'NewType.__ror__'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      9: __ror__
                60      LOAD_CONST                      14: None
                62      RETURN_VALUE                    
        'NewType'
        [Code]
            File Name: typing.py
            Object Name: IO
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 8
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'property'
                'abstractmethod'
                'str'
                'mode'
                'name'
                'close'
                'bool'
                'closed'
                'int'
                'fileno'
                'flush'
                'isatty'
                'AnyStr'
                'read'
                'readable'
                'readline'
                'List'
                'readlines'
                'seek'
                'seekable'
                'tell'
                'truncate'
                'writable'
                'write'
                'writelines'
                '__enter__'
                '__exit__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'IO'
                'Generic base class for TextIO and BinaryIO.\n\n    This is an abstract, generic version of the return of open().\n\n    NOTE: This does not distinguish between the different possible\n    classes (text vs. binary, read vs. write vs. read/write,\n    append-only, unbuffered).  The TextIO and BinaryIO subclasses\n    below capture the distinctions between text vs. binary, which is\n    pervasive in the interface; however we currently do not offer a\n    way to track the other distinctions in the type system.\n    '
                (
                )
                'return'
                [Code]
                    File Name: typing.py
                    Object Name: mode
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.mode'
                [Code]
                    File Name: typing.py
                    Object Name: name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.name'
                None
                [Code]
                    File Name: typing.py
                    Object Name: close
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.close'
                [Code]
                    File Name: typing.py
                    Object Name: closed
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.closed'
                [Code]
                    File Name: typing.py
                    Object Name: fileno
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.fileno'
                [Code]
                    File Name: typing.py
                    Object Name: flush
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.flush'
                [Code]
                    File Name: typing.py
                    Object Name: isatty
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.isatty'
                -1
                'n'
                [Code]
                    File Name: typing.py
                    Object Name: read
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'n'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.read'
                [Code]
                    File Name: typing.py
                    Object Name: readable
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.readable'
                'limit'
                [Code]
                    File Name: typing.py
                    Object Name: readline
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'limit'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.readline'
                'hint'
                [Code]
                    File Name: typing.py
                    Object Name: readlines
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'hint'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.readlines'
                0
                'offset'
                'whence'
                [Code]
                    File Name: typing.py
                    Object Name: seek
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'offset'
                        'whence'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.seek'
                [Code]
                    File Name: typing.py
                    Object Name: seekable
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.seekable'
                [Code]
                    File Name: typing.py
                    Object Name: tell
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.tell'
                'size'
                [Code]
                    File Name: typing.py
                    Object Name: truncate
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'size'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.truncate'
                [Code]
                    File Name: typing.py
                    Object Name: writable
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.writable'
                's'
                [Code]
                    File Name: typing.py
                    Object Name: write
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        's'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.write'
                'lines'
                [Code]
                    File Name: typing.py
                    Object Name: writelines
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'lines'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.writelines'
                'IO[AnyStr]'
                [Code]
                    File Name: typing.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.__enter__'
                [Code]
                    File Name: typing.py
                    Object Name: __exit__
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        'type'
                        'value'
                        'traceback'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'IO.__exit__'
                (
                    'return'
                    None
                )
                (
                    -1
                )
                (
                    0
                )
                (
                    None
                )
                (
                    'return'
                    'IO[AnyStr]'
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'IO'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Generic base class for TextIO and BinaryIO.\n\n    This is an abstract, generic version of the return of open().\n\n    NOTE: This does not distinguish between the different possible\n    classes (text vs. binary, read vs. write vs. read/write,\n    append-only, unbuffered).  The TextIO and BinaryIO subclasses\n    below capture the distinctions between text vs. binary, which is\n    pervasive in the interface; however we currently do not offer a\n    way to track the other distinctions in the type system.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: property
                18      LOAD_NAME                       6: abstractmethod
                20      LOAD_CONST                      3: 'return'
                22      LOAD_NAME                       7: str
                24      BUILD_TUPLE                     2
                26      LOAD_CONST                      4: <CODE> mode
                28      LOAD_CONST                      5: 'IO.mode'
                30      MAKE_FUNCTION                   4
                32      CALL_FUNCTION                   1
                34      CALL_FUNCTION                   1
                36      STORE_NAME                      8: mode
                38      LOAD_NAME                       5: property
                40      LOAD_NAME                       6: abstractmethod
                42      LOAD_CONST                      3: 'return'
                44      LOAD_NAME                       7: str
                46      BUILD_TUPLE                     2
                48      LOAD_CONST                      6: <CODE> name
                50      LOAD_CONST                      7: 'IO.name'
                52      MAKE_FUNCTION                   4
                54      CALL_FUNCTION                   1
                56      CALL_FUNCTION                   1
                58      STORE_NAME                      9: name
                60      LOAD_NAME                       6: abstractmethod
                62      LOAD_CONST                      56: ('return', None)
                64      LOAD_CONST                      9: <CODE> close
                66      LOAD_CONST                      10: 'IO.close'
                68      MAKE_FUNCTION                   4
                70      CALL_FUNCTION                   1
                72      STORE_NAME                      10: close
                74      LOAD_NAME                       5: property
                76      LOAD_NAME                       6: abstractmethod
                78      LOAD_CONST                      3: 'return'
                80      LOAD_NAME                       11: bool
                82      BUILD_TUPLE                     2
                84      LOAD_CONST                      11: <CODE> closed
                86      LOAD_CONST                      12: 'IO.closed'
                88      MAKE_FUNCTION                   4
                90      CALL_FUNCTION                   1
                92      CALL_FUNCTION                   1
                94      STORE_NAME                      12: closed
                96      LOAD_NAME                       6: abstractmethod
                98      LOAD_CONST                      3: 'return'
                100     LOAD_NAME                       13: int
                102     BUILD_TUPLE                     2
                104     LOAD_CONST                      13: <CODE> fileno
                106     LOAD_CONST                      14: 'IO.fileno'
                108     MAKE_FUNCTION                   4
                110     CALL_FUNCTION                   1
                112     STORE_NAME                      14: fileno
                114     LOAD_NAME                       6: abstractmethod
                116     LOAD_CONST                      56: ('return', None)
                118     LOAD_CONST                      15: <CODE> flush
                120     LOAD_CONST                      16: 'IO.flush'
                122     MAKE_FUNCTION                   4
                124     CALL_FUNCTION                   1
                126     STORE_NAME                      15: flush
                128     LOAD_NAME                       6: abstractmethod
                130     LOAD_CONST                      3: 'return'
                132     LOAD_NAME                       11: bool
                134     BUILD_TUPLE                     2
                136     LOAD_CONST                      17: <CODE> isatty
                138     LOAD_CONST                      18: 'IO.isatty'
                140     MAKE_FUNCTION                   4
                142     CALL_FUNCTION                   1
                144     STORE_NAME                      16: isatty
                146     LOAD_NAME                       6: abstractmethod
                148     LOAD_CONST                      57: (-1,)
                150     LOAD_CONST                      20: 'n'
                152     LOAD_NAME                       13: int
                154     LOAD_CONST                      3: 'return'
                156     LOAD_NAME                       17: AnyStr
                158     BUILD_TUPLE                     4
                160     LOAD_CONST                      21: <CODE> read
                162     LOAD_CONST                      22: 'IO.read'
                164     MAKE_FUNCTION                   5
                166     CALL_FUNCTION                   1
                168     STORE_NAME                      18: read
                170     LOAD_NAME                       6: abstractmethod
                172     LOAD_CONST                      3: 'return'
                174     LOAD_NAME                       11: bool
                176     BUILD_TUPLE                     2
                178     LOAD_CONST                      23: <CODE> readable
                180     LOAD_CONST                      24: 'IO.readable'
                182     MAKE_FUNCTION                   4
                184     CALL_FUNCTION                   1
                186     STORE_NAME                      19: readable
                188     LOAD_NAME                       6: abstractmethod
                190     LOAD_CONST                      57: (-1,)
                192     LOAD_CONST                      25: 'limit'
                194     LOAD_NAME                       13: int
                196     LOAD_CONST                      3: 'return'
                198     LOAD_NAME                       17: AnyStr
                200     BUILD_TUPLE                     4
                202     LOAD_CONST                      26: <CODE> readline
                204     LOAD_CONST                      27: 'IO.readline'
                206     MAKE_FUNCTION                   5
                208     CALL_FUNCTION                   1
                210     STORE_NAME                      20: readline
                212     LOAD_NAME                       6: abstractmethod
                214     LOAD_CONST                      57: (-1,)
                216     LOAD_CONST                      28: 'hint'
                218     LOAD_NAME                       13: int
                220     LOAD_CONST                      3: 'return'
                222     LOAD_NAME                       21: List
                224     LOAD_NAME                       17: AnyStr
                226     BINARY_SUBSCR                   
                228     BUILD_TUPLE                     4
                230     LOAD_CONST                      29: <CODE> readlines
                232     LOAD_CONST                      30: 'IO.readlines'
                234     MAKE_FUNCTION                   5
                236     CALL_FUNCTION                   1
                238     STORE_NAME                      22: readlines
                240     LOAD_NAME                       6: abstractmethod
                242     LOAD_CONST                      58: (0,)
                244     LOAD_CONST                      32: 'offset'
                246     LOAD_NAME                       13: int
                248     LOAD_CONST                      33: 'whence'
                250     LOAD_NAME                       13: int
                252     LOAD_CONST                      3: 'return'
                254     LOAD_NAME                       13: int
                256     BUILD_TUPLE                     6
                258     LOAD_CONST                      34: <CODE> seek
                260     LOAD_CONST                      35: 'IO.seek'
                262     MAKE_FUNCTION                   5
                264     CALL_FUNCTION                   1
                266     STORE_NAME                      23: seek
                268     LOAD_NAME                       6: abstractmethod
                270     LOAD_CONST                      3: 'return'
                272     LOAD_NAME                       11: bool
                274     BUILD_TUPLE                     2
                276     LOAD_CONST                      36: <CODE> seekable
                278     LOAD_CONST                      37: 'IO.seekable'
                280     MAKE_FUNCTION                   4
                282     CALL_FUNCTION                   1
                284     STORE_NAME                      24: seekable
                286     LOAD_NAME                       6: abstractmethod
                288     LOAD_CONST                      3: 'return'
                290     LOAD_NAME                       13: int
                292     BUILD_TUPLE                     2
                294     LOAD_CONST                      38: <CODE> tell
                296     LOAD_CONST                      39: 'IO.tell'
                298     MAKE_FUNCTION                   4
                300     CALL_FUNCTION                   1
                302     STORE_NAME                      25: tell
                304     LOAD_NAME                       6: abstractmethod
                306     LOAD_CONST                      59: (None,)
                308     LOAD_CONST                      40: 'size'
                310     LOAD_NAME                       13: int
                312     LOAD_CONST                      3: 'return'
                314     LOAD_NAME                       13: int
                316     BUILD_TUPLE                     4
                318     LOAD_CONST                      41: <CODE> truncate
                320     LOAD_CONST                      42: 'IO.truncate'
                322     MAKE_FUNCTION                   5
                324     CALL_FUNCTION                   1
                326     STORE_NAME                      26: truncate
                328     LOAD_NAME                       6: abstractmethod
                330     LOAD_CONST                      3: 'return'
                332     LOAD_NAME                       11: bool
                334     BUILD_TUPLE                     2
                336     LOAD_CONST                      43: <CODE> writable
                338     LOAD_CONST                      44: 'IO.writable'
                340     MAKE_FUNCTION                   4
                342     CALL_FUNCTION                   1
                344     STORE_NAME                      27: writable
                346     LOAD_NAME                       6: abstractmethod
                348     LOAD_CONST                      45: 's'
                350     LOAD_NAME                       17: AnyStr
                352     LOAD_CONST                      3: 'return'
                354     LOAD_NAME                       13: int
                356     BUILD_TUPLE                     4
                358     LOAD_CONST                      46: <CODE> write
                360     LOAD_CONST                      47: 'IO.write'
                362     MAKE_FUNCTION                   4
                364     CALL_FUNCTION                   1
                366     STORE_NAME                      28: write
                368     LOAD_NAME                       6: abstractmethod
                370     LOAD_CONST                      48: 'lines'
                372     LOAD_NAME                       21: List
                374     LOAD_NAME                       17: AnyStr
                376     BINARY_SUBSCR                   
                378     LOAD_CONST                      3: 'return'
                380     LOAD_CONST                      8: None
                382     BUILD_TUPLE                     4
                384     LOAD_CONST                      49: <CODE> writelines
                386     LOAD_CONST                      50: 'IO.writelines'
                388     MAKE_FUNCTION                   4
                390     CALL_FUNCTION                   1
                392     STORE_NAME                      29: writelines
                394     LOAD_NAME                       6: abstractmethod
                396     LOAD_CONST                      60: ('return', 'IO[AnyStr]')
                398     LOAD_CONST                      52: <CODE> __enter__
                400     LOAD_CONST                      53: 'IO.__enter__'
                402     MAKE_FUNCTION                   4
                404     CALL_FUNCTION                   1
                406     STORE_NAME                      30: __enter__
                408     LOAD_NAME                       6: abstractmethod
                410     LOAD_CONST                      56: ('return', None)
                412     LOAD_CONST                      54: <CODE> __exit__
                414     LOAD_CONST                      55: 'IO.__exit__'
                416     MAKE_FUNCTION                   4
                418     CALL_FUNCTION                   1
                420     STORE_NAME                      31: __exit__
                422     LOAD_CONST                      8: None
                424     RETURN_VALUE                    
        'IO'
        [Code]
            File Name: typing.py
            Object Name: BinaryIO
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 5
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'abstractmethod'
                'Union'
                'bytes'
                'bytearray'
                'int'
                'write'
                '__enter__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'BinaryIO'
                'Typed version of the return of open() in binary mode.'
                (
                )
                's'
                'return'
                [Code]
                    File Name: typing.py
                    Object Name: write
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                        's'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'BinaryIO.write'
                [Code]
                    File Name: typing.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'BinaryIO.__enter__'
                None
                (
                    'return'
                    'BinaryIO'
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'BinaryIO'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Typed version of the return of open() in binary mode.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: abstractmethod
                18      LOAD_CONST                      3: 's'
                20      LOAD_NAME                       6: Union
                22      LOAD_NAME                       7: bytes
                24      LOAD_NAME                       8: bytearray
                26      BUILD_TUPLE                     2
                28      BINARY_SUBSCR                   
                30      LOAD_CONST                      4: 'return'
                32      LOAD_NAME                       9: int
                34      BUILD_TUPLE                     4
                36      LOAD_CONST                      5: <CODE> write
                38      LOAD_CONST                      6: 'BinaryIO.write'
                40      MAKE_FUNCTION                   4
                42      CALL_FUNCTION                   1
                44      STORE_NAME                      10: write
                46      LOAD_NAME                       5: abstractmethod
                48      LOAD_CONST                      10: ('return', 'BinaryIO')
                50      LOAD_CONST                      7: <CODE> __enter__
                52      LOAD_CONST                      8: 'BinaryIO.__enter__'
                54      MAKE_FUNCTION                   4
                56      CALL_FUNCTION                   1
                58      STORE_NAME                      11: __enter__
                60      LOAD_CONST                      9: None
                62      RETURN_VALUE                    
        'BinaryIO'
        [Code]
            File Name: typing.py
            Object Name: TextIO
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 5
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'property'
                'abstractmethod'
                'BinaryIO'
                'buffer'
                'str'
                'encoding'
                'Optional'
                'errors'
                'bool'
                'line_buffering'
                'Any'
                'newlines'
                '__enter__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'TextIO'
                'Typed version of the return of open() in text mode.'
                (
                )
                'return'
                [Code]
                    File Name: typing.py
                    Object Name: buffer
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'TextIO.buffer'
                [Code]
                    File Name: typing.py
                    Object Name: encoding
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'TextIO.encoding'
                [Code]
                    File Name: typing.py
                    Object Name: errors
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'TextIO.errors'
                [Code]
                    File Name: typing.py
                    Object Name: line_buffering
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'TextIO.line_buffering'
                [Code]
                    File Name: typing.py
                    Object Name: newlines
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'TextIO.newlines'
                [Code]
                    File Name: typing.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'TextIO.__enter__'
                None
                (
                    'return'
                    'TextIO'
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'TextIO'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Typed version of the return of open() in text mode.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: property
                18      LOAD_NAME                       6: abstractmethod
                20      LOAD_CONST                      3: 'return'
                22      LOAD_NAME                       7: BinaryIO
                24      BUILD_TUPLE                     2
                26      LOAD_CONST                      4: <CODE> buffer
                28      LOAD_CONST                      5: 'TextIO.buffer'
                30      MAKE_FUNCTION                   4
                32      CALL_FUNCTION                   1
                34      CALL_FUNCTION                   1
                36      STORE_NAME                      8: buffer
                38      LOAD_NAME                       5: property
                40      LOAD_NAME                       6: abstractmethod
                42      LOAD_CONST                      3: 'return'
                44      LOAD_NAME                       9: str
                46      BUILD_TUPLE                     2
                48      LOAD_CONST                      6: <CODE> encoding
                50      LOAD_CONST                      7: 'TextIO.encoding'
                52      MAKE_FUNCTION                   4
                54      CALL_FUNCTION                   1
                56      CALL_FUNCTION                   1
                58      STORE_NAME                      10: encoding
                60      LOAD_NAME                       5: property
                62      LOAD_NAME                       6: abstractmethod
                64      LOAD_CONST                      3: 'return'
                66      LOAD_NAME                       11: Optional
                68      LOAD_NAME                       9: str
                70      BINARY_SUBSCR                   
                72      BUILD_TUPLE                     2
                74      LOAD_CONST                      8: <CODE> errors
                76      LOAD_CONST                      9: 'TextIO.errors'
                78      MAKE_FUNCTION                   4
                80      CALL_FUNCTION                   1
                82      CALL_FUNCTION                   1
                84      STORE_NAME                      12: errors
                86      LOAD_NAME                       5: property
                88      LOAD_NAME                       6: abstractmethod
                90      LOAD_CONST                      3: 'return'
                92      LOAD_NAME                       13: bool
                94      BUILD_TUPLE                     2
                96      LOAD_CONST                      10: <CODE> line_buffering
                98      LOAD_CONST                      11: 'TextIO.line_buffering'
                100     MAKE_FUNCTION                   4
                102     CALL_FUNCTION                   1
                104     CALL_FUNCTION                   1
                106     STORE_NAME                      14: line_buffering
                108     LOAD_NAME                       5: property
                110     LOAD_NAME                       6: abstractmethod
                112     LOAD_CONST                      3: 'return'
                114     LOAD_NAME                       15: Any
                116     BUILD_TUPLE                     2
                118     LOAD_CONST                      12: <CODE> newlines
                120     LOAD_CONST                      13: 'TextIO.newlines'
                122     MAKE_FUNCTION                   4
                124     CALL_FUNCTION                   1
                126     CALL_FUNCTION                   1
                128     STORE_NAME                      16: newlines
                130     LOAD_NAME                       6: abstractmethod
                132     LOAD_CONST                      17: ('return', 'TextIO')
                134     LOAD_CONST                      14: <CODE> __enter__
                136     LOAD_CONST                      15: 'TextIO.__enter__'
                138     MAKE_FUNCTION                   4
                140     CALL_FUNCTION                   1
                142     STORE_NAME                      17: __enter__
                144     LOAD_CONST                      16: None
                146     RETURN_VALUE                    
        'TextIO'
        [Code]
            File Name: typing.py
            Object Name: io
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__all__'
                'IO'
                'TextIO'
                'BinaryIO'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'io'
                'Wrapper namespace for IO generic classes.'
                (
                    'IO'
                    'TextIO'
                    'BinaryIO'
                )
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'io'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Wrapper namespace for IO generic classes.'
                10      STORE_NAME                      3: __doc__
                12      BUILD_LIST                      0
                14      LOAD_CONST                      2: ('IO', 'TextIO', 'BinaryIO')
                16      LIST_EXTEND                     1
                18      STORE_NAME                      4: __all__
                20      LOAD_NAME                       5: IO
                22      STORE_NAME                      5: IO
                24      LOAD_NAME                       6: TextIO
                26      STORE_NAME                      6: TextIO
                28      LOAD_NAME                       7: BinaryIO
                30      STORE_NAME                      7: BinaryIO
                32      LOAD_CONST                      3: None
                34      RETURN_VALUE                    
        'io'
        '.io'
        [Code]
            File Name: typing.py
            Object Name: re
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__all__'
                'Pattern'
                'Match'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                're'
                'Wrapper namespace for re type aliases.'
                'Pattern'
                'Match'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 're'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Wrapper namespace for re type aliases.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: 'Pattern'
                14      LOAD_CONST                      3: 'Match'
                16      BUILD_LIST                      2
                18      STORE_NAME                      4: __all__
                20      LOAD_NAME                       5: Pattern
                22      STORE_NAME                      5: Pattern
                24      LOAD_NAME                       6: Match
                26      STORE_NAME                      6: Match
                28      LOAD_CONST                      4: None
                30      RETURN_VALUE                    
        're'
        '.re'
        (
            None
        )
        (
            True
            None
        )
        (
            1
            '__main__'
        )
        (
            3
        )
        (
            None
            None
            False
        )
        (
            (
            )
        )
    [Disassembly]
        0       LOAD_CONST                      0: '\nThe typing module: Support for gradual typing as defined by PEP 484.\n\nAt large scale, the structure of the module is following:\n* Imports and exports, all public names should be explicitly added to __all__.\n* Internal helper functions: these should never be used in code outside this module.\n* _SpecialForm and its instances (special forms):\n  Any, NoReturn, ClassVar, Union, Optional, Concatenate\n* Classes whose instances can be type arguments in addition to types:\n  ForwardRef, TypeVar and ParamSpec\n* The core of internal generics API: _GenericAlias and _VariadicGenericAlias, the latter is\n  currently only used by Tuple and Callable. All subscripted types like X[int], Union[int, str],\n  etc., are instances of either of these classes.\n* The public counterpart of the generics API consists of two classes: Generic and Protocol.\n* Public helper functions: get_type_hints, overload, cast, no_type_check,\n  no_type_check_decorator.\n* Generic aliases for collections.abc ABCs and few additional protocols.\n* Special types: NewType, NamedTuple, TypedDict.\n* Wrapper submodules for re and io related types.\n'
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: 0
        6       LOAD_CONST                      2: ('abstractmethod', 'ABCMeta')
        8       IMPORT_NAME                     1: abc
        10      IMPORT_FROM                     2: abstractmethod
        12      STORE_NAME                      2: abstractmethod
        14      IMPORT_FROM                     3: ABCMeta
        16      STORE_NAME                      3: ABCMeta
        18      POP_TOP                         
        20      LOAD_CONST                      1: 0
        22      LOAD_CONST                      3: None
        24      IMPORT_NAME                     4: collections
        26      STORE_NAME                      4: collections
        28      LOAD_CONST                      1: 0
        30      LOAD_CONST                      3: None
        32      IMPORT_NAME                     5: collections.abc
        34      STORE_NAME                      4: collections
        36      LOAD_CONST                      1: 0
        38      LOAD_CONST                      3: None
        40      IMPORT_NAME                     6: contextlib
        42      STORE_NAME                      6: contextlib
        44      LOAD_CONST                      1: 0
        46      LOAD_CONST                      3: None
        48      IMPORT_NAME                     7: functools
        50      STORE_NAME                      7: functools
        52      LOAD_CONST                      1: 0
        54      LOAD_CONST                      3: None
        56      IMPORT_NAME                     8: operator
        58      STORE_NAME                      8: operator
        60      LOAD_CONST                      1: 0
        62      LOAD_CONST                      3: None
        64      IMPORT_NAME                     9: re
        66      STORE_NAME                      10: stdlib_re
        68      LOAD_CONST                      1: 0
        70      LOAD_CONST                      3: None
        72      IMPORT_NAME                     11: sys
        74      STORE_NAME                      11: sys
        76      LOAD_CONST                      1: 0
        78      LOAD_CONST                      3: None
        80      IMPORT_NAME                     12: types
        82      STORE_NAME                      12: types
        84      LOAD_CONST                      1: 0
        86      LOAD_CONST                      4: ('WrapperDescriptorType', 'MethodWrapperType', 'MethodDescriptorType', 'GenericAlias')
        88      IMPORT_NAME                     12: types
        90      IMPORT_FROM                     13: WrapperDescriptorType
        92      STORE_NAME                      13: WrapperDescriptorType
        94      IMPORT_FROM                     14: MethodWrapperType
        96      STORE_NAME                      14: MethodWrapperType
        98      IMPORT_FROM                     15: MethodDescriptorType
        100     STORE_NAME                      15: MethodDescriptorType
        102     IMPORT_FROM                     16: GenericAlias
        104     STORE_NAME                      16: GenericAlias
        106     POP_TOP                         
        108     BUILD_LIST                      0
        110     LOAD_CONST                      5: ('Annotated', 'Any', 'Callable', 'ClassVar', 'Concatenate', 'Final', 'ForwardRef', 'Generic', 'Literal', 'Optional', 'ParamSpec', 'Protocol', 'Tuple', 'Type', 'TypeVar', 'Union', 'AbstractSet', 'ByteString', 'Container', 'ContextManager', 'Hashable', 'ItemsView', 'Iterable', 'Iterator', 'KeysView', 'Mapping', 'MappingView', 'MutableMapping', 'MutableSequence', 'MutableSet', 'Sequence', 'Sized', 'ValuesView', 'Awaitable', 'AsyncIterator', 'AsyncIterable', 'Coroutine', 'Collection', 'AsyncGenerator', 'AsyncContextManager', 'Reversible', 'SupportsAbs', 'SupportsBytes', 'SupportsComplex', 'SupportsFloat', 'SupportsIndex', 'SupportsInt', 'SupportsRound', 'ChainMap', 'Counter', 'Deque', 'Dict', 'DefaultDict', 'List', 'OrderedDict', 'Set', 'FrozenSet', 'NamedTuple', 'TypedDict', 'Generator', 'BinaryIO', 'IO', 'Match', 'Pattern', 'TextIO', 'AnyStr', 'cast', 'final', 'get_args', 'get_origin', 'get_type_hints', 'is_typeddict', 'NewType', 'no_type_check', 'no_type_check_decorator', 'NoReturn', 'overload', 'ParamSpecArgs', 'ParamSpecKwargs', 'runtime_checkable', 'Text', 'TYPE_CHECKING', 'TypeAlias', 'TypeGuard')
        112     LIST_EXTEND                     1
        114     STORE_NAME                      17: __all__
        116     LOAD_CONST                      234: (None,)
        118     LOAD_CONST                      6: False
        120     LOAD_CONST                      7: ('allow_special_forms',)
        122     BUILD_CONST_KEY_MAP             1
        124     LOAD_CONST                      8: <CODE> _type_convert
        126     LOAD_CONST                      9: '_type_convert'
        128     MAKE_FUNCTION                   3
        130     STORE_NAME                      18: _type_convert
        132     LOAD_CONST                      235: (True, None)
        134     LOAD_CONST                      6: False
        136     LOAD_CONST                      7: ('allow_special_forms',)
        138     BUILD_CONST_KEY_MAP             1
        140     LOAD_CONST                      11: <CODE> _type_check
        142     LOAD_CONST                      12: '_type_check'
        144     MAKE_FUNCTION                   3
        146     STORE_NAME                      19: _type_check
        148     LOAD_CONST                      13: <CODE> _is_param_expr
        150     LOAD_CONST                      14: '_is_param_expr'
        152     MAKE_FUNCTION                   0
        154     STORE_NAME                      20: _is_param_expr
        156     LOAD_CONST                      15: <CODE> _type_repr
        158     LOAD_CONST                      16: '_type_repr'
        160     MAKE_FUNCTION                   0
        162     STORE_NAME                      21: _type_repr
        164     LOAD_CONST                      234: (None,)
        166     LOAD_CONST                      17: <CODE> _collect_type_vars
        168     LOAD_CONST                      18: '_collect_type_vars'
        170     MAKE_FUNCTION                   1
        172     STORE_NAME                      22: _collect_type_vars
        174     LOAD_CONST                      19: <CODE> _check_generic
        176     LOAD_CONST                      20: '_check_generic'
        178     MAKE_FUNCTION                   0
        180     STORE_NAME                      23: _check_generic
        182     LOAD_CONST                      21: <CODE> _prepare_paramspec_params
        184     LOAD_CONST                      22: '_prepare_paramspec_params'
        186     MAKE_FUNCTION                   0
        188     STORE_NAME                      24: _prepare_paramspec_params
        190     LOAD_CONST                      23: <CODE> _deduplicate
        192     LOAD_CONST                      24: '_deduplicate'
        194     MAKE_FUNCTION                   0
        196     STORE_NAME                      25: _deduplicate
        198     LOAD_CONST                      25: <CODE> _remove_dups_flatten
        200     LOAD_CONST                      26: '_remove_dups_flatten'
        202     MAKE_FUNCTION                   0
        204     STORE_NAME                      26: _remove_dups_flatten
        206     LOAD_CONST                      27: <CODE> _flatten_literal_params
        208     LOAD_CONST                      28: '_flatten_literal_params'
        210     MAKE_FUNCTION                   0
        212     STORE_NAME                      27: _flatten_literal_params
        214     BUILD_LIST                      0
        216     STORE_NAME                      28: _cleanups
        218     LOAD_CONST                      234: (None,)
        220     LOAD_CONST                      6: False
        222     LOAD_CONST                      29: ('typed',)
        224     BUILD_CONST_KEY_MAP             1
        226     LOAD_CONST                      30: <CODE> _tp_cache
        228     LOAD_CONST                      31: '_tp_cache'
        230     MAKE_FUNCTION                   3
        232     STORE_NAME                      29: _tp_cache
        234     LOAD_NAME                       30: frozenset
        236     CALL_FUNCTION                   0
        238     BUILD_TUPLE                     1
        240     LOAD_CONST                      32: <CODE> _eval_type
        242     LOAD_CONST                      33: '_eval_type'
        244     MAKE_FUNCTION                   1
        246     STORE_NAME                      31: _eval_type
        248     LOAD_BUILD_CLASS                
        250     LOAD_CONST                      34: <CODE> _Final
        252     LOAD_CONST                      35: '_Final'
        254     MAKE_FUNCTION                   0
        256     LOAD_CONST                      35: '_Final'
        258     CALL_FUNCTION                   2
        260     STORE_NAME                      32: _Final
        262     LOAD_BUILD_CLASS                
        264     LOAD_CONST                      36: <CODE> _Immutable
        266     LOAD_CONST                      37: '_Immutable'
        268     MAKE_FUNCTION                   0
        270     LOAD_CONST                      37: '_Immutable'
        272     CALL_FUNCTION                   2
        274     STORE_NAME                      33: _Immutable
        276     LOAD_BUILD_CLASS                
        278     LOAD_CONST                      38: <CODE> _SpecialForm
        280     LOAD_CONST                      39: '_SpecialForm'
        282     MAKE_FUNCTION                   0
        284     LOAD_CONST                      39: '_SpecialForm'
        286     LOAD_NAME                       32: _Final
        288     LOAD_CONST                      10: True
        290     LOAD_CONST                      40: ('_root',)
        292     CALL_FUNCTION_KW                4
        294     STORE_NAME                      34: _SpecialForm
        296     LOAD_BUILD_CLASS                
        298     LOAD_CONST                      41: <CODE> _LiteralSpecialForm
        300     LOAD_CONST                      42: '_LiteralSpecialForm'
        302     MAKE_FUNCTION                   0
        304     LOAD_CONST                      42: '_LiteralSpecialForm'
        306     LOAD_NAME                       34: _SpecialForm
        308     LOAD_CONST                      10: True
        310     LOAD_CONST                      40: ('_root',)
        312     CALL_FUNCTION_KW                4
        314     STORE_NAME                      35: _LiteralSpecialForm
        316     LOAD_NAME                       34: _SpecialForm
        318     LOAD_CONST                      43: <CODE> Any
        320     LOAD_CONST                      44: 'Any'
        322     MAKE_FUNCTION                   0
        324     CALL_FUNCTION                   1
        326     STORE_NAME                      36: Any
        328     LOAD_NAME                       34: _SpecialForm
        330     LOAD_CONST                      45: <CODE> NoReturn
        332     LOAD_CONST                      46: 'NoReturn'
        334     MAKE_FUNCTION                   0
        336     CALL_FUNCTION                   1
        338     STORE_NAME                      37: NoReturn
        340     LOAD_NAME                       34: _SpecialForm
        342     LOAD_CONST                      47: <CODE> ClassVar
        344     LOAD_CONST                      48: 'ClassVar'
        346     MAKE_FUNCTION                   0
        348     CALL_FUNCTION                   1
        350     STORE_NAME                      38: ClassVar
        352     LOAD_NAME                       34: _SpecialForm
        354     LOAD_CONST                      49: <CODE> Final
        356     LOAD_CONST                      50: 'Final'
        358     MAKE_FUNCTION                   0
        360     CALL_FUNCTION                   1
        362     STORE_NAME                      39: Final
        364     LOAD_NAME                       34: _SpecialForm
        366     LOAD_CONST                      51: <CODE> Union
        368     LOAD_CONST                      52: 'Union'
        370     MAKE_FUNCTION                   0
        372     CALL_FUNCTION                   1
        374     STORE_NAME                      40: Union
        376     LOAD_NAME                       34: _SpecialForm
        378     LOAD_CONST                      53: <CODE> Optional
        380     LOAD_CONST                      54: 'Optional'
        382     MAKE_FUNCTION                   0
        384     CALL_FUNCTION                   1
        386     STORE_NAME                      41: Optional
        388     LOAD_NAME                       35: _LiteralSpecialForm
        390     LOAD_NAME                       29: _tp_cache
        392     LOAD_CONST                      10: True
        394     LOAD_CONST                      29: ('typed',)
        396     CALL_FUNCTION_KW                1
        398     LOAD_CONST                      55: <CODE> Literal
        400     LOAD_CONST                      56: 'Literal'
        402     MAKE_FUNCTION                   0
        404     CALL_FUNCTION                   1
        406     CALL_FUNCTION                   1
        408     STORE_NAME                      42: Literal
        410     LOAD_NAME                       34: _SpecialForm
        412     LOAD_CONST                      57: <CODE> TypeAlias
        414     LOAD_CONST                      58: 'TypeAlias'
        416     MAKE_FUNCTION                   0
        418     CALL_FUNCTION                   1
        420     STORE_NAME                      43: TypeAlias
        422     LOAD_NAME                       34: _SpecialForm
        424     LOAD_CONST                      59: <CODE> Concatenate
        426     LOAD_CONST                      60: 'Concatenate'
        428     MAKE_FUNCTION                   0
        430     CALL_FUNCTION                   1
        432     STORE_NAME                      44: Concatenate
        434     LOAD_NAME                       34: _SpecialForm
        436     LOAD_CONST                      61: <CODE> TypeGuard
        438     LOAD_CONST                      62: 'TypeGuard'
        440     MAKE_FUNCTION                   0
        442     CALL_FUNCTION                   1
        444     STORE_NAME                      45: TypeGuard
        446     LOAD_BUILD_CLASS                
        448     LOAD_CONST                      63: <CODE> ForwardRef
        450     LOAD_CONST                      64: 'ForwardRef'
        452     MAKE_FUNCTION                   0
        454     LOAD_CONST                      64: 'ForwardRef'
        456     LOAD_NAME                       32: _Final
        458     LOAD_CONST                      10: True
        460     LOAD_CONST                      40: ('_root',)
        462     CALL_FUNCTION_KW                4
        464     STORE_NAME                      46: ForwardRef
        466     LOAD_BUILD_CLASS                
        468     LOAD_CONST                      65: <CODE> _TypeVarLike
        470     LOAD_CONST                      66: '_TypeVarLike'
        472     MAKE_FUNCTION                   0
        474     LOAD_CONST                      66: '_TypeVarLike'
        476     CALL_FUNCTION                   2
        478     STORE_NAME                      47: _TypeVarLike
        480     LOAD_BUILD_CLASS                
        482     LOAD_CONST                      67: <CODE> TypeVar
        484     LOAD_CONST                      68: 'TypeVar'
        486     MAKE_FUNCTION                   0
        488     LOAD_CONST                      68: 'TypeVar'
        490     LOAD_NAME                       32: _Final
        492     LOAD_NAME                       33: _Immutable
        494     LOAD_NAME                       47: _TypeVarLike
        496     LOAD_CONST                      10: True
        498     LOAD_CONST                      40: ('_root',)
        500     CALL_FUNCTION_KW                6
        502     STORE_NAME                      48: TypeVar
        504     LOAD_BUILD_CLASS                
        506     LOAD_CONST                      69: <CODE> ParamSpecArgs
        508     LOAD_CONST                      70: 'ParamSpecArgs'
        510     MAKE_FUNCTION                   0
        512     LOAD_CONST                      70: 'ParamSpecArgs'
        514     LOAD_NAME                       32: _Final
        516     LOAD_NAME                       33: _Immutable
        518     LOAD_CONST                      10: True
        520     LOAD_CONST                      40: ('_root',)
        522     CALL_FUNCTION_KW                5
        524     STORE_NAME                      49: ParamSpecArgs
        526     LOAD_BUILD_CLASS                
        528     LOAD_CONST                      71: <CODE> ParamSpecKwargs
        530     LOAD_CONST                      72: 'ParamSpecKwargs'
        532     MAKE_FUNCTION                   0
        534     LOAD_CONST                      72: 'ParamSpecKwargs'
        536     LOAD_NAME                       32: _Final
        538     LOAD_NAME                       33: _Immutable
        540     LOAD_CONST                      10: True
        542     LOAD_CONST                      40: ('_root',)
        544     CALL_FUNCTION_KW                5
        546     STORE_NAME                      50: ParamSpecKwargs
        548     LOAD_BUILD_CLASS                
        550     LOAD_CONST                      73: <CODE> ParamSpec
        552     LOAD_CONST                      74: 'ParamSpec'
        554     MAKE_FUNCTION                   0
        556     LOAD_CONST                      74: 'ParamSpec'
        558     LOAD_NAME                       32: _Final
        560     LOAD_NAME                       33: _Immutable
        562     LOAD_NAME                       47: _TypeVarLike
        564     LOAD_CONST                      10: True
        566     LOAD_CONST                      40: ('_root',)
        568     CALL_FUNCTION_KW                6
        570     STORE_NAME                      51: ParamSpec
        572     LOAD_CONST                      75: <CODE> _is_dunder
        574     LOAD_CONST                      76: '_is_dunder'
        576     MAKE_FUNCTION                   0
        578     STORE_NAME                      52: _is_dunder
        580     LOAD_BUILD_CLASS                
        582     LOAD_CONST                      77: <CODE> _BaseGenericAlias
        584     LOAD_CONST                      78: '_BaseGenericAlias'
        586     MAKE_FUNCTION                   0
        588     LOAD_CONST                      78: '_BaseGenericAlias'
        590     LOAD_NAME                       32: _Final
        592     LOAD_CONST                      10: True
        594     LOAD_CONST                      40: ('_root',)
        596     CALL_FUNCTION_KW                4
        598     STORE_NAME                      53: _BaseGenericAlias
        600     LOAD_BUILD_CLASS                
        602     LOAD_CONST                      79: <CODE> _GenericAlias
        604     LOAD_CONST                      80: '_GenericAlias'
        606     MAKE_FUNCTION                   0
        608     LOAD_CONST                      80: '_GenericAlias'
        610     LOAD_NAME                       53: _BaseGenericAlias
        612     LOAD_CONST                      10: True
        614     LOAD_CONST                      40: ('_root',)
        616     CALL_FUNCTION_KW                4
        618     STORE_NAME                      54: _GenericAlias
        620     LOAD_BUILD_CLASS                
        622     LOAD_CONST                      81: <CODE> _SpecialGenericAlias
        624     LOAD_CONST                      82: '_SpecialGenericAlias'
        626     MAKE_FUNCTION                   0
        628     LOAD_CONST                      82: '_SpecialGenericAlias'
        630     LOAD_NAME                       53: _BaseGenericAlias
        632     LOAD_CONST                      10: True
        634     LOAD_CONST                      40: ('_root',)
        636     CALL_FUNCTION_KW                4
        638     STORE_NAME                      55: _SpecialGenericAlias
        640     LOAD_BUILD_CLASS                
        642     LOAD_CONST                      83: <CODE> _CallableGenericAlias
        644     LOAD_CONST                      84: '_CallableGenericAlias'
        646     MAKE_FUNCTION                   0
        648     LOAD_CONST                      84: '_CallableGenericAlias'
        650     LOAD_NAME                       54: _GenericAlias
        652     LOAD_CONST                      10: True
        654     LOAD_CONST                      40: ('_root',)
        656     CALL_FUNCTION_KW                4
        658     STORE_NAME                      56: _CallableGenericAlias
        660     LOAD_BUILD_CLASS                
        662     LOAD_CONST                      85: <CODE> _CallableType
        664     LOAD_CONST                      86: '_CallableType'
        666     MAKE_FUNCTION                   0
        668     LOAD_CONST                      86: '_CallableType'
        670     LOAD_NAME                       55: _SpecialGenericAlias
        672     LOAD_CONST                      10: True
        674     LOAD_CONST                      40: ('_root',)
        676     CALL_FUNCTION_KW                4
        678     STORE_NAME                      57: _CallableType
        680     LOAD_BUILD_CLASS                
        682     LOAD_CONST                      87: <CODE> _TupleType
        684     LOAD_CONST                      88: '_TupleType'
        686     MAKE_FUNCTION                   0
        688     LOAD_CONST                      88: '_TupleType'
        690     LOAD_NAME                       55: _SpecialGenericAlias
        692     LOAD_CONST                      10: True
        694     LOAD_CONST                      40: ('_root',)
        696     CALL_FUNCTION_KW                4
        698     STORE_NAME                      58: _TupleType
        700     LOAD_BUILD_CLASS                
        702     LOAD_CONST                      89: <CODE> _UnionGenericAlias
        704     LOAD_CONST                      90: '_UnionGenericAlias'
        706     MAKE_FUNCTION                   0
        708     LOAD_CONST                      90: '_UnionGenericAlias'
        710     LOAD_NAME                       54: _GenericAlias
        712     LOAD_CONST                      10: True
        714     LOAD_CONST                      40: ('_root',)
        716     CALL_FUNCTION_KW                4
        718     STORE_NAME                      59: _UnionGenericAlias
        720     LOAD_CONST                      91: <CODE> _value_and_type_iter
        722     LOAD_CONST                      92: '_value_and_type_iter'
        724     MAKE_FUNCTION                   0
        726     STORE_NAME                      60: _value_and_type_iter
        728     LOAD_BUILD_CLASS                
        730     LOAD_CONST                      93: <CODE> _LiteralGenericAlias
        732     LOAD_CONST                      94: '_LiteralGenericAlias'
        734     MAKE_FUNCTION                   0
        736     LOAD_CONST                      94: '_LiteralGenericAlias'
        738     LOAD_NAME                       54: _GenericAlias
        740     LOAD_CONST                      10: True
        742     LOAD_CONST                      40: ('_root',)
        744     CALL_FUNCTION_KW                4
        746     STORE_NAME                      61: _LiteralGenericAlias
        748     LOAD_BUILD_CLASS                
        750     LOAD_CONST                      95: <CODE> _ConcatenateGenericAlias
        752     LOAD_CONST                      96: '_ConcatenateGenericAlias'
        754     MAKE_FUNCTION                   0
        756     LOAD_CONST                      96: '_ConcatenateGenericAlias'
        758     LOAD_NAME                       54: _GenericAlias
        760     LOAD_CONST                      10: True
        762     LOAD_CONST                      40: ('_root',)
        764     CALL_FUNCTION_KW                4
        766     STORE_NAME                      62: _ConcatenateGenericAlias
        768     LOAD_BUILD_CLASS                
        770     LOAD_CONST                      97: <CODE> Generic
        772     LOAD_CONST                      98: 'Generic'
        774     MAKE_FUNCTION                   0
        776     LOAD_CONST                      98: 'Generic'
        778     CALL_FUNCTION                   2
        780     STORE_NAME                      63: Generic
        782     LOAD_BUILD_CLASS                
        784     LOAD_CONST                      99: <CODE> _TypingEmpty
        786     LOAD_CONST                      100: '_TypingEmpty'
        788     MAKE_FUNCTION                   0
        790     LOAD_CONST                      100: '_TypingEmpty'
        792     CALL_FUNCTION                   2
        794     STORE_NAME                      64: _TypingEmpty
        796     LOAD_BUILD_CLASS                
        798     LOAD_CONST                      101: <CODE> _TypingEllipsis
        800     LOAD_CONST                      102: '_TypingEllipsis'
        802     MAKE_FUNCTION                   0
        804     LOAD_CONST                      102: '_TypingEllipsis'
        806     CALL_FUNCTION                   2
        808     STORE_NAME                      65: _TypingEllipsis
        810     BUILD_LIST                      0
        812     LOAD_CONST                      103: ('__parameters__', '__orig_bases__', '__orig_class__', '_is_protocol', '_is_runtime_protocol')
        814     LIST_EXTEND                     1
        816     STORE_NAME                      66: _TYPING_INTERNALS
        818     BUILD_LIST                      0
        820     LOAD_CONST                      104: ('__abstractmethods__', '__annotations__', '__dict__', '__doc__', '__init__', '__module__', '__new__', '__slots__', '__subclasshook__', '__weakref__', '__class_getitem__')
        822     LIST_EXTEND                     1
        824     STORE_NAME                      67: _SPECIAL_NAMES
        826     LOAD_NAME                       66: _TYPING_INTERNALS
        828     LOAD_NAME                       67: _SPECIAL_NAMES
        830     BINARY_ADD                      
        832     LOAD_CONST                      105: '_MutableMapping__marker'
        834     BUILD_LIST                      1
        836     BINARY_ADD                      
        838     STORE_NAME                      68: EXCLUDED_ATTRIBUTES
        840     LOAD_CONST                      106: <CODE> _get_protocol_attrs
        842     LOAD_CONST                      107: '_get_protocol_attrs'
        844     MAKE_FUNCTION                   0
        846     STORE_NAME                      69: _get_protocol_attrs
        848     LOAD_CONST                      108: <CODE> _is_callable_members_only
        850     LOAD_CONST                      109: '_is_callable_members_only'
        852     MAKE_FUNCTION                   0
        854     STORE_NAME                      70: _is_callable_members_only
        856     LOAD_CONST                      110: <CODE> _no_init_or_replace_init
        858     LOAD_CONST                      111: '_no_init_or_replace_init'
        860     MAKE_FUNCTION                   0
        862     STORE_NAME                      71: _no_init_or_replace_init
        864     LOAD_CONST                      236: (1, '__main__')
        866     LOAD_CONST                      114: <CODE> _caller
        868     LOAD_CONST                      115: '_caller'
        870     MAKE_FUNCTION                   1
        872     STORE_NAME                      72: _caller
        874     LOAD_CONST                      237: (3,)
        876     LOAD_CONST                      117: <CODE> _allow_reckless_class_checks
        878     LOAD_CONST                      118: '_allow_reckless_class_checks'
        880     MAKE_FUNCTION                   1
        882     STORE_NAME                      73: _allow_reckless_class_checks
        884     BUILD_LIST                      0
        886     LOAD_CONST                      119: ('Callable', 'Awaitable', 'Iterable', 'Iterator', 'AsyncIterable', 'Hashable', 'Sized', 'Container', 'Collection', 'Reversible')
        888     LIST_EXTEND                     1
        890     LOAD_CONST                      120: 'AbstractContextManager'
        892     LOAD_CONST                      121: 'AbstractAsyncContextManager'
        894     BUILD_LIST                      2
        896     LOAD_CONST                      122: ('collections.abc', 'contextlib')
        898     BUILD_CONST_KEY_MAP             2
        900     STORE_NAME                      74: _PROTO_ALLOWLIST
        902     LOAD_BUILD_CLASS                
        904     LOAD_CONST                      123: <CODE> _ProtocolMeta
        906     LOAD_CONST                      124: '_ProtocolMeta'
        908     MAKE_FUNCTION                   0
        910     LOAD_CONST                      124: '_ProtocolMeta'
        912     LOAD_NAME                       3: ABCMeta
        914     CALL_FUNCTION                   3
        916     STORE_NAME                      75: _ProtocolMeta
        918     LOAD_BUILD_CLASS                
        920     LOAD_CONST                      125: <CODE> Protocol
        922     LOAD_CONST                      126: 'Protocol'
        924     MAKE_FUNCTION                   0
        926     LOAD_CONST                      126: 'Protocol'
        928     LOAD_NAME                       63: Generic
        930     LOAD_NAME                       75: _ProtocolMeta
        932     LOAD_CONST                      127: ('metaclass',)
        934     CALL_FUNCTION_KW                4
        936     STORE_NAME                      76: Protocol
        938     LOAD_BUILD_CLASS                
        940     LOAD_CONST                      128: <CODE> _AnnotatedAlias
        942     LOAD_CONST                      129: '_AnnotatedAlias'
        944     MAKE_FUNCTION                   0
        946     LOAD_CONST                      129: '_AnnotatedAlias'
        948     LOAD_NAME                       54: _GenericAlias
        950     LOAD_CONST                      10: True
        952     LOAD_CONST                      40: ('_root',)
        954     CALL_FUNCTION_KW                4
        956     STORE_NAME                      77: _AnnotatedAlias
        958     LOAD_BUILD_CLASS                
        960     LOAD_CONST                      130: <CODE> Annotated
        962     LOAD_CONST                      131: 'Annotated'
        964     MAKE_FUNCTION                   0
        966     LOAD_CONST                      131: 'Annotated'
        968     CALL_FUNCTION                   2
        970     STORE_NAME                      78: Annotated
        972     LOAD_CONST                      132: <CODE> runtime_checkable
        974     LOAD_CONST                      133: 'runtime_checkable'
        976     MAKE_FUNCTION                   0
        978     STORE_NAME                      79: runtime_checkable
        980     LOAD_CONST                      134: <CODE> cast
        982     LOAD_CONST                      135: 'cast'
        984     MAKE_FUNCTION                   0
        986     STORE_NAME                      80: cast
        988     LOAD_CONST                      136: <CODE> _get_defaults
        990     LOAD_CONST                      137: '_get_defaults'
        992     MAKE_FUNCTION                   0
        994     STORE_NAME                      81: _get_defaults
        996     LOAD_NAME                       12: types
        998     LOAD_ATTR                       82: FunctionType
        1000    LOAD_NAME                       12: types
        1002    LOAD_ATTR                       83: BuiltinFunctionType
        1004    LOAD_NAME                       12: types
        1006    LOAD_ATTR                       84: MethodType
        1008    LOAD_NAME                       12: types
        1010    LOAD_ATTR                       85: ModuleType
        1012    LOAD_NAME                       13: WrapperDescriptorType
        1014    LOAD_NAME                       14: MethodWrapperType
        1016    LOAD_NAME                       15: MethodDescriptorType
        1018    BUILD_TUPLE                     7
        1020    STORE_NAME                      86: _allowed_types
        1022    LOAD_CONST                      238: (None, None, False)
        1024    LOAD_CONST                      138: <CODE> get_type_hints
        1026    LOAD_CONST                      139: 'get_type_hints'
        1028    MAKE_FUNCTION                   1
        1030    STORE_NAME                      87: get_type_hints
        1032    LOAD_CONST                      140: <CODE> _strip_annotations
        1034    LOAD_CONST                      141: '_strip_annotations'
        1036    MAKE_FUNCTION                   0
        1038    STORE_NAME                      88: _strip_annotations
        1040    LOAD_CONST                      142: <CODE> get_origin
        1042    LOAD_CONST                      143: 'get_origin'
        1044    MAKE_FUNCTION                   0
        1046    STORE_NAME                      89: get_origin
        1048    LOAD_CONST                      144: <CODE> get_args
        1050    LOAD_CONST                      145: 'get_args'
        1052    MAKE_FUNCTION                   0
        1054    STORE_NAME                      90: get_args
        1056    LOAD_CONST                      146: <CODE> is_typeddict
        1058    LOAD_CONST                      147: 'is_typeddict'
        1060    MAKE_FUNCTION                   0
        1062    STORE_NAME                      91: is_typeddict
        1064    LOAD_CONST                      148: <CODE> no_type_check
        1066    LOAD_CONST                      149: 'no_type_check'
        1068    MAKE_FUNCTION                   0
        1070    STORE_NAME                      92: no_type_check
        1072    LOAD_CONST                      150: <CODE> no_type_check_decorator
        1074    LOAD_CONST                      151: 'no_type_check_decorator'
        1076    MAKE_FUNCTION                   0
        1078    STORE_NAME                      93: no_type_check_decorator
        1080    LOAD_CONST                      152: <CODE> _overload_dummy
        1082    LOAD_CONST                      153: '_overload_dummy'
        1084    MAKE_FUNCTION                   0
        1086    STORE_NAME                      94: _overload_dummy
        1088    LOAD_CONST                      154: <CODE> overload
        1090    LOAD_CONST                      155: 'overload'
        1092    MAKE_FUNCTION                   0
        1094    STORE_NAME                      95: overload
        1096    LOAD_CONST                      156: <CODE> final
        1098    LOAD_CONST                      157: 'final'
        1100    MAKE_FUNCTION                   0
        1102    STORE_NAME                      96: final
        1104    LOAD_NAME                       48: TypeVar
        1106    LOAD_CONST                      158: 'T'
        1108    CALL_FUNCTION                   1
        1110    STORE_NAME                      97: T
        1112    LOAD_NAME                       48: TypeVar
        1114    LOAD_CONST                      159: 'KT'
        1116    CALL_FUNCTION                   1
        1118    STORE_NAME                      98: KT
        1120    LOAD_NAME                       48: TypeVar
        1122    LOAD_CONST                      160: 'VT'
        1124    CALL_FUNCTION                   1
        1126    STORE_NAME                      99: VT
        1128    LOAD_NAME                       48: TypeVar
        1130    LOAD_CONST                      161: 'T_co'
        1132    LOAD_CONST                      10: True
        1134    LOAD_CONST                      162: ('covariant',)
        1136    CALL_FUNCTION_KW                2
        1138    STORE_NAME                      100: T_co
        1140    LOAD_NAME                       48: TypeVar
        1142    LOAD_CONST                      163: 'V_co'
        1144    LOAD_CONST                      10: True
        1146    LOAD_CONST                      162: ('covariant',)
        1148    CALL_FUNCTION_KW                2
        1150    STORE_NAME                      101: V_co
        1152    LOAD_NAME                       48: TypeVar
        1154    LOAD_CONST                      164: 'VT_co'
        1156    LOAD_CONST                      10: True
        1158    LOAD_CONST                      162: ('covariant',)
        1160    CALL_FUNCTION_KW                2
        1162    STORE_NAME                      102: VT_co
        1164    LOAD_NAME                       48: TypeVar
        1166    LOAD_CONST                      165: 'T_contra'
        1168    LOAD_CONST                      10: True
        1170    LOAD_CONST                      166: ('contravariant',)
        1172    CALL_FUNCTION_KW                2
        1174    STORE_NAME                      103: T_contra
        1176    LOAD_NAME                       48: TypeVar
        1178    LOAD_CONST                      167: 'CT_co'
        1180    LOAD_CONST                      10: True
        1182    LOAD_NAME                       104: type
        1184    LOAD_CONST                      168: ('covariant', 'bound')
        1186    CALL_FUNCTION_KW                3
        1188    STORE_NAME                      105: CT_co
        1190    LOAD_NAME                       48: TypeVar
        1192    LOAD_CONST                      169: 'AnyStr'
        1194    LOAD_NAME                       106: bytes
        1196    LOAD_NAME                       107: str
        1198    CALL_FUNCTION                   3
        1200    STORE_NAME                      108: AnyStr
        1202    LOAD_NAME                       55: _SpecialGenericAlias
        1204    STORE_NAME                      109: _alias
        1206    LOAD_NAME                       109: _alias
        1208    LOAD_NAME                       4: collections
        1210    LOAD_ATTR                       1: abc
        1212    LOAD_ATTR                       110: Hashable
        1214    LOAD_CONST                      1: 0
        1216    CALL_FUNCTION                   2
        1218    STORE_NAME                      110: Hashable
        1220    LOAD_NAME                       109: _alias
        1222    LOAD_NAME                       4: collections
        1224    LOAD_ATTR                       1: abc
        1226    LOAD_ATTR                       111: Awaitable
        1228    LOAD_CONST                      112: 1
        1230    CALL_FUNCTION                   2
        1232    STORE_NAME                      111: Awaitable
        1234    LOAD_NAME                       109: _alias
        1236    LOAD_NAME                       4: collections
        1238    LOAD_ATTR                       1: abc
        1240    LOAD_ATTR                       112: Coroutine
        1242    LOAD_CONST                      116: 3
        1244    CALL_FUNCTION                   2
        1246    STORE_NAME                      112: Coroutine
        1248    LOAD_NAME                       109: _alias
        1250    LOAD_NAME                       4: collections
        1252    LOAD_ATTR                       1: abc
        1254    LOAD_ATTR                       113: AsyncIterable
        1256    LOAD_CONST                      112: 1
        1258    CALL_FUNCTION                   2
        1260    STORE_NAME                      113: AsyncIterable
        1262    LOAD_NAME                       109: _alias
        1264    LOAD_NAME                       4: collections
        1266    LOAD_ATTR                       1: abc
        1268    LOAD_ATTR                       114: AsyncIterator
        1270    LOAD_CONST                      112: 1
        1272    CALL_FUNCTION                   2
        1274    STORE_NAME                      114: AsyncIterator
        1276    LOAD_NAME                       109: _alias
        1278    LOAD_NAME                       4: collections
        1280    LOAD_ATTR                       1: abc
        1282    LOAD_ATTR                       115: Iterable
        1284    LOAD_CONST                      112: 1
        1286    CALL_FUNCTION                   2
        1288    STORE_NAME                      115: Iterable
        1290    LOAD_NAME                       109: _alias
        1292    LOAD_NAME                       4: collections
        1294    LOAD_ATTR                       1: abc
        1296    LOAD_ATTR                       116: Iterator
        1298    LOAD_CONST                      112: 1
        1300    CALL_FUNCTION                   2
        1302    STORE_NAME                      116: Iterator
        1304    LOAD_NAME                       109: _alias
        1306    LOAD_NAME                       4: collections
        1308    LOAD_ATTR                       1: abc
        1310    LOAD_ATTR                       117: Reversible
        1312    LOAD_CONST                      112: 1
        1314    CALL_FUNCTION                   2
        1316    STORE_NAME                      117: Reversible
        1318    LOAD_NAME                       109: _alias
        1320    LOAD_NAME                       4: collections
        1322    LOAD_ATTR                       1: abc
        1324    LOAD_ATTR                       118: Sized
        1326    LOAD_CONST                      1: 0
        1328    CALL_FUNCTION                   2
        1330    STORE_NAME                      118: Sized
        1332    LOAD_NAME                       109: _alias
        1334    LOAD_NAME                       4: collections
        1336    LOAD_ATTR                       1: abc
        1338    LOAD_ATTR                       119: Container
        1340    LOAD_CONST                      112: 1
        1342    CALL_FUNCTION                   2
        1344    STORE_NAME                      119: Container
        1346    LOAD_NAME                       109: _alias
        1348    LOAD_NAME                       4: collections
        1350    LOAD_ATTR                       1: abc
        1352    LOAD_ATTR                       120: Collection
        1354    LOAD_CONST                      112: 1
        1356    CALL_FUNCTION                   2
        1358    STORE_NAME                      120: Collection
        1360    LOAD_NAME                       57: _CallableType
        1362    LOAD_NAME                       4: collections
        1364    LOAD_ATTR                       1: abc
        1366    LOAD_ATTR                       121: Callable
        1368    LOAD_CONST                      170: 2
        1370    CALL_FUNCTION                   2
        1372    STORE_NAME                      121: Callable
        1374    LOAD_CONST                      171: 'Callable type; Callable[[int], str] is a function of (int) -> str.\n\n    The subscription syntax must always be used with exactly two\n    values: the argument list and the return type.  The argument list\n    must be a list of types or ellipsis; the return type must be a single type.\n\n    There is no syntax to indicate optional or keyword arguments,\n    such function types are rarely used as callback types.\n    '
        1376    LOAD_NAME                       121: Callable
        1378    STORE_ATTR                      0: __doc__
        1380    LOAD_NAME                       109: _alias
        1382    LOAD_NAME                       4: collections
        1384    LOAD_ATTR                       1: abc
        1386    LOAD_ATTR                       122: Set
        1388    LOAD_CONST                      112: 1
        1390    LOAD_CONST                      172: 'AbstractSet'
        1392    LOAD_CONST                      173: ('name',)
        1394    CALL_FUNCTION_KW                3
        1396    STORE_NAME                      123: AbstractSet
        1398    LOAD_NAME                       109: _alias
        1400    LOAD_NAME                       4: collections
        1402    LOAD_ATTR                       1: abc
        1404    LOAD_ATTR                       124: MutableSet
        1406    LOAD_CONST                      112: 1
        1408    CALL_FUNCTION                   2
        1410    STORE_NAME                      124: MutableSet
        1412    LOAD_NAME                       109: _alias
        1414    LOAD_NAME                       4: collections
        1416    LOAD_ATTR                       1: abc
        1418    LOAD_ATTR                       125: Mapping
        1420    LOAD_CONST                      170: 2
        1422    CALL_FUNCTION                   2
        1424    STORE_NAME                      125: Mapping
        1426    LOAD_NAME                       109: _alias
        1428    LOAD_NAME                       4: collections
        1430    LOAD_ATTR                       1: abc
        1432    LOAD_ATTR                       126: MutableMapping
        1434    LOAD_CONST                      170: 2
        1436    CALL_FUNCTION                   2
        1438    STORE_NAME                      126: MutableMapping
        1440    LOAD_NAME                       109: _alias
        1442    LOAD_NAME                       4: collections
        1444    LOAD_ATTR                       1: abc
        1446    LOAD_ATTR                       127: Sequence
        1448    LOAD_CONST                      112: 1
        1450    CALL_FUNCTION                   2
        1452    STORE_NAME                      127: Sequence
        1454    LOAD_NAME                       109: _alias
        1456    LOAD_NAME                       4: collections
        1458    LOAD_ATTR                       1: abc
        1460    LOAD_ATTR                       128: MutableSequence
        1462    LOAD_CONST                      112: 1
        1464    CALL_FUNCTION                   2
        1466    STORE_NAME                      128: MutableSequence
        1468    LOAD_NAME                       109: _alias
        1470    LOAD_NAME                       4: collections
        1472    LOAD_ATTR                       1: abc
        1474    LOAD_ATTR                       129: ByteString
        1476    LOAD_CONST                      1: 0
        1478    CALL_FUNCTION                   2
        1480    STORE_NAME                      129: ByteString
        1482    LOAD_NAME                       58: _TupleType
        1484    LOAD_NAME                       130: tuple
        1486    LOAD_CONST                      174: -1
        1488    LOAD_CONST                      6: False
        1490    LOAD_CONST                      175: 'Tuple'
        1492    LOAD_CONST                      176: ('inst', 'name')
        1494    CALL_FUNCTION_KW                4
        1496    STORE_NAME                      131: Tuple
        1498    LOAD_CONST                      177: 'Tuple type; Tuple[X, Y] is the cross-product type of X and Y.\n\n    Example: Tuple[T1, T2] is a tuple of two elements corresponding\n    to type variables T1 and T2.  Tuple[int, float, str] is a tuple\n    of an int, a float and a string.\n\n    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].\n    '
        1500    LOAD_NAME                       131: Tuple
        1502    STORE_ATTR                      0: __doc__
        1504    LOAD_NAME                       109: _alias
        1506    LOAD_NAME                       132: list
        1508    LOAD_CONST                      112: 1
        1510    LOAD_CONST                      6: False
        1512    LOAD_CONST                      178: 'List'
        1514    LOAD_CONST                      176: ('inst', 'name')
        1516    CALL_FUNCTION_KW                4
        1518    STORE_NAME                      133: List
        1520    LOAD_NAME                       109: _alias
        1522    LOAD_NAME                       4: collections
        1524    LOAD_ATTR                       134: deque
        1526    LOAD_CONST                      112: 1
        1528    LOAD_CONST                      179: 'Deque'
        1530    LOAD_CONST                      173: ('name',)
        1532    CALL_FUNCTION_KW                3
        1534    STORE_NAME                      135: Deque
        1536    LOAD_NAME                       109: _alias
        1538    LOAD_NAME                       136: set
        1540    LOAD_CONST                      112: 1
        1542    LOAD_CONST                      6: False
        1544    LOAD_CONST                      180: 'Set'
        1546    LOAD_CONST                      176: ('inst', 'name')
        1548    CALL_FUNCTION_KW                4
        1550    STORE_NAME                      122: Set
        1552    LOAD_NAME                       109: _alias
        1554    LOAD_NAME                       30: frozenset
        1556    LOAD_CONST                      112: 1
        1558    LOAD_CONST                      6: False
        1560    LOAD_CONST                      181: 'FrozenSet'
        1562    LOAD_CONST                      176: ('inst', 'name')
        1564    CALL_FUNCTION_KW                4
        1566    STORE_NAME                      137: FrozenSet
        1568    LOAD_NAME                       109: _alias
        1570    LOAD_NAME                       4: collections
        1572    LOAD_ATTR                       1: abc
        1574    LOAD_ATTR                       138: MappingView
        1576    LOAD_CONST                      112: 1
        1578    CALL_FUNCTION                   2
        1580    STORE_NAME                      138: MappingView
        1582    LOAD_NAME                       109: _alias
        1584    LOAD_NAME                       4: collections
        1586    LOAD_ATTR                       1: abc
        1588    LOAD_ATTR                       139: KeysView
        1590    LOAD_CONST                      112: 1
        1592    CALL_FUNCTION                   2
        1594    STORE_NAME                      139: KeysView
        1596    LOAD_NAME                       109: _alias
        1598    LOAD_NAME                       4: collections
        1600    LOAD_ATTR                       1: abc
        1602    LOAD_ATTR                       140: ItemsView
        1604    LOAD_CONST                      170: 2
        1606    CALL_FUNCTION                   2
        1608    STORE_NAME                      140: ItemsView
        1610    LOAD_NAME                       109: _alias
        1612    LOAD_NAME                       4: collections
        1614    LOAD_ATTR                       1: abc
        1616    LOAD_ATTR                       141: ValuesView
        1618    LOAD_CONST                      112: 1
        1620    CALL_FUNCTION                   2
        1622    STORE_NAME                      141: ValuesView
        1624    LOAD_NAME                       109: _alias
        1626    LOAD_NAME                       6: contextlib
        1628    LOAD_ATTR                       142: AbstractContextManager
        1630    LOAD_CONST                      112: 1
        1632    LOAD_CONST                      182: 'ContextManager'
        1634    LOAD_CONST                      173: ('name',)
        1636    CALL_FUNCTION_KW                3
        1638    STORE_NAME                      143: ContextManager
        1640    LOAD_NAME                       109: _alias
        1642    LOAD_NAME                       6: contextlib
        1644    LOAD_ATTR                       144: AbstractAsyncContextManager
        1646    LOAD_CONST                      112: 1
        1648    LOAD_CONST                      183: 'AsyncContextManager'
        1650    LOAD_CONST                      173: ('name',)
        1652    CALL_FUNCTION_KW                3
        1654    STORE_NAME                      145: AsyncContextManager
        1656    LOAD_NAME                       109: _alias
        1658    LOAD_NAME                       146: dict
        1660    LOAD_CONST                      170: 2
        1662    LOAD_CONST                      6: False
        1664    LOAD_CONST                      184: 'Dict'
        1666    LOAD_CONST                      176: ('inst', 'name')
        1668    CALL_FUNCTION_KW                4
        1670    STORE_NAME                      147: Dict
        1672    LOAD_NAME                       109: _alias
        1674    LOAD_NAME                       4: collections
        1676    LOAD_ATTR                       148: defaultdict
        1678    LOAD_CONST                      170: 2
        1680    LOAD_CONST                      185: 'DefaultDict'
        1682    LOAD_CONST                      173: ('name',)
        1684    CALL_FUNCTION_KW                3
        1686    STORE_NAME                      149: DefaultDict
        1688    LOAD_NAME                       109: _alias
        1690    LOAD_NAME                       4: collections
        1692    LOAD_ATTR                       150: OrderedDict
        1694    LOAD_CONST                      170: 2
        1696    CALL_FUNCTION                   2
        1698    STORE_NAME                      150: OrderedDict
        1700    LOAD_NAME                       109: _alias
        1702    LOAD_NAME                       4: collections
        1704    LOAD_ATTR                       151: Counter
        1706    LOAD_CONST                      112: 1
        1708    CALL_FUNCTION                   2
        1710    STORE_NAME                      151: Counter
        1712    LOAD_NAME                       109: _alias
        1714    LOAD_NAME                       4: collections
        1716    LOAD_ATTR                       152: ChainMap
        1718    LOAD_CONST                      170: 2
        1720    CALL_FUNCTION                   2
        1722    STORE_NAME                      152: ChainMap
        1724    LOAD_NAME                       109: _alias
        1726    LOAD_NAME                       4: collections
        1728    LOAD_ATTR                       1: abc
        1730    LOAD_ATTR                       153: Generator
        1732    LOAD_CONST                      116: 3
        1734    CALL_FUNCTION                   2
        1736    STORE_NAME                      153: Generator
        1738    LOAD_NAME                       109: _alias
        1740    LOAD_NAME                       4: collections
        1742    LOAD_ATTR                       1: abc
        1744    LOAD_ATTR                       154: AsyncGenerator
        1746    LOAD_CONST                      170: 2
        1748    CALL_FUNCTION                   2
        1750    STORE_NAME                      154: AsyncGenerator
        1752    LOAD_NAME                       109: _alias
        1754    LOAD_NAME                       104: type
        1756    LOAD_CONST                      112: 1
        1758    LOAD_CONST                      6: False
        1760    LOAD_CONST                      186: 'Type'
        1762    LOAD_CONST                      176: ('inst', 'name')
        1764    CALL_FUNCTION_KW                4
        1766    STORE_NAME                      155: Type
        1768    LOAD_CONST                      187: "A special construct usable to annotate class objects.\n\n    For example, suppose we have the following classes::\n\n      class User: ...  # Abstract base for User classes\n      class BasicUser(User): ...\n      class ProUser(User): ...\n      class TeamUser(User): ...\n\n    And a function that takes a class argument that's a subclass of\n    User and returns an instance of the corresponding class::\n\n      U = TypeVar('U', bound=User)\n      def new_user(user_class: Type[U]) -> U:\n          user = user_class()\n          # (Here we could write the user object to a database)\n          return user\n\n      joe = new_user(BasicUser)\n\n    At this point the type checker knows that joe has type BasicUser.\n    "
        1770    LOAD_NAME                       155: Type
        1772    STORE_ATTR                      0: __doc__
        1774    LOAD_NAME                       79: runtime_checkable
        1776    LOAD_BUILD_CLASS                
        1778    LOAD_CONST                      188: <CODE> SupportsInt
        1780    LOAD_CONST                      189: 'SupportsInt'
        1782    MAKE_FUNCTION                   0
        1784    LOAD_CONST                      189: 'SupportsInt'
        1786    LOAD_NAME                       76: Protocol
        1788    CALL_FUNCTION                   3
        1790    CALL_FUNCTION                   1
        1792    STORE_NAME                      156: SupportsInt
        1794    LOAD_NAME                       79: runtime_checkable
        1796    LOAD_BUILD_CLASS                
        1798    LOAD_CONST                      190: <CODE> SupportsFloat
        1800    LOAD_CONST                      191: 'SupportsFloat'
        1802    MAKE_FUNCTION                   0
        1804    LOAD_CONST                      191: 'SupportsFloat'
        1806    LOAD_NAME                       76: Protocol
        1808    CALL_FUNCTION                   3
        1810    CALL_FUNCTION                   1
        1812    STORE_NAME                      157: SupportsFloat
        1814    LOAD_NAME                       79: runtime_checkable
        1816    LOAD_BUILD_CLASS                
        1818    LOAD_CONST                      192: <CODE> SupportsComplex
        1820    LOAD_CONST                      193: 'SupportsComplex'
        1822    MAKE_FUNCTION                   0
        1824    LOAD_CONST                      193: 'SupportsComplex'
        1826    LOAD_NAME                       76: Protocol
        1828    CALL_FUNCTION                   3
        1830    CALL_FUNCTION                   1
        1832    STORE_NAME                      158: SupportsComplex
        1834    LOAD_NAME                       79: runtime_checkable
        1836    LOAD_BUILD_CLASS                
        1838    LOAD_CONST                      194: <CODE> SupportsBytes
        1840    LOAD_CONST                      195: 'SupportsBytes'
        1842    MAKE_FUNCTION                   0
        1844    LOAD_CONST                      195: 'SupportsBytes'
        1846    LOAD_NAME                       76: Protocol
        1848    CALL_FUNCTION                   3
        1850    CALL_FUNCTION                   1
        1852    STORE_NAME                      159: SupportsBytes
        1854    LOAD_NAME                       79: runtime_checkable
        1856    LOAD_BUILD_CLASS                
        1858    LOAD_CONST                      196: <CODE> SupportsIndex
        1860    LOAD_CONST                      197: 'SupportsIndex'
        1862    MAKE_FUNCTION                   0
        1864    LOAD_CONST                      197: 'SupportsIndex'
        1866    LOAD_NAME                       76: Protocol
        1868    CALL_FUNCTION                   3
        1870    CALL_FUNCTION                   1
        1872    STORE_NAME                      160: SupportsIndex
        1874    LOAD_NAME                       79: runtime_checkable
        1876    LOAD_BUILD_CLASS                
        1878    LOAD_CONST                      198: <CODE> SupportsAbs
        1880    LOAD_CONST                      199: 'SupportsAbs'
        1882    MAKE_FUNCTION                   0
        1884    LOAD_CONST                      199: 'SupportsAbs'
        1886    LOAD_NAME                       76: Protocol
        1888    LOAD_NAME                       100: T_co
        1890    BINARY_SUBSCR                   
        1892    CALL_FUNCTION                   3
        1894    CALL_FUNCTION                   1
        1896    STORE_NAME                      161: SupportsAbs
        1898    LOAD_NAME                       79: runtime_checkable
        1900    LOAD_BUILD_CLASS                
        1902    LOAD_CONST                      200: <CODE> SupportsRound
        1904    LOAD_CONST                      201: 'SupportsRound'
        1906    MAKE_FUNCTION                   0
        1908    LOAD_CONST                      201: 'SupportsRound'
        1910    LOAD_NAME                       76: Protocol
        1912    LOAD_NAME                       100: T_co
        1914    BINARY_SUBSCR                   
        1916    CALL_FUNCTION                   3
        1918    CALL_FUNCTION                   1
        1920    STORE_NAME                      162: SupportsRound
        1922    LOAD_CONST                      239: ((),)
        1924    LOAD_CONST                      203: <CODE> _make_nmtuple
        1926    LOAD_CONST                      204: '_make_nmtuple'
        1928    MAKE_FUNCTION                   1
        1930    STORE_NAME                      163: _make_nmtuple
        1932    LOAD_NAME                       30: frozenset
        1934    BUILD_SET                       0
        1936    LOAD_CONST                      205: frozenset({'_make', '__new__', '_asdict', '_fields', '_source', '__init__', '_replace', '__slots__', '__getnewargs__', '_field_defaults'})
        1938    SET_UPDATE                      1
        1940    CALL_FUNCTION                   1
        1942    STORE_NAME                      164: _prohibited
        1944    LOAD_NAME                       30: frozenset
        1946    BUILD_SET                       0
        1948    LOAD_CONST                      206: frozenset({'__name__', '__module__', '__annotations__'})
        1950    SET_UPDATE                      1
        1952    CALL_FUNCTION                   1
        1954    STORE_NAME                      165: _special
        1956    LOAD_BUILD_CLASS                
        1958    LOAD_CONST                      207: <CODE> NamedTupleMeta
        1960    LOAD_CONST                      208: 'NamedTupleMeta'
        1962    MAKE_FUNCTION                   0
        1964    LOAD_CONST                      208: 'NamedTupleMeta'
        1966    LOAD_NAME                       104: type
        1968    CALL_FUNCTION                   3
        1970    STORE_NAME                      166: NamedTupleMeta
        1972    LOAD_CONST                      234: (None,)
        1974    LOAD_CONST                      209: <CODE> NamedTuple
        1976    LOAD_CONST                      210: 'NamedTuple'
        1978    MAKE_FUNCTION                   1
        1980    STORE_NAME                      167: NamedTuple
        1982    LOAD_NAME                       104: type
        1984    LOAD_METHOD                     168: __new__
        1986    LOAD_NAME                       166: NamedTupleMeta
        1988    LOAD_CONST                      210: 'NamedTuple'
        1990    LOAD_CONST                      202: ()
        1992    BUILD_MAP                       0
        1994    CALL_METHOD                     4
        1996    STORE_NAME                      169: _NamedTuple
        1998    LOAD_CONST                      211: <CODE> _namedtuple_mro_entries
        2000    LOAD_CONST                      212: '_namedtuple_mro_entries'
        2002    MAKE_FUNCTION                   0
        2004    STORE_NAME                      170: _namedtuple_mro_entries
        2006    LOAD_NAME                       170: _namedtuple_mro_entries
        2008    LOAD_NAME                       167: NamedTuple
        2010    STORE_ATTR                      171: __mro_entries__
        2012    LOAD_BUILD_CLASS                
        2014    LOAD_CONST                      213: <CODE> _TypedDictMeta
        2016    LOAD_CONST                      214: '_TypedDictMeta'
        2018    MAKE_FUNCTION                   0
        2020    LOAD_CONST                      214: '_TypedDictMeta'
        2022    LOAD_NAME                       104: type
        2024    CALL_FUNCTION                   3
        2026    STORE_NAME                      172: _TypedDictMeta
        2028    LOAD_CONST                      234: (None,)
        2030    LOAD_CONST                      10: True
        2032    LOAD_CONST                      215: ('total',)
        2034    BUILD_CONST_KEY_MAP             1
        2036    LOAD_CONST                      216: <CODE> TypedDict
        2038    LOAD_CONST                      217: 'TypedDict'
        2040    MAKE_FUNCTION                   3
        2042    STORE_NAME                      173: TypedDict
        2044    LOAD_NAME                       104: type
        2046    LOAD_METHOD                     168: __new__
        2048    LOAD_NAME                       172: _TypedDictMeta
        2050    LOAD_CONST                      217: 'TypedDict'
        2052    LOAD_CONST                      202: ()
        2054    BUILD_MAP                       0
        2056    CALL_METHOD                     4
        2058    STORE_NAME                      174: _TypedDict
        2060    LOAD_CONST                      218: <CODE> <lambda>
        2062    LOAD_CONST                      219: '<lambda>'
        2064    MAKE_FUNCTION                   0
        2066    LOAD_NAME                       173: TypedDict
        2068    STORE_ATTR                      171: __mro_entries__
        2070    LOAD_BUILD_CLASS                
        2072    LOAD_CONST                      220: <CODE> NewType
        2074    LOAD_CONST                      221: 'NewType'
        2076    MAKE_FUNCTION                   0
        2078    LOAD_CONST                      221: 'NewType'
        2080    CALL_FUNCTION                   2
        2082    STORE_NAME                      175: NewType
        2084    LOAD_NAME                       107: str
        2086    STORE_NAME                      176: Text
        2088    LOAD_CONST                      6: False
        2090    STORE_NAME                      177: TYPE_CHECKING
        2092    LOAD_BUILD_CLASS                
        2094    LOAD_CONST                      222: <CODE> IO
        2096    LOAD_CONST                      223: 'IO'
        2098    MAKE_FUNCTION                   0
        2100    LOAD_CONST                      223: 'IO'
        2102    LOAD_NAME                       63: Generic
        2104    LOAD_NAME                       108: AnyStr
        2106    BINARY_SUBSCR                   
        2108    CALL_FUNCTION                   3
        2110    STORE_NAME                      178: IO
        2112    LOAD_BUILD_CLASS                
        2114    LOAD_CONST                      224: <CODE> BinaryIO
        2116    LOAD_CONST                      225: 'BinaryIO'
        2118    MAKE_FUNCTION                   0
        2120    LOAD_CONST                      225: 'BinaryIO'
        2122    LOAD_NAME                       178: IO
        2124    LOAD_NAME                       106: bytes
        2126    BINARY_SUBSCR                   
        2128    CALL_FUNCTION                   3
        2130    STORE_NAME                      179: BinaryIO
        2132    LOAD_BUILD_CLASS                
        2134    LOAD_CONST                      226: <CODE> TextIO
        2136    LOAD_CONST                      227: 'TextIO'
        2138    MAKE_FUNCTION                   0
        2140    LOAD_CONST                      227: 'TextIO'
        2142    LOAD_NAME                       178: IO
        2144    LOAD_NAME                       107: str
        2146    BINARY_SUBSCR                   
        2148    CALL_FUNCTION                   3
        2150    STORE_NAME                      180: TextIO
        2152    LOAD_BUILD_CLASS                
        2154    LOAD_CONST                      228: <CODE> io
        2156    LOAD_CONST                      229: 'io'
        2158    MAKE_FUNCTION                   0
        2160    LOAD_CONST                      229: 'io'
        2162    CALL_FUNCTION                   2
        2164    STORE_NAME                      181: io
        2166    LOAD_NAME                       182: __name__
        2168    LOAD_CONST                      230: '.io'
        2170    BINARY_ADD                      
        2172    LOAD_NAME                       181: io
        2174    STORE_ATTR                      182: __name__
        2176    LOAD_NAME                       181: io
        2178    LOAD_NAME                       11: sys
        2180    LOAD_ATTR                       183: modules
        2182    LOAD_NAME                       181: io
        2184    LOAD_ATTR                       182: __name__
        2186    STORE_SUBSCR                    
        2188    LOAD_NAME                       109: _alias
        2190    LOAD_NAME                       10: stdlib_re
        2192    LOAD_ATTR                       184: Pattern
        2194    LOAD_CONST                      112: 1
        2196    CALL_FUNCTION                   2
        2198    STORE_NAME                      184: Pattern
        2200    LOAD_NAME                       109: _alias
        2202    LOAD_NAME                       10: stdlib_re
        2204    LOAD_ATTR                       185: Match
        2206    LOAD_CONST                      112: 1
        2208    CALL_FUNCTION                   2
        2210    STORE_NAME                      185: Match
        2212    LOAD_BUILD_CLASS                
        2214    LOAD_CONST                      231: <CODE> re
        2216    LOAD_CONST                      232: 're'
        2218    MAKE_FUNCTION                   0
        2220    LOAD_CONST                      232: 're'
        2222    CALL_FUNCTION                   2
        2224    STORE_NAME                      9: re
        2226    LOAD_NAME                       182: __name__
        2228    LOAD_CONST                      233: '.re'
        2230    BINARY_ADD                      
        2232    LOAD_NAME                       9: re
        2234    STORE_ATTR                      182: __name__
        2236    LOAD_NAME                       9: re
        2238    LOAD_NAME                       11: sys
        2240    LOAD_ATTR                       183: modules
        2242    LOAD_NAME                       9: re
        2244    LOAD_ATTR                       182: __name__
        2246    STORE_SUBSCR                    
        2248    LOAD_CONST                      3: None
        2250    RETURN_VALUE                    
