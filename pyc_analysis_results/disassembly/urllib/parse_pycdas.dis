parse.pyc (Python 3.10)
[Code]
    File Name: urllib/parse.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 5
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        're'
        'sys'
        'types'
        'collections'
        'warnings'
        'ipaddress'
        '__all__'
        'uses_relative'
        'uses_netloc'
        'uses_params'
        'non_hierarchical'
        'uses_query'
        'uses_fragment'
        'scheme_chars'
        '_WHATWG_C0_CONTROL_OR_SPACE'
        '_UNSAFE_URL_BYTES_TO_REMOVE'
        'MAX_CACHE_SIZE'
        '_parse_cache'
        'clear_cache'
        '_implicit_encoding'
        '_implicit_errors'
        '_noop'
        '_encode_result'
        '_decode_args'
        '_coerce_args'
        'object'
        '_ResultMixinStr'
        '_ResultMixinBytes'
        '_NetlocResultMixinBase'
        '_NetlocResultMixinStr'
        '_NetlocResultMixinBytes'
        'namedtuple'
        '_DefragResultBase'
        '_SplitResultBase'
        '_ParseResultBase'
        'url'
        'fragment'
        'scheme'
        'netloc'
        'path'
        'query'
        'params'
        'ResultBase'
        'DefragResult'
        'SplitResult'
        'ParseResult'
        'DefragResultBytes'
        'SplitResultBytes'
        'ParseResultBytes'
        '_fix_result_transcoding'
        'urlparse'
        '_splitparams'
        '_splitnetloc'
        '_checknetloc'
        '_check_bracketed_netloc'
        '_check_bracketed_host'
        'urlsplit'
        'urlunparse'
        'urlunsplit'
        'urljoin'
        'urldefrag'
        '_hexdig'
        '_hextobyte'
        'unquote_to_bytes'
        'compile'
        '_asciire'
        'unquote'
        'parse_qs'
        'parse_qsl'
        'unquote_plus'
        'frozenset'
        '_ALWAYS_SAFE'
        'bytes'
        '_ALWAYS_SAFE_BYTES'
        '_safe_quoters'
        'defaultdict'
        'Quoter'
        'quote'
        'quote_plus'
        'quote_from_bytes'
        'urlencode'
        'to_bytes'
        '_to_bytes'
        'unwrap'
        'splittype'
        '_typeprog'
        '_splittype'
        'splithost'
        '_hostprog'
        '_splithost'
        'splituser'
        '_splituser'
        'splitpasswd'
        '_splitpasswd'
        'splitport'
        '_portprog'
        '_splitport'
        'splitnport'
        '_splitnport'
        'splitquery'
        '_splitquery'
        'splittag'
        '_splittag'
        'splitattr'
        '_splitattr'
        'splitvalue'
        '_splitvalue'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        'Parse (absolute and relative) URLs.\n\nurlparse module is based upon the following RFC specifications.\n\nRFC 3986 (STD66): "Uniform Resource Identifiers" by T. Berners-Lee, R. Fielding\nand L.  Masinter, January 2005.\n\nRFC 2732 : "Format for Literal IPv6 Addresses in URL\'s by R.Hinden, B.Carpenter\nand L.Masinter, December 1999.\n\nRFC 2396:  "Uniform Resource Identifiers (URI)": Generic Syntax by T.\nBerners-Lee, R. Fielding, and L. Masinter, August 1998.\n\nRFC 2368: "The mailto URL scheme", by P.Hoffman , L Masinter, J. Zawinski, July 1998.\n\nRFC 1808: "Relative Uniform Resource Locators", by R. Fielding, UC Irvine, June\n1995.\n\nRFC 1738: "Uniform Resource Locators (URL)" by T. Berners-Lee, L. Masinter, M.\nMcCahill, December 1994\n\nRFC 3986 is considered the current standard and any future changes to\nurlparse module should conform with it.  The urlparse module is\ncurrently not entirely compliant with this RFC due to defacto\nscenarios for parsing, and for backward compatibility purposes, some\nparsing quirks from older RFCs are retained. The testcases in\ntest_urlparse.py provides a good indicator of parsing behavior.\n\nThe WHATWG URL Parser spec should also be considered.  We are not compliant with\nit either due to existing user code API behavior expectations (Hyrum\'s Law).\nIt serves as a useful guide when making changes.\n'
        0
        None
        (
            'urlparse'
            'urlunparse'
            'urljoin'
            'urldefrag'
            'urlsplit'
            'urlunsplit'
            'urlencode'
            'parse_qs'
            'parse_qsl'
            'quote'
            'quote_plus'
            'quote_from_bytes'
            'unquote'
            'unquote_plus'
            'unquote_to_bytes'
            'DefragResult'
            'ParseResult'
            'SplitResult'
            'DefragResultBytes'
            'ParseResultBytes'
            'SplitResultBytes'
        )
        (
            ''
            'ftp'
            'http'
            'gopher'
            'nntp'
            'imap'
            'wais'
            'file'
            'https'
            'shttp'
            'mms'
            'prospero'
            'rtsp'
            'rtspu'
            'sftp'
            'svn'
            'svn+ssh'
            'ws'
            'wss'
        )
        (
            ''
            'ftp'
            'http'
            'gopher'
            'nntp'
            'telnet'
            'imap'
            'wais'
            'file'
            'mms'
            'https'
            'shttp'
            'snews'
            'prospero'
            'rtsp'
            'rtspu'
            'rsync'
            'svn'
            'svn+ssh'
            'sftp'
            'nfs'
            'git'
            'git+ssh'
            'ws'
            'wss'
        )
        (
            ''
            'ftp'
            'hdl'
            'prospero'
            'http'
            'imap'
            'https'
            'shttp'
            'rtsp'
            'rtspu'
            'sip'
            'sips'
            'mms'
            'sftp'
            'tel'
        )
        (
            'gopher'
            'hdl'
            'mailto'
            'news'
            'telnet'
            'wais'
            'imap'
            'snews'
            'sip'
            'sips'
        )
        (
            ''
            'http'
            'wais'
            'imap'
            'https'
            'shttp'
            'mms'
            'gopher'
            'rtsp'
            'rtspu'
            'sip'
            'sips'
        )
        (
            ''
            'ftp'
            'hdl'
            'http'
            'gopher'
            'news'
            'nntp'
            'wais'
            'https'
            'shttp'
            'snews'
            'file'
            'prospero'
        )
        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-.'
        '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f '
        (
            '\t'
            '\r'
            '\n'
        )
        20
        [Code]
            File Name: urllib/parse.py
            Object Name: clear_cache
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_parse_cache'
                'clear'
                '_safe_quoters'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Clear the parse cache and the quoters cache.'
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _parse_cache
                2       LOAD_METHOD                     1: clear
                4       CALL_METHOD                     0
                6       POP_TOP                         
                8       LOAD_GLOBAL                     2: _safe_quoters
                10      LOAD_METHOD                     1: clear
                12      CALL_METHOD                     0
                14      POP_TOP                         
                16      LOAD_CONST                      1: None
                18      RETURN_VALUE                    
        'clear_cache'
        'ascii'
        'strict'
        [Code]
            File Name: urllib/parse.py
            Object Name: _noop
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'obj'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_FAST                       0: obj
                2       RETURN_VALUE                    
        '_noop'
        [Code]
            File Name: urllib/parse.py
            Object Name: _encode_result
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'encode'
            [Var Names]
                'obj'
                'encoding'
                'errors'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_FAST                       0: obj
                2       LOAD_METHOD                     0: encode
                4       LOAD_FAST                       1: encoding
                6       LOAD_FAST                       2: errors
                8       CALL_METHOD                     2
                10      RETURN_VALUE                    
        '_encode_result'
        [Code]
            File Name: urllib/parse.py
            Object Name: _decode_args
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'tuple'
            [Var Names]
                'args'
                'encoding'
                'errors'
            [Free Vars]
            [Cell Vars]
                'encoding'
                'errors'
            [Constants]
                None
                [Code]
                    File Name: urllib/parse.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                        'decode'
                    [Var Names]
                        '.0'
                        'x'
                    [Free Vars]
                        'encoding'
                        'errors'
                    [Cell Vars]
                    [Constants]
                        ''
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        13 (to 32)
                        6       STORE_FAST                      1: x
                        8       LOAD_FAST                       1: x
                        10      POP_JUMP_IF_FALSE               12 (to 24)
                        12      LOAD_FAST                       1: x
                        14      LOAD_METHOD                     0: decode
                        16      LOAD_DEREF                      0: encoding
                        18      LOAD_DEREF                      1: errors
                        20      CALL_METHOD                     2
                        22      JUMP_FORWARD                    1 (to 26)
                        24      LOAD_CONST                      0: ''
                        26      YIELD_VALUE                     
                        28      POP_TOP                         
                        30      JUMP_ABSOLUTE                   2 (to 4)
                        32      LOAD_CONST                      1: None
                        34      RETURN_VALUE                    
                '_decode_args.<locals>.<genexpr>'
            [Disassembly]
                0       LOAD_GLOBAL                     0: tuple
                2       LOAD_CLOSURE                    0: encoding
                4       LOAD_CLOSURE                    1: errors
                6       BUILD_TUPLE                     2
                8       LOAD_CONST                      1: <CODE> <genexpr>
                10      LOAD_CONST                      2: '_decode_args.<locals>.<genexpr>'
                12      MAKE_FUNCTION                   8
                14      LOAD_FAST                       0: args
                16      GET_ITER                        
                18      CALL_FUNCTION                   1
                20      CALL_FUNCTION                   1
                22      RETURN_VALUE                    
        '_decode_args'
        [Code]
            File Name: urllib/parse.py
            Object Name: _coerce_args
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
            [Names]
                'isinstance'
                'str'
                'TypeError'
                '_noop'
                '_decode_args'
                '_encode_result'
            [Var Names]
                'args'
                'str_input'
                'arg'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                0
                1
                'Cannot mix str and non-str arguments'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: args
                4       LOAD_CONST                      1: 0
                6       BINARY_SUBSCR                   
                8       LOAD_GLOBAL                     1: str
                10      CALL_FUNCTION                   2
                12      STORE_FAST                      1: str_input
                14      LOAD_FAST                       0: args
                16      LOAD_CONST                      2: 1
                18      LOAD_CONST                      0: None
                20      BUILD_SLICE                     2
                22      BINARY_SUBSCR                   
                24      GET_ITER                        
                26      FOR_ITER                        15 (to 58)
                28      STORE_FAST                      2: arg
                30      LOAD_FAST                       2: arg
                32      POP_JUMP_IF_FALSE               28 (to 56)
                34      LOAD_GLOBAL                     0: isinstance
                36      LOAD_FAST                       2: arg
                38      LOAD_GLOBAL                     1: str
                40      CALL_FUNCTION                   2
                42      LOAD_FAST                       1: str_input
                44      COMPARE_OP                      3 (!=)
                46      POP_JUMP_IF_FALSE               28 (to 56)
                48      LOAD_GLOBAL                     2: TypeError
                50      LOAD_CONST                      3: 'Cannot mix str and non-str arguments'
                52      CALL_FUNCTION                   1
                54      RAISE_VARARGS                   1
                56      JUMP_ABSOLUTE                   13 (to 26)
                58      LOAD_FAST                       1: str_input
                60      POP_JUMP_IF_FALSE               36 (to 72)
                62      LOAD_FAST                       0: args
                64      LOAD_GLOBAL                     3: _noop
                66      BUILD_TUPLE                     1
                68      BINARY_ADD                      
                70      RETURN_VALUE                    
                72      LOAD_GLOBAL                     4: _decode_args
                74      LOAD_FAST                       0: args
                76      CALL_FUNCTION                   1
                78      LOAD_GLOBAL                     5: _encode_result
                80      BUILD_TUPLE                     1
                82      BINARY_ADD                      
                84      RETURN_VALUE                    
        '_coerce_args'
        [Code]
            File Name: urllib/parse.py
            Object Name: _ResultMixinStr
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'encode'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_ResultMixinStr'
                'Standard approach to encoding parsed results from str to bytes'
                (
                )
                'ascii'
                'strict'
                [Code]
                    File Name: urllib/parse.py
                    Object Name: encode
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_encoded_counterpart'
                    [Var Names]
                        'self'
                        'encoding'
                        'errors'
                    [Free Vars]
                    [Cell Vars]
                        'encoding'
                        'errors'
                    [Constants]
                        None
                        [Code]
                            File Name: urllib/parse.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 5
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                                'encode'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                                'encoding'
                                'errors'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_METHOD                     0: encode
                                12      LOAD_DEREF                      0: encoding
                                14      LOAD_DEREF                      1: errors
                                16      CALL_METHOD                     2
                                18      YIELD_VALUE                     
                                20      POP_TOP                         
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      LOAD_CONST                      0: None
                                26      RETURN_VALUE                    
                        '_ResultMixinStr.encode.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _encoded_counterpart
                        4       LOAD_CLOSURE                    0: encoding
                        6       LOAD_CLOSURE                    1: errors
                        8       BUILD_TUPLE                     2
                        10      LOAD_CONST                      1: <CODE> <genexpr>
                        12      LOAD_CONST                      2: '_ResultMixinStr.encode.<locals>.<genexpr>'
                        14      MAKE_FUNCTION                   8
                        16      LOAD_FAST                       0: self
                        18      GET_ITER                        
                        20      CALL_FUNCTION                   1
                        22      CALL_FUNCTION_EX                0
                        24      RETURN_VALUE                    
                '_ResultMixinStr.encode'
                None
                (
                    'ascii'
                    'strict'
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_ResultMixinStr'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Standard approach to encoding parsed results from str to bytes'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      8: ('ascii', 'strict')
                18      LOAD_CONST                      5: <CODE> encode
                20      LOAD_CONST                      6: '_ResultMixinStr.encode'
                22      MAKE_FUNCTION                   1
                24      STORE_NAME                      5: encode
                26      LOAD_CONST                      7: None
                28      RETURN_VALUE                    
        '_ResultMixinStr'
        [Code]
            File Name: urllib/parse.py
            Object Name: _ResultMixinBytes
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'decode'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_ResultMixinBytes'
                'Standard approach to decoding parsed results from bytes to str'
                (
                )
                'ascii'
                'strict'
                [Code]
                    File Name: urllib/parse.py
                    Object Name: decode
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_decoded_counterpart'
                    [Var Names]
                        'self'
                        'encoding'
                        'errors'
                    [Free Vars]
                    [Cell Vars]
                        'encoding'
                        'errors'
                    [Constants]
                        None
                        [Code]
                            File Name: urllib/parse.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 5
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                                'decode'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                                'encoding'
                                'errors'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_METHOD                     0: decode
                                12      LOAD_DEREF                      0: encoding
                                14      LOAD_DEREF                      1: errors
                                16      CALL_METHOD                     2
                                18      YIELD_VALUE                     
                                20      POP_TOP                         
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      LOAD_CONST                      0: None
                                26      RETURN_VALUE                    
                        '_ResultMixinBytes.decode.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _decoded_counterpart
                        4       LOAD_CLOSURE                    0: encoding
                        6       LOAD_CLOSURE                    1: errors
                        8       BUILD_TUPLE                     2
                        10      LOAD_CONST                      1: <CODE> <genexpr>
                        12      LOAD_CONST                      2: '_ResultMixinBytes.decode.<locals>.<genexpr>'
                        14      MAKE_FUNCTION                   8
                        16      LOAD_FAST                       0: self
                        18      GET_ITER                        
                        20      CALL_FUNCTION                   1
                        22      CALL_FUNCTION_EX                0
                        24      RETURN_VALUE                    
                '_ResultMixinBytes.decode'
                None
                (
                    'ascii'
                    'strict'
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_ResultMixinBytes'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Standard approach to decoding parsed results from bytes to str'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      8: ('ascii', 'strict')
                18      LOAD_CONST                      5: <CODE> decode
                20      LOAD_CONST                      6: '_ResultMixinBytes.decode'
                22      MAKE_FUNCTION                   1
                24      STORE_NAME                      5: decode
                26      LOAD_CONST                      7: None
                28      RETURN_VALUE                    
        '_ResultMixinBytes'
        [Code]
            File Name: urllib/parse.py
            Object Name: _NetlocResultMixinBase
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'property'
                'username'
                'password'
                'hostname'
                'port'
                'classmethod'
                'types'
                'GenericAlias'
                '__class_getitem__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_NetlocResultMixinBase'
                'Shared methods for the parsed result objects containing a netloc element'
                (
                )
                [Code]
                    File Name: urllib/parse.py
                    Object Name: username
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_userinfo'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _userinfo
                        4       LOAD_CONST                      1: 0
                        6       BINARY_SUBSCR                   
                        8       RETURN_VALUE                    
                '_NetlocResultMixinBase.username'
                [Code]
                    File Name: urllib/parse.py
                    Object Name: password
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_userinfo'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _userinfo
                        4       LOAD_CONST                      1: 1
                        6       BINARY_SUBSCR                   
                        8       RETURN_VALUE                    
                '_NetlocResultMixinBase.password'
                [Code]
                    File Name: urllib/parse.py
                    Object Name: hostname
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_hostinfo'
                        'isinstance'
                        'str'
                        'partition'
                        'lower'
                    [Var Names]
                        'self'
                        'hostname'
                        'separator'
                        'percent'
                        'zone'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        '%'
                        b'%'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _hostinfo
                        4       LOAD_CONST                      1: 0
                        6       BINARY_SUBSCR                   
                        8       STORE_FAST                      1: hostname
                        10      LOAD_FAST                       1: hostname
                        12      POP_JUMP_IF_TRUE                9 (to 18)
                        14      LOAD_CONST                      0: None
                        16      RETURN_VALUE                    
                        18      LOAD_GLOBAL                     1: isinstance
                        20      LOAD_FAST                       1: hostname
                        22      LOAD_GLOBAL                     2: str
                        24      CALL_FUNCTION                   2
                        26      POP_JUMP_IF_FALSE               16 (to 32)
                        28      LOAD_CONST                      2: '%'
                        30      JUMP_FORWARD                    1 (to 34)
                        32      LOAD_CONST                      3: b'%'
                        34      STORE_FAST                      2: separator
                        36      LOAD_FAST                       1: hostname
                        38      LOAD_METHOD                     3: partition
                        40      LOAD_FAST                       2: separator
                        42      CALL_METHOD                     1
                        44      UNPACK_SEQUENCE                 3
                        46      STORE_FAST                      1: hostname
                        48      STORE_FAST                      3: percent
                        50      STORE_FAST                      4: zone
                        52      LOAD_FAST                       1: hostname
                        54      LOAD_METHOD                     4: lower
                        56      CALL_METHOD                     0
                        58      LOAD_FAST                       3: percent
                        60      BINARY_ADD                      
                        62      LOAD_FAST                       4: zone
                        64      BINARY_ADD                      
                        66      RETURN_VALUE                    
                '_NetlocResultMixinBase.hostname'
                [Code]
                    File Name: urllib/parse.py
                    Object Name: port
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_hostinfo'
                        'isdigit'
                        'isascii'
                        'int'
                        'ValueError'
                    [Var Names]
                        'self'
                        'port'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                        'Port could not be cast to integer value as '
                        0
                        65535
                        'Port out of range 0-65535'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _hostinfo
                        4       LOAD_CONST                      1: 1
                        6       BINARY_SUBSCR                   
                        8       STORE_FAST                      1: port
                        10      LOAD_FAST                       1: port
                        12      LOAD_CONST                      0: None
                        14      IS_OP                           1 (is not)
                        16      POP_JUMP_IF_FALSE               47 (to 94)
                        18      LOAD_FAST                       1: port
                        20      LOAD_METHOD                     1: isdigit
                        22      CALL_METHOD                     0
                        24      POP_JUMP_IF_FALSE               22 (to 44)
                        26      LOAD_FAST                       1: port
                        28      LOAD_METHOD                     2: isascii
                        30      CALL_METHOD                     0
                        32      POP_JUMP_IF_FALSE               22 (to 44)
                        34      LOAD_GLOBAL                     3: int
                        36      LOAD_FAST                       1: port
                        38      CALL_FUNCTION                   1
                        40      STORE_FAST                      1: port
                        42      JUMP_FORWARD                    7 (to 58)
                        44      LOAD_GLOBAL                     4: ValueError
                        46      LOAD_CONST                      2: 'Port could not be cast to integer value as '
                        48      LOAD_FAST                       1: port
                        50      FORMAT_VALUE                    2 (FVC_REPR)
                        52      BUILD_STRING                    2
                        54      CALL_FUNCTION                   1
                        56      RAISE_VARARGS                   1
                        58      LOAD_CONST                      3: 0
                        60      LOAD_FAST                       1: port
                        62      DUP_TOP                         
                        64      ROT_THREE                       
                        66      COMPARE_OP                      1 (<=)
                        68      POP_JUMP_IF_FALSE               42 (to 84)
                        70      LOAD_CONST                      4: 65535
                        72      COMPARE_OP                      1 (<=)
                        74      POP_JUMP_IF_TRUE                47 (to 94)
                        76      LOAD_GLOBAL                     4: ValueError
                        78      LOAD_CONST                      5: 'Port out of range 0-65535'
                        80      CALL_FUNCTION                   1
                        82      RAISE_VARARGS                   1
                        84      POP_TOP                         
                        86      LOAD_GLOBAL                     4: ValueError
                        88      LOAD_CONST                      5: 'Port out of range 0-65535'
                        90      CALL_FUNCTION                   1
                        92      RAISE_VARARGS                   1
                        94      LOAD_FAST                       1: port
                        96      RETURN_VALUE                    
                '_NetlocResultMixinBase.port'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_NetlocResultMixinBase'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Shared methods for the parsed result objects containing a netloc element'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: property
                18      LOAD_CONST                      3: <CODE> username
                20      LOAD_CONST                      4: '_NetlocResultMixinBase.username'
                22      MAKE_FUNCTION                   0
                24      CALL_FUNCTION                   1
                26      STORE_NAME                      6: username
                28      LOAD_NAME                       5: property
                30      LOAD_CONST                      5: <CODE> password
                32      LOAD_CONST                      6: '_NetlocResultMixinBase.password'
                34      MAKE_FUNCTION                   0
                36      CALL_FUNCTION                   1
                38      STORE_NAME                      7: password
                40      LOAD_NAME                       5: property
                42      LOAD_CONST                      7: <CODE> hostname
                44      LOAD_CONST                      8: '_NetlocResultMixinBase.hostname'
                46      MAKE_FUNCTION                   0
                48      CALL_FUNCTION                   1
                50      STORE_NAME                      8: hostname
                52      LOAD_NAME                       5: property
                54      LOAD_CONST                      9: <CODE> port
                56      LOAD_CONST                      10: '_NetlocResultMixinBase.port'
                58      MAKE_FUNCTION                   0
                60      CALL_FUNCTION                   1
                62      STORE_NAME                      9: port
                64      LOAD_NAME                       10: classmethod
                66      LOAD_NAME                       11: types
                68      LOAD_ATTR                       12: GenericAlias
                70      CALL_FUNCTION                   1
                72      STORE_NAME                      13: __class_getitem__
                74      LOAD_CONST                      11: None
                76      RETURN_VALUE                    
        '_NetlocResultMixinBase'
        [Code]
            File Name: urllib/parse.py
            Object Name: _NetlocResultMixinStr
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__slots__'
                'property'
                '_userinfo'
                '_hostinfo'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_NetlocResultMixinStr'
                (
                )
                [Code]
                    File Name: urllib/parse.py
                    Object Name: _userinfo
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'netloc'
                        'rpartition'
                        'partition'
                    [Var Names]
                        'self'
                        'netloc'
                        'userinfo'
                        'have_info'
                        'hostinfo'
                        'username'
                        'have_password'
                        'password'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '@'
                        ':'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: netloc
                        4       STORE_FAST                      1: netloc
                        6       LOAD_FAST                       1: netloc
                        8       LOAD_METHOD                     1: rpartition
                        10      LOAD_CONST                      1: '@'
                        12      CALL_METHOD                     1
                        14      UNPACK_SEQUENCE                 3
                        16      STORE_FAST                      2: userinfo
                        18      STORE_FAST                      3: have_info
                        20      STORE_FAST                      4: hostinfo
                        22      LOAD_FAST                       3: have_info
                        24      POP_JUMP_IF_FALSE               29 (to 58)
                        26      LOAD_FAST                       2: userinfo
                        28      LOAD_METHOD                     2: partition
                        30      LOAD_CONST                      2: ':'
                        32      CALL_METHOD                     1
                        34      UNPACK_SEQUENCE                 3
                        36      STORE_FAST                      5: username
                        38      STORE_FAST                      6: have_password
                        40      STORE_FAST                      7: password
                        42      LOAD_FAST                       6: have_password
                        44      POP_JUMP_IF_TRUE                25 (to 50)
                        46      LOAD_CONST                      0: None
                        48      STORE_FAST                      7: password
                        50      LOAD_FAST                       5: username
                        52      LOAD_FAST                       7: password
                        54      BUILD_TUPLE                     2
                        56      RETURN_VALUE                    
                        58      LOAD_CONST                      0: None
                        60      DUP_TOP                         
                        62      STORE_FAST                      5: username
                        64      STORE_FAST                      7: password
                        66      LOAD_FAST                       5: username
                        68      LOAD_FAST                       7: password
                        70      BUILD_TUPLE                     2
                        72      RETURN_VALUE                    
                '_NetlocResultMixinStr._userinfo'
                [Code]
                    File Name: urllib/parse.py
                    Object Name: _hostinfo
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'netloc'
                        'rpartition'
                        'partition'
                    [Var Names]
                        'self'
                        'netloc'
                        '_'
                        'hostinfo'
                        'have_open_br'
                        'bracketed'
                        'hostname'
                        'port'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '@'
                        '['
                        ']'
                        ':'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: netloc
                        4       STORE_FAST                      1: netloc
                        6       LOAD_FAST                       1: netloc
                        8       LOAD_METHOD                     1: rpartition
                        10      LOAD_CONST                      1: '@'
                        12      CALL_METHOD                     1
                        14      UNPACK_SEQUENCE                 3
                        16      STORE_FAST                      2: _
                        18      STORE_FAST                      2: _
                        20      STORE_FAST                      3: hostinfo
                        22      LOAD_FAST                       3: hostinfo
                        24      LOAD_METHOD                     2: partition
                        26      LOAD_CONST                      2: '['
                        28      CALL_METHOD                     1
                        30      UNPACK_SEQUENCE                 3
                        32      STORE_FAST                      2: _
                        34      STORE_FAST                      4: have_open_br
                        36      STORE_FAST                      5: bracketed
                        38      LOAD_FAST                       4: have_open_br
                        40      POP_JUMP_IF_FALSE               38 (to 76)
                        42      LOAD_FAST                       5: bracketed
                        44      LOAD_METHOD                     2: partition
                        46      LOAD_CONST                      3: ']'
                        48      CALL_METHOD                     1
                        50      UNPACK_SEQUENCE                 3
                        52      STORE_FAST                      6: hostname
                        54      STORE_FAST                      2: _
                        56      STORE_FAST                      7: port
                        58      LOAD_FAST                       7: port
                        60      LOAD_METHOD                     2: partition
                        62      LOAD_CONST                      4: ':'
                        64      CALL_METHOD                     1
                        66      UNPACK_SEQUENCE                 3
                        68      STORE_FAST                      2: _
                        70      STORE_FAST                      2: _
                        72      STORE_FAST                      7: port
                        74      JUMP_FORWARD                    8 (to 92)
                        76      LOAD_FAST                       3: hostinfo
                        78      LOAD_METHOD                     2: partition
                        80      LOAD_CONST                      4: ':'
                        82      CALL_METHOD                     1
                        84      UNPACK_SEQUENCE                 3
                        86      STORE_FAST                      6: hostname
                        88      STORE_FAST                      2: _
                        90      STORE_FAST                      7: port
                        92      LOAD_FAST                       7: port
                        94      POP_JUMP_IF_TRUE                50 (to 100)
                        96      LOAD_CONST                      0: None
                        98      STORE_FAST                      7: port
                        100     LOAD_FAST                       6: hostname
                        102     LOAD_FAST                       7: port
                        104     BUILD_TUPLE                     2
                        106     RETURN_VALUE                    
                '_NetlocResultMixinStr._hostinfo'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_NetlocResultMixinStr'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ()
                10      STORE_NAME                      3: __slots__
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> _userinfo
                16      LOAD_CONST                      3: '_NetlocResultMixinStr._userinfo'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: _userinfo
                24      LOAD_NAME                       4: property
                26      LOAD_CONST                      4: <CODE> _hostinfo
                28      LOAD_CONST                      5: '_NetlocResultMixinStr._hostinfo'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: _hostinfo
                36      LOAD_CONST                      6: None
                38      RETURN_VALUE                    
        '_NetlocResultMixinStr'
        [Code]
            File Name: urllib/parse.py
            Object Name: _NetlocResultMixinBytes
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__slots__'
                'property'
                '_userinfo'
                '_hostinfo'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_NetlocResultMixinBytes'
                (
                )
                [Code]
                    File Name: urllib/parse.py
                    Object Name: _userinfo
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'netloc'
                        'rpartition'
                        'partition'
                    [Var Names]
                        'self'
                        'netloc'
                        'userinfo'
                        'have_info'
                        'hostinfo'
                        'username'
                        'have_password'
                        'password'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        b'@'
                        b':'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: netloc
                        4       STORE_FAST                      1: netloc
                        6       LOAD_FAST                       1: netloc
                        8       LOAD_METHOD                     1: rpartition
                        10      LOAD_CONST                      1: b'@'
                        12      CALL_METHOD                     1
                        14      UNPACK_SEQUENCE                 3
                        16      STORE_FAST                      2: userinfo
                        18      STORE_FAST                      3: have_info
                        20      STORE_FAST                      4: hostinfo
                        22      LOAD_FAST                       3: have_info
                        24      POP_JUMP_IF_FALSE               29 (to 58)
                        26      LOAD_FAST                       2: userinfo
                        28      LOAD_METHOD                     2: partition
                        30      LOAD_CONST                      2: b':'
                        32      CALL_METHOD                     1
                        34      UNPACK_SEQUENCE                 3
                        36      STORE_FAST                      5: username
                        38      STORE_FAST                      6: have_password
                        40      STORE_FAST                      7: password
                        42      LOAD_FAST                       6: have_password
                        44      POP_JUMP_IF_TRUE                25 (to 50)
                        46      LOAD_CONST                      0: None
                        48      STORE_FAST                      7: password
                        50      LOAD_FAST                       5: username
                        52      LOAD_FAST                       7: password
                        54      BUILD_TUPLE                     2
                        56      RETURN_VALUE                    
                        58      LOAD_CONST                      0: None
                        60      DUP_TOP                         
                        62      STORE_FAST                      5: username
                        64      STORE_FAST                      7: password
                        66      LOAD_FAST                       5: username
                        68      LOAD_FAST                       7: password
                        70      BUILD_TUPLE                     2
                        72      RETURN_VALUE                    
                '_NetlocResultMixinBytes._userinfo'
                [Code]
                    File Name: urllib/parse.py
                    Object Name: _hostinfo
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'netloc'
                        'rpartition'
                        'partition'
                    [Var Names]
                        'self'
                        'netloc'
                        '_'
                        'hostinfo'
                        'have_open_br'
                        'bracketed'
                        'hostname'
                        'port'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        b'@'
                        b'['
                        b']'
                        b':'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: netloc
                        4       STORE_FAST                      1: netloc
                        6       LOAD_FAST                       1: netloc
                        8       LOAD_METHOD                     1: rpartition
                        10      LOAD_CONST                      1: b'@'
                        12      CALL_METHOD                     1
                        14      UNPACK_SEQUENCE                 3
                        16      STORE_FAST                      2: _
                        18      STORE_FAST                      2: _
                        20      STORE_FAST                      3: hostinfo
                        22      LOAD_FAST                       3: hostinfo
                        24      LOAD_METHOD                     2: partition
                        26      LOAD_CONST                      2: b'['
                        28      CALL_METHOD                     1
                        30      UNPACK_SEQUENCE                 3
                        32      STORE_FAST                      2: _
                        34      STORE_FAST                      4: have_open_br
                        36      STORE_FAST                      5: bracketed
                        38      LOAD_FAST                       4: have_open_br
                        40      POP_JUMP_IF_FALSE               38 (to 76)
                        42      LOAD_FAST                       5: bracketed
                        44      LOAD_METHOD                     2: partition
                        46      LOAD_CONST                      3: b']'
                        48      CALL_METHOD                     1
                        50      UNPACK_SEQUENCE                 3
                        52      STORE_FAST                      6: hostname
                        54      STORE_FAST                      2: _
                        56      STORE_FAST                      7: port
                        58      LOAD_FAST                       7: port
                        60      LOAD_METHOD                     2: partition
                        62      LOAD_CONST                      4: b':'
                        64      CALL_METHOD                     1
                        66      UNPACK_SEQUENCE                 3
                        68      STORE_FAST                      2: _
                        70      STORE_FAST                      2: _
                        72      STORE_FAST                      7: port
                        74      JUMP_FORWARD                    8 (to 92)
                        76      LOAD_FAST                       3: hostinfo
                        78      LOAD_METHOD                     2: partition
                        80      LOAD_CONST                      4: b':'
                        82      CALL_METHOD                     1
                        84      UNPACK_SEQUENCE                 3
                        86      STORE_FAST                      6: hostname
                        88      STORE_FAST                      2: _
                        90      STORE_FAST                      7: port
                        92      LOAD_FAST                       7: port
                        94      POP_JUMP_IF_TRUE                50 (to 100)
                        96      LOAD_CONST                      0: None
                        98      STORE_FAST                      7: port
                        100     LOAD_FAST                       6: hostname
                        102     LOAD_FAST                       7: port
                        104     BUILD_TUPLE                     2
                        106     RETURN_VALUE                    
                '_NetlocResultMixinBytes._hostinfo'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_NetlocResultMixinBytes'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ()
                10      STORE_NAME                      3: __slots__
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> _userinfo
                16      LOAD_CONST                      3: '_NetlocResultMixinBytes._userinfo'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: _userinfo
                24      LOAD_NAME                       4: property
                26      LOAD_CONST                      4: <CODE> _hostinfo
                28      LOAD_CONST                      5: '_NetlocResultMixinBytes._hostinfo'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: _hostinfo
                36      LOAD_CONST                      6: None
                38      RETURN_VALUE                    
        '_NetlocResultMixinBytes'
        (
            'namedtuple'
        )
        'DefragResult'
        'url fragment'
        'SplitResult'
        'scheme netloc path query fragment'
        'ParseResult'
        'scheme netloc path params query fragment'
        '\nDefragResult(url, fragment)\n\nA 2-tuple that contains the url without fragment identifier and the fragment\nidentifier as a separate argument.\n'
        'The URL with no fragment identifier.'
        '\nFragment identifier separated from URL, that allows indirect identification of a\nsecondary resource by reference to a primary resource and additional identifying\ninformation.\n'
        '\nSplitResult(scheme, netloc, path, query, fragment)\n\nA 5-tuple that contains the different components of a URL. Similar to\nParseResult, but does not split params.\n'
        'Specifies URL scheme for the request.'
        '\nNetwork location where the request is made to.\n'
        '\nThe hierarchical path, such as the path to a file to download.\n'
        "\nThe query component, that contains non-hierarchical data, that along with data\nin path component, identifies a resource in the scope of URI's scheme and\nnetwork location.\n"
        '\nFragment identifier, that allows indirect identification of a secondary resource\nby reference to a primary resource and additional identifying information.\n'
        '\nParseResult(scheme, netloc, path, params, query, fragment)\n\nA 6-tuple that contains components of a parsed URL.\n'
        '\nParameters for last path element used to dereference the URI in order to provide\naccess to perform some operation on the resource.\n'
        [Code]
            File Name: urllib/parse.py
            Object Name: DefragResult
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__slots__'
                'geturl'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'DefragResult'
                (
                )
                [Code]
                    File Name: urllib/parse.py
                    Object Name: geturl
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fragment'
                        'url'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '#'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: fragment
                        4       POP_JUMP_IF_FALSE               11 (to 22)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: url
                        10      LOAD_CONST                      1: '#'
                        12      BINARY_ADD                      
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       0: fragment
                        18      BINARY_ADD                      
                        20      RETURN_VALUE                    
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       1: url
                        26      RETURN_VALUE                    
                'DefragResult.geturl'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'DefragResult'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ()
                10      STORE_NAME                      3: __slots__
                12      LOAD_CONST                      2: <CODE> geturl
                14      LOAD_CONST                      3: 'DefragResult.geturl'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: geturl
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        [Code]
            File Name: urllib/parse.py
            Object Name: SplitResult
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__slots__'
                'geturl'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'SplitResult'
                (
                )
                [Code]
                    File Name: urllib/parse.py
                    Object Name: geturl
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'urlunsplit'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: urlunsplit
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                'SplitResult.geturl'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SplitResult'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ()
                10      STORE_NAME                      3: __slots__
                12      LOAD_CONST                      2: <CODE> geturl
                14      LOAD_CONST                      3: 'SplitResult.geturl'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: geturl
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        [Code]
            File Name: urllib/parse.py
            Object Name: ParseResult
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__slots__'
                'geturl'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ParseResult'
                (
                )
                [Code]
                    File Name: urllib/parse.py
                    Object Name: geturl
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'urlunparse'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: urlunparse
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                'ParseResult.geturl'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ParseResult'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ()
                10      STORE_NAME                      3: __slots__
                12      LOAD_CONST                      2: <CODE> geturl
                14      LOAD_CONST                      3: 'ParseResult.geturl'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: geturl
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        [Code]
            File Name: urllib/parse.py
            Object Name: DefragResultBytes
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__slots__'
                'geturl'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'DefragResultBytes'
                (
                )
                [Code]
                    File Name: urllib/parse.py
                    Object Name: geturl
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'fragment'
                        'url'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        b'#'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: fragment
                        4       POP_JUMP_IF_FALSE               11 (to 22)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: url
                        10      LOAD_CONST                      1: b'#'
                        12      BINARY_ADD                      
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       0: fragment
                        18      BINARY_ADD                      
                        20      RETURN_VALUE                    
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       1: url
                        26      RETURN_VALUE                    
                'DefragResultBytes.geturl'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'DefragResultBytes'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ()
                10      STORE_NAME                      3: __slots__
                12      LOAD_CONST                      2: <CODE> geturl
                14      LOAD_CONST                      3: 'DefragResultBytes.geturl'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: geturl
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'DefragResultBytes'
        [Code]
            File Name: urllib/parse.py
            Object Name: SplitResultBytes
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__slots__'
                'geturl'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'SplitResultBytes'
                (
                )
                [Code]
                    File Name: urllib/parse.py
                    Object Name: geturl
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'urlunsplit'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: urlunsplit
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                'SplitResultBytes.geturl'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SplitResultBytes'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ()
                10      STORE_NAME                      3: __slots__
                12      LOAD_CONST                      2: <CODE> geturl
                14      LOAD_CONST                      3: 'SplitResultBytes.geturl'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: geturl
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'SplitResultBytes'
        [Code]
            File Name: urllib/parse.py
            Object Name: ParseResultBytes
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__slots__'
                'geturl'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ParseResultBytes'
                (
                )
                [Code]
                    File Name: urllib/parse.py
                    Object Name: geturl
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'urlunparse'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: urlunparse
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                'ParseResultBytes.geturl'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ParseResultBytes'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: ()
                10      STORE_NAME                      3: __slots__
                12      LOAD_CONST                      2: <CODE> geturl
                14      LOAD_CONST                      3: 'ParseResultBytes.geturl'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: geturl
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'ParseResultBytes'
        [Code]
            File Name: urllib/parse.py
            Object Name: _fix_result_transcoding
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'DefragResult'
                'DefragResultBytes'
                'SplitResult'
                'SplitResultBytes'
                'ParseResult'
                'ParseResultBytes'
                '_encoded_counterpart'
                '_decoded_counterpart'
            [Var Names]
                '_result_pairs'
                '_decoded'
                '_encoded'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: DefragResult
                2       LOAD_GLOBAL                     1: DefragResultBytes
                4       BUILD_TUPLE                     2
                6       LOAD_GLOBAL                     2: SplitResult
                8       LOAD_GLOBAL                     3: SplitResultBytes
                10      BUILD_TUPLE                     2
                12      LOAD_GLOBAL                     4: ParseResult
                14      LOAD_GLOBAL                     5: ParseResultBytes
                16      BUILD_TUPLE                     2
                18      BUILD_TUPLE                     3
                20      STORE_FAST                      0: _result_pairs
                22      LOAD_FAST                       0: _result_pairs
                24      GET_ITER                        
                26      FOR_ITER                        10 (to 48)
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      1: _decoded
                32      STORE_FAST                      2: _encoded
                34      LOAD_FAST                       2: _encoded
                36      LOAD_FAST                       1: _decoded
                38      STORE_ATTR                      6: _encoded_counterpart
                40      LOAD_FAST                       1: _decoded
                42      LOAD_FAST                       2: _encoded
                44      STORE_ATTR                      7: _decoded_counterpart
                46      JUMP_ABSOLUTE                   13 (to 26)
                48      LOAD_CONST                      0: None
                50      RETURN_VALUE                    
        '_fix_result_transcoding'
        ''
        True
        [Code]
            File Name: urllib/parse.py
            Object Name: urlparse
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 10
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_coerce_args'
                'urlsplit'
                'uses_params'
                '_splitparams'
                'ParseResult'
            [Var Names]
                'url'
                'scheme'
                'allow_fragments'
                '_coerce_result'
                'splitresult'
                'netloc'
                'query'
                'fragment'
                'params'
                'result'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Parse a URL into 6 components:\n    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n\n    The result is a named 6-tuple with fields corresponding to the\n    above. It is either a ParseResult or ParseResultBytes object,\n    depending on the type of the url parameter.\n\n    The username, password, hostname, and port sub-components of netloc\n    can also be accessed as attributes of the returned object.\n\n    The scheme argument provides the default value of the scheme\n    component when no scheme is found in url.\n\n    If allow_fragments is False, no attempt is made to separate the\n    fragment component from the previous component, which can be either\n    path or query.\n\n    Note that % escapes are not expanded.\n    '
                ';'
                ''
            [Disassembly]
                0       LOAD_GLOBAL                     0: _coerce_args
                2       LOAD_FAST                       0: url
                4       LOAD_FAST                       1: scheme
                6       CALL_FUNCTION                   2
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      0: url
                12      STORE_FAST                      1: scheme
                14      STORE_FAST                      3: _coerce_result
                16      LOAD_GLOBAL                     1: urlsplit
                18      LOAD_FAST                       0: url
                20      LOAD_FAST                       1: scheme
                22      LOAD_FAST                       2: allow_fragments
                24      CALL_FUNCTION                   3
                26      STORE_FAST                      4: splitresult
                28      LOAD_FAST                       4: splitresult
                30      UNPACK_SEQUENCE                 5
                32      STORE_FAST                      1: scheme
                34      STORE_FAST                      5: netloc
                36      STORE_FAST                      0: url
                38      STORE_FAST                      6: query
                40      STORE_FAST                      7: fragment
                42      LOAD_FAST                       1: scheme
                44      LOAD_GLOBAL                     2: uses_params
                46      CONTAINS_OP                     0 (in)
                48      POP_JUMP_IF_FALSE               36 (to 72)
                50      LOAD_CONST                      1: ';'
                52      LOAD_FAST                       0: url
                54      CONTAINS_OP                     0 (in)
                56      POP_JUMP_IF_FALSE               36 (to 72)
                58      LOAD_GLOBAL                     3: _splitparams
                60      LOAD_FAST                       0: url
                62      CALL_FUNCTION                   1
                64      UNPACK_SEQUENCE                 2
                66      STORE_FAST                      0: url
                68      STORE_FAST                      8: params
                70      JUMP_FORWARD                    2 (to 76)
                72      LOAD_CONST                      2: ''
                74      STORE_FAST                      8: params
                76      LOAD_GLOBAL                     4: ParseResult
                78      LOAD_FAST                       1: scheme
                80      LOAD_FAST                       5: netloc
                82      LOAD_FAST                       0: url
                84      LOAD_FAST                       8: params
                86      LOAD_FAST                       6: query
                88      LOAD_FAST                       7: fragment
                90      CALL_FUNCTION                   6
                92      STORE_FAST                      9: result
                94      LOAD_FAST                       3: _coerce_result
                96      LOAD_FAST                       9: result
                98      CALL_FUNCTION                   1
                100     RETURN_VALUE                    
        'urlparse'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splitparams
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'find'
                'rfind'
            [Var Names]
                'url'
                'i'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '/'
                ';'
                0
                ''
                1
            [Disassembly]
                0       LOAD_CONST                      1: '/'
                2       LOAD_FAST                       0: url
                4       CONTAINS_OP                     0 (in)
                6       POP_JUMP_IF_FALSE               22 (to 44)
                8       LOAD_FAST                       0: url
                10      LOAD_METHOD                     0: find
                12      LOAD_CONST                      2: ';'
                14      LOAD_FAST                       0: url
                16      LOAD_METHOD                     1: rfind
                18      LOAD_CONST                      1: '/'
                20      CALL_METHOD                     1
                22      CALL_METHOD                     2
                24      STORE_FAST                      1: i
                26      LOAD_FAST                       1: i
                28      LOAD_CONST                      3: 0
                30      COMPARE_OP                      0 (<)
                32      POP_JUMP_IF_FALSE               21 (to 42)
                34      LOAD_FAST                       0: url
                36      LOAD_CONST                      4: ''
                38      BUILD_TUPLE                     2
                40      RETURN_VALUE                    
                42      JUMP_FORWARD                    5 (to 54)
                44      LOAD_FAST                       0: url
                46      LOAD_METHOD                     0: find
                48      LOAD_CONST                      2: ';'
                50      CALL_METHOD                     1
                52      STORE_FAST                      1: i
                54      LOAD_FAST                       0: url
                56      LOAD_CONST                      0: None
                58      LOAD_FAST                       1: i
                60      BUILD_SLICE                     2
                62      BINARY_SUBSCR                   
                64      LOAD_FAST                       0: url
                66      LOAD_FAST                       1: i
                68      LOAD_CONST                      5: 1
                70      BINARY_ADD                      
                72      LOAD_CONST                      0: None
                74      BUILD_SLICE                     2
                76      BINARY_SUBSCR                   
                78      BUILD_TUPLE                     2
                80      RETURN_VALUE                    
        '_splitparams'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splitnetloc
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'len'
                'find'
                'min'
            [Var Names]
                'url'
                'start'
                'delim'
                'c'
                'wdelim'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '/?#'
                0
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_FAST                       0: url
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      2: delim
                8       LOAD_CONST                      1: '/?#'
                10      GET_ITER                        
                12      FOR_ITER                        17 (to 48)
                14      STORE_FAST                      3: c
                16      LOAD_FAST                       0: url
                18      LOAD_METHOD                     1: find
                20      LOAD_FAST                       3: c
                22      LOAD_FAST                       1: start
                24      CALL_METHOD                     2
                26      STORE_FAST                      4: wdelim
                28      LOAD_FAST                       4: wdelim
                30      LOAD_CONST                      2: 0
                32      COMPARE_OP                      5 (>=)
                34      POP_JUMP_IF_FALSE               23 (to 46)
                36      LOAD_GLOBAL                     2: min
                38      LOAD_FAST                       2: delim
                40      LOAD_FAST                       4: wdelim
                42      CALL_FUNCTION                   2
                44      STORE_FAST                      2: delim
                46      JUMP_ABSOLUTE                   6 (to 12)
                48      LOAD_FAST                       0: url
                50      LOAD_FAST                       1: start
                52      LOAD_FAST                       2: delim
                54      BUILD_SLICE                     2
                56      BINARY_SUBSCR                   
                58      LOAD_FAST                       0: url
                60      LOAD_FAST                       2: delim
                62      LOAD_CONST                      0: None
                64      BUILD_SLICE                     2
                66      BINARY_SUBSCR                   
                68      BUILD_TUPLE                     2
                70      RETURN_VALUE                    
        '_splitnetloc'
        [Code]
            File Name: urllib/parse.py
            Object Name: _checknetloc
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isascii'
                'unicodedata'
                'replace'
                'normalize'
                'ValueError'
            [Var Names]
                'netloc'
                'unicodedata'
                'n'
                'netloc2'
                'c'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                0
                '@'
                ''
                ':'
                '#'
                '?'
                'NFKC'
                '/?#@:'
                "netloc '"
                "' contains invalid "
                'characters under NFKC normalization'
            [Disassembly]
                0       LOAD_FAST                       0: netloc
                2       POP_JUMP_IF_FALSE               6 (to 12)
                4       LOAD_FAST                       0: netloc
                6       LOAD_METHOD                     0: isascii
                8       CALL_METHOD                     0
                10      POP_JUMP_IF_FALSE               8 (to 16)
                12      LOAD_CONST                      0: None
                14      RETURN_VALUE                    
                16      LOAD_CONST                      1: 0
                18      LOAD_CONST                      0: None
                20      IMPORT_NAME                     1: unicodedata
                22      STORE_FAST                      1: unicodedata
                24      LOAD_FAST                       0: netloc
                26      LOAD_METHOD                     2: replace
                28      LOAD_CONST                      2: '@'
                30      LOAD_CONST                      3: ''
                32      CALL_METHOD                     2
                34      STORE_FAST                      2: n
                36      LOAD_FAST                       2: n
                38      LOAD_METHOD                     2: replace
                40      LOAD_CONST                      4: ':'
                42      LOAD_CONST                      3: ''
                44      CALL_METHOD                     2
                46      STORE_FAST                      2: n
                48      LOAD_FAST                       2: n
                50      LOAD_METHOD                     2: replace
                52      LOAD_CONST                      5: '#'
                54      LOAD_CONST                      3: ''
                56      CALL_METHOD                     2
                58      STORE_FAST                      2: n
                60      LOAD_FAST                       2: n
                62      LOAD_METHOD                     2: replace
                64      LOAD_CONST                      6: '?'
                66      LOAD_CONST                      3: ''
                68      CALL_METHOD                     2
                70      STORE_FAST                      2: n
                72      LOAD_FAST                       1: unicodedata
                74      LOAD_METHOD                     3: normalize
                76      LOAD_CONST                      7: 'NFKC'
                78      LOAD_FAST                       2: n
                80      CALL_METHOD                     2
                82      STORE_FAST                      3: netloc2
                84      LOAD_FAST                       2: n
                86      LOAD_FAST                       3: netloc2
                88      COMPARE_OP                      2 (==)
                90      POP_JUMP_IF_FALSE               48 (to 96)
                92      LOAD_CONST                      0: None
                94      RETURN_VALUE                    
                96      LOAD_CONST                      8: '/?#@:'
                98      GET_ITER                        
                100     FOR_ITER                        16 (to 134)
                102     STORE_FAST                      4: c
                104     LOAD_FAST                       4: c
                106     LOAD_FAST                       3: netloc2
                108     CONTAINS_OP                     0 (in)
                110     POP_JUMP_IF_FALSE               66 (to 132)
                112     LOAD_GLOBAL                     4: ValueError
                114     LOAD_CONST                      9: "netloc '"
                116     LOAD_FAST                       0: netloc
                118     BINARY_ADD                      
                120     LOAD_CONST                      10: "' contains invalid "
                122     BINARY_ADD                      
                124     LOAD_CONST                      11: 'characters under NFKC normalization'
                126     BINARY_ADD                      
                128     CALL_FUNCTION                   1
                130     RAISE_VARARGS                   1
                132     JUMP_ABSOLUTE                   50 (to 100)
                134     LOAD_CONST                      0: None
                136     RETURN_VALUE                    
        '_checknetloc'
        [Code]
            File Name: urllib/parse.py
            Object Name: _check_bracketed_netloc
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'rpartition'
                'partition'
                'ValueError'
                'startswith'
                '_check_bracketed_host'
            [Var Names]
                'netloc'
                'hostname_and_port'
                'before_bracket'
                'have_open_br'
                'bracketed'
                'hostname'
                '_'
                'port'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '@'
                2
                '['
                'Invalid IPv6 URL'
                ']'
                ':'
            [Disassembly]
                0       LOAD_FAST                       0: netloc
                2       LOAD_METHOD                     0: rpartition
                4       LOAD_CONST                      1: '@'
                6       CALL_METHOD                     1
                8       LOAD_CONST                      2: 2
                10      BINARY_SUBSCR                   
                12      STORE_FAST                      1: hostname_and_port
                14      LOAD_FAST                       1: hostname_and_port
                16      LOAD_METHOD                     1: partition
                18      LOAD_CONST                      3: '['
                20      CALL_METHOD                     1
                22      UNPACK_SEQUENCE                 3
                24      STORE_FAST                      2: before_bracket
                26      STORE_FAST                      3: have_open_br
                28      STORE_FAST                      4: bracketed
                30      LOAD_FAST                       3: have_open_br
                32      POP_JUMP_IF_FALSE               43 (to 86)
                34      LOAD_FAST                       2: before_bracket
                36      POP_JUMP_IF_FALSE               23 (to 46)
                38      LOAD_GLOBAL                     2: ValueError
                40      LOAD_CONST                      4: 'Invalid IPv6 URL'
                42      CALL_FUNCTION                   1
                44      RAISE_VARARGS                   1
                46      LOAD_FAST                       4: bracketed
                48      LOAD_METHOD                     1: partition
                50      LOAD_CONST                      5: ']'
                52      CALL_METHOD                     1
                54      UNPACK_SEQUENCE                 3
                56      STORE_FAST                      5: hostname
                58      STORE_FAST                      6: _
                60      STORE_FAST                      7: port
                62      LOAD_FAST                       7: port
                64      POP_JUMP_IF_FALSE               42 (to 84)
                66      LOAD_FAST                       7: port
                68      LOAD_METHOD                     3: startswith
                70      LOAD_CONST                      6: ':'
                72      CALL_METHOD                     1
                74      POP_JUMP_IF_TRUE                42 (to 84)
                76      LOAD_GLOBAL                     2: ValueError
                78      LOAD_CONST                      4: 'Invalid IPv6 URL'
                80      CALL_FUNCTION                   1
                82      RAISE_VARARGS                   1
                84      JUMP_FORWARD                    8 (to 102)
                86      LOAD_FAST                       1: hostname_and_port
                88      LOAD_METHOD                     1: partition
                90      LOAD_CONST                      6: ':'
                92      CALL_METHOD                     1
                94      UNPACK_SEQUENCE                 3
                96      STORE_FAST                      5: hostname
                98      STORE_FAST                      6: _
                100     STORE_FAST                      7: port
                102     LOAD_GLOBAL                     4: _check_bracketed_host
                104     LOAD_FAST                       5: hostname
                106     CALL_FUNCTION                   1
                108     POP_TOP                         
                110     LOAD_CONST                      0: None
                112     RETURN_VALUE                    
        '_check_bracketed_netloc'
        [Code]
            File Name: urllib/parse.py
            Object Name: _check_bracketed_host
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'startswith'
                're'
                'match'
                'ValueError'
                'ipaddress'
                'ip_address'
                'isinstance'
                'IPv4Address'
            [Var Names]
                'hostname'
                'ip'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'v'
                '\\Av[a-fA-F0-9]+\\..+\\Z'
                'IPvFuture address is invalid'
                'An IPv4 address cannot be in brackets'
            [Disassembly]
                0       LOAD_FAST                       0: hostname
                2       LOAD_METHOD                     0: startswith
                4       LOAD_CONST                      1: 'v'
                6       CALL_METHOD                     1
                8       POP_JUMP_IF_FALSE               17 (to 34)
                10      LOAD_GLOBAL                     1: re
                12      LOAD_METHOD                     2: match
                14      LOAD_CONST                      2: '\\Av[a-fA-F0-9]+\\..+\\Z'
                16      LOAD_FAST                       0: hostname
                18      CALL_METHOD                     2
                20      POP_JUMP_IF_TRUE                15 (to 30)
                22      LOAD_GLOBAL                     3: ValueError
                24      LOAD_CONST                      3: 'IPvFuture address is invalid'
                26      CALL_FUNCTION                   1
                28      RAISE_VARARGS                   1
                30      LOAD_CONST                      0: None
                32      RETURN_VALUE                    
                34      LOAD_GLOBAL                     4: ipaddress
                36      LOAD_METHOD                     5: ip_address
                38      LOAD_FAST                       0: hostname
                40      CALL_METHOD                     1
                42      STORE_FAST                      1: ip
                44      LOAD_GLOBAL                     6: isinstance
                46      LOAD_FAST                       1: ip
                48      LOAD_GLOBAL                     4: ipaddress
                50      LOAD_ATTR                       7: IPv4Address
                52      CALL_FUNCTION                   2
                54      POP_JUMP_IF_FALSE               32 (to 64)
                56      LOAD_GLOBAL                     3: ValueError
                58      LOAD_CONST                      4: 'An IPv4 address cannot be in brackets'
                60      CALL_FUNCTION                   1
                62      RAISE_VARARGS                   1
                64      LOAD_CONST                      0: None
                66      RETURN_VALUE                    
        '_check_bracketed_host'
        [Code]
            File Name: urllib/parse.py
            Object Name: urlsplit
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 13
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_coerce_args'
                'lstrip'
                '_WHATWG_C0_CONTROL_OR_SPACE'
                'strip'
                '_UNSAFE_URL_BYTES_TO_REMOVE'
                'replace'
                'bool'
                'type'
                '_parse_cache'
                'get'
                'len'
                'MAX_CACHE_SIZE'
                'clear_cache'
                'find'
                'scheme_chars'
                'lower'
                '_splitnetloc'
                'ValueError'
                '_check_bracketed_netloc'
                'split'
                '_checknetloc'
                'SplitResult'
            [Var Names]
                'url'
                'scheme'
                'allow_fragments'
                '_coerce_result'
                'b'
                'key'
                'cached'
                'netloc'
                'query'
                'fragment'
                'i'
                'c'
                'v'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Parse a URL into 5 components:\n    <scheme>://<netloc>/<path>?<query>#<fragment>\n\n    The result is a named 5-tuple with fields corresponding to the\n    above. It is either a SplitResult or SplitResultBytes object,\n    depending on the type of the url parameter.\n\n    The username, password, hostname, and port sub-components of netloc\n    can also be accessed as attributes of the returned object.\n\n    The scheme argument provides the default value of the scheme\n    component when no scheme is found in url.\n\n    If allow_fragments is False, no attempt is made to separate the\n    fragment component from the previous component, which can be either\n    path or query.\n\n    Note that % escapes are not expanded.\n    '
                ''
                None
                ':'
                0
                1
                2
                '//'
                '['
                ']'
                'Invalid IPv6 URL'
                '#'
                '?'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _coerce_args
                2       LOAD_FAST                       0: url
                4       LOAD_FAST                       1: scheme
                6       CALL_FUNCTION                   2
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      0: url
                12      STORE_FAST                      1: scheme
                14      STORE_FAST                      3: _coerce_result
                16      LOAD_FAST                       0: url
                18      LOAD_METHOD                     1: lstrip
                20      LOAD_GLOBAL                     2: _WHATWG_C0_CONTROL_OR_SPACE
                22      CALL_METHOD                     1
                24      STORE_FAST                      0: url
                26      LOAD_FAST                       1: scheme
                28      LOAD_METHOD                     3: strip
                30      LOAD_GLOBAL                     2: _WHATWG_C0_CONTROL_OR_SPACE
                32      CALL_METHOD                     1
                34      STORE_FAST                      1: scheme
                36      LOAD_GLOBAL                     4: _UNSAFE_URL_BYTES_TO_REMOVE
                38      GET_ITER                        
                40      FOR_ITER                        14 (to 70)
                42      STORE_FAST                      4: b
                44      LOAD_FAST                       0: url
                46      LOAD_METHOD                     5: replace
                48      LOAD_FAST                       4: b
                50      LOAD_CONST                      1: ''
                52      CALL_METHOD                     2
                54      STORE_FAST                      0: url
                56      LOAD_FAST                       1: scheme
                58      LOAD_METHOD                     5: replace
                60      LOAD_FAST                       4: b
                62      LOAD_CONST                      1: ''
                64      CALL_METHOD                     2
                66      STORE_FAST                      1: scheme
                68      JUMP_ABSOLUTE                   20 (to 40)
                70      LOAD_GLOBAL                     6: bool
                72      LOAD_FAST                       2: allow_fragments
                74      CALL_FUNCTION                   1
                76      STORE_FAST                      2: allow_fragments
                78      LOAD_FAST                       0: url
                80      LOAD_FAST                       1: scheme
                82      LOAD_FAST                       2: allow_fragments
                84      LOAD_GLOBAL                     7: type
                86      LOAD_FAST                       0: url
                88      CALL_FUNCTION                   1
                90      LOAD_GLOBAL                     7: type
                92      LOAD_FAST                       1: scheme
                94      CALL_FUNCTION                   1
                96      BUILD_TUPLE                     5
                98      STORE_FAST                      5: key
                100     LOAD_GLOBAL                     8: _parse_cache
                102     LOAD_METHOD                     9: get
                104     LOAD_FAST                       5: key
                106     LOAD_CONST                      2: None
                108     CALL_METHOD                     2
                110     STORE_FAST                      6: cached
                112     LOAD_FAST                       6: cached
                114     POP_JUMP_IF_FALSE               62 (to 124)
                116     LOAD_FAST                       3: _coerce_result
                118     LOAD_FAST                       6: cached
                120     CALL_FUNCTION                   1
                122     RETURN_VALUE                    
                124     LOAD_GLOBAL                     10: len
                126     LOAD_GLOBAL                     8: _parse_cache
                128     CALL_FUNCTION                   1
                130     LOAD_GLOBAL                     11: MAX_CACHE_SIZE
                132     COMPARE_OP                      5 (>=)
                134     POP_JUMP_IF_FALSE               71 (to 142)
                136     LOAD_GLOBAL                     12: clear_cache
                138     CALL_FUNCTION                   0
                140     POP_TOP                         
                142     LOAD_CONST                      1: ''
                144     DUP_TOP                         
                146     STORE_FAST                      7: netloc
                148     DUP_TOP                         
                150     STORE_FAST                      8: query
                152     STORE_FAST                      9: fragment
                154     LOAD_FAST                       0: url
                156     LOAD_METHOD                     13: find
                158     LOAD_CONST                      3: ':'
                160     CALL_METHOD                     1
                162     STORE_FAST                      10: i
                164     LOAD_FAST                       10: i
                166     LOAD_CONST                      4: 0
                168     COMPARE_OP                      4 (>)
                170     POP_JUMP_IF_FALSE               118 (to 236)
                172     LOAD_FAST                       0: url
                174     LOAD_CONST                      2: None
                176     LOAD_FAST                       10: i
                178     BUILD_SLICE                     2
                180     BINARY_SUBSCR                   
                182     GET_ITER                        
                184     FOR_ITER                        8 (to 202)
                186     STORE_FAST                      11: c
                188     LOAD_FAST                       11: c
                190     LOAD_GLOBAL                     14: scheme_chars
                192     CONTAINS_OP                     1 (not in)
                194     POP_JUMP_IF_FALSE               100 (to 200)
                196     POP_TOP                         
                198     JUMP_FORWARD                    18 (to 236)
                200     JUMP_ABSOLUTE                   92 (to 184)
                202     LOAD_FAST                       0: url
                204     LOAD_CONST                      2: None
                206     LOAD_FAST                       10: i
                208     BUILD_SLICE                     2
                210     BINARY_SUBSCR                   
                212     LOAD_METHOD                     15: lower
                214     CALL_METHOD                     0
                216     LOAD_FAST                       0: url
                218     LOAD_FAST                       10: i
                220     LOAD_CONST                      5: 1
                222     BINARY_ADD                      
                224     LOAD_CONST                      2: None
                226     BUILD_SLICE                     2
                228     BINARY_SUBSCR                   
                230     ROT_TWO                         
                232     STORE_FAST                      1: scheme
                234     STORE_FAST                      0: url
                236     LOAD_FAST                       0: url
                238     LOAD_CONST                      2: None
                240     LOAD_CONST                      6: 2
                242     BUILD_SLICE                     2
                244     BINARY_SUBSCR                   
                246     LOAD_CONST                      7: '//'
                248     COMPARE_OP                      2 (==)
                250     POP_JUMP_IF_FALSE               165 (to 330)
                252     LOAD_GLOBAL                     16: _splitnetloc
                254     LOAD_FAST                       0: url
                256     LOAD_CONST                      6: 2
                258     CALL_FUNCTION                   2
                260     UNPACK_SEQUENCE                 2
                262     STORE_FAST                      7: netloc
                264     STORE_FAST                      0: url
                266     LOAD_CONST                      8: '['
                268     LOAD_FAST                       7: netloc
                270     CONTAINS_OP                     0 (in)
                272     POP_JUMP_IF_FALSE               141 (to 282)
                274     LOAD_CONST                      9: ']'
                276     LOAD_FAST                       7: netloc
                278     CONTAINS_OP                     1 (not in)
                280     POP_JUMP_IF_TRUE                149 (to 298)
                282     LOAD_CONST                      9: ']'
                284     LOAD_FAST                       7: netloc
                286     CONTAINS_OP                     0 (in)
                288     POP_JUMP_IF_FALSE               153 (to 306)
                290     LOAD_CONST                      8: '['
                292     LOAD_FAST                       7: netloc
                294     CONTAINS_OP                     1 (not in)
                296     POP_JUMP_IF_FALSE               153 (to 306)
                298     LOAD_GLOBAL                     17: ValueError
                300     LOAD_CONST                      10: 'Invalid IPv6 URL'
                302     CALL_FUNCTION                   1
                304     RAISE_VARARGS                   1
                306     LOAD_CONST                      8: '['
                308     LOAD_FAST                       7: netloc
                310     CONTAINS_OP                     0 (in)
                312     POP_JUMP_IF_FALSE               165 (to 330)
                314     LOAD_CONST                      9: ']'
                316     LOAD_FAST                       7: netloc
                318     CONTAINS_OP                     0 (in)
                320     POP_JUMP_IF_FALSE               165 (to 330)
                322     LOAD_GLOBAL                     18: _check_bracketed_netloc
                324     LOAD_FAST                       7: netloc
                326     CALL_FUNCTION                   1
                328     POP_TOP                         
                330     LOAD_FAST                       2: allow_fragments
                332     POP_JUMP_IF_FALSE               179 (to 358)
                334     LOAD_CONST                      11: '#'
                336     LOAD_FAST                       0: url
                338     CONTAINS_OP                     0 (in)
                340     POP_JUMP_IF_FALSE               179 (to 358)
                342     LOAD_FAST                       0: url
                344     LOAD_METHOD                     19: split
                346     LOAD_CONST                      11: '#'
                348     LOAD_CONST                      5: 1
                350     CALL_METHOD                     2
                352     UNPACK_SEQUENCE                 2
                354     STORE_FAST                      0: url
                356     STORE_FAST                      9: fragment
                358     LOAD_CONST                      12: '?'
                360     LOAD_FAST                       0: url
                362     CONTAINS_OP                     0 (in)
                364     POP_JUMP_IF_FALSE               191 (to 382)
                366     LOAD_FAST                       0: url
                368     LOAD_METHOD                     19: split
                370     LOAD_CONST                      12: '?'
                372     LOAD_CONST                      5: 1
                374     CALL_METHOD                     2
                376     UNPACK_SEQUENCE                 2
                378     STORE_FAST                      0: url
                380     STORE_FAST                      8: query
                382     LOAD_GLOBAL                     20: _checknetloc
                384     LOAD_FAST                       7: netloc
                386     CALL_FUNCTION                   1
                388     POP_TOP                         
                390     LOAD_GLOBAL                     21: SplitResult
                392     LOAD_FAST                       1: scheme
                394     LOAD_FAST                       7: netloc
                396     LOAD_FAST                       0: url
                398     LOAD_FAST                       8: query
                400     LOAD_FAST                       9: fragment
                402     CALL_FUNCTION                   5
                404     STORE_FAST                      12: v
                406     LOAD_FAST                       12: v
                408     LOAD_GLOBAL                     8: _parse_cache
                410     LOAD_FAST                       5: key
                412     STORE_SUBSCR                    
                414     LOAD_FAST                       3: _coerce_result
                416     LOAD_FAST                       12: v
                418     CALL_FUNCTION                   1
                420     RETURN_VALUE                    
        'urlsplit'
        [Code]
            File Name: urllib/parse.py
            Object Name: urlunparse
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_coerce_args'
                'urlunsplit'
            [Var Names]
                'components'
                'scheme'
                'netloc'
                'url'
                'params'
                'query'
                'fragment'
                '_coerce_result'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Put a parsed URL back together again.  This may result in a\n    slightly different, but equivalent URL, if the URL that was parsed\n    originally had redundant delimiters, e.g. a ? with an empty query\n    (the draft states that these are equivalent).'
                '%s;%s'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _coerce_args
                2       LOAD_FAST                       0: components
                4       CALL_FUNCTION_EX                0
                6       UNPACK_SEQUENCE                 7
                8       STORE_FAST                      1: scheme
                10      STORE_FAST                      2: netloc
                12      STORE_FAST                      3: url
                14      STORE_FAST                      4: params
                16      STORE_FAST                      5: query
                18      STORE_FAST                      6: fragment
                20      STORE_FAST                      7: _coerce_result
                22      LOAD_FAST                       4: params
                24      POP_JUMP_IF_FALSE               19 (to 38)
                26      LOAD_CONST                      1: '%s;%s'
                28      LOAD_FAST                       3: url
                30      LOAD_FAST                       4: params
                32      BUILD_TUPLE                     2
                34      BINARY_MODULO                   
                36      STORE_FAST                      3: url
                38      LOAD_FAST                       7: _coerce_result
                40      LOAD_GLOBAL                     1: urlunsplit
                42      LOAD_FAST                       1: scheme
                44      LOAD_FAST                       2: netloc
                46      LOAD_FAST                       3: url
                48      LOAD_FAST                       5: query
                50      LOAD_FAST                       6: fragment
                52      BUILD_TUPLE                     5
                54      CALL_FUNCTION                   1
                56      CALL_FUNCTION                   1
                58      RETURN_VALUE                    
        'urlunparse'
        [Code]
            File Name: urllib/parse.py
            Object Name: urlunsplit
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 7
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_coerce_args'
                'uses_netloc'
            [Var Names]
                'components'
                'scheme'
                'netloc'
                'url'
                'query'
                'fragment'
                '_coerce_result'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Combine the elements of a tuple as returned by urlsplit() into a\n    complete URL as a string. The data argument can be any five-item iterable.\n    This may result in a slightly different, but equivalent URL, if the URL that\n    was parsed originally had unnecessary delimiters (for example, a ? with an\n    empty query; the RFC states that these are equivalent).'
                None
                2
                '//'
                1
                '/'
                ''
                ':'
                '?'
                '#'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _coerce_args
                2       LOAD_FAST                       0: components
                4       CALL_FUNCTION_EX                0
                6       UNPACK_SEQUENCE                 6
                8       STORE_FAST                      1: scheme
                10      STORE_FAST                      2: netloc
                12      STORE_FAST                      3: url
                14      STORE_FAST                      4: query
                16      STORE_FAST                      5: fragment
                18      STORE_FAST                      6: _coerce_result
                20      LOAD_FAST                       2: netloc
                22      POP_JUMP_IF_TRUE                26 (to 52)
                24      LOAD_FAST                       1: scheme
                26      POP_JUMP_IF_FALSE               48 (to 96)
                28      LOAD_FAST                       1: scheme
                30      LOAD_GLOBAL                     1: uses_netloc
                32      CONTAINS_OP                     0 (in)
                34      POP_JUMP_IF_FALSE               48 (to 96)
                36      LOAD_FAST                       3: url
                38      LOAD_CONST                      1: None
                40      LOAD_CONST                      2: 2
                42      BUILD_SLICE                     2
                44      BINARY_SUBSCR                   
                46      LOAD_CONST                      3: '//'
                48      COMPARE_OP                      3 (!=)
                50      POP_JUMP_IF_FALSE               48 (to 96)
                52      LOAD_FAST                       3: url
                54      POP_JUMP_IF_FALSE               40 (to 80)
                56      LOAD_FAST                       3: url
                58      LOAD_CONST                      1: None
                60      LOAD_CONST                      4: 1
                62      BUILD_SLICE                     2
                64      BINARY_SUBSCR                   
                66      LOAD_CONST                      5: '/'
                68      COMPARE_OP                      3 (!=)
                70      POP_JUMP_IF_FALSE               40 (to 80)
                72      LOAD_CONST                      5: '/'
                74      LOAD_FAST                       3: url
                76      BINARY_ADD                      
                78      STORE_FAST                      3: url
                80      LOAD_CONST                      3: '//'
                82      LOAD_FAST                       2: netloc
                84      JUMP_IF_TRUE_OR_POP             44 (to 88)
                86      LOAD_CONST                      6: ''
                88      BINARY_ADD                      
                90      LOAD_FAST                       3: url
                92      BINARY_ADD                      
                94      STORE_FAST                      3: url
                96      LOAD_FAST                       1: scheme
                98      POP_JUMP_IF_FALSE               56 (to 112)
                100     LOAD_FAST                       1: scheme
                102     LOAD_CONST                      7: ':'
                104     BINARY_ADD                      
                106     LOAD_FAST                       3: url
                108     BINARY_ADD                      
                110     STORE_FAST                      3: url
                112     LOAD_FAST                       4: query
                114     POP_JUMP_IF_FALSE               64 (to 128)
                116     LOAD_FAST                       3: url
                118     LOAD_CONST                      8: '?'
                120     BINARY_ADD                      
                122     LOAD_FAST                       4: query
                124     BINARY_ADD                      
                126     STORE_FAST                      3: url
                128     LOAD_FAST                       5: fragment
                130     POP_JUMP_IF_FALSE               72 (to 144)
                132     LOAD_FAST                       3: url
                134     LOAD_CONST                      9: '#'
                136     BINARY_ADD                      
                138     LOAD_FAST                       5: fragment
                140     BINARY_ADD                      
                142     STORE_FAST                      3: url
                144     LOAD_FAST                       6: _coerce_result
                146     LOAD_FAST                       3: url
                148     CALL_FUNCTION                   1
                150     RETURN_VALUE                    
        'urlunsplit'
        [Code]
            File Name: urllib/parse.py
            Object Name: urljoin
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 20
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_coerce_args'
                'urlparse'
                'uses_relative'
                'uses_netloc'
                'urlunparse'
                'split'
                'filter'
                'pop'
                'IndexError'
                'append'
                'join'
            [Var Names]
                'base'
                'url'
                'allow_fragments'
                '_coerce_result'
                'bscheme'
                'bnetloc'
                'bpath'
                'bparams'
                'bquery'
                'bfragment'
                'scheme'
                'netloc'
                'path'
                'params'
                'query'
                'fragment'
                'base_parts'
                'segments'
                'resolved_path'
                'seg'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Join a base URL and a possibly relative URL to form an absolute\n    interpretation of the latter.'
                ''
                '/'
                -1
                None
                1
                '..'
                '.'
                (
                    '.'
                    '..'
                )
            [Disassembly]
                0       LOAD_FAST                       0: base
                2       POP_JUMP_IF_TRUE                4 (to 8)
                4       LOAD_FAST                       1: url
                6       RETURN_VALUE                    
                8       LOAD_FAST                       1: url
                10      POP_JUMP_IF_TRUE                8 (to 16)
                12      LOAD_FAST                       0: base
                14      RETURN_VALUE                    
                16      LOAD_GLOBAL                     0: _coerce_args
                18      LOAD_FAST                       0: base
                20      LOAD_FAST                       1: url
                22      CALL_FUNCTION                   2
                24      UNPACK_SEQUENCE                 3
                26      STORE_FAST                      0: base
                28      STORE_FAST                      1: url
                30      STORE_FAST                      3: _coerce_result
                32      LOAD_GLOBAL                     1: urlparse
                34      LOAD_FAST                       0: base
                36      LOAD_CONST                      1: ''
                38      LOAD_FAST                       2: allow_fragments
                40      CALL_FUNCTION                   3
                42      UNPACK_SEQUENCE                 6
                44      STORE_FAST                      4: bscheme
                46      STORE_FAST                      5: bnetloc
                48      STORE_FAST                      6: bpath
                50      STORE_FAST                      7: bparams
                52      STORE_FAST                      8: bquery
                54      STORE_FAST                      9: bfragment
                56      LOAD_GLOBAL                     1: urlparse
                58      LOAD_FAST                       1: url
                60      LOAD_FAST                       4: bscheme
                62      LOAD_FAST                       2: allow_fragments
                64      CALL_FUNCTION                   3
                66      UNPACK_SEQUENCE                 6
                68      STORE_FAST                      10: scheme
                70      STORE_FAST                      11: netloc
                72      STORE_FAST                      12: path
                74      STORE_FAST                      13: params
                76      STORE_FAST                      14: query
                78      STORE_FAST                      15: fragment
                80      LOAD_FAST                       10: scheme
                82      LOAD_FAST                       4: bscheme
                84      COMPARE_OP                      3 (!=)
                86      POP_JUMP_IF_TRUE                48 (to 96)
                88      LOAD_FAST                       10: scheme
                90      LOAD_GLOBAL                     2: uses_relative
                92      CONTAINS_OP                     1 (not in)
                94      POP_JUMP_IF_FALSE               52 (to 104)
                96      LOAD_FAST                       3: _coerce_result
                98      LOAD_FAST                       1: url
                100     CALL_FUNCTION                   1
                102     RETURN_VALUE                    
                104     LOAD_FAST                       10: scheme
                106     LOAD_GLOBAL                     3: uses_netloc
                108     CONTAINS_OP                     0 (in)
                110     POP_JUMP_IF_FALSE               72 (to 144)
                112     LOAD_FAST                       11: netloc
                114     POP_JUMP_IF_FALSE               70 (to 140)
                116     LOAD_FAST                       3: _coerce_result
                118     LOAD_GLOBAL                     4: urlunparse
                120     LOAD_FAST                       10: scheme
                122     LOAD_FAST                       11: netloc
                124     LOAD_FAST                       12: path
                126     LOAD_FAST                       13: params
                128     LOAD_FAST                       14: query
                130     LOAD_FAST                       15: fragment
                132     BUILD_TUPLE                     6
                134     CALL_FUNCTION                   1
                136     CALL_FUNCTION                   1
                138     RETURN_VALUE                    
                140     LOAD_FAST                       5: bnetloc
                142     STORE_FAST                      11: netloc
                144     LOAD_FAST                       12: path
                146     POP_JUMP_IF_TRUE                96 (to 192)
                148     LOAD_FAST                       13: params
                150     POP_JUMP_IF_TRUE                96 (to 192)
                152     LOAD_FAST                       6: bpath
                154     STORE_FAST                      12: path
                156     LOAD_FAST                       7: bparams
                158     STORE_FAST                      13: params
                160     LOAD_FAST                       14: query
                162     POP_JUMP_IF_TRUE                84 (to 168)
                164     LOAD_FAST                       8: bquery
                166     STORE_FAST                      14: query
                168     LOAD_FAST                       3: _coerce_result
                170     LOAD_GLOBAL                     4: urlunparse
                172     LOAD_FAST                       10: scheme
                174     LOAD_FAST                       11: netloc
                176     LOAD_FAST                       12: path
                178     LOAD_FAST                       13: params
                180     LOAD_FAST                       14: query
                182     LOAD_FAST                       15: fragment
                184     BUILD_TUPLE                     6
                186     CALL_FUNCTION                   1
                188     CALL_FUNCTION                   1
                190     RETURN_VALUE                    
                192     LOAD_FAST                       6: bpath
                194     LOAD_METHOD                     5: split
                196     LOAD_CONST                      2: '/'
                198     CALL_METHOD                     1
                200     STORE_FAST                      16: base_parts
                202     LOAD_FAST                       16: base_parts
                204     LOAD_CONST                      3: -1
                206     BINARY_SUBSCR                   
                208     LOAD_CONST                      1: ''
                210     COMPARE_OP                      3 (!=)
                212     POP_JUMP_IF_FALSE               110 (to 220)
                214     LOAD_FAST                       16: base_parts
                216     LOAD_CONST                      3: -1
                218     DELETE_SUBSCR                   
                220     LOAD_FAST                       12: path
                222     LOAD_CONST                      4: None
                224     LOAD_CONST                      5: 1
                226     BUILD_SLICE                     2
                228     BINARY_SUBSCR                   
                230     LOAD_CONST                      2: '/'
                232     COMPARE_OP                      2 (==)
                234     POP_JUMP_IF_FALSE               124 (to 248)
                236     LOAD_FAST                       12: path
                238     LOAD_METHOD                     5: split
                240     LOAD_CONST                      2: '/'
                242     CALL_METHOD                     1
                244     STORE_FAST                      17: segments
                246     JUMP_FORWARD                    20 (to 288)
                248     LOAD_FAST                       16: base_parts
                250     LOAD_FAST                       12: path
                252     LOAD_METHOD                     5: split
                254     LOAD_CONST                      2: '/'
                256     CALL_METHOD                     1
                258     BINARY_ADD                      
                260     STORE_FAST                      17: segments
                262     LOAD_GLOBAL                     6: filter
                264     LOAD_CONST                      4: None
                266     LOAD_FAST                       17: segments
                268     LOAD_CONST                      5: 1
                270     LOAD_CONST                      3: -1
                272     BUILD_SLICE                     2
                274     BINARY_SUBSCR                   
                276     CALL_FUNCTION                   2
                278     LOAD_FAST                       17: segments
                280     LOAD_CONST                      5: 1
                282     LOAD_CONST                      3: -1
                284     BUILD_SLICE                     2
                286     STORE_SUBSCR                    
                288     BUILD_LIST                      0
                290     STORE_FAST                      18: resolved_path
                292     LOAD_FAST                       17: segments
                294     GET_ITER                        
                296     FOR_ITER                        32 (to 362)
                298     STORE_FAST                      19: seg
                300     LOAD_FAST                       19: seg
                302     LOAD_CONST                      6: '..'
                304     COMPARE_OP                      2 (==)
                306     POP_JUMP_IF_FALSE               170 (to 340)
                308     SETUP_FINALLY                   6 (to 322)
                310     LOAD_FAST                       18: resolved_path
                312     LOAD_METHOD                     7: pop
                314     CALL_METHOD                     0
                316     POP_TOP                         
                318     POP_BLOCK                       
                320     JUMP_ABSOLUTE                   148 (to 296)
                322     DUP_TOP                         
                324     LOAD_GLOBAL                     8: IndexError
                326     JUMP_IF_NOT_EXC_MATCH           169 (to 338)
                328     POP_TOP                         
                330     POP_TOP                         
                332     POP_TOP                         
                334     POP_EXCEPT                      
                336     JUMP_ABSOLUTE                   148 (to 296)
                338     RERAISE                         0
                340     LOAD_FAST                       19: seg
                342     LOAD_CONST                      7: '.'
                344     COMPARE_OP                      2 (==)
                346     POP_JUMP_IF_FALSE               175 (to 350)
                348     JUMP_ABSOLUTE                   148 (to 296)
                350     LOAD_FAST                       18: resolved_path
                352     LOAD_METHOD                     9: append
                354     LOAD_FAST                       19: seg
                356     CALL_METHOD                     1
                358     POP_TOP                         
                360     JUMP_ABSOLUTE                   148 (to 296)
                362     LOAD_FAST                       17: segments
                364     LOAD_CONST                      3: -1
                366     BINARY_SUBSCR                   
                368     LOAD_CONST                      8: ('.', '..')
                370     CONTAINS_OP                     0 (in)
                372     POP_JUMP_IF_FALSE               192 (to 384)
                374     LOAD_FAST                       18: resolved_path
                376     LOAD_METHOD                     9: append
                378     LOAD_CONST                      1: ''
                380     CALL_METHOD                     1
                382     POP_TOP                         
                384     LOAD_FAST                       3: _coerce_result
                386     LOAD_GLOBAL                     4: urlunparse
                388     LOAD_FAST                       10: scheme
                390     LOAD_FAST                       11: netloc
                392     LOAD_CONST                      2: '/'
                394     LOAD_METHOD                     10: join
                396     LOAD_FAST                       18: resolved_path
                398     CALL_METHOD                     1
                400     JUMP_IF_TRUE_OR_POP             202 (to 404)
                402     LOAD_CONST                      2: '/'
                404     LOAD_FAST                       13: params
                406     LOAD_FAST                       14: query
                408     LOAD_FAST                       15: fragment
                410     BUILD_TUPLE                     6
                412     CALL_FUNCTION                   1
                414     CALL_FUNCTION                   1
                416     RETURN_VALUE                    
        'urljoin'
        [Code]
            File Name: urllib/parse.py
            Object Name: urldefrag
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 9
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_coerce_args'
                'urlparse'
                'urlunparse'
                'DefragResult'
            [Var Names]
                'url'
                '_coerce_result'
                's'
                'n'
                'p'
                'a'
                'q'
                'frag'
                'defrag'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Removes any existing fragment from URL.\n\n    Returns a tuple of the defragmented URL and the fragment.  If\n    the URL contained no fragments, the second element is the\n    empty string.\n    '
                '#'
                ''
            [Disassembly]
                0       LOAD_GLOBAL                     0: _coerce_args
                2       LOAD_FAST                       0: url
                4       CALL_FUNCTION                   1
                6       UNPACK_SEQUENCE                 2
                8       STORE_FAST                      0: url
                10      STORE_FAST                      1: _coerce_result
                12      LOAD_CONST                      1: '#'
                14      LOAD_FAST                       0: url
                16      CONTAINS_OP                     0 (in)
                18      POP_JUMP_IF_FALSE               31 (to 62)
                20      LOAD_GLOBAL                     1: urlparse
                22      LOAD_FAST                       0: url
                24      CALL_FUNCTION                   1
                26      UNPACK_SEQUENCE                 6
                28      STORE_FAST                      2: s
                30      STORE_FAST                      3: n
                32      STORE_FAST                      4: p
                34      STORE_FAST                      5: a
                36      STORE_FAST                      6: q
                38      STORE_FAST                      7: frag
                40      LOAD_GLOBAL                     2: urlunparse
                42      LOAD_FAST                       2: s
                44      LOAD_FAST                       3: n
                46      LOAD_FAST                       4: p
                48      LOAD_FAST                       5: a
                50      LOAD_FAST                       6: q
                52      LOAD_CONST                      2: ''
                54      BUILD_TUPLE                     6
                56      CALL_FUNCTION                   1
                58      STORE_FAST                      8: defrag
                60      JUMP_FORWARD                    4 (to 70)
                62      LOAD_CONST                      2: ''
                64      STORE_FAST                      7: frag
                66      LOAD_FAST                       0: url
                68      STORE_FAST                      8: defrag
                70      LOAD_FAST                       1: _coerce_result
                72      LOAD_GLOBAL                     3: DefragResult
                74      LOAD_FAST                       8: defrag
                76      LOAD_FAST                       7: frag
                78      CALL_FUNCTION                   2
                80      CALL_FUNCTION                   1
                82      RETURN_VALUE                    
        'urldefrag'
        '0123456789ABCDEFabcdef'
        [Code]
            File Name: urllib/parse.py
            Object Name: unquote_to_bytes
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'split'
                'isinstance'
                'str'
                'encode'
                'len'
                'append'
                '_hextobyte'
                '_hexdig'
                'KeyError'
                'join'
            [Var Names]
                'string'
                'bits'
                'res'
                'append'
                'item'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "unquote_to_bytes('abc%20def') -> b'abc def'."
                b''
                'utf-8'
                b'%'
                1
                0
                None
                [Code]
                    File Name: urllib/parse.py
                    Object Name: <dictcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        '_hexdig'
                        'encode'
                        'bytes'
                        'fromhex'
                    [Var Names]
                        '.0'
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_MAP                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        19 (to 44)
                        6       STORE_FAST                      1: a
                        8       LOAD_GLOBAL                     0: _hexdig
                        10      GET_ITER                        
                        12      FOR_ITER                        14 (to 42)
                        14      STORE_FAST                      2: b
                        16      LOAD_FAST                       1: a
                        18      LOAD_FAST                       2: b
                        20      BINARY_ADD                      
                        22      LOAD_METHOD                     1: encode
                        24      CALL_METHOD                     0
                        26      LOAD_GLOBAL                     2: bytes
                        28      LOAD_METHOD                     3: fromhex
                        30      LOAD_FAST                       1: a
                        32      LOAD_FAST                       2: b
                        34      BINARY_ADD                      
                        36      CALL_METHOD                     1
                        38      MAP_ADD                         3
                        40      JUMP_ABSOLUTE                   6 (to 12)
                        42      JUMP_ABSOLUTE                   2 (to 4)
                        44      RETURN_VALUE                    
                'unquote_to_bytes.<locals>.<dictcomp>'
                2
            [Disassembly]
                0       LOAD_FAST                       0: string
                2       POP_JUMP_IF_TRUE                7 (to 14)
                4       LOAD_FAST                       0: string
                6       LOAD_ATTR                       0: split
                8       POP_TOP                         
                10      LOAD_CONST                      1: b''
                12      RETURN_VALUE                    
                14      LOAD_GLOBAL                     1: isinstance
                16      LOAD_FAST                       0: string
                18      LOAD_GLOBAL                     2: str
                20      CALL_FUNCTION                   2
                22      POP_JUMP_IF_FALSE               17 (to 34)
                24      LOAD_FAST                       0: string
                26      LOAD_METHOD                     3: encode
                28      LOAD_CONST                      2: 'utf-8'
                30      CALL_METHOD                     1
                32      STORE_FAST                      0: string
                34      LOAD_FAST                       0: string
                36      LOAD_METHOD                     0: split
                38      LOAD_CONST                      3: b'%'
                40      CALL_METHOD                     1
                42      STORE_FAST                      1: bits
                44      LOAD_GLOBAL                     4: len
                46      LOAD_FAST                       1: bits
                48      CALL_FUNCTION                   1
                50      LOAD_CONST                      4: 1
                52      COMPARE_OP                      2 (==)
                54      POP_JUMP_IF_FALSE               30 (to 60)
                56      LOAD_FAST                       0: string
                58      RETURN_VALUE                    
                60      LOAD_FAST                       1: bits
                62      LOAD_CONST                      5: 0
                64      BINARY_SUBSCR                   
                66      BUILD_LIST                      1
                68      STORE_FAST                      2: res
                70      LOAD_FAST                       2: res
                72      LOAD_ATTR                       5: append
                74      STORE_FAST                      3: append
                76      LOAD_GLOBAL                     6: _hextobyte
                78      LOAD_CONST                      6: None
                80      IS_OP                           0 (is)
                82      POP_JUMP_IF_FALSE               49 (to 98)
                84      LOAD_CONST                      7: <CODE> <dictcomp>
                86      LOAD_CONST                      8: 'unquote_to_bytes.<locals>.<dictcomp>'
                88      MAKE_FUNCTION                   0
                90      LOAD_GLOBAL                     7: _hexdig
                92      GET_ITER                        
                94      CALL_FUNCTION                   1
                96      STORE_GLOBAL                    6: _hextobyte
                98      LOAD_FAST                       1: bits
                100     LOAD_CONST                      4: 1
                102     LOAD_CONST                      6: None
                104     BUILD_SLICE                     2
                106     BINARY_SUBSCR                   
                108     GET_ITER                        
                110     FOR_ITER                        39 (to 190)
                112     STORE_FAST                      4: item
                114     SETUP_FINALLY                   20 (to 156)
                116     LOAD_FAST                       3: append
                118     LOAD_GLOBAL                     6: _hextobyte
                120     LOAD_FAST                       4: item
                122     LOAD_CONST                      6: None
                124     LOAD_CONST                      9: 2
                126     BUILD_SLICE                     2
                128     BINARY_SUBSCR                   
                130     BINARY_SUBSCR                   
                132     CALL_FUNCTION                   1
                134     POP_TOP                         
                136     LOAD_FAST                       3: append
                138     LOAD_FAST                       4: item
                140     LOAD_CONST                      9: 2
                142     LOAD_CONST                      6: None
                144     BUILD_SLICE                     2
                146     BINARY_SUBSCR                   
                148     CALL_FUNCTION                   1
                150     POP_TOP                         
                152     POP_BLOCK                       
                154     JUMP_ABSOLUTE                   55 (to 110)
                156     DUP_TOP                         
                158     LOAD_GLOBAL                     8: KeyError
                160     JUMP_IF_NOT_EXC_MATCH           94 (to 188)
                162     POP_TOP                         
                164     POP_TOP                         
                166     POP_TOP                         
                168     LOAD_FAST                       3: append
                170     LOAD_CONST                      3: b'%'
                172     CALL_FUNCTION                   1
                174     POP_TOP                         
                176     LOAD_FAST                       3: append
                178     LOAD_FAST                       4: item
                180     CALL_FUNCTION                   1
                182     POP_TOP                         
                184     POP_EXCEPT                      
                186     JUMP_ABSOLUTE                   55 (to 110)
                188     RERAISE                         0
                190     LOAD_CONST                      1: b''
                192     LOAD_METHOD                     9: join
                194     LOAD_FAST                       2: res
                196     CALL_METHOD                     1
                198     RETURN_VALUE                    
        'unquote_to_bytes'
        '([\x00-\x7f]+)'
        'utf-8'
        'replace'
        [Code]
            File Name: urllib/parse.py
            Object Name: unquote
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 7
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'bytes'
                'unquote_to_bytes'
                'decode'
                'split'
                '_asciire'
                'append'
                'range'
                'len'
                'join'
            [Var Names]
                'string'
                'encoding'
                'errors'
                'bits'
                'res'
                'append'
                'i'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Replace %xx escapes by their single-character equivalent. The optional\n    encoding and errors parameters specify how to decode percent-encoded\n    sequences into Unicode characters, as accepted by the bytes.decode()\n    method.\n    By default, percent-encoded sequences are decoded with UTF-8, and invalid\n    sequences are replaced by a placeholder character.\n\n    unquote('abc%20def') -> 'abc def'.\n    "
                '%'
                None
                'utf-8'
                'replace'
                0
                1
                2
                ''
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: string
                4       LOAD_GLOBAL                     1: bytes
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               13 (to 26)
                10      LOAD_GLOBAL                     2: unquote_to_bytes
                12      LOAD_FAST                       0: string
                14      CALL_FUNCTION                   1
                16      LOAD_METHOD                     3: decode
                18      LOAD_FAST                       1: encoding
                20      LOAD_FAST                       2: errors
                22      CALL_METHOD                     2
                24      RETURN_VALUE                    
                26      LOAD_CONST                      1: '%'
                28      LOAD_FAST                       0: string
                30      CONTAINS_OP                     1 (not in)
                32      POP_JUMP_IF_FALSE               22 (to 44)
                34      LOAD_FAST                       0: string
                36      LOAD_ATTR                       4: split
                38      POP_TOP                         
                40      LOAD_FAST                       0: string
                42      RETURN_VALUE                    
                44      LOAD_FAST                       1: encoding
                46      LOAD_CONST                      2: None
                48      IS_OP                           0 (is)
                50      POP_JUMP_IF_FALSE               28 (to 56)
                52      LOAD_CONST                      3: 'utf-8'
                54      STORE_FAST                      1: encoding
                56      LOAD_FAST                       2: errors
                58      LOAD_CONST                      2: None
                60      IS_OP                           0 (is)
                62      POP_JUMP_IF_FALSE               34 (to 68)
                64      LOAD_CONST                      4: 'replace'
                66      STORE_FAST                      2: errors
                68      LOAD_GLOBAL                     5: _asciire
                70      LOAD_METHOD                     4: split
                72      LOAD_FAST                       0: string
                74      CALL_METHOD                     1
                76      STORE_FAST                      3: bits
                78      LOAD_FAST                       3: bits
                80      LOAD_CONST                      5: 0
                82      BINARY_SUBSCR                   
                84      BUILD_LIST                      1
                86      STORE_FAST                      4: res
                88      LOAD_FAST                       4: res
                90      LOAD_ATTR                       6: append
                92      STORE_FAST                      5: append
                94      LOAD_GLOBAL                     7: range
                96      LOAD_CONST                      6: 1
                98      LOAD_GLOBAL                     8: len
                100     LOAD_FAST                       3: bits
                102     CALL_FUNCTION                   1
                104     LOAD_CONST                      7: 2
                106     CALL_FUNCTION                   3
                108     GET_ITER                        
                110     FOR_ITER                        22 (to 156)
                112     STORE_FAST                      6: i
                114     LOAD_FAST                       5: append
                116     LOAD_GLOBAL                     2: unquote_to_bytes
                118     LOAD_FAST                       3: bits
                120     LOAD_FAST                       6: i
                122     BINARY_SUBSCR                   
                124     CALL_FUNCTION                   1
                126     LOAD_METHOD                     3: decode
                128     LOAD_FAST                       1: encoding
                130     LOAD_FAST                       2: errors
                132     CALL_METHOD                     2
                134     CALL_FUNCTION                   1
                136     POP_TOP                         
                138     LOAD_FAST                       5: append
                140     LOAD_FAST                       3: bits
                142     LOAD_FAST                       6: i
                144     LOAD_CONST                      6: 1
                146     BINARY_ADD                      
                148     BINARY_SUBSCR                   
                150     CALL_FUNCTION                   1
                152     POP_TOP                         
                154     JUMP_ABSOLUTE                   55 (to 110)
                156     LOAD_CONST                      8: ''
                158     LOAD_METHOD                     9: join
                160     LOAD_FAST                       4: res
                162     CALL_METHOD                     1
                164     RETURN_VALUE                    
        'unquote'
        False
        '&'
        [Code]
            File Name: urllib/parse.py
            Object Name: parse_qs
            Arg Count: 7
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 11
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'parse_qsl'
                'append'
            [Var Names]
                'qs'
                'keep_blank_values'
                'strict_parsing'
                'encoding'
                'errors'
                'max_num_fields'
                'separator'
                'parsed_result'
                'pairs'
                'name'
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Parse a query given as a string argument.\n\n        Arguments:\n\n        qs: percent-encoded query string to be parsed\n\n        keep_blank_values: flag indicating whether blank values in\n            percent-encoded queries should be treated as blank strings.\n            A true value indicates that blanks should be retained as\n            blank strings.  The default false value indicates that\n            blank values are to be ignored and treated as if they were\n            not included.\n\n        strict_parsing: flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored.\n            If true, errors raise a ValueError exception.\n\n        encoding and errors: specify how to decode percent-encoded sequences\n            into Unicode characters, as accepted by the bytes.decode() method.\n\n        max_num_fields: int. If set, then throws a ValueError if there\n            are more than n fields read by parse_qsl().\n\n        separator: str. The symbol to use for separating the query arguments.\n            Defaults to &.\n\n        Returns a dictionary.\n    '
                (
                    'encoding'
                    'errors'
                    'max_num_fields'
                    'separator'
                )
            [Disassembly]
                0       BUILD_MAP                       0
                2       STORE_FAST                      7: parsed_result
                4       LOAD_GLOBAL                     0: parse_qsl
                6       LOAD_FAST                       0: qs
                8       LOAD_FAST                       1: keep_blank_values
                10      LOAD_FAST                       2: strict_parsing
                12      LOAD_FAST                       3: encoding
                14      LOAD_FAST                       4: errors
                16      LOAD_FAST                       5: max_num_fields
                18      LOAD_FAST                       6: separator
                20      LOAD_CONST                      1: ('encoding', 'errors', 'max_num_fields', 'separator')
                22      CALL_FUNCTION_KW                7
                24      STORE_FAST                      8: pairs
                26      LOAD_FAST                       8: pairs
                28      GET_ITER                        
                30      FOR_ITER                        21 (to 74)
                32      UNPACK_SEQUENCE                 2
                34      STORE_FAST                      9: name
                36      STORE_FAST                      10: value
                38      LOAD_FAST                       9: name
                40      LOAD_FAST                       7: parsed_result
                42      CONTAINS_OP                     0 (in)
                44      POP_JUMP_IF_FALSE               31 (to 62)
                46      LOAD_FAST                       7: parsed_result
                48      LOAD_FAST                       9: name
                50      BINARY_SUBSCR                   
                52      LOAD_METHOD                     1: append
                54      LOAD_FAST                       10: value
                56      CALL_METHOD                     1
                58      POP_TOP                         
                60      JUMP_ABSOLUTE                   15 (to 30)
                62      LOAD_FAST                       10: value
                64      BUILD_LIST                      1
                66      LOAD_FAST                       7: parsed_result
                68      LOAD_FAST                       9: name
                70      STORE_SUBSCR                    
                72      JUMP_ABSOLUTE                   15 (to 30)
                74      LOAD_FAST                       7: parsed_result
                76      RETURN_VALUE                    
        'parse_qs'
        [Code]
            File Name: urllib/parse.py
            Object Name: parse_qsl
            Arg Count: 7
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 15
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_coerce_args'
                'isinstance'
                'str'
                'bytes'
                'ValueError'
                'count'
                'split'
                'len'
                'append'
                'replace'
                'unquote'
            [Var Names]
                'qs'
                'keep_blank_values'
                'strict_parsing'
                'encoding'
                'errors'
                'max_num_fields'
                'separator'
                '_coerce_result'
                '_'
                'num_fields'
                'r'
                'name_value'
                'nv'
                'name'
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Parse a query given as a string argument.\n\n        Arguments:\n\n        qs: percent-encoded query string to be parsed\n\n        keep_blank_values: flag indicating whether blank values in\n            percent-encoded queries should be treated as blank strings.\n            A true value indicates that blanks should be retained as blank\n            strings.  The default false value indicates that blank values\n            are to be ignored and treated as if they were  not included.\n\n        strict_parsing: flag indicating what to do with parsing errors. If\n            false (the default), errors are silently ignored. If true,\n            errors raise a ValueError exception.\n\n        encoding and errors: specify how to decode percent-encoded sequences\n            into Unicode characters, as accepted by the bytes.decode() method.\n\n        max_num_fields: int. If set, then throws a ValueError\n            if there are more than n fields read by parse_qsl().\n\n        separator: str. The symbol to use for separating the query arguments.\n            Defaults to &.\n\n        Returns a list, as G-d intended.\n    '
                'Separator must be of type string or bytes.'
                None
                1
                'Max number of fields exceeded'
                '='
                2
                'bad query field: %r'
                ''
                0
                '+'
                ' '
                (
                    'encoding'
                    'errors'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: _coerce_args
                2       LOAD_FAST                       0: qs
                4       CALL_FUNCTION                   1
                6       UNPACK_SEQUENCE                 2
                8       STORE_FAST                      0: qs
                10      STORE_FAST                      7: _coerce_result
                12      LOAD_GLOBAL                     0: _coerce_args
                14      LOAD_FAST                       6: separator
                16      CALL_FUNCTION                   1
                18      UNPACK_SEQUENCE                 2
                20      STORE_FAST                      6: separator
                22      STORE_FAST                      8: _
                24      LOAD_FAST                       6: separator
                26      POP_JUMP_IF_FALSE               21 (to 42)
                28      LOAD_GLOBAL                     1: isinstance
                30      LOAD_FAST                       6: separator
                32      LOAD_GLOBAL                     2: str
                34      LOAD_GLOBAL                     3: bytes
                36      BUILD_TUPLE                     2
                38      CALL_FUNCTION                   2
                40      POP_JUMP_IF_TRUE                25 (to 50)
                42      LOAD_GLOBAL                     4: ValueError
                44      LOAD_CONST                      1: 'Separator must be of type string or bytes.'
                46      CALL_FUNCTION                   1
                48      RAISE_VARARGS                   1
                50      LOAD_FAST                       5: max_num_fields
                52      LOAD_CONST                      2: None
                54      IS_OP                           1 (is not)
                56      POP_JUMP_IF_FALSE               44 (to 88)
                58      LOAD_CONST                      3: 1
                60      LOAD_FAST                       0: qs
                62      LOAD_METHOD                     5: count
                64      LOAD_FAST                       6: separator
                66      CALL_METHOD                     1
                68      BINARY_ADD                      
                70      STORE_FAST                      9: num_fields
                72      LOAD_FAST                       5: max_num_fields
                74      LOAD_FAST                       9: num_fields
                76      COMPARE_OP                      0 (<)
                78      POP_JUMP_IF_FALSE               44 (to 88)
                80      LOAD_GLOBAL                     4: ValueError
                82      LOAD_CONST                      4: 'Max number of fields exceeded'
                84      CALL_FUNCTION                   1
                86      RAISE_VARARGS                   1
                88      BUILD_LIST                      0
                90      STORE_FAST                      10: r
                92      LOAD_FAST                       0: qs
                94      LOAD_METHOD                     6: split
                96      LOAD_FAST                       6: separator
                98      CALL_METHOD                     1
                100     GET_ITER                        
                102     FOR_ITER                        90 (to 284)
                104     STORE_FAST                      11: name_value
                106     LOAD_FAST                       11: name_value
                108     POP_JUMP_IF_TRUE                58 (to 116)
                110     LOAD_FAST                       2: strict_parsing
                112     POP_JUMP_IF_TRUE                58 (to 116)
                114     JUMP_ABSOLUTE                   51 (to 102)
                116     LOAD_FAST                       11: name_value
                118     LOAD_METHOD                     6: split
                120     LOAD_CONST                      5: '='
                122     LOAD_CONST                      3: 1
                124     CALL_METHOD                     2
                126     STORE_FAST                      12: nv
                128     LOAD_GLOBAL                     7: len
                130     LOAD_FAST                       12: nv
                132     CALL_FUNCTION                   1
                134     LOAD_CONST                      6: 2
                136     COMPARE_OP                      3 (!=)
                138     POP_JUMP_IF_FALSE               88 (to 176)
                140     LOAD_FAST                       2: strict_parsing
                142     POP_JUMP_IF_FALSE               79 (to 158)
                144     LOAD_GLOBAL                     4: ValueError
                146     LOAD_CONST                      7: 'bad query field: %r'
                148     LOAD_FAST                       11: name_value
                150     BUILD_TUPLE                     1
                152     BINARY_MODULO                   
                154     CALL_FUNCTION                   1
                156     RAISE_VARARGS                   1
                158     LOAD_FAST                       1: keep_blank_values
                160     POP_JUMP_IF_FALSE               87 (to 174)
                162     LOAD_FAST                       12: nv
                164     LOAD_METHOD                     8: append
                166     LOAD_CONST                      8: ''
                168     CALL_METHOD                     1
                170     POP_TOP                         
                172     JUMP_FORWARD                    1 (to 176)
                174     JUMP_ABSOLUTE                   51 (to 102)
                176     LOAD_GLOBAL                     7: len
                178     LOAD_FAST                       12: nv
                180     LOAD_CONST                      3: 1
                182     BINARY_SUBSCR                   
                184     CALL_FUNCTION                   1
                186     POP_JUMP_IF_TRUE                96 (to 192)
                188     LOAD_FAST                       1: keep_blank_values
                190     POP_JUMP_IF_FALSE               141 (to 282)
                192     LOAD_FAST                       12: nv
                194     LOAD_CONST                      9: 0
                196     BINARY_SUBSCR                   
                198     LOAD_METHOD                     9: replace
                200     LOAD_CONST                      10: '+'
                202     LOAD_CONST                      11: ' '
                204     CALL_METHOD                     2
                206     STORE_FAST                      13: name
                208     LOAD_GLOBAL                     10: unquote
                210     LOAD_FAST                       13: name
                212     LOAD_FAST                       3: encoding
                214     LOAD_FAST                       4: errors
                216     LOAD_CONST                      12: ('encoding', 'errors')
                218     CALL_FUNCTION_KW                3
                220     STORE_FAST                      13: name
                222     LOAD_FAST                       7: _coerce_result
                224     LOAD_FAST                       13: name
                226     CALL_FUNCTION                   1
                228     STORE_FAST                      13: name
                230     LOAD_FAST                       12: nv
                232     LOAD_CONST                      3: 1
                234     BINARY_SUBSCR                   
                236     LOAD_METHOD                     9: replace
                238     LOAD_CONST                      10: '+'
                240     LOAD_CONST                      11: ' '
                242     CALL_METHOD                     2
                244     STORE_FAST                      14: value
                246     LOAD_GLOBAL                     10: unquote
                248     LOAD_FAST                       14: value
                250     LOAD_FAST                       3: encoding
                252     LOAD_FAST                       4: errors
                254     LOAD_CONST                      12: ('encoding', 'errors')
                256     CALL_FUNCTION_KW                3
                258     STORE_FAST                      14: value
                260     LOAD_FAST                       7: _coerce_result
                262     LOAD_FAST                       14: value
                264     CALL_FUNCTION                   1
                266     STORE_FAST                      14: value
                268     LOAD_FAST                       10: r
                270     LOAD_METHOD                     8: append
                272     LOAD_FAST                       13: name
                274     LOAD_FAST                       14: value
                276     BUILD_TUPLE                     2
                278     CALL_METHOD                     1
                280     POP_TOP                         
                282     JUMP_ABSOLUTE                   51 (to 102)
                284     LOAD_FAST                       10: r
                286     RETURN_VALUE                    
        'parse_qsl'
        [Code]
            File Name: urllib/parse.py
            Object Name: unquote_plus
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'replace'
                'unquote'
            [Var Names]
                'string'
                'encoding'
                'errors'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Like unquote(), but also replace plus signs by spaces, as required for\n    unquoting HTML form values.\n\n    unquote_plus('%7e/abc+def') -> '~/abc def'\n    "
                '+'
                ' '
            [Disassembly]
                0       LOAD_FAST                       0: string
                2       LOAD_METHOD                     0: replace
                4       LOAD_CONST                      1: '+'
                6       LOAD_CONST                      2: ' '
                8       CALL_METHOD                     2
                10      STORE_FAST                      0: string
                12      LOAD_GLOBAL                     1: unquote
                14      LOAD_FAST                       0: string
                16      LOAD_FAST                       1: encoding
                18      LOAD_FAST                       2: errors
                20      CALL_FUNCTION                   3
                22      RETURN_VALUE                    
        'unquote_plus'
        b'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_.-~'
        [Code]
            File Name: urllib/parse.py
            Object Name: Quoter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                '__repr__'
                '__missing__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Quoter'
                'A mapping from bytes (in range(0,256)) to strings.\n\n    String values are percent-encoded byte values, unless the key < 128, and\n    in the "safe" set (either the specified safe set, or default set).\n    '
                [Code]
                    File Name: urllib/parse.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ALWAYS_SAFE'
                        'union'
                        'safe'
                    [Var Names]
                        'self'
                        'safe'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'safe: bytes object.'
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _ALWAYS_SAFE
                        2       LOAD_METHOD                     1: union
                        4       LOAD_FAST                       1: safe
                        6       CALL_METHOD                     1
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      2: safe
                        12      LOAD_CONST                      1: None
                        14      RETURN_VALUE                    
                'Quoter.__init__'
                [Code]
                    File Name: urllib/parse.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__class__'
                        '__name__'
                        'dict'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<%s %r>'
                    [Disassembly]
                        0       LOAD_CONST                      1: '<%s %r>'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: __class__
                        6       LOAD_ATTR                       1: __name__
                        8       LOAD_GLOBAL                     2: dict
                        10      LOAD_FAST                       0: self
                        12      CALL_FUNCTION                   1
                        14      BUILD_TUPLE                     2
                        16      BINARY_MODULO                   
                        18      RETURN_VALUE                    
                'Quoter.__repr__'
                [Code]
                    File Name: urllib/parse.py
                    Object Name: __missing__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'safe'
                        'chr'
                        'format'
                    [Var Names]
                        'self'
                        'b'
                        'res'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%{:02X}'
                    [Disassembly]
                        0       LOAD_FAST                       1: b
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: safe
                        6       CONTAINS_OP                     0 (in)
                        8       POP_JUMP_IF_FALSE               9 (to 18)
                        10      LOAD_GLOBAL                     1: chr
                        12      LOAD_FAST                       1: b
                        14      CALL_FUNCTION                   1
                        16      JUMP_FORWARD                    4 (to 26)
                        18      LOAD_CONST                      1: '%{:02X}'
                        20      LOAD_METHOD                     2: format
                        22      LOAD_FAST                       1: b
                        24      CALL_METHOD                     1
                        26      STORE_FAST                      2: res
                        28      LOAD_FAST                       2: res
                        30      LOAD_FAST                       0: self
                        32      LOAD_FAST                       1: b
                        34      STORE_SUBSCR                    
                        36      LOAD_FAST                       2: res
                        38      RETURN_VALUE                    
                'Quoter.__missing__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Quoter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A mapping from bytes (in range(0,256)) to strings.\n\n    String values are percent-encoded byte values, unless the key < 128, and\n    in the "safe" set (either the specified safe set, or default set).\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'Quoter.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> __repr__
                22      LOAD_CONST                      5: 'Quoter.__repr__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __repr__
                28      LOAD_CONST                      6: <CODE> __missing__
                30      LOAD_CONST                      7: 'Quoter.__missing__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: __missing__
                36      LOAD_CONST                      8: None
                38      RETURN_VALUE                    
        'Quoter'
        '/'
        [Code]
            File Name: urllib/parse.py
            Object Name: quote
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'str'
                'encode'
                'TypeError'
                'quote_from_bytes'
            [Var Names]
                'string'
                'safe'
                'encoding'
                'errors'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'quote(\'abc def\') -> \'abc%20def\'\n\n    Each part of a URL, e.g. the path info, the query, etc., has a\n    different set of reserved characters that must be quoted. The\n    quote function offers a cautious (not minimal) way to quote a\n    string for most of these parts.\n\n    RFC 3986 Uniform Resource Identifier (URI): Generic Syntax lists\n    the following (un)reserved characters.\n\n    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"\n    reserved      = gen-delims / sub-delims\n    gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"\n    sub-delims    = "!" / "$" / "&" / "\'" / "(" / ")"\n                  / "*" / "+" / "," / ";" / "="\n\n    Each of the reserved characters is reserved in some component of a URL,\n    but not necessarily in all of them.\n\n    The quote function %-escapes all characters that are neither in the\n    unreserved chars ("always safe") nor the additional chars set via the\n    safe arg.\n\n    The default for the safe arg is \'/\'. The character is reserved, but in\n    typical usage the quote function is being called on a path where the\n    existing slash characters are to be preserved.\n\n    Python 3.7 updates from using RFC 2396 to RFC 3986 to quote URL strings.\n    Now, "~" is included in the set of unreserved characters.\n\n    string and safe may be either str or bytes objects. encoding and errors\n    must not be specified if string is a bytes object.\n\n    The optional encoding and errors parameters specify how to deal with\n    non-ASCII characters, as accepted by the str.encode method.\n    By default, encoding=\'utf-8\' (characters are encoded with UTF-8), and\n    errors=\'strict\' (unsupported characters raise a UnicodeEncodeError).\n    '
                None
                'utf-8'
                'strict'
                "quote() doesn't support 'encoding' for bytes"
                "quote() doesn't support 'errors' for bytes"
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: string
                4       LOAD_GLOBAL                     1: str
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               28 (to 56)
                10      LOAD_FAST                       0: string
                12      POP_JUMP_IF_TRUE                9 (to 18)
                14      LOAD_FAST                       0: string
                16      RETURN_VALUE                    
                18      LOAD_FAST                       2: encoding
                20      LOAD_CONST                      1: None
                22      IS_OP                           0 (is)
                24      POP_JUMP_IF_FALSE               15 (to 30)
                26      LOAD_CONST                      2: 'utf-8'
                28      STORE_FAST                      2: encoding
                30      LOAD_FAST                       3: errors
                32      LOAD_CONST                      1: None
                34      IS_OP                           0 (is)
                36      POP_JUMP_IF_FALSE               21 (to 42)
                38      LOAD_CONST                      3: 'strict'
                40      STORE_FAST                      3: errors
                42      LOAD_FAST                       0: string
                44      LOAD_METHOD                     2: encode
                46      LOAD_FAST                       2: encoding
                48      LOAD_FAST                       3: errors
                50      CALL_METHOD                     2
                52      STORE_FAST                      0: string
                54      JUMP_FORWARD                    16 (to 88)
                56      LOAD_FAST                       2: encoding
                58      LOAD_CONST                      1: None
                60      IS_OP                           1 (is not)
                62      POP_JUMP_IF_FALSE               36 (to 72)
                64      LOAD_GLOBAL                     3: TypeError
                66      LOAD_CONST                      4: "quote() doesn't support 'encoding' for bytes"
                68      CALL_FUNCTION                   1
                70      RAISE_VARARGS                   1
                72      LOAD_FAST                       3: errors
                74      LOAD_CONST                      1: None
                76      IS_OP                           1 (is not)
                78      POP_JUMP_IF_FALSE               44 (to 88)
                80      LOAD_GLOBAL                     3: TypeError
                82      LOAD_CONST                      5: "quote() doesn't support 'errors' for bytes"
                84      CALL_FUNCTION                   1
                86      RAISE_VARARGS                   1
                88      LOAD_GLOBAL                     4: quote_from_bytes
                90      LOAD_FAST                       0: string
                92      LOAD_FAST                       1: safe
                94      CALL_FUNCTION                   2
                96      RETURN_VALUE                    
        'quote'
        [Code]
            File Name: urllib/parse.py
            Object Name: quote_plus
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'str'
                'bytes'
                'quote'
                'replace'
            [Var Names]
                'string'
                'safe'
                'encoding'
                'errors'
                'space'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Like quote(), but also replace ' ' with '+', as required for quoting\n    HTML form values. Plus signs in the original string are escaped unless\n    they are included in safe. It also does not have safe default to '/'.\n    "
                ' '
                b' '
                '+'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: string
                4       LOAD_GLOBAL                     1: str
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               9 (to 18)
                10      LOAD_CONST                      1: ' '
                12      LOAD_FAST                       0: string
                14      CONTAINS_OP                     1 (not in)
                16      POP_JUMP_IF_TRUE                18 (to 36)
                18      LOAD_GLOBAL                     0: isinstance
                20      LOAD_FAST                       0: string
                22      LOAD_GLOBAL                     2: bytes
                24      CALL_FUNCTION                   2
                26      POP_JUMP_IF_FALSE               25 (to 50)
                28      LOAD_CONST                      2: b' '
                30      LOAD_FAST                       0: string
                32      CONTAINS_OP                     1 (not in)
                34      POP_JUMP_IF_FALSE               25 (to 50)
                36      LOAD_GLOBAL                     3: quote
                38      LOAD_FAST                       0: string
                40      LOAD_FAST                       1: safe
                42      LOAD_FAST                       2: encoding
                44      LOAD_FAST                       3: errors
                46      CALL_FUNCTION                   4
                48      RETURN_VALUE                    
                50      LOAD_GLOBAL                     0: isinstance
                52      LOAD_FAST                       1: safe
                54      LOAD_GLOBAL                     1: str
                56      CALL_FUNCTION                   2
                58      POP_JUMP_IF_FALSE               33 (to 66)
                60      LOAD_CONST                      1: ' '
                62      STORE_FAST                      4: space
                64      JUMP_FORWARD                    2 (to 70)
                66      LOAD_CONST                      2: b' '
                68      STORE_FAST                      4: space
                70      LOAD_GLOBAL                     3: quote
                72      LOAD_FAST                       0: string
                74      LOAD_FAST                       1: safe
                76      LOAD_FAST                       4: space
                78      BINARY_ADD                      
                80      LOAD_FAST                       2: encoding
                82      LOAD_FAST                       3: errors
                84      CALL_FUNCTION                   4
                86      STORE_FAST                      0: string
                88      LOAD_FAST                       0: string
                90      LOAD_METHOD                     4: replace
                92      LOAD_CONST                      1: ' '
                94      LOAD_CONST                      3: '+'
                96      CALL_METHOD                     2
                98      RETURN_VALUE                    
        'quote_plus'
        [Code]
            File Name: urllib/parse.py
            Object Name: quote_from_bytes
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 8
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'isinstance'
                'bytes'
                'bytearray'
                'TypeError'
                'str'
                'encode'
                'rstrip'
                '_ALWAYS_SAFE_BYTES'
                'decode'
                '_safe_quoters'
                'KeyError'
                'Quoter'
                '__getitem__'
                'join'
            [Var Names]
                'bs'
                'safe'
            [Free Vars]
            [Cell Vars]
                'quoter'
            [Constants]
                "Like quote(), but accepts a bytes object rather than a str, and does\n    not perform string-to-bytes encoding.  It always returns an ASCII string.\n    quote_from_bytes(b'abc def?') -> 'abc%20def%3f'\n    "
                'quote_from_bytes() expected bytes'
                ''
                'ascii'
                'ignore'
                [Code]
                    File Name: urllib/parse.py
                    Object Name: <listcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                    [Var Names]
                        '.0'
                        'c'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        128
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        8 (to 22)
                        6       STORE_FAST                      1: c
                        8       LOAD_FAST                       1: c
                        10      LOAD_CONST                      0: 128
                        12      COMPARE_OP                      0 (<)
                        14      POP_JUMP_IF_FALSE               2 (to 4)
                        16      LOAD_FAST                       1: c
                        18      LIST_APPEND                     2
                        20      JUMP_ABSOLUTE                   2 (to 4)
                        22      RETURN_VALUE                    
                'quote_from_bytes.<locals>.<listcomp>'
                [Code]
                    File Name: urllib/parse.py
                    Object Name: <listcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                    [Var Names]
                        '.0'
                        'char'
                    [Free Vars]
                        'quoter'
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        6 (to 18)
                        6       STORE_FAST                      1: char
                        8       LOAD_DEREF                      0: quoter
                        10      LOAD_FAST                       1: char
                        12      CALL_FUNCTION                   1
                        14      LIST_APPEND                     2
                        16      JUMP_ABSOLUTE                   2 (to 4)
                        18      RETURN_VALUE                    
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: bs
                4       LOAD_GLOBAL                     1: bytes
                6       LOAD_GLOBAL                     2: bytearray
                8       BUILD_TUPLE                     2
                10      CALL_FUNCTION                   2
                12      POP_JUMP_IF_TRUE                11 (to 22)
                14      LOAD_GLOBAL                     3: TypeError
                16      LOAD_CONST                      1: 'quote_from_bytes() expected bytes'
                18      CALL_FUNCTION                   1
                20      RAISE_VARARGS                   1
                22      LOAD_FAST                       0: bs
                24      POP_JUMP_IF_TRUE                15 (to 30)
                26      LOAD_CONST                      2: ''
                28      RETURN_VALUE                    
                30      LOAD_GLOBAL                     0: isinstance
                32      LOAD_FAST                       1: safe
                34      LOAD_GLOBAL                     4: str
                36      CALL_FUNCTION                   2
                38      POP_JUMP_IF_FALSE               27 (to 54)
                40      LOAD_FAST                       1: safe
                42      LOAD_METHOD                     5: encode
                44      LOAD_CONST                      3: 'ascii'
                46      LOAD_CONST                      4: 'ignore'
                48      CALL_METHOD                     2
                50      STORE_FAST                      1: safe
                52      JUMP_FORWARD                    9 (to 72)
                54      LOAD_GLOBAL                     1: bytes
                56      LOAD_CONST                      5: <CODE> <listcomp>
                58      LOAD_CONST                      6: 'quote_from_bytes.<locals>.<listcomp>'
                60      MAKE_FUNCTION                   0
                62      LOAD_FAST                       1: safe
                64      GET_ITER                        
                66      CALL_FUNCTION                   1
                68      CALL_FUNCTION                   1
                70      STORE_FAST                      1: safe
                72      LOAD_FAST                       0: bs
                74      LOAD_METHOD                     6: rstrip
                76      LOAD_GLOBAL                     7: _ALWAYS_SAFE_BYTES
                78      LOAD_FAST                       1: safe
                80      BINARY_ADD                      
                82      CALL_METHOD                     1
                84      POP_JUMP_IF_TRUE                47 (to 94)
                86      LOAD_FAST                       0: bs
                88      LOAD_METHOD                     8: decode
                90      CALL_METHOD                     0
                92      RETURN_VALUE                    
                94      SETUP_FINALLY                   6 (to 108)
                96      LOAD_GLOBAL                     9: _safe_quoters
                98      LOAD_FAST                       1: safe
                100     BINARY_SUBSCR                   
                102     STORE_DEREF                     0: quoter
                104     POP_BLOCK                       
                106     JUMP_FORWARD                    18 (to 144)
                108     DUP_TOP                         
                110     LOAD_GLOBAL                     10: KeyError
                112     JUMP_IF_NOT_EXC_MATCH           71 (to 142)
                114     POP_TOP                         
                116     POP_TOP                         
                118     POP_TOP                         
                120     LOAD_GLOBAL                     11: Quoter
                122     LOAD_FAST                       1: safe
                124     CALL_FUNCTION                   1
                126     LOAD_ATTR                       12: __getitem__
                128     DUP_TOP                         
                130     LOAD_GLOBAL                     9: _safe_quoters
                132     LOAD_FAST                       1: safe
                134     STORE_SUBSCR                    
                136     STORE_DEREF                     0: quoter
                138     POP_EXCEPT                      
                140     JUMP_FORWARD                    1 (to 144)
                142     RERAISE                         0
                144     LOAD_CONST                      2: ''
                146     LOAD_METHOD                     13: join
                148     LOAD_CLOSURE                    0: quoter
                150     BUILD_TUPLE                     1
                152     LOAD_CONST                      7: <CODE> <listcomp>
                154     LOAD_CONST                      6: 'quote_from_bytes.<locals>.<listcomp>'
                156     MAKE_FUNCTION                   8
                158     LOAD_FAST                       0: bs
                160     GET_ITER                        
                162     CALL_FUNCTION                   1
                164     CALL_METHOD                     1
                166     RETURN_VALUE                    
        'quote_from_bytes'
        [Code]
            File Name: urllib/parse.py
            Object Name: urlencode
            Arg Count: 6
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 14
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'hasattr'
                'items'
                'len'
                'isinstance'
                'tuple'
                'TypeError'
                'sys'
                'exc_info'
                'with_traceback'
                'bytes'
                'str'
                'append'
                'join'
            [Var Names]
                'query'
                'doseq'
                'safe'
                'encoding'
                'errors'
                'quote_via'
                'ty'
                'va'
                'tb'
                'l'
                'k'
                'v'
                'x'
                'elt'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Encode a dict or sequence of two-element tuples into a URL query string.\n\n    If any values in the query arg are sequences and doseq is true, each\n    sequence element is converted to a separate parameter.\n\n    If the query arg is a sequence of two-element tuples, the order of the\n    parameters in the output will match the order of parameters in the\n    input.\n\n    The components of a query arg may each be either a string or a bytes type.\n\n    The safe, encoding, and errors parameters are passed down to the function\n    specified by quote_via (encoding and errors only if a component is a str).\n    '
                'items'
                0
                'not a valid non-string sequence or mapping object'
                '='
                '&'
            [Disassembly]
                0       LOAD_GLOBAL                     0: hasattr
                2       LOAD_FAST                       0: query
                4       LOAD_CONST                      1: 'items'
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               10 (to 20)
                10      LOAD_FAST                       0: query
                12      LOAD_METHOD                     1: items
                14      CALL_METHOD                     0
                16      STORE_FAST                      0: query
                18      JUMP_FORWARD                    37 (to 94)
                20      SETUP_FINALLY                   15 (to 52)
                22      LOAD_GLOBAL                     2: len
                24      LOAD_FAST                       0: query
                26      CALL_FUNCTION                   1
                28      POP_JUMP_IF_FALSE               24 (to 48)
                30      LOAD_GLOBAL                     3: isinstance
                32      LOAD_FAST                       0: query
                34      LOAD_CONST                      2: 0
                36      BINARY_SUBSCR                   
                38      LOAD_GLOBAL                     4: tuple
                40      CALL_FUNCTION                   2
                42      POP_JUMP_IF_TRUE                24 (to 48)
                44      LOAD_GLOBAL                     5: TypeError
                46      RAISE_VARARGS                   1
                48      POP_BLOCK                       
                50      JUMP_FORWARD                    21 (to 94)
                52      DUP_TOP                         
                54      LOAD_GLOBAL                     5: TypeError
                56      JUMP_IF_NOT_EXC_MATCH           46 (to 92)
                58      POP_TOP                         
                60      POP_TOP                         
                62      POP_TOP                         
                64      LOAD_GLOBAL                     6: sys
                66      LOAD_METHOD                     7: exc_info
                68      CALL_METHOD                     0
                70      UNPACK_SEQUENCE                 3
                72      STORE_FAST                      6: ty
                74      STORE_FAST                      7: va
                76      STORE_FAST                      8: tb
                78      LOAD_GLOBAL                     5: TypeError
                80      LOAD_CONST                      3: 'not a valid non-string sequence or mapping object'
                82      CALL_FUNCTION                   1
                84      LOAD_METHOD                     8: with_traceback
                86      LOAD_FAST                       8: tb
                88      CALL_METHOD                     1
                90      RAISE_VARARGS                   1
                92      RERAISE                         0
                94      BUILD_LIST                      0
                96      STORE_FAST                      9: l
                98      LOAD_FAST                       1: doseq
                100     POP_JUMP_IF_TRUE                108 (to 216)
                102     LOAD_FAST                       0: query
                104     GET_ITER                        
                106     FOR_ITER                        53 (to 214)
                108     UNPACK_SEQUENCE                 2
                110     STORE_FAST                      10: k
                112     STORE_FAST                      11: v
                114     LOAD_GLOBAL                     3: isinstance
                116     LOAD_FAST                       10: k
                118     LOAD_GLOBAL                     9: bytes
                120     CALL_FUNCTION                   2
                122     POP_JUMP_IF_FALSE               68 (to 136)
                124     LOAD_FAST                       5: quote_via
                126     LOAD_FAST                       10: k
                128     LOAD_FAST                       2: safe
                130     CALL_FUNCTION                   2
                132     STORE_FAST                      10: k
                134     JUMP_FORWARD                    9 (to 154)
                136     LOAD_FAST                       5: quote_via
                138     LOAD_GLOBAL                     10: str
                140     LOAD_FAST                       10: k
                142     CALL_FUNCTION                   1
                144     LOAD_FAST                       2: safe
                146     LOAD_FAST                       3: encoding
                148     LOAD_FAST                       4: errors
                150     CALL_FUNCTION                   4
                152     STORE_FAST                      10: k
                154     LOAD_GLOBAL                     3: isinstance
                156     LOAD_FAST                       11: v
                158     LOAD_GLOBAL                     9: bytes
                160     CALL_FUNCTION                   2
                162     POP_JUMP_IF_FALSE               88 (to 176)
                164     LOAD_FAST                       5: quote_via
                166     LOAD_FAST                       11: v
                168     LOAD_FAST                       2: safe
                170     CALL_FUNCTION                   2
                172     STORE_FAST                      11: v
                174     JUMP_FORWARD                    9 (to 194)
                176     LOAD_FAST                       5: quote_via
                178     LOAD_GLOBAL                     10: str
                180     LOAD_FAST                       11: v
                182     CALL_FUNCTION                   1
                184     LOAD_FAST                       2: safe
                186     LOAD_FAST                       3: encoding
                188     LOAD_FAST                       4: errors
                190     CALL_FUNCTION                   4
                192     STORE_FAST                      11: v
                194     LOAD_FAST                       9: l
                196     LOAD_METHOD                     11: append
                198     LOAD_FAST                       10: k
                200     LOAD_CONST                      4: '='
                202     BINARY_ADD                      
                204     LOAD_FAST                       11: v
                206     BINARY_ADD                      
                208     CALL_METHOD                     1
                210     POP_TOP                         
                212     JUMP_ABSOLUTE                   53 (to 106)
                214     JUMP_FORWARD                    137 (to 490)
                216     LOAD_FAST                       0: query
                218     GET_ITER                        
                220     FOR_ITER                        134 (to 490)
                222     UNPACK_SEQUENCE                 2
                224     STORE_FAST                      10: k
                226     STORE_FAST                      11: v
                228     LOAD_GLOBAL                     3: isinstance
                230     LOAD_FAST                       10: k
                232     LOAD_GLOBAL                     9: bytes
                234     CALL_FUNCTION                   2
                236     POP_JUMP_IF_FALSE               125 (to 250)
                238     LOAD_FAST                       5: quote_via
                240     LOAD_FAST                       10: k
                242     LOAD_FAST                       2: safe
                244     CALL_FUNCTION                   2
                246     STORE_FAST                      10: k
                248     JUMP_FORWARD                    9 (to 268)
                250     LOAD_FAST                       5: quote_via
                252     LOAD_GLOBAL                     10: str
                254     LOAD_FAST                       10: k
                256     CALL_FUNCTION                   1
                258     LOAD_FAST                       2: safe
                260     LOAD_FAST                       3: encoding
                262     LOAD_FAST                       4: errors
                264     CALL_FUNCTION                   4
                266     STORE_FAST                      10: k
                268     LOAD_GLOBAL                     3: isinstance
                270     LOAD_FAST                       11: v
                272     LOAD_GLOBAL                     9: bytes
                274     CALL_FUNCTION                   2
                276     POP_JUMP_IF_FALSE               154 (to 308)
                278     LOAD_FAST                       5: quote_via
                280     LOAD_FAST                       11: v
                282     LOAD_FAST                       2: safe
                284     CALL_FUNCTION                   2
                286     STORE_FAST                      11: v
                288     LOAD_FAST                       9: l
                290     LOAD_METHOD                     11: append
                292     LOAD_FAST                       10: k
                294     LOAD_CONST                      4: '='
                296     BINARY_ADD                      
                298     LOAD_FAST                       11: v
                300     BINARY_ADD                      
                302     CALL_METHOD                     1
                304     POP_TOP                         
                306     JUMP_ABSOLUTE                   110 (to 220)
                308     LOAD_GLOBAL                     3: isinstance
                310     LOAD_FAST                       11: v
                312     LOAD_GLOBAL                     10: str
                314     CALL_FUNCTION                   2
                316     POP_JUMP_IF_FALSE               176 (to 352)
                318     LOAD_FAST                       5: quote_via
                320     LOAD_FAST                       11: v
                322     LOAD_FAST                       2: safe
                324     LOAD_FAST                       3: encoding
                326     LOAD_FAST                       4: errors
                328     CALL_FUNCTION                   4
                330     STORE_FAST                      11: v
                332     LOAD_FAST                       9: l
                334     LOAD_METHOD                     11: append
                336     LOAD_FAST                       10: k
                338     LOAD_CONST                      4: '='
                340     BINARY_ADD                      
                342     LOAD_FAST                       11: v
                344     BINARY_ADD                      
                346     CALL_METHOD                     1
                348     POP_TOP                         
                350     JUMP_ABSOLUTE                   110 (to 220)
                352     SETUP_FINALLY                   6 (to 366)
                354     LOAD_GLOBAL                     2: len
                356     LOAD_FAST                       11: v
                358     CALL_FUNCTION                   1
                360     STORE_FAST                      12: x
                362     POP_BLOCK                       
                364     JUMP_FORWARD                    27 (to 420)
                366     DUP_TOP                         
                368     LOAD_GLOBAL                     5: TypeError
                370     JUMP_IF_NOT_EXC_MATCH           209 (to 418)
                372     POP_TOP                         
                374     POP_TOP                         
                376     POP_TOP                         
                378     LOAD_FAST                       5: quote_via
                380     LOAD_GLOBAL                     10: str
                382     LOAD_FAST                       11: v
                384     CALL_FUNCTION                   1
                386     LOAD_FAST                       2: safe
                388     LOAD_FAST                       3: encoding
                390     LOAD_FAST                       4: errors
                392     CALL_FUNCTION                   4
                394     STORE_FAST                      11: v
                396     LOAD_FAST                       9: l
                398     LOAD_METHOD                     11: append
                400     LOAD_FAST                       10: k
                402     LOAD_CONST                      4: '='
                404     BINARY_ADD                      
                406     LOAD_FAST                       11: v
                408     BINARY_ADD                      
                410     CALL_METHOD                     1
                412     POP_TOP                         
                414     POP_EXCEPT                      
                416     JUMP_ABSOLUTE                   110 (to 220)
                418     RERAISE                         0
                420     LOAD_FAST                       11: v
                422     GET_ITER                        
                424     FOR_ITER                        31 (to 488)
                426     STORE_FAST                      13: elt
                428     LOAD_GLOBAL                     3: isinstance
                430     LOAD_FAST                       13: elt
                432     LOAD_GLOBAL                     9: bytes
                434     CALL_FUNCTION                   2
                436     POP_JUMP_IF_FALSE               225 (to 450)
                438     LOAD_FAST                       5: quote_via
                440     LOAD_FAST                       13: elt
                442     LOAD_FAST                       2: safe
                444     CALL_FUNCTION                   2
                446     STORE_FAST                      13: elt
                448     JUMP_FORWARD                    9 (to 468)
                450     LOAD_FAST                       5: quote_via
                452     LOAD_GLOBAL                     10: str
                454     LOAD_FAST                       13: elt
                456     CALL_FUNCTION                   1
                458     LOAD_FAST                       2: safe
                460     LOAD_FAST                       3: encoding
                462     LOAD_FAST                       4: errors
                464     CALL_FUNCTION                   4
                466     STORE_FAST                      13: elt
                468     LOAD_FAST                       9: l
                470     LOAD_METHOD                     11: append
                472     LOAD_FAST                       10: k
                474     LOAD_CONST                      4: '='
                476     BINARY_ADD                      
                478     LOAD_FAST                       13: elt
                480     BINARY_ADD                      
                482     CALL_METHOD                     1
                484     POP_TOP                         
                486     JUMP_ABSOLUTE                   212 (to 424)
                488     JUMP_ABSOLUTE                   110 (to 220)
                490     LOAD_CONST                      5: '&'
                492     LOAD_METHOD                     12: join
                494     LOAD_FAST                       9: l
                496     CALL_METHOD                     1
                498     RETURN_VALUE                    
        'urlencode'
        [Code]
            File Name: urllib/parse.py
            Object Name: to_bytes
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                '_to_bytes'
            [Var Names]
                'url'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'urllib.parse.to_bytes() is deprecated as of 3.8'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'urllib.parse.to_bytes() is deprecated as of 3.8'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: _to_bytes
                18      LOAD_FAST                       0: url
                20      CALL_FUNCTION                   1
                22      RETURN_VALUE                    
        'to_bytes'
        [Code]
            File Name: urllib/parse.py
            Object Name: _to_bytes
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'str'
                'encode'
                'decode'
                'UnicodeError'
                'repr'
            [Var Names]
                'url'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'to_bytes(u"URL") --> \'URL\'.'
                'ASCII'
                'URL '
                ' contains non-ASCII characters'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: url
                4       LOAD_GLOBAL                     1: str
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               33 (to 66)
                10      SETUP_FINALLY                   10 (to 32)
                12      LOAD_FAST                       0: url
                14      LOAD_METHOD                     2: encode
                16      LOAD_CONST                      1: 'ASCII'
                18      CALL_METHOD                     1
                20      LOAD_METHOD                     3: decode
                22      CALL_METHOD                     0
                24      STORE_FAST                      0: url
                26      POP_BLOCK                       
                28      LOAD_FAST                       0: url
                30      RETURN_VALUE                    
                32      DUP_TOP                         
                34      LOAD_GLOBAL                     4: UnicodeError
                36      JUMP_IF_NOT_EXC_MATCH           32 (to 64)
                38      POP_TOP                         
                40      POP_TOP                         
                42      POP_TOP                         
                44      LOAD_GLOBAL                     4: UnicodeError
                46      LOAD_CONST                      2: 'URL '
                48      LOAD_GLOBAL                     5: repr
                50      LOAD_FAST                       0: url
                52      CALL_FUNCTION                   1
                54      BINARY_ADD                      
                56      LOAD_CONST                      3: ' contains non-ASCII characters'
                58      BINARY_ADD                      
                60      CALL_FUNCTION                   1
                62      RAISE_VARARGS                   1
                64      RERAISE                         0
                66      LOAD_FAST                       0: url
                68      RETURN_VALUE                    
        '_to_bytes'
        [Code]
            File Name: urllib/parse.py
            Object Name: unwrap
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'str'
                'strip'
            [Var Names]
                'url'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Transform a string like '<URL:scheme://host/path>' into 'scheme://host/path'.\n\n    The string is returned unchanged if it's not a wrapped URL.\n    "
                None
                1
                '<'
                -1
                '>'
                4
                'URL:'
            [Disassembly]
                0       LOAD_GLOBAL                     0: str
                2       LOAD_FAST                       0: url
                4       CALL_FUNCTION                   1
                6       LOAD_METHOD                     1: strip
                8       CALL_METHOD                     0
                10      STORE_FAST                      0: url
                12      LOAD_FAST                       0: url
                14      LOAD_CONST                      1: None
                16      LOAD_CONST                      2: 1
                18      BUILD_SLICE                     2
                20      BINARY_SUBSCR                   
                22      LOAD_CONST                      3: '<'
                24      COMPARE_OP                      2 (==)
                26      POP_JUMP_IF_FALSE               30 (to 60)
                28      LOAD_FAST                       0: url
                30      LOAD_CONST                      4: -1
                32      LOAD_CONST                      1: None
                34      BUILD_SLICE                     2
                36      BINARY_SUBSCR                   
                38      LOAD_CONST                      5: '>'
                40      COMPARE_OP                      2 (==)
                42      POP_JUMP_IF_FALSE               30 (to 60)
                44      LOAD_FAST                       0: url
                46      LOAD_CONST                      2: 1
                48      LOAD_CONST                      4: -1
                50      BUILD_SLICE                     2
                52      BINARY_SUBSCR                   
                54      LOAD_METHOD                     1: strip
                56      CALL_METHOD                     0
                58      STORE_FAST                      0: url
                60      LOAD_FAST                       0: url
                62      LOAD_CONST                      1: None
                64      LOAD_CONST                      6: 4
                66      BUILD_SLICE                     2
                68      BINARY_SUBSCR                   
                70      LOAD_CONST                      7: 'URL:'
                72      COMPARE_OP                      2 (==)
                74      POP_JUMP_IF_FALSE               46 (to 92)
                76      LOAD_FAST                       0: url
                78      LOAD_CONST                      6: 4
                80      LOAD_CONST                      1: None
                82      BUILD_SLICE                     2
                84      BINARY_SUBSCR                   
                86      LOAD_METHOD                     1: strip
                88      CALL_METHOD                     0
                90      STORE_FAST                      0: url
                92      LOAD_FAST                       0: url
                94      RETURN_VALUE                    
        'unwrap'
        [Code]
            File Name: urllib/parse.py
            Object Name: splittype
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                '_splittype'
            [Var Names]
                'url'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'urllib.parse.splittype() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'urllib.parse.splittype() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: _splittype
                18      LOAD_FAST                       0: url
                20      CALL_FUNCTION                   1
                22      RETURN_VALUE                    
        'splittype'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splittype
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_typeprog'
                're'
                'compile'
                'DOTALL'
                'match'
                'groups'
                'lower'
            [Var Names]
                'url'
                'match'
                'scheme'
                'data'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "splittype('type:opaquestring') --> 'type', 'opaquestring'."
                None
                '([^/:]+):(.*)'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _typeprog
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               11 (to 22)
                8       LOAD_GLOBAL                     1: re
                10      LOAD_METHOD                     2: compile
                12      LOAD_CONST                      2: '([^/:]+):(.*)'
                14      LOAD_GLOBAL                     1: re
                16      LOAD_ATTR                       3: DOTALL
                18      CALL_METHOD                     2
                20      STORE_GLOBAL                    0: _typeprog
                22      LOAD_GLOBAL                     0: _typeprog
                24      LOAD_METHOD                     4: match
                26      LOAD_FAST                       0: url
                28      CALL_METHOD                     1
                30      STORE_FAST                      1: match
                32      LOAD_FAST                       1: match
                34      POP_JUMP_IF_FALSE               30 (to 60)
                36      LOAD_FAST                       1: match
                38      LOAD_METHOD                     5: groups
                40      CALL_METHOD                     0
                42      UNPACK_SEQUENCE                 2
                44      STORE_FAST                      2: scheme
                46      STORE_FAST                      3: data
                48      LOAD_FAST                       2: scheme
                50      LOAD_METHOD                     6: lower
                52      CALL_METHOD                     0
                54      LOAD_FAST                       3: data
                56      BUILD_TUPLE                     2
                58      RETURN_VALUE                    
                60      LOAD_CONST                      1: None
                62      LOAD_FAST                       0: url
                64      BUILD_TUPLE                     2
                66      RETURN_VALUE                    
        '_splittype'
        [Code]
            File Name: urllib/parse.py
            Object Name: splithost
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                '_splithost'
            [Var Names]
                'url'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'urllib.parse.splithost() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'urllib.parse.splithost() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: _splithost
                18      LOAD_FAST                       0: url
                20      CALL_FUNCTION                   1
                22      RETURN_VALUE                    
        'splithost'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splithost
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_hostprog'
                're'
                'compile'
                'DOTALL'
                'match'
                'groups'
            [Var Names]
                'url'
                'match'
                'host_port'
                'path'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "splithost('//host[:port]/path') --> 'host[:port]', '/path'."
                None
                '//([^/#?]*)(.*)'
                0
                '/'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _hostprog
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               11 (to 22)
                8       LOAD_GLOBAL                     1: re
                10      LOAD_METHOD                     2: compile
                12      LOAD_CONST                      2: '//([^/#?]*)(.*)'
                14      LOAD_GLOBAL                     1: re
                16      LOAD_ATTR                       3: DOTALL
                18      CALL_METHOD                     2
                20      STORE_GLOBAL                    0: _hostprog
                22      LOAD_GLOBAL                     0: _hostprog
                24      LOAD_METHOD                     4: match
                26      LOAD_FAST                       0: url
                28      CALL_METHOD                     1
                30      STORE_FAST                      1: match
                32      LOAD_FAST                       1: match
                34      POP_JUMP_IF_FALSE               40 (to 80)
                36      LOAD_FAST                       1: match
                38      LOAD_METHOD                     5: groups
                40      CALL_METHOD                     0
                42      UNPACK_SEQUENCE                 2
                44      STORE_FAST                      2: host_port
                46      STORE_FAST                      3: path
                48      LOAD_FAST                       3: path
                50      POP_JUMP_IF_FALSE               36 (to 72)
                52      LOAD_FAST                       3: path
                54      LOAD_CONST                      3: 0
                56      BINARY_SUBSCR                   
                58      LOAD_CONST                      4: '/'
                60      COMPARE_OP                      3 (!=)
                62      POP_JUMP_IF_FALSE               36 (to 72)
                64      LOAD_CONST                      4: '/'
                66      LOAD_FAST                       3: path
                68      BINARY_ADD                      
                70      STORE_FAST                      3: path
                72      LOAD_FAST                       2: host_port
                74      LOAD_FAST                       3: path
                76      BUILD_TUPLE                     2
                78      RETURN_VALUE                    
                80      LOAD_CONST                      1: None
                82      LOAD_FAST                       0: url
                84      BUILD_TUPLE                     2
                86      RETURN_VALUE                    
        '_splithost'
        [Code]
            File Name: urllib/parse.py
            Object Name: splituser
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                '_splituser'
            [Var Names]
                'host'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'urllib.parse.splituser() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'urllib.parse.splituser() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: _splituser
                18      LOAD_FAST                       0: host
                20      CALL_FUNCTION                   1
                22      RETURN_VALUE                    
        'splituser'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splituser
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'rpartition'
            [Var Names]
                'host'
                'user'
                'delim'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."
                '@'
                None
            [Disassembly]
                0       LOAD_FAST                       0: host
                2       LOAD_METHOD                     0: rpartition
                4       LOAD_CONST                      1: '@'
                6       CALL_METHOD                     1
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      1: user
                12      STORE_FAST                      2: delim
                14      STORE_FAST                      0: host
                16      LOAD_FAST                       2: delim
                18      POP_JUMP_IF_FALSE               14 (to 28)
                20      LOAD_FAST                       1: user
                22      LOAD_FAST                       0: host
                24      BUILD_TUPLE                     2
                26      RETURN_VALUE                    
                28      LOAD_CONST                      2: None
                30      LOAD_FAST                       0: host
                32      BUILD_TUPLE                     2
                34      RETURN_VALUE                    
        '_splituser'
        [Code]
            File Name: urllib/parse.py
            Object Name: splitpasswd
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                '_splitpasswd'
            [Var Names]
                'user'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'urllib.parse.splitpasswd() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'urllib.parse.splitpasswd() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: _splitpasswd
                18      LOAD_FAST                       0: user
                20      CALL_FUNCTION                   1
                22      RETURN_VALUE                    
        'splitpasswd'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splitpasswd
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'partition'
            [Var Names]
                'user'
                'delim'
                'passwd'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "splitpasswd('user:passwd') -> 'user', 'passwd'."
                ':'
                None
            [Disassembly]
                0       LOAD_FAST                       0: user
                2       LOAD_METHOD                     0: partition
                4       LOAD_CONST                      1: ':'
                6       CALL_METHOD                     1
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      0: user
                12      STORE_FAST                      1: delim
                14      STORE_FAST                      2: passwd
                16      LOAD_FAST                       0: user
                18      LOAD_FAST                       1: delim
                20      POP_JUMP_IF_FALSE               14 (to 28)
                22      LOAD_FAST                       2: passwd
                24      BUILD_TUPLE                     2
                26      RETURN_VALUE                    
                28      LOAD_CONST                      2: None
                30      BUILD_TUPLE                     2
                32      RETURN_VALUE                    
        '_splitpasswd'
        [Code]
            File Name: urllib/parse.py
            Object Name: splitport
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                '_splitport'
            [Var Names]
                'host'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'urllib.parse.splitport() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'urllib.parse.splitport() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: _splitport
                18      LOAD_FAST                       0: host
                20      CALL_FUNCTION                   1
                22      RETURN_VALUE                    
        'splitport'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splitport
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_portprog'
                're'
                'compile'
                'DOTALL'
                'fullmatch'
                'groups'
            [Var Names]
                'host'
                'match'
                'port'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "splitport('host:port') --> 'host', 'port'."
                None
                '(.*):([0-9]*)'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _portprog
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               11 (to 22)
                8       LOAD_GLOBAL                     1: re
                10      LOAD_METHOD                     2: compile
                12      LOAD_CONST                      2: '(.*):([0-9]*)'
                14      LOAD_GLOBAL                     1: re
                16      LOAD_ATTR                       3: DOTALL
                18      CALL_METHOD                     2
                20      STORE_GLOBAL                    0: _portprog
                22      LOAD_GLOBAL                     0: _portprog
                24      LOAD_METHOD                     4: fullmatch
                26      LOAD_FAST                       0: host
                28      CALL_METHOD                     1
                30      STORE_FAST                      1: match
                32      LOAD_FAST                       1: match
                34      POP_JUMP_IF_FALSE               30 (to 60)
                36      LOAD_FAST                       1: match
                38      LOAD_METHOD                     5: groups
                40      CALL_METHOD                     0
                42      UNPACK_SEQUENCE                 2
                44      STORE_FAST                      0: host
                46      STORE_FAST                      2: port
                48      LOAD_FAST                       2: port
                50      POP_JUMP_IF_FALSE               30 (to 60)
                52      LOAD_FAST                       0: host
                54      LOAD_FAST                       2: port
                56      BUILD_TUPLE                     2
                58      RETURN_VALUE                    
                60      LOAD_FAST                       0: host
                62      LOAD_CONST                      1: None
                64      BUILD_TUPLE                     2
                66      RETURN_VALUE                    
        '_splitport'
        -1
        [Code]
            File Name: urllib/parse.py
            Object Name: splitnport
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                '_splitnport'
            [Var Names]
                'host'
                'defport'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'urllib.parse.splitnport() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'urllib.parse.splitnport() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: _splitnport
                18      LOAD_FAST                       0: host
                20      LOAD_FAST                       1: defport
                22      CALL_FUNCTION                   2
                24      RETURN_VALUE                    
        'splitnport'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splitnport
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'rpartition'
                'isdigit'
                'isascii'
                'int'
            [Var Names]
                'host'
                'defport'
                'delim'
                'port'
                'nport'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Split host and port, returning numeric port.\n    Return given default port if no ':' found; defaults to -1.\n    Return numerical port if a valid number is found after ':'.\n    Return None if ':' but not a valid number."
                ':'
                None
            [Disassembly]
                0       LOAD_FAST                       0: host
                2       LOAD_METHOD                     0: rpartition
                4       LOAD_CONST                      1: ':'
                6       CALL_METHOD                     1
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      0: host
                12      STORE_FAST                      2: delim
                14      STORE_FAST                      3: port
                16      LOAD_FAST                       2: delim
                18      POP_JUMP_IF_TRUE                16 (to 32)
                20      LOAD_FAST                       3: port
                22      STORE_FAST                      0: host
                24      LOAD_FAST                       0: host
                26      LOAD_FAST                       1: defport
                28      BUILD_TUPLE                     2
                30      RETURN_VALUE                    
                32      LOAD_FAST                       3: port
                34      POP_JUMP_IF_FALSE               40 (to 80)
                36      LOAD_FAST                       3: port
                38      LOAD_METHOD                     1: isdigit
                40      CALL_METHOD                     0
                42      POP_JUMP_IF_FALSE               34 (to 68)
                44      LOAD_FAST                       3: port
                46      LOAD_METHOD                     2: isascii
                48      CALL_METHOD                     0
                50      POP_JUMP_IF_FALSE               34 (to 68)
                52      LOAD_GLOBAL                     3: int
                54      LOAD_FAST                       3: port
                56      CALL_FUNCTION                   1
                58      STORE_FAST                      4: nport
                60      LOAD_FAST                       0: host
                62      LOAD_FAST                       4: nport
                64      BUILD_TUPLE                     2
                66      RETURN_VALUE                    
                68      LOAD_CONST                      2: None
                70      STORE_FAST                      4: nport
                72      LOAD_FAST                       0: host
                74      LOAD_FAST                       4: nport
                76      BUILD_TUPLE                     2
                78      RETURN_VALUE                    
                80      LOAD_FAST                       0: host
                82      LOAD_FAST                       1: defport
                84      BUILD_TUPLE                     2
                86      RETURN_VALUE                    
        '_splitnport'
        [Code]
            File Name: urllib/parse.py
            Object Name: splitquery
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                '_splitquery'
            [Var Names]
                'url'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'urllib.parse.splitquery() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'urllib.parse.splitquery() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: _splitquery
                18      LOAD_FAST                       0: url
                20      CALL_FUNCTION                   1
                22      RETURN_VALUE                    
        'splitquery'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splitquery
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'rpartition'
            [Var Names]
                'url'
                'path'
                'delim'
                'query'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "splitquery('/path?query') --> '/path', 'query'."
                '?'
                None
            [Disassembly]
                0       LOAD_FAST                       0: url
                2       LOAD_METHOD                     0: rpartition
                4       LOAD_CONST                      1: '?'
                6       CALL_METHOD                     1
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      1: path
                12      STORE_FAST                      2: delim
                14      STORE_FAST                      3: query
                16      LOAD_FAST                       2: delim
                18      POP_JUMP_IF_FALSE               14 (to 28)
                20      LOAD_FAST                       1: path
                22      LOAD_FAST                       3: query
                24      BUILD_TUPLE                     2
                26      RETURN_VALUE                    
                28      LOAD_FAST                       0: url
                30      LOAD_CONST                      2: None
                32      BUILD_TUPLE                     2
                34      RETURN_VALUE                    
        '_splitquery'
        [Code]
            File Name: urllib/parse.py
            Object Name: splittag
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                '_splittag'
            [Var Names]
                'url'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'urllib.parse.splittag() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'urllib.parse.splittag() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: _splittag
                18      LOAD_FAST                       0: url
                20      CALL_FUNCTION                   1
                22      RETURN_VALUE                    
        'splittag'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splittag
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'rpartition'
            [Var Names]
                'url'
                'path'
                'delim'
                'tag'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "splittag('/path#tag') --> '/path', 'tag'."
                '#'
                None
            [Disassembly]
                0       LOAD_FAST                       0: url
                2       LOAD_METHOD                     0: rpartition
                4       LOAD_CONST                      1: '#'
                6       CALL_METHOD                     1
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      1: path
                12      STORE_FAST                      2: delim
                14      STORE_FAST                      3: tag
                16      LOAD_FAST                       2: delim
                18      POP_JUMP_IF_FALSE               14 (to 28)
                20      LOAD_FAST                       1: path
                22      LOAD_FAST                       3: tag
                24      BUILD_TUPLE                     2
                26      RETURN_VALUE                    
                28      LOAD_FAST                       0: url
                30      LOAD_CONST                      2: None
                32      BUILD_TUPLE                     2
                34      RETURN_VALUE                    
        '_splittag'
        [Code]
            File Name: urllib/parse.py
            Object Name: splitattr
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                '_splitattr'
            [Var Names]
                'url'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'urllib.parse.splitattr() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'urllib.parse.splitattr() is deprecated as of 3.8, use urllib.parse.urlparse() instead'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: _splitattr
                18      LOAD_FAST                       0: url
                20      CALL_FUNCTION                   1
                22      RETURN_VALUE                    
        'splitattr'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splitattr
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'split'
            [Var Names]
                'url'
                'words'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "splitattr('/path;attr1=value1;attr2=value2;...') ->\n        '/path', ['attr1=value1', 'attr2=value2', ...]."
                ';'
                0
                1
                None
            [Disassembly]
                0       LOAD_FAST                       0: url
                2       LOAD_METHOD                     0: split
                4       LOAD_CONST                      1: ';'
                6       CALL_METHOD                     1
                8       STORE_FAST                      1: words
                10      LOAD_FAST                       1: words
                12      LOAD_CONST                      2: 0
                14      BINARY_SUBSCR                   
                16      LOAD_FAST                       1: words
                18      LOAD_CONST                      3: 1
                20      LOAD_CONST                      4: None
                22      BUILD_SLICE                     2
                24      BINARY_SUBSCR                   
                26      BUILD_TUPLE                     2
                28      RETURN_VALUE                    
        '_splitattr'
        [Code]
            File Name: urllib/parse.py
            Object Name: splitvalue
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                '_splitvalue'
            [Var Names]
                'attr'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'urllib.parse.splitvalue() is deprecated as of 3.8, use urllib.parse.parse_qsl() instead'
                2
                (
                    'stacklevel'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'urllib.parse.splitvalue() is deprecated as of 3.8, use urllib.parse.parse_qsl() instead'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: _splitvalue
                18      LOAD_FAST                       0: attr
                20      CALL_FUNCTION                   1
                22      RETURN_VALUE                    
        'splitvalue'
        [Code]
            File Name: urllib/parse.py
            Object Name: _splitvalue
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'partition'
            [Var Names]
                'attr'
                'delim'
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "splitvalue('attr=value') --> 'attr', 'value'."
                '='
                None
            [Disassembly]
                0       LOAD_FAST                       0: attr
                2       LOAD_METHOD                     0: partition
                4       LOAD_CONST                      1: '='
                6       CALL_METHOD                     1
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      0: attr
                12      STORE_FAST                      1: delim
                14      STORE_FAST                      2: value
                16      LOAD_FAST                       0: attr
                18      LOAD_FAST                       1: delim
                20      POP_JUMP_IF_FALSE               14 (to 28)
                22      LOAD_FAST                       2: value
                24      BUILD_TUPLE                     2
                26      RETURN_VALUE                    
                28      LOAD_CONST                      2: None
                30      BUILD_TUPLE                     2
                32      RETURN_VALUE                    
        '_splitvalue'
        (
            ''
            True
        )
        (
            0
        )
        (
            True
        )
        (
            'utf-8'
            'replace'
        )
        (
            False
            False
            'utf-8'
            'replace'
            None
            '&'
        )
        (
            '/'
            None
            None
        )
        (
            ''
            None
            None
        )
        (
            '/'
        )
        (
            -1
        )
    [Disassembly]
        0       LOAD_CONST                      0: 'Parse (absolute and relative) URLs.\n\nurlparse module is based upon the following RFC specifications.\n\nRFC 3986 (STD66): "Uniform Resource Identifiers" by T. Berners-Lee, R. Fielding\nand L.  Masinter, January 2005.\n\nRFC 2732 : "Format for Literal IPv6 Addresses in URL\'s by R.Hinden, B.Carpenter\nand L.Masinter, December 1999.\n\nRFC 2396:  "Uniform Resource Identifiers (URI)": Generic Syntax by T.\nBerners-Lee, R. Fielding, and L. Masinter, August 1998.\n\nRFC 2368: "The mailto URL scheme", by P.Hoffman , L Masinter, J. Zawinski, July 1998.\n\nRFC 1808: "Relative Uniform Resource Locators", by R. Fielding, UC Irvine, June\n1995.\n\nRFC 1738: "Uniform Resource Locators (URL)" by T. Berners-Lee, L. Masinter, M.\nMcCahill, December 1994\n\nRFC 3986 is considered the current standard and any future changes to\nurlparse module should conform with it.  The urlparse module is\ncurrently not entirely compliant with this RFC due to defacto\nscenarios for parsing, and for backward compatibility purposes, some\nparsing quirks from older RFCs are retained. The testcases in\ntest_urlparse.py provides a good indicator of parsing behavior.\n\nThe WHATWG URL Parser spec should also be considered.  We are not compliant with\nit either due to existing user code API behavior expectations (Hyrum\'s Law).\nIt serves as a useful guide when making changes.\n'
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: 0
        6       LOAD_CONST                      2: None
        8       IMPORT_NAME                     1: re
        10      STORE_NAME                      1: re
        12      LOAD_CONST                      1: 0
        14      LOAD_CONST                      2: None
        16      IMPORT_NAME                     2: sys
        18      STORE_NAME                      2: sys
        20      LOAD_CONST                      1: 0
        22      LOAD_CONST                      2: None
        24      IMPORT_NAME                     3: types
        26      STORE_NAME                      3: types
        28      LOAD_CONST                      1: 0
        30      LOAD_CONST                      2: None
        32      IMPORT_NAME                     4: collections
        34      STORE_NAME                      4: collections
        36      LOAD_CONST                      1: 0
        38      LOAD_CONST                      2: None
        40      IMPORT_NAME                     5: warnings
        42      STORE_NAME                      5: warnings
        44      LOAD_CONST                      1: 0
        46      LOAD_CONST                      2: None
        48      IMPORT_NAME                     6: ipaddress
        50      STORE_NAME                      6: ipaddress
        52      BUILD_LIST                      0
        54      LOAD_CONST                      3: ('urlparse', 'urlunparse', 'urljoin', 'urldefrag', 'urlsplit', 'urlunsplit', 'urlencode', 'parse_qs', 'parse_qsl', 'quote', 'quote_plus', 'quote_from_bytes', 'unquote', 'unquote_plus', 'unquote_to_bytes', 'DefragResult', 'ParseResult', 'SplitResult', 'DefragResultBytes', 'ParseResultBytes', 'SplitResultBytes')
        56      LIST_EXTEND                     1
        58      STORE_NAME                      7: __all__
        60      BUILD_LIST                      0
        62      LOAD_CONST                      4: ('', 'ftp', 'http', 'gopher', 'nntp', 'imap', 'wais', 'file', 'https', 'shttp', 'mms', 'prospero', 'rtsp', 'rtspu', 'sftp', 'svn', 'svn+ssh', 'ws', 'wss')
        64      LIST_EXTEND                     1
        66      STORE_NAME                      8: uses_relative
        68      BUILD_LIST                      0
        70      LOAD_CONST                      5: ('', 'ftp', 'http', 'gopher', 'nntp', 'telnet', 'imap', 'wais', 'file', 'mms', 'https', 'shttp', 'snews', 'prospero', 'rtsp', 'rtspu', 'rsync', 'svn', 'svn+ssh', 'sftp', 'nfs', 'git', 'git+ssh', 'ws', 'wss')
        72      LIST_EXTEND                     1
        74      STORE_NAME                      9: uses_netloc
        76      BUILD_LIST                      0
        78      LOAD_CONST                      6: ('', 'ftp', 'hdl', 'prospero', 'http', 'imap', 'https', 'shttp', 'rtsp', 'rtspu', 'sip', 'sips', 'mms', 'sftp', 'tel')
        80      LIST_EXTEND                     1
        82      STORE_NAME                      10: uses_params
        84      BUILD_LIST                      0
        86      LOAD_CONST                      7: ('gopher', 'hdl', 'mailto', 'news', 'telnet', 'wais', 'imap', 'snews', 'sip', 'sips')
        88      LIST_EXTEND                     1
        90      STORE_NAME                      11: non_hierarchical
        92      BUILD_LIST                      0
        94      LOAD_CONST                      8: ('', 'http', 'wais', 'imap', 'https', 'shttp', 'mms', 'gopher', 'rtsp', 'rtspu', 'sip', 'sips')
        96      LIST_EXTEND                     1
        98      STORE_NAME                      12: uses_query
        100     BUILD_LIST                      0
        102     LOAD_CONST                      9: ('', 'ftp', 'hdl', 'http', 'gopher', 'news', 'nntp', 'wais', 'https', 'shttp', 'snews', 'file', 'prospero')
        104     LIST_EXTEND                     1
        106     STORE_NAME                      13: uses_fragment
        108     LOAD_CONST                      10: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-.'
        110     STORE_NAME                      14: scheme_chars
        112     LOAD_CONST                      11: '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f '
        114     STORE_NAME                      15: _WHATWG_C0_CONTROL_OR_SPACE
        116     BUILD_LIST                      0
        118     LOAD_CONST                      12: ('\t', '\r', '\n')
        120     LIST_EXTEND                     1
        122     STORE_NAME                      16: _UNSAFE_URL_BYTES_TO_REMOVE
        124     LOAD_CONST                      13: 20
        126     STORE_NAME                      17: MAX_CACHE_SIZE
        128     BUILD_MAP                       0
        130     STORE_NAME                      18: _parse_cache
        132     LOAD_CONST                      14: <CODE> clear_cache
        134     LOAD_CONST                      15: 'clear_cache'
        136     MAKE_FUNCTION                   0
        138     STORE_NAME                      19: clear_cache
        140     LOAD_CONST                      16: 'ascii'
        142     STORE_NAME                      20: _implicit_encoding
        144     LOAD_CONST                      17: 'strict'
        146     STORE_NAME                      21: _implicit_errors
        148     LOAD_CONST                      18: <CODE> _noop
        150     LOAD_CONST                      19: '_noop'
        152     MAKE_FUNCTION                   0
        154     STORE_NAME                      22: _noop
        156     LOAD_NAME                       20: _implicit_encoding
        158     LOAD_NAME                       21: _implicit_errors
        160     BUILD_TUPLE                     2
        162     LOAD_CONST                      20: <CODE> _encode_result
        164     LOAD_CONST                      21: '_encode_result'
        166     MAKE_FUNCTION                   1
        168     STORE_NAME                      23: _encode_result
        170     LOAD_NAME                       20: _implicit_encoding
        172     LOAD_NAME                       21: _implicit_errors
        174     BUILD_TUPLE                     2
        176     LOAD_CONST                      22: <CODE> _decode_args
        178     LOAD_CONST                      23: '_decode_args'
        180     MAKE_FUNCTION                   1
        182     STORE_NAME                      24: _decode_args
        184     LOAD_CONST                      24: <CODE> _coerce_args
        186     LOAD_CONST                      25: '_coerce_args'
        188     MAKE_FUNCTION                   0
        190     STORE_NAME                      25: _coerce_args
        192     LOAD_BUILD_CLASS                
        194     LOAD_CONST                      26: <CODE> _ResultMixinStr
        196     LOAD_CONST                      27: '_ResultMixinStr'
        198     MAKE_FUNCTION                   0
        200     LOAD_CONST                      27: '_ResultMixinStr'
        202     LOAD_NAME                       26: object
        204     CALL_FUNCTION                   3
        206     STORE_NAME                      27: _ResultMixinStr
        208     LOAD_BUILD_CLASS                
        210     LOAD_CONST                      28: <CODE> _ResultMixinBytes
        212     LOAD_CONST                      29: '_ResultMixinBytes'
        214     MAKE_FUNCTION                   0
        216     LOAD_CONST                      29: '_ResultMixinBytes'
        218     LOAD_NAME                       26: object
        220     CALL_FUNCTION                   3
        222     STORE_NAME                      28: _ResultMixinBytes
        224     LOAD_BUILD_CLASS                
        226     LOAD_CONST                      30: <CODE> _NetlocResultMixinBase
        228     LOAD_CONST                      31: '_NetlocResultMixinBase'
        230     MAKE_FUNCTION                   0
        232     LOAD_CONST                      31: '_NetlocResultMixinBase'
        234     LOAD_NAME                       26: object
        236     CALL_FUNCTION                   3
        238     STORE_NAME                      29: _NetlocResultMixinBase
        240     LOAD_BUILD_CLASS                
        242     LOAD_CONST                      32: <CODE> _NetlocResultMixinStr
        244     LOAD_CONST                      33: '_NetlocResultMixinStr'
        246     MAKE_FUNCTION                   0
        248     LOAD_CONST                      33: '_NetlocResultMixinStr'
        250     LOAD_NAME                       29: _NetlocResultMixinBase
        252     LOAD_NAME                       27: _ResultMixinStr
        254     CALL_FUNCTION                   4
        256     STORE_NAME                      30: _NetlocResultMixinStr
        258     LOAD_BUILD_CLASS                
        260     LOAD_CONST                      34: <CODE> _NetlocResultMixinBytes
        262     LOAD_CONST                      35: '_NetlocResultMixinBytes'
        264     MAKE_FUNCTION                   0
        266     LOAD_CONST                      35: '_NetlocResultMixinBytes'
        268     LOAD_NAME                       29: _NetlocResultMixinBase
        270     LOAD_NAME                       28: _ResultMixinBytes
        272     CALL_FUNCTION                   4
        274     STORE_NAME                      31: _NetlocResultMixinBytes
        276     LOAD_CONST                      1: 0
        278     LOAD_CONST                      36: ('namedtuple',)
        280     IMPORT_NAME                     4: collections
        282     IMPORT_FROM                     32: namedtuple
        284     STORE_NAME                      32: namedtuple
        286     POP_TOP                         
        288     LOAD_NAME                       32: namedtuple
        290     LOAD_CONST                      37: 'DefragResult'
        292     LOAD_CONST                      38: 'url fragment'
        294     CALL_FUNCTION                   2
        296     STORE_NAME                      33: _DefragResultBase
        298     LOAD_NAME                       32: namedtuple
        300     LOAD_CONST                      39: 'SplitResult'
        302     LOAD_CONST                      40: 'scheme netloc path query fragment'
        304     CALL_FUNCTION                   2
        306     STORE_NAME                      34: _SplitResultBase
        308     LOAD_NAME                       32: namedtuple
        310     LOAD_CONST                      41: 'ParseResult'
        312     LOAD_CONST                      42: 'scheme netloc path params query fragment'
        314     CALL_FUNCTION                   2
        316     STORE_NAME                      35: _ParseResultBase
        318     LOAD_CONST                      43: '\nDefragResult(url, fragment)\n\nA 2-tuple that contains the url without fragment identifier and the fragment\nidentifier as a separate argument.\n'
        320     LOAD_NAME                       33: _DefragResultBase
        322     STORE_ATTR                      0: __doc__
        324     LOAD_CONST                      44: 'The URL with no fragment identifier.'
        326     LOAD_NAME                       33: _DefragResultBase
        328     LOAD_ATTR                       36: url
        330     STORE_ATTR                      0: __doc__
        332     LOAD_CONST                      45: '\nFragment identifier separated from URL, that allows indirect identification of a\nsecondary resource by reference to a primary resource and additional identifying\ninformation.\n'
        334     LOAD_NAME                       33: _DefragResultBase
        336     LOAD_ATTR                       37: fragment
        338     STORE_ATTR                      0: __doc__
        340     LOAD_CONST                      46: '\nSplitResult(scheme, netloc, path, query, fragment)\n\nA 5-tuple that contains the different components of a URL. Similar to\nParseResult, but does not split params.\n'
        342     LOAD_NAME                       34: _SplitResultBase
        344     STORE_ATTR                      0: __doc__
        346     LOAD_CONST                      47: 'Specifies URL scheme for the request.'
        348     LOAD_NAME                       34: _SplitResultBase
        350     LOAD_ATTR                       38: scheme
        352     STORE_ATTR                      0: __doc__
        354     LOAD_CONST                      48: '\nNetwork location where the request is made to.\n'
        356     LOAD_NAME                       34: _SplitResultBase
        358     LOAD_ATTR                       39: netloc
        360     STORE_ATTR                      0: __doc__
        362     LOAD_CONST                      49: '\nThe hierarchical path, such as the path to a file to download.\n'
        364     LOAD_NAME                       34: _SplitResultBase
        366     LOAD_ATTR                       40: path
        368     STORE_ATTR                      0: __doc__
        370     LOAD_CONST                      50: "\nThe query component, that contains non-hierarchical data, that along with data\nin path component, identifies a resource in the scope of URI's scheme and\nnetwork location.\n"
        372     LOAD_NAME                       34: _SplitResultBase
        374     LOAD_ATTR                       41: query
        376     STORE_ATTR                      0: __doc__
        378     LOAD_CONST                      51: '\nFragment identifier, that allows indirect identification of a secondary resource\nby reference to a primary resource and additional identifying information.\n'
        380     LOAD_NAME                       34: _SplitResultBase
        382     LOAD_ATTR                       37: fragment
        384     STORE_ATTR                      0: __doc__
        386     LOAD_CONST                      52: '\nParseResult(scheme, netloc, path, params, query, fragment)\n\nA 6-tuple that contains components of a parsed URL.\n'
        388     LOAD_NAME                       35: _ParseResultBase
        390     STORE_ATTR                      0: __doc__
        392     LOAD_NAME                       34: _SplitResultBase
        394     LOAD_ATTR                       38: scheme
        396     LOAD_ATTR                       0: __doc__
        398     LOAD_NAME                       35: _ParseResultBase
        400     LOAD_ATTR                       38: scheme
        402     STORE_ATTR                      0: __doc__
        404     LOAD_NAME                       34: _SplitResultBase
        406     LOAD_ATTR                       39: netloc
        408     LOAD_ATTR                       0: __doc__
        410     LOAD_NAME                       35: _ParseResultBase
        412     LOAD_ATTR                       39: netloc
        414     STORE_ATTR                      0: __doc__
        416     LOAD_NAME                       34: _SplitResultBase
        418     LOAD_ATTR                       40: path
        420     LOAD_ATTR                       0: __doc__
        422     LOAD_NAME                       35: _ParseResultBase
        424     LOAD_ATTR                       40: path
        426     STORE_ATTR                      0: __doc__
        428     LOAD_CONST                      53: '\nParameters for last path element used to dereference the URI in order to provide\naccess to perform some operation on the resource.\n'
        430     LOAD_NAME                       35: _ParseResultBase
        432     LOAD_ATTR                       42: params
        434     STORE_ATTR                      0: __doc__
        436     LOAD_NAME                       34: _SplitResultBase
        438     LOAD_ATTR                       41: query
        440     LOAD_ATTR                       0: __doc__
        442     LOAD_NAME                       35: _ParseResultBase
        444     LOAD_ATTR                       41: query
        446     STORE_ATTR                      0: __doc__
        448     LOAD_NAME                       34: _SplitResultBase
        450     LOAD_ATTR                       37: fragment
        452     LOAD_ATTR                       0: __doc__
        454     LOAD_NAME                       35: _ParseResultBase
        456     LOAD_ATTR                       37: fragment
        458     STORE_ATTR                      0: __doc__
        460     LOAD_NAME                       30: _NetlocResultMixinStr
        462     STORE_NAME                      43: ResultBase
        464     LOAD_BUILD_CLASS                
        466     LOAD_CONST                      54: <CODE> DefragResult
        468     LOAD_CONST                      37: 'DefragResult'
        470     MAKE_FUNCTION                   0
        472     LOAD_CONST                      37: 'DefragResult'
        474     LOAD_NAME                       33: _DefragResultBase
        476     LOAD_NAME                       27: _ResultMixinStr
        478     CALL_FUNCTION                   4
        480     STORE_NAME                      44: DefragResult
        482     LOAD_BUILD_CLASS                
        484     LOAD_CONST                      55: <CODE> SplitResult
        486     LOAD_CONST                      39: 'SplitResult'
        488     MAKE_FUNCTION                   0
        490     LOAD_CONST                      39: 'SplitResult'
        492     LOAD_NAME                       34: _SplitResultBase
        494     LOAD_NAME                       30: _NetlocResultMixinStr
        496     CALL_FUNCTION                   4
        498     STORE_NAME                      45: SplitResult
        500     LOAD_BUILD_CLASS                
        502     LOAD_CONST                      56: <CODE> ParseResult
        504     LOAD_CONST                      41: 'ParseResult'
        506     MAKE_FUNCTION                   0
        508     LOAD_CONST                      41: 'ParseResult'
        510     LOAD_NAME                       35: _ParseResultBase
        512     LOAD_NAME                       30: _NetlocResultMixinStr
        514     CALL_FUNCTION                   4
        516     STORE_NAME                      46: ParseResult
        518     LOAD_BUILD_CLASS                
        520     LOAD_CONST                      57: <CODE> DefragResultBytes
        522     LOAD_CONST                      58: 'DefragResultBytes'
        524     MAKE_FUNCTION                   0
        526     LOAD_CONST                      58: 'DefragResultBytes'
        528     LOAD_NAME                       33: _DefragResultBase
        530     LOAD_NAME                       28: _ResultMixinBytes
        532     CALL_FUNCTION                   4
        534     STORE_NAME                      47: DefragResultBytes
        536     LOAD_BUILD_CLASS                
        538     LOAD_CONST                      59: <CODE> SplitResultBytes
        540     LOAD_CONST                      60: 'SplitResultBytes'
        542     MAKE_FUNCTION                   0
        544     LOAD_CONST                      60: 'SplitResultBytes'
        546     LOAD_NAME                       34: _SplitResultBase
        548     LOAD_NAME                       31: _NetlocResultMixinBytes
        550     CALL_FUNCTION                   4
        552     STORE_NAME                      48: SplitResultBytes
        554     LOAD_BUILD_CLASS                
        556     LOAD_CONST                      61: <CODE> ParseResultBytes
        558     LOAD_CONST                      62: 'ParseResultBytes'
        560     MAKE_FUNCTION                   0
        562     LOAD_CONST                      62: 'ParseResultBytes'
        564     LOAD_NAME                       35: _ParseResultBase
        566     LOAD_NAME                       31: _NetlocResultMixinBytes
        568     CALL_FUNCTION                   4
        570     STORE_NAME                      49: ParseResultBytes
        572     LOAD_CONST                      63: <CODE> _fix_result_transcoding
        574     LOAD_CONST                      64: '_fix_result_transcoding'
        576     MAKE_FUNCTION                   0
        578     STORE_NAME                      50: _fix_result_transcoding
        580     LOAD_NAME                       50: _fix_result_transcoding
        582     CALL_FUNCTION                   0
        584     POP_TOP                         
        586     DELETE_NAME                     50: _fix_result_transcoding
        588     LOAD_CONST                      164: ('', True)
        590     LOAD_CONST                      67: <CODE> urlparse
        592     LOAD_CONST                      68: 'urlparse'
        594     MAKE_FUNCTION                   1
        596     STORE_NAME                      51: urlparse
        598     LOAD_CONST                      69: <CODE> _splitparams
        600     LOAD_CONST                      70: '_splitparams'
        602     MAKE_FUNCTION                   0
        604     STORE_NAME                      52: _splitparams
        606     LOAD_CONST                      165: (0,)
        608     LOAD_CONST                      71: <CODE> _splitnetloc
        610     LOAD_CONST                      72: '_splitnetloc'
        612     MAKE_FUNCTION                   1
        614     STORE_NAME                      53: _splitnetloc
        616     LOAD_CONST                      73: <CODE> _checknetloc
        618     LOAD_CONST                      74: '_checknetloc'
        620     MAKE_FUNCTION                   0
        622     STORE_NAME                      54: _checknetloc
        624     LOAD_CONST                      75: <CODE> _check_bracketed_netloc
        626     LOAD_CONST                      76: '_check_bracketed_netloc'
        628     MAKE_FUNCTION                   0
        630     STORE_NAME                      55: _check_bracketed_netloc
        632     LOAD_CONST                      77: <CODE> _check_bracketed_host
        634     LOAD_CONST                      78: '_check_bracketed_host'
        636     MAKE_FUNCTION                   0
        638     STORE_NAME                      56: _check_bracketed_host
        640     LOAD_CONST                      164: ('', True)
        642     LOAD_CONST                      79: <CODE> urlsplit
        644     LOAD_CONST                      80: 'urlsplit'
        646     MAKE_FUNCTION                   1
        648     STORE_NAME                      57: urlsplit
        650     LOAD_CONST                      81: <CODE> urlunparse
        652     LOAD_CONST                      82: 'urlunparse'
        654     MAKE_FUNCTION                   0
        656     STORE_NAME                      58: urlunparse
        658     LOAD_CONST                      83: <CODE> urlunsplit
        660     LOAD_CONST                      84: 'urlunsplit'
        662     MAKE_FUNCTION                   0
        664     STORE_NAME                      59: urlunsplit
        666     LOAD_CONST                      166: (True,)
        668     LOAD_CONST                      85: <CODE> urljoin
        670     LOAD_CONST                      86: 'urljoin'
        672     MAKE_FUNCTION                   1
        674     STORE_NAME                      60: urljoin
        676     LOAD_CONST                      87: <CODE> urldefrag
        678     LOAD_CONST                      88: 'urldefrag'
        680     MAKE_FUNCTION                   0
        682     STORE_NAME                      61: urldefrag
        684     LOAD_CONST                      89: '0123456789ABCDEFabcdef'
        686     STORE_NAME                      62: _hexdig
        688     LOAD_CONST                      2: None
        690     STORE_GLOBAL                    63: _hextobyte
        692     LOAD_CONST                      90: <CODE> unquote_to_bytes
        694     LOAD_CONST                      91: 'unquote_to_bytes'
        696     MAKE_FUNCTION                   0
        698     STORE_NAME                      64: unquote_to_bytes
        700     LOAD_NAME                       1: re
        702     LOAD_METHOD                     65: compile
        704     LOAD_CONST                      92: '([\x00-\x7f]+)'
        706     CALL_METHOD                     1
        708     STORE_NAME                      66: _asciire
        710     LOAD_CONST                      167: ('utf-8', 'replace')
        712     LOAD_CONST                      95: <CODE> unquote
        714     LOAD_CONST                      96: 'unquote'
        716     MAKE_FUNCTION                   1
        718     STORE_NAME                      67: unquote
        720     NOP                             
        722     NOP                             
        724     LOAD_CONST                      168: (False, False, 'utf-8', 'replace', None, '&')
        726     LOAD_CONST                      99: <CODE> parse_qs
        728     LOAD_CONST                      100: 'parse_qs'
        730     MAKE_FUNCTION                   1
        732     STORE_NAME                      68: parse_qs
        734     NOP                             
        736     NOP                             
        738     LOAD_CONST                      168: (False, False, 'utf-8', 'replace', None, '&')
        740     LOAD_CONST                      101: <CODE> parse_qsl
        742     LOAD_CONST                      102: 'parse_qsl'
        744     MAKE_FUNCTION                   1
        746     STORE_NAME                      69: parse_qsl
        748     LOAD_CONST                      167: ('utf-8', 'replace')
        750     LOAD_CONST                      103: <CODE> unquote_plus
        752     LOAD_CONST                      104: 'unquote_plus'
        754     MAKE_FUNCTION                   1
        756     STORE_NAME                      70: unquote_plus
        758     LOAD_NAME                       71: frozenset
        760     LOAD_CONST                      105: b'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_.-~'
        762     CALL_FUNCTION                   1
        764     STORE_NAME                      72: _ALWAYS_SAFE
        766     LOAD_NAME                       73: bytes
        768     LOAD_NAME                       72: _ALWAYS_SAFE
        770     CALL_FUNCTION                   1
        772     STORE_NAME                      74: _ALWAYS_SAFE_BYTES
        774     BUILD_MAP                       0
        776     STORE_NAME                      75: _safe_quoters
        778     LOAD_BUILD_CLASS                
        780     LOAD_CONST                      106: <CODE> Quoter
        782     LOAD_CONST                      107: 'Quoter'
        784     MAKE_FUNCTION                   0
        786     LOAD_CONST                      107: 'Quoter'
        788     LOAD_NAME                       4: collections
        790     LOAD_ATTR                       76: defaultdict
        792     CALL_FUNCTION                   3
        794     STORE_NAME                      77: Quoter
        796     LOAD_CONST                      169: ('/', None, None)
        798     LOAD_CONST                      109: <CODE> quote
        800     LOAD_CONST                      110: 'quote'
        802     MAKE_FUNCTION                   1
        804     STORE_NAME                      78: quote
        806     LOAD_CONST                      170: ('', None, None)
        808     LOAD_CONST                      111: <CODE> quote_plus
        810     LOAD_CONST                      112: 'quote_plus'
        812     MAKE_FUNCTION                   1
        814     STORE_NAME                      79: quote_plus
        816     LOAD_CONST                      171: ('/',)
        818     LOAD_CONST                      113: <CODE> quote_from_bytes
        820     LOAD_CONST                      114: 'quote_from_bytes'
        822     MAKE_FUNCTION                   1
        824     STORE_NAME                      80: quote_from_bytes
        826     LOAD_CONST                      97: False
        828     LOAD_CONST                      65: ''
        830     LOAD_CONST                      2: None
        832     LOAD_CONST                      2: None
        834     LOAD_NAME                       79: quote_plus
        836     BUILD_TUPLE                     5
        838     LOAD_CONST                      115: <CODE> urlencode
        840     LOAD_CONST                      116: 'urlencode'
        842     MAKE_FUNCTION                   1
        844     STORE_NAME                      81: urlencode
        846     LOAD_CONST                      117: <CODE> to_bytes
        848     LOAD_CONST                      118: 'to_bytes'
        850     MAKE_FUNCTION                   0
        852     STORE_NAME                      82: to_bytes
        854     LOAD_CONST                      119: <CODE> _to_bytes
        856     LOAD_CONST                      120: '_to_bytes'
        858     MAKE_FUNCTION                   0
        860     STORE_NAME                      83: _to_bytes
        862     LOAD_CONST                      121: <CODE> unwrap
        864     LOAD_CONST                      122: 'unwrap'
        866     MAKE_FUNCTION                   0
        868     STORE_NAME                      84: unwrap
        870     LOAD_CONST                      123: <CODE> splittype
        872     LOAD_CONST                      124: 'splittype'
        874     MAKE_FUNCTION                   0
        876     STORE_NAME                      85: splittype
        878     LOAD_CONST                      2: None
        880     STORE_GLOBAL                    86: _typeprog
        882     LOAD_CONST                      125: <CODE> _splittype
        884     LOAD_CONST                      126: '_splittype'
        886     MAKE_FUNCTION                   0
        888     STORE_NAME                      87: _splittype
        890     LOAD_CONST                      127: <CODE> splithost
        892     LOAD_CONST                      128: 'splithost'
        894     MAKE_FUNCTION                   0
        896     STORE_NAME                      88: splithost
        898     LOAD_CONST                      2: None
        900     STORE_GLOBAL                    89: _hostprog
        902     LOAD_CONST                      129: <CODE> _splithost
        904     LOAD_CONST                      130: '_splithost'
        906     MAKE_FUNCTION                   0
        908     STORE_NAME                      90: _splithost
        910     LOAD_CONST                      131: <CODE> splituser
        912     LOAD_CONST                      132: 'splituser'
        914     MAKE_FUNCTION                   0
        916     STORE_NAME                      91: splituser
        918     LOAD_CONST                      133: <CODE> _splituser
        920     LOAD_CONST                      134: '_splituser'
        922     MAKE_FUNCTION                   0
        924     STORE_NAME                      92: _splituser
        926     LOAD_CONST                      135: <CODE> splitpasswd
        928     LOAD_CONST                      136: 'splitpasswd'
        930     MAKE_FUNCTION                   0
        932     STORE_NAME                      93: splitpasswd
        934     LOAD_CONST                      137: <CODE> _splitpasswd
        936     LOAD_CONST                      138: '_splitpasswd'
        938     MAKE_FUNCTION                   0
        940     STORE_NAME                      94: _splitpasswd
        942     LOAD_CONST                      139: <CODE> splitport
        944     LOAD_CONST                      140: 'splitport'
        946     MAKE_FUNCTION                   0
        948     STORE_NAME                      95: splitport
        950     LOAD_CONST                      2: None
        952     STORE_GLOBAL                    96: _portprog
        954     LOAD_CONST                      141: <CODE> _splitport
        956     LOAD_CONST                      142: '_splitport'
        958     MAKE_FUNCTION                   0
        960     STORE_NAME                      97: _splitport
        962     LOAD_CONST                      172: (-1,)
        964     LOAD_CONST                      144: <CODE> splitnport
        966     LOAD_CONST                      145: 'splitnport'
        968     MAKE_FUNCTION                   1
        970     STORE_NAME                      98: splitnport
        972     LOAD_CONST                      172: (-1,)
        974     LOAD_CONST                      146: <CODE> _splitnport
        976     LOAD_CONST                      147: '_splitnport'
        978     MAKE_FUNCTION                   1
        980     STORE_NAME                      99: _splitnport
        982     LOAD_CONST                      148: <CODE> splitquery
        984     LOAD_CONST                      149: 'splitquery'
        986     MAKE_FUNCTION                   0
        988     STORE_NAME                      100: splitquery
        990     LOAD_CONST                      150: <CODE> _splitquery
        992     LOAD_CONST                      151: '_splitquery'
        994     MAKE_FUNCTION                   0
        996     STORE_NAME                      101: _splitquery
        998     LOAD_CONST                      152: <CODE> splittag
        1000    LOAD_CONST                      153: 'splittag'
        1002    MAKE_FUNCTION                   0
        1004    STORE_NAME                      102: splittag
        1006    LOAD_CONST                      154: <CODE> _splittag
        1008    LOAD_CONST                      155: '_splittag'
        1010    MAKE_FUNCTION                   0
        1012    STORE_NAME                      103: _splittag
        1014    LOAD_CONST                      156: <CODE> splitattr
        1016    LOAD_CONST                      157: 'splitattr'
        1018    MAKE_FUNCTION                   0
        1020    STORE_NAME                      104: splitattr
        1022    LOAD_CONST                      158: <CODE> _splitattr
        1024    LOAD_CONST                      159: '_splitattr'
        1026    MAKE_FUNCTION                   0
        1028    STORE_NAME                      105: _splitattr
        1030    LOAD_CONST                      160: <CODE> splitvalue
        1032    LOAD_CONST                      161: 'splitvalue'
        1034    MAKE_FUNCTION                   0
        1036    STORE_NAME                      106: splitvalue
        1038    LOAD_CONST                      162: <CODE> _splitvalue
        1040    LOAD_CONST                      163: '_splitvalue'
        1042    MAKE_FUNCTION                   0
        1044    STORE_NAME                      107: _splitvalue
        1046    LOAD_CONST                      2: None
        1048    RETURN_VALUE                    
