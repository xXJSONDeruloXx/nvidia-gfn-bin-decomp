_header_value_parser.pyc (Python 3.10)
[Code]
    File Name: email/_header_value_parser.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 9
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        're'
        'sys'
        'urllib'
        'string'
        'hexdigits'
        'operator'
        'itemgetter'
        'email'
        '_encoded_words'
        '_ew'
        'errors'
        'utils'
        'set'
        'WSP'
        'CFWS_LEADER'
        'SPECIALS'
        'ATOM_ENDS'
        'DOT_ATOM_ENDS'
        'PHRASE_ENDS'
        'TSPECIALS'
        'TOKEN_ENDS'
        'ASPECIALS'
        'ATTRIBUTE_ENDS'
        'EXTENDED_ATTRIBUTE_ENDS'
        'NLSET'
        'SPECIALSNL'
        'quote_string'
        'compile'
        'VERBOSE'
        'MULTILINE'
        'rfc2047_matcher'
        'list'
        'TokenList'
        'WhiteSpaceTokenList'
        'UnstructuredTokenList'
        'Phrase'
        'Word'
        'CFWSList'
        'Atom'
        'Token'
        'EncodedWord'
        'QuotedString'
        'BareQuotedString'
        'Comment'
        'AddressList'
        'Address'
        'MailboxList'
        'GroupList'
        'Group'
        'NameAddr'
        'AngleAddr'
        'ObsRoute'
        'Mailbox'
        'InvalidMailbox'
        'Domain'
        'DotAtom'
        'DotAtomText'
        'NoFoldLiteral'
        'AddrSpec'
        'ObsLocalPart'
        'DisplayName'
        'LocalPart'
        'DomainLiteral'
        'MIMEVersion'
        'Parameter'
        'InvalidParameter'
        'Attribute'
        'Section'
        'Value'
        'MimeParameters'
        'ParameterizedHeaderValue'
        'ContentType'
        'ContentDisposition'
        'ContentTransferEncoding'
        'HeaderLabel'
        'MsgID'
        'MessageID'
        'InvalidMessageID'
        'Header'
        'str'
        'Terminal'
        'WhiteSpaceTerminal'
        'ValueTerminal'
        'EWWhiteSpaceTerminal'
        'HeaderParseError'
        '_InvalidEwError'
        'DOT'
        'ListSeparator'
        'RouteComponentMarker'
        'format'
        'join'
        'split'
        '_wsp_splitter'
        'escape'
        'match'
        '_non_atom_end_matcher'
        'findall'
        '_non_printable_finder'
        '_non_token_end_matcher'
        '_non_attribute_end_matcher'
        '_non_extended_attribute_end_matcher'
        '_validate_xtext'
        '_get_ptext_to_endchars'
        'get_fws'
        'get_encoded_word'
        'get_unstructured'
        'get_qp_ctext'
        'get_qcontent'
        'get_atext'
        'get_bare_quoted_string'
        'get_comment'
        'get_cfws'
        'get_quoted_string'
        'get_atom'
        'get_dot_atom_text'
        'get_dot_atom'
        'get_word'
        'get_phrase'
        'get_local_part'
        'get_obs_local_part'
        'get_dtext'
        '_check_for_early_dl_end'
        'get_domain_literal'
        'get_domain'
        'get_addr_spec'
        'get_obs_route'
        'get_angle_addr'
        'get_display_name'
        'get_name_addr'
        'get_mailbox'
        'get_invalid_mailbox'
        'get_mailbox_list'
        'get_group_list'
        'get_group'
        'get_address'
        'get_address_list'
        'get_no_fold_literal'
        'get_msg_id'
        'parse_message_id'
        'parse_mime_version'
        'get_invalid_parameter'
        'get_ttext'
        'get_token'
        'get_attrtext'
        'get_attribute'
        'get_extended_attrtext'
        'get_extended_attribute'
        'get_section'
        'get_value'
        'get_parameter'
        'parse_mime_parameters'
        '_find_mime_parameters'
        'parse_content_type_header'
        'parse_content_disposition_header'
        'parse_content_transfer_encoding_header'
        '_steal_trailing_WSP_if_exists'
        '_refold_parse_tree'
        '_fold_as_ew'
        '_fold_mime_parameters'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        'Header value parser implementing various email-related RFC parsing rules.\n\nThe parsing methods defined in this module implement various email related\nparsing rules.  Principal among them is RFC 5322, which is the followon\nto RFC 2822 and primarily a clarification of the former.  It also implements\nRFC 2047 encoded word decoding.\n\nRFC 5322 goes to considerable trouble to maintain backward compatibility with\nRFC 822 in the parse phase, while cleaning up the structure on the generation\nphase.  This parser supports correct RFC 5322 generation by tagging white space\nas folding white space only when folding is allowed in the non-obsolete rule\nsets.  Actually, the parser is even more generous when accepting input than RFC\n5322 mandates, following the spirit of Postel\'s Law, which RFC 5322 encourages.\nWhere possible deviations from the standard are annotated on the \'defects\'\nattribute of tokens that deviate.\n\nThe general structure of the parser follows RFC 5322, and uses its terminology\nwhere there is a direct correspondence.  Where the implementation requires a\nsomewhat different structure than that used by the formal grammar, new terms\nthat mimic the closest existing terms are used.  Thus, it really helps to have\na copy of RFC 5322 handy when studying this code.\n\nInput to the parser is a string that has already been unfolded according to\nRFC 5322 rules.  According to the RFC this unfolding is the very first step, and\nthis parser leaves the unfolding step to a higher level message parser, which\nwill have already detected the line breaks that need unfolding while\ndetermining the beginning and end of each header.\n\nThe output of the parser is a TokenList object, which is a list subclass.  A\nTokenList is a recursive data structure.  The terminal nodes of the structure\nare Terminal objects, which are subclasses of str.  These do not correspond\ndirectly to terminal objects in the formal grammar, but are instead more\npractical higher level combinations of true terminals.\n\nAll TokenList and Terminal objects have a \'value\' attribute, which produces the\nsemantically meaningful value of that part of the parse subtree.  The value of\nall whitespace tokens (no matter how many sub-tokens they may contain) is a\nsingle space, as per the RFC rules.  This includes \'CFWS\', which is herein\nincluded in the general class of whitespace tokens.  There is one exception to\nthe rule that whitespace tokens are collapsed into single spaces in values: in\nthe value of a \'bare-quoted-string\' (a quoted-string with no leading or\ntrailing whitespace), any whitespace that appeared between the quotation marks\nis preserved in the returned value.  Note that in all Terminal strings quoted\npairs are turned into their unquoted values.\n\nAll TokenList and Terminal objects also have a string value, which attempts to\nbe a "canonical" representation of the RFC-compliant form of the substring that\nproduced the parsed subtree, including minimal use of quoted pair quoting.\nWhitespace runs are not collapsed.\n\nComment tokens also have a \'content\' attribute providing the string found\nbetween the parens (including any nested comments) with whitespace preserved.\n\nAll TokenList and Terminal objects have a \'defects\' attribute which is a\npossibly empty list all of the defects found while creating the token.  Defects\nmay appear on any token in the tree, and a composite list of all defects in the\nsubtree is available through the \'all_defects\' attribute of any node.  (For\nTerminal notes x.defects == x.all_defects.)\n\nEach object in a parse tree is called a \'token\', and each has a \'token_type\'\nattribute that gives the name from the RFC 5322 grammar that it represents.\nNot all RFC 5322 nodes are produced, and there is one non-RFC 5322 node that\nmay be produced: \'ptext\'.  A \'ptext\' is a string of printable ascii characters.\nIt is returned in place of lists of (ctext/quoted-pair) and\n(qtext/quoted-pair).\n\nXXX: provide complete list of token types.\n'
        0
        None
        (
            'hexdigits'
        )
        (
            'itemgetter'
        )
        (
            '_encoded_words'
        )
        (
            'errors'
        )
        (
            'utils'
        )
        ' \t'
        '('
        '()<>@,:;.\\"[]'
        '.'
        '."('
        '/?='
        "*'%"
        '%'
        '\n'
        '\r'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: quote_string
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'str'
                'replace'
            [Var Names]
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '"'
                '\\'
                '\\\\'
                '\\"'
            [Disassembly]
                0       LOAD_CONST                      1: '"'
                2       LOAD_GLOBAL                     0: str
                4       LOAD_FAST                       0: value
                6       CALL_FUNCTION                   1
                8       LOAD_METHOD                     1: replace
                10      LOAD_CONST                      2: '\\'
                12      LOAD_CONST                      3: '\\\\'
                14      CALL_METHOD                     2
                16      LOAD_METHOD                     1: replace
                18      LOAD_CONST                      1: '"'
                20      LOAD_CONST                      4: '\\"'
                22      CALL_METHOD                     2
                24      BINARY_ADD                      
                26      LOAD_CONST                      1: '"'
                28      BINARY_ADD                      
                30      RETURN_VALUE                    
        'quote_string'
        "\n   =\\?            # literal =?\n   [^?]*          # charset\n   \\?             # literal ?\n   [qQbB]         # literal 'q' or 'b', case insensitive\n   \\?             # literal ?\n  .*?             # encoded word\n  \\?=             # literal ?=\n"
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: TokenList
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'syntactic_break'
                'ew_combine_allowed'
                '__init__'
                '__str__'
                '__repr__'
                'property'
                'value'
                'all_defects'
                'startswith_fws'
                'as_ew_allowed'
                'comments'
                'fold'
                'pprint'
                'ppstr'
                '_pp'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'TokenList'
                None
                True
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000000F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS)
                    [Names]
                        'super'
                        '__init__'
                        'defects'
                    [Var Names]
                        'self'
                        'args'
                        'kw'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_ATTR                       1: __init__
                        6       LOAD_FAST                       1: args
                        8       BUILD_MAP                       0
                        10      LOAD_FAST                       2: kw
                        12      DICT_MERGE                      1
                        14      CALL_FUNCTION_EX                1
                        16      POP_TOP                         
                        18      BUILD_LIST                      0
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      2: defects
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                'TokenList.__init__'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'join'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ''
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'str'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: x
                                8       LOAD_GLOBAL                     0: str
                                10      LOAD_FAST                       1: x
                                12      CALL_FUNCTION                   1
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'TokenList.__str__.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_METHOD                     0: join
                        4       LOAD_CONST                      2: <CODE> <genexpr>
                        6       LOAD_CONST                      3: 'TokenList.__str__.<locals>.<genexpr>'
                        8       MAKE_FUNCTION                   0
                        10      LOAD_FAST                       0: self
                        12      GET_ITER                        
                        14      CALL_FUNCTION                   1
                        16      CALL_METHOD                     1
                        18      RETURN_VALUE                    
                'TokenList.__str__'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'format'
                        '__class__'
                        '__name__'
                        'super'
                        '__repr__'
                    [Var Names]
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        '{}({})'
                    [Disassembly]
                        0       LOAD_CONST                      1: '{}({})'
                        2       LOAD_METHOD                     0: format
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: __class__
                        8       LOAD_ATTR                       2: __name__
                        10      LOAD_GLOBAL                     3: super
                        12      CALL_FUNCTION                   0
                        14      LOAD_METHOD                     4: __repr__
                        16      CALL_METHOD                     0
                        18      CALL_METHOD                     2
                        20      RETURN_VALUE                    
                'TokenList.__repr__'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'join'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ''
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 2
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'value'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_ATTR                       0: value
                                12      POP_JUMP_IF_FALSE               2 (to 4)
                                14      LOAD_FAST                       1: x
                                16      LOAD_ATTR                       0: value
                                18      YIELD_VALUE                     
                                20      POP_TOP                         
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      LOAD_CONST                      0: None
                                26      RETURN_VALUE                    
                        'TokenList.value.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_METHOD                     0: join
                        4       LOAD_CONST                      2: <CODE> <genexpr>
                        6       LOAD_CONST                      3: 'TokenList.value.<locals>.<genexpr>'
                        8       MAKE_FUNCTION                   0
                        10      LOAD_FAST                       0: self
                        12      GET_ITER                        
                        14      CALL_FUNCTION                   1
                        16      CALL_METHOD                     1
                        18      RETURN_VALUE                    
                'TokenList.value'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: all_defects
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'sum'
                        'defects'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 2
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'all_defects'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        6 (to 18)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_ATTR                       0: all_defects
                                12      YIELD_VALUE                     
                                14      POP_TOP                         
                                16      JUMP_ABSOLUTE                   2 (to 4)
                                18      LOAD_CONST                      0: None
                                20      RETURN_VALUE                    
                        'TokenList.all_defects.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: sum
                        2       LOAD_CONST                      1: <CODE> <genexpr>
                        4       LOAD_CONST                      2: 'TokenList.all_defects.<locals>.<genexpr>'
                        6       MAKE_FUNCTION                   0
                        8       LOAD_FAST                       0: self
                        10      GET_ITER                        
                        12      CALL_FUNCTION                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: defects
                        18      CALL_FUNCTION                   2
                        20      RETURN_VALUE                    
                'TokenList.all_defects'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: startswith_fws
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'startswith_fws'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_METHOD                     0: startswith_fws
                        8       CALL_METHOD                     0
                        10      RETURN_VALUE                    
                'TokenList.startswith_fws'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: as_ew_allowed
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'all'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'True if all top level tokens of this part may be RFC2047 encoded.'
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 2
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'as_ew_allowed'
                            [Var Names]
                                '.0'
                                'part'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        6 (to 18)
                                6       STORE_FAST                      1: part
                                8       LOAD_FAST                       1: part
                                10      LOAD_ATTR                       0: as_ew_allowed
                                12      YIELD_VALUE                     
                                14      POP_TOP                         
                                16      JUMP_ABSOLUTE                   2 (to 4)
                                18      LOAD_CONST                      0: None
                                20      RETURN_VALUE                    
                        'TokenList.as_ew_allowed.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: all
                        2       LOAD_CONST                      1: <CODE> <genexpr>
                        4       LOAD_CONST                      2: 'TokenList.as_ew_allowed.<locals>.<genexpr>'
                        6       MAKE_FUNCTION                   0
                        8       LOAD_FAST                       0: self
                        10      GET_ITER                        
                        12      CALL_FUNCTION                   1
                        14      CALL_FUNCTION                   1
                        16      RETURN_VALUE                    
                'TokenList.as_ew_allowed'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: comments
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'extend'
                        'comments'
                    [Var Names]
                        'self'
                        'comments'
                        'token'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      1: comments
                        4       LOAD_FAST                       0: self
                        6       GET_ITER                        
                        8       FOR_ITER                        8 (to 26)
                        10      STORE_FAST                      2: token
                        12      LOAD_FAST                       1: comments
                        14      LOAD_METHOD                     0: extend
                        16      LOAD_FAST                       2: token
                        18      LOAD_ATTR                       1: comments
                        20      CALL_METHOD                     1
                        22      POP_TOP                         
                        24      JUMP_ABSOLUTE                   4 (to 8)
                        26      LOAD_FAST                       1: comments
                        28      RETURN_VALUE                    
                'TokenList.comments'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: fold
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_refold_parse_tree'
                    [Var Names]
                        'self'
                        'policy'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            'policy'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _refold_parse_tree
                        2       LOAD_FAST                       0: self
                        4       LOAD_FAST                       1: policy
                        6       LOAD_CONST                      1: ('policy',)
                        8       CALL_FUNCTION_KW                2
                        10      RETURN_VALUE                    
                'TokenList.fold'
                ''
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: pprint
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'print'
                        'ppstr'
                    [Var Names]
                        'self'
                        'indent'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            'indent'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: print
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: ppstr
                        6       LOAD_FAST                       1: indent
                        8       LOAD_CONST                      1: ('indent',)
                        10      CALL_FUNCTION_KW                1
                        12      CALL_FUNCTION                   1
                        14      POP_TOP                         
                        16      LOAD_CONST                      0: None
                        18      RETURN_VALUE                    
                'TokenList.pprint'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: ppstr
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'join'
                        '_pp'
                    [Var Names]
                        'self'
                        'indent'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '\n'
                        (
                            'indent'
                        )
                    [Disassembly]
                        0       LOAD_CONST                      1: '\n'
                        2       LOAD_METHOD                     0: join
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: _pp
                        8       LOAD_FAST                       1: indent
                        10      LOAD_CONST                      2: ('indent',)
                        12      CALL_FUNCTION_KW                1
                        14      CALL_METHOD                     1
                        16      RETURN_VALUE                    
                'TokenList.ppstr'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: _pp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'format'
                        '__class__'
                        '__name__'
                        'token_type'
                        'hasattr'
                        '_pp'
                        'defects'
                    [Var Names]
                        'self'
                        'indent'
                        'token'
                        'extra'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '{}{}/{}('
                        '_pp'
                        '    !! invalid element in token list: {!r}'
                        '    '
                        ' Defects: {}'
                        ''
                        '{}){}'
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_CONST                      1: '{}{}/{}('
                        4       LOAD_METHOD                     0: format
                        6       LOAD_FAST                       1: indent
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: __class__
                        12      LOAD_ATTR                       2: __name__
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: token_type
                        18      CALL_METHOD                     3
                        20      YIELD_VALUE                     
                        22      POP_TOP                         
                        24      LOAD_FAST                       0: self
                        26      GET_ITER                        
                        28      FOR_ITER                        26 (to 82)
                        30      STORE_FAST                      2: token
                        32      LOAD_GLOBAL                     4: hasattr
                        34      LOAD_FAST                       2: token
                        36      LOAD_CONST                      2: '_pp'
                        38      CALL_FUNCTION                   2
                        40      POP_JUMP_IF_TRUE                30 (to 60)
                        42      LOAD_FAST                       1: indent
                        44      LOAD_CONST                      3: '    !! invalid element in token list: {!r}'
                        46      LOAD_METHOD                     0: format
                        48      LOAD_FAST                       2: token
                        50      CALL_METHOD                     1
                        52      BINARY_ADD                      
                        54      YIELD_VALUE                     
                        56      POP_TOP                         
                        58      JUMP_ABSOLUTE                   14 (to 28)
                        60      LOAD_FAST                       2: token
                        62      LOAD_METHOD                     5: _pp
                        64      LOAD_FAST                       1: indent
                        66      LOAD_CONST                      4: '    '
                        68      BINARY_ADD                      
                        70      CALL_METHOD                     1
                        72      GET_YIELD_FROM_ITER             
                        74      LOAD_CONST                      0: None
                        76      YIELD_FROM                      
                        78      POP_TOP                         
                        80      JUMP_ABSOLUTE                   14 (to 28)
                        82      LOAD_FAST                       0: self
                        84      LOAD_ATTR                       6: defects
                        86      POP_JUMP_IF_FALSE               51 (to 102)
                        88      LOAD_CONST                      5: ' Defects: {}'
                        90      LOAD_METHOD                     0: format
                        92      LOAD_FAST                       0: self
                        94      LOAD_ATTR                       6: defects
                        96      CALL_METHOD                     1
                        98      STORE_FAST                      3: extra
                        100     JUMP_FORWARD                    2 (to 106)
                        102     LOAD_CONST                      6: ''
                        104     STORE_FAST                      3: extra
                        106     LOAD_CONST                      7: '{}){}'
                        108     LOAD_METHOD                     0: format
                        110     LOAD_FAST                       1: indent
                        112     LOAD_FAST                       3: extra
                        114     CALL_METHOD                     2
                        116     YIELD_VALUE                     
                        118     POP_TOP                         
                        120     LOAD_CONST                      0: None
                        122     RETURN_VALUE                    
                'TokenList._pp'
                (
                    ''
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'TokenList'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: None
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: True
                14      STORE_NAME                      4: syntactic_break
                16      LOAD_CONST                      2: True
                18      STORE_NAME                      5: ew_combine_allowed
                20      LOAD_CLOSURE                    0: __class__
                22      BUILD_TUPLE                     1
                24      LOAD_CONST                      3: <CODE> __init__
                26      LOAD_CONST                      4: 'TokenList.__init__'
                28      MAKE_FUNCTION                   8
                30      STORE_NAME                      6: __init__
                32      LOAD_CONST                      5: <CODE> __str__
                34      LOAD_CONST                      6: 'TokenList.__str__'
                36      MAKE_FUNCTION                   0
                38      STORE_NAME                      7: __str__
                40      LOAD_CLOSURE                    0: __class__
                42      BUILD_TUPLE                     1
                44      LOAD_CONST                      7: <CODE> __repr__
                46      LOAD_CONST                      8: 'TokenList.__repr__'
                48      MAKE_FUNCTION                   8
                50      STORE_NAME                      8: __repr__
                52      LOAD_NAME                       9: property
                54      LOAD_CONST                      9: <CODE> value
                56      LOAD_CONST                      10: 'TokenList.value'
                58      MAKE_FUNCTION                   0
                60      CALL_FUNCTION                   1
                62      STORE_NAME                      10: value
                64      LOAD_NAME                       9: property
                66      LOAD_CONST                      11: <CODE> all_defects
                68      LOAD_CONST                      12: 'TokenList.all_defects'
                70      MAKE_FUNCTION                   0
                72      CALL_FUNCTION                   1
                74      STORE_NAME                      11: all_defects
                76      LOAD_CONST                      13: <CODE> startswith_fws
                78      LOAD_CONST                      14: 'TokenList.startswith_fws'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      12: startswith_fws
                84      LOAD_NAME                       9: property
                86      LOAD_CONST                      15: <CODE> as_ew_allowed
                88      LOAD_CONST                      16: 'TokenList.as_ew_allowed'
                90      MAKE_FUNCTION                   0
                92      CALL_FUNCTION                   1
                94      STORE_NAME                      13: as_ew_allowed
                96      LOAD_NAME                       9: property
                98      LOAD_CONST                      17: <CODE> comments
                100     LOAD_CONST                      18: 'TokenList.comments'
                102     MAKE_FUNCTION                   0
                104     CALL_FUNCTION                   1
                106     STORE_NAME                      14: comments
                108     LOAD_CONST                      19: <CODE> fold
                110     LOAD_CONST                      20: 'TokenList.fold'
                112     MAKE_FUNCTION                   0
                114     STORE_NAME                      15: fold
                116     LOAD_CONST                      28: ('',)
                118     LOAD_CONST                      22: <CODE> pprint
                120     LOAD_CONST                      23: 'TokenList.pprint'
                122     MAKE_FUNCTION                   1
                124     STORE_NAME                      16: pprint
                126     LOAD_CONST                      28: ('',)
                128     LOAD_CONST                      24: <CODE> ppstr
                130     LOAD_CONST                      25: 'TokenList.ppstr'
                132     MAKE_FUNCTION                   1
                134     STORE_NAME                      17: ppstr
                136     LOAD_CONST                      28: ('',)
                138     LOAD_CONST                      26: <CODE> _pp
                140     LOAD_CONST                      27: 'TokenList._pp'
                142     MAKE_FUNCTION                   1
                144     STORE_NAME                      18: _pp
                146     LOAD_CLOSURE                    0: __class__
                148     DUP_TOP                         
                150     STORE_NAME                      19: __classcell__
                152     RETURN_VALUE                    
        'TokenList'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: WhiteSpaceTokenList
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'property'
                'value'
                'comments'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'WhiteSpaceTokenList'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' '
                    [Disassembly]
                        0       LOAD_CONST                      1: ' '
                        2       RETURN_VALUE                    
                'WhiteSpaceTokenList.value'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: comments
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'token_type'
                                'content'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                'comment'
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        10 (to 26)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_ATTR                       0: token_type
                                12      LOAD_CONST                      0: 'comment'
                                14      COMPARE_OP                      2 (==)
                                16      POP_JUMP_IF_FALSE               2 (to 4)
                                18      LOAD_FAST                       1: x
                                20      LOAD_ATTR                       1: content
                                22      LIST_APPEND                     2
                                24      JUMP_ABSOLUTE                   2 (to 4)
                                26      RETURN_VALUE                    
                        'WhiteSpaceTokenList.comments.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_CONST                      1: <CODE> <listcomp>
                        2       LOAD_CONST                      2: 'WhiteSpaceTokenList.comments.<locals>.<listcomp>'
                        4       MAKE_FUNCTION                   0
                        6       LOAD_FAST                       0: self
                        8       GET_ITER                        
                        10      CALL_FUNCTION                   1
                        12      RETURN_VALUE                    
                'WhiteSpaceTokenList.comments'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'WhiteSpaceTokenList'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: property
                10      LOAD_CONST                      1: <CODE> value
                12      LOAD_CONST                      2: 'WhiteSpaceTokenList.value'
                14      MAKE_FUNCTION                   0
                16      CALL_FUNCTION                   1
                18      STORE_NAME                      4: value
                20      LOAD_NAME                       3: property
                22      LOAD_CONST                      3: <CODE> comments
                24      LOAD_CONST                      4: 'WhiteSpaceTokenList.comments'
                26      MAKE_FUNCTION                   0
                28      CALL_FUNCTION                   1
                30      STORE_NAME                      5: comments
                32      LOAD_CONST                      5: None
                34      RETURN_VALUE                    
        'WhiteSpaceTokenList'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: UnstructuredTokenList
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'UnstructuredTokenList'
                'unstructured'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'UnstructuredTokenList'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'unstructured'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'UnstructuredTokenList'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Phrase
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Phrase'
                'phrase'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Phrase'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'phrase'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'Phrase'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Word
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Word'
                'word'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Word'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'word'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'Word'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: CFWSList
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'CFWSList'
                'cfws'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'CFWSList'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'cfws'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'CFWSList'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Atom
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Atom'
                'atom'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Atom'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'atom'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'Atom'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Token
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'encode_as_ew'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Token'
                'token'
                False
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Token'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'token'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: encode_as_ew
                16      LOAD_CONST                      3: None
                18      RETURN_VALUE                    
        'Token'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: EncodedWord
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'cte'
                'charset'
                'lang'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'EncodedWord'
                'encoded-word'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'EncodedWord'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'encoded-word'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      STORE_NAME                      4: cte
                16      LOAD_CONST                      2: None
                18      STORE_NAME                      5: charset
                20      LOAD_CONST                      2: None
                22      STORE_NAME                      6: lang
                24      LOAD_CONST                      2: None
                26      RETURN_VALUE                    
        'EncodedWord'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: QuotedString
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'content'
                'quoted_value'
                'stripped_value'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'QuotedString'
                'quoted-string'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: content
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'value'
                    [Var Names]
                        'self'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'bare-quoted-string'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       GET_ITER                        
                        4       FOR_ITER                        12 (to 30)
                        6       STORE_FAST                      1: x
                        8       LOAD_FAST                       1: x
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_CONST                      1: 'bare-quoted-string'
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               14 (to 28)
                        18      LOAD_FAST                       1: x
                        20      LOAD_ATTR                       1: value
                        22      ROT_TWO                         
                        24      POP_TOP                         
                        26      RETURN_VALUE                    
                        28      JUMP_ABSOLUTE                   2 (to 4)
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'QuotedString.content'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: quoted_value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'append'
                        'str'
                        'value'
                        'join'
                    [Var Names]
                        'self'
                        'res'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'bare-quoted-string'
                        ''
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      1: res
                        4       LOAD_FAST                       0: self
                        6       GET_ITER                        
                        8       FOR_ITER                        21 (to 52)
                        10      STORE_FAST                      2: x
                        12      LOAD_FAST                       2: x
                        14      LOAD_ATTR                       0: token_type
                        16      LOAD_CONST                      1: 'bare-quoted-string'
                        18      COMPARE_OP                      2 (==)
                        20      POP_JUMP_IF_FALSE               19 (to 38)
                        22      LOAD_FAST                       1: res
                        24      LOAD_METHOD                     1: append
                        26      LOAD_GLOBAL                     2: str
                        28      LOAD_FAST                       2: x
                        30      CALL_FUNCTION                   1
                        32      CALL_METHOD                     1
                        34      POP_TOP                         
                        36      JUMP_ABSOLUTE                   4 (to 8)
                        38      LOAD_FAST                       1: res
                        40      LOAD_METHOD                     1: append
                        42      LOAD_FAST                       2: x
                        44      LOAD_ATTR                       3: value
                        46      CALL_METHOD                     1
                        48      POP_TOP                         
                        50      JUMP_ABSOLUTE                   4 (to 8)
                        52      LOAD_CONST                      2: ''
                        54      LOAD_METHOD                     4: join
                        56      LOAD_FAST                       1: res
                        58      CALL_METHOD                     1
                        60      RETURN_VALUE                    
                'QuotedString.quoted_value'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: stripped_value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'value'
                    [Var Names]
                        'self'
                        'token'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'bare-quoted-string'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       GET_ITER                        
                        4       FOR_ITER                        12 (to 30)
                        6       STORE_FAST                      1: token
                        8       LOAD_FAST                       1: token
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_CONST                      1: 'bare-quoted-string'
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               14 (to 28)
                        18      LOAD_FAST                       1: token
                        20      LOAD_ATTR                       1: value
                        22      ROT_TWO                         
                        24      POP_TOP                         
                        26      RETURN_VALUE                    
                        28      JUMP_ABSOLUTE                   2 (to 4)
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'QuotedString.stripped_value'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'QuotedString'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'quoted-string'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> content
                16      LOAD_CONST                      3: 'QuotedString.content'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: content
                24      LOAD_NAME                       4: property
                26      LOAD_CONST                      4: <CODE> quoted_value
                28      LOAD_CONST                      5: 'QuotedString.quoted_value'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: quoted_value
                36      LOAD_NAME                       4: property
                38      LOAD_CONST                      6: <CODE> stripped_value
                40      LOAD_CONST                      7: 'QuotedString.stripped_value'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      7: stripped_value
                48      LOAD_CONST                      8: None
                50      RETURN_VALUE                    
        'QuotedString'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: BareQuotedString
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                '__str__'
                'property'
                'value'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'BareQuotedString'
                'bare-quoted-string'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'quote_string'
                        'join'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ''
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'str'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: x
                                8       LOAD_GLOBAL                     0: str
                                10      LOAD_FAST                       1: x
                                12      CALL_FUNCTION                   1
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'BareQuotedString.__str__.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: quote_string
                        2       LOAD_CONST                      1: ''
                        4       LOAD_METHOD                     1: join
                        6       LOAD_CONST                      2: <CODE> <genexpr>
                        8       LOAD_CONST                      3: 'BareQuotedString.__str__.<locals>.<genexpr>'
                        10      MAKE_FUNCTION                   0
                        12      LOAD_FAST                       0: self
                        14      GET_ITER                        
                        16      CALL_FUNCTION                   1
                        18      CALL_METHOD                     1
                        20      CALL_FUNCTION                   1
                        22      RETURN_VALUE                    
                'BareQuotedString.__str__'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'join'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ''
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'str'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: x
                                8       LOAD_GLOBAL                     0: str
                                10      LOAD_FAST                       1: x
                                12      CALL_FUNCTION                   1
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'BareQuotedString.value.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_METHOD                     0: join
                        4       LOAD_CONST                      2: <CODE> <genexpr>
                        6       LOAD_CONST                      3: 'BareQuotedString.value.<locals>.<genexpr>'
                        8       MAKE_FUNCTION                   0
                        10      LOAD_FAST                       0: self
                        12      GET_ITER                        
                        14      CALL_FUNCTION                   1
                        16      CALL_METHOD                     1
                        18      RETURN_VALUE                    
                'BareQuotedString.value'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'BareQuotedString'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'bare-quoted-string'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: <CODE> __str__
                14      LOAD_CONST                      3: 'BareQuotedString.__str__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __str__
                20      LOAD_NAME                       5: property
                22      LOAD_CONST                      4: <CODE> value
                24      LOAD_CONST                      5: 'BareQuotedString.value'
                26      MAKE_FUNCTION                   0
                28      CALL_FUNCTION                   1
                30      STORE_NAME                      6: value
                32      LOAD_CONST                      6: None
                34      RETURN_VALUE                    
        'BareQuotedString'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Comment
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                '__str__'
                'quote'
                'property'
                'content'
                'comments'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Comment'
                'comment'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 7
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'join'
                        'sum'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        None
                        ''
                        '('
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 5
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'quote'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: x
                                8       LOAD_DEREF                      0: self
                                10      LOAD_METHOD                     0: quote
                                12      LOAD_FAST                       1: x
                                14      CALL_METHOD                     1
                                16      LIST_APPEND                     2
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      RETURN_VALUE                    
                        'Comment.__str__.<locals>.<listcomp>'
                        ')'
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_METHOD                     0: join
                        4       LOAD_GLOBAL                     1: sum
                        6       LOAD_CONST                      2: '('
                        8       BUILD_LIST                      1
                        10      LOAD_CLOSURE                    0: self
                        12      BUILD_TUPLE                     1
                        14      LOAD_CONST                      3: <CODE> <listcomp>
                        16      LOAD_CONST                      4: 'Comment.__str__.<locals>.<listcomp>'
                        18      MAKE_FUNCTION                   8
                        20      LOAD_DEREF                      0: self
                        22      GET_ITER                        
                        24      CALL_FUNCTION                   1
                        26      LOAD_CONST                      5: ')'
                        28      BUILD_LIST                      1
                        30      BUILD_LIST                      3
                        32      BUILD_LIST                      0
                        34      CALL_FUNCTION                   2
                        36      CALL_METHOD                     1
                        38      RETURN_VALUE                    
                'Comment.__str__'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: quote
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'str'
                        'replace'
                    [Var Names]
                        'self'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'comment'
                        '\\'
                        '\\\\'
                        '('
                        '\\('
                        ')'
                        '\\)'
                    [Disassembly]
                        0       LOAD_FAST                       1: value
                        2       LOAD_ATTR                       0: token_type
                        4       LOAD_CONST                      1: 'comment'
                        6       COMPARE_OP                      2 (==)
                        8       POP_JUMP_IF_FALSE               9 (to 18)
                        10      LOAD_GLOBAL                     1: str
                        12      LOAD_FAST                       1: value
                        14      CALL_FUNCTION                   1
                        16      RETURN_VALUE                    
                        18      LOAD_GLOBAL                     1: str
                        20      LOAD_FAST                       1: value
                        22      CALL_FUNCTION                   1
                        24      LOAD_METHOD                     2: replace
                        26      LOAD_CONST                      2: '\\'
                        28      LOAD_CONST                      3: '\\\\'
                        30      CALL_METHOD                     2
                        32      LOAD_METHOD                     2: replace
                        34      LOAD_CONST                      4: '('
                        36      LOAD_CONST                      5: '\\('
                        38      CALL_METHOD                     2
                        40      LOAD_METHOD                     2: replace
                        42      LOAD_CONST                      6: ')'
                        44      LOAD_CONST                      7: '\\)'
                        46      CALL_METHOD                     2
                        48      RETURN_VALUE                    
                'Comment.quote'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: content
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'join'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ''
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'str'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: x
                                8       LOAD_GLOBAL                     0: str
                                10      LOAD_FAST                       1: x
                                12      CALL_FUNCTION                   1
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'Comment.content.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_METHOD                     0: join
                        4       LOAD_CONST                      2: <CODE> <genexpr>
                        6       LOAD_CONST                      3: 'Comment.content.<locals>.<genexpr>'
                        8       MAKE_FUNCTION                   0
                        10      LOAD_FAST                       0: self
                        12      GET_ITER                        
                        14      CALL_FUNCTION                   1
                        16      CALL_METHOD                     1
                        18      RETURN_VALUE                    
                'Comment.content'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: comments
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'content'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: content
                        4       BUILD_LIST                      1
                        6       RETURN_VALUE                    
                'Comment.comments'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Comment'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'comment'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: <CODE> __str__
                14      LOAD_CONST                      3: 'Comment.__str__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __str__
                20      LOAD_CONST                      4: <CODE> quote
                22      LOAD_CONST                      5: 'Comment.quote'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: quote
                28      LOAD_NAME                       6: property
                30      LOAD_CONST                      6: <CODE> content
                32      LOAD_CONST                      7: 'Comment.content'
                34      MAKE_FUNCTION                   0
                36      CALL_FUNCTION                   1
                38      STORE_NAME                      7: content
                40      LOAD_NAME                       6: property
                42      LOAD_CONST                      8: <CODE> comments
                44      LOAD_CONST                      9: 'Comment.comments'
                46      MAKE_FUNCTION                   0
                48      CALL_FUNCTION                   1
                50      STORE_NAME                      8: comments
                52      LOAD_CONST                      10: None
                54      RETURN_VALUE                    
        'Comment'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: AddressList
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'addresses'
                'mailboxes'
                'all_mailboxes'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'AddressList'
                'address-list'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: addresses
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'token_type'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                'address'
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_ATTR                       0: token_type
                                12      LOAD_CONST                      0: 'address'
                                14      COMPARE_OP                      2 (==)
                                16      POP_JUMP_IF_FALSE               2 (to 4)
                                18      LOAD_FAST                       1: x
                                20      LIST_APPEND                     2
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      RETURN_VALUE                    
                        'AddressList.addresses.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_CONST                      1: <CODE> <listcomp>
                        2       LOAD_CONST                      2: 'AddressList.addresses.<locals>.<listcomp>'
                        4       MAKE_FUNCTION                   0
                        6       LOAD_FAST                       0: self
                        8       GET_ITER                        
                        10      CALL_FUNCTION                   1
                        12      RETURN_VALUE                    
                'AddressList.addresses'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: mailboxes
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'sum'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'token_type'
                                'mailboxes'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                'address'
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        11 (to 28)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_ATTR                       0: token_type
                                12      LOAD_CONST                      0: 'address'
                                14      COMPARE_OP                      2 (==)
                                16      POP_JUMP_IF_FALSE               2 (to 4)
                                18      LOAD_FAST                       1: x
                                20      LOAD_ATTR                       1: mailboxes
                                22      YIELD_VALUE                     
                                24      POP_TOP                         
                                26      JUMP_ABSOLUTE                   2 (to 4)
                                28      LOAD_CONST                      1: None
                                30      RETURN_VALUE                    
                        'AddressList.mailboxes.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: sum
                        2       LOAD_CONST                      1: <CODE> <genexpr>
                        4       LOAD_CONST                      2: 'AddressList.mailboxes.<locals>.<genexpr>'
                        6       MAKE_FUNCTION                   0
                        8       LOAD_FAST                       0: self
                        10      GET_ITER                        
                        12      CALL_FUNCTION                   1
                        14      BUILD_LIST                      0
                        16      CALL_FUNCTION                   2
                        18      RETURN_VALUE                    
                'AddressList.mailboxes'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: all_mailboxes
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'sum'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'token_type'
                                'all_mailboxes'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                'address'
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        11 (to 28)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_ATTR                       0: token_type
                                12      LOAD_CONST                      0: 'address'
                                14      COMPARE_OP                      2 (==)
                                16      POP_JUMP_IF_FALSE               2 (to 4)
                                18      LOAD_FAST                       1: x
                                20      LOAD_ATTR                       1: all_mailboxes
                                22      YIELD_VALUE                     
                                24      POP_TOP                         
                                26      JUMP_ABSOLUTE                   2 (to 4)
                                28      LOAD_CONST                      1: None
                                30      RETURN_VALUE                    
                        'AddressList.all_mailboxes.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: sum
                        2       LOAD_CONST                      1: <CODE> <genexpr>
                        4       LOAD_CONST                      2: 'AddressList.all_mailboxes.<locals>.<genexpr>'
                        6       MAKE_FUNCTION                   0
                        8       LOAD_FAST                       0: self
                        10      GET_ITER                        
                        12      CALL_FUNCTION                   1
                        14      BUILD_LIST                      0
                        16      CALL_FUNCTION                   2
                        18      RETURN_VALUE                    
                'AddressList.all_mailboxes'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'AddressList'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'address-list'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> addresses
                16      LOAD_CONST                      3: 'AddressList.addresses'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: addresses
                24      LOAD_NAME                       4: property
                26      LOAD_CONST                      4: <CODE> mailboxes
                28      LOAD_CONST                      5: 'AddressList.mailboxes'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: mailboxes
                36      LOAD_NAME                       4: property
                38      LOAD_CONST                      6: <CODE> all_mailboxes
                40      LOAD_CONST                      7: 'AddressList.all_mailboxes'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      7: all_mailboxes
                48      LOAD_CONST                      8: None
                50      RETURN_VALUE                    
        'AddressList'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Address
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'display_name'
                'mailboxes'
                'all_mailboxes'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Address'
                'address'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: display_name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'display_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'group'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: token_type
                        8       LOAD_CONST                      2: 'group'
                        10      COMPARE_OP                      2 (==)
                        12      POP_JUMP_IF_FALSE               12 (to 24)
                        14      LOAD_FAST                       0: self
                        16      LOAD_CONST                      1: 0
                        18      BINARY_SUBSCR                   
                        20      LOAD_ATTR                       1: display_name
                        22      RETURN_VALUE                    
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                'Address.display_name'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: mailboxes
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'mailboxes'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'mailbox'
                        'invalid-mailbox'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: token_type
                        8       LOAD_CONST                      2: 'mailbox'
                        10      COMPARE_OP                      2 (==)
                        12      POP_JUMP_IF_FALSE               12 (to 24)
                        14      LOAD_FAST                       0: self
                        16      LOAD_CONST                      1: 0
                        18      BINARY_SUBSCR                   
                        20      BUILD_LIST                      1
                        22      RETURN_VALUE                    
                        24      LOAD_FAST                       0: self
                        26      LOAD_CONST                      1: 0
                        28      BINARY_SUBSCR                   
                        30      LOAD_ATTR                       0: token_type
                        32      LOAD_CONST                      3: 'invalid-mailbox'
                        34      COMPARE_OP                      2 (==)
                        36      POP_JUMP_IF_FALSE               21 (to 42)
                        38      BUILD_LIST                      0
                        40      RETURN_VALUE                    
                        42      LOAD_FAST                       0: self
                        44      LOAD_CONST                      1: 0
                        46      BINARY_SUBSCR                   
                        48      LOAD_ATTR                       1: mailboxes
                        50      RETURN_VALUE                    
                'Address.mailboxes'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: all_mailboxes
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'all_mailboxes'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'mailbox'
                        'invalid-mailbox'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: token_type
                        8       LOAD_CONST                      2: 'mailbox'
                        10      COMPARE_OP                      2 (==)
                        12      POP_JUMP_IF_FALSE               12 (to 24)
                        14      LOAD_FAST                       0: self
                        16      LOAD_CONST                      1: 0
                        18      BINARY_SUBSCR                   
                        20      BUILD_LIST                      1
                        22      RETURN_VALUE                    
                        24      LOAD_FAST                       0: self
                        26      LOAD_CONST                      1: 0
                        28      BINARY_SUBSCR                   
                        30      LOAD_ATTR                       0: token_type
                        32      LOAD_CONST                      3: 'invalid-mailbox'
                        34      COMPARE_OP                      2 (==)
                        36      POP_JUMP_IF_FALSE               24 (to 48)
                        38      LOAD_FAST                       0: self
                        40      LOAD_CONST                      1: 0
                        42      BINARY_SUBSCR                   
                        44      BUILD_LIST                      1
                        46      RETURN_VALUE                    
                        48      LOAD_FAST                       0: self
                        50      LOAD_CONST                      1: 0
                        52      BINARY_SUBSCR                   
                        54      LOAD_ATTR                       1: all_mailboxes
                        56      RETURN_VALUE                    
                'Address.all_mailboxes'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Address'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'address'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> display_name
                16      LOAD_CONST                      3: 'Address.display_name'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: display_name
                24      LOAD_NAME                       4: property
                26      LOAD_CONST                      4: <CODE> mailboxes
                28      LOAD_CONST                      5: 'Address.mailboxes'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: mailboxes
                36      LOAD_NAME                       4: property
                38      LOAD_CONST                      6: <CODE> all_mailboxes
                40      LOAD_CONST                      7: 'Address.all_mailboxes'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      7: all_mailboxes
                48      LOAD_CONST                      8: None
                50      RETURN_VALUE                    
        'Address'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: MailboxList
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'mailboxes'
                'all_mailboxes'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'MailboxList'
                'mailbox-list'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: mailboxes
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'token_type'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                'mailbox'
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_ATTR                       0: token_type
                                12      LOAD_CONST                      0: 'mailbox'
                                14      COMPARE_OP                      2 (==)
                                16      POP_JUMP_IF_FALSE               2 (to 4)
                                18      LOAD_FAST                       1: x
                                20      LIST_APPEND                     2
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      RETURN_VALUE                    
                        'MailboxList.mailboxes.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_CONST                      1: <CODE> <listcomp>
                        2       LOAD_CONST                      2: 'MailboxList.mailboxes.<locals>.<listcomp>'
                        4       MAKE_FUNCTION                   0
                        6       LOAD_FAST                       0: self
                        8       GET_ITER                        
                        10      CALL_FUNCTION                   1
                        12      RETURN_VALUE                    
                'MailboxList.mailboxes'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: all_mailboxes
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'token_type'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                (
                                    'mailbox'
                                    'invalid-mailbox'
                                )
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        9 (to 24)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_ATTR                       0: token_type
                                12      LOAD_CONST                      0: ('mailbox', 'invalid-mailbox')
                                14      CONTAINS_OP                     0 (in)
                                16      POP_JUMP_IF_FALSE               2 (to 4)
                                18      LOAD_FAST                       1: x
                                20      LIST_APPEND                     2
                                22      JUMP_ABSOLUTE                   2 (to 4)
                                24      RETURN_VALUE                    
                        'MailboxList.all_mailboxes.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_CONST                      1: <CODE> <listcomp>
                        2       LOAD_CONST                      2: 'MailboxList.all_mailboxes.<locals>.<listcomp>'
                        4       MAKE_FUNCTION                   0
                        6       LOAD_FAST                       0: self
                        8       GET_ITER                        
                        10      CALL_FUNCTION                   1
                        12      RETURN_VALUE                    
                'MailboxList.all_mailboxes'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'MailboxList'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'mailbox-list'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> mailboxes
                16      LOAD_CONST                      3: 'MailboxList.mailboxes'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: mailboxes
                24      LOAD_NAME                       4: property
                26      LOAD_CONST                      4: <CODE> all_mailboxes
                28      LOAD_CONST                      5: 'MailboxList.all_mailboxes'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: all_mailboxes
                36      LOAD_CONST                      6: None
                38      RETURN_VALUE                    
        'MailboxList'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: GroupList
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'mailboxes'
                'all_mailboxes'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'GroupList'
                'group-list'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: mailboxes
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'mailboxes'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'mailbox-list'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       POP_JUMP_IF_FALSE               9 (to 18)
                        4       LOAD_FAST                       0: self
                        6       LOAD_CONST                      1: 0
                        8       BINARY_SUBSCR                   
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_CONST                      2: 'mailbox-list'
                        14      COMPARE_OP                      3 (!=)
                        16      POP_JUMP_IF_FALSE               11 (to 22)
                        18      BUILD_LIST                      0
                        20      RETURN_VALUE                    
                        22      LOAD_FAST                       0: self
                        24      LOAD_CONST                      1: 0
                        26      BINARY_SUBSCR                   
                        28      LOAD_ATTR                       1: mailboxes
                        30      RETURN_VALUE                    
                'GroupList.mailboxes'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: all_mailboxes
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'all_mailboxes'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'mailbox-list'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       POP_JUMP_IF_FALSE               9 (to 18)
                        4       LOAD_FAST                       0: self
                        6       LOAD_CONST                      1: 0
                        8       BINARY_SUBSCR                   
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_CONST                      2: 'mailbox-list'
                        14      COMPARE_OP                      3 (!=)
                        16      POP_JUMP_IF_FALSE               11 (to 22)
                        18      BUILD_LIST                      0
                        20      RETURN_VALUE                    
                        22      LOAD_FAST                       0: self
                        24      LOAD_CONST                      1: 0
                        26      BINARY_SUBSCR                   
                        28      LOAD_ATTR                       1: all_mailboxes
                        30      RETURN_VALUE                    
                'GroupList.all_mailboxes'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'GroupList'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'group-list'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> mailboxes
                16      LOAD_CONST                      3: 'GroupList.mailboxes'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: mailboxes
                24      LOAD_NAME                       4: property
                26      LOAD_CONST                      4: <CODE> all_mailboxes
                28      LOAD_CONST                      5: 'GroupList.all_mailboxes'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: all_mailboxes
                36      LOAD_CONST                      6: None
                38      RETURN_VALUE                    
        'GroupList'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Group
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'mailboxes'
                'all_mailboxes'
                'display_name'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Group'
                'group'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: mailboxes
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'mailboxes'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        2
                        'group-list'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 2
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: token_type
                        8       LOAD_CONST                      2: 'group-list'
                        10      COMPARE_OP                      3 (!=)
                        12      POP_JUMP_IF_FALSE               9 (to 18)
                        14      BUILD_LIST                      0
                        16      RETURN_VALUE                    
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      1: 2
                        22      BINARY_SUBSCR                   
                        24      LOAD_ATTR                       1: mailboxes
                        26      RETURN_VALUE                    
                'Group.mailboxes'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: all_mailboxes
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'all_mailboxes'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        2
                        'group-list'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 2
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: token_type
                        8       LOAD_CONST                      2: 'group-list'
                        10      COMPARE_OP                      3 (!=)
                        12      POP_JUMP_IF_FALSE               9 (to 18)
                        14      BUILD_LIST                      0
                        16      RETURN_VALUE                    
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      1: 2
                        22      BINARY_SUBSCR                   
                        24      LOAD_ATTR                       1: all_mailboxes
                        26      RETURN_VALUE                    
                'Group.all_mailboxes'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: display_name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'display_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: display_name
                        8       RETURN_VALUE                    
                'Group.display_name'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Group'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'group'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> mailboxes
                16      LOAD_CONST                      3: 'Group.mailboxes'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: mailboxes
                24      LOAD_NAME                       4: property
                26      LOAD_CONST                      4: <CODE> all_mailboxes
                28      LOAD_CONST                      5: 'Group.all_mailboxes'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: all_mailboxes
                36      LOAD_NAME                       4: property
                38      LOAD_CONST                      6: <CODE> display_name
                40      LOAD_CONST                      7: 'Group.display_name'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      7: display_name
                48      LOAD_CONST                      8: None
                50      RETURN_VALUE                    
        'Group'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: NameAddr
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'display_name'
                'local_part'
                'domain'
                'route'
                'addr_spec'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'NameAddr'
                'name-addr'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: display_name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'len'
                        'display_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: len
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_CONST                      1: 1
                        8       COMPARE_OP                      2 (==)
                        10      POP_JUMP_IF_FALSE               8 (to 16)
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      2: 0
                        20      BINARY_SUBSCR                   
                        22      LOAD_ATTR                       1: display_name
                        24      RETURN_VALUE                    
                'NameAddr.display_name'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: local_part
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'local_part'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        -1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: -1
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: local_part
                        8       RETURN_VALUE                    
                'NameAddr.local_part'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: domain
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'domain'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        -1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: -1
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: domain
                        8       RETURN_VALUE                    
                'NameAddr.domain'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: route
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'route'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        -1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: -1
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: route
                        8       RETURN_VALUE                    
                'NameAddr.route'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: addr_spec
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'addr_spec'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        -1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: -1
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: addr_spec
                        8       RETURN_VALUE                    
                'NameAddr.addr_spec'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'NameAddr'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'name-addr'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> display_name
                16      LOAD_CONST                      3: 'NameAddr.display_name'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: display_name
                24      LOAD_NAME                       4: property
                26      LOAD_CONST                      4: <CODE> local_part
                28      LOAD_CONST                      5: 'NameAddr.local_part'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: local_part
                36      LOAD_NAME                       4: property
                38      LOAD_CONST                      6: <CODE> domain
                40      LOAD_CONST                      7: 'NameAddr.domain'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      7: domain
                48      LOAD_NAME                       4: property
                50      LOAD_CONST                      8: <CODE> route
                52      LOAD_CONST                      9: 'NameAddr.route'
                54      MAKE_FUNCTION                   0
                56      CALL_FUNCTION                   1
                58      STORE_NAME                      8: route
                60      LOAD_NAME                       4: property
                62      LOAD_CONST                      10: <CODE> addr_spec
                64      LOAD_CONST                      11: 'NameAddr.addr_spec'
                66      MAKE_FUNCTION                   0
                68      CALL_FUNCTION                   1
                70      STORE_NAME                      9: addr_spec
                72      LOAD_CONST                      12: None
                74      RETURN_VALUE                    
        'NameAddr'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: AngleAddr
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'local_part'
                'domain'
                'route'
                'addr_spec'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'AngleAddr'
                'angle-addr'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: local_part
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'local_part'
                    [Var Names]
                        'self'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'addr-spec'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       GET_ITER                        
                        4       FOR_ITER                        12 (to 30)
                        6       STORE_FAST                      1: x
                        8       LOAD_FAST                       1: x
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_CONST                      1: 'addr-spec'
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               14 (to 28)
                        18      LOAD_FAST                       1: x
                        20      LOAD_ATTR                       1: local_part
                        22      ROT_TWO                         
                        24      POP_TOP                         
                        26      RETURN_VALUE                    
                        28      JUMP_ABSOLUTE                   2 (to 4)
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'AngleAddr.local_part'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: domain
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'domain'
                    [Var Names]
                        'self'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'addr-spec'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       GET_ITER                        
                        4       FOR_ITER                        12 (to 30)
                        6       STORE_FAST                      1: x
                        8       LOAD_FAST                       1: x
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_CONST                      1: 'addr-spec'
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               14 (to 28)
                        18      LOAD_FAST                       1: x
                        20      LOAD_ATTR                       1: domain
                        22      ROT_TWO                         
                        24      POP_TOP                         
                        26      RETURN_VALUE                    
                        28      JUMP_ABSOLUTE                   2 (to 4)
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'AngleAddr.domain'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: route
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'domains'
                    [Var Names]
                        'self'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'obs-route'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       GET_ITER                        
                        4       FOR_ITER                        12 (to 30)
                        6       STORE_FAST                      1: x
                        8       LOAD_FAST                       1: x
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_CONST                      1: 'obs-route'
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               14 (to 28)
                        18      LOAD_FAST                       1: x
                        20      LOAD_ATTR                       1: domains
                        22      ROT_TWO                         
                        24      POP_TOP                         
                        26      RETURN_VALUE                    
                        28      JUMP_ABSOLUTE                   2 (to 4)
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'AngleAddr.route'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: addr_spec
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'local_part'
                        'addr_spec'
                        'quote_string'
                    [Var Names]
                        'self'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'addr-spec'
                        '<>'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       GET_ITER                        
                        4       FOR_ITER                        25 (to 56)
                        6       STORE_FAST                      1: x
                        8       LOAD_FAST                       1: x
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_CONST                      1: 'addr-spec'
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               27 (to 54)
                        18      LOAD_FAST                       1: x
                        20      LOAD_ATTR                       1: local_part
                        22      POP_JUMP_IF_FALSE               17 (to 34)
                        24      LOAD_FAST                       1: x
                        26      LOAD_ATTR                       2: addr_spec
                        28      ROT_TWO                         
                        30      POP_TOP                         
                        32      RETURN_VALUE                    
                        34      LOAD_GLOBAL                     3: quote_string
                        36      LOAD_FAST                       1: x
                        38      LOAD_ATTR                       1: local_part
                        40      CALL_FUNCTION                   1
                        42      LOAD_FAST                       1: x
                        44      LOAD_ATTR                       2: addr_spec
                        46      BINARY_ADD                      
                        48      ROT_TWO                         
                        50      POP_TOP                         
                        52      RETURN_VALUE                    
                        54      JUMP_ABSOLUTE                   2 (to 4)
                        56      LOAD_CONST                      2: '<>'
                        58      RETURN_VALUE                    
                'AngleAddr.addr_spec'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'AngleAddr'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'angle-addr'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> local_part
                16      LOAD_CONST                      3: 'AngleAddr.local_part'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: local_part
                24      LOAD_NAME                       4: property
                26      LOAD_CONST                      4: <CODE> domain
                28      LOAD_CONST                      5: 'AngleAddr.domain'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: domain
                36      LOAD_NAME                       4: property
                38      LOAD_CONST                      6: <CODE> route
                40      LOAD_CONST                      7: 'AngleAddr.route'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      7: route
                48      LOAD_NAME                       4: property
                50      LOAD_CONST                      8: <CODE> addr_spec
                52      LOAD_CONST                      9: 'AngleAddr.addr_spec'
                54      MAKE_FUNCTION                   0
                56      CALL_FUNCTION                   1
                58      STORE_NAME                      8: addr_spec
                60      LOAD_CONST                      10: None
                62      RETURN_VALUE                    
        'AngleAddr'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: ObsRoute
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'domains'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ObsRoute'
                'obs-route'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: domains
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: email/_header_value_parser.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'token_type'
                                'domain'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                'domain'
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        10 (to 26)
                                6       STORE_FAST                      1: x
                                8       LOAD_FAST                       1: x
                                10      LOAD_ATTR                       0: token_type
                                12      LOAD_CONST                      0: 'domain'
                                14      COMPARE_OP                      2 (==)
                                16      POP_JUMP_IF_FALSE               2 (to 4)
                                18      LOAD_FAST                       1: x
                                20      LOAD_ATTR                       1: domain
                                22      LIST_APPEND                     2
                                24      JUMP_ABSOLUTE                   2 (to 4)
                                26      RETURN_VALUE                    
                        'ObsRoute.domains.<locals>.<listcomp>'
                    [Disassembly]
                        0       LOAD_CONST                      1: <CODE> <listcomp>
                        2       LOAD_CONST                      2: 'ObsRoute.domains.<locals>.<listcomp>'
                        4       MAKE_FUNCTION                   0
                        6       LOAD_FAST                       0: self
                        8       GET_ITER                        
                        10      CALL_FUNCTION                   1
                        12      RETURN_VALUE                    
                'ObsRoute.domains'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ObsRoute'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'obs-route'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> domains
                16      LOAD_CONST                      3: 'ObsRoute.domains'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: domains
                24      LOAD_CONST                      4: None
                26      RETURN_VALUE                    
        'ObsRoute'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Mailbox
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'display_name'
                'local_part'
                'domain'
                'route'
                'addr_spec'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Mailbox'
                'mailbox'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: display_name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'display_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'name-addr'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: token_type
                        8       LOAD_CONST                      2: 'name-addr'
                        10      COMPARE_OP                      2 (==)
                        12      POP_JUMP_IF_FALSE               12 (to 24)
                        14      LOAD_FAST                       0: self
                        16      LOAD_CONST                      1: 0
                        18      BINARY_SUBSCR                   
                        20      LOAD_ATTR                       1: display_name
                        22      RETURN_VALUE                    
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                'Mailbox.display_name'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: local_part
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'local_part'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: local_part
                        8       RETURN_VALUE                    
                'Mailbox.local_part'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: domain
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'domain'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: domain
                        8       RETURN_VALUE                    
                'Mailbox.domain'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: route
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'route'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'name-addr'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: token_type
                        8       LOAD_CONST                      2: 'name-addr'
                        10      COMPARE_OP                      2 (==)
                        12      POP_JUMP_IF_FALSE               12 (to 24)
                        14      LOAD_FAST                       0: self
                        16      LOAD_CONST                      1: 0
                        18      BINARY_SUBSCR                   
                        20      LOAD_ATTR                       1: route
                        22      RETURN_VALUE                    
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                'Mailbox.route'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: addr_spec
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'addr_spec'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: addr_spec
                        8       RETURN_VALUE                    
                'Mailbox.addr_spec'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Mailbox'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'mailbox'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> display_name
                16      LOAD_CONST                      3: 'Mailbox.display_name'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: display_name
                24      LOAD_NAME                       4: property
                26      LOAD_CONST                      4: <CODE> local_part
                28      LOAD_CONST                      5: 'Mailbox.local_part'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      6: local_part
                36      LOAD_NAME                       4: property
                38      LOAD_CONST                      6: <CODE> domain
                40      LOAD_CONST                      7: 'Mailbox.domain'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      7: domain
                48      LOAD_NAME                       4: property
                50      LOAD_CONST                      8: <CODE> route
                52      LOAD_CONST                      9: 'Mailbox.route'
                54      MAKE_FUNCTION                   0
                56      CALL_FUNCTION                   1
                58      STORE_NAME                      8: route
                60      LOAD_NAME                       4: property
                62      LOAD_CONST                      10: <CODE> addr_spec
                64      LOAD_CONST                      11: 'Mailbox.addr_spec'
                66      MAKE_FUNCTION                   0
                68      CALL_FUNCTION                   1
                70      STORE_NAME                      9: addr_spec
                72      LOAD_CONST                      12: None
                74      RETURN_VALUE                    
        'Mailbox'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: InvalidMailbox
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'display_name'
                'local_part'
                'domain'
                'route'
                'addr_spec'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'InvalidMailbox'
                'invalid-mailbox'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: display_name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'InvalidMailbox.display_name'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'InvalidMailbox'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'invalid-mailbox'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> display_name
                16      LOAD_CONST                      3: 'InvalidMailbox.display_name'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: display_name
                24      LOAD_NAME                       5: display_name
                26      DUP_TOP                         
                28      STORE_NAME                      6: local_part
                30      DUP_TOP                         
                32      STORE_NAME                      7: domain
                34      DUP_TOP                         
                36      STORE_NAME                      8: route
                38      STORE_NAME                      9: addr_spec
                40      LOAD_CONST                      4: None
                42      RETURN_VALUE                    
        'InvalidMailbox'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Domain
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
                'property'
                'domain'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'Domain'
                'domain'
                False
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: domain
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'join'
                        'super'
                        'value'
                        'split'
                    [Var Names]
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        ''
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_METHOD                     0: join
                        4       LOAD_GLOBAL                     1: super
                        6       CALL_FUNCTION                   0
                        8       LOAD_ATTR                       2: value
                        10      LOAD_METHOD                     3: split
                        12      CALL_METHOD                     0
                        14      CALL_METHOD                     1
                        16      RETURN_VALUE                    
                'Domain.domain'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Domain'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'domain'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_NAME                       5: property
                18      LOAD_CLOSURE                    0: __class__
                20      BUILD_TUPLE                     1
                22      LOAD_CONST                      3: <CODE> domain
                24      LOAD_CONST                      4: 'Domain.domain'
                26      MAKE_FUNCTION                   8
                28      CALL_FUNCTION                   1
                30      STORE_NAME                      6: domain
                32      LOAD_CLOSURE                    0: __class__
                34      DUP_TOP                         
                36      STORE_NAME                      7: __classcell__
                38      RETURN_VALUE                    
        'Domain'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: DotAtom
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'DotAtom'
                'dot-atom'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'DotAtom'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'dot-atom'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'DotAtom'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: DotAtomText
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'DotAtomText'
                'dot-atom-text'
                True
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'DotAtomText'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'dot-atom-text'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: True
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_CONST                      3: None
                18      RETURN_VALUE                    
        'DotAtomText'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: NoFoldLiteral
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'NoFoldLiteral'
                'no-fold-literal'
                False
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'NoFoldLiteral'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'no-fold-literal'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_CONST                      3: None
                18      RETURN_VALUE                    
        'NoFoldLiteral'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: AddrSpec
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
                'property'
                'local_part'
                'domain'
                'value'
                'addr_spec'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'AddrSpec'
                'addr-spec'
                False
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: local_part
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'local_part'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: local_part
                        8       RETURN_VALUE                    
                'AddrSpec.local_part'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: domain
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'len'
                        'domain'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        3
                        -1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: len
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_CONST                      1: 3
                        8       COMPARE_OP                      0 (<)
                        10      POP_JUMP_IF_FALSE               8 (to 16)
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                        16      LOAD_FAST                       0: self
                        18      LOAD_CONST                      2: -1
                        20      BINARY_SUBSCR                   
                        22      LOAD_ATTR                       1: domain
                        24      RETURN_VALUE                    
                'AddrSpec.domain'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'len'
                        'value'
                        'rstrip'
                        'lstrip'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        3
                        0
                        1
                        2
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: len
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_CONST                      1: 3
                        8       COMPARE_OP                      0 (<)
                        10      POP_JUMP_IF_FALSE               11 (to 22)
                        12      LOAD_FAST                       0: self
                        14      LOAD_CONST                      2: 0
                        16      BINARY_SUBSCR                   
                        18      LOAD_ATTR                       1: value
                        20      RETURN_VALUE                    
                        22      LOAD_FAST                       0: self
                        24      LOAD_CONST                      2: 0
                        26      BINARY_SUBSCR                   
                        28      LOAD_ATTR                       1: value
                        30      LOAD_METHOD                     2: rstrip
                        32      CALL_METHOD                     0
                        34      LOAD_FAST                       0: self
                        36      LOAD_CONST                      3: 1
                        38      BINARY_SUBSCR                   
                        40      LOAD_ATTR                       1: value
                        42      BINARY_ADD                      
                        44      LOAD_FAST                       0: self
                        46      LOAD_CONST                      4: 2
                        48      BINARY_SUBSCR                   
                        50      LOAD_ATTR                       1: value
                        52      LOAD_METHOD                     3: lstrip
                        54      CALL_METHOD                     0
                        56      BINARY_ADD                      
                        58      RETURN_VALUE                    
                'AddrSpec.value'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: addr_spec
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'set'
                        'local_part'
                        'len'
                        'DOT_ATOM_ENDS'
                        'quote_string'
                        'domain'
                    [Var Names]
                        'self'
                        'nameset'
                        'lp'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '@'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: set
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: local_part
                        6       CALL_FUNCTION                   1
                        8       STORE_FAST                      1: nameset
                        10      LOAD_GLOBAL                     2: len
                        12      LOAD_FAST                       1: nameset
                        14      CALL_FUNCTION                   1
                        16      LOAD_GLOBAL                     2: len
                        18      LOAD_FAST                       1: nameset
                        20      LOAD_GLOBAL                     3: DOT_ATOM_ENDS
                        22      BINARY_SUBTRACT                 
                        24      CALL_FUNCTION                   1
                        26      COMPARE_OP                      4 (>)
                        28      POP_JUMP_IF_FALSE               21 (to 42)
                        30      LOAD_GLOBAL                     4: quote_string
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       1: local_part
                        36      CALL_FUNCTION                   1
                        38      STORE_FAST                      2: lp
                        40      JUMP_FORWARD                    3 (to 48)
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       1: local_part
                        46      STORE_FAST                      2: lp
                        48      LOAD_FAST                       0: self
                        50      LOAD_ATTR                       5: domain
                        52      LOAD_CONST                      0: None
                        54      IS_OP                           1 (is not)
                        56      POP_JUMP_IF_FALSE               36 (to 72)
                        58      LOAD_FAST                       2: lp
                        60      LOAD_CONST                      1: '@'
                        62      BINARY_ADD                      
                        64      LOAD_FAST                       0: self
                        66      LOAD_ATTR                       5: domain
                        68      BINARY_ADD                      
                        70      RETURN_VALUE                    
                        72      LOAD_FAST                       2: lp
                        74      RETURN_VALUE                    
                'AddrSpec.addr_spec'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'AddrSpec'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'addr-spec'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_NAME                       5: property
                18      LOAD_CONST                      3: <CODE> local_part
                20      LOAD_CONST                      4: 'AddrSpec.local_part'
                22      MAKE_FUNCTION                   0
                24      CALL_FUNCTION                   1
                26      STORE_NAME                      6: local_part
                28      LOAD_NAME                       5: property
                30      LOAD_CONST                      5: <CODE> domain
                32      LOAD_CONST                      6: 'AddrSpec.domain'
                34      MAKE_FUNCTION                   0
                36      CALL_FUNCTION                   1
                38      STORE_NAME                      7: domain
                40      LOAD_NAME                       5: property
                42      LOAD_CONST                      7: <CODE> value
                44      LOAD_CONST                      8: 'AddrSpec.value'
                46      MAKE_FUNCTION                   0
                48      CALL_FUNCTION                   1
                50      STORE_NAME                      8: value
                52      LOAD_NAME                       5: property
                54      LOAD_CONST                      9: <CODE> addr_spec
                56      LOAD_CONST                      10: 'AddrSpec.addr_spec'
                58      MAKE_FUNCTION                   0
                60      CALL_FUNCTION                   1
                62      STORE_NAME                      9: addr_spec
                64      LOAD_CONST                      11: None
                66      RETURN_VALUE                    
        'AddrSpec'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: ObsLocalPart
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ObsLocalPart'
                'obs-local-part'
                False
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ObsLocalPart'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'obs-local-part'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_CONST                      3: None
                18      RETURN_VALUE                    
        'ObsLocalPart'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: DisplayName
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'ew_combine_allowed'
                'property'
                'display_name'
                'value'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'DisplayName'
                'display-name'
                False
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: display_name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'TokenList'
                        'len'
                        'value'
                        'token_type'
                        'pop'
                    [Var Names]
                        'self'
                        'res'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'cfws'
                        1
                        -1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: TokenList
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: res
                        8       LOAD_GLOBAL                     1: len
                        10      LOAD_FAST                       1: res
                        12      CALL_FUNCTION                   1
                        14      LOAD_CONST                      1: 0
                        16      COMPARE_OP                      2 (==)
                        18      POP_JUMP_IF_FALSE               13 (to 26)
                        20      LOAD_FAST                       1: res
                        22      LOAD_ATTR                       2: value
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       1: res
                        28      LOAD_CONST                      1: 0
                        30      BINARY_SUBSCR                   
                        32      LOAD_ATTR                       3: token_type
                        34      LOAD_CONST                      2: 'cfws'
                        36      COMPARE_OP                      2 (==)
                        38      POP_JUMP_IF_FALSE               26 (to 52)
                        40      LOAD_FAST                       1: res
                        42      LOAD_METHOD                     4: pop
                        44      LOAD_CONST                      1: 0
                        46      CALL_METHOD                     1
                        48      POP_TOP                         
                        50      JUMP_FORWARD                    21 (to 94)
                        52      LOAD_FAST                       1: res
                        54      LOAD_CONST                      1: 0
                        56      BINARY_SUBSCR                   
                        58      LOAD_CONST                      1: 0
                        60      BINARY_SUBSCR                   
                        62      LOAD_ATTR                       3: token_type
                        64      LOAD_CONST                      2: 'cfws'
                        66      COMPARE_OP                      2 (==)
                        68      POP_JUMP_IF_FALSE               47 (to 94)
                        70      LOAD_GLOBAL                     0: TokenList
                        72      LOAD_FAST                       1: res
                        74      LOAD_CONST                      1: 0
                        76      BINARY_SUBSCR                   
                        78      LOAD_CONST                      3: 1
                        80      LOAD_CONST                      0: None
                        82      BUILD_SLICE                     2
                        84      BINARY_SUBSCR                   
                        86      CALL_FUNCTION                   1
                        88      LOAD_FAST                       1: res
                        90      LOAD_CONST                      1: 0
                        92      STORE_SUBSCR                    
                        94      LOAD_FAST                       1: res
                        96      LOAD_CONST                      4: -1
                        98      BINARY_SUBSCR                   
                        100     LOAD_ATTR                       3: token_type
                        102     LOAD_CONST                      2: 'cfws'
                        104     COMPARE_OP                      2 (==)
                        106     POP_JUMP_IF_FALSE               61 (to 122)
                        108     LOAD_FAST                       1: res
                        110     LOAD_METHOD                     4: pop
                        112     CALL_METHOD                     0
                        114     POP_TOP                         
                        116     LOAD_FAST                       1: res
                        118     LOAD_ATTR                       2: value
                        120     RETURN_VALUE                    
                        122     LOAD_FAST                       1: res
                        124     LOAD_CONST                      4: -1
                        126     BINARY_SUBSCR                   
                        128     LOAD_CONST                      4: -1
                        130     BINARY_SUBSCR                   
                        132     LOAD_ATTR                       3: token_type
                        134     LOAD_CONST                      2: 'cfws'
                        136     COMPARE_OP                      2 (==)
                        138     POP_JUMP_IF_FALSE               82 (to 164)
                        140     LOAD_GLOBAL                     0: TokenList
                        142     LOAD_FAST                       1: res
                        144     LOAD_CONST                      4: -1
                        146     BINARY_SUBSCR                   
                        148     LOAD_CONST                      0: None
                        150     LOAD_CONST                      4: -1
                        152     BUILD_SLICE                     2
                        154     BINARY_SUBSCR                   
                        156     CALL_FUNCTION                   1
                        158     LOAD_FAST                       1: res
                        160     LOAD_CONST                      4: -1
                        162     STORE_SUBSCR                    
                        164     LOAD_FAST                       1: res
                        166     LOAD_ATTR                       2: value
                        168     RETURN_VALUE                    
                'DisplayName.display_name'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'defects'
                        'token_type'
                        'len'
                        'quote_string'
                        'display_name'
                        'super'
                        'value'
                    [Var Names]
                        'self'
                        'quote'
                        'x'
                        'pre'
                        'post'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        True
                        'quoted-string'
                        0
                        ''
                        'cfws'
                        ' '
                        -1
                    [Disassembly]
                        0       LOAD_CONST                      1: False
                        2       STORE_FAST                      1: quote
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       0: defects
                        8       POP_JUMP_IF_FALSE               8 (to 16)
                        10      LOAD_CONST                      2: True
                        12      STORE_FAST                      1: quote
                        14      JUMP_FORWARD                    12 (to 40)
                        16      LOAD_FAST                       0: self
                        18      GET_ITER                        
                        20      FOR_ITER                        9 (to 40)
                        22      STORE_FAST                      2: x
                        24      LOAD_FAST                       2: x
                        26      LOAD_ATTR                       1: token_type
                        28      LOAD_CONST                      3: 'quoted-string'
                        30      COMPARE_OP                      2 (==)
                        32      POP_JUMP_IF_FALSE               19 (to 38)
                        34      LOAD_CONST                      2: True
                        36      STORE_FAST                      1: quote
                        38      JUMP_ABSOLUTE                   10 (to 20)
                        40      LOAD_GLOBAL                     2: len
                        42      LOAD_FAST                       0: self
                        44      CALL_FUNCTION                   1
                        46      LOAD_CONST                      4: 0
                        48      COMPARE_OP                      3 (!=)
                        50      POP_JUMP_IF_FALSE               77 (to 154)
                        52      LOAD_FAST                       1: quote
                        54      POP_JUMP_IF_FALSE               77 (to 154)
                        56      LOAD_CONST                      5: ''
                        58      DUP_TOP                         
                        60      STORE_FAST                      3: pre
                        62      STORE_FAST                      4: post
                        64      LOAD_FAST                       0: self
                        66      LOAD_CONST                      4: 0
                        68      BINARY_SUBSCR                   
                        70      LOAD_ATTR                       1: token_type
                        72      LOAD_CONST                      6: 'cfws'
                        74      COMPARE_OP                      2 (==)
                        76      POP_JUMP_IF_TRUE                48 (to 96)
                        78      LOAD_FAST                       0: self
                        80      LOAD_CONST                      4: 0
                        82      BINARY_SUBSCR                   
                        84      LOAD_CONST                      4: 0
                        86      BINARY_SUBSCR                   
                        88      LOAD_ATTR                       1: token_type
                        90      LOAD_CONST                      6: 'cfws'
                        92      COMPARE_OP                      2 (==)
                        94      POP_JUMP_IF_FALSE               50 (to 100)
                        96      LOAD_CONST                      7: ' '
                        98      STORE_FAST                      3: pre
                        100     LOAD_FAST                       0: self
                        102     LOAD_CONST                      8: -1
                        104     BINARY_SUBSCR                   
                        106     LOAD_ATTR                       1: token_type
                        108     LOAD_CONST                      6: 'cfws'
                        110     COMPARE_OP                      2 (==)
                        112     POP_JUMP_IF_TRUE                66 (to 132)
                        114     LOAD_FAST                       0: self
                        116     LOAD_CONST                      8: -1
                        118     BINARY_SUBSCR                   
                        120     LOAD_CONST                      8: -1
                        122     BINARY_SUBSCR                   
                        124     LOAD_ATTR                       1: token_type
                        126     LOAD_CONST                      6: 'cfws'
                        128     COMPARE_OP                      2 (==)
                        130     POP_JUMP_IF_FALSE               68 (to 136)
                        132     LOAD_CONST                      7: ' '
                        134     STORE_FAST                      4: post
                        136     LOAD_FAST                       3: pre
                        138     LOAD_GLOBAL                     3: quote_string
                        140     LOAD_FAST                       0: self
                        142     LOAD_ATTR                       4: display_name
                        144     CALL_FUNCTION                   1
                        146     BINARY_ADD                      
                        148     LOAD_FAST                       4: post
                        150     BINARY_ADD                      
                        152     RETURN_VALUE                    
                        154     LOAD_GLOBAL                     5: super
                        156     CALL_FUNCTION                   0
                        158     LOAD_ATTR                       6: value
                        160     RETURN_VALUE                    
                'DisplayName.value'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'DisplayName'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'display-name'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: ew_combine_allowed
                16      LOAD_NAME                       5: property
                18      LOAD_CONST                      3: <CODE> display_name
                20      LOAD_CONST                      4: 'DisplayName.display_name'
                22      MAKE_FUNCTION                   0
                24      CALL_FUNCTION                   1
                26      STORE_NAME                      6: display_name
                28      LOAD_NAME                       5: property
                30      LOAD_CLOSURE                    0: __class__
                32      BUILD_TUPLE                     1
                34      LOAD_CONST                      5: <CODE> value
                36      LOAD_CONST                      6: 'DisplayName.value'
                38      MAKE_FUNCTION                   8
                40      CALL_FUNCTION                   1
                42      STORE_NAME                      7: value
                44      LOAD_CLOSURE                    0: __class__
                46      DUP_TOP                         
                48      STORE_NAME                      8: __classcell__
                50      RETURN_VALUE                    
        'DisplayName'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: LocalPart
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
                'property'
                'value'
                'local_part'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'LocalPart'
                'local-part'
                False
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'quoted_value'
                        'value'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'quoted-string'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       LOAD_ATTR                       0: token_type
                        8       LOAD_CONST                      2: 'quoted-string'
                        10      COMPARE_OP                      2 (==)
                        12      POP_JUMP_IF_FALSE               12 (to 24)
                        14      LOAD_FAST                       0: self
                        16      LOAD_CONST                      1: 0
                        18      BINARY_SUBSCR                   
                        20      LOAD_ATTR                       1: quoted_value
                        22      RETURN_VALUE                    
                        24      LOAD_FAST                       0: self
                        26      LOAD_CONST                      1: 0
                        28      BINARY_SUBSCR                   
                        30      LOAD_ATTR                       2: value
                        32      RETURN_VALUE                    
                'LocalPart.value'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: local_part
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'DOT'
                        'token_type'
                        'TokenList'
                        'isinstance'
                        'append'
                        'value'
                    [Var Names]
                        'self'
                        'res'
                        'last'
                        'last_is_tl'
                        'tok'
                        'is_tl'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        0
                        'cfws'
                        'dot'
                        -1
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: DOT
                        2       BUILD_LIST                      1
                        4       STORE_FAST                      1: res
                        6       LOAD_GLOBAL                     0: DOT
                        8       STORE_FAST                      2: last
                        10      LOAD_CONST                      1: False
                        12      STORE_FAST                      3: last_is_tl
                        14      LOAD_FAST                       0: self
                        16      LOAD_CONST                      2: 0
                        18      BINARY_SUBSCR                   
                        20      LOAD_GLOBAL                     0: DOT
                        22      BUILD_LIST                      1
                        24      BINARY_ADD                      
                        26      GET_ITER                        
                        28      FOR_ITER                        74 (to 178)
                        30      STORE_FAST                      4: tok
                        32      LOAD_FAST                       4: tok
                        34      LOAD_ATTR                       1: token_type
                        36      LOAD_CONST                      3: 'cfws'
                        38      COMPARE_OP                      2 (==)
                        40      POP_JUMP_IF_FALSE               22 (to 44)
                        42      JUMP_ABSOLUTE                   14 (to 28)
                        44      LOAD_FAST                       3: last_is_tl
                        46      POP_JUMP_IF_FALSE               46 (to 92)
                        48      LOAD_FAST                       4: tok
                        50      LOAD_ATTR                       1: token_type
                        52      LOAD_CONST                      4: 'dot'
                        54      COMPARE_OP                      2 (==)
                        56      POP_JUMP_IF_FALSE               46 (to 92)
                        58      LOAD_FAST                       2: last
                        60      LOAD_CONST                      5: -1
                        62      BINARY_SUBSCR                   
                        64      LOAD_ATTR                       1: token_type
                        66      LOAD_CONST                      3: 'cfws'
                        68      COMPARE_OP                      2 (==)
                        70      POP_JUMP_IF_FALSE               46 (to 92)
                        72      LOAD_GLOBAL                     2: TokenList
                        74      LOAD_FAST                       2: last
                        76      LOAD_CONST                      0: None
                        78      LOAD_CONST                      5: -1
                        80      BUILD_SLICE                     2
                        82      BINARY_SUBSCR                   
                        84      CALL_FUNCTION                   1
                        86      LOAD_FAST                       1: res
                        88      LOAD_CONST                      5: -1
                        90      STORE_SUBSCR                    
                        92      LOAD_GLOBAL                     3: isinstance
                        94      LOAD_FAST                       4: tok
                        96      LOAD_GLOBAL                     2: TokenList
                        98      CALL_FUNCTION                   2
                        100     STORE_FAST                      5: is_tl
                        102     LOAD_FAST                       5: is_tl
                        104     POP_JUMP_IF_FALSE               77 (to 154)
                        106     LOAD_FAST                       2: last
                        108     LOAD_ATTR                       1: token_type
                        110     LOAD_CONST                      4: 'dot'
                        112     COMPARE_OP                      2 (==)
                        114     POP_JUMP_IF_FALSE               77 (to 154)
                        116     LOAD_FAST                       4: tok
                        118     LOAD_CONST                      2: 0
                        120     BINARY_SUBSCR                   
                        122     LOAD_ATTR                       1: token_type
                        124     LOAD_CONST                      3: 'cfws'
                        126     COMPARE_OP                      2 (==)
                        128     POP_JUMP_IF_FALSE               77 (to 154)
                        130     LOAD_FAST                       1: res
                        132     LOAD_METHOD                     4: append
                        134     LOAD_GLOBAL                     2: TokenList
                        136     LOAD_FAST                       4: tok
                        138     LOAD_CONST                      6: 1
                        140     LOAD_CONST                      0: None
                        142     BUILD_SLICE                     2
                        144     BINARY_SUBSCR                   
                        146     CALL_FUNCTION                   1
                        148     CALL_METHOD                     1
                        150     POP_TOP                         
                        152     JUMP_FORWARD                    5 (to 164)
                        154     LOAD_FAST                       1: res
                        156     LOAD_METHOD                     4: append
                        158     LOAD_FAST                       4: tok
                        160     CALL_METHOD                     1
                        162     POP_TOP                         
                        164     LOAD_FAST                       1: res
                        166     LOAD_CONST                      5: -1
                        168     BINARY_SUBSCR                   
                        170     STORE_FAST                      2: last
                        172     LOAD_FAST                       5: is_tl
                        174     STORE_FAST                      3: last_is_tl
                        176     JUMP_ABSOLUTE                   14 (to 28)
                        178     LOAD_GLOBAL                     2: TokenList
                        180     LOAD_FAST                       1: res
                        182     LOAD_CONST                      6: 1
                        184     LOAD_CONST                      5: -1
                        186     BUILD_SLICE                     2
                        188     BINARY_SUBSCR                   
                        190     CALL_FUNCTION                   1
                        192     STORE_FAST                      1: res
                        194     LOAD_FAST                       1: res
                        196     LOAD_ATTR                       5: value
                        198     RETURN_VALUE                    
                'LocalPart.local_part'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'LocalPart'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'local-part'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_NAME                       5: property
                18      LOAD_CONST                      3: <CODE> value
                20      LOAD_CONST                      4: 'LocalPart.value'
                22      MAKE_FUNCTION                   0
                24      CALL_FUNCTION                   1
                26      STORE_NAME                      6: value
                28      LOAD_NAME                       5: property
                30      LOAD_CONST                      5: <CODE> local_part
                32      LOAD_CONST                      6: 'LocalPart.local_part'
                34      MAKE_FUNCTION                   0
                36      CALL_FUNCTION                   1
                38      STORE_NAME                      7: local_part
                40      LOAD_CONST                      7: None
                42      RETURN_VALUE                    
        'LocalPart'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: DomainLiteral
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
                'property'
                'domain'
                'ip'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'DomainLiteral'
                'domain-literal'
                False
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: domain
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'join'
                        'super'
                        'value'
                        'split'
                    [Var Names]
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        ''
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       LOAD_METHOD                     0: join
                        4       LOAD_GLOBAL                     1: super
                        6       CALL_FUNCTION                   0
                        8       LOAD_ATTR                       2: value
                        10      LOAD_METHOD                     3: split
                        12      CALL_METHOD                     0
                        14      CALL_METHOD                     1
                        16      RETURN_VALUE                    
                'DomainLiteral.domain'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: ip
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'value'
                    [Var Names]
                        'self'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'ptext'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       GET_ITER                        
                        4       FOR_ITER                        12 (to 30)
                        6       STORE_FAST                      1: x
                        8       LOAD_FAST                       1: x
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_CONST                      1: 'ptext'
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               14 (to 28)
                        18      LOAD_FAST                       1: x
                        20      LOAD_ATTR                       1: value
                        22      ROT_TWO                         
                        24      POP_TOP                         
                        26      RETURN_VALUE                    
                        28      JUMP_ABSOLUTE                   2 (to 4)
                        30      LOAD_CONST                      0: None
                        32      RETURN_VALUE                    
                'DomainLiteral.ip'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'DomainLiteral'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'domain-literal'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_NAME                       5: property
                18      LOAD_CLOSURE                    0: __class__
                20      BUILD_TUPLE                     1
                22      LOAD_CONST                      3: <CODE> domain
                24      LOAD_CONST                      4: 'DomainLiteral.domain'
                26      MAKE_FUNCTION                   8
                28      CALL_FUNCTION                   1
                30      STORE_NAME                      6: domain
                32      LOAD_NAME                       5: property
                34      LOAD_CONST                      5: <CODE> ip
                36      LOAD_CONST                      6: 'DomainLiteral.ip'
                38      MAKE_FUNCTION                   0
                40      CALL_FUNCTION                   1
                42      STORE_NAME                      7: ip
                44      LOAD_CLOSURE                    0: __class__
                46      DUP_TOP                         
                48      STORE_NAME                      8: __classcell__
                50      RETURN_VALUE                    
        'DomainLiteral'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: MIMEVersion
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'major'
                'minor'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'MIMEVersion'
                'mime-version'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'MIMEVersion'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'mime-version'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      STORE_NAME                      4: major
                16      LOAD_CONST                      2: None
                18      STORE_NAME                      5: minor
                20      LOAD_CONST                      2: None
                22      RETURN_VALUE                    
        'MIMEVersion'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Parameter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'sectioned'
                'extended'
                'charset'
                'property'
                'section_number'
                'param_value'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Parameter'
                'parameter'
                False
                'us-ascii'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: section_number
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'sectioned'
                        'number'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: sectioned
                        4       POP_JUMP_IF_FALSE               8 (to 16)
                        6       LOAD_FAST                       0: self
                        8       LOAD_CONST                      1: 1
                        10      BINARY_SUBSCR                   
                        12      LOAD_ATTR                       1: number
                        14      RETURN_VALUE                    
                        16      LOAD_CONST                      2: 0
                        18      RETURN_VALUE                    
                'Parameter.section_number'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: param_value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'stripped_value'
                    [Var Names]
                        'self'
                        'token'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'value'
                        'quoted-string'
                        'bare-quoted-string'
                        ''
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       GET_ITER                        
                        4       FOR_ITER                        46 (to 98)
                        6       STORE_FAST                      1: token
                        8       LOAD_FAST                       1: token
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_CONST                      1: 'value'
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               14 (to 28)
                        18      LOAD_FAST                       1: token
                        20      LOAD_ATTR                       1: stripped_value
                        22      ROT_TWO                         
                        24      POP_TOP                         
                        26      RETURN_VALUE                    
                        28      LOAD_FAST                       1: token
                        30      LOAD_ATTR                       0: token_type
                        32      LOAD_CONST                      2: 'quoted-string'
                        34      COMPARE_OP                      2 (==)
                        36      POP_JUMP_IF_FALSE               48 (to 96)
                        38      LOAD_FAST                       1: token
                        40      GET_ITER                        
                        42      FOR_ITER                        26 (to 96)
                        44      STORE_FAST                      1: token
                        46      LOAD_FAST                       1: token
                        48      LOAD_ATTR                       0: token_type
                        50      LOAD_CONST                      3: 'bare-quoted-string'
                        52      COMPARE_OP                      2 (==)
                        54      POP_JUMP_IF_FALSE               47 (to 94)
                        56      LOAD_FAST                       1: token
                        58      GET_ITER                        
                        60      FOR_ITER                        16 (to 94)
                        62      STORE_FAST                      1: token
                        64      LOAD_FAST                       1: token
                        66      LOAD_ATTR                       0: token_type
                        68      LOAD_CONST                      1: 'value'
                        70      COMPARE_OP                      2 (==)
                        72      POP_JUMP_IF_FALSE               46 (to 92)
                        74      LOAD_FAST                       1: token
                        76      LOAD_ATTR                       1: stripped_value
                        78      ROT_TWO                         
                        80      POP_TOP                         
                        82      ROT_TWO                         
                        84      POP_TOP                         
                        86      ROT_TWO                         
                        88      POP_TOP                         
                        90      RETURN_VALUE                    
                        92      JUMP_ABSOLUTE                   30 (to 60)
                        94      JUMP_ABSOLUTE                   21 (to 42)
                        96      JUMP_ABSOLUTE                   2 (to 4)
                        98      LOAD_CONST                      4: ''
                        100     RETURN_VALUE                    
                'Parameter.param_value'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Parameter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'parameter'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: sectioned
                16      LOAD_CONST                      2: False
                18      STORE_NAME                      5: extended
                20      LOAD_CONST                      3: 'us-ascii'
                22      STORE_NAME                      6: charset
                24      LOAD_NAME                       7: property
                26      LOAD_CONST                      4: <CODE> section_number
                28      LOAD_CONST                      5: 'Parameter.section_number'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      8: section_number
                36      LOAD_NAME                       7: property
                38      LOAD_CONST                      6: <CODE> param_value
                40      LOAD_CONST                      7: 'Parameter.param_value'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      9: param_value
                48      LOAD_CONST                      8: None
                50      RETURN_VALUE                    
        'Parameter'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: InvalidParameter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'InvalidParameter'
                'invalid-parameter'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'InvalidParameter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'invalid-parameter'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'InvalidParameter'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Attribute
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'stripped_value'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Attribute'
                'attribute'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: stripped_value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'endswith'
                        'value'
                    [Var Names]
                        'self'
                        'token'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'attrtext'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       GET_ITER                        
                        4       FOR_ITER                        13 (to 32)
                        6       STORE_FAST                      1: token
                        8       LOAD_FAST                       1: token
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_METHOD                     1: endswith
                        14      LOAD_CONST                      1: 'attrtext'
                        16      CALL_METHOD                     1
                        18      POP_JUMP_IF_FALSE               15 (to 30)
                        20      LOAD_FAST                       1: token
                        22      LOAD_ATTR                       2: value
                        24      ROT_TWO                         
                        26      POP_TOP                         
                        28      RETURN_VALUE                    
                        30      JUMP_ABSOLUTE                   2 (to 4)
                        32      LOAD_CONST                      0: None
                        34      RETURN_VALUE                    
                'Attribute.stripped_value'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Attribute'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'attribute'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> stripped_value
                16      LOAD_CONST                      3: 'Attribute.stripped_value'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: stripped_value
                24      LOAD_CONST                      4: None
                26      RETURN_VALUE                    
        'Attribute'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Section
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'number'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Section'
                'section'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Section'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'section'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      STORE_NAME                      4: number
                16      LOAD_CONST                      2: None
                18      RETURN_VALUE                    
        'Section'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Value
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'property'
                'stripped_value'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Value'
                'value'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: stripped_value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'token_type'
                        'endswith'
                        'stripped_value'
                        'value'
                    [Var Names]
                        'self'
                        'token'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'cfws'
                        1
                        (
                            'quoted-string'
                            'attribute'
                            'extended-attribute'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       STORE_FAST                      1: token
                        8       LOAD_FAST                       1: token
                        10      LOAD_ATTR                       0: token_type
                        12      LOAD_CONST                      2: 'cfws'
                        14      COMPARE_OP                      2 (==)
                        16      POP_JUMP_IF_FALSE               13 (to 26)
                        18      LOAD_FAST                       0: self
                        20      LOAD_CONST                      3: 1
                        22      BINARY_SUBSCR                   
                        24      STORE_FAST                      1: token
                        26      LOAD_FAST                       1: token
                        28      LOAD_ATTR                       0: token_type
                        30      LOAD_METHOD                     1: endswith
                        32      LOAD_CONST                      4: ('quoted-string', 'attribute', 'extended-attribute')
                        34      CALL_METHOD                     1
                        36      POP_JUMP_IF_FALSE               22 (to 44)
                        38      LOAD_FAST                       1: token
                        40      LOAD_ATTR                       2: stripped_value
                        42      RETURN_VALUE                    
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       3: value
                        48      RETURN_VALUE                    
                'Value.stripped_value'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Value'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'value'
                10      STORE_NAME                      3: token_type
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> stripped_value
                16      LOAD_CONST                      3: 'Value.stripped_value'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: stripped_value
                24      LOAD_CONST                      4: None
                26      RETURN_VALUE                    
        'Value'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: MimeParameters
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'syntactic_break'
                'property'
                'params'
                '__str__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'MimeParameters'
                'mime-parameters'
                False
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: params
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 12
                    Stack Size: 11
                    Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'token_type'
                        'endswith'
                        'value'
                        'strip'
                        'append'
                        'section_number'
                        'items'
                        'sorted'
                        'itemgetter'
                        'charset'
                        'extended'
                        'len'
                        'defects'
                        'errors'
                        'InvalidHeaderDefect'
                        'param_value'
                        'urllib'
                        'parse'
                        'unquote_to_bytes'
                        'UnicodeEncodeError'
                        'unquote'
                        'decode'
                        'LookupError'
                        'utils'
                        '_has_surrogates'
                        'UndecodableBytesDefect'
                        'join'
                    [Var Names]
                        'self'
                        'params'
                        'token'
                        'name'
                        'parts'
                        'first_param'
                        'charset'
                        'value_parts'
                        'i'
                        'section_number'
                        'param'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'parameter'
                        0
                        'attribute'
                        (
                            'key'
                        )
                        1
                        'duplicate parameter name; duplicate(s) ignored'
                        'duplicate parameter name; duplicate ignored'
                        'inconsistent RFC2231 parameter numbering'
                        'latin-1'
                        (
                            'encoding'
                        )
                        'surrogateescape'
                        'us-ascii'
                        ''
                    [Disassembly]
                        0       GEN_START                       0
                        2       BUILD_MAP                       0
                        4       STORE_FAST                      1: params
                        6       LOAD_FAST                       0: self
                        8       GET_ITER                        
                        10      FOR_ITER                        42 (to 96)
                        12      STORE_FAST                      2: token
                        14      LOAD_FAST                       2: token
                        16      LOAD_ATTR                       0: token_type
                        18      LOAD_METHOD                     1: endswith
                        20      LOAD_CONST                      1: 'parameter'
                        22      CALL_METHOD                     1
                        24      POP_JUMP_IF_TRUE                14 (to 28)
                        26      JUMP_ABSOLUTE                   5 (to 10)
                        28      LOAD_FAST                       2: token
                        30      LOAD_CONST                      2: 0
                        32      BINARY_SUBSCR                   
                        34      LOAD_ATTR                       0: token_type
                        36      LOAD_CONST                      3: 'attribute'
                        38      COMPARE_OP                      3 (!=)
                        40      POP_JUMP_IF_FALSE               22 (to 44)
                        42      JUMP_ABSOLUTE                   5 (to 10)
                        44      LOAD_FAST                       2: token
                        46      LOAD_CONST                      2: 0
                        48      BINARY_SUBSCR                   
                        50      LOAD_ATTR                       2: value
                        52      LOAD_METHOD                     3: strip
                        54      CALL_METHOD                     0
                        56      STORE_FAST                      3: name
                        58      LOAD_FAST                       3: name
                        60      LOAD_FAST                       1: params
                        62      CONTAINS_OP                     1 (not in)
                        64      POP_JUMP_IF_FALSE               37 (to 74)
                        66      BUILD_LIST                      0
                        68      LOAD_FAST                       1: params
                        70      LOAD_FAST                       3: name
                        72      STORE_SUBSCR                    
                        74      LOAD_FAST                       1: params
                        76      LOAD_FAST                       3: name
                        78      BINARY_SUBSCR                   
                        80      LOAD_METHOD                     4: append
                        82      LOAD_FAST                       2: token
                        84      LOAD_ATTR                       5: section_number
                        86      LOAD_FAST                       2: token
                        88      BUILD_TUPLE                     2
                        90      CALL_METHOD                     1
                        92      POP_TOP                         
                        94      JUMP_ABSOLUTE                   5 (to 10)
                        96      LOAD_FAST                       1: params
                        98      LOAD_METHOD                     6: items
                        100     CALL_METHOD                     0
                        102     GET_ITER                        
                        104     FOR_ITER                        184 (to 474)
                        106     UNPACK_SEQUENCE                 2
                        108     STORE_FAST                      3: name
                        110     STORE_FAST                      4: parts
                        112     LOAD_GLOBAL                     7: sorted
                        114     LOAD_FAST                       4: parts
                        116     LOAD_GLOBAL                     8: itemgetter
                        118     LOAD_CONST                      2: 0
                        120     CALL_FUNCTION                   1
                        122     LOAD_CONST                      4: ('key',)
                        124     CALL_FUNCTION_KW                2
                        126     STORE_FAST                      4: parts
                        128     LOAD_FAST                       4: parts
                        130     LOAD_CONST                      2: 0
                        132     BINARY_SUBSCR                   
                        134     LOAD_CONST                      5: 1
                        136     BINARY_SUBSCR                   
                        138     STORE_FAST                      5: first_param
                        140     LOAD_FAST                       5: first_param
                        142     LOAD_ATTR                       9: charset
                        144     STORE_FAST                      6: charset
                        146     LOAD_FAST                       5: first_param
                        148     LOAD_ATTR                       10: extended
                        150     POP_JUMP_IF_TRUE                109 (to 218)
                        152     LOAD_GLOBAL                     11: len
                        154     LOAD_FAST                       4: parts
                        156     CALL_FUNCTION                   1
                        158     LOAD_CONST                      5: 1
                        160     COMPARE_OP                      4 (>)
                        162     POP_JUMP_IF_FALSE               109 (to 218)
                        164     LOAD_FAST                       4: parts
                        166     LOAD_CONST                      5: 1
                        168     BINARY_SUBSCR                   
                        170     LOAD_CONST                      2: 0
                        172     BINARY_SUBSCR                   
                        174     LOAD_CONST                      2: 0
                        176     COMPARE_OP                      2 (==)
                        178     POP_JUMP_IF_FALSE               109 (to 218)
                        180     LOAD_FAST                       4: parts
                        182     LOAD_CONST                      5: 1
                        184     BINARY_SUBSCR                   
                        186     LOAD_CONST                      5: 1
                        188     BINARY_SUBSCR                   
                        190     LOAD_ATTR                       12: defects
                        192     LOAD_METHOD                     4: append
                        194     LOAD_GLOBAL                     13: errors
                        196     LOAD_METHOD                     14: InvalidHeaderDefect
                        198     LOAD_CONST                      6: 'duplicate parameter name; duplicate(s) ignored'
                        200     CALL_METHOD                     1
                        202     CALL_METHOD                     1
                        204     POP_TOP                         
                        206     LOAD_FAST                       4: parts
                        208     LOAD_CONST                      0: None
                        210     LOAD_CONST                      5: 1
                        212     BUILD_SLICE                     2
                        214     BINARY_SUBSCR                   
                        216     STORE_FAST                      4: parts
                        218     BUILD_LIST                      0
                        220     STORE_FAST                      7: value_parts
                        222     LOAD_CONST                      2: 0
                        224     STORE_FAST                      8: i
                        226     LOAD_FAST                       4: parts
                        228     GET_ITER                        
                        230     FOR_ITER                        110 (to 452)
                        232     UNPACK_SEQUENCE                 2
                        234     STORE_FAST                      9: section_number
                        236     STORE_FAST                      10: param
                        238     LOAD_FAST                       9: section_number
                        240     LOAD_FAST                       8: i
                        242     COMPARE_OP                      3 (!=)
                        244     POP_JUMP_IF_FALSE               145 (to 290)
                        246     LOAD_FAST                       10: param
                        248     LOAD_ATTR                       10: extended
                        250     POP_JUMP_IF_TRUE                136 (to 272)
                        252     LOAD_FAST                       10: param
                        254     LOAD_ATTR                       12: defects
                        256     LOAD_METHOD                     4: append
                        258     LOAD_GLOBAL                     13: errors
                        260     LOAD_METHOD                     14: InvalidHeaderDefect
                        262     LOAD_CONST                      7: 'duplicate parameter name; duplicate ignored'
                        264     CALL_METHOD                     1
                        266     CALL_METHOD                     1
                        268     POP_TOP                         
                        270     JUMP_ABSOLUTE                   115 (to 230)
                        272     LOAD_FAST                       10: param
                        274     LOAD_ATTR                       12: defects
                        276     LOAD_METHOD                     4: append
                        278     LOAD_GLOBAL                     13: errors
                        280     LOAD_METHOD                     14: InvalidHeaderDefect
                        282     LOAD_CONST                      8: 'inconsistent RFC2231 parameter numbering'
                        284     CALL_METHOD                     1
                        286     CALL_METHOD                     1
                        288     POP_TOP                         
                        290     LOAD_FAST                       8: i
                        292     LOAD_CONST                      5: 1
                        294     INPLACE_ADD                     
                        296     STORE_FAST                      8: i
                        298     LOAD_FAST                       10: param
                        300     LOAD_ATTR                       15: param_value
                        302     STORE_FAST                      11: value
                        304     LOAD_FAST                       10: param
                        306     LOAD_ATTR                       10: extended
                        308     POP_JUMP_IF_FALSE               220 (to 440)
                        310     SETUP_FINALLY                   8 (to 328)
                        312     LOAD_GLOBAL                     16: urllib
                        314     LOAD_ATTR                       17: parse
                        316     LOAD_METHOD                     18: unquote_to_bytes
                        318     LOAD_FAST                       11: value
                        320     CALL_METHOD                     1
                        322     STORE_FAST                      11: value
                        324     POP_BLOCK                       
                        326     JUMP_FORWARD                    17 (to 362)
                        328     DUP_TOP                         
                        330     LOAD_GLOBAL                     19: UnicodeEncodeError
                        332     JUMP_IF_NOT_EXC_MATCH           180 (to 360)
                        334     POP_TOP                         
                        336     POP_TOP                         
                        338     POP_TOP                         
                        340     LOAD_GLOBAL                     16: urllib
                        342     LOAD_ATTR                       17: parse
                        344     LOAD_ATTR                       20: unquote
                        346     LOAD_FAST                       11: value
                        348     LOAD_CONST                      9: 'latin-1'
                        350     LOAD_CONST                      10: ('encoding',)
                        352     CALL_FUNCTION_KW                2
                        354     STORE_FAST                      11: value
                        356     POP_EXCEPT                      
                        358     JUMP_FORWARD                    40 (to 440)
                        360     RERAISE                         0
                        362     SETUP_FINALLY                   8 (to 380)
                        364     LOAD_FAST                       11: value
                        366     LOAD_METHOD                     21: decode
                        368     LOAD_FAST                       6: charset
                        370     LOAD_CONST                      11: 'surrogateescape'
                        372     CALL_METHOD                     2
                        374     STORE_FAST                      11: value
                        376     POP_BLOCK                       
                        378     JUMP_FORWARD                    17 (to 414)
                        380     DUP_TOP                         
                        382     LOAD_GLOBAL                     22: LookupError
                        384     LOAD_GLOBAL                     19: UnicodeEncodeError
                        386     BUILD_TUPLE                     2
                        388     JUMP_IF_NOT_EXC_MATCH           206 (to 412)
                        390     POP_TOP                         
                        392     POP_TOP                         
                        394     POP_TOP                         
                        396     LOAD_FAST                       11: value
                        398     LOAD_METHOD                     21: decode
                        400     LOAD_CONST                      12: 'us-ascii'
                        402     LOAD_CONST                      11: 'surrogateescape'
                        404     CALL_METHOD                     2
                        406     STORE_FAST                      11: value
                        408     POP_EXCEPT                      
                        410     JUMP_FORWARD                    1 (to 414)
                        412     RERAISE                         0
                        414     LOAD_GLOBAL                     23: utils
                        416     LOAD_METHOD                     24: _has_surrogates
                        418     LOAD_FAST                       11: value
                        420     CALL_METHOD                     1
                        422     POP_JUMP_IF_FALSE               220 (to 440)
                        424     LOAD_FAST                       10: param
                        426     LOAD_ATTR                       12: defects
                        428     LOAD_METHOD                     4: append
                        430     LOAD_GLOBAL                     13: errors
                        432     LOAD_METHOD                     25: UndecodableBytesDefect
                        434     CALL_METHOD                     0
                        436     CALL_METHOD                     1
                        438     POP_TOP                         
                        440     LOAD_FAST                       7: value_parts
                        442     LOAD_METHOD                     4: append
                        444     LOAD_FAST                       11: value
                        446     CALL_METHOD                     1
                        448     POP_TOP                         
                        450     JUMP_ABSOLUTE                   115 (to 230)
                        452     LOAD_CONST                      13: ''
                        454     LOAD_METHOD                     26: join
                        456     LOAD_FAST                       7: value_parts
                        458     CALL_METHOD                     1
                        460     STORE_FAST                      11: value
                        462     LOAD_FAST                       3: name
                        464     LOAD_FAST                       11: value
                        466     BUILD_TUPLE                     2
                        468     YIELD_VALUE                     
                        470     POP_TOP                         
                        472     JUMP_ABSOLUTE                   52 (to 104)
                        474     LOAD_CONST                      0: None
                        476     RETURN_VALUE                    
                'MimeParameters.params'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'params'
                        'append'
                        'format'
                        'quote_string'
                        'join'
                    [Var Names]
                        'self'
                        'params'
                        'name'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '{}={}'
                        '; '
                        ' '
                        ''
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      1: params
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       0: params
                        8       GET_ITER                        
                        10      FOR_ITER                        23 (to 58)
                        12      UNPACK_SEQUENCE                 2
                        14      STORE_FAST                      2: name
                        16      STORE_FAST                      3: value
                        18      LOAD_FAST                       3: value
                        20      POP_JUMP_IF_FALSE               23 (to 46)
                        22      LOAD_FAST                       1: params
                        24      LOAD_METHOD                     1: append
                        26      LOAD_CONST                      1: '{}={}'
                        28      LOAD_METHOD                     2: format
                        30      LOAD_FAST                       2: name
                        32      LOAD_GLOBAL                     3: quote_string
                        34      LOAD_FAST                       3: value
                        36      CALL_FUNCTION                   1
                        38      CALL_METHOD                     2
                        40      CALL_METHOD                     1
                        42      POP_TOP                         
                        44      JUMP_ABSOLUTE                   5 (to 10)
                        46      LOAD_FAST                       1: params
                        48      LOAD_METHOD                     1: append
                        50      LOAD_FAST                       2: name
                        52      CALL_METHOD                     1
                        54      POP_TOP                         
                        56      JUMP_ABSOLUTE                   5 (to 10)
                        58      LOAD_CONST                      2: '; '
                        60      LOAD_METHOD                     4: join
                        62      LOAD_FAST                       1: params
                        64      CALL_METHOD                     1
                        66      STORE_FAST                      1: params
                        68      LOAD_FAST                       1: params
                        70      POP_JUMP_IF_FALSE               40 (to 80)
                        72      LOAD_CONST                      3: ' '
                        74      LOAD_FAST                       1: params
                        76      BINARY_ADD                      
                        78      RETURN_VALUE                    
                        80      LOAD_CONST                      4: ''
                        82      RETURN_VALUE                    
                'MimeParameters.__str__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'MimeParameters'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'mime-parameters'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: syntactic_break
                16      LOAD_NAME                       5: property
                18      LOAD_CONST                      3: <CODE> params
                20      LOAD_CONST                      4: 'MimeParameters.params'
                22      MAKE_FUNCTION                   0
                24      CALL_FUNCTION                   1
                26      STORE_NAME                      6: params
                28      LOAD_CONST                      5: <CODE> __str__
                30      LOAD_CONST                      6: 'MimeParameters.__str__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      7: __str__
                36      LOAD_CONST                      7: None
                38      RETURN_VALUE                    
        'MimeParameters'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: ParameterizedHeaderValue
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'syntactic_break'
                'property'
                'params'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ParameterizedHeaderValue'
                False
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: params
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'reversed'
                        'token_type'
                        'params'
                    [Var Names]
                        'self'
                        'token'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'mime-parameters'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: reversed
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       GET_ITER                        
                        8       FOR_ITER                        12 (to 34)
                        10      STORE_FAST                      1: token
                        12      LOAD_FAST                       1: token
                        14      LOAD_ATTR                       1: token_type
                        16      LOAD_CONST                      1: 'mime-parameters'
                        18      COMPARE_OP                      2 (==)
                        20      POP_JUMP_IF_FALSE               16 (to 32)
                        22      LOAD_FAST                       1: token
                        24      LOAD_ATTR                       2: params
                        26      ROT_TWO                         
                        28      POP_TOP                         
                        30      RETURN_VALUE                    
                        32      JUMP_ABSOLUTE                   4 (to 8)
                        34      BUILD_MAP                       0
                        36      RETURN_VALUE                    
                'ParameterizedHeaderValue.params'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ParameterizedHeaderValue'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: False
                10      STORE_NAME                      3: syntactic_break
                12      LOAD_NAME                       4: property
                14      LOAD_CONST                      2: <CODE> params
                16      LOAD_CONST                      3: 'ParameterizedHeaderValue.params'
                18      MAKE_FUNCTION                   0
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: params
                24      LOAD_CONST                      4: None
                26      RETURN_VALUE                    
        'ParameterizedHeaderValue'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: ContentType
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
                'maintype'
                'subtype'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ContentType'
                'content-type'
                False
                'text'
                'plain'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ContentType'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'content-type'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_CONST                      3: 'text'
                18      STORE_NAME                      5: maintype
                20      LOAD_CONST                      4: 'plain'
                22      STORE_NAME                      6: subtype
                24      LOAD_CONST                      5: None
                26      RETURN_VALUE                    
        'ContentType'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: ContentDisposition
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
                'content_disposition'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ContentDisposition'
                'content-disposition'
                False
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ContentDisposition'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'content-disposition'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_CONST                      3: None
                18      STORE_NAME                      5: content_disposition
                20      LOAD_CONST                      3: None
                22      RETURN_VALUE                    
        'ContentDisposition'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: ContentTransferEncoding
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
                'cte'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ContentTransferEncoding'
                'content-transfer-encoding'
                False
                '7bit'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ContentTransferEncoding'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'content-transfer-encoding'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_CONST                      3: '7bit'
                18      STORE_NAME                      5: cte
                20      LOAD_CONST                      4: None
                22      RETURN_VALUE                    
        'ContentTransferEncoding'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: HeaderLabel
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'HeaderLabel'
                'header-label'
                False
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'HeaderLabel'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'header-label'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_CONST                      3: None
                18      RETURN_VALUE                    
        'HeaderLabel'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: MsgID
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
                'as_ew_allowed'
                'fold'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'MsgID'
                'msg-id'
                False
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: fold
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'str'
                        'linesep'
                    [Var Names]
                        'self'
                        'policy'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: str
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_FAST                       1: policy
                        8       LOAD_ATTR                       1: linesep
                        10      BINARY_ADD                      
                        12      RETURN_VALUE                    
                'MsgID.fold'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'MsgID'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'msg-id'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: False
                14      STORE_NAME                      4: as_ew_allowed
                16      LOAD_CONST                      3: <CODE> fold
                18      LOAD_CONST                      4: 'MsgID.fold'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      5: fold
                24      LOAD_CONST                      5: None
                26      RETURN_VALUE                    
        'MsgID'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: MessageID
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'MessageID'
                'message-id'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'MessageID'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'message-id'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'MessageID'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: InvalidMessageID
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'InvalidMessageID'
                'invalid-message-id'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'InvalidMessageID'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'invalid-message-id'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'InvalidMessageID'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Header
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'token_type'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Header'
                'header'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Header'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'header'
                10      STORE_NAME                      3: token_type
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'Header'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: Terminal
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'as_ew_allowed'
                'ew_combine_allowed'
                'syntactic_break'
                '__new__'
                '__repr__'
                'pprint'
                'property'
                'all_defects'
                '_pp'
                'pop_trailing_ws'
                'comments'
                '__getnewargs__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'Terminal'
                True
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: __new__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '__new__'
                        'token_type'
                        'defects'
                    [Var Names]
                        'cls'
                        'value'
                        'token_type'
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_METHOD                     1: __new__
                        6       LOAD_FAST                       0: cls
                        8       LOAD_FAST                       1: value
                        10      CALL_METHOD                     2
                        12      STORE_FAST                      3: self
                        14      LOAD_FAST                       2: token_type
                        16      LOAD_FAST                       3: self
                        18      STORE_ATTR                      2: token_type
                        20      BUILD_LIST                      0
                        22      LOAD_FAST                       3: self
                        24      STORE_ATTR                      3: defects
                        26      LOAD_FAST                       3: self
                        28      RETURN_VALUE                    
                'Terminal.__new__'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'format'
                        '__class__'
                        '__name__'
                        'super'
                        '__repr__'
                    [Var Names]
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        '{}({})'
                    [Disassembly]
                        0       LOAD_CONST                      1: '{}({})'
                        2       LOAD_METHOD                     0: format
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: __class__
                        8       LOAD_ATTR                       2: __name__
                        10      LOAD_GLOBAL                     3: super
                        12      CALL_FUNCTION                   0
                        14      LOAD_METHOD                     4: __repr__
                        16      CALL_METHOD                     0
                        18      CALL_METHOD                     2
                        20      RETURN_VALUE                    
                'Terminal.__repr__'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: pprint
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'print'
                        '__class__'
                        '__name__'
                        'token_type'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '/'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: print
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: __class__
                        6       LOAD_ATTR                       2: __name__
                        8       LOAD_CONST                      1: '/'
                        10      BINARY_ADD                      
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: token_type
                        16      BINARY_ADD                      
                        18      CALL_FUNCTION                   1
                        20      POP_TOP                         
                        22      LOAD_CONST                      0: None
                        24      RETURN_VALUE                    
                'Terminal.pprint'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: all_defects
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'list'
                        'defects'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: list
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: defects
                        6       CALL_FUNCTION                   1
                        8       RETURN_VALUE                    
                'Terminal.all_defects'
                ''
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: _pp
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 9
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'format'
                        '__class__'
                        '__name__'
                        'token_type'
                        'super'
                        '__repr__'
                        'defects'
                    [Var Names]
                        'self'
                        'indent'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        '{}{}/{}({}){}'
                        ''
                        ' {}'
                    [Disassembly]
                        0       LOAD_CONST                      1: '{}{}/{}({}){}'
                        2       LOAD_METHOD                     0: format
                        4       LOAD_FAST                       1: indent
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: __class__
                        10      LOAD_ATTR                       2: __name__
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: token_type
                        16      LOAD_GLOBAL                     4: super
                        18      CALL_FUNCTION                   0
                        20      LOAD_METHOD                     5: __repr__
                        22      CALL_METHOD                     0
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       6: defects
                        28      POP_JUMP_IF_TRUE                19 (to 38)
                        30      LOAD_CONST                      2: ''
                        32      CALL_METHOD                     5
                        34      BUILD_LIST                      1
                        36      RETURN_VALUE                    
                        38      LOAD_CONST                      3: ' {}'
                        40      LOAD_METHOD                     0: format
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       6: defects
                        46      CALL_METHOD                     1
                        48      CALL_METHOD                     5
                        50      BUILD_LIST                      1
                        52      RETURN_VALUE                    
                'Terminal._pp'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: pop_trailing_ws
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_CONST                      0: None
                        2       RETURN_VALUE                    
                'Terminal.pop_trailing_ws'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: comments
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       RETURN_VALUE                    
                'Terminal.comments'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: __getnewargs__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'str'
                        'token_type'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: str
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: token_type
                        10      BUILD_TUPLE                     2
                        12      RETURN_VALUE                    
                'Terminal.__getnewargs__'
                (
                    ''
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Terminal'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: True
                10      STORE_NAME                      3: as_ew_allowed
                12      LOAD_CONST                      1: True
                14      STORE_NAME                      4: ew_combine_allowed
                16      LOAD_CONST                      1: True
                18      STORE_NAME                      5: syntactic_break
                20      LOAD_CLOSURE                    0: __class__
                22      BUILD_TUPLE                     1
                24      LOAD_CONST                      2: <CODE> __new__
                26      LOAD_CONST                      3: 'Terminal.__new__'
                28      MAKE_FUNCTION                   8
                30      STORE_NAME                      6: __new__
                32      LOAD_CLOSURE                    0: __class__
                34      BUILD_TUPLE                     1
                36      LOAD_CONST                      4: <CODE> __repr__
                38      LOAD_CONST                      5: 'Terminal.__repr__'
                40      MAKE_FUNCTION                   8
                42      STORE_NAME                      7: __repr__
                44      LOAD_CONST                      6: <CODE> pprint
                46      LOAD_CONST                      7: 'Terminal.pprint'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      8: pprint
                52      LOAD_NAME                       9: property
                54      LOAD_CONST                      8: <CODE> all_defects
                56      LOAD_CONST                      9: 'Terminal.all_defects'
                58      MAKE_FUNCTION                   0
                60      CALL_FUNCTION                   1
                62      STORE_NAME                      10: all_defects
                64      LOAD_CONST                      19: ('',)
                66      LOAD_CLOSURE                    0: __class__
                68      BUILD_TUPLE                     1
                70      LOAD_CONST                      11: <CODE> _pp
                72      LOAD_CONST                      12: 'Terminal._pp'
                74      MAKE_FUNCTION                   9
                76      STORE_NAME                      11: _pp
                78      LOAD_CONST                      13: <CODE> pop_trailing_ws
                80      LOAD_CONST                      14: 'Terminal.pop_trailing_ws'
                82      MAKE_FUNCTION                   0
                84      STORE_NAME                      12: pop_trailing_ws
                86      LOAD_NAME                       9: property
                88      LOAD_CONST                      15: <CODE> comments
                90      LOAD_CONST                      16: 'Terminal.comments'
                92      MAKE_FUNCTION                   0
                94      CALL_FUNCTION                   1
                96      STORE_NAME                      13: comments
                98      LOAD_CONST                      17: <CODE> __getnewargs__
                100     LOAD_CONST                      18: 'Terminal.__getnewargs__'
                102     MAKE_FUNCTION                   0
                104     STORE_NAME                      14: __getnewargs__
                106     LOAD_CLOSURE                    0: __class__
                108     DUP_TOP                         
                110     STORE_NAME                      15: __classcell__
                112     RETURN_VALUE                    
        'Terminal'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: WhiteSpaceTerminal
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'property'
                'value'
                'startswith_fws'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'WhiteSpaceTerminal'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' '
                    [Disassembly]
                        0       LOAD_CONST                      1: ' '
                        2       RETURN_VALUE                    
                'WhiteSpaceTerminal.value'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: startswith_fws
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                    [Disassembly]
                        0       LOAD_CONST                      1: True
                        2       RETURN_VALUE                    
                'WhiteSpaceTerminal.startswith_fws'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'WhiteSpaceTerminal'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: property
                10      LOAD_CONST                      1: <CODE> value
                12      LOAD_CONST                      2: 'WhiteSpaceTerminal.value'
                14      MAKE_FUNCTION                   0
                16      CALL_FUNCTION                   1
                18      STORE_NAME                      4: value
                20      LOAD_CONST                      3: <CODE> startswith_fws
                22      LOAD_CONST                      4: 'WhiteSpaceTerminal.startswith_fws'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: startswith_fws
                28      LOAD_CONST                      5: None
                30      RETURN_VALUE                    
        'WhiteSpaceTerminal'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: ValueTerminal
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'property'
                'value'
                'startswith_fws'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ValueTerminal'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       RETURN_VALUE                    
                'ValueTerminal.value'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: startswith_fws
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                    [Disassembly]
                        0       LOAD_CONST                      1: False
                        2       RETURN_VALUE                    
                'ValueTerminal.startswith_fws'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ValueTerminal'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: property
                10      LOAD_CONST                      1: <CODE> value
                12      LOAD_CONST                      2: 'ValueTerminal.value'
                14      MAKE_FUNCTION                   0
                16      CALL_FUNCTION                   1
                18      STORE_NAME                      4: value
                20      LOAD_CONST                      3: <CODE> startswith_fws
                22      LOAD_CONST                      4: 'ValueTerminal.startswith_fws'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: startswith_fws
                28      LOAD_CONST                      5: None
                30      RETURN_VALUE                    
        'ValueTerminal'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: EWWhiteSpaceTerminal
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'property'
                'value'
                '__str__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'EWWhiteSpaceTerminal'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ''
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       RETURN_VALUE                    
                'EWWhiteSpaceTerminal.value'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ''
                    [Disassembly]
                        0       LOAD_CONST                      1: ''
                        2       RETURN_VALUE                    
                'EWWhiteSpaceTerminal.__str__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'EWWhiteSpaceTerminal'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: property
                10      LOAD_CONST                      1: <CODE> value
                12      LOAD_CONST                      2: 'EWWhiteSpaceTerminal.value'
                14      MAKE_FUNCTION                   0
                16      CALL_FUNCTION                   1
                18      STORE_NAME                      4: value
                20      LOAD_CONST                      3: <CODE> __str__
                22      LOAD_CONST                      4: 'EWWhiteSpaceTerminal.__str__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __str__
                28      LOAD_CONST                      5: None
                30      RETURN_VALUE                    
        'EWWhiteSpaceTerminal'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: _InvalidEwError
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_InvalidEwError'
                'Invalid encoded word found while parsing headers.'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_InvalidEwError'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Invalid encoded word found while parsing headers.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        '_InvalidEwError'
        'dot'
        ','
        'list-separator'
        '@'
        'route-component-marker'
        '([{}]+)'
        ''
        '[^{}]+'
        '[\\x00-\\x20\\x7F]'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: _validate_xtext
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_non_printable_finder'
                'defects'
                'append'
                'errors'
                'NonPrintableDefect'
                'utils'
                '_has_surrogates'
                'UndecodableBytesDefect'
            [Var Names]
                'xtext'
                'non_printables'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'If input token contains ASCII non-printables, register a defect.'
                'Non-ASCII characters found in header token'
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _non_printable_finder
                2       LOAD_FAST                       0: xtext
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      1: non_printables
                8       LOAD_FAST                       1: non_printables
                10      POP_JUMP_IF_FALSE               15 (to 30)
                12      LOAD_FAST                       0: xtext
                14      LOAD_ATTR                       1: defects
                16      LOAD_METHOD                     2: append
                18      LOAD_GLOBAL                     3: errors
                20      LOAD_METHOD                     4: NonPrintableDefect
                22      LOAD_FAST                       1: non_printables
                24      CALL_METHOD                     1
                26      CALL_METHOD                     1
                28      POP_TOP                         
                30      LOAD_GLOBAL                     5: utils
                32      LOAD_METHOD                     6: _has_surrogates
                34      LOAD_FAST                       0: xtext
                36      CALL_METHOD                     1
                38      POP_JUMP_IF_FALSE               31 (to 62)
                40      LOAD_FAST                       0: xtext
                42      LOAD_ATTR                       1: defects
                44      LOAD_METHOD                     2: append
                46      LOAD_GLOBAL                     3: errors
                48      LOAD_METHOD                     7: UndecodableBytesDefect
                50      LOAD_CONST                      1: 'Non-ASCII characters found in header token'
                52      CALL_METHOD                     1
                54      CALL_METHOD                     1
                56      POP_TOP                         
                58      LOAD_CONST                      2: None
                60      RETURN_VALUE                    
                62      LOAD_CONST                      2: None
                64      RETURN_VALUE                    
        '_validate_xtext'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: _get_ptext_to_endchars
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_wsp_splitter'
                'range'
                'len'
                'append'
                'join'
            [Var Names]
                'value'
                'endchars'
                'fragment'
                'remainder'
                'vchars'
                'escape'
                'had_qp'
                'pos'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Scan printables/quoted-pairs until endchars and return unquoted ptext.\n\n    This function turns a run of qcontent, ccontent-without-comments, or\n    dtext-with-quoted-printables into a single string by unquoting any\n    quoted printables.  It returns the string, the remaining value, and\n    a flag that is True iff there were any quoted printables decoded.\n\n    '
                1
                False
                '\\'
                True
                ''
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _wsp_splitter
                2       LOAD_FAST                       0: value
                4       LOAD_CONST                      1: 1
                6       CALL_FUNCTION                   2
                8       UNPACK_EX                       1
                10      STORE_FAST                      2: fragment
                12      STORE_FAST                      3: remainder
                14      BUILD_LIST                      0
                16      STORE_FAST                      4: vchars
                18      LOAD_CONST                      2: False
                20      STORE_FAST                      5: escape
                22      LOAD_CONST                      2: False
                24      STORE_FAST                      6: had_qp
                26      LOAD_GLOBAL                     1: range
                28      LOAD_GLOBAL                     2: len
                30      LOAD_FAST                       2: fragment
                32      CALL_FUNCTION                   1
                34      CALL_FUNCTION                   1
                36      GET_ITER                        
                38      FOR_ITER                        38 (to 116)
                40      STORE_FAST                      7: pos
                42      LOAD_FAST                       2: fragment
                44      LOAD_FAST                       7: pos
                46      BINARY_SUBSCR                   
                48      LOAD_CONST                      3: '\\'
                50      COMPARE_OP                      2 (==)
                52      POP_JUMP_IF_FALSE               37 (to 74)
                54      LOAD_FAST                       5: escape
                56      POP_JUMP_IF_FALSE               34 (to 68)
                58      LOAD_CONST                      2: False
                60      STORE_FAST                      5: escape
                62      LOAD_CONST                      4: True
                64      STORE_FAST                      6: had_qp
                66      JUMP_FORWARD                    3 (to 74)
                68      LOAD_CONST                      4: True
                70      STORE_FAST                      5: escape
                72      JUMP_ABSOLUTE                   19 (to 38)
                74      LOAD_FAST                       5: escape
                76      POP_JUMP_IF_FALSE               42 (to 84)
                78      LOAD_CONST                      2: False
                80      STORE_FAST                      5: escape
                82      JUMP_FORWARD                    8 (to 100)
                84      LOAD_FAST                       2: fragment
                86      LOAD_FAST                       7: pos
                88      BINARY_SUBSCR                   
                90      LOAD_FAST                       1: endchars
                92      CONTAINS_OP                     0 (in)
                94      POP_JUMP_IF_FALSE               50 (to 100)
                96      POP_TOP                         
                98      JUMP_FORWARD                    12 (to 124)
                100     LOAD_FAST                       4: vchars
                102     LOAD_METHOD                     3: append
                104     LOAD_FAST                       2: fragment
                106     LOAD_FAST                       7: pos
                108     BINARY_SUBSCR                   
                110     CALL_METHOD                     1
                112     POP_TOP                         
                114     JUMP_ABSOLUTE                   19 (to 38)
                116     LOAD_FAST                       7: pos
                118     LOAD_CONST                      1: 1
                120     BINARY_ADD                      
                122     STORE_FAST                      7: pos
                124     LOAD_CONST                      5: ''
                126     LOAD_METHOD                     4: join
                128     LOAD_FAST                       4: vchars
                130     CALL_METHOD                     1
                132     LOAD_CONST                      5: ''
                134     LOAD_METHOD                     4: join
                136     LOAD_FAST                       2: fragment
                138     LOAD_FAST                       7: pos
                140     LOAD_CONST                      6: None
                142     BUILD_SLICE                     2
                144     BINARY_SUBSCR                   
                146     BUILD_LIST                      1
                148     LOAD_FAST                       3: remainder
                150     BINARY_ADD                      
                152     CALL_METHOD                     1
                154     LOAD_FAST                       6: had_qp
                156     BUILD_TUPLE                     3
                158     RETURN_VALUE                    
        '_get_ptext_to_endchars'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_fws
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'lstrip'
                'WhiteSpaceTerminal'
                'len'
            [Var Names]
                'value'
                'newvalue'
                'fws'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "FWS = 1*WSP\n\n    This isn't the RFC definition.  We're using fws to represent tokens where\n    folding can be done, but when we are parsing the *un*folding has already\n    been done so we don't need to watch out for CRLF.\n\n    "
                None
                'fws'
            [Disassembly]
                0       LOAD_FAST                       0: value
                2       LOAD_METHOD                     0: lstrip
                4       CALL_METHOD                     0
                6       STORE_FAST                      1: newvalue
                8       LOAD_GLOBAL                     1: WhiteSpaceTerminal
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: None
                14      LOAD_GLOBAL                     2: len
                16      LOAD_FAST                       0: value
                18      CALL_FUNCTION                   1
                20      LOAD_GLOBAL                     2: len
                22      LOAD_FAST                       1: newvalue
                24      CALL_FUNCTION                   1
                26      BINARY_SUBTRACT                 
                28      BUILD_SLICE                     2
                30      BINARY_SUBSCR                   
                32      LOAD_CONST                      2: 'fws'
                34      CALL_FUNCTION                   2
                36      STORE_FAST                      2: fws
                38      LOAD_FAST                       2: fws
                40      LOAD_FAST                       1: newvalue
                42      BUILD_TUPLE                     2
                44      RETURN_VALUE                    
        'get_fws'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_encoded_word
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 13
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'EncodedWord'
                'startswith'
                'errors'
                'HeaderParseError'
                'format'
                'split'
                'join'
                'len'
                'hexdigits'
                'count'
                'defects'
                'append'
                'InvalidHeaderDefect'
                'cte'
                '_ew'
                'decode'
                'ValueError'
                'KeyError'
                '_InvalidEwError'
                'charset'
                'lang'
                'extend'
                'WSP'
                'get_fws'
                '_wsp_splitter'
                'ValueTerminal'
                '_validate_xtext'
            [Var Names]
                'value'
                'ew'
                'tok'
                'remainder'
                'remstr'
                'rest'
                'text'
                'charset'
                'lang'
                'defects'
                'token'
                'chars'
                'vtext'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' encoded-word = "=?" charset "?" encoding "?" encoded-text "?="\n\n    '
                '=?'
                'expected encoded word but found {}'
                2
                None
                '?='
                1
                ''
                0
                '?'
                'whitespace inside encoded word'
                "encoded word format invalid: '{}'"
                'vtext'
                'missing trailing whitespace after encoded-word'
            [Disassembly]
                0       LOAD_GLOBAL                     0: EncodedWord
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: ew
                6       LOAD_FAST                       0: value
                8       LOAD_METHOD                     1: startswith
                10      LOAD_CONST                      1: '=?'
                12      CALL_METHOD                     1
                14      POP_JUMP_IF_TRUE                16 (to 32)
                16      LOAD_GLOBAL                     2: errors
                18      LOAD_METHOD                     3: HeaderParseError
                20      LOAD_CONST                      2: 'expected encoded word but found {}'
                22      LOAD_METHOD                     4: format
                24      LOAD_FAST                       0: value
                26      CALL_METHOD                     1
                28      CALL_METHOD                     1
                30      RAISE_VARARGS                   1
                32      LOAD_FAST                       0: value
                34      LOAD_CONST                      3: 2
                36      LOAD_CONST                      4: None
                38      BUILD_SLICE                     2
                40      BINARY_SUBSCR                   
                42      LOAD_METHOD                     5: split
                44      LOAD_CONST                      5: '?='
                46      LOAD_CONST                      6: 1
                48      CALL_METHOD                     2
                50      UNPACK_EX                       1
                52      STORE_FAST                      2: tok
                54      STORE_FAST                      3: remainder
                56      LOAD_FAST                       2: tok
                58      LOAD_FAST                       0: value
                60      LOAD_CONST                      3: 2
                62      LOAD_CONST                      4: None
                64      BUILD_SLICE                     2
                66      BINARY_SUBSCR                   
                68      COMPARE_OP                      2 (==)
                70      POP_JUMP_IF_FALSE               44 (to 88)
                72      LOAD_GLOBAL                     2: errors
                74      LOAD_METHOD                     3: HeaderParseError
                76      LOAD_CONST                      2: 'expected encoded word but found {}'
                78      LOAD_METHOD                     4: format
                80      LOAD_FAST                       0: value
                82      CALL_METHOD                     1
                84      CALL_METHOD                     1
                86      RAISE_VARARGS                   1
                88      LOAD_CONST                      7: ''
                90      LOAD_METHOD                     6: join
                92      LOAD_FAST                       3: remainder
                94      CALL_METHOD                     1
                96      STORE_FAST                      4: remstr
                98      LOAD_GLOBAL                     7: len
                100     LOAD_FAST                       4: remstr
                102     CALL_FUNCTION                   1
                104     LOAD_CONST                      6: 1
                106     COMPARE_OP                      4 (>)
                108     POP_JUMP_IF_FALSE               88 (to 176)
                110     LOAD_FAST                       4: remstr
                112     LOAD_CONST                      8: 0
                114     BINARY_SUBSCR                   
                116     LOAD_GLOBAL                     8: hexdigits
                118     CONTAINS_OP                     0 (in)
                120     POP_JUMP_IF_FALSE               88 (to 176)
                122     LOAD_FAST                       4: remstr
                124     LOAD_CONST                      6: 1
                126     BINARY_SUBSCR                   
                128     LOAD_GLOBAL                     8: hexdigits
                130     CONTAINS_OP                     0 (in)
                132     POP_JUMP_IF_FALSE               88 (to 176)
                134     LOAD_FAST                       2: tok
                136     LOAD_METHOD                     9: count
                138     LOAD_CONST                      9: '?'
                140     CALL_METHOD                     1
                142     LOAD_CONST                      3: 2
                144     COMPARE_OP                      0 (<)
                146     POP_JUMP_IF_FALSE               88 (to 176)
                148     LOAD_FAST                       4: remstr
                150     LOAD_METHOD                     5: split
                152     LOAD_CONST                      5: '?='
                154     LOAD_CONST                      6: 1
                156     CALL_METHOD                     2
                158     UNPACK_EX                       1
                160     STORE_FAST                      5: rest
                162     STORE_FAST                      3: remainder
                164     LOAD_FAST                       2: tok
                166     LOAD_CONST                      5: '?='
                168     BINARY_ADD                      
                170     LOAD_FAST                       5: rest
                172     BINARY_ADD                      
                174     STORE_FAST                      2: tok
                176     LOAD_GLOBAL                     7: len
                178     LOAD_FAST                       2: tok
                180     LOAD_METHOD                     5: split
                182     CALL_METHOD                     0
                184     CALL_FUNCTION                   1
                186     LOAD_CONST                      6: 1
                188     COMPARE_OP                      4 (>)
                190     POP_JUMP_IF_FALSE               105 (to 210)
                192     LOAD_FAST                       1: ew
                194     LOAD_ATTR                       10: defects
                196     LOAD_METHOD                     11: append
                198     LOAD_GLOBAL                     2: errors
                200     LOAD_METHOD                     12: InvalidHeaderDefect
                202     LOAD_CONST                      10: 'whitespace inside encoded word'
                204     CALL_METHOD                     1
                206     CALL_METHOD                     1
                208     POP_TOP                         
                210     LOAD_FAST                       0: value
                212     LOAD_FAST                       1: ew
                214     STORE_ATTR                      13: cte
                216     LOAD_CONST                      7: ''
                218     LOAD_METHOD                     6: join
                220     LOAD_FAST                       3: remainder
                222     CALL_METHOD                     1
                224     STORE_FAST                      0: value
                226     SETUP_FINALLY                   15 (to 258)
                228     LOAD_GLOBAL                     14: _ew
                230     LOAD_METHOD                     15: decode
                232     LOAD_CONST                      1: '=?'
                234     LOAD_FAST                       2: tok
                236     BINARY_ADD                      
                238     LOAD_CONST                      5: '?='
                240     BINARY_ADD                      
                242     CALL_METHOD                     1
                244     UNPACK_SEQUENCE                 4
                246     STORE_FAST                      6: text
                248     STORE_FAST                      7: charset
                250     STORE_FAST                      8: lang
                252     STORE_FAST                      9: defects
                254     POP_BLOCK                       
                256     JUMP_FORWARD                    17 (to 292)
                258     DUP_TOP                         
                260     LOAD_GLOBAL                     16: ValueError
                262     LOAD_GLOBAL                     17: KeyError
                264     BUILD_TUPLE                     2
                266     JUMP_IF_NOT_EXC_MATCH           145 (to 290)
                268     POP_TOP                         
                270     POP_TOP                         
                272     POP_TOP                         
                274     LOAD_GLOBAL                     18: _InvalidEwError
                276     LOAD_CONST                      11: "encoded word format invalid: '{}'"
                278     LOAD_METHOD                     4: format
                280     LOAD_FAST                       1: ew
                282     LOAD_ATTR                       13: cte
                284     CALL_METHOD                     1
                286     CALL_FUNCTION                   1
                288     RAISE_VARARGS                   1
                290     RERAISE                         0
                292     LOAD_FAST                       7: charset
                294     LOAD_FAST                       1: ew
                296     STORE_ATTR                      19: charset
                298     LOAD_FAST                       8: lang
                300     LOAD_FAST                       1: ew
                302     STORE_ATTR                      20: lang
                304     LOAD_FAST                       1: ew
                306     LOAD_ATTR                       10: defects
                308     LOAD_METHOD                     21: extend
                310     LOAD_FAST                       9: defects
                312     CALL_METHOD                     1
                314     POP_TOP                         
                316     LOAD_FAST                       6: text
                318     POP_JUMP_IF_FALSE               206 (to 412)
                320     LOAD_FAST                       6: text
                322     LOAD_CONST                      8: 0
                324     BINARY_SUBSCR                   
                326     LOAD_GLOBAL                     22: WSP
                328     CONTAINS_OP                     0 (in)
                330     POP_JUMP_IF_FALSE               178 (to 356)
                332     LOAD_GLOBAL                     23: get_fws
                334     LOAD_FAST                       6: text
                336     CALL_FUNCTION                   1
                338     UNPACK_SEQUENCE                 2
                340     STORE_FAST                      10: token
                342     STORE_FAST                      6: text
                344     LOAD_FAST                       1: ew
                346     LOAD_METHOD                     11: append
                348     LOAD_FAST                       10: token
                350     CALL_METHOD                     1
                352     POP_TOP                         
                354     JUMP_ABSOLUTE                   158 (to 316)
                356     LOAD_GLOBAL                     24: _wsp_splitter
                358     LOAD_FAST                       6: text
                360     LOAD_CONST                      6: 1
                362     CALL_FUNCTION                   2
                364     UNPACK_EX                       1
                366     STORE_FAST                      11: chars
                368     STORE_FAST                      3: remainder
                370     LOAD_GLOBAL                     25: ValueTerminal
                372     LOAD_FAST                       11: chars
                374     LOAD_CONST                      12: 'vtext'
                376     CALL_FUNCTION                   2
                378     STORE_FAST                      12: vtext
                380     LOAD_GLOBAL                     26: _validate_xtext
                382     LOAD_FAST                       12: vtext
                384     CALL_FUNCTION                   1
                386     POP_TOP                         
                388     LOAD_FAST                       1: ew
                390     LOAD_METHOD                     11: append
                392     LOAD_FAST                       12: vtext
                394     CALL_METHOD                     1
                396     POP_TOP                         
                398     LOAD_CONST                      7: ''
                400     LOAD_METHOD                     6: join
                402     LOAD_FAST                       3: remainder
                404     CALL_METHOD                     1
                406     STORE_FAST                      6: text
                408     LOAD_FAST                       6: text
                410     POP_JUMP_IF_TRUE                160 (to 320)
                412     LOAD_FAST                       0: value
                414     POP_JUMP_IF_FALSE               223 (to 446)
                416     LOAD_FAST                       0: value
                418     LOAD_CONST                      8: 0
                420     BINARY_SUBSCR                   
                422     LOAD_GLOBAL                     22: WSP
                424     CONTAINS_OP                     1 (not in)
                426     POP_JUMP_IF_FALSE               223 (to 446)
                428     LOAD_FAST                       1: ew
                430     LOAD_ATTR                       10: defects
                432     LOAD_METHOD                     11: append
                434     LOAD_GLOBAL                     2: errors
                436     LOAD_METHOD                     12: InvalidHeaderDefect
                438     LOAD_CONST                      13: 'missing trailing whitespace after encoded-word'
                440     CALL_METHOD                     1
                442     CALL_METHOD                     1
                444     POP_TOP                         
                446     LOAD_FAST                       1: ew
                448     LOAD_FAST                       0: value
                450     BUILD_TUPLE                     2
                452     RETURN_VALUE                    
        'get_encoded_word'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_unstructured
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'UnstructuredTokenList'
                'WSP'
                'get_fws'
                'append'
                'startswith'
                'get_encoded_word'
                '_InvalidEwError'
                'errors'
                'HeaderParseError'
                'len'
                'token_type'
                'defects'
                'InvalidHeaderDefect'
                'EWWhiteSpaceTerminal'
                '_wsp_splitter'
                'rfc2047_matcher'
                'search'
                'partition'
                'ValueTerminal'
                '_validate_xtext'
                'join'
            [Var Names]
                'value'
                'unstructured'
                'token'
                'valid_ew'
                'have_ws'
                'tok'
                'remainder'
                'vtext'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "unstructured = (*([FWS] vchar) *WSP) / obs-unstruct\n       obs-unstruct = *((*LF *CR *(obs-utext) *LF *CR)) / FWS)\n       obs-utext = %d0 / obs-NO-WS-CTL / LF / CR\n\n       obs-NO-WS-CTL is control characters except WSP/CR/LF.\n\n    So, basically, we have printable runs, plus control characters or nulls in\n    the obsolete syntax, separated by whitespace.  Since RFC 2047 uses the\n    obsolete syntax in its specification, but requires whitespace on either\n    side of the encoded words, I can see no reason to need to separate the\n    non-printable-non-whitespace from the printable runs if they occur, so we\n    parse this into xtext tokens separated by WSP tokens.\n\n    Because an 'unstructured' value must by definition constitute the entire\n    value, this 'get' routine does not return a remaining value, only the\n    parsed TokenList.\n\n    "
                0
                True
                '=?'
                False
                -1
                'fws'
                'missing whitespace before encoded word'
                1
                -2
                'encoded-word'
                'vtext'
                ''
            [Disassembly]
                0       LOAD_GLOBAL                     0: UnstructuredTokenList
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: unstructured
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               157 (to 314)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: WSP
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               23 (to 46)
                22      LOAD_GLOBAL                     2: get_fws
                24      LOAD_FAST                       0: value
                26      CALL_FUNCTION                   1
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      2: token
                32      STORE_FAST                      0: value
                34      LOAD_FAST                       1: unstructured
                36      LOAD_METHOD                     3: append
                38      LOAD_FAST                       2: token
                40      CALL_METHOD                     1
                42      POP_TOP                         
                44      JUMP_ABSOLUTE                   3 (to 6)
                46      LOAD_CONST                      2: True
                48      STORE_FAST                      3: valid_ew
                50      LOAD_FAST                       0: value
                52      LOAD_METHOD                     4: startswith
                54      LOAD_CONST                      3: '=?'
                56      CALL_METHOD                     1
                58      POP_JUMP_IF_FALSE               115 (to 230)
                60      SETUP_FINALLY                   8 (to 78)
                62      LOAD_GLOBAL                     5: get_encoded_word
                64      LOAD_FAST                       0: value
                66      CALL_FUNCTION                   1
                68      UNPACK_SEQUENCE                 2
                70      STORE_FAST                      2: token
                72      STORE_FAST                      0: value
                74      POP_BLOCK                       
                76      JUMP_FORWARD                    20 (to 118)
                78      DUP_TOP                         
                80      LOAD_GLOBAL                     6: _InvalidEwError
                82      JUMP_IF_NOT_EXC_MATCH           49 (to 98)
                84      POP_TOP                         
                86      POP_TOP                         
                88      POP_TOP                         
                90      LOAD_CONST                      4: False
                92      STORE_FAST                      3: valid_ew
                94      POP_EXCEPT                      
                96      JUMP_FORWARD                    66 (to 230)
                98      DUP_TOP                         
                100     LOAD_GLOBAL                     7: errors
                102     LOAD_ATTR                       8: HeaderParseError
                104     JUMP_IF_NOT_EXC_MATCH           58 (to 116)
                106     POP_TOP                         
                108     POP_TOP                         
                110     POP_TOP                         
                112     POP_EXCEPT                      
                114     JUMP_FORWARD                    57 (to 230)
                116     RERAISE                         0
                118     LOAD_CONST                      2: True
                120     STORE_FAST                      4: have_ws
                122     LOAD_GLOBAL                     9: len
                124     LOAD_FAST                       1: unstructured
                126     CALL_FUNCTION                   1
                128     LOAD_CONST                      1: 0
                130     COMPARE_OP                      4 (>)
                132     POP_JUMP_IF_FALSE               85 (to 170)
                134     LOAD_FAST                       1: unstructured
                136     LOAD_CONST                      5: -1
                138     BINARY_SUBSCR                   
                140     LOAD_ATTR                       10: token_type
                142     LOAD_CONST                      6: 'fws'
                144     COMPARE_OP                      3 (!=)
                146     POP_JUMP_IF_FALSE               85 (to 170)
                148     LOAD_FAST                       1: unstructured
                150     LOAD_ATTR                       11: defects
                152     LOAD_METHOD                     3: append
                154     LOAD_GLOBAL                     7: errors
                156     LOAD_METHOD                     12: InvalidHeaderDefect
                158     LOAD_CONST                      7: 'missing whitespace before encoded word'
                160     CALL_METHOD                     1
                162     CALL_METHOD                     1
                164     POP_TOP                         
                166     LOAD_CONST                      4: False
                168     STORE_FAST                      4: have_ws
                170     LOAD_FAST                       4: have_ws
                172     POP_JUMP_IF_FALSE               109 (to 218)
                174     LOAD_GLOBAL                     9: len
                176     LOAD_FAST                       1: unstructured
                178     CALL_FUNCTION                   1
                180     LOAD_CONST                      8: 1
                182     COMPARE_OP                      4 (>)
                184     POP_JUMP_IF_FALSE               109 (to 218)
                186     LOAD_FAST                       1: unstructured
                188     LOAD_CONST                      9: -2
                190     BINARY_SUBSCR                   
                192     LOAD_ATTR                       10: token_type
                194     LOAD_CONST                      10: 'encoded-word'
                196     COMPARE_OP                      2 (==)
                198     POP_JUMP_IF_FALSE               109 (to 218)
                200     LOAD_GLOBAL                     13: EWWhiteSpaceTerminal
                202     LOAD_FAST                       1: unstructured
                204     LOAD_CONST                      5: -1
                206     BINARY_SUBSCR                   
                208     LOAD_CONST                      6: 'fws'
                210     CALL_FUNCTION                   2
                212     LOAD_FAST                       1: unstructured
                214     LOAD_CONST                      5: -1
                216     STORE_SUBSCR                    
                218     LOAD_FAST                       1: unstructured
                220     LOAD_METHOD                     3: append
                222     LOAD_FAST                       2: token
                224     CALL_METHOD                     1
                226     POP_TOP                         
                228     JUMP_ABSOLUTE                   3 (to 6)
                230     LOAD_GLOBAL                     14: _wsp_splitter
                232     LOAD_FAST                       0: value
                234     LOAD_CONST                      8: 1
                236     CALL_FUNCTION                   2
                238     UNPACK_EX                       1
                240     STORE_FAST                      5: tok
                242     STORE_FAST                      6: remainder
                244     LOAD_FAST                       3: valid_ew
                246     POP_JUMP_IF_FALSE               136 (to 272)
                248     LOAD_GLOBAL                     15: rfc2047_matcher
                250     LOAD_METHOD                     16: search
                252     LOAD_FAST                       5: tok
                254     CALL_METHOD                     1
                256     POP_JUMP_IF_FALSE               136 (to 272)
                258     LOAD_FAST                       0: value
                260     LOAD_METHOD                     17: partition
                262     LOAD_CONST                      3: '=?'
                264     CALL_METHOD                     1
                266     UNPACK_EX                       1
                268     STORE_FAST                      5: tok
                270     STORE_FAST                      6: remainder
                272     LOAD_GLOBAL                     18: ValueTerminal
                274     LOAD_FAST                       5: tok
                276     LOAD_CONST                      11: 'vtext'
                278     CALL_FUNCTION                   2
                280     STORE_FAST                      7: vtext
                282     LOAD_GLOBAL                     19: _validate_xtext
                284     LOAD_FAST                       7: vtext
                286     CALL_FUNCTION                   1
                288     POP_TOP                         
                290     LOAD_FAST                       1: unstructured
                292     LOAD_METHOD                     3: append
                294     LOAD_FAST                       7: vtext
                296     CALL_METHOD                     1
                298     POP_TOP                         
                300     LOAD_CONST                      12: ''
                302     LOAD_METHOD                     20: join
                304     LOAD_FAST                       6: remainder
                306     CALL_METHOD                     1
                308     STORE_FAST                      0: value
                310     LOAD_FAST                       0: value
                312     POP_JUMP_IF_TRUE                5 (to 10)
                314     LOAD_FAST                       1: unstructured
                316     RETURN_VALUE                    
        'get_unstructured'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_qp_ctext
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_get_ptext_to_endchars'
                'WhiteSpaceTerminal'
                '_validate_xtext'
            [Var Names]
                'value'
                'ptext'
                '_'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "ctext = <printable ascii except \\ ( )>\n\n    This is not the RFC ctext, since we are handling nested comments in comment\n    and unquoting quoted-pairs here.  We allow anything except the '()'\n    characters, but if we find any ASCII other than the RFC defined printable\n    ASCII, a NonPrintableDefect is added to the token's defects list.  Since\n    quoted pairs are converted to their unquoted values, what is returned is\n    a 'ptext' token.  In this case it is a WhiteSpaceTerminal, so it's value\n    is ' '.\n\n    "
                '()'
                'ptext'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _get_ptext_to_endchars
                2       LOAD_FAST                       0: value
                4       LOAD_CONST                      1: '()'
                6       CALL_FUNCTION                   2
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      1: ptext
                12      STORE_FAST                      0: value
                14      STORE_FAST                      2: _
                16      LOAD_GLOBAL                     1: WhiteSpaceTerminal
                18      LOAD_FAST                       1: ptext
                20      LOAD_CONST                      2: 'ptext'
                22      CALL_FUNCTION                   2
                24      STORE_FAST                      1: ptext
                26      LOAD_GLOBAL                     2: _validate_xtext
                28      LOAD_FAST                       1: ptext
                30      CALL_FUNCTION                   1
                32      POP_TOP                         
                34      LOAD_FAST                       1: ptext
                36      LOAD_FAST                       0: value
                38      BUILD_TUPLE                     2
                40      RETURN_VALUE                    
        'get_qp_ctext'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_qcontent
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_get_ptext_to_endchars'
                'ValueTerminal'
                '_validate_xtext'
            [Var Names]
                'value'
                'ptext'
                '_'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "qcontent = qtext / quoted-pair\n\n    We allow anything except the DQUOTE character, but if we find any ASCII\n    other than the RFC defined printable ASCII, a NonPrintableDefect is\n    added to the token's defects list.  Any quoted pairs are converted to their\n    unquoted values, so what is returned is a 'ptext' token.  In this case it\n    is a ValueTerminal.\n\n    "
                '"'
                'ptext'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _get_ptext_to_endchars
                2       LOAD_FAST                       0: value
                4       LOAD_CONST                      1: '"'
                6       CALL_FUNCTION                   2
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      1: ptext
                12      STORE_FAST                      0: value
                14      STORE_FAST                      2: _
                16      LOAD_GLOBAL                     1: ValueTerminal
                18      LOAD_FAST                       1: ptext
                20      LOAD_CONST                      2: 'ptext'
                22      CALL_FUNCTION                   2
                24      STORE_FAST                      1: ptext
                26      LOAD_GLOBAL                     2: _validate_xtext
                28      LOAD_FAST                       1: ptext
                30      CALL_FUNCTION                   1
                32      POP_TOP                         
                34      LOAD_FAST                       1: ptext
                36      LOAD_FAST                       0: value
                38      BUILD_TUPLE                     2
                40      RETURN_VALUE                    
        'get_qcontent'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_atext
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_non_atom_end_matcher'
                'errors'
                'HeaderParseError'
                'format'
                'group'
                'len'
                'ValueTerminal'
                '_validate_xtext'
            [Var Names]
                'value'
                'm'
                'atext'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "atext = <matches _atext_matcher>\n\n    We allow any non-ATOM_ENDS in atext, but add an InvalidATextDefect to\n    the token's defects list if we find non-atext characters.\n    "
                "expected atext but found '{}'"
                None
                'atext'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _non_atom_end_matcher
                2       LOAD_FAST                       0: value
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      1: m
                8       LOAD_FAST                       1: m
                10      POP_JUMP_IF_TRUE                14 (to 28)
                12      LOAD_GLOBAL                     1: errors
                14      LOAD_METHOD                     2: HeaderParseError
                16      LOAD_CONST                      1: "expected atext but found '{}'"
                18      LOAD_METHOD                     3: format
                20      LOAD_FAST                       0: value
                22      CALL_METHOD                     1
                24      CALL_METHOD                     1
                26      RAISE_VARARGS                   1
                28      LOAD_FAST                       1: m
                30      LOAD_METHOD                     4: group
                32      CALL_METHOD                     0
                34      STORE_FAST                      2: atext
                36      LOAD_FAST                       0: value
                38      LOAD_GLOBAL                     5: len
                40      LOAD_FAST                       2: atext
                42      CALL_FUNCTION                   1
                44      LOAD_CONST                      2: None
                46      BUILD_SLICE                     2
                48      BINARY_SUBSCR                   
                50      STORE_FAST                      0: value
                52      LOAD_GLOBAL                     6: ValueTerminal
                54      LOAD_FAST                       2: atext
                56      LOAD_CONST                      3: 'atext'
                58      CALL_FUNCTION                   2
                60      STORE_FAST                      2: atext
                62      LOAD_GLOBAL                     7: _validate_xtext
                64      LOAD_FAST                       2: atext
                66      CALL_FUNCTION                   1
                68      POP_TOP                         
                70      LOAD_FAST                       2: atext
                72      LOAD_FAST                       0: value
                74      BUILD_TUPLE                     2
                76      RETURN_VALUE                    
        'get_atext'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_bare_quoted_string
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'errors'
                'HeaderParseError'
                'format'
                'BareQuotedString'
                'get_qcontent'
                'append'
                'WSP'
                'get_fws'
                'get_encoded_word'
                'defects'
                'InvalidHeaderDefect'
                'len'
                'token_type'
                'EWWhiteSpaceTerminal'
            [Var Names]
                'value'
                'bare_quoted_string'
                'token'
                'valid_ew'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'bare-quoted-string = DQUOTE *([FWS] qcontent) [FWS] DQUOTE\n\n    A quoted-string without the leading or trailing white space.  Its\n    value is the text between the quote marks, with whitespace\n    preserved and quoted pairs decoded.\n    '
                0
                '"'
                'expected \'"\' but found \'{}\''
                1
                None
                2
                '=?'
                False
                'encoded word inside quoted string'
                True
                -1
                'fws'
                -2
                'encoded-word'
                'end of header inside quoted string'
            [Disassembly]
                0       LOAD_FAST                       0: value
                2       LOAD_CONST                      1: 0
                4       BINARY_SUBSCR                   
                6       LOAD_CONST                      2: '"'
                8       COMPARE_OP                      3 (!=)
                10      POP_JUMP_IF_FALSE               14 (to 28)
                12      LOAD_GLOBAL                     0: errors
                14      LOAD_METHOD                     1: HeaderParseError
                16      LOAD_CONST                      3: 'expected \'"\' but found \'{}\''
                18      LOAD_METHOD                     2: format
                20      LOAD_FAST                       0: value
                22      CALL_METHOD                     1
                24      CALL_METHOD                     1
                26      RAISE_VARARGS                   1
                28      LOAD_GLOBAL                     3: BareQuotedString
                30      CALL_FUNCTION                   0
                32      STORE_FAST                      1: bare_quoted_string
                34      LOAD_FAST                       0: value
                36      LOAD_CONST                      4: 1
                38      LOAD_CONST                      5: None
                40      BUILD_SLICE                     2
                42      BINARY_SUBSCR                   
                44      STORE_FAST                      0: value
                46      LOAD_FAST                       0: value
                48      POP_JUMP_IF_FALSE               42 (to 84)
                50      LOAD_FAST                       0: value
                52      LOAD_CONST                      1: 0
                54      BINARY_SUBSCR                   
                56      LOAD_CONST                      2: '"'
                58      COMPARE_OP                      2 (==)
                60      POP_JUMP_IF_FALSE               42 (to 84)
                62      LOAD_GLOBAL                     4: get_qcontent
                64      LOAD_FAST                       0: value
                66      CALL_FUNCTION                   1
                68      UNPACK_SEQUENCE                 2
                70      STORE_FAST                      2: token
                72      STORE_FAST                      0: value
                74      LOAD_FAST                       1: bare_quoted_string
                76      LOAD_METHOD                     5: append
                78      LOAD_FAST                       2: token
                80      CALL_METHOD                     1
                82      POP_TOP                         
                84      LOAD_FAST                       0: value
                86      POP_JUMP_IF_FALSE               160 (to 320)
                88      LOAD_FAST                       0: value
                90      LOAD_CONST                      1: 0
                92      BINARY_SUBSCR                   
                94      LOAD_CONST                      2: '"'
                96      COMPARE_OP                      3 (!=)
                98      POP_JUMP_IF_FALSE               160 (to 320)
                100     LOAD_FAST                       0: value
                102     LOAD_CONST                      1: 0
                104     BINARY_SUBSCR                   
                106     LOAD_GLOBAL                     6: WSP
                108     CONTAINS_OP                     0 (in)
                110     POP_JUMP_IF_FALSE               63 (to 126)
                112     LOAD_GLOBAL                     7: get_fws
                114     LOAD_FAST                       0: value
                116     CALL_FUNCTION                   1
                118     UNPACK_SEQUENCE                 2
                120     STORE_FAST                      2: token
                122     STORE_FAST                      0: value
                124     JUMP_FORWARD                    84 (to 294)
                126     LOAD_FAST                       0: value
                128     LOAD_CONST                      5: None
                130     LOAD_CONST                      6: 2
                132     BUILD_SLICE                     2
                134     BINARY_SUBSCR                   
                136     LOAD_CONST                      7: '=?'
                138     COMPARE_OP                      2 (==)
                140     POP_JUMP_IF_FALSE               141 (to 282)
                142     LOAD_CONST                      8: False
                144     STORE_FAST                      3: valid_ew
                146     SETUP_FINALLY                   19 (to 186)
                148     LOAD_GLOBAL                     8: get_encoded_word
                150     LOAD_FAST                       0: value
                152     CALL_FUNCTION                   1
                154     UNPACK_SEQUENCE                 2
                156     STORE_FAST                      2: token
                158     STORE_FAST                      0: value
                160     LOAD_FAST                       1: bare_quoted_string
                162     LOAD_ATTR                       9: defects
                164     LOAD_METHOD                     5: append
                166     LOAD_GLOBAL                     0: errors
                168     LOAD_METHOD                     10: InvalidHeaderDefect
                170     LOAD_CONST                      9: 'encoded word inside quoted string'
                172     CALL_METHOD                     1
                174     CALL_METHOD                     1
                176     POP_TOP                         
                178     LOAD_CONST                      10: True
                180     STORE_FAST                      3: valid_ew
                182     POP_BLOCK                       
                184     JUMP_FORWARD                    16 (to 218)
                186     DUP_TOP                         
                188     LOAD_GLOBAL                     0: errors
                190     LOAD_ATTR                       1: HeaderParseError
                192     JUMP_IF_NOT_EXC_MATCH           108 (to 216)
                194     POP_TOP                         
                196     POP_TOP                         
                198     POP_TOP                         
                200     LOAD_GLOBAL                     4: get_qcontent
                202     LOAD_FAST                       0: value
                204     CALL_FUNCTION                   1
                206     UNPACK_SEQUENCE                 2
                208     STORE_FAST                      2: token
                210     STORE_FAST                      0: value
                212     POP_EXCEPT                      
                214     JUMP_FORWARD                    1 (to 218)
                216     RERAISE                         0
                218     LOAD_FAST                       3: valid_ew
                220     POP_JUMP_IF_FALSE               140 (to 280)
                222     LOAD_GLOBAL                     11: len
                224     LOAD_FAST                       1: bare_quoted_string
                226     CALL_FUNCTION                   1
                228     LOAD_CONST                      4: 1
                230     COMPARE_OP                      4 (>)
                232     POP_JUMP_IF_FALSE               140 (to 280)
                234     LOAD_FAST                       1: bare_quoted_string
                236     LOAD_CONST                      11: -1
                238     BINARY_SUBSCR                   
                240     LOAD_ATTR                       12: token_type
                242     LOAD_CONST                      12: 'fws'
                244     COMPARE_OP                      2 (==)
                246     POP_JUMP_IF_FALSE               140 (to 280)
                248     LOAD_FAST                       1: bare_quoted_string
                250     LOAD_CONST                      13: -2
                252     BINARY_SUBSCR                   
                254     LOAD_ATTR                       12: token_type
                256     LOAD_CONST                      14: 'encoded-word'
                258     COMPARE_OP                      2 (==)
                260     POP_JUMP_IF_FALSE               140 (to 280)
                262     LOAD_GLOBAL                     13: EWWhiteSpaceTerminal
                264     LOAD_FAST                       1: bare_quoted_string
                266     LOAD_CONST                      11: -1
                268     BINARY_SUBSCR                   
                270     LOAD_CONST                      12: 'fws'
                272     CALL_FUNCTION                   2
                274     LOAD_FAST                       1: bare_quoted_string
                276     LOAD_CONST                      11: -1
                278     STORE_SUBSCR                    
                280     JUMP_FORWARD                    6 (to 294)
                282     LOAD_GLOBAL                     4: get_qcontent
                284     LOAD_FAST                       0: value
                286     CALL_FUNCTION                   1
                288     UNPACK_SEQUENCE                 2
                290     STORE_FAST                      2: token
                292     STORE_FAST                      0: value
                294     LOAD_FAST                       1: bare_quoted_string
                296     LOAD_METHOD                     5: append
                298     LOAD_FAST                       2: token
                300     CALL_METHOD                     1
                302     POP_TOP                         
                304     LOAD_FAST                       0: value
                306     POP_JUMP_IF_FALSE               160 (to 320)
                308     LOAD_FAST                       0: value
                310     LOAD_CONST                      1: 0
                312     BINARY_SUBSCR                   
                314     LOAD_CONST                      2: '"'
                316     COMPARE_OP                      3 (!=)
                318     POP_JUMP_IF_TRUE                50 (to 100)
                320     LOAD_FAST                       0: value
                322     POP_JUMP_IF_TRUE                175 (to 350)
                324     LOAD_FAST                       1: bare_quoted_string
                326     LOAD_ATTR                       9: defects
                328     LOAD_METHOD                     5: append
                330     LOAD_GLOBAL                     0: errors
                332     LOAD_METHOD                     10: InvalidHeaderDefect
                334     LOAD_CONST                      15: 'end of header inside quoted string'
                336     CALL_METHOD                     1
                338     CALL_METHOD                     1
                340     POP_TOP                         
                342     LOAD_FAST                       1: bare_quoted_string
                344     LOAD_FAST                       0: value
                346     BUILD_TUPLE                     2
                348     RETURN_VALUE                    
                350     LOAD_FAST                       1: bare_quoted_string
                352     LOAD_FAST                       0: value
                354     LOAD_CONST                      4: 1
                356     LOAD_CONST                      5: None
                358     BUILD_SLICE                     2
                360     BINARY_SUBSCR                   
                362     BUILD_TUPLE                     2
                364     RETURN_VALUE                    
        'get_bare_quoted_string'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_comment
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'errors'
                'HeaderParseError'
                'format'
                'Comment'
                'WSP'
                'get_fws'
                'get_comment'
                'get_qp_ctext'
                'append'
                'defects'
                'InvalidHeaderDefect'
            [Var Names]
                'value'
                'comment'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'comment = "(" *([FWS] ccontent) [FWS] ")"\n       ccontent = ctext / quoted-pair / comment\n\n    We handle nested comments here, and quoted-pair in our qp-ctext routine.\n    '
                0
                '('
                "expected '(' but found '{}'"
                1
                None
                ')'
                'end of header inside comment'
            [Disassembly]
                0       LOAD_FAST                       0: value
                2       POP_JUMP_IF_FALSE               16 (to 32)
                4       LOAD_FAST                       0: value
                6       LOAD_CONST                      1: 0
                8       BINARY_SUBSCR                   
                10      LOAD_CONST                      2: '('
                12      COMPARE_OP                      3 (!=)
                14      POP_JUMP_IF_FALSE               16 (to 32)
                16      LOAD_GLOBAL                     0: errors
                18      LOAD_METHOD                     1: HeaderParseError
                20      LOAD_CONST                      3: "expected '(' but found '{}'"
                22      LOAD_METHOD                     2: format
                24      LOAD_FAST                       0: value
                26      CALL_METHOD                     1
                28      CALL_METHOD                     1
                30      RAISE_VARARGS                   1
                32      LOAD_GLOBAL                     3: Comment
                34      CALL_FUNCTION                   0
                36      STORE_FAST                      1: comment
                38      LOAD_FAST                       0: value
                40      LOAD_CONST                      4: 1
                42      LOAD_CONST                      5: None
                44      BUILD_SLICE                     2
                46      BINARY_SUBSCR                   
                48      STORE_FAST                      0: value
                50      LOAD_FAST                       0: value
                52      POP_JUMP_IF_FALSE               78 (to 156)
                54      LOAD_FAST                       0: value
                56      LOAD_CONST                      1: 0
                58      BINARY_SUBSCR                   
                60      LOAD_CONST                      6: ')'
                62      COMPARE_OP                      3 (!=)
                64      POP_JUMP_IF_FALSE               78 (to 156)
                66      LOAD_FAST                       0: value
                68      LOAD_CONST                      1: 0
                70      BINARY_SUBSCR                   
                72      LOAD_GLOBAL                     4: WSP
                74      CONTAINS_OP                     0 (in)
                76      POP_JUMP_IF_FALSE               46 (to 92)
                78      LOAD_GLOBAL                     5: get_fws
                80      LOAD_FAST                       0: value
                82      CALL_FUNCTION                   1
                84      UNPACK_SEQUENCE                 2
                86      STORE_FAST                      2: token
                88      STORE_FAST                      0: value
                90      JUMP_FORWARD                    19 (to 130)
                92      LOAD_FAST                       0: value
                94      LOAD_CONST                      1: 0
                96      BINARY_SUBSCR                   
                98      LOAD_CONST                      2: '('
                100     COMPARE_OP                      2 (==)
                102     POP_JUMP_IF_FALSE               59 (to 118)
                104     LOAD_GLOBAL                     6: get_comment
                106     LOAD_FAST                       0: value
                108     CALL_FUNCTION                   1
                110     UNPACK_SEQUENCE                 2
                112     STORE_FAST                      2: token
                114     STORE_FAST                      0: value
                116     JUMP_FORWARD                    6 (to 130)
                118     LOAD_GLOBAL                     7: get_qp_ctext
                120     LOAD_FAST                       0: value
                122     CALL_FUNCTION                   1
                124     UNPACK_SEQUENCE                 2
                126     STORE_FAST                      2: token
                128     STORE_FAST                      0: value
                130     LOAD_FAST                       1: comment
                132     LOAD_METHOD                     8: append
                134     LOAD_FAST                       2: token
                136     CALL_METHOD                     1
                138     POP_TOP                         
                140     LOAD_FAST                       0: value
                142     POP_JUMP_IF_FALSE               78 (to 156)
                144     LOAD_FAST                       0: value
                146     LOAD_CONST                      1: 0
                148     BINARY_SUBSCR                   
                150     LOAD_CONST                      6: ')'
                152     COMPARE_OP                      3 (!=)
                154     POP_JUMP_IF_TRUE                33 (to 66)
                156     LOAD_FAST                       0: value
                158     POP_JUMP_IF_TRUE                93 (to 186)
                160     LOAD_FAST                       1: comment
                162     LOAD_ATTR                       9: defects
                164     LOAD_METHOD                     8: append
                166     LOAD_GLOBAL                     0: errors
                168     LOAD_METHOD                     10: InvalidHeaderDefect
                170     LOAD_CONST                      7: 'end of header inside comment'
                172     CALL_METHOD                     1
                174     CALL_METHOD                     1
                176     POP_TOP                         
                178     LOAD_FAST                       1: comment
                180     LOAD_FAST                       0: value
                182     BUILD_TUPLE                     2
                184     RETURN_VALUE                    
                186     LOAD_FAST                       1: comment
                188     LOAD_FAST                       0: value
                190     LOAD_CONST                      4: 1
                192     LOAD_CONST                      5: None
                194     BUILD_SLICE                     2
                196     BINARY_SUBSCR                   
                198     BUILD_TUPLE                     2
                200     RETURN_VALUE                    
        'get_comment'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_cfws
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'CFWSList'
                'CFWS_LEADER'
                'WSP'
                'get_fws'
                'get_comment'
                'append'
            [Var Names]
                'value'
                'cfws'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'CFWS = (1*([FWS] comment) [FWS]) / FWS\n\n    '
                0
            [Disassembly]
                0       LOAD_GLOBAL                     0: CFWSList
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: cfws
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               43 (to 86)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: CFWS_LEADER
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               43 (to 86)
                22      LOAD_FAST                       0: value
                24      LOAD_CONST                      1: 0
                26      BINARY_SUBSCR                   
                28      LOAD_GLOBAL                     2: WSP
                30      CONTAINS_OP                     0 (in)
                32      POP_JUMP_IF_FALSE               24 (to 48)
                34      LOAD_GLOBAL                     3: get_fws
                36      LOAD_FAST                       0: value
                38      CALL_FUNCTION                   1
                40      UNPACK_SEQUENCE                 2
                42      STORE_FAST                      2: token
                44      STORE_FAST                      0: value
                46      JUMP_FORWARD                    6 (to 60)
                48      LOAD_GLOBAL                     4: get_comment
                50      LOAD_FAST                       0: value
                52      CALL_FUNCTION                   1
                54      UNPACK_SEQUENCE                 2
                56      STORE_FAST                      2: token
                58      STORE_FAST                      0: value
                60      LOAD_FAST                       1: cfws
                62      LOAD_METHOD                     5: append
                64      LOAD_FAST                       2: token
                66      CALL_METHOD                     1
                68      POP_TOP                         
                70      LOAD_FAST                       0: value
                72      POP_JUMP_IF_FALSE               43 (to 86)
                74      LOAD_FAST                       0: value
                76      LOAD_CONST                      1: 0
                78      BINARY_SUBSCR                   
                80      LOAD_GLOBAL                     1: CFWS_LEADER
                82      CONTAINS_OP                     0 (in)
                84      POP_JUMP_IF_TRUE                11 (to 22)
                86      LOAD_FAST                       1: cfws
                88      LOAD_FAST                       0: value
                90      BUILD_TUPLE                     2
                92      RETURN_VALUE                    
        'get_cfws'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_quoted_string
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'QuotedString'
                'CFWS_LEADER'
                'get_cfws'
                'append'
                'get_bare_quoted_string'
            [Var Names]
                'value'
                'quoted_string'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "quoted-string = [CFWS] <bare-quoted-string> [CFWS]\n\n    'bare-quoted-string' is an intermediate class defined by this\n    parser and not by the RFC grammar.  It is the quoted string\n    without any attached CFWS.\n    "
                0
            [Disassembly]
                0       LOAD_GLOBAL                     0: QuotedString
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: quoted_string
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               22 (to 44)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: CFWS_LEADER
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               22 (to 44)
                22      LOAD_GLOBAL                     2: get_cfws
                24      LOAD_FAST                       0: value
                26      CALL_FUNCTION                   1
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      2: token
                32      STORE_FAST                      0: value
                34      LOAD_FAST                       1: quoted_string
                36      LOAD_METHOD                     3: append
                38      LOAD_FAST                       2: token
                40      CALL_METHOD                     1
                42      POP_TOP                         
                44      LOAD_GLOBAL                     4: get_bare_quoted_string
                46      LOAD_FAST                       0: value
                48      CALL_FUNCTION                   1
                50      UNPACK_SEQUENCE                 2
                52      STORE_FAST                      2: token
                54      STORE_FAST                      0: value
                56      LOAD_FAST                       1: quoted_string
                58      LOAD_METHOD                     3: append
                60      LOAD_FAST                       2: token
                62      CALL_METHOD                     1
                64      POP_TOP                         
                66      LOAD_FAST                       0: value
                68      POP_JUMP_IF_FALSE               52 (to 104)
                70      LOAD_FAST                       0: value
                72      LOAD_CONST                      1: 0
                74      BINARY_SUBSCR                   
                76      LOAD_GLOBAL                     1: CFWS_LEADER
                78      CONTAINS_OP                     0 (in)
                80      POP_JUMP_IF_FALSE               52 (to 104)
                82      LOAD_GLOBAL                     2: get_cfws
                84      LOAD_FAST                       0: value
                86      CALL_FUNCTION                   1
                88      UNPACK_SEQUENCE                 2
                90      STORE_FAST                      2: token
                92      STORE_FAST                      0: value
                94      LOAD_FAST                       1: quoted_string
                96      LOAD_METHOD                     3: append
                98      LOAD_FAST                       2: token
                100     CALL_METHOD                     1
                102     POP_TOP                         
                104     LOAD_FAST                       1: quoted_string
                106     LOAD_FAST                       0: value
                108     BUILD_TUPLE                     2
                110     RETURN_VALUE                    
        'get_quoted_string'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_atom
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Atom'
                'CFWS_LEADER'
                'get_cfws'
                'append'
                'ATOM_ENDS'
                'errors'
                'HeaderParseError'
                'format'
                'startswith'
                'get_encoded_word'
                'get_atext'
            [Var Names]
                'value'
                'atom'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'atom = [CFWS] 1*atext [CFWS]\n\n    An atom could be an rfc2047 encoded word.\n    '
                0
                "expected atom but found '{}'"
                '=?'
            [Disassembly]
                0       LOAD_GLOBAL                     0: Atom
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: atom
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               22 (to 44)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: CFWS_LEADER
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               22 (to 44)
                22      LOAD_GLOBAL                     2: get_cfws
                24      LOAD_FAST                       0: value
                26      CALL_FUNCTION                   1
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      2: token
                32      STORE_FAST                      0: value
                34      LOAD_FAST                       1: atom
                36      LOAD_METHOD                     3: append
                38      LOAD_FAST                       2: token
                40      CALL_METHOD                     1
                42      POP_TOP                         
                44      LOAD_FAST                       0: value
                46      POP_JUMP_IF_FALSE               38 (to 76)
                48      LOAD_FAST                       0: value
                50      LOAD_CONST                      1: 0
                52      BINARY_SUBSCR                   
                54      LOAD_GLOBAL                     4: ATOM_ENDS
                56      CONTAINS_OP                     0 (in)
                58      POP_JUMP_IF_FALSE               38 (to 76)
                60      LOAD_GLOBAL                     5: errors
                62      LOAD_METHOD                     6: HeaderParseError
                64      LOAD_CONST                      2: "expected atom but found '{}'"
                66      LOAD_METHOD                     7: format
                68      LOAD_FAST                       0: value
                70      CALL_METHOD                     1
                72      CALL_METHOD                     1
                74      RAISE_VARARGS                   1
                76      LOAD_FAST                       0: value
                78      LOAD_METHOD                     8: startswith
                80      LOAD_CONST                      3: '=?'
                82      CALL_METHOD                     1
                84      POP_JUMP_IF_FALSE               68 (to 136)
                86      SETUP_FINALLY                   8 (to 104)
                88      LOAD_GLOBAL                     9: get_encoded_word
                90      LOAD_FAST                       0: value
                92      CALL_FUNCTION                   1
                94      UNPACK_SEQUENCE                 2
                96      STORE_FAST                      2: token
                98      STORE_FAST                      0: value
                100     POP_BLOCK                       
                102     JUMP_FORWARD                    22 (to 148)
                104     DUP_TOP                         
                106     LOAD_GLOBAL                     5: errors
                108     LOAD_ATTR                       6: HeaderParseError
                110     JUMP_IF_NOT_EXC_MATCH           67 (to 134)
                112     POP_TOP                         
                114     POP_TOP                         
                116     POP_TOP                         
                118     LOAD_GLOBAL                     10: get_atext
                120     LOAD_FAST                       0: value
                122     CALL_FUNCTION                   1
                124     UNPACK_SEQUENCE                 2
                126     STORE_FAST                      2: token
                128     STORE_FAST                      0: value
                130     POP_EXCEPT                      
                132     JUMP_FORWARD                    7 (to 148)
                134     RERAISE                         0
                136     LOAD_GLOBAL                     10: get_atext
                138     LOAD_FAST                       0: value
                140     CALL_FUNCTION                   1
                142     UNPACK_SEQUENCE                 2
                144     STORE_FAST                      2: token
                146     STORE_FAST                      0: value
                148     LOAD_FAST                       1: atom
                150     LOAD_METHOD                     3: append
                152     LOAD_FAST                       2: token
                154     CALL_METHOD                     1
                156     POP_TOP                         
                158     LOAD_FAST                       0: value
                160     POP_JUMP_IF_FALSE               98 (to 196)
                162     LOAD_FAST                       0: value
                164     LOAD_CONST                      1: 0
                166     BINARY_SUBSCR                   
                168     LOAD_GLOBAL                     1: CFWS_LEADER
                170     CONTAINS_OP                     0 (in)
                172     POP_JUMP_IF_FALSE               98 (to 196)
                174     LOAD_GLOBAL                     2: get_cfws
                176     LOAD_FAST                       0: value
                178     CALL_FUNCTION                   1
                180     UNPACK_SEQUENCE                 2
                182     STORE_FAST                      2: token
                184     STORE_FAST                      0: value
                186     LOAD_FAST                       1: atom
                188     LOAD_METHOD                     3: append
                190     LOAD_FAST                       2: token
                192     CALL_METHOD                     1
                194     POP_TOP                         
                196     LOAD_FAST                       1: atom
                198     LOAD_FAST                       0: value
                200     BUILD_TUPLE                     2
                202     RETURN_VALUE                    
        'get_atom'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_dot_atom_text
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'DotAtomText'
                'ATOM_ENDS'
                'errors'
                'HeaderParseError'
                'format'
                'get_atext'
                'append'
                'DOT'
            [Var Names]
                'value'
                'dot_atom_text'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' dot-text = 1*atext *("." 1*atext)\n\n    '
                0
                "expected atom at a start of dot-atom-text but found '{}'"
                '.'
                1
                None
                -1
                "expected atom at end of dot-atom-text but found '{}'"
            [Disassembly]
                0       LOAD_GLOBAL                     0: DotAtomText
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: dot_atom_text
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               11 (to 22)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: ATOM_ENDS
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               19 (to 38)
                22      LOAD_GLOBAL                     2: errors
                24      LOAD_METHOD                     3: HeaderParseError
                26      LOAD_CONST                      2: "expected atom at a start of dot-atom-text but found '{}'"
                28      LOAD_METHOD                     4: format
                30      LOAD_FAST                       0: value
                32      CALL_METHOD                     1
                34      CALL_METHOD                     1
                36      RAISE_VARARGS                   1
                38      LOAD_FAST                       0: value
                40      POP_JUMP_IF_FALSE               65 (to 130)
                42      LOAD_FAST                       0: value
                44      LOAD_CONST                      1: 0
                46      BINARY_SUBSCR                   
                48      LOAD_GLOBAL                     1: ATOM_ENDS
                50      CONTAINS_OP                     1 (not in)
                52      POP_JUMP_IF_FALSE               65 (to 130)
                54      LOAD_GLOBAL                     5: get_atext
                56      LOAD_FAST                       0: value
                58      CALL_FUNCTION                   1
                60      UNPACK_SEQUENCE                 2
                62      STORE_FAST                      2: token
                64      STORE_FAST                      0: value
                66      LOAD_FAST                       1: dot_atom_text
                68      LOAD_METHOD                     6: append
                70      LOAD_FAST                       2: token
                72      CALL_METHOD                     1
                74      POP_TOP                         
                76      LOAD_FAST                       0: value
                78      POP_JUMP_IF_FALSE               57 (to 114)
                80      LOAD_FAST                       0: value
                82      LOAD_CONST                      1: 0
                84      BINARY_SUBSCR                   
                86      LOAD_CONST                      3: '.'
                88      COMPARE_OP                      2 (==)
                90      POP_JUMP_IF_FALSE               57 (to 114)
                92      LOAD_FAST                       1: dot_atom_text
                94      LOAD_METHOD                     6: append
                96      LOAD_GLOBAL                     7: DOT
                98      CALL_METHOD                     1
                100     POP_TOP                         
                102     LOAD_FAST                       0: value
                104     LOAD_CONST                      4: 1
                106     LOAD_CONST                      5: None
                108     BUILD_SLICE                     2
                110     BINARY_SUBSCR                   
                112     STORE_FAST                      0: value
                114     LOAD_FAST                       0: value
                116     POP_JUMP_IF_FALSE               65 (to 130)
                118     LOAD_FAST                       0: value
                120     LOAD_CONST                      1: 0
                122     BINARY_SUBSCR                   
                124     LOAD_GLOBAL                     1: ATOM_ENDS
                126     CONTAINS_OP                     1 (not in)
                128     POP_JUMP_IF_TRUE                27 (to 54)
                130     LOAD_FAST                       1: dot_atom_text
                132     LOAD_CONST                      6: -1
                134     BINARY_SUBSCR                   
                136     LOAD_GLOBAL                     7: DOT
                138     IS_OP                           0 (is)
                140     POP_JUMP_IF_FALSE               81 (to 162)
                142     LOAD_GLOBAL                     2: errors
                144     LOAD_METHOD                     3: HeaderParseError
                146     LOAD_CONST                      7: "expected atom at end of dot-atom-text but found '{}'"
                148     LOAD_METHOD                     4: format
                150     LOAD_CONST                      3: '.'
                152     LOAD_FAST                       0: value
                154     BINARY_ADD                      
                156     CALL_METHOD                     1
                158     CALL_METHOD                     1
                160     RAISE_VARARGS                   1
                162     LOAD_FAST                       1: dot_atom_text
                164     LOAD_FAST                       0: value
                166     BUILD_TUPLE                     2
                168     RETURN_VALUE                    
        'get_dot_atom_text'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_dot_atom
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'DotAtom'
                'CFWS_LEADER'
                'get_cfws'
                'append'
                'startswith'
                'get_encoded_word'
                'errors'
                'HeaderParseError'
                'get_dot_atom_text'
            [Var Names]
                'value'
                'dot_atom'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' dot-atom = [CFWS] dot-atom-text [CFWS]\n\n    Any place we can have a dot atom, we could instead have an rfc2047 encoded\n    word.\n    '
                0
                '=?'
            [Disassembly]
                0       LOAD_GLOBAL                     0: DotAtom
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: dot_atom
                6       LOAD_FAST                       0: value
                8       LOAD_CONST                      1: 0
                10      BINARY_SUBSCR                   
                12      LOAD_GLOBAL                     1: CFWS_LEADER
                14      CONTAINS_OP                     0 (in)
                16      POP_JUMP_IF_FALSE               20 (to 40)
                18      LOAD_GLOBAL                     2: get_cfws
                20      LOAD_FAST                       0: value
                22      CALL_FUNCTION                   1
                24      UNPACK_SEQUENCE                 2
                26      STORE_FAST                      2: token
                28      STORE_FAST                      0: value
                30      LOAD_FAST                       1: dot_atom
                32      LOAD_METHOD                     3: append
                34      LOAD_FAST                       2: token
                36      CALL_METHOD                     1
                38      POP_TOP                         
                40      LOAD_FAST                       0: value
                42      LOAD_METHOD                     4: startswith
                44      LOAD_CONST                      2: '=?'
                46      CALL_METHOD                     1
                48      POP_JUMP_IF_FALSE               50 (to 100)
                50      SETUP_FINALLY                   8 (to 68)
                52      LOAD_GLOBAL                     5: get_encoded_word
                54      LOAD_FAST                       0: value
                56      CALL_FUNCTION                   1
                58      UNPACK_SEQUENCE                 2
                60      STORE_FAST                      2: token
                62      STORE_FAST                      0: value
                64      POP_BLOCK                       
                66      JUMP_FORWARD                    22 (to 112)
                68      DUP_TOP                         
                70      LOAD_GLOBAL                     6: errors
                72      LOAD_ATTR                       7: HeaderParseError
                74      JUMP_IF_NOT_EXC_MATCH           49 (to 98)
                76      POP_TOP                         
                78      POP_TOP                         
                80      POP_TOP                         
                82      LOAD_GLOBAL                     8: get_dot_atom_text
                84      LOAD_FAST                       0: value
                86      CALL_FUNCTION                   1
                88      UNPACK_SEQUENCE                 2
                90      STORE_FAST                      2: token
                92      STORE_FAST                      0: value
                94      POP_EXCEPT                      
                96      JUMP_FORWARD                    7 (to 112)
                98      RERAISE                         0
                100     LOAD_GLOBAL                     8: get_dot_atom_text
                102     LOAD_FAST                       0: value
                104     CALL_FUNCTION                   1
                106     UNPACK_SEQUENCE                 2
                108     STORE_FAST                      2: token
                110     STORE_FAST                      0: value
                112     LOAD_FAST                       1: dot_atom
                114     LOAD_METHOD                     3: append
                116     LOAD_FAST                       2: token
                118     CALL_METHOD                     1
                120     POP_TOP                         
                122     LOAD_FAST                       0: value
                124     POP_JUMP_IF_FALSE               80 (to 160)
                126     LOAD_FAST                       0: value
                128     LOAD_CONST                      1: 0
                130     BINARY_SUBSCR                   
                132     LOAD_GLOBAL                     1: CFWS_LEADER
                134     CONTAINS_OP                     0 (in)
                136     POP_JUMP_IF_FALSE               80 (to 160)
                138     LOAD_GLOBAL                     2: get_cfws
                140     LOAD_FAST                       0: value
                142     CALL_FUNCTION                   1
                144     UNPACK_SEQUENCE                 2
                146     STORE_FAST                      2: token
                148     STORE_FAST                      0: value
                150     LOAD_FAST                       1: dot_atom
                152     LOAD_METHOD                     3: append
                154     LOAD_FAST                       2: token
                156     CALL_METHOD                     1
                158     POP_TOP                         
                160     LOAD_FAST                       1: dot_atom
                162     LOAD_FAST                       0: value
                164     BUILD_TUPLE                     2
                166     RETURN_VALUE                    
        'get_dot_atom'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_word
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'CFWS_LEADER'
                'get_cfws'
                'errors'
                'HeaderParseError'
                'get_quoted_string'
                'SPECIALS'
                'format'
                'get_atom'
            [Var Names]
                'value'
                'leader'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "word = atom / quoted-string\n\n    Either atom or quoted-string may start with CFWS.  We have to peel off this\n    CFWS first to determine which type of word to parse.  Afterward we splice\n    the leading CFWS, if any, into the parsed sub-token.\n\n    If neither an atom or a quoted-string is found before the next special, a\n    HeaderParseError is raised.\n\n    The token returned is either an Atom or a QuotedString, as appropriate.\n    This means the 'word' level of the formal grammar is not represented in the\n    parse tree; this is because having that extra layer when manipulating the\n    parse tree is more confusing than it is helpful.\n\n    "
                0
                None
                "Expected 'atom' or 'quoted-string' but found nothing."
                '"'
                "Expected 'atom' or 'quoted-string' but found '{}'"
            [Disassembly]
                0       LOAD_FAST                       0: value
                2       LOAD_CONST                      1: 0
                4       BINARY_SUBSCR                   
                6       LOAD_GLOBAL                     0: CFWS_LEADER
                8       CONTAINS_OP                     0 (in)
                10      POP_JUMP_IF_FALSE               13 (to 26)
                12      LOAD_GLOBAL                     1: get_cfws
                14      LOAD_FAST                       0: value
                16      CALL_FUNCTION                   1
                18      UNPACK_SEQUENCE                 2
                20      STORE_FAST                      1: leader
                22      STORE_FAST                      0: value
                24      JUMP_FORWARD                    2 (to 30)
                26      LOAD_CONST                      2: None
                28      STORE_FAST                      1: leader
                30      LOAD_FAST                       0: value
                32      POP_JUMP_IF_TRUE                22 (to 44)
                34      LOAD_GLOBAL                     2: errors
                36      LOAD_METHOD                     3: HeaderParseError
                38      LOAD_CONST                      3: "Expected 'atom' or 'quoted-string' but found nothing."
                40      CALL_METHOD                     1
                42      RAISE_VARARGS                   1
                44      LOAD_FAST                       0: value
                46      LOAD_CONST                      1: 0
                48      BINARY_SUBSCR                   
                50      LOAD_CONST                      4: '"'
                52      COMPARE_OP                      2 (==)
                54      POP_JUMP_IF_FALSE               35 (to 70)
                56      LOAD_GLOBAL                     4: get_quoted_string
                58      LOAD_FAST                       0: value
                60      CALL_FUNCTION                   1
                62      UNPACK_SEQUENCE                 2
                64      STORE_FAST                      2: token
                66      STORE_FAST                      0: value
                68      JUMP_FORWARD                    20 (to 110)
                70      LOAD_FAST                       0: value
                72      LOAD_CONST                      1: 0
                74      BINARY_SUBSCR                   
                76      LOAD_GLOBAL                     5: SPECIALS
                78      CONTAINS_OP                     0 (in)
                80      POP_JUMP_IF_FALSE               49 (to 98)
                82      LOAD_GLOBAL                     2: errors
                84      LOAD_METHOD                     3: HeaderParseError
                86      LOAD_CONST                      5: "Expected 'atom' or 'quoted-string' but found '{}'"
                88      LOAD_METHOD                     6: format
                90      LOAD_FAST                       0: value
                92      CALL_METHOD                     1
                94      CALL_METHOD                     1
                96      RAISE_VARARGS                   1
                98      LOAD_GLOBAL                     7: get_atom
                100     LOAD_FAST                       0: value
                102     CALL_FUNCTION                   1
                104     UNPACK_SEQUENCE                 2
                106     STORE_FAST                      2: token
                108     STORE_FAST                      0: value
                110     LOAD_FAST                       1: leader
                112     LOAD_CONST                      2: None
                114     IS_OP                           1 (is not)
                116     POP_JUMP_IF_FALSE               66 (to 132)
                118     LOAD_FAST                       1: leader
                120     BUILD_LIST                      1
                122     LOAD_FAST                       2: token
                124     LOAD_CONST                      2: None
                126     LOAD_CONST                      1: 0
                128     BUILD_SLICE                     2
                130     STORE_SUBSCR                    
                132     LOAD_FAST                       2: token
                134     LOAD_FAST                       0: value
                136     BUILD_TUPLE                     2
                138     RETURN_VALUE                    
        'get_word'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_phrase
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Phrase'
                'get_word'
                'append'
                'errors'
                'HeaderParseError'
                'defects'
                'InvalidHeaderDefect'
                'PHRASE_ENDS'
                'DOT'
                'ObsoleteHeaderDefect'
                'CFWS_LEADER'
                'get_cfws'
            [Var Names]
                'value'
                'phrase'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' phrase = 1*word / obs-phrase\n        obs-phrase = word *(word / "." / CFWS)\n\n    This means a phrase can be a sequence of words, periods, and CFWS in any\n    order as long as it starts with at least one word.  If anything other than\n    words is detected, an ObsoleteHeaderDefect is added to the token\'s defect\n    list.  We also accept a phrase that starts with CFWS followed by a dot;\n    this is registered as an InvalidHeaderDefect, since it is not supported by\n    even the obsolete grammar.\n\n    '
                'phrase does not start with word'
                0
                '.'
                "period in 'phrase'"
                1
                None
                'comment found without atom'
            [Disassembly]
                0       LOAD_GLOBAL                     0: Phrase
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: phrase
                6       SETUP_FINALLY                   13 (to 34)
                8       LOAD_GLOBAL                     1: get_word
                10      LOAD_FAST                       0: value
                12      CALL_FUNCTION                   1
                14      UNPACK_SEQUENCE                 2
                16      STORE_FAST                      2: token
                18      STORE_FAST                      0: value
                20      LOAD_FAST                       1: phrase
                22      LOAD_METHOD                     2: append
                24      LOAD_FAST                       2: token
                26      CALL_METHOD                     1
                28      POP_TOP                         
                30      POP_BLOCK                       
                32      JUMP_FORWARD                    19 (to 72)
                34      DUP_TOP                         
                36      LOAD_GLOBAL                     3: errors
                38      LOAD_ATTR                       4: HeaderParseError
                40      JUMP_IF_NOT_EXC_MATCH           35 (to 70)
                42      POP_TOP                         
                44      POP_TOP                         
                46      POP_TOP                         
                48      LOAD_FAST                       1: phrase
                50      LOAD_ATTR                       5: defects
                52      LOAD_METHOD                     2: append
                54      LOAD_GLOBAL                     3: errors
                56      LOAD_METHOD                     6: InvalidHeaderDefect
                58      LOAD_CONST                      1: 'phrase does not start with word'
                60      CALL_METHOD                     1
                62      CALL_METHOD                     1
                64      POP_TOP                         
                66      POP_EXCEPT                      
                68      JUMP_FORWARD                    1 (to 72)
                70      RERAISE                         0
                72      LOAD_FAST                       0: value
                74      POP_JUMP_IF_FALSE               126 (to 252)
                76      LOAD_FAST                       0: value
                78      LOAD_CONST                      2: 0
                80      BINARY_SUBSCR                   
                82      LOAD_GLOBAL                     7: PHRASE_ENDS
                84      CONTAINS_OP                     1 (not in)
                86      POP_JUMP_IF_FALSE               126 (to 252)
                88      LOAD_FAST                       0: value
                90      LOAD_CONST                      2: 0
                92      BINARY_SUBSCR                   
                94      LOAD_CONST                      3: '.'
                96      COMPARE_OP                      2 (==)
                98      POP_JUMP_IF_FALSE               71 (to 142)
                100     LOAD_FAST                       1: phrase
                102     LOAD_METHOD                     2: append
                104     LOAD_GLOBAL                     8: DOT
                106     CALL_METHOD                     1
                108     POP_TOP                         
                110     LOAD_FAST                       1: phrase
                112     LOAD_ATTR                       5: defects
                114     LOAD_METHOD                     2: append
                116     LOAD_GLOBAL                     3: errors
                118     LOAD_METHOD                     9: ObsoleteHeaderDefect
                120     LOAD_CONST                      4: "period in 'phrase'"
                122     CALL_METHOD                     1
                124     CALL_METHOD                     1
                126     POP_TOP                         
                128     LOAD_FAST                       0: value
                130     LOAD_CONST                      5: 1
                132     LOAD_CONST                      6: None
                134     BUILD_SLICE                     2
                136     BINARY_SUBSCR                   
                138     STORE_FAST                      0: value
                140     JUMP_FORWARD                    47 (to 236)
                142     SETUP_FINALLY                   8 (to 160)
                144     LOAD_GLOBAL                     1: get_word
                146     LOAD_FAST                       0: value
                148     CALL_FUNCTION                   1
                150     UNPACK_SEQUENCE                 2
                152     STORE_FAST                      2: token
                154     STORE_FAST                      0: value
                156     POP_BLOCK                       
                158     JUMP_FORWARD                    33 (to 226)
                160     DUP_TOP                         
                162     LOAD_GLOBAL                     3: errors
                164     LOAD_ATTR                       4: HeaderParseError
                166     JUMP_IF_NOT_EXC_MATCH           112 (to 224)
                168     POP_TOP                         
                170     POP_TOP                         
                172     POP_TOP                         
                174     LOAD_FAST                       0: value
                176     LOAD_CONST                      2: 0
                178     BINARY_SUBSCR                   
                180     LOAD_GLOBAL                     10: CFWS_LEADER
                182     CONTAINS_OP                     0 (in)
                184     POP_JUMP_IF_FALSE               109 (to 218)
                186     LOAD_GLOBAL                     11: get_cfws
                188     LOAD_FAST                       0: value
                190     CALL_FUNCTION                   1
                192     UNPACK_SEQUENCE                 2
                194     STORE_FAST                      2: token
                196     STORE_FAST                      0: value
                198     LOAD_FAST                       1: phrase
                200     LOAD_ATTR                       5: defects
                202     LOAD_METHOD                     2: append
                204     LOAD_GLOBAL                     3: errors
                206     LOAD_METHOD                     9: ObsoleteHeaderDefect
                208     LOAD_CONST                      7: 'comment found without atom'
                210     CALL_METHOD                     1
                212     CALL_METHOD                     1
                214     POP_TOP                         
                216     JUMP_FORWARD                    1 (to 220)
                218     RAISE_VARARGS                   0
                220     POP_EXCEPT                      
                222     JUMP_FORWARD                    1 (to 226)
                224     RERAISE                         0
                226     LOAD_FAST                       1: phrase
                228     LOAD_METHOD                     2: append
                230     LOAD_FAST                       2: token
                232     CALL_METHOD                     1
                234     POP_TOP                         
                236     LOAD_FAST                       0: value
                238     POP_JUMP_IF_FALSE               126 (to 252)
                240     LOAD_FAST                       0: value
                242     LOAD_CONST                      2: 0
                244     BINARY_SUBSCR                   
                246     LOAD_GLOBAL                     7: PHRASE_ENDS
                248     CONTAINS_OP                     1 (not in)
                250     POP_JUMP_IF_TRUE                44 (to 88)
                252     LOAD_FAST                       1: phrase
                254     LOAD_FAST                       0: value
                256     BUILD_TUPLE                     2
                258     RETURN_VALUE                    
        'get_phrase'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_local_part
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 11
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'LocalPart'
                'CFWS_LEADER'
                'get_cfws'
                'errors'
                'HeaderParseError'
                'format'
                'get_dot_atom'
                'get_word'
                'PHRASE_ENDS'
                'TokenList'
                'append'
                'get_obs_local_part'
                'str'
                'token_type'
                'defects'
                'InvalidHeaderDefect'
                'ObsoleteHeaderDefect'
                'value'
                'encode'
                'UnicodeEncodeError'
                'NonASCIILocalPartDefect'
            [Var Names]
                'value'
                'local_part'
                'leader'
                'token'
                'obs_local_part'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' local-part = dot-atom / quoted-string / obs-local-part\n\n    '
                None
                0
                "expected local-part but found '{}'"
                '\\'
                'invalid-obs-local-part'
                'local-part is not dot-atom, quoted-string, or obs-local-part'
                'local-part is not a dot-atom (contains CFWS)'
                'ascii'
                'local-part contains non-ASCII characters)'
            [Disassembly]
                0       LOAD_GLOBAL                     0: LocalPart
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: local_part
                6       LOAD_CONST                      1: None
                8       STORE_FAST                      2: leader
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      2: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: CFWS_LEADER
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               17 (to 34)
                22      LOAD_GLOBAL                     2: get_cfws
                24      LOAD_FAST                       0: value
                26      CALL_FUNCTION                   1
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      2: leader
                32      STORE_FAST                      0: value
                34      LOAD_FAST                       0: value
                36      POP_JUMP_IF_TRUE                27 (to 54)
                38      LOAD_GLOBAL                     3: errors
                40      LOAD_METHOD                     4: HeaderParseError
                42      LOAD_CONST                      3: "expected local-part but found '{}'"
                44      LOAD_METHOD                     5: format
                46      LOAD_FAST                       0: value
                48      CALL_METHOD                     1
                50      CALL_METHOD                     1
                52      RAISE_VARARGS                   1
                54      SETUP_FINALLY                   8 (to 72)
                56      LOAD_GLOBAL                     6: get_dot_atom
                58      LOAD_FAST                       0: value
                60      CALL_FUNCTION                   1
                62      UNPACK_SEQUENCE                 2
                64      STORE_FAST                      3: token
                66      STORE_FAST                      0: value
                68      POP_BLOCK                       
                70      JUMP_FORWARD                    45 (to 162)
                72      DUP_TOP                         
                74      LOAD_GLOBAL                     3: errors
                76      LOAD_ATTR                       4: HeaderParseError
                78      JUMP_IF_NOT_EXC_MATCH           80 (to 160)
                80      POP_TOP                         
                82      POP_TOP                         
                84      POP_TOP                         
                86      SETUP_FINALLY                   8 (to 104)
                88      LOAD_GLOBAL                     7: get_word
                90      LOAD_FAST                       0: value
                92      CALL_FUNCTION                   1
                94      UNPACK_SEQUENCE                 2
                96      STORE_FAST                      3: token
                98      STORE_FAST                      0: value
                100     POP_BLOCK                       
                102     JUMP_FORWARD                    26 (to 156)
                104     DUP_TOP                         
                106     LOAD_GLOBAL                     3: errors
                108     LOAD_ATTR                       4: HeaderParseError
                110     JUMP_IF_NOT_EXC_MATCH           77 (to 154)
                112     POP_TOP                         
                114     POP_TOP                         
                116     POP_TOP                         
                118     LOAD_FAST                       0: value
                120     LOAD_CONST                      2: 0
                122     BINARY_SUBSCR                   
                124     LOAD_CONST                      4: '\\'
                126     COMPARE_OP                      3 (!=)
                128     POP_JUMP_IF_FALSE               72 (to 144)
                130     LOAD_FAST                       0: value
                132     LOAD_CONST                      2: 0
                134     BINARY_SUBSCR                   
                136     LOAD_GLOBAL                     8: PHRASE_ENDS
                138     CONTAINS_OP                     0 (in)
                140     POP_JUMP_IF_FALSE               72 (to 144)
                142     RAISE_VARARGS                   0
                144     LOAD_GLOBAL                     9: TokenList
                146     CALL_FUNCTION                   0
                148     STORE_FAST                      3: token
                150     POP_EXCEPT                      
                152     JUMP_FORWARD                    1 (to 156)
                154     RERAISE                         0
                156     POP_EXCEPT                      
                158     JUMP_FORWARD                    1 (to 162)
                160     RERAISE                         0
                162     LOAD_FAST                       2: leader
                164     LOAD_CONST                      1: None
                166     IS_OP                           1 (is not)
                168     POP_JUMP_IF_FALSE               92 (to 184)
                170     LOAD_FAST                       2: leader
                172     BUILD_LIST                      1
                174     LOAD_FAST                       3: token
                176     LOAD_CONST                      1: None
                178     LOAD_CONST                      2: 0
                180     BUILD_SLICE                     2
                182     STORE_SUBSCR                    
                184     LOAD_FAST                       1: local_part
                186     LOAD_METHOD                     10: append
                188     LOAD_FAST                       3: token
                190     CALL_METHOD                     1
                192     POP_TOP                         
                194     LOAD_FAST                       0: value
                196     POP_JUMP_IF_FALSE               149 (to 298)
                198     LOAD_FAST                       0: value
                200     LOAD_CONST                      2: 0
                202     BINARY_SUBSCR                   
                204     LOAD_CONST                      4: '\\'
                206     COMPARE_OP                      2 (==)
                208     POP_JUMP_IF_TRUE                111 (to 222)
                210     LOAD_FAST                       0: value
                212     LOAD_CONST                      2: 0
                214     BINARY_SUBSCR                   
                216     LOAD_GLOBAL                     8: PHRASE_ENDS
                218     CONTAINS_OP                     1 (not in)
                220     POP_JUMP_IF_FALSE               149 (to 298)
                222     LOAD_GLOBAL                     11: get_obs_local_part
                224     LOAD_GLOBAL                     12: str
                226     LOAD_FAST                       1: local_part
                228     CALL_FUNCTION                   1
                230     LOAD_FAST                       0: value
                232     BINARY_ADD                      
                234     CALL_FUNCTION                   1
                236     UNPACK_SEQUENCE                 2
                238     STORE_FAST                      4: obs_local_part
                240     STORE_FAST                      0: value
                242     LOAD_FAST                       4: obs_local_part
                244     LOAD_ATTR                       13: token_type
                246     LOAD_CONST                      5: 'invalid-obs-local-part'
                248     COMPARE_OP                      2 (==)
                250     POP_JUMP_IF_FALSE               136 (to 272)
                252     LOAD_FAST                       1: local_part
                254     LOAD_ATTR                       14: defects
                256     LOAD_METHOD                     10: append
                258     LOAD_GLOBAL                     3: errors
                260     LOAD_METHOD                     15: InvalidHeaderDefect
                262     LOAD_CONST                      6: 'local-part is not dot-atom, quoted-string, or obs-local-part'
                264     CALL_METHOD                     1
                266     CALL_METHOD                     1
                268     POP_TOP                         
                270     JUMP_FORWARD                    9 (to 290)
                272     LOAD_FAST                       1: local_part
                274     LOAD_ATTR                       14: defects
                276     LOAD_METHOD                     10: append
                278     LOAD_GLOBAL                     3: errors
                280     LOAD_METHOD                     16: ObsoleteHeaderDefect
                282     LOAD_CONST                      7: 'local-part is not a dot-atom (contains CFWS)'
                284     CALL_METHOD                     1
                286     CALL_METHOD                     1
                288     POP_TOP                         
                290     LOAD_FAST                       4: obs_local_part
                292     LOAD_FAST                       1: local_part
                294     LOAD_CONST                      2: 0
                296     STORE_SUBSCR                    
                298     SETUP_FINALLY                   11 (to 322)
                300     LOAD_FAST                       1: local_part
                302     LOAD_ATTR                       17: value
                304     LOAD_METHOD                     18: encode
                306     LOAD_CONST                      8: 'ascii'
                308     CALL_METHOD                     1
                310     POP_TOP                         
                312     POP_BLOCK                       
                314     LOAD_FAST                       1: local_part
                316     LOAD_FAST                       0: value
                318     BUILD_TUPLE                     2
                320     RETURN_VALUE                    
                322     DUP_TOP                         
                324     LOAD_GLOBAL                     19: UnicodeEncodeError
                326     JUMP_IF_NOT_EXC_MATCH           181 (to 362)
                328     POP_TOP                         
                330     POP_TOP                         
                332     POP_TOP                         
                334     LOAD_FAST                       1: local_part
                336     LOAD_ATTR                       14: defects
                338     LOAD_METHOD                     10: append
                340     LOAD_GLOBAL                     3: errors
                342     LOAD_METHOD                     20: NonASCIILocalPartDefect
                344     LOAD_CONST                      9: 'local-part contains non-ASCII characters)'
                346     CALL_METHOD                     1
                348     CALL_METHOD                     1
                350     POP_TOP                         
                352     POP_EXCEPT                      
                354     LOAD_FAST                       1: local_part
                356     LOAD_FAST                       0: value
                358     BUILD_TUPLE                     2
                360     RETURN_VALUE                    
                362     RERAISE                         0
        'get_local_part'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_obs_local_part
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ObsLocalPart'
                'PHRASE_ENDS'
                'defects'
                'append'
                'errors'
                'InvalidHeaderDefect'
                'DOT'
                'ValueTerminal'
                'token_type'
                'get_word'
                'HeaderParseError'
                'CFWS_LEADER'
                'get_cfws'
            [Var Names]
                'value'
                'obs_local_part'
                'last_non_ws_was_dot'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' obs-local-part = word *("." word)\n    '
                False
                0
                '\\'
                '.'
                "invalid repeated '.'"
                True
                1
                None
                'misplaced-special'
                "'\\' character outside of quoted-string/ccontent"
                -1
                'dot'
                "missing '.' between words"
                'cfws'
                "Invalid leading '.' in local part"
                -2
                "Invalid trailing '.' in local part"
                'invalid-obs-local-part'
            [Disassembly]
                0       LOAD_GLOBAL                     0: ObsLocalPart
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: obs_local_part
                6       LOAD_CONST                      1: False
                8       STORE_FAST                      2: last_non_ws_was_dot
                10      LOAD_FAST                       0: value
                12      POP_JUMP_IF_FALSE               155 (to 310)
                14      LOAD_FAST                       0: value
                16      LOAD_CONST                      2: 0
                18      BINARY_SUBSCR                   
                20      LOAD_CONST                      3: '\\'
                22      COMPARE_OP                      2 (==)
                24      POP_JUMP_IF_TRUE                19 (to 38)
                26      LOAD_FAST                       0: value
                28      LOAD_CONST                      2: 0
                30      BINARY_SUBSCR                   
                32      LOAD_GLOBAL                     1: PHRASE_ENDS
                34      CONTAINS_OP                     1 (not in)
                36      POP_JUMP_IF_FALSE               155 (to 310)
                38      LOAD_FAST                       0: value
                40      LOAD_CONST                      2: 0
                42      BINARY_SUBSCR                   
                44      LOAD_CONST                      4: '.'
                46      COMPARE_OP                      2 (==)
                48      POP_JUMP_IF_FALSE               50 (to 100)
                50      LOAD_FAST                       2: last_non_ws_was_dot
                52      POP_JUMP_IF_FALSE               36 (to 72)
                54      LOAD_FAST                       1: obs_local_part
                56      LOAD_ATTR                       2: defects
                58      LOAD_METHOD                     3: append
                60      LOAD_GLOBAL                     4: errors
                62      LOAD_METHOD                     5: InvalidHeaderDefect
                64      LOAD_CONST                      5: "invalid repeated '.'"
                66      CALL_METHOD                     1
                68      CALL_METHOD                     1
                70      POP_TOP                         
                72      LOAD_FAST                       1: obs_local_part
                74      LOAD_METHOD                     3: append
                76      LOAD_GLOBAL                     6: DOT
                78      CALL_METHOD                     1
                80      POP_TOP                         
                82      LOAD_CONST                      6: True
                84      STORE_FAST                      2: last_non_ws_was_dot
                86      LOAD_FAST                       0: value
                88      LOAD_CONST                      7: 1
                90      LOAD_CONST                      8: None
                92      BUILD_SLICE                     2
                94      BINARY_SUBSCR                   
                96      STORE_FAST                      0: value
                98      JUMP_ABSOLUTE                   5 (to 10)
                100     LOAD_FAST                       0: value
                102     LOAD_CONST                      2: 0
                104     BINARY_SUBSCR                   
                106     LOAD_CONST                      3: '\\'
                108     COMPARE_OP                      2 (==)
                110     POP_JUMP_IF_FALSE               84 (to 168)
                112     LOAD_FAST                       1: obs_local_part
                114     LOAD_METHOD                     3: append
                116     LOAD_GLOBAL                     7: ValueTerminal
                118     LOAD_FAST                       0: value
                120     LOAD_CONST                      2: 0
                122     BINARY_SUBSCR                   
                124     LOAD_CONST                      9: 'misplaced-special'
                126     CALL_FUNCTION                   2
                128     CALL_METHOD                     1
                130     POP_TOP                         
                132     LOAD_FAST                       0: value
                134     LOAD_CONST                      7: 1
                136     LOAD_CONST                      8: None
                138     BUILD_SLICE                     2
                140     BINARY_SUBSCR                   
                142     STORE_FAST                      0: value
                144     LOAD_FAST                       1: obs_local_part
                146     LOAD_ATTR                       2: defects
                148     LOAD_METHOD                     3: append
                150     LOAD_GLOBAL                     4: errors
                152     LOAD_METHOD                     5: InvalidHeaderDefect
                154     LOAD_CONST                      10: "'\\' character outside of quoted-string/ccontent"
                156     CALL_METHOD                     1
                158     CALL_METHOD                     1
                160     POP_TOP                         
                162     LOAD_CONST                      1: False
                164     STORE_FAST                      2: last_non_ws_was_dot
                166     JUMP_ABSOLUTE                   5 (to 10)
                168     LOAD_FAST                       1: obs_local_part
                170     POP_JUMP_IF_FALSE               102 (to 204)
                172     LOAD_FAST                       1: obs_local_part
                174     LOAD_CONST                      11: -1
                176     BINARY_SUBSCR                   
                178     LOAD_ATTR                       8: token_type
                180     LOAD_CONST                      12: 'dot'
                182     COMPARE_OP                      3 (!=)
                184     POP_JUMP_IF_FALSE               102 (to 204)
                186     LOAD_FAST                       1: obs_local_part
                188     LOAD_ATTR                       2: defects
                190     LOAD_METHOD                     3: append
                192     LOAD_GLOBAL                     4: errors
                194     LOAD_METHOD                     5: InvalidHeaderDefect
                196     LOAD_CONST                      13: "missing '.' between words"
                198     CALL_METHOD                     1
                200     CALL_METHOD                     1
                202     POP_TOP                         
                204     SETUP_FINALLY                   10 (to 226)
                206     LOAD_GLOBAL                     9: get_word
                208     LOAD_FAST                       0: value
                210     CALL_FUNCTION                   1
                212     UNPACK_SEQUENCE                 2
                214     STORE_FAST                      3: token
                216     STORE_FAST                      0: value
                218     LOAD_CONST                      1: False
                220     STORE_FAST                      2: last_non_ws_was_dot
                222     POP_BLOCK                       
                224     JUMP_FORWARD                    23 (to 272)
                226     DUP_TOP                         
                228     LOAD_GLOBAL                     4: errors
                230     LOAD_ATTR                       10: HeaderParseError
                232     JUMP_IF_NOT_EXC_MATCH           135 (to 270)
                234     POP_TOP                         
                236     POP_TOP                         
                238     POP_TOP                         
                240     LOAD_FAST                       0: value
                242     LOAD_CONST                      2: 0
                244     BINARY_SUBSCR                   
                246     LOAD_GLOBAL                     11: CFWS_LEADER
                248     CONTAINS_OP                     1 (not in)
                250     POP_JUMP_IF_FALSE               127 (to 254)
                252     RAISE_VARARGS                   0
                254     LOAD_GLOBAL                     12: get_cfws
                256     LOAD_FAST                       0: value
                258     CALL_FUNCTION                   1
                260     UNPACK_SEQUENCE                 2
                262     STORE_FAST                      3: token
                264     STORE_FAST                      0: value
                266     POP_EXCEPT                      
                268     JUMP_FORWARD                    1 (to 272)
                270     RERAISE                         0
                272     LOAD_FAST                       1: obs_local_part
                274     LOAD_METHOD                     3: append
                276     LOAD_FAST                       3: token
                278     CALL_METHOD                     1
                280     POP_TOP                         
                282     LOAD_FAST                       0: value
                284     POP_JUMP_IF_FALSE               155 (to 310)
                286     LOAD_FAST                       0: value
                288     LOAD_CONST                      2: 0
                290     BINARY_SUBSCR                   
                292     LOAD_CONST                      3: '\\'
                294     COMPARE_OP                      2 (==)
                296     POP_JUMP_IF_TRUE                19 (to 38)
                298     LOAD_FAST                       0: value
                300     LOAD_CONST                      2: 0
                302     BINARY_SUBSCR                   
                304     LOAD_GLOBAL                     1: PHRASE_ENDS
                306     CONTAINS_OP                     1 (not in)
                308     POP_JUMP_IF_TRUE                19 (to 38)
                310     LOAD_FAST                       1: obs_local_part
                312     LOAD_CONST                      2: 0
                314     BINARY_SUBSCR                   
                316     LOAD_ATTR                       8: token_type
                318     LOAD_CONST                      12: 'dot'
                320     COMPARE_OP                      2 (==)
                322     POP_JUMP_IF_TRUE                176 (to 352)
                324     LOAD_FAST                       1: obs_local_part
                326     LOAD_CONST                      2: 0
                328     BINARY_SUBSCR                   
                330     LOAD_ATTR                       8: token_type
                332     LOAD_CONST                      14: 'cfws'
                334     COMPARE_OP                      2 (==)
                336     POP_JUMP_IF_FALSE               185 (to 370)
                338     LOAD_FAST                       1: obs_local_part
                340     LOAD_CONST                      7: 1
                342     BINARY_SUBSCR                   
                344     LOAD_ATTR                       8: token_type
                346     LOAD_CONST                      12: 'dot'
                348     COMPARE_OP                      2 (==)
                350     POP_JUMP_IF_FALSE               185 (to 370)
                352     LOAD_FAST                       1: obs_local_part
                354     LOAD_ATTR                       2: defects
                356     LOAD_METHOD                     3: append
                358     LOAD_GLOBAL                     4: errors
                360     LOAD_METHOD                     5: InvalidHeaderDefect
                362     LOAD_CONST                      15: "Invalid leading '.' in local part"
                364     CALL_METHOD                     1
                366     CALL_METHOD                     1
                368     POP_TOP                         
                370     LOAD_FAST                       1: obs_local_part
                372     LOAD_CONST                      11: -1
                374     BINARY_SUBSCR                   
                376     LOAD_ATTR                       8: token_type
                378     LOAD_CONST                      12: 'dot'
                380     COMPARE_OP                      2 (==)
                382     POP_JUMP_IF_TRUE                206 (to 412)
                384     LOAD_FAST                       1: obs_local_part
                386     LOAD_CONST                      11: -1
                388     BINARY_SUBSCR                   
                390     LOAD_ATTR                       8: token_type
                392     LOAD_CONST                      14: 'cfws'
                394     COMPARE_OP                      2 (==)
                396     POP_JUMP_IF_FALSE               215 (to 430)
                398     LOAD_FAST                       1: obs_local_part
                400     LOAD_CONST                      16: -2
                402     BINARY_SUBSCR                   
                404     LOAD_ATTR                       8: token_type
                406     LOAD_CONST                      12: 'dot'
                408     COMPARE_OP                      2 (==)
                410     POP_JUMP_IF_FALSE               215 (to 430)
                412     LOAD_FAST                       1: obs_local_part
                414     LOAD_ATTR                       2: defects
                416     LOAD_METHOD                     3: append
                418     LOAD_GLOBAL                     4: errors
                420     LOAD_METHOD                     5: InvalidHeaderDefect
                422     LOAD_CONST                      17: "Invalid trailing '.' in local part"
                424     CALL_METHOD                     1
                426     CALL_METHOD                     1
                428     POP_TOP                         
                430     LOAD_FAST                       1: obs_local_part
                432     LOAD_ATTR                       2: defects
                434     POP_JUMP_IF_FALSE               221 (to 442)
                436     LOAD_CONST                      18: 'invalid-obs-local-part'
                438     LOAD_FAST                       1: obs_local_part
                440     STORE_ATTR                      8: token_type
                442     LOAD_FAST                       1: obs_local_part
                444     LOAD_FAST                       0: value
                446     BUILD_TUPLE                     2
                448     RETURN_VALUE                    
        'get_obs_local_part'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_dtext
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_get_ptext_to_endchars'
                'ValueTerminal'
                'defects'
                'append'
                'errors'
                'ObsoleteHeaderDefect'
                '_validate_xtext'
            [Var Names]
                'value'
                'ptext'
                'had_qp'
            [Free Vars]
            [Cell Vars]
            [Constants]
                " dtext = <printable ascii except \\ [ ]> / obs-dtext\n        obs-dtext = obs-NO-WS-CTL / quoted-pair\n\n    We allow anything except the excluded characters, but if we find any\n    ASCII other than the RFC defined printable ASCII, a NonPrintableDefect is\n    added to the token's defects list.  Quoted pairs are converted to their\n    unquoted values, so what is returned is a ptext token, in this case a\n    ValueTerminal.  If there were quoted-printables, an ObsoleteHeaderDefect is\n    added to the returned token's defect list.\n\n    "
                '[]'
                'ptext'
                'quoted printable found in domain-literal'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _get_ptext_to_endchars
                2       LOAD_FAST                       0: value
                4       LOAD_CONST                      1: '[]'
                6       CALL_FUNCTION                   2
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      1: ptext
                12      STORE_FAST                      0: value
                14      STORE_FAST                      2: had_qp
                16      LOAD_GLOBAL                     1: ValueTerminal
                18      LOAD_FAST                       1: ptext
                20      LOAD_CONST                      2: 'ptext'
                22      CALL_FUNCTION                   2
                24      STORE_FAST                      1: ptext
                26      LOAD_FAST                       2: had_qp
                28      POP_JUMP_IF_FALSE               24 (to 48)
                30      LOAD_FAST                       1: ptext
                32      LOAD_ATTR                       2: defects
                34      LOAD_METHOD                     3: append
                36      LOAD_GLOBAL                     4: errors
                38      LOAD_METHOD                     5: ObsoleteHeaderDefect
                40      LOAD_CONST                      3: 'quoted printable found in domain-literal'
                42      CALL_METHOD                     1
                44      CALL_METHOD                     1
                46      POP_TOP                         
                48      LOAD_GLOBAL                     6: _validate_xtext
                50      LOAD_FAST                       1: ptext
                52      CALL_FUNCTION                   1
                54      POP_TOP                         
                56      LOAD_FAST                       1: ptext
                58      LOAD_FAST                       0: value
                60      BUILD_TUPLE                     2
                62      RETURN_VALUE                    
        'get_dtext'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: _check_for_early_dl_end
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'append'
                'errors'
                'InvalidHeaderDefect'
                'ValueTerminal'
            [Var Names]
                'value'
                'domain_literal'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                False
                'end of input inside domain-literal'
                ']'
                'domain-literal-end'
                True
            [Disassembly]
                0       LOAD_FAST                       0: value
                2       POP_JUMP_IF_FALSE               4 (to 8)
                4       LOAD_CONST                      1: False
                6       RETURN_VALUE                    
                8       LOAD_FAST                       1: domain_literal
                10      LOAD_METHOD                     0: append
                12      LOAD_GLOBAL                     1: errors
                14      LOAD_METHOD                     2: InvalidHeaderDefect
                16      LOAD_CONST                      2: 'end of input inside domain-literal'
                18      CALL_METHOD                     1
                20      CALL_METHOD                     1
                22      POP_TOP                         
                24      LOAD_FAST                       1: domain_literal
                26      LOAD_METHOD                     0: append
                28      LOAD_GLOBAL                     3: ValueTerminal
                30      LOAD_CONST                      3: ']'
                32      LOAD_CONST                      4: 'domain-literal-end'
                34      CALL_FUNCTION                   2
                36      CALL_METHOD                     1
                38      POP_TOP                         
                40      LOAD_CONST                      5: True
                42      RETURN_VALUE                    
        '_check_for_early_dl_end'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_domain_literal
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'DomainLiteral'
                'CFWS_LEADER'
                'get_cfws'
                'append'
                'errors'
                'HeaderParseError'
                'format'
                '_check_for_early_dl_end'
                'ValueTerminal'
                'WSP'
                'get_fws'
                'get_dtext'
            [Var Names]
                'value'
                'domain_literal'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' domain-literal = [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]\n\n    '
                0
                'expected domain-literal'
                '['
                "expected '[' at start of domain-literal but found '{}'"
                1
                None
                'domain-literal-start'
                ']'
                "expected ']' at end of domain-literal but found '{}'"
                'domain-literal-end'
            [Disassembly]
                0       LOAD_GLOBAL                     0: DomainLiteral
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: domain_literal
                6       LOAD_FAST                       0: value
                8       LOAD_CONST                      1: 0
                10      BINARY_SUBSCR                   
                12      LOAD_GLOBAL                     1: CFWS_LEADER
                14      CONTAINS_OP                     0 (in)
                16      POP_JUMP_IF_FALSE               20 (to 40)
                18      LOAD_GLOBAL                     2: get_cfws
                20      LOAD_FAST                       0: value
                22      CALL_FUNCTION                   1
                24      UNPACK_SEQUENCE                 2
                26      STORE_FAST                      2: token
                28      STORE_FAST                      0: value
                30      LOAD_FAST                       1: domain_literal
                32      LOAD_METHOD                     3: append
                34      LOAD_FAST                       2: token
                36      CALL_METHOD                     1
                38      POP_TOP                         
                40      LOAD_FAST                       0: value
                42      POP_JUMP_IF_TRUE                27 (to 54)
                44      LOAD_GLOBAL                     4: errors
                46      LOAD_METHOD                     5: HeaderParseError
                48      LOAD_CONST                      2: 'expected domain-literal'
                50      CALL_METHOD                     1
                52      RAISE_VARARGS                   1
                54      LOAD_FAST                       0: value
                56      LOAD_CONST                      1: 0
                58      BINARY_SUBSCR                   
                60      LOAD_CONST                      3: '['
                62      COMPARE_OP                      3 (!=)
                64      POP_JUMP_IF_FALSE               41 (to 82)
                66      LOAD_GLOBAL                     4: errors
                68      LOAD_METHOD                     5: HeaderParseError
                70      LOAD_CONST                      4: "expected '[' at start of domain-literal but found '{}'"
                72      LOAD_METHOD                     6: format
                74      LOAD_FAST                       0: value
                76      CALL_METHOD                     1
                78      CALL_METHOD                     1
                80      RAISE_VARARGS                   1
                82      LOAD_FAST                       0: value
                84      LOAD_CONST                      5: 1
                86      LOAD_CONST                      6: None
                88      BUILD_SLICE                     2
                90      BINARY_SUBSCR                   
                92      STORE_FAST                      0: value
                94      LOAD_GLOBAL                     7: _check_for_early_dl_end
                96      LOAD_FAST                       0: value
                98      LOAD_FAST                       1: domain_literal
                100     CALL_FUNCTION                   2
                102     POP_JUMP_IF_FALSE               56 (to 112)
                104     LOAD_FAST                       1: domain_literal
                106     LOAD_FAST                       0: value
                108     BUILD_TUPLE                     2
                110     RETURN_VALUE                    
                112     LOAD_FAST                       1: domain_literal
                114     LOAD_METHOD                     3: append
                116     LOAD_GLOBAL                     8: ValueTerminal
                118     LOAD_CONST                      3: '['
                120     LOAD_CONST                      7: 'domain-literal-start'
                122     CALL_FUNCTION                   2
                124     CALL_METHOD                     1
                126     POP_TOP                         
                128     LOAD_FAST                       0: value
                130     LOAD_CONST                      1: 0
                132     BINARY_SUBSCR                   
                134     LOAD_GLOBAL                     9: WSP
                136     CONTAINS_OP                     0 (in)
                138     POP_JUMP_IF_FALSE               81 (to 162)
                140     LOAD_GLOBAL                     10: get_fws
                142     LOAD_FAST                       0: value
                144     CALL_FUNCTION                   1
                146     UNPACK_SEQUENCE                 2
                148     STORE_FAST                      2: token
                150     STORE_FAST                      0: value
                152     LOAD_FAST                       1: domain_literal
                154     LOAD_METHOD                     3: append
                156     LOAD_FAST                       2: token
                158     CALL_METHOD                     1
                160     POP_TOP                         
                162     LOAD_GLOBAL                     11: get_dtext
                164     LOAD_FAST                       0: value
                166     CALL_FUNCTION                   1
                168     UNPACK_SEQUENCE                 2
                170     STORE_FAST                      2: token
                172     STORE_FAST                      0: value
                174     LOAD_FAST                       1: domain_literal
                176     LOAD_METHOD                     3: append
                178     LOAD_FAST                       2: token
                180     CALL_METHOD                     1
                182     POP_TOP                         
                184     LOAD_GLOBAL                     7: _check_for_early_dl_end
                186     LOAD_FAST                       0: value
                188     LOAD_FAST                       1: domain_literal
                190     CALL_FUNCTION                   2
                192     POP_JUMP_IF_FALSE               101 (to 202)
                194     LOAD_FAST                       1: domain_literal
                196     LOAD_FAST                       0: value
                198     BUILD_TUPLE                     2
                200     RETURN_VALUE                    
                202     LOAD_FAST                       0: value
                204     LOAD_CONST                      1: 0
                206     BINARY_SUBSCR                   
                208     LOAD_GLOBAL                     9: WSP
                210     CONTAINS_OP                     0 (in)
                212     POP_JUMP_IF_FALSE               118 (to 236)
                214     LOAD_GLOBAL                     10: get_fws
                216     LOAD_FAST                       0: value
                218     CALL_FUNCTION                   1
                220     UNPACK_SEQUENCE                 2
                222     STORE_FAST                      2: token
                224     STORE_FAST                      0: value
                226     LOAD_FAST                       1: domain_literal
                228     LOAD_METHOD                     3: append
                230     LOAD_FAST                       2: token
                232     CALL_METHOD                     1
                234     POP_TOP                         
                236     LOAD_GLOBAL                     7: _check_for_early_dl_end
                238     LOAD_FAST                       0: value
                240     LOAD_FAST                       1: domain_literal
                242     CALL_FUNCTION                   2
                244     POP_JUMP_IF_FALSE               127 (to 254)
                246     LOAD_FAST                       1: domain_literal
                248     LOAD_FAST                       0: value
                250     BUILD_TUPLE                     2
                252     RETURN_VALUE                    
                254     LOAD_FAST                       0: value
                256     LOAD_CONST                      1: 0
                258     BINARY_SUBSCR                   
                260     LOAD_CONST                      8: ']'
                262     COMPARE_OP                      3 (!=)
                264     POP_JUMP_IF_FALSE               141 (to 282)
                266     LOAD_GLOBAL                     4: errors
                268     LOAD_METHOD                     5: HeaderParseError
                270     LOAD_CONST                      9: "expected ']' at end of domain-literal but found '{}'"
                272     LOAD_METHOD                     6: format
                274     LOAD_FAST                       0: value
                276     CALL_METHOD                     1
                278     CALL_METHOD                     1
                280     RAISE_VARARGS                   1
                282     LOAD_FAST                       1: domain_literal
                284     LOAD_METHOD                     3: append
                286     LOAD_GLOBAL                     8: ValueTerminal
                288     LOAD_CONST                      8: ']'
                290     LOAD_CONST                      10: 'domain-literal-end'
                292     CALL_FUNCTION                   2
                294     CALL_METHOD                     1
                296     POP_TOP                         
                298     LOAD_FAST                       0: value
                300     LOAD_CONST                      5: 1
                302     LOAD_CONST                      6: None
                304     BUILD_SLICE                     2
                306     BINARY_SUBSCR                   
                308     STORE_FAST                      0: value
                310     LOAD_FAST                       0: value
                312     POP_JUMP_IF_FALSE               174 (to 348)
                314     LOAD_FAST                       0: value
                316     LOAD_CONST                      1: 0
                318     BINARY_SUBSCR                   
                320     LOAD_GLOBAL                     1: CFWS_LEADER
                322     CONTAINS_OP                     0 (in)
                324     POP_JUMP_IF_FALSE               174 (to 348)
                326     LOAD_GLOBAL                     2: get_cfws
                328     LOAD_FAST                       0: value
                330     CALL_FUNCTION                   1
                332     UNPACK_SEQUENCE                 2
                334     STORE_FAST                      2: token
                336     STORE_FAST                      0: value
                338     LOAD_FAST                       1: domain_literal
                340     LOAD_METHOD                     3: append
                342     LOAD_FAST                       2: token
                344     CALL_METHOD                     1
                346     POP_TOP                         
                348     LOAD_FAST                       1: domain_literal
                350     LOAD_FAST                       0: value
                352     BUILD_TUPLE                     2
                354     RETURN_VALUE                    
        'get_domain_literal'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_domain
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Domain'
                'CFWS_LEADER'
                'get_cfws'
                'errors'
                'HeaderParseError'
                'format'
                'get_domain_literal'
                'append'
                'get_dot_atom'
                'get_atom'
                'defects'
                'ObsoleteHeaderDefect'
                'token_type'
                'DOT'
            [Var Names]
                'value'
                'domain'
                'leader'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' domain = dot-atom / domain-literal / obs-domain\n        obs-domain = atom *("." atom))\n\n    '
                None
                0
                "expected domain but found '{}'"
                '['
                '@'
                'Invalid Domain'
                '.'
                'domain is not a dot-atom (contains CFWS)'
                'dot-atom'
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: Domain
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: domain
                6       LOAD_CONST                      1: None
                8       STORE_FAST                      2: leader
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      2: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: CFWS_LEADER
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               17 (to 34)
                22      LOAD_GLOBAL                     2: get_cfws
                24      LOAD_FAST                       0: value
                26      CALL_FUNCTION                   1
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      2: leader
                32      STORE_FAST                      0: value
                34      LOAD_FAST                       0: value
                36      POP_JUMP_IF_TRUE                27 (to 54)
                38      LOAD_GLOBAL                     3: errors
                40      LOAD_METHOD                     4: HeaderParseError
                42      LOAD_CONST                      3: "expected domain but found '{}'"
                44      LOAD_METHOD                     5: format
                46      LOAD_FAST                       0: value
                48      CALL_METHOD                     1
                50      CALL_METHOD                     1
                52      RAISE_VARARGS                   1
                54      LOAD_FAST                       0: value
                56      LOAD_CONST                      2: 0
                58      BINARY_SUBSCR                   
                60      LOAD_CONST                      4: '['
                62      COMPARE_OP                      2 (==)
                64      POP_JUMP_IF_FALSE               59 (to 118)
                66      LOAD_GLOBAL                     6: get_domain_literal
                68      LOAD_FAST                       0: value
                70      CALL_FUNCTION                   1
                72      UNPACK_SEQUENCE                 2
                74      STORE_FAST                      3: token
                76      STORE_FAST                      0: value
                78      LOAD_FAST                       2: leader
                80      LOAD_CONST                      1: None
                82      IS_OP                           1 (is not)
                84      POP_JUMP_IF_FALSE               50 (to 100)
                86      LOAD_FAST                       2: leader
                88      BUILD_LIST                      1
                90      LOAD_FAST                       3: token
                92      LOAD_CONST                      1: None
                94      LOAD_CONST                      2: 0
                96      BUILD_SLICE                     2
                98      STORE_SUBSCR                    
                100     LOAD_FAST                       1: domain
                102     LOAD_METHOD                     7: append
                104     LOAD_FAST                       3: token
                106     CALL_METHOD                     1
                108     POP_TOP                         
                110     LOAD_FAST                       1: domain
                112     LOAD_FAST                       0: value
                114     BUILD_TUPLE                     2
                116     RETURN_VALUE                    
                118     SETUP_FINALLY                   8 (to 136)
                120     LOAD_GLOBAL                     8: get_dot_atom
                122     LOAD_FAST                       0: value
                124     CALL_FUNCTION                   1
                126     UNPACK_SEQUENCE                 2
                128     STORE_FAST                      3: token
                130     STORE_FAST                      0: value
                132     POP_BLOCK                       
                134     JUMP_FORWARD                    16 (to 168)
                136     DUP_TOP                         
                138     LOAD_GLOBAL                     3: errors
                140     LOAD_ATTR                       4: HeaderParseError
                142     JUMP_IF_NOT_EXC_MATCH           83 (to 166)
                144     POP_TOP                         
                146     POP_TOP                         
                148     POP_TOP                         
                150     LOAD_GLOBAL                     9: get_atom
                152     LOAD_FAST                       0: value
                154     CALL_FUNCTION                   1
                156     UNPACK_SEQUENCE                 2
                158     STORE_FAST                      3: token
                160     STORE_FAST                      0: value
                162     POP_EXCEPT                      
                164     JUMP_FORWARD                    1 (to 168)
                166     RERAISE                         0
                168     LOAD_FAST                       0: value
                170     POP_JUMP_IF_FALSE               97 (to 194)
                172     LOAD_FAST                       0: value
                174     LOAD_CONST                      2: 0
                176     BINARY_SUBSCR                   
                178     LOAD_CONST                      5: '@'
                180     COMPARE_OP                      2 (==)
                182     POP_JUMP_IF_FALSE               97 (to 194)
                184     LOAD_GLOBAL                     3: errors
                186     LOAD_METHOD                     4: HeaderParseError
                188     LOAD_CONST                      6: 'Invalid Domain'
                190     CALL_METHOD                     1
                192     RAISE_VARARGS                   1
                194     LOAD_FAST                       2: leader
                196     LOAD_CONST                      1: None
                198     IS_OP                           1 (is not)
                200     POP_JUMP_IF_FALSE               108 (to 216)
                202     LOAD_FAST                       2: leader
                204     BUILD_LIST                      1
                206     LOAD_FAST                       3: token
                208     LOAD_CONST                      1: None
                210     LOAD_CONST                      2: 0
                212     BUILD_SLICE                     2
                214     STORE_SUBSCR                    
                216     LOAD_FAST                       1: domain
                218     LOAD_METHOD                     7: append
                220     LOAD_FAST                       3: token
                222     CALL_METHOD                     1
                224     POP_TOP                         
                226     LOAD_FAST                       0: value
                228     POP_JUMP_IF_FALSE               181 (to 362)
                230     LOAD_FAST                       0: value
                232     LOAD_CONST                      2: 0
                234     BINARY_SUBSCR                   
                236     LOAD_CONST                      7: '.'
                238     COMPARE_OP                      2 (==)
                240     POP_JUMP_IF_FALSE               181 (to 362)
                242     LOAD_FAST                       1: domain
                244     LOAD_ATTR                       10: defects
                246     LOAD_METHOD                     7: append
                248     LOAD_GLOBAL                     3: errors
                250     LOAD_METHOD                     11: ObsoleteHeaderDefect
                252     LOAD_CONST                      8: 'domain is not a dot-atom (contains CFWS)'
                254     CALL_METHOD                     1
                256     CALL_METHOD                     1
                258     POP_TOP                         
                260     LOAD_FAST                       1: domain
                262     LOAD_CONST                      2: 0
                264     BINARY_SUBSCR                   
                266     LOAD_ATTR                       12: token_type
                268     LOAD_CONST                      9: 'dot-atom'
                270     COMPARE_OP                      2 (==)
                272     POP_JUMP_IF_FALSE               145 (to 290)
                274     LOAD_FAST                       1: domain
                276     LOAD_CONST                      2: 0
                278     BINARY_SUBSCR                   
                280     LOAD_FAST                       1: domain
                282     LOAD_CONST                      1: None
                284     LOAD_CONST                      1: None
                286     BUILD_SLICE                     2
                288     STORE_SUBSCR                    
                290     LOAD_FAST                       0: value
                292     POP_JUMP_IF_FALSE               181 (to 362)
                294     LOAD_FAST                       0: value
                296     LOAD_CONST                      2: 0
                298     BINARY_SUBSCR                   
                300     LOAD_CONST                      7: '.'
                302     COMPARE_OP                      2 (==)
                304     POP_JUMP_IF_FALSE               181 (to 362)
                306     LOAD_FAST                       1: domain
                308     LOAD_METHOD                     7: append
                310     LOAD_GLOBAL                     13: DOT
                312     CALL_METHOD                     1
                314     POP_TOP                         
                316     LOAD_GLOBAL                     9: get_atom
                318     LOAD_FAST                       0: value
                320     LOAD_CONST                      10: 1
                322     LOAD_CONST                      1: None
                324     BUILD_SLICE                     2
                326     BINARY_SUBSCR                   
                328     CALL_FUNCTION                   1
                330     UNPACK_SEQUENCE                 2
                332     STORE_FAST                      3: token
                334     STORE_FAST                      0: value
                336     LOAD_FAST                       1: domain
                338     LOAD_METHOD                     7: append
                340     LOAD_FAST                       3: token
                342     CALL_METHOD                     1
                344     POP_TOP                         
                346     LOAD_FAST                       0: value
                348     POP_JUMP_IF_FALSE               181 (to 362)
                350     LOAD_FAST                       0: value
                352     LOAD_CONST                      2: 0
                354     BINARY_SUBSCR                   
                356     LOAD_CONST                      7: '.'
                358     COMPARE_OP                      2 (==)
                360     POP_JUMP_IF_TRUE                153 (to 306)
                362     LOAD_FAST                       1: domain
                364     LOAD_FAST                       0: value
                366     BUILD_TUPLE                     2
                368     RETURN_VALUE                    
        'get_domain'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_addr_spec
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'AddrSpec'
                'get_local_part'
                'append'
                'defects'
                'errors'
                'InvalidHeaderDefect'
                'ValueTerminal'
                'get_domain'
            [Var Names]
                'value'
                'addr_spec'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' addr-spec = local-part "@" domain\n\n    '
                0
                '@'
                'addr-spec local part with no domain'
                'address-at-symbol'
                1
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: AddrSpec
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: addr_spec
                6       LOAD_GLOBAL                     1: get_local_part
                8       LOAD_FAST                       0: value
                10      CALL_FUNCTION                   1
                12      UNPACK_SEQUENCE                 2
                14      STORE_FAST                      2: token
                16      STORE_FAST                      0: value
                18      LOAD_FAST                       1: addr_spec
                20      LOAD_METHOD                     2: append
                22      LOAD_FAST                       2: token
                24      CALL_METHOD                     1
                26      POP_TOP                         
                28      LOAD_FAST                       0: value
                30      POP_JUMP_IF_FALSE               22 (to 44)
                32      LOAD_FAST                       0: value
                34      LOAD_CONST                      1: 0
                36      BINARY_SUBSCR                   
                38      LOAD_CONST                      2: '@'
                40      COMPARE_OP                      3 (!=)
                42      POP_JUMP_IF_FALSE               35 (to 70)
                44      LOAD_FAST                       1: addr_spec
                46      LOAD_ATTR                       3: defects
                48      LOAD_METHOD                     2: append
                50      LOAD_GLOBAL                     4: errors
                52      LOAD_METHOD                     5: InvalidHeaderDefect
                54      LOAD_CONST                      3: 'addr-spec local part with no domain'
                56      CALL_METHOD                     1
                58      CALL_METHOD                     1
                60      POP_TOP                         
                62      LOAD_FAST                       1: addr_spec
                64      LOAD_FAST                       0: value
                66      BUILD_TUPLE                     2
                68      RETURN_VALUE                    
                70      LOAD_FAST                       1: addr_spec
                72      LOAD_METHOD                     2: append
                74      LOAD_GLOBAL                     6: ValueTerminal
                76      LOAD_CONST                      2: '@'
                78      LOAD_CONST                      4: 'address-at-symbol'
                80      CALL_FUNCTION                   2
                82      CALL_METHOD                     1
                84      POP_TOP                         
                86      LOAD_GLOBAL                     7: get_domain
                88      LOAD_FAST                       0: value
                90      LOAD_CONST                      5: 1
                92      LOAD_CONST                      6: None
                94      BUILD_SLICE                     2
                96      BINARY_SUBSCR                   
                98      CALL_FUNCTION                   1
                100     UNPACK_SEQUENCE                 2
                102     STORE_FAST                      2: token
                104     STORE_FAST                      0: value
                106     LOAD_FAST                       1: addr_spec
                108     LOAD_METHOD                     2: append
                110     LOAD_FAST                       2: token
                112     CALL_METHOD                     1
                114     POP_TOP                         
                116     LOAD_FAST                       1: addr_spec
                118     LOAD_FAST                       0: value
                120     BUILD_TUPLE                     2
                122     RETURN_VALUE                    
        'get_addr_spec'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_obs_route
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ObsRoute'
                'CFWS_LEADER'
                'get_cfws'
                'append'
                'ListSeparator'
                'errors'
                'HeaderParseError'
                'format'
                'RouteComponentMarker'
                'get_domain'
                'ValueTerminal'
            [Var Names]
                'value'
                'obs_route'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' obs-route = obs-domain-list ":"\n        obs-domain-list = *(CFWS / ",") "@" domain *("," [CFWS] ["@" domain])\n\n        Returns an obs-route token with the appropriate sub-tokens (that is,\n        there is no obs-domain-list in the parse tree).\n    '
                0
                ','
                1
                None
                '@'
                "expected obs-route domain but found '{}'"
                'end of header while parsing obs-route'
                ':'
                "expected ':' marking end of obs-route but found '{}'"
                'end-of-obs-route-marker'
            [Disassembly]
                0       LOAD_GLOBAL                     0: ObsRoute
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: obs_route
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               66 (to 132)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_CONST                      2: ','
                18      COMPARE_OP                      2 (==)
                20      POP_JUMP_IF_TRUE                17 (to 34)
                22      LOAD_FAST                       0: value
                24      LOAD_CONST                      1: 0
                26      BINARY_SUBSCR                   
                28      LOAD_GLOBAL                     1: CFWS_LEADER
                30      CONTAINS_OP                     0 (in)
                32      POP_JUMP_IF_FALSE               66 (to 132)
                34      LOAD_FAST                       0: value
                36      LOAD_CONST                      1: 0
                38      BINARY_SUBSCR                   
                40      LOAD_GLOBAL                     1: CFWS_LEADER
                42      CONTAINS_OP                     0 (in)
                44      POP_JUMP_IF_FALSE               35 (to 70)
                46      LOAD_GLOBAL                     2: get_cfws
                48      LOAD_FAST                       0: value
                50      CALL_FUNCTION                   1
                52      UNPACK_SEQUENCE                 2
                54      STORE_FAST                      2: token
                56      STORE_FAST                      0: value
                58      LOAD_FAST                       1: obs_route
                60      LOAD_METHOD                     3: append
                62      LOAD_FAST                       2: token
                64      CALL_METHOD                     1
                66      POP_TOP                         
                68      JUMP_FORWARD                    17 (to 104)
                70      LOAD_FAST                       0: value
                72      LOAD_CONST                      1: 0
                74      BINARY_SUBSCR                   
                76      LOAD_CONST                      2: ','
                78      COMPARE_OP                      2 (==)
                80      POP_JUMP_IF_FALSE               52 (to 104)
                82      LOAD_FAST                       1: obs_route
                84      LOAD_METHOD                     3: append
                86      LOAD_GLOBAL                     4: ListSeparator
                88      CALL_METHOD                     1
                90      POP_TOP                         
                92      LOAD_FAST                       0: value
                94      LOAD_CONST                      3: 1
                96      LOAD_CONST                      4: None
                98      BUILD_SLICE                     2
                100     BINARY_SUBSCR                   
                102     STORE_FAST                      0: value
                104     LOAD_FAST                       0: value
                106     POP_JUMP_IF_FALSE               66 (to 132)
                108     LOAD_FAST                       0: value
                110     LOAD_CONST                      1: 0
                112     BINARY_SUBSCR                   
                114     LOAD_CONST                      2: ','
                116     COMPARE_OP                      2 (==)
                118     POP_JUMP_IF_TRUE                17 (to 34)
                120     LOAD_FAST                       0: value
                122     LOAD_CONST                      1: 0
                124     BINARY_SUBSCR                   
                126     LOAD_GLOBAL                     1: CFWS_LEADER
                128     CONTAINS_OP                     0 (in)
                130     POP_JUMP_IF_TRUE                17 (to 34)
                132     LOAD_FAST                       0: value
                134     POP_JUMP_IF_FALSE               74 (to 148)
                136     LOAD_FAST                       0: value
                138     LOAD_CONST                      1: 0
                140     BINARY_SUBSCR                   
                142     LOAD_CONST                      5: '@'
                144     COMPARE_OP                      3 (!=)
                146     POP_JUMP_IF_FALSE               82 (to 164)
                148     LOAD_GLOBAL                     5: errors
                150     LOAD_METHOD                     6: HeaderParseError
                152     LOAD_CONST                      6: "expected obs-route domain but found '{}'"
                154     LOAD_METHOD                     7: format
                156     LOAD_FAST                       0: value
                158     CALL_METHOD                     1
                160     CALL_METHOD                     1
                162     RAISE_VARARGS                   1
                164     LOAD_FAST                       1: obs_route
                166     LOAD_METHOD                     3: append
                168     LOAD_GLOBAL                     8: RouteComponentMarker
                170     CALL_METHOD                     1
                172     POP_TOP                         
                174     LOAD_GLOBAL                     9: get_domain
                176     LOAD_FAST                       0: value
                178     LOAD_CONST                      3: 1
                180     LOAD_CONST                      4: None
                182     BUILD_SLICE                     2
                184     BINARY_SUBSCR                   
                186     CALL_FUNCTION                   1
                188     UNPACK_SEQUENCE                 2
                190     STORE_FAST                      2: token
                192     STORE_FAST                      0: value
                194     LOAD_FAST                       1: obs_route
                196     LOAD_METHOD                     3: append
                198     LOAD_FAST                       2: token
                200     CALL_METHOD                     1
                202     POP_TOP                         
                204     LOAD_FAST                       0: value
                206     POP_JUMP_IF_FALSE               175 (to 350)
                208     LOAD_FAST                       0: value
                210     LOAD_CONST                      1: 0
                212     BINARY_SUBSCR                   
                214     LOAD_CONST                      2: ','
                216     COMPARE_OP                      2 (==)
                218     POP_JUMP_IF_FALSE               175 (to 350)
                220     LOAD_FAST                       1: obs_route
                222     LOAD_METHOD                     3: append
                224     LOAD_GLOBAL                     4: ListSeparator
                226     CALL_METHOD                     1
                228     POP_TOP                         
                230     LOAD_FAST                       0: value
                232     LOAD_CONST                      3: 1
                234     LOAD_CONST                      4: None
                236     BUILD_SLICE                     2
                238     BINARY_SUBSCR                   
                240     STORE_FAST                      0: value
                242     LOAD_FAST                       0: value
                244     POP_JUMP_IF_TRUE                124 (to 248)
                246     JUMP_FORWARD                    51 (to 350)
                248     LOAD_FAST                       0: value
                250     LOAD_CONST                      1: 0
                252     BINARY_SUBSCR                   
                254     LOAD_GLOBAL                     1: CFWS_LEADER
                256     CONTAINS_OP                     0 (in)
                258     POP_JUMP_IF_FALSE               141 (to 282)
                260     LOAD_GLOBAL                     2: get_cfws
                262     LOAD_FAST                       0: value
                264     CALL_FUNCTION                   1
                266     UNPACK_SEQUENCE                 2
                268     STORE_FAST                      2: token
                270     STORE_FAST                      0: value
                272     LOAD_FAST                       1: obs_route
                274     LOAD_METHOD                     3: append
                276     LOAD_FAST                       2: token
                278     CALL_METHOD                     1
                280     POP_TOP                         
                282     LOAD_FAST                       0: value
                284     LOAD_CONST                      1: 0
                286     BINARY_SUBSCR                   
                288     LOAD_CONST                      5: '@'
                290     COMPARE_OP                      2 (==)
                292     POP_JUMP_IF_FALSE               167 (to 334)
                294     LOAD_FAST                       1: obs_route
                296     LOAD_METHOD                     3: append
                298     LOAD_GLOBAL                     8: RouteComponentMarker
                300     CALL_METHOD                     1
                302     POP_TOP                         
                304     LOAD_GLOBAL                     9: get_domain
                306     LOAD_FAST                       0: value
                308     LOAD_CONST                      3: 1
                310     LOAD_CONST                      4: None
                312     BUILD_SLICE                     2
                314     BINARY_SUBSCR                   
                316     CALL_FUNCTION                   1
                318     UNPACK_SEQUENCE                 2
                320     STORE_FAST                      2: token
                322     STORE_FAST                      0: value
                324     LOAD_FAST                       1: obs_route
                326     LOAD_METHOD                     3: append
                328     LOAD_FAST                       2: token
                330     CALL_METHOD                     1
                332     POP_TOP                         
                334     LOAD_FAST                       0: value
                336     POP_JUMP_IF_FALSE               175 (to 350)
                338     LOAD_FAST                       0: value
                340     LOAD_CONST                      1: 0
                342     BINARY_SUBSCR                   
                344     LOAD_CONST                      2: ','
                346     COMPARE_OP                      2 (==)
                348     POP_JUMP_IF_TRUE                110 (to 220)
                350     LOAD_FAST                       0: value
                352     POP_JUMP_IF_TRUE                182 (to 364)
                354     LOAD_GLOBAL                     5: errors
                356     LOAD_METHOD                     6: HeaderParseError
                358     LOAD_CONST                      7: 'end of header while parsing obs-route'
                360     CALL_METHOD                     1
                362     RAISE_VARARGS                   1
                364     LOAD_FAST                       0: value
                366     LOAD_CONST                      1: 0
                368     BINARY_SUBSCR                   
                370     LOAD_CONST                      8: ':'
                372     COMPARE_OP                      3 (!=)
                374     POP_JUMP_IF_FALSE               196 (to 392)
                376     LOAD_GLOBAL                     5: errors
                378     LOAD_METHOD                     6: HeaderParseError
                380     LOAD_CONST                      9: "expected ':' marking end of obs-route but found '{}'"
                382     LOAD_METHOD                     7: format
                384     LOAD_FAST                       0: value
                386     CALL_METHOD                     1
                388     CALL_METHOD                     1
                390     RAISE_VARARGS                   1
                392     LOAD_FAST                       1: obs_route
                394     LOAD_METHOD                     3: append
                396     LOAD_GLOBAL                     10: ValueTerminal
                398     LOAD_CONST                      8: ':'
                400     LOAD_CONST                      10: 'end-of-obs-route-marker'
                402     CALL_FUNCTION                   2
                404     CALL_METHOD                     1
                406     POP_TOP                         
                408     LOAD_FAST                       1: obs_route
                410     LOAD_FAST                       0: value
                412     LOAD_CONST                      3: 1
                414     LOAD_CONST                      4: None
                416     BUILD_SLICE                     2
                418     BINARY_SUBSCR                   
                420     BUILD_TUPLE                     2
                422     RETURN_VALUE                    
        'get_obs_route'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_angle_addr
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 11
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'AngleAddr'
                'CFWS_LEADER'
                'get_cfws'
                'append'
                'errors'
                'HeaderParseError'
                'format'
                'ValueTerminal'
                'defects'
                'InvalidHeaderDefect'
                'get_addr_spec'
                'get_obs_route'
                'ObsoleteHeaderDefect'
            [Var Names]
                'value'
                'angle_addr'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' angle-addr = [CFWS] "<" addr-spec ">" [CFWS] / obs-angle-addr\n        obs-angle-addr = [CFWS] "<" obs-route addr-spec ">" [CFWS]\n\n    '
                0
                '<'
                "expected angle-addr but found '{}'"
                'angle-addr-start'
                1
                None
                '>'
                'angle-addr-end'
                'null addr-spec in angle-addr'
                'obsolete route specification in angle-addr'
                "expected addr-spec or obs-route but found '{}'"
                "missing trailing '>' on angle-addr"
            [Disassembly]
                0       LOAD_GLOBAL                     0: AngleAddr
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: angle_addr
                6       LOAD_FAST                       0: value
                8       LOAD_CONST                      1: 0
                10      BINARY_SUBSCR                   
                12      LOAD_GLOBAL                     1: CFWS_LEADER
                14      CONTAINS_OP                     0 (in)
                16      POP_JUMP_IF_FALSE               20 (to 40)
                18      LOAD_GLOBAL                     2: get_cfws
                20      LOAD_FAST                       0: value
                22      CALL_FUNCTION                   1
                24      UNPACK_SEQUENCE                 2
                26      STORE_FAST                      2: token
                28      STORE_FAST                      0: value
                30      LOAD_FAST                       1: angle_addr
                32      LOAD_METHOD                     3: append
                34      LOAD_FAST                       2: token
                36      CALL_METHOD                     1
                38      POP_TOP                         
                40      LOAD_FAST                       0: value
                42      POP_JUMP_IF_FALSE               28 (to 56)
                44      LOAD_FAST                       0: value
                46      LOAD_CONST                      1: 0
                48      BINARY_SUBSCR                   
                50      LOAD_CONST                      2: '<'
                52      COMPARE_OP                      3 (!=)
                54      POP_JUMP_IF_FALSE               36 (to 72)
                56      LOAD_GLOBAL                     4: errors
                58      LOAD_METHOD                     5: HeaderParseError
                60      LOAD_CONST                      3: "expected angle-addr but found '{}'"
                62      LOAD_METHOD                     6: format
                64      LOAD_FAST                       0: value
                66      CALL_METHOD                     1
                68      CALL_METHOD                     1
                70      RAISE_VARARGS                   1
                72      LOAD_FAST                       1: angle_addr
                74      LOAD_METHOD                     3: append
                76      LOAD_GLOBAL                     7: ValueTerminal
                78      LOAD_CONST                      2: '<'
                80      LOAD_CONST                      4: 'angle-addr-start'
                82      CALL_FUNCTION                   2
                84      CALL_METHOD                     1
                86      POP_TOP                         
                88      LOAD_FAST                       0: value
                90      LOAD_CONST                      5: 1
                92      LOAD_CONST                      6: None
                94      BUILD_SLICE                     2
                96      BINARY_SUBSCR                   
                98      STORE_FAST                      0: value
                100     LOAD_FAST                       0: value
                102     LOAD_CONST                      1: 0
                104     BINARY_SUBSCR                   
                106     LOAD_CONST                      7: '>'
                108     COMPARE_OP                      2 (==)
                110     POP_JUMP_IF_FALSE               83 (to 166)
                112     LOAD_FAST                       1: angle_addr
                114     LOAD_METHOD                     3: append
                116     LOAD_GLOBAL                     7: ValueTerminal
                118     LOAD_CONST                      7: '>'
                120     LOAD_CONST                      8: 'angle-addr-end'
                122     CALL_FUNCTION                   2
                124     CALL_METHOD                     1
                126     POP_TOP                         
                128     LOAD_FAST                       1: angle_addr
                130     LOAD_ATTR                       8: defects
                132     LOAD_METHOD                     3: append
                134     LOAD_GLOBAL                     4: errors
                136     LOAD_METHOD                     9: InvalidHeaderDefect
                138     LOAD_CONST                      9: 'null addr-spec in angle-addr'
                140     CALL_METHOD                     1
                142     CALL_METHOD                     1
                144     POP_TOP                         
                146     LOAD_FAST                       0: value
                148     LOAD_CONST                      5: 1
                150     LOAD_CONST                      6: None
                152     BUILD_SLICE                     2
                154     BINARY_SUBSCR                   
                156     STORE_FAST                      0: value
                158     LOAD_FAST                       1: angle_addr
                160     LOAD_FAST                       0: value
                162     BUILD_TUPLE                     2
                164     RETURN_VALUE                    
                166     SETUP_FINALLY                   8 (to 184)
                168     LOAD_GLOBAL                     10: get_addr_spec
                170     LOAD_FAST                       0: value
                172     CALL_FUNCTION                   1
                174     UNPACK_SEQUENCE                 2
                176     STORE_FAST                      2: token
                178     STORE_FAST                      0: value
                180     POP_BLOCK                       
                182     JUMP_FORWARD                    55 (to 294)
                184     DUP_TOP                         
                186     LOAD_GLOBAL                     4: errors
                188     LOAD_ATTR                       5: HeaderParseError
                190     JUMP_IF_NOT_EXC_MATCH           146 (to 292)
                192     POP_TOP                         
                194     POP_TOP                         
                196     POP_TOP                         
                198     SETUP_FINALLY                   17 (to 234)
                200     LOAD_GLOBAL                     11: get_obs_route
                202     LOAD_FAST                       0: value
                204     CALL_FUNCTION                   1
                206     UNPACK_SEQUENCE                 2
                208     STORE_FAST                      2: token
                210     STORE_FAST                      0: value
                212     LOAD_FAST                       1: angle_addr
                214     LOAD_ATTR                       8: defects
                216     LOAD_METHOD                     3: append
                218     LOAD_GLOBAL                     4: errors
                220     LOAD_METHOD                     12: ObsoleteHeaderDefect
                222     LOAD_CONST                      10: 'obsolete route specification in angle-addr'
                224     CALL_METHOD                     1
                226     CALL_METHOD                     1
                228     POP_TOP                         
                230     POP_BLOCK                       
                232     JUMP_FORWARD                    16 (to 266)
                234     DUP_TOP                         
                236     LOAD_GLOBAL                     4: errors
                238     LOAD_ATTR                       5: HeaderParseError
                240     JUMP_IF_NOT_EXC_MATCH           132 (to 264)
                242     POP_TOP                         
                244     POP_TOP                         
                246     POP_TOP                         
                248     LOAD_GLOBAL                     4: errors
                250     LOAD_METHOD                     5: HeaderParseError
                252     LOAD_CONST                      11: "expected addr-spec or obs-route but found '{}'"
                254     LOAD_METHOD                     6: format
                256     LOAD_FAST                       0: value
                258     CALL_METHOD                     1
                260     CALL_METHOD                     1
                262     RAISE_VARARGS                   1
                264     RERAISE                         0
                266     LOAD_FAST                       1: angle_addr
                268     LOAD_METHOD                     3: append
                270     LOAD_FAST                       2: token
                272     CALL_METHOD                     1
                274     POP_TOP                         
                276     LOAD_GLOBAL                     10: get_addr_spec
                278     LOAD_FAST                       0: value
                280     CALL_FUNCTION                   1
                282     UNPACK_SEQUENCE                 2
                284     STORE_FAST                      2: token
                286     STORE_FAST                      0: value
                288     POP_EXCEPT                      
                290     JUMP_FORWARD                    1 (to 294)
                292     RERAISE                         0
                294     LOAD_FAST                       1: angle_addr
                296     LOAD_METHOD                     3: append
                298     LOAD_FAST                       2: token
                300     CALL_METHOD                     1
                302     POP_TOP                         
                304     LOAD_FAST                       0: value
                306     POP_JUMP_IF_FALSE               167 (to 334)
                308     LOAD_FAST                       0: value
                310     LOAD_CONST                      1: 0
                312     BINARY_SUBSCR                   
                314     LOAD_CONST                      7: '>'
                316     COMPARE_OP                      2 (==)
                318     POP_JUMP_IF_FALSE               167 (to 334)
                320     LOAD_FAST                       0: value
                322     LOAD_CONST                      5: 1
                324     LOAD_CONST                      6: None
                326     BUILD_SLICE                     2
                328     BINARY_SUBSCR                   
                330     STORE_FAST                      0: value
                332     JUMP_FORWARD                    9 (to 352)
                334     LOAD_FAST                       1: angle_addr
                336     LOAD_ATTR                       8: defects
                338     LOAD_METHOD                     3: append
                340     LOAD_GLOBAL                     4: errors
                342     LOAD_METHOD                     9: InvalidHeaderDefect
                344     LOAD_CONST                      12: "missing trailing '>' on angle-addr"
                346     CALL_METHOD                     1
                348     CALL_METHOD                     1
                350     POP_TOP                         
                352     LOAD_FAST                       1: angle_addr
                354     LOAD_METHOD                     3: append
                356     LOAD_GLOBAL                     7: ValueTerminal
                358     LOAD_CONST                      7: '>'
                360     LOAD_CONST                      8: 'angle-addr-end'
                362     CALL_FUNCTION                   2
                364     CALL_METHOD                     1
                366     POP_TOP                         
                368     LOAD_FAST                       0: value
                370     POP_JUMP_IF_FALSE               203 (to 406)
                372     LOAD_FAST                       0: value
                374     LOAD_CONST                      1: 0
                376     BINARY_SUBSCR                   
                378     LOAD_GLOBAL                     1: CFWS_LEADER
                380     CONTAINS_OP                     0 (in)
                382     POP_JUMP_IF_FALSE               203 (to 406)
                384     LOAD_GLOBAL                     2: get_cfws
                386     LOAD_FAST                       0: value
                388     CALL_FUNCTION                   1
                390     UNPACK_SEQUENCE                 2
                392     STORE_FAST                      2: token
                394     STORE_FAST                      0: value
                396     LOAD_FAST                       1: angle_addr
                398     LOAD_METHOD                     3: append
                400     LOAD_FAST                       2: token
                402     CALL_METHOD                     1
                404     POP_TOP                         
                406     LOAD_FAST                       1: angle_addr
                408     LOAD_FAST                       0: value
                410     BUILD_TUPLE                     2
                412     RETURN_VALUE                    
        'get_angle_addr'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_display_name
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'DisplayName'
                'get_phrase'
                'extend'
                'defects'
            [Var Names]
                'value'
                'display_name'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                " display-name = phrase\n\n    Because this is simply a name-rule, we don't return a display-name\n    token containing a phrase, but rather a display-name token with\n    the content of the phrase.\n\n    "
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: DisplayName
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: display_name
                6       LOAD_GLOBAL                     1: get_phrase
                8       LOAD_FAST                       0: value
                10      CALL_FUNCTION                   1
                12      UNPACK_SEQUENCE                 2
                14      STORE_FAST                      2: token
                16      STORE_FAST                      0: value
                18      LOAD_FAST                       1: display_name
                20      LOAD_METHOD                     2: extend
                22      LOAD_FAST                       2: token
                24      LOAD_CONST                      1: None
                26      LOAD_CONST                      1: None
                28      BUILD_SLICE                     2
                30      BINARY_SUBSCR                   
                32      CALL_METHOD                     1
                34      POP_TOP                         
                36      LOAD_FAST                       2: token
                38      LOAD_ATTR                       3: defects
                40      LOAD_CONST                      1: None
                42      LOAD_CONST                      1: None
                44      BUILD_SLICE                     2
                46      BINARY_SUBSCR                   
                48      LOAD_FAST                       1: display_name
                50      STORE_ATTR                      3: defects
                52      LOAD_FAST                       1: display_name
                54      LOAD_FAST                       0: value
                56      BUILD_TUPLE                     2
                58      RETURN_VALUE                    
        'get_display_name'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_name_addr
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'NameAddr'
                'CFWS_LEADER'
                'get_cfws'
                'errors'
                'HeaderParseError'
                'format'
                'PHRASE_ENDS'
                'get_display_name'
                'append'
                'get_angle_addr'
            [Var Names]
                'value'
                'name_addr'
                'leader'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' name-addr = [display-name] angle-addr\n\n    '
                None
                0
                "expected name-addr but found '{}'"
                '<'
            [Disassembly]
                0       LOAD_GLOBAL                     0: NameAddr
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: name_addr
                6       LOAD_CONST                      1: None
                8       STORE_FAST                      2: leader
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      2: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: CFWS_LEADER
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               27 (to 54)
                22      LOAD_GLOBAL                     2: get_cfws
                24      LOAD_FAST                       0: value
                26      CALL_FUNCTION                   1
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      2: leader
                32      STORE_FAST                      0: value
                34      LOAD_FAST                       0: value
                36      POP_JUMP_IF_TRUE                27 (to 54)
                38      LOAD_GLOBAL                     3: errors
                40      LOAD_METHOD                     4: HeaderParseError
                42      LOAD_CONST                      3: "expected name-addr but found '{}'"
                44      LOAD_METHOD                     5: format
                46      LOAD_FAST                       2: leader
                48      CALL_METHOD                     1
                50      CALL_METHOD                     1
                52      RAISE_VARARGS                   1
                54      LOAD_FAST                       0: value
                56      LOAD_CONST                      2: 0
                58      BINARY_SUBSCR                   
                60      LOAD_CONST                      4: '<'
                62      COMPARE_OP                      3 (!=)
                64      POP_JUMP_IF_FALSE               83 (to 166)
                66      LOAD_FAST                       0: value
                68      LOAD_CONST                      2: 0
                70      BINARY_SUBSCR                   
                72      LOAD_GLOBAL                     6: PHRASE_ENDS
                74      CONTAINS_OP                     0 (in)
                76      POP_JUMP_IF_FALSE               47 (to 94)
                78      LOAD_GLOBAL                     3: errors
                80      LOAD_METHOD                     4: HeaderParseError
                82      LOAD_CONST                      3: "expected name-addr but found '{}'"
                84      LOAD_METHOD                     5: format
                86      LOAD_FAST                       0: value
                88      CALL_METHOD                     1
                90      CALL_METHOD                     1
                92      RAISE_VARARGS                   1
                94      LOAD_GLOBAL                     7: get_display_name
                96      LOAD_FAST                       0: value
                98      CALL_FUNCTION                   1
                100     UNPACK_SEQUENCE                 2
                102     STORE_FAST                      3: token
                104     STORE_FAST                      0: value
                106     LOAD_FAST                       0: value
                108     POP_JUMP_IF_TRUE                63 (to 126)
                110     LOAD_GLOBAL                     3: errors
                112     LOAD_METHOD                     4: HeaderParseError
                114     LOAD_CONST                      3: "expected name-addr but found '{}'"
                116     LOAD_METHOD                     5: format
                118     LOAD_FAST                       3: token
                120     CALL_METHOD                     1
                122     CALL_METHOD                     1
                124     RAISE_VARARGS                   1
                126     LOAD_FAST                       2: leader
                128     LOAD_CONST                      1: None
                130     IS_OP                           1 (is not)
                132     POP_JUMP_IF_FALSE               78 (to 156)
                134     LOAD_FAST                       2: leader
                136     BUILD_LIST                      1
                138     LOAD_FAST                       3: token
                140     LOAD_CONST                      2: 0
                142     BINARY_SUBSCR                   
                144     LOAD_CONST                      1: None
                146     LOAD_CONST                      2: 0
                148     BUILD_SLICE                     2
                150     STORE_SUBSCR                    
                152     LOAD_CONST                      1: None
                154     STORE_FAST                      2: leader
                156     LOAD_FAST                       1: name_addr
                158     LOAD_METHOD                     8: append
                160     LOAD_FAST                       3: token
                162     CALL_METHOD                     1
                164     POP_TOP                         
                166     LOAD_GLOBAL                     9: get_angle_addr
                168     LOAD_FAST                       0: value
                170     CALL_FUNCTION                   1
                172     UNPACK_SEQUENCE                 2
                174     STORE_FAST                      3: token
                176     STORE_FAST                      0: value
                178     LOAD_FAST                       2: leader
                180     LOAD_CONST                      1: None
                182     IS_OP                           1 (is not)
                184     POP_JUMP_IF_FALSE               100 (to 200)
                186     LOAD_FAST                       2: leader
                188     BUILD_LIST                      1
                190     LOAD_FAST                       3: token
                192     LOAD_CONST                      1: None
                194     LOAD_CONST                      2: 0
                196     BUILD_SLICE                     2
                198     STORE_SUBSCR                    
                200     LOAD_FAST                       1: name_addr
                202     LOAD_METHOD                     8: append
                204     LOAD_FAST                       3: token
                206     CALL_METHOD                     1
                208     POP_TOP                         
                210     LOAD_FAST                       1: name_addr
                212     LOAD_FAST                       0: value
                214     BUILD_TUPLE                     2
                216     RETURN_VALUE                    
        'get_name_addr'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_mailbox
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 11
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Mailbox'
                'get_name_addr'
                'errors'
                'HeaderParseError'
                'get_addr_spec'
                'format'
                'any'
                'all_defects'
                'token_type'
                'append'
            [Var Names]
                'value'
                'mailbox'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' mailbox = name-addr / addr-spec\n\n    '
                "expected mailbox but found '{}'"
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'errors'
                        'InvalidHeaderDefect'
                    [Var Names]
                        '.0'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        9 (to 24)
                        6       STORE_FAST                      1: x
                        8       LOAD_GLOBAL                     0: isinstance
                        10      LOAD_FAST                       1: x
                        12      LOAD_GLOBAL                     1: errors
                        14      LOAD_ATTR                       2: InvalidHeaderDefect
                        16      CALL_FUNCTION                   2
                        18      YIELD_VALUE                     
                        20      POP_TOP                         
                        22      JUMP_ABSOLUTE                   2 (to 4)
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                'get_mailbox.<locals>.<genexpr>'
                'invalid-mailbox'
            [Disassembly]
                0       LOAD_GLOBAL                     0: Mailbox
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: mailbox
                6       SETUP_FINALLY                   8 (to 24)
                8       LOAD_GLOBAL                     1: get_name_addr
                10      LOAD_FAST                       0: value
                12      CALL_FUNCTION                   1
                14      UNPACK_SEQUENCE                 2
                16      STORE_FAST                      2: token
                18      STORE_FAST                      0: value
                20      POP_BLOCK                       
                22      JUMP_FORWARD                    35 (to 94)
                24      DUP_TOP                         
                26      LOAD_GLOBAL                     2: errors
                28      LOAD_ATTR                       3: HeaderParseError
                30      JUMP_IF_NOT_EXC_MATCH           46 (to 92)
                32      POP_TOP                         
                34      POP_TOP                         
                36      POP_TOP                         
                38      SETUP_FINALLY                   8 (to 56)
                40      LOAD_GLOBAL                     4: get_addr_spec
                42      LOAD_FAST                       0: value
                44      CALL_FUNCTION                   1
                46      UNPACK_SEQUENCE                 2
                48      STORE_FAST                      2: token
                50      STORE_FAST                      0: value
                52      POP_BLOCK                       
                54      JUMP_FORWARD                    16 (to 88)
                56      DUP_TOP                         
                58      LOAD_GLOBAL                     2: errors
                60      LOAD_ATTR                       3: HeaderParseError
                62      JUMP_IF_NOT_EXC_MATCH           43 (to 86)
                64      POP_TOP                         
                66      POP_TOP                         
                68      POP_TOP                         
                70      LOAD_GLOBAL                     2: errors
                72      LOAD_METHOD                     3: HeaderParseError
                74      LOAD_CONST                      1: "expected mailbox but found '{}'"
                76      LOAD_METHOD                     5: format
                78      LOAD_FAST                       0: value
                80      CALL_METHOD                     1
                82      CALL_METHOD                     1
                84      RAISE_VARARGS                   1
                86      RERAISE                         0
                88      POP_EXCEPT                      
                90      JUMP_FORWARD                    1 (to 94)
                92      RERAISE                         0
                94      LOAD_GLOBAL                     6: any
                96      LOAD_CONST                      2: <CODE> <genexpr>
                98      LOAD_CONST                      3: 'get_mailbox.<locals>.<genexpr>'
                100     MAKE_FUNCTION                   0
                102     LOAD_FAST                       2: token
                104     LOAD_ATTR                       7: all_defects
                106     GET_ITER                        
                108     CALL_FUNCTION                   1
                110     CALL_FUNCTION                   1
                112     POP_JUMP_IF_FALSE               60 (to 120)
                114     LOAD_CONST                      4: 'invalid-mailbox'
                116     LOAD_FAST                       1: mailbox
                118     STORE_ATTR                      8: token_type
                120     LOAD_FAST                       1: mailbox
                122     LOAD_METHOD                     9: append
                124     LOAD_FAST                       2: token
                126     CALL_METHOD                     1
                128     POP_TOP                         
                130     LOAD_FAST                       1: mailbox
                132     LOAD_FAST                       0: value
                134     BUILD_TUPLE                     2
                136     RETURN_VALUE                    
        'get_mailbox'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_invalid_mailbox
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'InvalidMailbox'
                'PHRASE_ENDS'
                'append'
                'ValueTerminal'
                'get_phrase'
            [Var Names]
                'value'
                'endchars'
                'invalid_mailbox'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' Read everything up to one of the chars in endchars.\n\n    This is outside the formal grammar.  The InvalidMailbox TokenList that is\n    returned acts like a Mailbox, but the data attributes are None.\n\n    '
                0
                'misplaced-special'
                1
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: InvalidMailbox
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      2: invalid_mailbox
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               53 (to 106)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_FAST                       1: endchars
                18      CONTAINS_OP                     1 (not in)
                20      POP_JUMP_IF_FALSE               53 (to 106)
                22      LOAD_FAST                       0: value
                24      LOAD_CONST                      1: 0
                26      BINARY_SUBSCR                   
                28      LOAD_GLOBAL                     1: PHRASE_ENDS
                30      CONTAINS_OP                     0 (in)
                32      POP_JUMP_IF_FALSE               34 (to 68)
                34      LOAD_FAST                       2: invalid_mailbox
                36      LOAD_METHOD                     2: append
                38      LOAD_GLOBAL                     3: ValueTerminal
                40      LOAD_FAST                       0: value
                42      LOAD_CONST                      1: 0
                44      BINARY_SUBSCR                   
                46      LOAD_CONST                      2: 'misplaced-special'
                48      CALL_FUNCTION                   2
                50      CALL_METHOD                     1
                52      POP_TOP                         
                54      LOAD_FAST                       0: value
                56      LOAD_CONST                      3: 1
                58      LOAD_CONST                      4: None
                60      BUILD_SLICE                     2
                62      BINARY_SUBSCR                   
                64      STORE_FAST                      0: value
                66      JUMP_FORWARD                    11 (to 90)
                68      LOAD_GLOBAL                     4: get_phrase
                70      LOAD_FAST                       0: value
                72      CALL_FUNCTION                   1
                74      UNPACK_SEQUENCE                 2
                76      STORE_FAST                      3: token
                78      STORE_FAST                      0: value
                80      LOAD_FAST                       2: invalid_mailbox
                82      LOAD_METHOD                     2: append
                84      LOAD_FAST                       3: token
                86      CALL_METHOD                     1
                88      POP_TOP                         
                90      LOAD_FAST                       0: value
                92      POP_JUMP_IF_FALSE               53 (to 106)
                94      LOAD_FAST                       0: value
                96      LOAD_CONST                      1: 0
                98      BINARY_SUBSCR                   
                100     LOAD_FAST                       1: endchars
                102     CONTAINS_OP                     1 (not in)
                104     POP_JUMP_IF_TRUE                11 (to 22)
                106     LOAD_FAST                       2: invalid_mailbox
                108     LOAD_FAST                       0: value
                110     BUILD_TUPLE                     2
                112     RETURN_VALUE                    
        'get_invalid_mailbox'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_mailbox_list
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'MailboxList'
                'get_mailbox'
                'append'
                'errors'
                'HeaderParseError'
                'CFWS_LEADER'
                'get_cfws'
                'defects'
                'ObsoleteHeaderDefect'
                'get_invalid_mailbox'
                'InvalidHeaderDefect'
                'token_type'
                'extend'
                'ListSeparator'
            [Var Names]
                'value'
                'mailbox_list'
                'token'
                'leader'
                'mailbox'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' mailbox-list = (mailbox *("," mailbox)) / obs-mbox-list\n        obs-mbox-list = *([CFWS] ",") mailbox *("," [mailbox / CFWS])\n\n    For this routine we go outside the formal grammar in order to improve error\n    handling.  We recognize the end of the mailbox list only at the end of the\n    value or at a \';\' (the group terminator).  This is so that we can turn\n    invalid mailboxes into InvalidMailbox tokens and continue parsing any\n    remaining valid mailboxes.  We also allow all mailbox entries to be null,\n    and this condition is handled appropriately at a higher level.\n\n    '
                0
                ';'
                None
                ',;'
                'empty element in mailbox-list'
                'invalid mailbox in mailbox-list'
                ','
                -1
                'invalid-mailbox'
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: MailboxList
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: mailbox_list
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               216 (to 432)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_CONST                      2: ';'
                18      COMPARE_OP                      3 (!=)
                20      POP_JUMP_IF_FALSE               216 (to 432)
                22      SETUP_FINALLY                   13 (to 50)
                24      LOAD_GLOBAL                     1: get_mailbox
                26      LOAD_FAST                       0: value
                28      CALL_FUNCTION                   1
                30      UNPACK_SEQUENCE                 2
                32      STORE_FAST                      2: token
                34      STORE_FAST                      0: value
                36      LOAD_FAST                       1: mailbox_list
                38      LOAD_METHOD                     2: append
                40      LOAD_FAST                       2: token
                42      CALL_METHOD                     1
                44      POP_TOP                         
                46      POP_BLOCK                       
                48      JUMP_FORWARD                    128 (to 306)
                50      DUP_TOP                         
                52      LOAD_GLOBAL                     3: errors
                54      LOAD_ATTR                       4: HeaderParseError
                56      JUMP_IF_NOT_EXC_MATCH           152 (to 304)
                58      POP_TOP                         
                60      POP_TOP                         
                62      POP_TOP                         
                64      LOAD_CONST                      3: None
                66      STORE_FAST                      3: leader
                68      LOAD_FAST                       0: value
                70      LOAD_CONST                      1: 0
                72      BINARY_SUBSCR                   
                74      LOAD_GLOBAL                     5: CFWS_LEADER
                76      CONTAINS_OP                     0 (in)
                78      POP_JUMP_IF_FALSE               102 (to 204)
                80      LOAD_GLOBAL                     6: get_cfws
                82      LOAD_FAST                       0: value
                84      CALL_FUNCTION                   1
                86      UNPACK_SEQUENCE                 2
                88      STORE_FAST                      3: leader
                90      STORE_FAST                      0: value
                92      LOAD_FAST                       0: value
                94      POP_JUMP_IF_FALSE               54 (to 108)
                96      LOAD_FAST                       0: value
                98      LOAD_CONST                      1: 0
                100     BINARY_SUBSCR                   
                102     LOAD_CONST                      4: ',;'
                104     CONTAINS_OP                     0 (in)
                106     POP_JUMP_IF_FALSE               69 (to 138)
                108     LOAD_FAST                       1: mailbox_list
                110     LOAD_METHOD                     2: append
                112     LOAD_FAST                       3: leader
                114     CALL_METHOD                     1
                116     POP_TOP                         
                118     LOAD_FAST                       1: mailbox_list
                120     LOAD_ATTR                       7: defects
                122     LOAD_METHOD                     2: append
                124     LOAD_GLOBAL                     3: errors
                126     LOAD_METHOD                     8: ObsoleteHeaderDefect
                128     LOAD_CONST                      5: 'empty element in mailbox-list'
                130     CALL_METHOD                     1
                132     CALL_METHOD                     1
                134     POP_TOP                         
                136     JUMP_FORWARD                    81 (to 300)
                138     LOAD_GLOBAL                     9: get_invalid_mailbox
                140     LOAD_FAST                       0: value
                142     LOAD_CONST                      4: ',;'
                144     CALL_FUNCTION                   2
                146     UNPACK_SEQUENCE                 2
                148     STORE_FAST                      2: token
                150     STORE_FAST                      0: value
                152     LOAD_FAST                       3: leader
                154     LOAD_CONST                      3: None
                156     IS_OP                           1 (is not)
                158     POP_JUMP_IF_FALSE               87 (to 174)
                160     LOAD_FAST                       3: leader
                162     BUILD_LIST                      1
                164     LOAD_FAST                       2: token
                166     LOAD_CONST                      3: None
                168     LOAD_CONST                      1: 0
                170     BUILD_SLICE                     2
                172     STORE_SUBSCR                    
                174     LOAD_FAST                       1: mailbox_list
                176     LOAD_METHOD                     2: append
                178     LOAD_FAST                       2: token
                180     CALL_METHOD                     1
                182     POP_TOP                         
                184     LOAD_FAST                       1: mailbox_list
                186     LOAD_ATTR                       7: defects
                188     LOAD_METHOD                     2: append
                190     LOAD_GLOBAL                     3: errors
                192     LOAD_METHOD                     10: InvalidHeaderDefect
                194     LOAD_CONST                      6: 'invalid mailbox in mailbox-list'
                196     CALL_METHOD                     1
                198     CALL_METHOD                     1
                200     POP_TOP                         
                202     JUMP_FORWARD                    48 (to 300)
                204     LOAD_FAST                       0: value
                206     LOAD_CONST                      1: 0
                208     BINARY_SUBSCR                   
                210     LOAD_CONST                      7: ','
                212     COMPARE_OP                      2 (==)
                214     POP_JUMP_IF_FALSE               118 (to 236)
                216     LOAD_FAST                       1: mailbox_list
                218     LOAD_ATTR                       7: defects
                220     LOAD_METHOD                     2: append
                222     LOAD_GLOBAL                     3: errors
                224     LOAD_METHOD                     8: ObsoleteHeaderDefect
                226     LOAD_CONST                      5: 'empty element in mailbox-list'
                228     CALL_METHOD                     1
                230     CALL_METHOD                     1
                232     POP_TOP                         
                234     JUMP_FORWARD                    32 (to 300)
                236     LOAD_GLOBAL                     9: get_invalid_mailbox
                238     LOAD_FAST                       0: value
                240     LOAD_CONST                      4: ',;'
                242     CALL_FUNCTION                   2
                244     UNPACK_SEQUENCE                 2
                246     STORE_FAST                      2: token
                248     STORE_FAST                      0: value
                250     LOAD_FAST                       3: leader
                252     LOAD_CONST                      3: None
                254     IS_OP                           1 (is not)
                256     POP_JUMP_IF_FALSE               136 (to 272)
                258     LOAD_FAST                       3: leader
                260     BUILD_LIST                      1
                262     LOAD_FAST                       2: token
                264     LOAD_CONST                      3: None
                266     LOAD_CONST                      1: 0
                268     BUILD_SLICE                     2
                270     STORE_SUBSCR                    
                272     LOAD_FAST                       1: mailbox_list
                274     LOAD_METHOD                     2: append
                276     LOAD_FAST                       2: token
                278     CALL_METHOD                     1
                280     POP_TOP                         
                282     LOAD_FAST                       1: mailbox_list
                284     LOAD_ATTR                       7: defects
                286     LOAD_METHOD                     2: append
                288     LOAD_GLOBAL                     3: errors
                290     LOAD_METHOD                     10: InvalidHeaderDefect
                292     LOAD_CONST                      6: 'invalid mailbox in mailbox-list'
                294     CALL_METHOD                     1
                296     CALL_METHOD                     1
                298     POP_TOP                         
                300     POP_EXCEPT                      
                302     JUMP_FORWARD                    1 (to 306)
                304     RERAISE                         0
                306     LOAD_FAST                       0: value
                308     POP_JUMP_IF_FALSE               189 (to 378)
                310     LOAD_FAST                       0: value
                312     LOAD_CONST                      1: 0
                314     BINARY_SUBSCR                   
                316     LOAD_CONST                      4: ',;'
                318     CONTAINS_OP                     1 (not in)
                320     POP_JUMP_IF_FALSE               189 (to 378)
                322     LOAD_FAST                       1: mailbox_list
                324     LOAD_CONST                      8: -1
                326     BINARY_SUBSCR                   
                328     STORE_FAST                      4: mailbox
                330     LOAD_CONST                      9: 'invalid-mailbox'
                332     LOAD_FAST                       4: mailbox
                334     STORE_ATTR                      11: token_type
                336     LOAD_GLOBAL                     9: get_invalid_mailbox
                338     LOAD_FAST                       0: value
                340     LOAD_CONST                      4: ',;'
                342     CALL_FUNCTION                   2
                344     UNPACK_SEQUENCE                 2
                346     STORE_FAST                      2: token
                348     STORE_FAST                      0: value
                350     LOAD_FAST                       4: mailbox
                352     LOAD_METHOD                     12: extend
                354     LOAD_FAST                       2: token
                356     CALL_METHOD                     1
                358     POP_TOP                         
                360     LOAD_FAST                       1: mailbox_list
                362     LOAD_ATTR                       7: defects
                364     LOAD_METHOD                     2: append
                366     LOAD_GLOBAL                     3: errors
                368     LOAD_METHOD                     10: InvalidHeaderDefect
                370     LOAD_CONST                      6: 'invalid mailbox in mailbox-list'
                372     CALL_METHOD                     1
                374     CALL_METHOD                     1
                376     POP_TOP                         
                378     LOAD_FAST                       0: value
                380     POP_JUMP_IF_FALSE               208 (to 416)
                382     LOAD_FAST                       0: value
                384     LOAD_CONST                      1: 0
                386     BINARY_SUBSCR                   
                388     LOAD_CONST                      7: ','
                390     COMPARE_OP                      2 (==)
                392     POP_JUMP_IF_FALSE               208 (to 416)
                394     LOAD_FAST                       1: mailbox_list
                396     LOAD_METHOD                     2: append
                398     LOAD_GLOBAL                     13: ListSeparator
                400     CALL_METHOD                     1
                402     POP_TOP                         
                404     LOAD_FAST                       0: value
                406     LOAD_CONST                      10: 1
                408     LOAD_CONST                      3: None
                410     BUILD_SLICE                     2
                412     BINARY_SUBSCR                   
                414     STORE_FAST                      0: value
                416     LOAD_FAST                       0: value
                418     POP_JUMP_IF_FALSE               216 (to 432)
                420     LOAD_FAST                       0: value
                422     LOAD_CONST                      1: 0
                424     BINARY_SUBSCR                   
                426     LOAD_CONST                      2: ';'
                428     COMPARE_OP                      3 (!=)
                430     POP_JUMP_IF_TRUE                11 (to 22)
                432     LOAD_FAST                       1: mailbox_list
                434     LOAD_FAST                       0: value
                436     BUILD_TUPLE                     2
                438     RETURN_VALUE                    
        'get_mailbox_list'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_group_list
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'GroupList'
                'defects'
                'append'
                'errors'
                'InvalidHeaderDefect'
                'CFWS_LEADER'
                'get_cfws'
                'get_mailbox_list'
                'len'
                'all_mailboxes'
                'extend'
                'ObsoleteHeaderDefect'
            [Var Names]
                'value'
                'group_list'
                'leader'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' group-list = mailbox-list / CFWS / obs-group-list\n        obs-group-list = 1*([CFWS] ",") [CFWS]\n\n    '
                'end of header before group-list'
                None
                0
                'end of header in group-list'
                ';'
                'group-list with empty entries'
            [Disassembly]
                0       LOAD_GLOBAL                     0: GroupList
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: group_list
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_TRUE                18 (to 36)
                10      LOAD_FAST                       1: group_list
                12      LOAD_ATTR                       1: defects
                14      LOAD_METHOD                     2: append
                16      LOAD_GLOBAL                     3: errors
                18      LOAD_METHOD                     4: InvalidHeaderDefect
                20      LOAD_CONST                      1: 'end of header before group-list'
                22      CALL_METHOD                     1
                24      CALL_METHOD                     1
                26      POP_TOP                         
                28      LOAD_FAST                       1: group_list
                30      LOAD_FAST                       0: value
                32      BUILD_TUPLE                     2
                34      RETURN_VALUE                    
                36      LOAD_CONST                      2: None
                38      STORE_FAST                      2: leader
                40      LOAD_FAST                       0: value
                42      POP_JUMP_IF_FALSE               69 (to 138)
                44      LOAD_FAST                       0: value
                46      LOAD_CONST                      3: 0
                48      BINARY_SUBSCR                   
                50      LOAD_GLOBAL                     5: CFWS_LEADER
                52      CONTAINS_OP                     0 (in)
                54      POP_JUMP_IF_FALSE               69 (to 138)
                56      LOAD_GLOBAL                     6: get_cfws
                58      LOAD_FAST                       0: value
                60      CALL_FUNCTION                   1
                62      UNPACK_SEQUENCE                 2
                64      STORE_FAST                      2: leader
                66      STORE_FAST                      0: value
                68      LOAD_FAST                       0: value
                70      POP_JUMP_IF_TRUE                54 (to 108)
                72      LOAD_FAST                       1: group_list
                74      LOAD_ATTR                       1: defects
                76      LOAD_METHOD                     2: append
                78      LOAD_GLOBAL                     3: errors
                80      LOAD_METHOD                     4: InvalidHeaderDefect
                82      LOAD_CONST                      4: 'end of header in group-list'
                84      CALL_METHOD                     1
                86      CALL_METHOD                     1
                88      POP_TOP                         
                90      LOAD_FAST                       1: group_list
                92      LOAD_METHOD                     2: append
                94      LOAD_FAST                       2: leader
                96      CALL_METHOD                     1
                98      POP_TOP                         
                100     LOAD_FAST                       1: group_list
                102     LOAD_FAST                       0: value
                104     BUILD_TUPLE                     2
                106     RETURN_VALUE                    
                108     LOAD_FAST                       0: value
                110     LOAD_CONST                      3: 0
                112     BINARY_SUBSCR                   
                114     LOAD_CONST                      5: ';'
                116     COMPARE_OP                      2 (==)
                118     POP_JUMP_IF_FALSE               69 (to 138)
                120     LOAD_FAST                       1: group_list
                122     LOAD_METHOD                     2: append
                124     LOAD_FAST                       2: leader
                126     CALL_METHOD                     1
                128     POP_TOP                         
                130     LOAD_FAST                       1: group_list
                132     LOAD_FAST                       0: value
                134     BUILD_TUPLE                     2
                136     RETURN_VALUE                    
                138     LOAD_GLOBAL                     7: get_mailbox_list
                140     LOAD_FAST                       0: value
                142     CALL_FUNCTION                   1
                144     UNPACK_SEQUENCE                 2
                146     STORE_FAST                      3: token
                148     STORE_FAST                      0: value
                150     LOAD_GLOBAL                     8: len
                152     LOAD_FAST                       3: token
                154     LOAD_ATTR                       9: all_mailboxes
                156     CALL_FUNCTION                   1
                158     LOAD_CONST                      3: 0
                160     COMPARE_OP                      2 (==)
                162     POP_JUMP_IF_FALSE               109 (to 218)
                164     LOAD_FAST                       2: leader
                166     LOAD_CONST                      2: None
                168     IS_OP                           1 (is not)
                170     POP_JUMP_IF_FALSE               91 (to 182)
                172     LOAD_FAST                       1: group_list
                174     LOAD_METHOD                     2: append
                176     LOAD_FAST                       2: leader
                178     CALL_METHOD                     1
                180     POP_TOP                         
                182     LOAD_FAST                       1: group_list
                184     LOAD_METHOD                     10: extend
                186     LOAD_FAST                       3: token
                188     CALL_METHOD                     1
                190     POP_TOP                         
                192     LOAD_FAST                       1: group_list
                194     LOAD_ATTR                       1: defects
                196     LOAD_METHOD                     2: append
                198     LOAD_GLOBAL                     3: errors
                200     LOAD_METHOD                     11: ObsoleteHeaderDefect
                202     LOAD_CONST                      6: 'group-list with empty entries'
                204     CALL_METHOD                     1
                206     CALL_METHOD                     1
                208     POP_TOP                         
                210     LOAD_FAST                       1: group_list
                212     LOAD_FAST                       0: value
                214     BUILD_TUPLE                     2
                216     RETURN_VALUE                    
                218     LOAD_FAST                       2: leader
                220     LOAD_CONST                      2: None
                222     IS_OP                           1 (is not)
                224     POP_JUMP_IF_FALSE               120 (to 240)
                226     LOAD_FAST                       2: leader
                228     BUILD_LIST                      1
                230     LOAD_FAST                       3: token
                232     LOAD_CONST                      2: None
                234     LOAD_CONST                      3: 0
                236     BUILD_SLICE                     2
                238     STORE_SUBSCR                    
                240     LOAD_FAST                       1: group_list
                242     LOAD_METHOD                     2: append
                244     LOAD_FAST                       3: token
                246     CALL_METHOD                     1
                248     POP_TOP                         
                250     LOAD_FAST                       1: group_list
                252     LOAD_FAST                       0: value
                254     BUILD_TUPLE                     2
                256     RETURN_VALUE                    
        'get_group_list'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_group
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Group'
                'get_display_name'
                'errors'
                'HeaderParseError'
                'format'
                'append'
                'ValueTerminal'
                'get_group_list'
                'defects'
                'InvalidHeaderDefect'
                'CFWS_LEADER'
                'get_cfws'
            [Var Names]
                'value'
                'group'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' group = display-name ":" [group-list] ";" [CFWS]\n\n    '
                0
                ':'
                "expected ':' at end of group display name but found '{}'"
                'group-display-name-terminator'
                1
                None
                ';'
                'group-terminator'
                'end of header in group'
                "expected ';' at end of group but found {}"
            [Disassembly]
                0       LOAD_GLOBAL                     0: Group
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: group
                6       LOAD_GLOBAL                     1: get_display_name
                8       LOAD_FAST                       0: value
                10      CALL_FUNCTION                   1
                12      UNPACK_SEQUENCE                 2
                14      STORE_FAST                      2: token
                16      STORE_FAST                      0: value
                18      LOAD_FAST                       0: value
                20      POP_JUMP_IF_FALSE               17 (to 34)
                22      LOAD_FAST                       0: value
                24      LOAD_CONST                      1: 0
                26      BINARY_SUBSCR                   
                28      LOAD_CONST                      2: ':'
                30      COMPARE_OP                      3 (!=)
                32      POP_JUMP_IF_FALSE               25 (to 50)
                34      LOAD_GLOBAL                     2: errors
                36      LOAD_METHOD                     3: HeaderParseError
                38      LOAD_CONST                      3: "expected ':' at end of group display name but found '{}'"
                40      LOAD_METHOD                     4: format
                42      LOAD_FAST                       0: value
                44      CALL_METHOD                     1
                46      CALL_METHOD                     1
                48      RAISE_VARARGS                   1
                50      LOAD_FAST                       1: group
                52      LOAD_METHOD                     5: append
                54      LOAD_FAST                       2: token
                56      CALL_METHOD                     1
                58      POP_TOP                         
                60      LOAD_FAST                       1: group
                62      LOAD_METHOD                     5: append
                64      LOAD_GLOBAL                     6: ValueTerminal
                66      LOAD_CONST                      2: ':'
                68      LOAD_CONST                      4: 'group-display-name-terminator'
                70      CALL_FUNCTION                   2
                72      CALL_METHOD                     1
                74      POP_TOP                         
                76      LOAD_FAST                       0: value
                78      LOAD_CONST                      5: 1
                80      LOAD_CONST                      6: None
                82      BUILD_SLICE                     2
                84      BINARY_SUBSCR                   
                86      STORE_FAST                      0: value
                88      LOAD_FAST                       0: value
                90      POP_JUMP_IF_FALSE               68 (to 136)
                92      LOAD_FAST                       0: value
                94      LOAD_CONST                      1: 0
                96      BINARY_SUBSCR                   
                98      LOAD_CONST                      7: ';'
                100     COMPARE_OP                      2 (==)
                102     POP_JUMP_IF_FALSE               68 (to 136)
                104     LOAD_FAST                       1: group
                106     LOAD_METHOD                     5: append
                108     LOAD_GLOBAL                     6: ValueTerminal
                110     LOAD_CONST                      7: ';'
                112     LOAD_CONST                      8: 'group-terminator'
                114     CALL_FUNCTION                   2
                116     CALL_METHOD                     1
                118     POP_TOP                         
                120     LOAD_FAST                       1: group
                122     LOAD_FAST                       0: value
                124     LOAD_CONST                      5: 1
                126     LOAD_CONST                      6: None
                128     BUILD_SLICE                     2
                130     BINARY_SUBSCR                   
                132     BUILD_TUPLE                     2
                134     RETURN_VALUE                    
                136     LOAD_GLOBAL                     7: get_group_list
                138     LOAD_FAST                       0: value
                140     CALL_FUNCTION                   1
                142     UNPACK_SEQUENCE                 2
                144     STORE_FAST                      2: token
                146     STORE_FAST                      0: value
                148     LOAD_FAST                       1: group
                150     LOAD_METHOD                     5: append
                152     LOAD_FAST                       2: token
                154     CALL_METHOD                     1
                156     POP_TOP                         
                158     LOAD_FAST                       0: value
                160     POP_JUMP_IF_TRUE                91 (to 182)
                162     LOAD_FAST                       1: group
                164     LOAD_ATTR                       8: defects
                166     LOAD_METHOD                     5: append
                168     LOAD_GLOBAL                     2: errors
                170     LOAD_METHOD                     9: InvalidHeaderDefect
                172     LOAD_CONST                      9: 'end of header in group'
                174     CALL_METHOD                     1
                176     CALL_METHOD                     1
                178     POP_TOP                         
                180     JUMP_FORWARD                    14 (to 210)
                182     LOAD_FAST                       0: value
                184     LOAD_CONST                      1: 0
                186     BINARY_SUBSCR                   
                188     LOAD_CONST                      7: ';'
                190     COMPARE_OP                      3 (!=)
                192     POP_JUMP_IF_FALSE               105 (to 210)
                194     LOAD_GLOBAL                     2: errors
                196     LOAD_METHOD                     3: HeaderParseError
                198     LOAD_CONST                      10: "expected ';' at end of group but found {}"
                200     LOAD_METHOD                     4: format
                202     LOAD_FAST                       0: value
                204     CALL_METHOD                     1
                206     CALL_METHOD                     1
                208     RAISE_VARARGS                   1
                210     LOAD_FAST                       1: group
                212     LOAD_METHOD                     5: append
                214     LOAD_GLOBAL                     6: ValueTerminal
                216     LOAD_CONST                      7: ';'
                218     LOAD_CONST                      8: 'group-terminator'
                220     CALL_FUNCTION                   2
                222     CALL_METHOD                     1
                224     POP_TOP                         
                226     LOAD_FAST                       0: value
                228     LOAD_CONST                      5: 1
                230     LOAD_CONST                      6: None
                232     BUILD_SLICE                     2
                234     BINARY_SUBSCR                   
                236     STORE_FAST                      0: value
                238     LOAD_FAST                       0: value
                240     POP_JUMP_IF_FALSE               138 (to 276)
                242     LOAD_FAST                       0: value
                244     LOAD_CONST                      1: 0
                246     BINARY_SUBSCR                   
                248     LOAD_GLOBAL                     10: CFWS_LEADER
                250     CONTAINS_OP                     0 (in)
                252     POP_JUMP_IF_FALSE               138 (to 276)
                254     LOAD_GLOBAL                     11: get_cfws
                256     LOAD_FAST                       0: value
                258     CALL_FUNCTION                   1
                260     UNPACK_SEQUENCE                 2
                262     STORE_FAST                      2: token
                264     STORE_FAST                      0: value
                266     LOAD_FAST                       1: group
                268     LOAD_METHOD                     5: append
                270     LOAD_FAST                       2: token
                272     CALL_METHOD                     1
                274     POP_TOP                         
                276     LOAD_FAST                       1: group
                278     LOAD_FAST                       0: value
                280     BUILD_TUPLE                     2
                282     RETURN_VALUE                    
        'get_group'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_address
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 11
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Address'
                'get_group'
                'errors'
                'HeaderParseError'
                'get_mailbox'
                'format'
                'append'
            [Var Names]
                'value'
                'address'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                " address = mailbox / group\n\n    Note that counter-intuitively, an address can be either a single address or\n    a list of addresses (a group).  This is why the returned Address object has\n    a 'mailboxes' attribute which treats a single address as a list of length\n    one.  When you need to differentiate between to two cases, extract the single\n    element, which is either a mailbox or a group token.\n\n    "
                "expected address but found '{}'"
            [Disassembly]
                0       LOAD_GLOBAL                     0: Address
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: address
                6       SETUP_FINALLY                   8 (to 24)
                8       LOAD_GLOBAL                     1: get_group
                10      LOAD_FAST                       0: value
                12      CALL_FUNCTION                   1
                14      UNPACK_SEQUENCE                 2
                16      STORE_FAST                      2: token
                18      STORE_FAST                      0: value
                20      POP_BLOCK                       
                22      JUMP_FORWARD                    35 (to 94)
                24      DUP_TOP                         
                26      LOAD_GLOBAL                     2: errors
                28      LOAD_ATTR                       3: HeaderParseError
                30      JUMP_IF_NOT_EXC_MATCH           46 (to 92)
                32      POP_TOP                         
                34      POP_TOP                         
                36      POP_TOP                         
                38      SETUP_FINALLY                   8 (to 56)
                40      LOAD_GLOBAL                     4: get_mailbox
                42      LOAD_FAST                       0: value
                44      CALL_FUNCTION                   1
                46      UNPACK_SEQUENCE                 2
                48      STORE_FAST                      2: token
                50      STORE_FAST                      0: value
                52      POP_BLOCK                       
                54      JUMP_FORWARD                    16 (to 88)
                56      DUP_TOP                         
                58      LOAD_GLOBAL                     2: errors
                60      LOAD_ATTR                       3: HeaderParseError
                62      JUMP_IF_NOT_EXC_MATCH           43 (to 86)
                64      POP_TOP                         
                66      POP_TOP                         
                68      POP_TOP                         
                70      LOAD_GLOBAL                     2: errors
                72      LOAD_METHOD                     3: HeaderParseError
                74      LOAD_CONST                      1: "expected address but found '{}'"
                76      LOAD_METHOD                     5: format
                78      LOAD_FAST                       0: value
                80      CALL_METHOD                     1
                82      CALL_METHOD                     1
                84      RAISE_VARARGS                   1
                86      RERAISE                         0
                88      POP_EXCEPT                      
                90      JUMP_FORWARD                    1 (to 94)
                92      RERAISE                         0
                94      LOAD_FAST                       1: address
                96      LOAD_METHOD                     6: append
                98      LOAD_FAST                       2: token
                100     CALL_METHOD                     1
                102     POP_TOP                         
                104     LOAD_FAST                       1: address
                106     LOAD_FAST                       0: value
                108     BUILD_TUPLE                     2
                110     RETURN_VALUE                    
        'get_address'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_address_list
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 6
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'AddressList'
                'get_address'
                'append'
                'errors'
                'HeaderParseError'
                'CFWS_LEADER'
                'get_cfws'
                'defects'
                'ObsoleteHeaderDefect'
                'get_invalid_mailbox'
                'Address'
                'InvalidHeaderDefect'
                'token_type'
                'extend'
                'ValueTerminal'
            [Var Names]
                'value'
                'address_list'
                'token'
                'err'
                'leader'
                'mailbox'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' address_list = (address *("," address)) / obs-addr-list\n        obs-addr-list = *([CFWS] ",") address *("," [address / CFWS])\n\n    We depart from the formal grammar here by continuing to parse until the end\n    of the input, assuming the input to be entirely composed of an\n    address-list.  This is always true in email parsing, and allows us\n    to skip invalid addresses to parse additional valid ones.\n\n    '
                None
                0
                ','
                'address-list entry with no content'
                'invalid address in address-list'
                'empty element in address-list'
                -1
                'invalid-mailbox'
                'list-separator'
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: AddressList
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: address_list
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               218 (to 436)
                10      SETUP_FINALLY                   13 (to 38)
                12      LOAD_GLOBAL                     1: get_address
                14      LOAD_FAST                       0: value
                16      CALL_FUNCTION                   1
                18      UNPACK_SEQUENCE                 2
                20      STORE_FAST                      2: token
                22      STORE_FAST                      0: value
                24      LOAD_FAST                       1: address_list
                26      LOAD_METHOD                     2: append
                28      LOAD_FAST                       2: token
                30      CALL_METHOD                     1
                32      POP_TOP                         
                34      POP_BLOCK                       
                36      JUMP_FORWARD                    143 (to 324)
                38      DUP_TOP                         
                40      LOAD_GLOBAL                     3: errors
                42      LOAD_ATTR                       4: HeaderParseError
                44      JUMP_IF_NOT_EXC_MATCH           161 (to 322)
                46      POP_TOP                         
                48      STORE_FAST                      3: err
                50      POP_TOP                         
                52      SETUP_FINALLY                   130 (to 314)
                54      LOAD_CONST                      1: None
                56      STORE_FAST                      4: leader
                58      LOAD_FAST                       0: value
                60      LOAD_CONST                      2: 0
                62      BINARY_SUBSCR                   
                64      LOAD_GLOBAL                     5: CFWS_LEADER
                66      CONTAINS_OP                     0 (in)
                68      POP_JUMP_IF_FALSE               100 (to 200)
                70      LOAD_GLOBAL                     6: get_cfws
                72      LOAD_FAST                       0: value
                74      CALL_FUNCTION                   1
                76      UNPACK_SEQUENCE                 2
                78      STORE_FAST                      4: leader
                80      STORE_FAST                      0: value
                82      LOAD_FAST                       0: value
                84      POP_JUMP_IF_FALSE               49 (to 98)
                86      LOAD_FAST                       0: value
                88      LOAD_CONST                      2: 0
                90      BINARY_SUBSCR                   
                92      LOAD_CONST                      3: ','
                94      COMPARE_OP                      2 (==)
                96      POP_JUMP_IF_FALSE               64 (to 128)
                98      LOAD_FAST                       1: address_list
                100     LOAD_METHOD                     2: append
                102     LOAD_FAST                       4: leader
                104     CALL_METHOD                     1
                106     POP_TOP                         
                108     LOAD_FAST                       1: address_list
                110     LOAD_ATTR                       7: defects
                112     LOAD_METHOD                     2: append
                114     LOAD_GLOBAL                     3: errors
                116     LOAD_METHOD                     8: ObsoleteHeaderDefect
                118     LOAD_CONST                      4: 'address-list entry with no content'
                120     CALL_METHOD                     1
                122     CALL_METHOD                     1
                124     POP_TOP                         
                126     JUMP_FORWARD                    87 (to 302)
                128     LOAD_GLOBAL                     9: get_invalid_mailbox
                130     LOAD_FAST                       0: value
                132     LOAD_CONST                      3: ','
                134     CALL_FUNCTION                   2
                136     UNPACK_SEQUENCE                 2
                138     STORE_FAST                      2: token
                140     STORE_FAST                      0: value
                142     LOAD_FAST                       4: leader
                144     LOAD_CONST                      1: None
                146     IS_OP                           1 (is not)
                148     POP_JUMP_IF_FALSE               82 (to 164)
                150     LOAD_FAST                       4: leader
                152     BUILD_LIST                      1
                154     LOAD_FAST                       2: token
                156     LOAD_CONST                      1: None
                158     LOAD_CONST                      2: 0
                160     BUILD_SLICE                     2
                162     STORE_SUBSCR                    
                164     LOAD_FAST                       1: address_list
                166     LOAD_METHOD                     2: append
                168     LOAD_GLOBAL                     10: Address
                170     LOAD_FAST                       2: token
                172     BUILD_LIST                      1
                174     CALL_FUNCTION                   1
                176     CALL_METHOD                     1
                178     POP_TOP                         
                180     LOAD_FAST                       1: address_list
                182     LOAD_ATTR                       7: defects
                184     LOAD_METHOD                     2: append
                186     LOAD_GLOBAL                     3: errors
                188     LOAD_METHOD                     11: InvalidHeaderDefect
                190     LOAD_CONST                      5: 'invalid address in address-list'
                192     CALL_METHOD                     1
                194     CALL_METHOD                     1
                196     POP_TOP                         
                198     JUMP_FORWARD                    51 (to 302)
                200     LOAD_FAST                       0: value
                202     LOAD_CONST                      2: 0
                204     BINARY_SUBSCR                   
                206     LOAD_CONST                      3: ','
                208     COMPARE_OP                      2 (==)
                210     POP_JUMP_IF_FALSE               116 (to 232)
                212     LOAD_FAST                       1: address_list
                214     LOAD_ATTR                       7: defects
                216     LOAD_METHOD                     2: append
                218     LOAD_GLOBAL                     3: errors
                220     LOAD_METHOD                     8: ObsoleteHeaderDefect
                222     LOAD_CONST                      6: 'empty element in address-list'
                224     CALL_METHOD                     1
                226     CALL_METHOD                     1
                228     POP_TOP                         
                230     JUMP_FORWARD                    35 (to 302)
                232     LOAD_GLOBAL                     9: get_invalid_mailbox
                234     LOAD_FAST                       0: value
                236     LOAD_CONST                      3: ','
                238     CALL_FUNCTION                   2
                240     UNPACK_SEQUENCE                 2
                242     STORE_FAST                      2: token
                244     STORE_FAST                      0: value
                246     LOAD_FAST                       4: leader
                248     LOAD_CONST                      1: None
                250     IS_OP                           1 (is not)
                252     POP_JUMP_IF_FALSE               134 (to 268)
                254     LOAD_FAST                       4: leader
                256     BUILD_LIST                      1
                258     LOAD_FAST                       2: token
                260     LOAD_CONST                      1: None
                262     LOAD_CONST                      2: 0
                264     BUILD_SLICE                     2
                266     STORE_SUBSCR                    
                268     LOAD_FAST                       1: address_list
                270     LOAD_METHOD                     2: append
                272     LOAD_GLOBAL                     10: Address
                274     LOAD_FAST                       2: token
                276     BUILD_LIST                      1
                278     CALL_FUNCTION                   1
                280     CALL_METHOD                     1
                282     POP_TOP                         
                284     LOAD_FAST                       1: address_list
                286     LOAD_ATTR                       7: defects
                288     LOAD_METHOD                     2: append
                290     LOAD_GLOBAL                     3: errors
                292     LOAD_METHOD                     11: InvalidHeaderDefect
                294     LOAD_CONST                      5: 'invalid address in address-list'
                296     CALL_METHOD                     1
                298     CALL_METHOD                     1
                300     POP_TOP                         
                302     POP_BLOCK                       
                304     POP_EXCEPT                      
                306     LOAD_CONST                      1: None
                308     STORE_FAST                      3: err
                310     DELETE_FAST                     3: err
                312     JUMP_FORWARD                    5 (to 324)
                314     LOAD_CONST                      1: None
                316     STORE_FAST                      3: err
                318     DELETE_FAST                     3: err
                320     RERAISE                         1
                322     RERAISE                         0
                324     LOAD_FAST                       0: value
                326     POP_JUMP_IF_FALSE               200 (to 400)
                328     LOAD_FAST                       0: value
                330     LOAD_CONST                      2: 0
                332     BINARY_SUBSCR                   
                334     LOAD_CONST                      3: ','
                336     COMPARE_OP                      3 (!=)
                338     POP_JUMP_IF_FALSE               200 (to 400)
                340     LOAD_FAST                       1: address_list
                342     LOAD_CONST                      7: -1
                344     BINARY_SUBSCR                   
                346     LOAD_CONST                      2: 0
                348     BINARY_SUBSCR                   
                350     STORE_FAST                      5: mailbox
                352     LOAD_CONST                      8: 'invalid-mailbox'
                354     LOAD_FAST                       5: mailbox
                356     STORE_ATTR                      12: token_type
                358     LOAD_GLOBAL                     9: get_invalid_mailbox
                360     LOAD_FAST                       0: value
                362     LOAD_CONST                      3: ','
                364     CALL_FUNCTION                   2
                366     UNPACK_SEQUENCE                 2
                368     STORE_FAST                      2: token
                370     STORE_FAST                      0: value
                372     LOAD_FAST                       5: mailbox
                374     LOAD_METHOD                     13: extend
                376     LOAD_FAST                       2: token
                378     CALL_METHOD                     1
                380     POP_TOP                         
                382     LOAD_FAST                       1: address_list
                384     LOAD_ATTR                       7: defects
                386     LOAD_METHOD                     2: append
                388     LOAD_GLOBAL                     3: errors
                390     LOAD_METHOD                     11: InvalidHeaderDefect
                392     LOAD_CONST                      5: 'invalid address in address-list'
                394     CALL_METHOD                     1
                396     CALL_METHOD                     1
                398     POP_TOP                         
                400     LOAD_FAST                       0: value
                402     POP_JUMP_IF_FALSE               216 (to 432)
                404     LOAD_FAST                       1: address_list
                406     LOAD_METHOD                     2: append
                408     LOAD_GLOBAL                     14: ValueTerminal
                410     LOAD_CONST                      3: ','
                412     LOAD_CONST                      9: 'list-separator'
                414     CALL_FUNCTION                   2
                416     CALL_METHOD                     1
                418     POP_TOP                         
                420     LOAD_FAST                       0: value
                422     LOAD_CONST                      10: 1
                424     LOAD_CONST                      1: None
                426     BUILD_SLICE                     2
                428     BINARY_SUBSCR                   
                430     STORE_FAST                      0: value
                432     LOAD_FAST                       0: value
                434     POP_JUMP_IF_TRUE                5 (to 10)
                436     LOAD_FAST                       1: address_list
                438     LOAD_FAST                       0: value
                440     BUILD_TUPLE                     2
                442     RETURN_VALUE                    
        'get_address_list'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_no_fold_literal
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'NoFoldLiteral'
                'errors'
                'HeaderParseError'
                'format'
                'append'
                'ValueTerminal'
                'get_dtext'
            [Var Names]
                'value'
                'no_fold_literal'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' no-fold-literal = "[" *dtext "]"\n    '
                "expected no-fold-literal but found '{}'"
                0
                '['
                "expected '[' at the start of no-fold-literal but found '{}'"
                'no-fold-literal-start'
                1
                None
                ']'
                "expected ']' at the end of no-fold-literal but found '{}'"
                'no-fold-literal-end'
            [Disassembly]
                0       LOAD_GLOBAL                     0: NoFoldLiteral
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: no_fold_literal
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_TRUE                13 (to 26)
                10      LOAD_GLOBAL                     1: errors
                12      LOAD_METHOD                     2: HeaderParseError
                14      LOAD_CONST                      1: "expected no-fold-literal but found '{}'"
                16      LOAD_METHOD                     3: format
                18      LOAD_FAST                       0: value
                20      CALL_METHOD                     1
                22      CALL_METHOD                     1
                24      RAISE_VARARGS                   1
                26      LOAD_FAST                       0: value
                28      LOAD_CONST                      2: 0
                30      BINARY_SUBSCR                   
                32      LOAD_CONST                      3: '['
                34      COMPARE_OP                      3 (!=)
                36      POP_JUMP_IF_FALSE               27 (to 54)
                38      LOAD_GLOBAL                     1: errors
                40      LOAD_METHOD                     2: HeaderParseError
                42      LOAD_CONST                      4: "expected '[' at the start of no-fold-literal but found '{}'"
                44      LOAD_METHOD                     3: format
                46      LOAD_FAST                       0: value
                48      CALL_METHOD                     1
                50      CALL_METHOD                     1
                52      RAISE_VARARGS                   1
                54      LOAD_FAST                       1: no_fold_literal
                56      LOAD_METHOD                     4: append
                58      LOAD_GLOBAL                     5: ValueTerminal
                60      LOAD_CONST                      3: '['
                62      LOAD_CONST                      5: 'no-fold-literal-start'
                64      CALL_FUNCTION                   2
                66      CALL_METHOD                     1
                68      POP_TOP                         
                70      LOAD_FAST                       0: value
                72      LOAD_CONST                      6: 1
                74      LOAD_CONST                      7: None
                76      BUILD_SLICE                     2
                78      BINARY_SUBSCR                   
                80      STORE_FAST                      0: value
                82      LOAD_GLOBAL                     6: get_dtext
                84      LOAD_FAST                       0: value
                86      CALL_FUNCTION                   1
                88      UNPACK_SEQUENCE                 2
                90      STORE_FAST                      2: token
                92      STORE_FAST                      0: value
                94      LOAD_FAST                       1: no_fold_literal
                96      LOAD_METHOD                     4: append
                98      LOAD_FAST                       2: token
                100     CALL_METHOD                     1
                102     POP_TOP                         
                104     LOAD_FAST                       0: value
                106     POP_JUMP_IF_FALSE               60 (to 120)
                108     LOAD_FAST                       0: value
                110     LOAD_CONST                      2: 0
                112     BINARY_SUBSCR                   
                114     LOAD_CONST                      8: ']'
                116     COMPARE_OP                      3 (!=)
                118     POP_JUMP_IF_FALSE               68 (to 136)
                120     LOAD_GLOBAL                     1: errors
                122     LOAD_METHOD                     2: HeaderParseError
                124     LOAD_CONST                      9: "expected ']' at the end of no-fold-literal but found '{}'"
                126     LOAD_METHOD                     3: format
                128     LOAD_FAST                       0: value
                130     CALL_METHOD                     1
                132     CALL_METHOD                     1
                134     RAISE_VARARGS                   1
                136     LOAD_FAST                       1: no_fold_literal
                138     LOAD_METHOD                     4: append
                140     LOAD_GLOBAL                     5: ValueTerminal
                142     LOAD_CONST                      8: ']'
                144     LOAD_CONST                      10: 'no-fold-literal-end'
                146     CALL_FUNCTION                   2
                148     CALL_METHOD                     1
                150     POP_TOP                         
                152     LOAD_FAST                       1: no_fold_literal
                154     LOAD_FAST                       0: value
                156     LOAD_CONST                      6: 1
                158     LOAD_CONST                      7: None
                160     BUILD_SLICE                     2
                162     BINARY_SUBSCR                   
                164     BUILD_TUPLE                     2
                166     RETURN_VALUE                    
        'get_no_fold_literal'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_msg_id
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 14
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'MsgID'
                'CFWS_LEADER'
                'get_cfws'
                'append'
                'errors'
                'HeaderParseError'
                'format'
                'ValueTerminal'
                'get_dot_atom_text'
                'get_obs_local_part'
                'defects'
                'ObsoleteHeaderDefect'
                'InvalidHeaderDefect'
                'get_no_fold_literal'
                'get_domain'
            [Var Names]
                'value'
                'msg_id'
                'token'
                'e'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'msg-id = [CFWS] "<" id-left \'@\' id-right  ">" [CFWS]\n       id-left = dot-atom-text / obs-id-left\n       id-right = dot-atom-text / no-fold-literal / obs-id-right\n       no-fold-literal = "[" *dtext "]"\n    '
                0
                '<'
                "expected msg-id but found '{}'"
                'msg-id-start'
                1
                None
                'obsolete id-left in msg-id'
                "expected dot-atom-text or obs-id-left but found '{}'"
                '@'
                'msg-id with no id-right'
                '>'
                'msg-id-end'
                'address-at-symbol'
                'obsolete id-right in msg-id'
                "expected dot-atom-text, no-fold-literal or obs-id-right but found '{}'"
                "missing trailing '>' on msg-id"
            [Disassembly]
                0       LOAD_GLOBAL                     0: MsgID
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: msg_id
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               22 (to 44)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: CFWS_LEADER
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               22 (to 44)
                22      LOAD_GLOBAL                     2: get_cfws
                24      LOAD_FAST                       0: value
                26      CALL_FUNCTION                   1
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      2: token
                32      STORE_FAST                      0: value
                34      LOAD_FAST                       1: msg_id
                36      LOAD_METHOD                     3: append
                38      LOAD_FAST                       2: token
                40      CALL_METHOD                     1
                42      POP_TOP                         
                44      LOAD_FAST                       0: value
                46      POP_JUMP_IF_FALSE               30 (to 60)
                48      LOAD_FAST                       0: value
                50      LOAD_CONST                      1: 0
                52      BINARY_SUBSCR                   
                54      LOAD_CONST                      2: '<'
                56      COMPARE_OP                      3 (!=)
                58      POP_JUMP_IF_FALSE               38 (to 76)
                60      LOAD_GLOBAL                     4: errors
                62      LOAD_METHOD                     5: HeaderParseError
                64      LOAD_CONST                      3: "expected msg-id but found '{}'"
                66      LOAD_METHOD                     6: format
                68      LOAD_FAST                       0: value
                70      CALL_METHOD                     1
                72      CALL_METHOD                     1
                74      RAISE_VARARGS                   1
                76      LOAD_FAST                       1: msg_id
                78      LOAD_METHOD                     3: append
                80      LOAD_GLOBAL                     7: ValueTerminal
                82      LOAD_CONST                      2: '<'
                84      LOAD_CONST                      4: 'msg-id-start'
                86      CALL_FUNCTION                   2
                88      CALL_METHOD                     1
                90      POP_TOP                         
                92      LOAD_FAST                       0: value
                94      LOAD_CONST                      5: 1
                96      LOAD_CONST                      6: None
                98      BUILD_SLICE                     2
                100     BINARY_SUBSCR                   
                102     STORE_FAST                      0: value
                104     SETUP_FINALLY                   8 (to 122)
                106     LOAD_GLOBAL                     8: get_dot_atom_text
                108     LOAD_FAST                       0: value
                110     CALL_FUNCTION                   1
                112     UNPACK_SEQUENCE                 2
                114     STORE_FAST                      2: token
                116     STORE_FAST                      0: value
                118     POP_BLOCK                       
                120     JUMP_FORWARD                    44 (to 210)
                122     DUP_TOP                         
                124     LOAD_GLOBAL                     4: errors
                126     LOAD_ATTR                       5: HeaderParseError
                128     JUMP_IF_NOT_EXC_MATCH           104 (to 208)
                130     POP_TOP                         
                132     POP_TOP                         
                134     POP_TOP                         
                136     SETUP_FINALLY                   17 (to 172)
                138     LOAD_GLOBAL                     9: get_obs_local_part
                140     LOAD_FAST                       0: value
                142     CALL_FUNCTION                   1
                144     UNPACK_SEQUENCE                 2
                146     STORE_FAST                      2: token
                148     STORE_FAST                      0: value
                150     LOAD_FAST                       1: msg_id
                152     LOAD_ATTR                       10: defects
                154     LOAD_METHOD                     3: append
                156     LOAD_GLOBAL                     4: errors
                158     LOAD_METHOD                     11: ObsoleteHeaderDefect
                160     LOAD_CONST                      7: 'obsolete id-left in msg-id'
                162     CALL_METHOD                     1
                164     CALL_METHOD                     1
                166     POP_TOP                         
                168     POP_BLOCK                       
                170     JUMP_FORWARD                    16 (to 204)
                172     DUP_TOP                         
                174     LOAD_GLOBAL                     4: errors
                176     LOAD_ATTR                       5: HeaderParseError
                178     JUMP_IF_NOT_EXC_MATCH           101 (to 202)
                180     POP_TOP                         
                182     POP_TOP                         
                184     POP_TOP                         
                186     LOAD_GLOBAL                     4: errors
                188     LOAD_METHOD                     5: HeaderParseError
                190     LOAD_CONST                      8: "expected dot-atom-text or obs-id-left but found '{}'"
                192     LOAD_METHOD                     6: format
                194     LOAD_FAST                       0: value
                196     CALL_METHOD                     1
                198     CALL_METHOD                     1
                200     RAISE_VARARGS                   1
                202     RERAISE                         0
                204     POP_EXCEPT                      
                206     JUMP_FORWARD                    1 (to 210)
                208     RERAISE                         0
                210     LOAD_FAST                       1: msg_id
                212     LOAD_METHOD                     3: append
                214     LOAD_FAST                       2: token
                216     CALL_METHOD                     1
                218     POP_TOP                         
                220     LOAD_FAST                       0: value
                222     POP_JUMP_IF_FALSE               118 (to 236)
                224     LOAD_FAST                       0: value
                226     LOAD_CONST                      1: 0
                228     BINARY_SUBSCR                   
                230     LOAD_CONST                      9: '@'
                232     COMPARE_OP                      3 (!=)
                234     POP_JUMP_IF_FALSE               153 (to 306)
                236     LOAD_FAST                       1: msg_id
                238     LOAD_ATTR                       10: defects
                240     LOAD_METHOD                     3: append
                242     LOAD_GLOBAL                     4: errors
                244     LOAD_METHOD                     12: InvalidHeaderDefect
                246     LOAD_CONST                      10: 'msg-id with no id-right'
                248     CALL_METHOD                     1
                250     CALL_METHOD                     1
                252     POP_TOP                         
                254     LOAD_FAST                       0: value
                256     POP_JUMP_IF_FALSE               149 (to 298)
                258     LOAD_FAST                       0: value
                260     LOAD_CONST                      1: 0
                262     BINARY_SUBSCR                   
                264     LOAD_CONST                      11: '>'
                266     COMPARE_OP                      2 (==)
                268     POP_JUMP_IF_FALSE               149 (to 298)
                270     LOAD_FAST                       1: msg_id
                272     LOAD_METHOD                     3: append
                274     LOAD_GLOBAL                     7: ValueTerminal
                276     LOAD_CONST                      11: '>'
                278     LOAD_CONST                      12: 'msg-id-end'
                280     CALL_FUNCTION                   2
                282     CALL_METHOD                     1
                284     POP_TOP                         
                286     LOAD_FAST                       0: value
                288     LOAD_CONST                      5: 1
                290     LOAD_CONST                      6: None
                292     BUILD_SLICE                     2
                294     BINARY_SUBSCR                   
                296     STORE_FAST                      0: value
                298     LOAD_FAST                       1: msg_id
                300     LOAD_FAST                       0: value
                302     BUILD_TUPLE                     2
                304     RETURN_VALUE                    
                306     LOAD_FAST                       1: msg_id
                308     LOAD_METHOD                     3: append
                310     LOAD_GLOBAL                     7: ValueTerminal
                312     LOAD_CONST                      9: '@'
                314     LOAD_CONST                      13: 'address-at-symbol'
                316     CALL_FUNCTION                   2
                318     CALL_METHOD                     1
                320     POP_TOP                         
                322     LOAD_FAST                       0: value
                324     LOAD_CONST                      5: 1
                326     LOAD_CONST                      6: None
                328     BUILD_SLICE                     2
                330     BINARY_SUBSCR                   
                332     STORE_FAST                      0: value
                334     SETUP_FINALLY                   8 (to 352)
                336     LOAD_GLOBAL                     8: get_dot_atom_text
                338     LOAD_FAST                       0: value
                340     CALL_FUNCTION                   1
                342     UNPACK_SEQUENCE                 2
                344     STORE_FAST                      2: token
                346     STORE_FAST                      0: value
                348     POP_BLOCK                       
                350     JUMP_FORWARD                    72 (to 496)
                352     DUP_TOP                         
                354     LOAD_GLOBAL                     4: errors
                356     LOAD_ATTR                       5: HeaderParseError
                358     JUMP_IF_NOT_EXC_MATCH           247 (to 494)
                360     POP_TOP                         
                362     POP_TOP                         
                364     POP_TOP                         
                366     SETUP_FINALLY                   8 (to 384)
                368     LOAD_GLOBAL                     13: get_no_fold_literal
                370     LOAD_FAST                       0: value
                372     CALL_FUNCTION                   1
                374     UNPACK_SEQUENCE                 2
                376     STORE_FAST                      2: token
                378     STORE_FAST                      0: value
                380     POP_BLOCK                       
                382     JUMP_FORWARD                    53 (to 490)
                384     DUP_TOP                         
                386     LOAD_GLOBAL                     4: errors
                388     LOAD_ATTR                       5: HeaderParseError
                390     JUMP_IF_NOT_EXC_MATCH           244 (to 488)
                392     POP_TOP                         
                394     STORE_FAST                      3: e
                396     POP_TOP                         
                398     SETUP_FINALLY                   40 (to 480)
                400     SETUP_FINALLY                   17 (to 436)
                402     LOAD_GLOBAL                     14: get_domain
                404     LOAD_FAST                       0: value
                406     CALL_FUNCTION                   1
                408     UNPACK_SEQUENCE                 2
                410     STORE_FAST                      2: token
                412     STORE_FAST                      0: value
                414     LOAD_FAST                       1: msg_id
                416     LOAD_ATTR                       10: defects
                418     LOAD_METHOD                     3: append
                420     LOAD_GLOBAL                     4: errors
                422     LOAD_METHOD                     11: ObsoleteHeaderDefect
                424     LOAD_CONST                      14: 'obsolete id-right in msg-id'
                426     CALL_METHOD                     1
                428     CALL_METHOD                     1
                430     POP_TOP                         
                432     POP_BLOCK                       
                434     JUMP_FORWARD                    16 (to 468)
                436     DUP_TOP                         
                438     LOAD_GLOBAL                     4: errors
                440     LOAD_ATTR                       5: HeaderParseError
                442     JUMP_IF_NOT_EXC_MATCH           233 (to 466)
                444     POP_TOP                         
                446     POP_TOP                         
                448     POP_TOP                         
                450     LOAD_GLOBAL                     4: errors
                452     LOAD_METHOD                     5: HeaderParseError
                454     LOAD_CONST                      15: "expected dot-atom-text, no-fold-literal or obs-id-right but found '{}'"
                456     LOAD_METHOD                     6: format
                458     LOAD_FAST                       0: value
                460     CALL_METHOD                     1
                462     CALL_METHOD                     1
                464     RAISE_VARARGS                   1
                466     RERAISE                         0
                468     POP_BLOCK                       
                470     POP_EXCEPT                      
                472     LOAD_CONST                      6: None
                474     STORE_FAST                      3: e
                476     DELETE_FAST                     3: e
                478     JUMP_FORWARD                    5 (to 490)
                480     LOAD_CONST                      6: None
                482     STORE_FAST                      3: e
                484     DELETE_FAST                     3: e
                486     RERAISE                         1
                488     RERAISE                         0
                490     POP_EXCEPT                      
                492     JUMP_FORWARD                    1 (to 496)
                494     RERAISE                         0
                496     LOAD_FAST                       1: msg_id
                498     LOAD_METHOD                     3: append
                500     LOAD_FAST                       2: token
                502     CALL_METHOD                     1
                504     POP_TOP                         
                506     LOAD_FAST                       0: value
                508     POP_JUMP_IF_FALSE               270 (to 540)
                512     LOAD_FAST                       0: value
                514     LOAD_CONST                      1: 0
                516     BINARY_SUBSCR                   
                518     LOAD_CONST                      11: '>'
                520     COMPARE_OP                      2 (==)
                522     POP_JUMP_IF_FALSE               270 (to 540)
                526     LOAD_FAST                       0: value
                528     LOAD_CONST                      5: 1
                530     LOAD_CONST                      6: None
                532     BUILD_SLICE                     2
                534     BINARY_SUBSCR                   
                536     STORE_FAST                      0: value
                538     JUMP_FORWARD                    9 (to 558)
                540     LOAD_FAST                       1: msg_id
                542     LOAD_ATTR                       10: defects
                544     LOAD_METHOD                     3: append
                546     LOAD_GLOBAL                     4: errors
                548     LOAD_METHOD                     12: InvalidHeaderDefect
                550     LOAD_CONST                      16: "missing trailing '>' on msg-id"
                552     CALL_METHOD                     1
                554     CALL_METHOD                     1
                556     POP_TOP                         
                558     LOAD_FAST                       1: msg_id
                560     LOAD_METHOD                     3: append
                562     LOAD_GLOBAL                     7: ValueTerminal
                564     LOAD_CONST                      11: '>'
                566     LOAD_CONST                      12: 'msg-id-end'
                568     CALL_FUNCTION                   2
                570     CALL_METHOD                     1
                572     POP_TOP                         
                574     LOAD_FAST                       0: value
                576     POP_JUMP_IF_FALSE               308 (to 616)
                580     LOAD_FAST                       0: value
                582     LOAD_CONST                      1: 0
                584     BINARY_SUBSCR                   
                586     LOAD_GLOBAL                     1: CFWS_LEADER
                588     CONTAINS_OP                     0 (in)
                590     POP_JUMP_IF_FALSE               308 (to 616)
                594     LOAD_GLOBAL                     2: get_cfws
                596     LOAD_FAST                       0: value
                598     CALL_FUNCTION                   1
                600     UNPACK_SEQUENCE                 2
                602     STORE_FAST                      2: token
                604     STORE_FAST                      0: value
                606     LOAD_FAST                       1: msg_id
                608     LOAD_METHOD                     3: append
                610     LOAD_FAST                       2: token
                612     CALL_METHOD                     1
                614     POP_TOP                         
                616     LOAD_FAST                       1: msg_id
                618     LOAD_FAST                       0: value
                620     BUILD_TUPLE                     2
                622     RETURN_VALUE                    
        'get_msg_id'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: parse_message_id
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'MessageID'
                'get_msg_id'
                'append'
                'errors'
                'HeaderParseError'
                'get_unstructured'
                'InvalidMessageID'
                'defects'
                'InvalidHeaderDefect'
                'format'
            [Var Names]
                'value'
                'message_id'
                'token'
                'ex'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'message-id      =   "Message-ID:" msg-id CRLF\n    '
                'Invalid msg-id: {!r}'
                None
                'Unexpected {!r}'
            [Disassembly]
                0       LOAD_GLOBAL                     0: MessageID
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: message_id
                6       SETUP_FINALLY                   13 (to 34)
                8       LOAD_GLOBAL                     1: get_msg_id
                10      LOAD_FAST                       0: value
                12      CALL_FUNCTION                   1
                14      UNPACK_SEQUENCE                 2
                16      STORE_FAST                      2: token
                18      STORE_FAST                      0: value
                20      LOAD_FAST                       1: message_id
                22      LOAD_METHOD                     2: append
                24      LOAD_FAST                       2: token
                26      CALL_METHOD                     1
                28      POP_TOP                         
                30      POP_BLOCK                       
                32      JUMP_FORWARD                    40 (to 114)
                34      DUP_TOP                         
                36      LOAD_GLOBAL                     3: errors
                38      LOAD_ATTR                       4: HeaderParseError
                40      JUMP_IF_NOT_EXC_MATCH           56 (to 112)
                42      POP_TOP                         
                44      STORE_FAST                      3: ex
                46      POP_TOP                         
                48      SETUP_FINALLY                   27 (to 104)
                50      LOAD_GLOBAL                     5: get_unstructured
                52      LOAD_FAST                       0: value
                54      CALL_FUNCTION                   1
                56      STORE_FAST                      2: token
                58      LOAD_GLOBAL                     6: InvalidMessageID
                60      LOAD_FAST                       2: token
                62      CALL_FUNCTION                   1
                64      STORE_FAST                      1: message_id
                66      LOAD_FAST                       1: message_id
                68      LOAD_ATTR                       7: defects
                70      LOAD_METHOD                     2: append
                72      LOAD_GLOBAL                     3: errors
                74      LOAD_METHOD                     8: InvalidHeaderDefect
                76      LOAD_CONST                      1: 'Invalid msg-id: {!r}'
                78      LOAD_METHOD                     9: format
                80      LOAD_FAST                       3: ex
                82      CALL_METHOD                     1
                84      CALL_METHOD                     1
                86      CALL_METHOD                     1
                88      POP_TOP                         
                90      POP_BLOCK                       
                92      POP_EXCEPT                      
                94      LOAD_CONST                      2: None
                96      STORE_FAST                      3: ex
                98      DELETE_FAST                     3: ex
                100     LOAD_FAST                       1: message_id
                102     RETURN_VALUE                    
                104     LOAD_CONST                      2: None
                106     STORE_FAST                      3: ex
                108     DELETE_FAST                     3: ex
                110     RERAISE                         1
                112     RERAISE                         0
                114     LOAD_FAST                       0: value
                116     POP_JUMP_IF_FALSE               71 (to 142)
                118     LOAD_FAST                       1: message_id
                120     LOAD_ATTR                       7: defects
                122     LOAD_METHOD                     2: append
                124     LOAD_GLOBAL                     3: errors
                126     LOAD_METHOD                     8: InvalidHeaderDefect
                128     LOAD_CONST                      3: 'Unexpected {!r}'
                130     LOAD_METHOD                     9: format
                132     LOAD_FAST                       0: value
                134     CALL_METHOD                     1
                136     CALL_METHOD                     1
                138     CALL_METHOD                     1
                140     POP_TOP                         
                142     LOAD_FAST                       1: message_id
                144     RETURN_VALUE                    
        'parse_message_id'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: parse_mime_version
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'MIMEVersion'
                'defects'
                'append'
                'errors'
                'HeaderMissingRequiredValue'
                'CFWS_LEADER'
                'get_cfws'
                'isdigit'
                'InvalidHeaderDefect'
                'format'
                'ValueTerminal'
                'int'
                'major'
                'minor'
            [Var Names]
                'value'
                'mime_version'
                'token'
                'digits'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' mime-version = [CFWS] 1*digit [CFWS] "." [CFWS] 1*digit [CFWS]\n\n    '
                'Missing MIME version number (eg: 1.0)'
                0
                'Expected MIME version number but found only CFWS'
                ''
                '.'
                1
                None
                'Expected MIME major version number but found {!r}'
                'xtext'
                'digits'
                'Incomplete MIME version; found only major number'
                'version-separator'
                'Expected MIME minor version number but found {!r}'
                'Excess non-CFWS text after MIME version'
            [Disassembly]
                0       LOAD_GLOBAL                     0: MIMEVersion
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: mime_version
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_TRUE                16 (to 32)
                10      LOAD_FAST                       1: mime_version
                12      LOAD_ATTR                       1: defects
                14      LOAD_METHOD                     2: append
                16      LOAD_GLOBAL                     3: errors
                18      LOAD_METHOD                     4: HeaderMissingRequiredValue
                20      LOAD_CONST                      1: 'Missing MIME version number (eg: 1.0)'
                22      CALL_METHOD                     1
                24      CALL_METHOD                     1
                26      POP_TOP                         
                28      LOAD_FAST                       1: mime_version
                30      RETURN_VALUE                    
                32      LOAD_FAST                       0: value
                34      LOAD_CONST                      2: 0
                36      BINARY_SUBSCR                   
                38      LOAD_GLOBAL                     5: CFWS_LEADER
                40      CONTAINS_OP                     0 (in)
                42      POP_JUMP_IF_FALSE               44 (to 88)
                44      LOAD_GLOBAL                     6: get_cfws
                46      LOAD_FAST                       0: value
                48      CALL_FUNCTION                   1
                50      UNPACK_SEQUENCE                 2
                52      STORE_FAST                      2: token
                54      STORE_FAST                      0: value
                56      LOAD_FAST                       1: mime_version
                58      LOAD_METHOD                     2: append
                60      LOAD_FAST                       2: token
                62      CALL_METHOD                     1
                64      POP_TOP                         
                66      LOAD_FAST                       0: value
                68      POP_JUMP_IF_TRUE                44 (to 88)
                70      LOAD_FAST                       1: mime_version
                72      LOAD_ATTR                       1: defects
                74      LOAD_METHOD                     2: append
                76      LOAD_GLOBAL                     3: errors
                78      LOAD_METHOD                     4: HeaderMissingRequiredValue
                80      LOAD_CONST                      3: 'Expected MIME version number but found only CFWS'
                82      CALL_METHOD                     1
                84      CALL_METHOD                     1
                86      POP_TOP                         
                88      LOAD_CONST                      4: ''
                90      STORE_FAST                      3: digits
                92      LOAD_FAST                       0: value
                94      POP_JUMP_IF_FALSE               86 (to 172)
                96      LOAD_FAST                       0: value
                98      LOAD_CONST                      2: 0
                100     BINARY_SUBSCR                   
                102     LOAD_CONST                      5: '.'
                104     COMPARE_OP                      3 (!=)
                106     POP_JUMP_IF_FALSE               86 (to 172)
                108     LOAD_FAST                       0: value
                110     LOAD_CONST                      2: 0
                112     BINARY_SUBSCR                   
                114     LOAD_GLOBAL                     5: CFWS_LEADER
                116     CONTAINS_OP                     1 (not in)
                118     POP_JUMP_IF_FALSE               86 (to 172)
                120     LOAD_FAST                       3: digits
                122     LOAD_FAST                       0: value
                124     LOAD_CONST                      2: 0
                126     BINARY_SUBSCR                   
                128     INPLACE_ADD                     
                130     STORE_FAST                      3: digits
                132     LOAD_FAST                       0: value
                134     LOAD_CONST                      6: 1
                136     LOAD_CONST                      7: None
                138     BUILD_SLICE                     2
                140     BINARY_SUBSCR                   
                142     STORE_FAST                      0: value
                144     LOAD_FAST                       0: value
                146     POP_JUMP_IF_FALSE               86 (to 172)
                148     LOAD_FAST                       0: value
                150     LOAD_CONST                      2: 0
                152     BINARY_SUBSCR                   
                154     LOAD_CONST                      5: '.'
                156     COMPARE_OP                      3 (!=)
                158     POP_JUMP_IF_FALSE               86 (to 172)
                160     LOAD_FAST                       0: value
                162     LOAD_CONST                      2: 0
                164     BINARY_SUBSCR                   
                166     LOAD_GLOBAL                     5: CFWS_LEADER
                168     CONTAINS_OP                     1 (not in)
                170     POP_JUMP_IF_TRUE                60 (to 120)
                172     LOAD_FAST                       3: digits
                174     LOAD_METHOD                     7: isdigit
                176     CALL_METHOD                     0
                178     POP_JUMP_IF_TRUE                111 (to 222)
                180     LOAD_FAST                       1: mime_version
                182     LOAD_ATTR                       1: defects
                184     LOAD_METHOD                     2: append
                186     LOAD_GLOBAL                     3: errors
                188     LOAD_METHOD                     8: InvalidHeaderDefect
                190     LOAD_CONST                      8: 'Expected MIME major version number but found {!r}'
                192     LOAD_METHOD                     9: format
                194     LOAD_FAST                       3: digits
                196     CALL_METHOD                     1
                198     CALL_METHOD                     1
                200     CALL_METHOD                     1
                202     POP_TOP                         
                204     LOAD_FAST                       1: mime_version
                206     LOAD_METHOD                     2: append
                208     LOAD_GLOBAL                     10: ValueTerminal
                210     LOAD_FAST                       3: digits
                212     LOAD_CONST                      9: 'xtext'
                214     CALL_FUNCTION                   2
                216     CALL_METHOD                     1
                218     POP_TOP                         
                220     JUMP_FORWARD                    13 (to 248)
                222     LOAD_GLOBAL                     11: int
                224     LOAD_FAST                       3: digits
                226     CALL_FUNCTION                   1
                228     LOAD_FAST                       1: mime_version
                230     STORE_ATTR                      12: major
                232     LOAD_FAST                       1: mime_version
                234     LOAD_METHOD                     2: append
                236     LOAD_GLOBAL                     10: ValueTerminal
                238     LOAD_FAST                       3: digits
                240     LOAD_CONST                      10: 'digits'
                242     CALL_FUNCTION                   2
                244     CALL_METHOD                     1
                246     POP_TOP                         
                248     LOAD_FAST                       0: value
                250     POP_JUMP_IF_FALSE               143 (to 286)
                252     LOAD_FAST                       0: value
                254     LOAD_CONST                      2: 0
                256     BINARY_SUBSCR                   
                258     LOAD_GLOBAL                     5: CFWS_LEADER
                260     CONTAINS_OP                     0 (in)
                262     POP_JUMP_IF_FALSE               143 (to 286)
                264     LOAD_GLOBAL                     6: get_cfws
                266     LOAD_FAST                       0: value
                268     CALL_FUNCTION                   1
                270     UNPACK_SEQUENCE                 2
                272     STORE_FAST                      2: token
                274     STORE_FAST                      0: value
                276     LOAD_FAST                       1: mime_version
                278     LOAD_METHOD                     2: append
                280     LOAD_FAST                       2: token
                282     CALL_METHOD                     1
                284     POP_TOP                         
                286     LOAD_FAST                       0: value
                288     POP_JUMP_IF_FALSE               151 (to 302)
                290     LOAD_FAST                       0: value
                292     LOAD_CONST                      2: 0
                294     BINARY_SUBSCR                   
                296     LOAD_CONST                      5: '.'
                298     COMPARE_OP                      3 (!=)
                300     POP_JUMP_IF_FALSE               177 (to 354)
                302     LOAD_FAST                       1: mime_version
                304     LOAD_ATTR                       12: major
                306     LOAD_CONST                      7: None
                308     IS_OP                           1 (is not)
                310     POP_JUMP_IF_FALSE               165 (to 330)
                312     LOAD_FAST                       1: mime_version
                314     LOAD_ATTR                       1: defects
                316     LOAD_METHOD                     2: append
                318     LOAD_GLOBAL                     3: errors
                320     LOAD_METHOD                     8: InvalidHeaderDefect
                322     LOAD_CONST                      11: 'Incomplete MIME version; found only major number'
                324     CALL_METHOD                     1
                326     CALL_METHOD                     1
                328     POP_TOP                         
                330     LOAD_FAST                       0: value
                332     POP_JUMP_IF_FALSE               175 (to 350)
                334     LOAD_FAST                       1: mime_version
                336     LOAD_METHOD                     2: append
                338     LOAD_GLOBAL                     10: ValueTerminal
                340     LOAD_FAST                       0: value
                342     LOAD_CONST                      9: 'xtext'
                344     CALL_FUNCTION                   2
                346     CALL_METHOD                     1
                348     POP_TOP                         
                350     LOAD_FAST                       1: mime_version
                352     RETURN_VALUE                    
                354     LOAD_FAST                       1: mime_version
                356     LOAD_METHOD                     2: append
                358     LOAD_GLOBAL                     10: ValueTerminal
                360     LOAD_CONST                      5: '.'
                362     LOAD_CONST                      12: 'version-separator'
                364     CALL_FUNCTION                   2
                366     CALL_METHOD                     1
                368     POP_TOP                         
                370     LOAD_FAST                       0: value
                372     LOAD_CONST                      6: 1
                374     LOAD_CONST                      7: None
                376     BUILD_SLICE                     2
                378     BINARY_SUBSCR                   
                380     STORE_FAST                      0: value
                382     LOAD_FAST                       0: value
                384     POP_JUMP_IF_FALSE               210 (to 420)
                386     LOAD_FAST                       0: value
                388     LOAD_CONST                      2: 0
                390     BINARY_SUBSCR                   
                392     LOAD_GLOBAL                     5: CFWS_LEADER
                394     CONTAINS_OP                     0 (in)
                396     POP_JUMP_IF_FALSE               210 (to 420)
                398     LOAD_GLOBAL                     6: get_cfws
                400     LOAD_FAST                       0: value
                402     CALL_FUNCTION                   1
                404     UNPACK_SEQUENCE                 2
                406     STORE_FAST                      2: token
                408     STORE_FAST                      0: value
                410     LOAD_FAST                       1: mime_version
                412     LOAD_METHOD                     2: append
                414     LOAD_FAST                       2: token
                416     CALL_METHOD                     1
                418     POP_TOP                         
                420     LOAD_FAST                       0: value
                422     POP_JUMP_IF_TRUE                228 (to 456)
                424     LOAD_FAST                       1: mime_version
                426     LOAD_ATTR                       12: major
                428     LOAD_CONST                      7: None
                430     IS_OP                           1 (is not)
                432     POP_JUMP_IF_FALSE               226 (to 452)
                434     LOAD_FAST                       1: mime_version
                436     LOAD_ATTR                       1: defects
                438     LOAD_METHOD                     2: append
                440     LOAD_GLOBAL                     3: errors
                442     LOAD_METHOD                     8: InvalidHeaderDefect
                444     LOAD_CONST                      11: 'Incomplete MIME version; found only major number'
                446     CALL_METHOD                     1
                448     CALL_METHOD                     1
                450     POP_TOP                         
                452     LOAD_FAST                       1: mime_version
                454     RETURN_VALUE                    
                456     LOAD_CONST                      4: ''
                458     STORE_FAST                      3: digits
                460     LOAD_FAST                       0: value
                462     POP_JUMP_IF_FALSE               261 (to 522)
                466     LOAD_FAST                       0: value
                468     LOAD_CONST                      2: 0
                470     BINARY_SUBSCR                   
                472     LOAD_GLOBAL                     5: CFWS_LEADER
                474     CONTAINS_OP                     1 (not in)
                476     POP_JUMP_IF_FALSE               261 (to 522)
                480     LOAD_FAST                       3: digits
                482     LOAD_FAST                       0: value
                484     LOAD_CONST                      2: 0
                486     BINARY_SUBSCR                   
                488     INPLACE_ADD                     
                490     STORE_FAST                      3: digits
                492     LOAD_FAST                       0: value
                494     LOAD_CONST                      6: 1
                496     LOAD_CONST                      7: None
                498     BUILD_SLICE                     2
                500     BINARY_SUBSCR                   
                502     STORE_FAST                      0: value
                504     LOAD_FAST                       0: value
                506     POP_JUMP_IF_FALSE               261 (to 522)
                510     LOAD_FAST                       0: value
                512     LOAD_CONST                      2: 0
                514     BINARY_SUBSCR                   
                516     LOAD_GLOBAL                     5: CFWS_LEADER
                518     CONTAINS_OP                     1 (not in)
                520     POP_JUMP_IF_TRUE                240 (to 480)
                522     LOAD_FAST                       3: digits
                524     LOAD_METHOD                     7: isdigit
                526     CALL_METHOD                     0
                528     POP_JUMP_IF_TRUE                287 (to 574)
                532     LOAD_FAST                       1: mime_version
                534     LOAD_ATTR                       1: defects
                536     LOAD_METHOD                     2: append
                538     LOAD_GLOBAL                     3: errors
                540     LOAD_METHOD                     8: InvalidHeaderDefect
                542     LOAD_CONST                      13: 'Expected MIME minor version number but found {!r}'
                544     LOAD_METHOD                     9: format
                546     LOAD_FAST                       3: digits
                548     CALL_METHOD                     1
                550     CALL_METHOD                     1
                552     CALL_METHOD                     1
                554     POP_TOP                         
                556     LOAD_FAST                       1: mime_version
                558     LOAD_METHOD                     2: append
                560     LOAD_GLOBAL                     10: ValueTerminal
                562     LOAD_FAST                       3: digits
                564     LOAD_CONST                      9: 'xtext'
                566     CALL_FUNCTION                   2
                568     CALL_METHOD                     1
                570     POP_TOP                         
                572     JUMP_FORWARD                    13 (to 600)
                574     LOAD_GLOBAL                     11: int
                576     LOAD_FAST                       3: digits
                578     CALL_FUNCTION                   1
                580     LOAD_FAST                       1: mime_version
                582     STORE_ATTR                      13: minor
                584     LOAD_FAST                       1: mime_version
                586     LOAD_METHOD                     2: append
                588     LOAD_GLOBAL                     10: ValueTerminal
                590     LOAD_FAST                       3: digits
                592     LOAD_CONST                      10: 'digits'
                594     CALL_FUNCTION                   2
                596     CALL_METHOD                     1
                598     POP_TOP                         
                600     LOAD_FAST                       0: value
                602     POP_JUMP_IF_FALSE               321 (to 642)
                606     LOAD_FAST                       0: value
                608     LOAD_CONST                      2: 0
                610     BINARY_SUBSCR                   
                612     LOAD_GLOBAL                     5: CFWS_LEADER
                614     CONTAINS_OP                     0 (in)
                616     POP_JUMP_IF_FALSE               321 (to 642)
                620     LOAD_GLOBAL                     6: get_cfws
                622     LOAD_FAST                       0: value
                624     CALL_FUNCTION                   1
                626     UNPACK_SEQUENCE                 2
                628     STORE_FAST                      2: token
                630     STORE_FAST                      0: value
                632     LOAD_FAST                       1: mime_version
                634     LOAD_METHOD                     2: append
                636     LOAD_FAST                       2: token
                638     CALL_METHOD                     1
                640     POP_TOP                         
                642     LOAD_FAST                       0: value
                644     POP_JUMP_IF_FALSE               341 (to 682)
                648     LOAD_FAST                       1: mime_version
                650     LOAD_ATTR                       1: defects
                652     LOAD_METHOD                     2: append
                654     LOAD_GLOBAL                     3: errors
                656     LOAD_METHOD                     8: InvalidHeaderDefect
                658     LOAD_CONST                      14: 'Excess non-CFWS text after MIME version'
                660     CALL_METHOD                     1
                662     CALL_METHOD                     1
                664     POP_TOP                         
                666     LOAD_FAST                       1: mime_version
                668     LOAD_METHOD                     2: append
                670     LOAD_GLOBAL                     10: ValueTerminal
                672     LOAD_FAST                       0: value
                674     LOAD_CONST                      9: 'xtext'
                676     CALL_FUNCTION                   2
                678     CALL_METHOD                     1
                680     POP_TOP                         
                682     LOAD_FAST                       1: mime_version
                684     RETURN_VALUE                    
        'parse_mime_version'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_invalid_parameter
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'InvalidParameter'
                'PHRASE_ENDS'
                'append'
                'ValueTerminal'
                'get_phrase'
            [Var Names]
                'value'
                'invalid_parameter'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                " Read everything up to the next ';'.\n\n    This is outside the formal grammar.  The InvalidParameter TokenList that is\n    returned acts like a Parameter, but the data attributes are None.\n\n    "
                0
                ';'
                'misplaced-special'
                1
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: InvalidParameter
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: invalid_parameter
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               53 (to 106)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_CONST                      2: ';'
                18      COMPARE_OP                      3 (!=)
                20      POP_JUMP_IF_FALSE               53 (to 106)
                22      LOAD_FAST                       0: value
                24      LOAD_CONST                      1: 0
                26      BINARY_SUBSCR                   
                28      LOAD_GLOBAL                     1: PHRASE_ENDS
                30      CONTAINS_OP                     0 (in)
                32      POP_JUMP_IF_FALSE               34 (to 68)
                34      LOAD_FAST                       1: invalid_parameter
                36      LOAD_METHOD                     2: append
                38      LOAD_GLOBAL                     3: ValueTerminal
                40      LOAD_FAST                       0: value
                42      LOAD_CONST                      1: 0
                44      BINARY_SUBSCR                   
                46      LOAD_CONST                      3: 'misplaced-special'
                48      CALL_FUNCTION                   2
                50      CALL_METHOD                     1
                52      POP_TOP                         
                54      LOAD_FAST                       0: value
                56      LOAD_CONST                      4: 1
                58      LOAD_CONST                      5: None
                60      BUILD_SLICE                     2
                62      BINARY_SUBSCR                   
                64      STORE_FAST                      0: value
                66      JUMP_FORWARD                    11 (to 90)
                68      LOAD_GLOBAL                     4: get_phrase
                70      LOAD_FAST                       0: value
                72      CALL_FUNCTION                   1
                74      UNPACK_SEQUENCE                 2
                76      STORE_FAST                      2: token
                78      STORE_FAST                      0: value
                80      LOAD_FAST                       1: invalid_parameter
                82      LOAD_METHOD                     2: append
                84      LOAD_FAST                       2: token
                86      CALL_METHOD                     1
                88      POP_TOP                         
                90      LOAD_FAST                       0: value
                92      POP_JUMP_IF_FALSE               53 (to 106)
                94      LOAD_FAST                       0: value
                96      LOAD_CONST                      1: 0
                98      BINARY_SUBSCR                   
                100     LOAD_CONST                      2: ';'
                102     COMPARE_OP                      3 (!=)
                104     POP_JUMP_IF_TRUE                11 (to 22)
                106     LOAD_FAST                       1: invalid_parameter
                108     LOAD_FAST                       0: value
                110     BUILD_TUPLE                     2
                112     RETURN_VALUE                    
        'get_invalid_parameter'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_ttext
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_non_token_end_matcher'
                'errors'
                'HeaderParseError'
                'format'
                'group'
                'len'
                'ValueTerminal'
                '_validate_xtext'
            [Var Names]
                'value'
                'm'
                'ttext'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "ttext = <matches _ttext_matcher>\n\n    We allow any non-TOKEN_ENDS in ttext, but add defects to the token's\n    defects list if we find non-ttext characters.  We also register defects for\n    *any* non-printables even though the RFC doesn't exclude all of them,\n    because we follow the spirit of RFC 5322.\n\n    "
                "expected ttext but found '{}'"
                None
                'ttext'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _non_token_end_matcher
                2       LOAD_FAST                       0: value
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      1: m
                8       LOAD_FAST                       1: m
                10      POP_JUMP_IF_TRUE                14 (to 28)
                12      LOAD_GLOBAL                     1: errors
                14      LOAD_METHOD                     2: HeaderParseError
                16      LOAD_CONST                      1: "expected ttext but found '{}'"
                18      LOAD_METHOD                     3: format
                20      LOAD_FAST                       0: value
                22      CALL_METHOD                     1
                24      CALL_METHOD                     1
                26      RAISE_VARARGS                   1
                28      LOAD_FAST                       1: m
                30      LOAD_METHOD                     4: group
                32      CALL_METHOD                     0
                34      STORE_FAST                      2: ttext
                36      LOAD_FAST                       0: value
                38      LOAD_GLOBAL                     5: len
                40      LOAD_FAST                       2: ttext
                42      CALL_FUNCTION                   1
                44      LOAD_CONST                      2: None
                46      BUILD_SLICE                     2
                48      BINARY_SUBSCR                   
                50      STORE_FAST                      0: value
                52      LOAD_GLOBAL                     6: ValueTerminal
                54      LOAD_FAST                       2: ttext
                56      LOAD_CONST                      3: 'ttext'
                58      CALL_FUNCTION                   2
                60      STORE_FAST                      2: ttext
                62      LOAD_GLOBAL                     7: _validate_xtext
                64      LOAD_FAST                       2: ttext
                66      CALL_FUNCTION                   1
                68      POP_TOP                         
                70      LOAD_FAST                       2: ttext
                72      LOAD_FAST                       0: value
                74      BUILD_TUPLE                     2
                76      RETURN_VALUE                    
        'get_ttext'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_token
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Token'
                'CFWS_LEADER'
                'get_cfws'
                'append'
                'TOKEN_ENDS'
                'errors'
                'HeaderParseError'
                'format'
                'get_ttext'
            [Var Names]
                'value'
                'mtoken'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "token = [CFWS] 1*ttext [CFWS]\n\n    The RFC equivalent of ttext is any US-ASCII chars except space, ctls, or\n    tspecials.  We also exclude tabs even though the RFC doesn't.\n\n    The RFC implies the CFWS but is not explicit about it in the BNF.\n\n    "
                0
                "expected token but found '{}'"
            [Disassembly]
                0       LOAD_GLOBAL                     0: Token
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: mtoken
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               22 (to 44)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: CFWS_LEADER
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               22 (to 44)
                22      LOAD_GLOBAL                     2: get_cfws
                24      LOAD_FAST                       0: value
                26      CALL_FUNCTION                   1
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      2: token
                32      STORE_FAST                      0: value
                34      LOAD_FAST                       1: mtoken
                36      LOAD_METHOD                     3: append
                38      LOAD_FAST                       2: token
                40      CALL_METHOD                     1
                42      POP_TOP                         
                44      LOAD_FAST                       0: value
                46      POP_JUMP_IF_FALSE               38 (to 76)
                48      LOAD_FAST                       0: value
                50      LOAD_CONST                      1: 0
                52      BINARY_SUBSCR                   
                54      LOAD_GLOBAL                     4: TOKEN_ENDS
                56      CONTAINS_OP                     0 (in)
                58      POP_JUMP_IF_FALSE               38 (to 76)
                60      LOAD_GLOBAL                     5: errors
                62      LOAD_METHOD                     6: HeaderParseError
                64      LOAD_CONST                      2: "expected token but found '{}'"
                66      LOAD_METHOD                     7: format
                68      LOAD_FAST                       0: value
                70      CALL_METHOD                     1
                72      CALL_METHOD                     1
                74      RAISE_VARARGS                   1
                76      LOAD_GLOBAL                     8: get_ttext
                78      LOAD_FAST                       0: value
                80      CALL_FUNCTION                   1
                82      UNPACK_SEQUENCE                 2
                84      STORE_FAST                      2: token
                86      STORE_FAST                      0: value
                88      LOAD_FAST                       1: mtoken
                90      LOAD_METHOD                     3: append
                92      LOAD_FAST                       2: token
                94      CALL_METHOD                     1
                96      POP_TOP                         
                98      LOAD_FAST                       0: value
                100     POP_JUMP_IF_FALSE               68 (to 136)
                102     LOAD_FAST                       0: value
                104     LOAD_CONST                      1: 0
                106     BINARY_SUBSCR                   
                108     LOAD_GLOBAL                     1: CFWS_LEADER
                110     CONTAINS_OP                     0 (in)
                112     POP_JUMP_IF_FALSE               68 (to 136)
                114     LOAD_GLOBAL                     2: get_cfws
                116     LOAD_FAST                       0: value
                118     CALL_FUNCTION                   1
                120     UNPACK_SEQUENCE                 2
                122     STORE_FAST                      2: token
                124     STORE_FAST                      0: value
                126     LOAD_FAST                       1: mtoken
                128     LOAD_METHOD                     3: append
                130     LOAD_FAST                       2: token
                132     CALL_METHOD                     1
                134     POP_TOP                         
                136     LOAD_FAST                       1: mtoken
                138     LOAD_FAST                       0: value
                140     BUILD_TUPLE                     2
                142     RETURN_VALUE                    
        'get_token'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_attrtext
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_non_attribute_end_matcher'
                'errors'
                'HeaderParseError'
                'format'
                'group'
                'len'
                'ValueTerminal'
                '_validate_xtext'
            [Var Names]
                'value'
                'm'
                'attrtext'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "attrtext = 1*(any non-ATTRIBUTE_ENDS character)\n\n    We allow any non-ATTRIBUTE_ENDS in attrtext, but add defects to the\n    token's defects list if we find non-attrtext characters.  We also register\n    defects for *any* non-printables even though the RFC doesn't exclude all of\n    them, because we follow the spirit of RFC 5322.\n\n    "
                'expected attrtext but found {!r}'
                None
                'attrtext'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _non_attribute_end_matcher
                2       LOAD_FAST                       0: value
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      1: m
                8       LOAD_FAST                       1: m
                10      POP_JUMP_IF_TRUE                14 (to 28)
                12      LOAD_GLOBAL                     1: errors
                14      LOAD_METHOD                     2: HeaderParseError
                16      LOAD_CONST                      1: 'expected attrtext but found {!r}'
                18      LOAD_METHOD                     3: format
                20      LOAD_FAST                       0: value
                22      CALL_METHOD                     1
                24      CALL_METHOD                     1
                26      RAISE_VARARGS                   1
                28      LOAD_FAST                       1: m
                30      LOAD_METHOD                     4: group
                32      CALL_METHOD                     0
                34      STORE_FAST                      2: attrtext
                36      LOAD_FAST                       0: value
                38      LOAD_GLOBAL                     5: len
                40      LOAD_FAST                       2: attrtext
                42      CALL_FUNCTION                   1
                44      LOAD_CONST                      2: None
                46      BUILD_SLICE                     2
                48      BINARY_SUBSCR                   
                50      STORE_FAST                      0: value
                52      LOAD_GLOBAL                     6: ValueTerminal
                54      LOAD_FAST                       2: attrtext
                56      LOAD_CONST                      3: 'attrtext'
                58      CALL_FUNCTION                   2
                60      STORE_FAST                      2: attrtext
                62      LOAD_GLOBAL                     7: _validate_xtext
                64      LOAD_FAST                       2: attrtext
                66      CALL_FUNCTION                   1
                68      POP_TOP                         
                70      LOAD_FAST                       2: attrtext
                72      LOAD_FAST                       0: value
                74      BUILD_TUPLE                     2
                76      RETURN_VALUE                    
        'get_attrtext'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_attribute
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Attribute'
                'CFWS_LEADER'
                'get_cfws'
                'append'
                'ATTRIBUTE_ENDS'
                'errors'
                'HeaderParseError'
                'format'
                'get_attrtext'
            [Var Names]
                'value'
                'attribute'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' [CFWS] 1*attrtext [CFWS]\n\n    This version of the BNF makes the CFWS explicit, and as usual we use a\n    value terminal for the actual run of characters.  The RFC equivalent of\n    attrtext is the token characters, with the subtraction of \'*\', "\'", and \'%\'.\n    We include tab in the excluded set just as we do for token.\n\n    '
                0
                "expected token but found '{}'"
            [Disassembly]
                0       LOAD_GLOBAL                     0: Attribute
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: attribute
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               22 (to 44)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: CFWS_LEADER
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               22 (to 44)
                22      LOAD_GLOBAL                     2: get_cfws
                24      LOAD_FAST                       0: value
                26      CALL_FUNCTION                   1
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      2: token
                32      STORE_FAST                      0: value
                34      LOAD_FAST                       1: attribute
                36      LOAD_METHOD                     3: append
                38      LOAD_FAST                       2: token
                40      CALL_METHOD                     1
                42      POP_TOP                         
                44      LOAD_FAST                       0: value
                46      POP_JUMP_IF_FALSE               38 (to 76)
                48      LOAD_FAST                       0: value
                50      LOAD_CONST                      1: 0
                52      BINARY_SUBSCR                   
                54      LOAD_GLOBAL                     4: ATTRIBUTE_ENDS
                56      CONTAINS_OP                     0 (in)
                58      POP_JUMP_IF_FALSE               38 (to 76)
                60      LOAD_GLOBAL                     5: errors
                62      LOAD_METHOD                     6: HeaderParseError
                64      LOAD_CONST                      2: "expected token but found '{}'"
                66      LOAD_METHOD                     7: format
                68      LOAD_FAST                       0: value
                70      CALL_METHOD                     1
                72      CALL_METHOD                     1
                74      RAISE_VARARGS                   1
                76      LOAD_GLOBAL                     8: get_attrtext
                78      LOAD_FAST                       0: value
                80      CALL_FUNCTION                   1
                82      UNPACK_SEQUENCE                 2
                84      STORE_FAST                      2: token
                86      STORE_FAST                      0: value
                88      LOAD_FAST                       1: attribute
                90      LOAD_METHOD                     3: append
                92      LOAD_FAST                       2: token
                94      CALL_METHOD                     1
                96      POP_TOP                         
                98      LOAD_FAST                       0: value
                100     POP_JUMP_IF_FALSE               68 (to 136)
                102     LOAD_FAST                       0: value
                104     LOAD_CONST                      1: 0
                106     BINARY_SUBSCR                   
                108     LOAD_GLOBAL                     1: CFWS_LEADER
                110     CONTAINS_OP                     0 (in)
                112     POP_JUMP_IF_FALSE               68 (to 136)
                114     LOAD_GLOBAL                     2: get_cfws
                116     LOAD_FAST                       0: value
                118     CALL_FUNCTION                   1
                120     UNPACK_SEQUENCE                 2
                122     STORE_FAST                      2: token
                124     STORE_FAST                      0: value
                126     LOAD_FAST                       1: attribute
                128     LOAD_METHOD                     3: append
                130     LOAD_FAST                       2: token
                132     CALL_METHOD                     1
                134     POP_TOP                         
                136     LOAD_FAST                       1: attribute
                138     LOAD_FAST                       0: value
                140     BUILD_TUPLE                     2
                142     RETURN_VALUE                    
        'get_attribute'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_extended_attrtext
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_non_extended_attribute_end_matcher'
                'errors'
                'HeaderParseError'
                'format'
                'group'
                'len'
                'ValueTerminal'
                '_validate_xtext'
            [Var Names]
                'value'
                'm'
                'attrtext'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "attrtext = 1*(any non-ATTRIBUTE_ENDS character plus '%')\n\n    This is a special parsing routine so that we get a value that\n    includes % escapes as a single string (which we decode as a single\n    string later).\n\n    "
                'expected extended attrtext but found {!r}'
                None
                'extended-attrtext'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _non_extended_attribute_end_matcher
                2       LOAD_FAST                       0: value
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      1: m
                8       LOAD_FAST                       1: m
                10      POP_JUMP_IF_TRUE                14 (to 28)
                12      LOAD_GLOBAL                     1: errors
                14      LOAD_METHOD                     2: HeaderParseError
                16      LOAD_CONST                      1: 'expected extended attrtext but found {!r}'
                18      LOAD_METHOD                     3: format
                20      LOAD_FAST                       0: value
                22      CALL_METHOD                     1
                24      CALL_METHOD                     1
                26      RAISE_VARARGS                   1
                28      LOAD_FAST                       1: m
                30      LOAD_METHOD                     4: group
                32      CALL_METHOD                     0
                34      STORE_FAST                      2: attrtext
                36      LOAD_FAST                       0: value
                38      LOAD_GLOBAL                     5: len
                40      LOAD_FAST                       2: attrtext
                42      CALL_FUNCTION                   1
                44      LOAD_CONST                      2: None
                46      BUILD_SLICE                     2
                48      BINARY_SUBSCR                   
                50      STORE_FAST                      0: value
                52      LOAD_GLOBAL                     6: ValueTerminal
                54      LOAD_FAST                       2: attrtext
                56      LOAD_CONST                      3: 'extended-attrtext'
                58      CALL_FUNCTION                   2
                60      STORE_FAST                      2: attrtext
                62      LOAD_GLOBAL                     7: _validate_xtext
                64      LOAD_FAST                       2: attrtext
                66      CALL_FUNCTION                   1
                68      POP_TOP                         
                70      LOAD_FAST                       2: attrtext
                72      LOAD_FAST                       0: value
                74      BUILD_TUPLE                     2
                76      RETURN_VALUE                    
        'get_extended_attrtext'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_extended_attribute
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Attribute'
                'CFWS_LEADER'
                'get_cfws'
                'append'
                'EXTENDED_ATTRIBUTE_ENDS'
                'errors'
                'HeaderParseError'
                'format'
                'get_extended_attrtext'
            [Var Names]
                'value'
                'attribute'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' [CFWS] 1*extended_attrtext [CFWS]\n\n    This is like the non-extended version except we allow % characters, so that\n    we can pick up an encoded value as a single string.\n\n    '
                0
                "expected token but found '{}'"
            [Disassembly]
                0       LOAD_GLOBAL                     0: Attribute
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: attribute
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               22 (to 44)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_GLOBAL                     1: CFWS_LEADER
                18      CONTAINS_OP                     0 (in)
                20      POP_JUMP_IF_FALSE               22 (to 44)
                22      LOAD_GLOBAL                     2: get_cfws
                24      LOAD_FAST                       0: value
                26      CALL_FUNCTION                   1
                28      UNPACK_SEQUENCE                 2
                30      STORE_FAST                      2: token
                32      STORE_FAST                      0: value
                34      LOAD_FAST                       1: attribute
                36      LOAD_METHOD                     3: append
                38      LOAD_FAST                       2: token
                40      CALL_METHOD                     1
                42      POP_TOP                         
                44      LOAD_FAST                       0: value
                46      POP_JUMP_IF_FALSE               38 (to 76)
                48      LOAD_FAST                       0: value
                50      LOAD_CONST                      1: 0
                52      BINARY_SUBSCR                   
                54      LOAD_GLOBAL                     4: EXTENDED_ATTRIBUTE_ENDS
                56      CONTAINS_OP                     0 (in)
                58      POP_JUMP_IF_FALSE               38 (to 76)
                60      LOAD_GLOBAL                     5: errors
                62      LOAD_METHOD                     6: HeaderParseError
                64      LOAD_CONST                      2: "expected token but found '{}'"
                66      LOAD_METHOD                     7: format
                68      LOAD_FAST                       0: value
                70      CALL_METHOD                     1
                72      CALL_METHOD                     1
                74      RAISE_VARARGS                   1
                76      LOAD_GLOBAL                     8: get_extended_attrtext
                78      LOAD_FAST                       0: value
                80      CALL_FUNCTION                   1
                82      UNPACK_SEQUENCE                 2
                84      STORE_FAST                      2: token
                86      STORE_FAST                      0: value
                88      LOAD_FAST                       1: attribute
                90      LOAD_METHOD                     3: append
                92      LOAD_FAST                       2: token
                94      CALL_METHOD                     1
                96      POP_TOP                         
                98      LOAD_FAST                       0: value
                100     POP_JUMP_IF_FALSE               68 (to 136)
                102     LOAD_FAST                       0: value
                104     LOAD_CONST                      1: 0
                106     BINARY_SUBSCR                   
                108     LOAD_GLOBAL                     1: CFWS_LEADER
                110     CONTAINS_OP                     0 (in)
                112     POP_JUMP_IF_FALSE               68 (to 136)
                114     LOAD_GLOBAL                     2: get_cfws
                116     LOAD_FAST                       0: value
                118     CALL_FUNCTION                   1
                120     UNPACK_SEQUENCE                 2
                122     STORE_FAST                      2: token
                124     STORE_FAST                      0: value
                126     LOAD_FAST                       1: attribute
                128     LOAD_METHOD                     3: append
                130     LOAD_FAST                       2: token
                132     CALL_METHOD                     1
                134     POP_TOP                         
                136     LOAD_FAST                       1: attribute
                138     LOAD_FAST                       0: value
                140     BUILD_TUPLE                     2
                142     RETURN_VALUE                    
        'get_extended_attribute'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_section
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Section'
                'errors'
                'HeaderParseError'
                'format'
                'append'
                'ValueTerminal'
                'isdigit'
                'defects'
                'InvalidHeaderDefect'
                'int'
                'number'
            [Var Names]
                'value'
                'section'
                'digits'
            [Free Vars]
            [Cell Vars]
            [Constants]
                " '*' digits\n\n    The formal BNF is more complicated because leading 0s are not allowed.  We\n    check for that and add a defect.  We also assume no CFWS is allowed between\n    the '*' and the digits, though the RFC is not crystal clear on that.\n    The caller should already have dealt with leading CFWS.\n\n    "
                0
                '*'
                'Expected section but found {}'
                'section-marker'
                1
                None
                'Expected section number but found {}'
                ''
                '0'
                'section number has an invalid leading 0'
                'digits'
            [Disassembly]
                0       LOAD_GLOBAL                     0: Section
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: section
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               11 (to 22)
                10      LOAD_FAST                       0: value
                12      LOAD_CONST                      1: 0
                14      BINARY_SUBSCR                   
                16      LOAD_CONST                      2: '*'
                18      COMPARE_OP                      3 (!=)
                20      POP_JUMP_IF_FALSE               19 (to 38)
                22      LOAD_GLOBAL                     1: errors
                24      LOAD_METHOD                     2: HeaderParseError
                26      LOAD_CONST                      3: 'Expected section but found {}'
                28      LOAD_METHOD                     3: format
                30      LOAD_FAST                       0: value
                32      CALL_METHOD                     1
                34      CALL_METHOD                     1
                36      RAISE_VARARGS                   1
                38      LOAD_FAST                       1: section
                40      LOAD_METHOD                     4: append
                42      LOAD_GLOBAL                     5: ValueTerminal
                44      LOAD_CONST                      2: '*'
                46      LOAD_CONST                      4: 'section-marker'
                48      CALL_FUNCTION                   2
                50      CALL_METHOD                     1
                52      POP_TOP                         
                54      LOAD_FAST                       0: value
                56      LOAD_CONST                      5: 1
                58      LOAD_CONST                      6: None
                60      BUILD_SLICE                     2
                62      BINARY_SUBSCR                   
                64      STORE_FAST                      0: value
                66      LOAD_FAST                       0: value
                68      POP_JUMP_IF_FALSE               41 (to 82)
                70      LOAD_FAST                       0: value
                72      LOAD_CONST                      1: 0
                74      BINARY_SUBSCR                   
                76      LOAD_METHOD                     6: isdigit
                78      CALL_METHOD                     0
                80      POP_JUMP_IF_TRUE                49 (to 98)
                82      LOAD_GLOBAL                     1: errors
                84      LOAD_METHOD                     2: HeaderParseError
                86      LOAD_CONST                      7: 'Expected section number but found {}'
                88      LOAD_METHOD                     3: format
                90      LOAD_FAST                       0: value
                92      CALL_METHOD                     1
                94      CALL_METHOD                     1
                96      RAISE_VARARGS                   1
                98      LOAD_CONST                      8: ''
                100     STORE_FAST                      2: digits
                102     LOAD_FAST                       0: value
                104     POP_JUMP_IF_FALSE               79 (to 158)
                106     LOAD_FAST                       0: value
                108     LOAD_CONST                      1: 0
                110     BINARY_SUBSCR                   
                112     LOAD_METHOD                     6: isdigit
                114     CALL_METHOD                     0
                116     POP_JUMP_IF_FALSE               79 (to 158)
                118     LOAD_FAST                       2: digits
                120     LOAD_FAST                       0: value
                122     LOAD_CONST                      1: 0
                124     BINARY_SUBSCR                   
                126     INPLACE_ADD                     
                128     STORE_FAST                      2: digits
                130     LOAD_FAST                       0: value
                132     LOAD_CONST                      5: 1
                134     LOAD_CONST                      6: None
                136     BUILD_SLICE                     2
                138     BINARY_SUBSCR                   
                140     STORE_FAST                      0: value
                142     LOAD_FAST                       0: value
                144     POP_JUMP_IF_FALSE               79 (to 158)
                146     LOAD_FAST                       0: value
                148     LOAD_CONST                      1: 0
                150     BINARY_SUBSCR                   
                152     LOAD_METHOD                     6: isdigit
                154     CALL_METHOD                     0
                156     POP_JUMP_IF_TRUE                59 (to 118)
                158     LOAD_FAST                       2: digits
                160     LOAD_CONST                      1: 0
                162     BINARY_SUBSCR                   
                164     LOAD_CONST                      9: '0'
                166     COMPARE_OP                      2 (==)
                168     POP_JUMP_IF_FALSE               98 (to 196)
                170     LOAD_FAST                       2: digits
                172     LOAD_CONST                      9: '0'
                174     COMPARE_OP                      3 (!=)
                176     POP_JUMP_IF_FALSE               98 (to 196)
                178     LOAD_FAST                       1: section
                180     LOAD_ATTR                       7: defects
                182     LOAD_METHOD                     4: append
                184     LOAD_GLOBAL                     1: errors
                186     LOAD_METHOD                     8: InvalidHeaderDefect
                188     LOAD_CONST                      10: 'section number has an invalid leading 0'
                190     CALL_METHOD                     1
                192     CALL_METHOD                     1
                194     POP_TOP                         
                196     LOAD_GLOBAL                     9: int
                198     LOAD_FAST                       2: digits
                200     CALL_FUNCTION                   1
                202     LOAD_FAST                       1: section
                204     STORE_ATTR                      10: number
                206     LOAD_FAST                       1: section
                208     LOAD_METHOD                     4: append
                210     LOAD_GLOBAL                     5: ValueTerminal
                212     LOAD_FAST                       2: digits
                214     LOAD_CONST                      11: 'digits'
                216     CALL_FUNCTION                   2
                218     CALL_METHOD                     1
                220     POP_TOP                         
                222     LOAD_FAST                       1: section
                224     LOAD_FAST                       0: value
                226     BUILD_TUPLE                     2
                228     RETURN_VALUE                    
        'get_section'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_value
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Value'
                'errors'
                'HeaderParseError'
                'CFWS_LEADER'
                'get_cfws'
                'format'
                'get_quoted_string'
                'get_extended_attribute'
                'append'
            [Var Names]
                'value'
                'v'
                'leader'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' quoted-string / attribute\n\n    '
                'Expected value but found end of string'
                None
                0
                'Expected value but found only {}'
                '"'
            [Disassembly]
                0       LOAD_GLOBAL                     0: Value
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: v
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_TRUE                10 (to 20)
                10      LOAD_GLOBAL                     1: errors
                12      LOAD_METHOD                     2: HeaderParseError
                14      LOAD_CONST                      1: 'Expected value but found end of string'
                16      CALL_METHOD                     1
                18      RAISE_VARARGS                   1
                20      LOAD_CONST                      2: None
                22      STORE_FAST                      2: leader
                24      LOAD_FAST                       0: value
                26      LOAD_CONST                      3: 0
                28      BINARY_SUBSCR                   
                30      LOAD_GLOBAL                     3: CFWS_LEADER
                32      CONTAINS_OP                     0 (in)
                34      POP_JUMP_IF_FALSE               24 (to 48)
                36      LOAD_GLOBAL                     4: get_cfws
                38      LOAD_FAST                       0: value
                40      CALL_FUNCTION                   1
                42      UNPACK_SEQUENCE                 2
                44      STORE_FAST                      2: leader
                46      STORE_FAST                      0: value
                48      LOAD_FAST                       0: value
                50      POP_JUMP_IF_TRUE                34 (to 68)
                52      LOAD_GLOBAL                     1: errors
                54      LOAD_METHOD                     2: HeaderParseError
                56      LOAD_CONST                      4: 'Expected value but found only {}'
                58      LOAD_METHOD                     5: format
                60      LOAD_FAST                       2: leader
                62      CALL_METHOD                     1
                64      CALL_METHOD                     1
                66      RAISE_VARARGS                   1
                68      LOAD_FAST                       0: value
                70      LOAD_CONST                      3: 0
                72      BINARY_SUBSCR                   
                74      LOAD_CONST                      5: '"'
                76      COMPARE_OP                      2 (==)
                78      POP_JUMP_IF_FALSE               47 (to 94)
                80      LOAD_GLOBAL                     6: get_quoted_string
                82      LOAD_FAST                       0: value
                84      CALL_FUNCTION                   1
                86      UNPACK_SEQUENCE                 2
                88      STORE_FAST                      3: token
                90      STORE_FAST                      0: value
                92      JUMP_FORWARD                    6 (to 106)
                94      LOAD_GLOBAL                     7: get_extended_attribute
                96      LOAD_FAST                       0: value
                98      CALL_FUNCTION                   1
                100     UNPACK_SEQUENCE                 2
                102     STORE_FAST                      3: token
                104     STORE_FAST                      0: value
                106     LOAD_FAST                       2: leader
                108     LOAD_CONST                      2: None
                110     IS_OP                           1 (is not)
                112     POP_JUMP_IF_FALSE               64 (to 128)
                114     LOAD_FAST                       2: leader
                116     BUILD_LIST                      1
                118     LOAD_FAST                       3: token
                120     LOAD_CONST                      2: None
                122     LOAD_CONST                      3: 0
                124     BUILD_SLICE                     2
                126     STORE_SUBSCR                    
                128     LOAD_FAST                       1: v
                130     LOAD_METHOD                     8: append
                132     LOAD_FAST                       3: token
                134     CALL_METHOD                     1
                136     POP_TOP                         
                138     LOAD_FAST                       1: v
                140     LOAD_FAST                       0: value
                142     BUILD_TUPLE                     2
                144     RETURN_VALUE                    
        'get_value'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: get_parameter
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 12
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Parameter'
                'get_attribute'
                'append'
                'defects'
                'errors'
                'InvalidHeaderDefect'
                'format'
                'get_section'
                'sectioned'
                'HeaderParseError'
                'ValueTerminal'
                'extended'
                'CFWS_LEADER'
                'get_cfws'
                'get_quoted_string'
                'stripped_value'
                'section_number'
                'get_attrtext'
                'get_extended_attrtext'
                'token_type'
                'get_value'
                'value'
                'charset'
                'lang'
                'Value'
                'WSP'
                'get_fws'
                'get_qcontent'
            [Var Names]
                'value'
                'param'
                'token'
                'leader'
                'remainder'
                'appendto'
                'qstring'
                'inner_value'
                'semi_valid'
                'rest'
                't'
                'v'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' attribute [section] ["*"] [CFWS] "=" value\n\n    The CFWS is implied by the RFC but not made explicit in the BNF.  This\n    simplified form of the BNF from the RFC is made to conform with the RFC BNF\n    through some extra checks.  We do it this way because it makes both error\n    recovery and working with the resulting parse tree easier.\n    '
                0
                ';'
                'Parameter contains name ({}) but no value'
                '*'
                True
                'Incomplete parameter'
                'extended-parameter-marker'
                1
                None
                '='
                "Parameter not followed by '='"
                'parameter-separator'
                '"'
                False
                "'"
                'Quoted string value for extended parameter is invalid'
                'bare-quoted-string'
                'Parameter marked as extended but appears to have a quoted string value that is non-encoded'
                'Apparent initial-extended-value but attribute was not marked as extended or was not initial section'
                'Missing required charset/lang delimiters'
                'extended-attrtext'
                'attrtext'
                'Expected RFC2231 char/lang encoding delimiter, but found {!r}'
                'RFC2231-delimiter'
                'Expected RFC2231 char/lang encoding delimiter, but found {}'
                'DQUOTE'
            [Disassembly]
                0       LOAD_GLOBAL                     0: Parameter
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: param
                6       LOAD_GLOBAL                     1: get_attribute
                8       LOAD_FAST                       0: value
                10      CALL_FUNCTION                   1
                12      UNPACK_SEQUENCE                 2
                14      STORE_FAST                      2: token
                16      STORE_FAST                      0: value
                18      LOAD_FAST                       1: param
                20      LOAD_METHOD                     2: append
                22      LOAD_FAST                       2: token
                24      CALL_METHOD                     1
                26      POP_TOP                         
                28      LOAD_FAST                       0: value
                30      POP_JUMP_IF_FALSE               22 (to 44)
                32      LOAD_FAST                       0: value
                34      LOAD_CONST                      1: 0
                36      BINARY_SUBSCR                   
                38      LOAD_CONST                      2: ';'
                40      COMPARE_OP                      2 (==)
                42      POP_JUMP_IF_FALSE               38 (to 76)
                44      LOAD_FAST                       1: param
                46      LOAD_ATTR                       3: defects
                48      LOAD_METHOD                     2: append
                50      LOAD_GLOBAL                     4: errors
                52      LOAD_METHOD                     5: InvalidHeaderDefect
                54      LOAD_CONST                      3: 'Parameter contains name ({}) but no value'
                56      LOAD_METHOD                     6: format
                58      LOAD_FAST                       2: token
                60      CALL_METHOD                     1
                62      CALL_METHOD                     1
                64      CALL_METHOD                     1
                66      POP_TOP                         
                68      LOAD_FAST                       1: param
                70      LOAD_FAST                       0: value
                72      BUILD_TUPLE                     2
                74      RETURN_VALUE                    
                76      LOAD_FAST                       0: value
                78      LOAD_CONST                      1: 0
                80      BINARY_SUBSCR                   
                82      LOAD_CONST                      4: '*'
                84      COMPARE_OP                      2 (==)
                86      POP_JUMP_IF_FALSE               101 (to 202)
                88      SETUP_FINALLY                   16 (to 122)
                90      LOAD_GLOBAL                     7: get_section
                92      LOAD_FAST                       0: value
                94      CALL_FUNCTION                   1
                96      UNPACK_SEQUENCE                 2
                98      STORE_FAST                      2: token
                100     STORE_FAST                      0: value
                102     LOAD_CONST                      5: True
                104     LOAD_FAST                       1: param
                106     STORE_ATTR                      8: sectioned
                108     LOAD_FAST                       1: param
                110     LOAD_METHOD                     2: append
                112     LOAD_FAST                       2: token
                114     CALL_METHOD                     1
                116     POP_TOP                         
                118     POP_BLOCK                       
                120     JUMP_FORWARD                    10 (to 142)
                122     DUP_TOP                         
                124     LOAD_GLOBAL                     4: errors
                126     LOAD_ATTR                       9: HeaderParseError
                128     JUMP_IF_NOT_EXC_MATCH           70 (to 140)
                130     POP_TOP                         
                132     POP_TOP                         
                134     POP_TOP                         
                136     POP_EXCEPT                      
                138     JUMP_FORWARD                    1 (to 142)
                140     RERAISE                         0
                142     LOAD_FAST                       0: value
                144     POP_JUMP_IF_TRUE                78 (to 156)
                146     LOAD_GLOBAL                     4: errors
                148     LOAD_METHOD                     9: HeaderParseError
                150     LOAD_CONST                      6: 'Incomplete parameter'
                152     CALL_METHOD                     1
                154     RAISE_VARARGS                   1
                156     LOAD_FAST                       0: value
                158     LOAD_CONST                      1: 0
                160     BINARY_SUBSCR                   
                162     LOAD_CONST                      4: '*'
                164     COMPARE_OP                      2 (==)
                166     POP_JUMP_IF_FALSE               101 (to 202)
                168     LOAD_FAST                       1: param
                170     LOAD_METHOD                     2: append
                172     LOAD_GLOBAL                     10: ValueTerminal
                174     LOAD_CONST                      4: '*'
                176     LOAD_CONST                      7: 'extended-parameter-marker'
                178     CALL_FUNCTION                   2
                180     CALL_METHOD                     1
                182     POP_TOP                         
                184     LOAD_FAST                       0: value
                186     LOAD_CONST                      8: 1
                188     LOAD_CONST                      9: None
                190     BUILD_SLICE                     2
                192     BINARY_SUBSCR                   
                194     STORE_FAST                      0: value
                196     LOAD_CONST                      5: True
                198     LOAD_FAST                       1: param
                200     STORE_ATTR                      11: extended
                202     LOAD_FAST                       0: value
                204     LOAD_CONST                      1: 0
                206     BINARY_SUBSCR                   
                208     LOAD_CONST                      10: '='
                210     COMPARE_OP                      3 (!=)
                212     POP_JUMP_IF_FALSE               112 (to 224)
                214     LOAD_GLOBAL                     4: errors
                216     LOAD_METHOD                     9: HeaderParseError
                218     LOAD_CONST                      11: "Parameter not followed by '='"
                220     CALL_METHOD                     1
                222     RAISE_VARARGS                   1
                224     LOAD_FAST                       1: param
                226     LOAD_METHOD                     2: append
                228     LOAD_GLOBAL                     10: ValueTerminal
                230     LOAD_CONST                      10: '='
                232     LOAD_CONST                      12: 'parameter-separator'
                234     CALL_FUNCTION                   2
                236     CALL_METHOD                     1
                238     POP_TOP                         
                240     LOAD_FAST                       0: value
                242     LOAD_CONST                      8: 1
                244     LOAD_CONST                      9: None
                246     BUILD_SLICE                     2
                248     BINARY_SUBSCR                   
                250     STORE_FAST                      0: value
                252     LOAD_CONST                      9: None
                254     STORE_FAST                      3: leader
                256     LOAD_FAST                       0: value
                258     POP_JUMP_IF_FALSE               147 (to 294)
                260     LOAD_FAST                       0: value
                262     LOAD_CONST                      1: 0
                264     BINARY_SUBSCR                   
                266     LOAD_GLOBAL                     12: CFWS_LEADER
                268     CONTAINS_OP                     0 (in)
                270     POP_JUMP_IF_FALSE               147 (to 294)
                272     LOAD_GLOBAL                     13: get_cfws
                274     LOAD_FAST                       0: value
                276     CALL_FUNCTION                   1
                278     UNPACK_SEQUENCE                 2
                280     STORE_FAST                      2: token
                282     STORE_FAST                      0: value
                284     LOAD_FAST                       1: param
                286     LOAD_METHOD                     2: append
                288     LOAD_FAST                       2: token
                290     CALL_METHOD                     1
                292     POP_TOP                         
                294     LOAD_CONST                      9: None
                296     STORE_FAST                      4: remainder
                298     LOAD_FAST                       1: param
                300     STORE_FAST                      5: appendto
                302     LOAD_FAST                       1: param
                304     LOAD_ATTR                       11: extended
                306     POP_JUMP_IF_FALSE               279 (to 558)
                310     LOAD_FAST                       0: value
                312     POP_JUMP_IF_FALSE               279 (to 558)
                316     LOAD_FAST                       0: value
                318     LOAD_CONST                      1: 0
                320     BINARY_SUBSCR                   
                322     LOAD_CONST                      13: '"'
                324     COMPARE_OP                      2 (==)
                326     POP_JUMP_IF_FALSE               279 (to 558)
                330     LOAD_GLOBAL                     14: get_quoted_string
                332     LOAD_FAST                       0: value
                334     CALL_FUNCTION                   1
                336     UNPACK_SEQUENCE                 2
                338     STORE_FAST                      6: qstring
                340     STORE_FAST                      4: remainder
                342     LOAD_FAST                       6: qstring
                344     LOAD_ATTR                       15: stripped_value
                346     STORE_FAST                      7: inner_value
                348     LOAD_CONST                      14: False
                350     STORE_FAST                      8: semi_valid
                352     LOAD_FAST                       1: param
                354     LOAD_ATTR                       16: section_number
                356     LOAD_CONST                      1: 0
                358     COMPARE_OP                      2 (==)
                360     POP_JUMP_IF_FALSE               209 (to 418)
                362     LOAD_FAST                       7: inner_value
                364     POP_JUMP_IF_FALSE               192 (to 384)
                366     LOAD_FAST                       7: inner_value
                368     LOAD_CONST                      1: 0
                370     BINARY_SUBSCR                   
                372     LOAD_CONST                      15: "'"
                374     COMPARE_OP                      2 (==)
                376     POP_JUMP_IF_FALSE               192 (to 384)
                378     LOAD_CONST                      5: True
                380     STORE_FAST                      8: semi_valid
                382     JUMP_FORWARD                    35 (to 454)
                384     LOAD_GLOBAL                     17: get_attrtext
                386     LOAD_FAST                       7: inner_value
                388     CALL_FUNCTION                   1
                390     UNPACK_SEQUENCE                 2
                392     STORE_FAST                      2: token
                394     STORE_FAST                      9: rest
                396     LOAD_FAST                       9: rest
                398     POP_JUMP_IF_FALSE               208 (to 416)
                400     LOAD_FAST                       9: rest
                402     LOAD_CONST                      1: 0
                404     BINARY_SUBSCR                   
                406     LOAD_CONST                      15: "'"
                408     COMPARE_OP                      2 (==)
                410     POP_JUMP_IF_FALSE               208 (to 416)
                412     LOAD_CONST                      5: True
                414     STORE_FAST                      8: semi_valid
                416     JUMP_FORWARD                    18 (to 454)
                418     SETUP_FINALLY                   8 (to 436)
                420     LOAD_GLOBAL                     18: get_extended_attrtext
                422     LOAD_FAST                       7: inner_value
                424     CALL_FUNCTION                   1
                426     UNPACK_SEQUENCE                 2
                428     STORE_FAST                      2: token
                430     STORE_FAST                      9: rest
                432     POP_BLOCK                       
                434     JUMP_FORWARD                    5 (to 446)
                436     POP_TOP                         
                438     POP_TOP                         
                440     POP_TOP                         
                442     POP_EXCEPT                      
                444     JUMP_FORWARD                    4 (to 454)
                446     LOAD_FAST                       9: rest
                448     POP_JUMP_IF_TRUE                227 (to 454)
                450     LOAD_CONST                      5: True
                452     STORE_FAST                      8: semi_valid
                454     LOAD_FAST                       8: semi_valid
                456     POP_JUMP_IF_FALSE               268 (to 536)
                460     LOAD_FAST                       1: param
                462     LOAD_ATTR                       3: defects
                464     LOAD_METHOD                     2: append
                466     LOAD_GLOBAL                     4: errors
                468     LOAD_METHOD                     5: InvalidHeaderDefect
                470     LOAD_CONST                      16: 'Quoted string value for extended parameter is invalid'
                472     CALL_METHOD                     1
                474     CALL_METHOD                     1
                476     POP_TOP                         
                478     LOAD_FAST                       1: param
                480     LOAD_METHOD                     2: append
                482     LOAD_FAST                       6: qstring
                484     CALL_METHOD                     1
                486     POP_TOP                         
                488     LOAD_FAST                       6: qstring
                490     GET_ITER                        
                492     FOR_ITER                        18 (to 530)
                494     STORE_FAST                      10: t
                496     LOAD_FAST                       10: t
                498     LOAD_ATTR                       19: token_type
                500     LOAD_CONST                      17: 'bare-quoted-string'
                502     COMPARE_OP                      2 (==)
                504     POP_JUMP_IF_FALSE               264 (to 528)
                508     BUILD_LIST                      0
                510     LOAD_FAST                       10: t
                512     LOAD_CONST                      9: None
                514     LOAD_CONST                      9: None
                516     BUILD_SLICE                     2
                518     STORE_SUBSCR                    
                520     LOAD_FAST                       10: t
                522     STORE_FAST                      5: appendto
                524     POP_TOP                         
                526     JUMP_FORWARD                    1 (to 530)
                528     JUMP_ABSOLUTE                   246 (to 492)
                530     LOAD_FAST                       7: inner_value
                532     STORE_FAST                      0: value
                534     JUMP_FORWARD                    11 (to 558)
                536     LOAD_CONST                      9: None
                538     STORE_FAST                      4: remainder
                540     LOAD_FAST                       1: param
                542     LOAD_ATTR                       3: defects
                544     LOAD_METHOD                     2: append
                546     LOAD_GLOBAL                     4: errors
                548     LOAD_METHOD                     5: InvalidHeaderDefect
                550     LOAD_CONST                      18: 'Parameter marked as extended but appears to have a quoted string value that is non-encoded'
                552     CALL_METHOD                     1
                554     CALL_METHOD                     1
                556     POP_TOP                         
                558     LOAD_FAST                       0: value
                560     POP_JUMP_IF_FALSE               292 (to 584)
                564     LOAD_FAST                       0: value
                566     LOAD_CONST                      1: 0
                568     BINARY_SUBSCR                   
                570     LOAD_CONST                      15: "'"
                572     COMPARE_OP                      2 (==)
                574     POP_JUMP_IF_FALSE               292 (to 584)
                578     LOAD_CONST                      9: None
                580     STORE_FAST                      2: token
                582     JUMP_FORWARD                    6 (to 596)
                584     LOAD_GLOBAL                     20: get_value
                586     LOAD_FAST                       0: value
                588     CALL_FUNCTION                   1
                590     UNPACK_SEQUENCE                 2
                592     STORE_FAST                      2: token
                594     STORE_FAST                      0: value
                596     LOAD_FAST                       1: param
                598     LOAD_ATTR                       11: extended
                600     POP_JUMP_IF_FALSE               308 (to 616)
                604     LOAD_FAST                       1: param
                606     LOAD_ATTR                       16: section_number
                608     LOAD_CONST                      1: 0
                610     COMPARE_OP                      4 (>)
                612     POP_JUMP_IF_FALSE               350 (to 700)
                616     LOAD_FAST                       0: value
                618     POP_JUMP_IF_FALSE               318 (to 636)
                622     LOAD_FAST                       0: value
                624     LOAD_CONST                      1: 0
                626     BINARY_SUBSCR                   
                628     LOAD_CONST                      15: "'"
                630     COMPARE_OP                      3 (!=)
                632     POP_JUMP_IF_FALSE               341 (to 682)
                636     LOAD_FAST                       5: appendto
                638     LOAD_METHOD                     2: append
                640     LOAD_FAST                       2: token
                642     CALL_METHOD                     1
                644     POP_TOP                         
                646     LOAD_FAST                       4: remainder
                648     LOAD_CONST                      9: None
                650     IS_OP                           1 (is not)
                652     POP_JUMP_IF_FALSE               337 (to 674)
                656     LOAD_FAST                       0: value
                658     POP_JUMP_IF_FALSE               335 (to 670)
                662     LOAD_ASSERTION_ERROR            
                664     LOAD_FAST                       0: value
                666     CALL_FUNCTION                   1
                668     RAISE_VARARGS                   1
                670     LOAD_FAST                       4: remainder
                672     STORE_FAST                      0: value
                674     LOAD_FAST                       1: param
                676     LOAD_FAST                       0: value
                678     BUILD_TUPLE                     2
                680     RETURN_VALUE                    
                682     LOAD_FAST                       1: param
                684     LOAD_ATTR                       3: defects
                686     LOAD_METHOD                     2: append
                688     LOAD_GLOBAL                     4: errors
                690     LOAD_METHOD                     5: InvalidHeaderDefect
                692     LOAD_CONST                      19: 'Apparent initial-extended-value but attribute was not marked as extended or was not initial section'
                694     CALL_METHOD                     1
                696     CALL_METHOD                     1
                698     POP_TOP                         
                700     LOAD_FAST                       0: value
                702     POP_JUMP_IF_TRUE                377 (to 754)
                706     LOAD_FAST                       1: param
                708     LOAD_ATTR                       3: defects
                710     LOAD_METHOD                     2: append
                712     LOAD_GLOBAL                     4: errors
                714     LOAD_METHOD                     5: InvalidHeaderDefect
                716     LOAD_CONST                      20: 'Missing required charset/lang delimiters'
                718     CALL_METHOD                     1
                720     CALL_METHOD                     1
                722     POP_TOP                         
                724     LOAD_FAST                       5: appendto
                726     LOAD_METHOD                     2: append
                728     LOAD_FAST                       2: token
                730     CALL_METHOD                     1
                732     POP_TOP                         
                734     LOAD_FAST                       4: remainder
                736     LOAD_CONST                      9: None
                738     IS_OP                           0 (is)
                740     POP_JUMP_IF_FALSE               376 (to 752)
                744     LOAD_FAST                       1: param
                746     LOAD_FAST                       0: value
                748     BUILD_TUPLE                     2
                750     RETURN_VALUE                    
                752     JUMP_FORWARD                    119 (to 992)
                754     LOAD_FAST                       2: token
                756     LOAD_CONST                      9: None
                758     IS_OP                           1 (is not)
                760     POP_JUMP_IF_FALSE               410 (to 820)
                764     LOAD_FAST                       2: token
                766     GET_ITER                        
                768     FOR_ITER                        11 (to 792)
                770     STORE_FAST                      10: t
                772     LOAD_FAST                       10: t
                774     LOAD_ATTR                       19: token_type
                776     LOAD_CONST                      21: 'extended-attrtext'
                778     COMPARE_OP                      2 (==)
                780     POP_JUMP_IF_FALSE               394 (to 788)
                784     POP_TOP                         
                786     JUMP_FORWARD                    2 (to 792)
                788     JUMP_ABSOLUTE                   384 (to 768)
                792     LOAD_FAST                       10: t
                794     LOAD_ATTR                       19: token_type
                796     LOAD_CONST                      22: 'attrtext'
                798     COMPARE_OP                      2 (==)
                800     POP_TOP                         
                802     LOAD_FAST                       5: appendto
                804     LOAD_METHOD                     2: append
                806     LOAD_FAST                       10: t
                808     CALL_METHOD                     1
                810     POP_TOP                         
                812     LOAD_FAST                       10: t
                814     LOAD_ATTR                       21: value
                816     LOAD_FAST                       1: param
                818     STORE_ATTR                      22: charset
                820     LOAD_FAST                       0: value
                822     LOAD_CONST                      1: 0
                824     BINARY_SUBSCR                   
                826     LOAD_CONST                      15: "'"
                828     COMPARE_OP                      3 (!=)
                830     POP_JUMP_IF_FALSE               425 (to 850)
                834     LOAD_GLOBAL                     4: errors
                836     LOAD_METHOD                     9: HeaderParseError
                838     LOAD_CONST                      23: 'Expected RFC2231 char/lang encoding delimiter, but found {!r}'
                840     LOAD_METHOD                     6: format
                842     LOAD_FAST                       0: value
                844     CALL_METHOD                     1
                846     CALL_METHOD                     1
                848     RAISE_VARARGS                   1
                850     LOAD_FAST                       5: appendto
                852     LOAD_METHOD                     2: append
                854     LOAD_GLOBAL                     10: ValueTerminal
                856     LOAD_CONST                      15: "'"
                858     LOAD_CONST                      24: 'RFC2231-delimiter'
                860     CALL_FUNCTION                   2
                862     CALL_METHOD                     1
                864     POP_TOP                         
                866     LOAD_FAST                       0: value
                868     LOAD_CONST                      8: 1
                870     LOAD_CONST                      9: None
                872     BUILD_SLICE                     2
                874     BINARY_SUBSCR                   
                876     STORE_FAST                      0: value
                878     LOAD_FAST                       0: value
                880     POP_JUMP_IF_FALSE               482 (to 964)
                884     LOAD_FAST                       0: value
                886     LOAD_CONST                      1: 0
                888     BINARY_SUBSCR                   
                890     LOAD_CONST                      15: "'"
                892     COMPARE_OP                      3 (!=)
                894     POP_JUMP_IF_FALSE               482 (to 964)
                898     LOAD_GLOBAL                     17: get_attrtext
                900     LOAD_FAST                       0: value
                902     CALL_FUNCTION                   1
                904     UNPACK_SEQUENCE                 2
                906     STORE_FAST                      2: token
                908     STORE_FAST                      0: value
                910     LOAD_FAST                       5: appendto
                912     LOAD_METHOD                     2: append
                914     LOAD_FAST                       2: token
                916     CALL_METHOD                     1
                918     POP_TOP                         
                920     LOAD_FAST                       2: token
                922     LOAD_ATTR                       21: value
                924     LOAD_FAST                       1: param
                926     STORE_ATTR                      23: lang
                928     LOAD_FAST                       0: value
                930     POP_JUMP_IF_FALSE               474 (to 948)
                934     LOAD_FAST                       0: value
                936     LOAD_CONST                      1: 0
                938     BINARY_SUBSCR                   
                940     LOAD_CONST                      15: "'"
                942     COMPARE_OP                      3 (!=)
                944     POP_JUMP_IF_FALSE               482 (to 964)
                948     LOAD_GLOBAL                     4: errors
                950     LOAD_METHOD                     9: HeaderParseError
                952     LOAD_CONST                      25: 'Expected RFC2231 char/lang encoding delimiter, but found {}'
                954     LOAD_METHOD                     6: format
                956     LOAD_FAST                       0: value
                958     CALL_METHOD                     1
                960     CALL_METHOD                     1
                962     RAISE_VARARGS                   1
                964     LOAD_FAST                       5: appendto
                966     LOAD_METHOD                     2: append
                968     LOAD_GLOBAL                     10: ValueTerminal
                970     LOAD_CONST                      15: "'"
                972     LOAD_CONST                      24: 'RFC2231-delimiter'
                974     CALL_FUNCTION                   2
                976     CALL_METHOD                     1
                978     POP_TOP                         
                980     LOAD_FAST                       0: value
                982     LOAD_CONST                      8: 1
                984     LOAD_CONST                      9: None
                986     BUILD_SLICE                     2
                988     BINARY_SUBSCR                   
                990     STORE_FAST                      0: value
                992     LOAD_FAST                       4: remainder
                994     LOAD_CONST                      9: None
                996     IS_OP                           1 (is not)
                998     POP_JUMP_IF_FALSE               557 (to 1114)
                1002    LOAD_GLOBAL                     24: Value
                1004    CALL_FUNCTION                   0
                1006    STORE_FAST                      11: v
                1008    LOAD_FAST                       0: value
                1010    POP_JUMP_IF_FALSE               554 (to 1108)
                1014    LOAD_FAST                       0: value
                1016    LOAD_CONST                      1: 0
                1018    BINARY_SUBSCR                   
                1020    LOAD_GLOBAL                     25: WSP
                1022    CONTAINS_OP                     0 (in)
                1024    POP_JUMP_IF_FALSE               521 (to 1042)
                1028    LOAD_GLOBAL                     26: get_fws
                1030    LOAD_FAST                       0: value
                1032    CALL_FUNCTION                   1
                1034    UNPACK_SEQUENCE                 2
                1036    STORE_FAST                      2: token
                1038    STORE_FAST                      0: value
                1040    JUMP_FORWARD                    25 (to 1092)
                1042    LOAD_FAST                       0: value
                1044    LOAD_CONST                      1: 0
                1046    BINARY_SUBSCR                   
                1048    LOAD_CONST                      13: '"'
                1050    COMPARE_OP                      2 (==)
                1052    POP_JUMP_IF_FALSE               540 (to 1080)
                1056    LOAD_GLOBAL                     10: ValueTerminal
                1058    LOAD_CONST                      13: '"'
                1060    LOAD_CONST                      26: 'DQUOTE'
                1062    CALL_FUNCTION                   2
                1064    STORE_FAST                      2: token
                1066    LOAD_FAST                       0: value
                1068    LOAD_CONST                      8: 1
                1070    LOAD_CONST                      9: None
                1072    BUILD_SLICE                     2
                1074    BINARY_SUBSCR                   
                1076    STORE_FAST                      0: value
                1078    JUMP_FORWARD                    6 (to 1092)
                1080    LOAD_GLOBAL                     27: get_qcontent
                1082    LOAD_FAST                       0: value
                1084    CALL_FUNCTION                   1
                1086    UNPACK_SEQUENCE                 2
                1088    STORE_FAST                      2: token
                1090    STORE_FAST                      0: value
                1092    LOAD_FAST                       11: v
                1094    LOAD_METHOD                     2: append
                1096    LOAD_FAST                       2: token
                1098    CALL_METHOD                     1
                1100    POP_TOP                         
                1102    LOAD_FAST                       0: value
                1104    POP_JUMP_IF_TRUE                507 (to 1014)
                1108    LOAD_FAST                       11: v
                1110    STORE_FAST                      2: token
                1112    JUMP_FORWARD                    6 (to 1126)
                1114    LOAD_GLOBAL                     20: get_value
                1116    LOAD_FAST                       0: value
                1118    CALL_FUNCTION                   1
                1120    UNPACK_SEQUENCE                 2
                1122    STORE_FAST                      2: token
                1124    STORE_FAST                      0: value
                1126    LOAD_FAST                       5: appendto
                1128    LOAD_METHOD                     2: append
                1130    LOAD_FAST                       2: token
                1132    CALL_METHOD                     1
                1134    POP_TOP                         
                1136    LOAD_FAST                       4: remainder
                1138    LOAD_CONST                      9: None
                1140    IS_OP                           1 (is not)
                1142    POP_JUMP_IF_FALSE               582 (to 1164)
                1146    LOAD_FAST                       0: value
                1148    POP_JUMP_IF_FALSE               580 (to 1160)
                1152    LOAD_ASSERTION_ERROR            
                1154    LOAD_FAST                       0: value
                1156    CALL_FUNCTION                   1
                1158    RAISE_VARARGS                   1
                1160    LOAD_FAST                       4: remainder
                1162    STORE_FAST                      0: value
                1164    LOAD_FAST                       1: param
                1166    LOAD_FAST                       0: value
                1168    BUILD_TUPLE                     2
                1170    RETURN_VALUE                    
        'get_parameter'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: parse_mime_parameters
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 6
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'MimeParameters'
                'get_parameter'
                'append'
                'errors'
                'HeaderParseError'
                'CFWS_LEADER'
                'get_cfws'
                'defects'
                'InvalidHeaderDefect'
                'get_invalid_parameter'
                'format'
                'token_type'
                'extend'
                'ValueTerminal'
            [Var Names]
                'value'
                'mime_parameters'
                'token'
                'err'
                'leader'
                'param'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' parameter *( ";" parameter )\n\n    That BNF is meant to indicate this routine should only be called after\n    finding and handling the leading \';\'.  There is no corresponding rule in\n    the formal RFC grammar, but it is more convenient for us for the set of\n    parameters to be treated as its own TokenList.\n\n    This is \'parse\' routine because it consumes the remaining value, but it\n    would never be called to parse a full header.  Instead it is called to\n    parse everything after the non-parameter value of a specific MIME header.\n\n    '
                None
                0
                ';'
                'parameter entry with no content'
                'invalid parameter {!r}'
                -1
                'invalid-parameter'
                'parameter with invalid trailing text {!r}'
                'parameter-separator'
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: MimeParameters
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: mime_parameters
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_FALSE               180 (to 360)
                10      SETUP_FINALLY                   13 (to 38)
                12      LOAD_GLOBAL                     1: get_parameter
                14      LOAD_FAST                       0: value
                16      CALL_FUNCTION                   1
                18      UNPACK_SEQUENCE                 2
                20      STORE_FAST                      2: token
                22      STORE_FAST                      0: value
                24      LOAD_FAST                       1: mime_parameters
                26      LOAD_METHOD                     2: append
                28      LOAD_FAST                       2: token
                30      CALL_METHOD                     1
                32      POP_TOP                         
                34      POP_BLOCK                       
                36      JUMP_FORWARD                    105 (to 248)
                38      DUP_TOP                         
                40      LOAD_GLOBAL                     3: errors
                42      LOAD_ATTR                       4: HeaderParseError
                44      JUMP_IF_NOT_EXC_MATCH           123 (to 246)
                46      POP_TOP                         
                48      STORE_FAST                      3: err
                50      POP_TOP                         
                52      SETUP_FINALLY                   92 (to 238)
                54      LOAD_CONST                      1: None
                56      STORE_FAST                      4: leader
                58      LOAD_FAST                       0: value
                60      LOAD_CONST                      2: 0
                62      BINARY_SUBSCR                   
                64      LOAD_GLOBAL                     5: CFWS_LEADER
                66      CONTAINS_OP                     0 (in)
                68      POP_JUMP_IF_FALSE               41 (to 82)
                70      LOAD_GLOBAL                     6: get_cfws
                72      LOAD_FAST                       0: value
                74      CALL_FUNCTION                   1
                76      UNPACK_SEQUENCE                 2
                78      STORE_FAST                      4: leader
                80      STORE_FAST                      0: value
                82      LOAD_FAST                       0: value
                84      POP_JUMP_IF_TRUE                56 (to 112)
                86      LOAD_FAST                       1: mime_parameters
                88      LOAD_METHOD                     2: append
                90      LOAD_FAST                       4: leader
                92      CALL_METHOD                     1
                94      POP_TOP                         
                96      LOAD_FAST                       1: mime_parameters
                98      POP_BLOCK                       
                100     ROT_FOUR                        
                102     POP_EXCEPT                      
                104     LOAD_CONST                      1: None
                106     STORE_FAST                      3: err
                108     DELETE_FAST                     3: err
                110     RETURN_VALUE                    
                112     LOAD_FAST                       0: value
                114     LOAD_CONST                      2: 0
                116     BINARY_SUBSCR                   
                118     LOAD_CONST                      3: ';'
                120     COMPARE_OP                      2 (==)
                122     POP_JUMP_IF_FALSE               81 (to 162)
                124     LOAD_FAST                       4: leader
                126     LOAD_CONST                      1: None
                128     IS_OP                           1 (is not)
                130     POP_JUMP_IF_FALSE               71 (to 142)
                132     LOAD_FAST                       1: mime_parameters
                134     LOAD_METHOD                     2: append
                136     LOAD_FAST                       4: leader
                138     CALL_METHOD                     1
                140     POP_TOP                         
                142     LOAD_FAST                       1: mime_parameters
                144     LOAD_ATTR                       7: defects
                146     LOAD_METHOD                     2: append
                148     LOAD_GLOBAL                     3: errors
                150     LOAD_METHOD                     8: InvalidHeaderDefect
                152     LOAD_CONST                      4: 'parameter entry with no content'
                154     CALL_METHOD                     1
                156     CALL_METHOD                     1
                158     POP_TOP                         
                160     JUMP_FORWARD                    32 (to 226)
                162     LOAD_GLOBAL                     9: get_invalid_parameter
                164     LOAD_FAST                       0: value
                166     CALL_FUNCTION                   1
                168     UNPACK_SEQUENCE                 2
                170     STORE_FAST                      2: token
                172     STORE_FAST                      0: value
                174     LOAD_FAST                       4: leader
                176     POP_JUMP_IF_FALSE               96 (to 192)
                178     LOAD_FAST                       4: leader
                180     BUILD_LIST                      1
                182     LOAD_FAST                       2: token
                184     LOAD_CONST                      1: None
                186     LOAD_CONST                      2: 0
                188     BUILD_SLICE                     2
                190     STORE_SUBSCR                    
                192     LOAD_FAST                       1: mime_parameters
                194     LOAD_METHOD                     2: append
                196     LOAD_FAST                       2: token
                198     CALL_METHOD                     1
                200     POP_TOP                         
                202     LOAD_FAST                       1: mime_parameters
                204     LOAD_ATTR                       7: defects
                206     LOAD_METHOD                     2: append
                208     LOAD_GLOBAL                     3: errors
                210     LOAD_METHOD                     8: InvalidHeaderDefect
                212     LOAD_CONST                      5: 'invalid parameter {!r}'
                214     LOAD_METHOD                     10: format
                216     LOAD_FAST                       2: token
                218     CALL_METHOD                     1
                220     CALL_METHOD                     1
                222     CALL_METHOD                     1
                224     POP_TOP                         
                226     POP_BLOCK                       
                228     POP_EXCEPT                      
                230     LOAD_CONST                      1: None
                232     STORE_FAST                      3: err
                234     DELETE_FAST                     3: err
                236     JUMP_FORWARD                    5 (to 248)
                238     LOAD_CONST                      1: None
                240     STORE_FAST                      3: err
                242     DELETE_FAST                     3: err
                244     RERAISE                         1
                246     RERAISE                         0
                248     LOAD_FAST                       0: value
                250     POP_JUMP_IF_FALSE               162 (to 324)
                252     LOAD_FAST                       0: value
                254     LOAD_CONST                      2: 0
                256     BINARY_SUBSCR                   
                258     LOAD_CONST                      3: ';'
                260     COMPARE_OP                      3 (!=)
                262     POP_JUMP_IF_FALSE               162 (to 324)
                264     LOAD_FAST                       1: mime_parameters
                266     LOAD_CONST                      6: -1
                268     BINARY_SUBSCR                   
                270     STORE_FAST                      5: param
                272     LOAD_CONST                      7: 'invalid-parameter'
                274     LOAD_FAST                       5: param
                276     STORE_ATTR                      11: token_type
                278     LOAD_GLOBAL                     9: get_invalid_parameter
                280     LOAD_FAST                       0: value
                282     CALL_FUNCTION                   1
                284     UNPACK_SEQUENCE                 2
                286     STORE_FAST                      2: token
                288     STORE_FAST                      0: value
                290     LOAD_FAST                       5: param
                292     LOAD_METHOD                     12: extend
                294     LOAD_FAST                       2: token
                296     CALL_METHOD                     1
                298     POP_TOP                         
                300     LOAD_FAST                       1: mime_parameters
                302     LOAD_ATTR                       7: defects
                304     LOAD_METHOD                     2: append
                306     LOAD_GLOBAL                     3: errors
                308     LOAD_METHOD                     8: InvalidHeaderDefect
                310     LOAD_CONST                      8: 'parameter with invalid trailing text {!r}'
                312     LOAD_METHOD                     10: format
                314     LOAD_FAST                       2: token
                316     CALL_METHOD                     1
                318     CALL_METHOD                     1
                320     CALL_METHOD                     1
                322     POP_TOP                         
                324     LOAD_FAST                       0: value
                326     POP_JUMP_IF_FALSE               178 (to 356)
                328     LOAD_FAST                       1: mime_parameters
                330     LOAD_METHOD                     2: append
                332     LOAD_GLOBAL                     13: ValueTerminal
                334     LOAD_CONST                      3: ';'
                336     LOAD_CONST                      9: 'parameter-separator'
                338     CALL_FUNCTION                   2
                340     CALL_METHOD                     1
                342     POP_TOP                         
                344     LOAD_FAST                       0: value
                346     LOAD_CONST                      10: 1
                348     LOAD_CONST                      1: None
                350     BUILD_SLICE                     2
                352     BINARY_SUBSCR                   
                354     STORE_FAST                      0: value
                356     LOAD_FAST                       0: value
                358     POP_JUMP_IF_TRUE                5 (to 10)
                360     LOAD_FAST                       1: mime_parameters
                362     RETURN_VALUE                    
        'parse_mime_parameters'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: _find_mime_parameters
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'PHRASE_ENDS'
                'append'
                'ValueTerminal'
                'get_phrase'
                'parse_mime_parameters'
            [Var Names]
                'tokenlist'
                'value'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Do our best to find the parameters in an invalid MIME header\n\n    '
                0
                ';'
                'misplaced-special'
                1
                None
                'parameter-separator'
            [Disassembly]
                0       LOAD_FAST                       1: value
                2       POP_JUMP_IF_FALSE               50 (to 100)
                4       LOAD_FAST                       1: value
                6       LOAD_CONST                      1: 0
                8       BINARY_SUBSCR                   
                10      LOAD_CONST                      2: ';'
                12      COMPARE_OP                      3 (!=)
                14      POP_JUMP_IF_FALSE               50 (to 100)
                16      LOAD_FAST                       1: value
                18      LOAD_CONST                      1: 0
                20      BINARY_SUBSCR                   
                22      LOAD_GLOBAL                     0: PHRASE_ENDS
                24      CONTAINS_OP                     0 (in)
                26      POP_JUMP_IF_FALSE               31 (to 62)
                28      LOAD_FAST                       0: tokenlist
                30      LOAD_METHOD                     1: append
                32      LOAD_GLOBAL                     2: ValueTerminal
                34      LOAD_FAST                       1: value
                36      LOAD_CONST                      1: 0
                38      BINARY_SUBSCR                   
                40      LOAD_CONST                      3: 'misplaced-special'
                42      CALL_FUNCTION                   2
                44      CALL_METHOD                     1
                46      POP_TOP                         
                48      LOAD_FAST                       1: value
                50      LOAD_CONST                      4: 1
                52      LOAD_CONST                      5: None
                54      BUILD_SLICE                     2
                56      BINARY_SUBSCR                   
                58      STORE_FAST                      1: value
                60      JUMP_FORWARD                    11 (to 84)
                62      LOAD_GLOBAL                     3: get_phrase
                64      LOAD_FAST                       1: value
                66      CALL_FUNCTION                   1
                68      UNPACK_SEQUENCE                 2
                70      STORE_FAST                      2: token
                72      STORE_FAST                      1: value
                74      LOAD_FAST                       0: tokenlist
                76      LOAD_METHOD                     1: append
                78      LOAD_FAST                       2: token
                80      CALL_METHOD                     1
                82      POP_TOP                         
                84      LOAD_FAST                       1: value
                86      POP_JUMP_IF_FALSE               50 (to 100)
                88      LOAD_FAST                       1: value
                90      LOAD_CONST                      1: 0
                92      BINARY_SUBSCR                   
                94      LOAD_CONST                      2: ';'
                96      COMPARE_OP                      3 (!=)
                98      POP_JUMP_IF_TRUE                8 (to 16)
                100     LOAD_FAST                       1: value
                102     POP_JUMP_IF_TRUE                54 (to 108)
                104     LOAD_CONST                      5: None
                106     RETURN_VALUE                    
                108     LOAD_FAST                       0: tokenlist
                110     LOAD_METHOD                     1: append
                112     LOAD_GLOBAL                     2: ValueTerminal
                114     LOAD_CONST                      2: ';'
                116     LOAD_CONST                      6: 'parameter-separator'
                118     CALL_FUNCTION                   2
                120     CALL_METHOD                     1
                122     POP_TOP                         
                124     LOAD_FAST                       0: tokenlist
                126     LOAD_METHOD                     1: append
                128     LOAD_GLOBAL                     4: parse_mime_parameters
                130     LOAD_FAST                       1: value
                132     LOAD_CONST                      4: 1
                134     LOAD_CONST                      5: None
                136     BUILD_SLICE                     2
                138     BINARY_SUBSCR                   
                140     CALL_FUNCTION                   1
                142     CALL_METHOD                     1
                144     POP_TOP                         
                146     LOAD_CONST                      5: None
                148     RETURN_VALUE                    
        '_find_mime_parameters'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: parse_content_type_header
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ContentType'
                'defects'
                'append'
                'errors'
                'HeaderMissingRequiredValue'
                'get_token'
                'HeaderParseError'
                'InvalidHeaderDefect'
                'format'
                '_find_mime_parameters'
                'value'
                'strip'
                'lower'
                'maintype'
                'ValueTerminal'
                'subtype'
                'parse_mime_parameters'
            [Var Names]
                'value'
                'ctype'
                'recover'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' maintype "/" subtype *( ";" parameter )\n\n    The maintype and substype are tokens.  Theoretically they could\n    be checked against the official IANA list + x-token, but we\n    don\'t do that.\n    '
                False
                'Missing content type specification'
                'Expected content maintype but found {!r}'
                0
                '/'
                'Invalid content type'
                'content-type-separator'
                1
                None
                'Expected content subtype but found {!r}'
                ';'
                'Only parameters are valid after content type, but found {!r}'
                'parameter-separator'
            [Disassembly]
                0       LOAD_GLOBAL                     0: ContentType
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: ctype
                6       LOAD_CONST                      1: False
                8       STORE_FAST                      2: recover
                10      LOAD_FAST                       0: value
                12      POP_JUMP_IF_TRUE                18 (to 36)
                14      LOAD_FAST                       1: ctype
                16      LOAD_ATTR                       1: defects
                18      LOAD_METHOD                     2: append
                20      LOAD_GLOBAL                     3: errors
                22      LOAD_METHOD                     4: HeaderMissingRequiredValue
                24      LOAD_CONST                      2: 'Missing content type specification'
                26      CALL_METHOD                     1
                28      CALL_METHOD                     1
                30      POP_TOP                         
                32      LOAD_FAST                       1: ctype
                34      RETURN_VALUE                    
                36      SETUP_FINALLY                   8 (to 54)
                38      LOAD_GLOBAL                     5: get_token
                40      LOAD_FAST                       0: value
                42      CALL_FUNCTION                   1
                44      UNPACK_SEQUENCE                 2
                46      STORE_FAST                      3: token
                48      STORE_FAST                      0: value
                50      POP_BLOCK                       
                52      JUMP_FORWARD                    29 (to 112)
                54      DUP_TOP                         
                56      LOAD_GLOBAL                     3: errors
                58      LOAD_ATTR                       6: HeaderParseError
                60      JUMP_IF_NOT_EXC_MATCH           55 (to 110)
                62      POP_TOP                         
                64      POP_TOP                         
                66      POP_TOP                         
                68      LOAD_FAST                       1: ctype
                70      LOAD_ATTR                       1: defects
                72      LOAD_METHOD                     2: append
                74      LOAD_GLOBAL                     3: errors
                76      LOAD_METHOD                     7: InvalidHeaderDefect
                78      LOAD_CONST                      3: 'Expected content maintype but found {!r}'
                80      LOAD_METHOD                     8: format
                82      LOAD_FAST                       0: value
                84      CALL_METHOD                     1
                86      CALL_METHOD                     1
                88      CALL_METHOD                     1
                90      POP_TOP                         
                92      LOAD_GLOBAL                     9: _find_mime_parameters
                94      LOAD_FAST                       1: ctype
                96      LOAD_FAST                       0: value
                98      CALL_FUNCTION                   2
                100     POP_TOP                         
                102     LOAD_FAST                       1: ctype
                104     ROT_FOUR                        
                106     POP_EXCEPT                      
                108     RETURN_VALUE                    
                110     RERAISE                         0
                112     LOAD_FAST                       1: ctype
                114     LOAD_METHOD                     2: append
                116     LOAD_FAST                       3: token
                118     CALL_METHOD                     1
                120     POP_TOP                         
                122     LOAD_FAST                       0: value
                124     POP_JUMP_IF_FALSE               69 (to 138)
                126     LOAD_FAST                       0: value
                128     LOAD_CONST                      4: 0
                130     BINARY_SUBSCR                   
                132     LOAD_CONST                      5: '/'
                134     COMPARE_OP                      3 (!=)
                136     POP_JUMP_IF_FALSE               87 (to 174)
                138     LOAD_FAST                       1: ctype
                140     LOAD_ATTR                       1: defects
                142     LOAD_METHOD                     2: append
                144     LOAD_GLOBAL                     3: errors
                146     LOAD_METHOD                     7: InvalidHeaderDefect
                148     LOAD_CONST                      6: 'Invalid content type'
                150     CALL_METHOD                     1
                152     CALL_METHOD                     1
                154     POP_TOP                         
                156     LOAD_FAST                       0: value
                158     POP_JUMP_IF_FALSE               85 (to 170)
                160     LOAD_GLOBAL                     9: _find_mime_parameters
                162     LOAD_FAST                       1: ctype
                164     LOAD_FAST                       0: value
                166     CALL_FUNCTION                   2
                168     POP_TOP                         
                170     LOAD_FAST                       1: ctype
                172     RETURN_VALUE                    
                174     LOAD_FAST                       3: token
                176     LOAD_ATTR                       10: value
                178     LOAD_METHOD                     11: strip
                180     CALL_METHOD                     0
                182     LOAD_METHOD                     12: lower
                184     CALL_METHOD                     0
                186     LOAD_FAST                       1: ctype
                188     STORE_ATTR                      13: maintype
                190     LOAD_FAST                       1: ctype
                192     LOAD_METHOD                     2: append
                194     LOAD_GLOBAL                     14: ValueTerminal
                196     LOAD_CONST                      5: '/'
                198     LOAD_CONST                      7: 'content-type-separator'
                200     CALL_FUNCTION                   2
                202     CALL_METHOD                     1
                204     POP_TOP                         
                206     LOAD_FAST                       0: value
                208     LOAD_CONST                      8: 1
                210     LOAD_CONST                      9: None
                212     BUILD_SLICE                     2
                214     BINARY_SUBSCR                   
                216     STORE_FAST                      0: value
                218     SETUP_FINALLY                   8 (to 236)
                220     LOAD_GLOBAL                     5: get_token
                222     LOAD_FAST                       0: value
                224     CALL_FUNCTION                   1
                226     UNPACK_SEQUENCE                 2
                228     STORE_FAST                      3: token
                230     STORE_FAST                      0: value
                232     POP_BLOCK                       
                234     JUMP_FORWARD                    29 (to 294)
                236     DUP_TOP                         
                238     LOAD_GLOBAL                     3: errors
                240     LOAD_ATTR                       6: HeaderParseError
                242     JUMP_IF_NOT_EXC_MATCH           146 (to 292)
                244     POP_TOP                         
                246     POP_TOP                         
                248     POP_TOP                         
                250     LOAD_FAST                       1: ctype
                252     LOAD_ATTR                       1: defects
                254     LOAD_METHOD                     2: append
                256     LOAD_GLOBAL                     3: errors
                258     LOAD_METHOD                     7: InvalidHeaderDefect
                260     LOAD_CONST                      10: 'Expected content subtype but found {!r}'
                262     LOAD_METHOD                     8: format
                264     LOAD_FAST                       0: value
                266     CALL_METHOD                     1
                268     CALL_METHOD                     1
                270     CALL_METHOD                     1
                272     POP_TOP                         
                274     LOAD_GLOBAL                     9: _find_mime_parameters
                276     LOAD_FAST                       1: ctype
                278     LOAD_FAST                       0: value
                280     CALL_FUNCTION                   2
                282     POP_TOP                         
                284     LOAD_FAST                       1: ctype
                286     ROT_FOUR                        
                288     POP_EXCEPT                      
                290     RETURN_VALUE                    
                292     RERAISE                         0
                294     LOAD_FAST                       1: ctype
                296     LOAD_METHOD                     2: append
                298     LOAD_FAST                       3: token
                300     CALL_METHOD                     1
                302     POP_TOP                         
                304     LOAD_FAST                       3: token
                306     LOAD_ATTR                       10: value
                308     LOAD_METHOD                     11: strip
                310     CALL_METHOD                     0
                312     LOAD_METHOD                     12: lower
                314     CALL_METHOD                     0
                316     LOAD_FAST                       1: ctype
                318     STORE_ATTR                      15: subtype
                320     LOAD_FAST                       0: value
                322     POP_JUMP_IF_TRUE                164 (to 328)
                324     LOAD_FAST                       1: ctype
                326     RETURN_VALUE                    
                328     LOAD_FAST                       0: value
                330     LOAD_CONST                      4: 0
                332     BINARY_SUBSCR                   
                334     LOAD_CONST                      11: ';'
                336     COMPARE_OP                      3 (!=)
                338     POP_JUMP_IF_FALSE               193 (to 386)
                340     LOAD_FAST                       1: ctype
                342     LOAD_ATTR                       1: defects
                344     LOAD_METHOD                     2: append
                346     LOAD_GLOBAL                     3: errors
                348     LOAD_METHOD                     7: InvalidHeaderDefect
                350     LOAD_CONST                      12: 'Only parameters are valid after content type, but found {!r}'
                352     LOAD_METHOD                     8: format
                354     LOAD_FAST                       0: value
                356     CALL_METHOD                     1
                358     CALL_METHOD                     1
                360     CALL_METHOD                     1
                362     POP_TOP                         
                364     LOAD_FAST                       1: ctype
                366     DELETE_ATTR                     13: maintype
                368     LOAD_FAST                       1: ctype
                370     DELETE_ATTR                     15: subtype
                372     LOAD_GLOBAL                     9: _find_mime_parameters
                374     LOAD_FAST                       1: ctype
                376     LOAD_FAST                       0: value
                378     CALL_FUNCTION                   2
                380     POP_TOP                         
                382     LOAD_FAST                       1: ctype
                384     RETURN_VALUE                    
                386     LOAD_FAST                       1: ctype
                388     LOAD_METHOD                     2: append
                390     LOAD_GLOBAL                     14: ValueTerminal
                392     LOAD_CONST                      11: ';'
                394     LOAD_CONST                      13: 'parameter-separator'
                396     CALL_FUNCTION                   2
                398     CALL_METHOD                     1
                400     POP_TOP                         
                402     LOAD_FAST                       1: ctype
                404     LOAD_METHOD                     2: append
                406     LOAD_GLOBAL                     16: parse_mime_parameters
                408     LOAD_FAST                       0: value
                410     LOAD_CONST                      8: 1
                412     LOAD_CONST                      9: None
                414     BUILD_SLICE                     2
                416     BINARY_SUBSCR                   
                418     CALL_FUNCTION                   1
                420     CALL_METHOD                     1
                422     POP_TOP                         
                424     LOAD_FAST                       1: ctype
                426     RETURN_VALUE                    
        'parse_content_type_header'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: parse_content_disposition_header
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ContentDisposition'
                'defects'
                'append'
                'errors'
                'HeaderMissingRequiredValue'
                'get_token'
                'HeaderParseError'
                'InvalidHeaderDefect'
                'format'
                '_find_mime_parameters'
                'value'
                'strip'
                'lower'
                'content_disposition'
                'ValueTerminal'
                'parse_mime_parameters'
            [Var Names]
                'value'
                'disp_header'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' disposition-type *( ";" parameter )\n\n    '
                'Missing content disposition'
                'Expected content disposition but found {!r}'
                0
                ';'
                'Only parameters are valid after content disposition, but found {!r}'
                'parameter-separator'
                1
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: ContentDisposition
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: disp_header
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_TRUE                16 (to 32)
                10      LOAD_FAST                       1: disp_header
                12      LOAD_ATTR                       1: defects
                14      LOAD_METHOD                     2: append
                16      LOAD_GLOBAL                     3: errors
                18      LOAD_METHOD                     4: HeaderMissingRequiredValue
                20      LOAD_CONST                      1: 'Missing content disposition'
                22      CALL_METHOD                     1
                24      CALL_METHOD                     1
                26      POP_TOP                         
                28      LOAD_FAST                       1: disp_header
                30      RETURN_VALUE                    
                32      SETUP_FINALLY                   8 (to 50)
                34      LOAD_GLOBAL                     5: get_token
                36      LOAD_FAST                       0: value
                38      CALL_FUNCTION                   1
                40      UNPACK_SEQUENCE                 2
                42      STORE_FAST                      2: token
                44      STORE_FAST                      0: value
                46      POP_BLOCK                       
                48      JUMP_FORWARD                    29 (to 108)
                50      DUP_TOP                         
                52      LOAD_GLOBAL                     3: errors
                54      LOAD_ATTR                       6: HeaderParseError
                56      JUMP_IF_NOT_EXC_MATCH           53 (to 106)
                58      POP_TOP                         
                60      POP_TOP                         
                62      POP_TOP                         
                64      LOAD_FAST                       1: disp_header
                66      LOAD_ATTR                       1: defects
                68      LOAD_METHOD                     2: append
                70      LOAD_GLOBAL                     3: errors
                72      LOAD_METHOD                     7: InvalidHeaderDefect
                74      LOAD_CONST                      2: 'Expected content disposition but found {!r}'
                76      LOAD_METHOD                     8: format
                78      LOAD_FAST                       0: value
                80      CALL_METHOD                     1
                82      CALL_METHOD                     1
                84      CALL_METHOD                     1
                86      POP_TOP                         
                88      LOAD_GLOBAL                     9: _find_mime_parameters
                90      LOAD_FAST                       1: disp_header
                92      LOAD_FAST                       0: value
                94      CALL_FUNCTION                   2
                96      POP_TOP                         
                98      LOAD_FAST                       1: disp_header
                100     ROT_FOUR                        
                102     POP_EXCEPT                      
                104     RETURN_VALUE                    
                106     RERAISE                         0
                108     LOAD_FAST                       1: disp_header
                110     LOAD_METHOD                     2: append
                112     LOAD_FAST                       2: token
                114     CALL_METHOD                     1
                116     POP_TOP                         
                118     LOAD_FAST                       2: token
                120     LOAD_ATTR                       10: value
                122     LOAD_METHOD                     11: strip
                124     CALL_METHOD                     0
                126     LOAD_METHOD                     12: lower
                128     CALL_METHOD                     0
                130     LOAD_FAST                       1: disp_header
                132     STORE_ATTR                      13: content_disposition
                134     LOAD_FAST                       0: value
                136     POP_JUMP_IF_TRUE                71 (to 142)
                138     LOAD_FAST                       1: disp_header
                140     RETURN_VALUE                    
                142     LOAD_FAST                       0: value
                144     LOAD_CONST                      3: 0
                146     BINARY_SUBSCR                   
                148     LOAD_CONST                      4: ';'
                150     COMPARE_OP                      3 (!=)
                152     POP_JUMP_IF_FALSE               96 (to 192)
                154     LOAD_FAST                       1: disp_header
                156     LOAD_ATTR                       1: defects
                158     LOAD_METHOD                     2: append
                160     LOAD_GLOBAL                     3: errors
                162     LOAD_METHOD                     7: InvalidHeaderDefect
                164     LOAD_CONST                      5: 'Only parameters are valid after content disposition, but found {!r}'
                166     LOAD_METHOD                     8: format
                168     LOAD_FAST                       0: value
                170     CALL_METHOD                     1
                172     CALL_METHOD                     1
                174     CALL_METHOD                     1
                176     POP_TOP                         
                178     LOAD_GLOBAL                     9: _find_mime_parameters
                180     LOAD_FAST                       1: disp_header
                182     LOAD_FAST                       0: value
                184     CALL_FUNCTION                   2
                186     POP_TOP                         
                188     LOAD_FAST                       1: disp_header
                190     RETURN_VALUE                    
                192     LOAD_FAST                       1: disp_header
                194     LOAD_METHOD                     2: append
                196     LOAD_GLOBAL                     14: ValueTerminal
                198     LOAD_CONST                      4: ';'
                200     LOAD_CONST                      6: 'parameter-separator'
                202     CALL_FUNCTION                   2
                204     CALL_METHOD                     1
                206     POP_TOP                         
                208     LOAD_FAST                       1: disp_header
                210     LOAD_METHOD                     2: append
                212     LOAD_GLOBAL                     15: parse_mime_parameters
                214     LOAD_FAST                       0: value
                216     LOAD_CONST                      7: 1
                218     LOAD_CONST                      8: None
                220     BUILD_SLICE                     2
                222     BINARY_SUBSCR                   
                224     CALL_FUNCTION                   1
                226     CALL_METHOD                     1
                228     POP_TOP                         
                230     LOAD_FAST                       1: disp_header
                232     RETURN_VALUE                    
        'parse_content_disposition_header'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: parse_content_transfer_encoding_header
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ContentTransferEncoding'
                'defects'
                'append'
                'errors'
                'HeaderMissingRequiredValue'
                'get_token'
                'HeaderParseError'
                'InvalidHeaderDefect'
                'format'
                'value'
                'strip'
                'lower'
                'cte'
                'PHRASE_ENDS'
                'ValueTerminal'
                'get_phrase'
            [Var Names]
                'value'
                'cte_header'
                'token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' mechanism\n\n    '
                'Missing content transfer encoding'
                'Expected content transfer encoding but found {!r}'
                'Extra text after content transfer encoding'
                0
                'misplaced-special'
                1
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: ContentTransferEncoding
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: cte_header
                6       LOAD_FAST                       0: value
                8       POP_JUMP_IF_TRUE                16 (to 32)
                10      LOAD_FAST                       1: cte_header
                12      LOAD_ATTR                       1: defects
                14      LOAD_METHOD                     2: append
                16      LOAD_GLOBAL                     3: errors
                18      LOAD_METHOD                     4: HeaderMissingRequiredValue
                20      LOAD_CONST                      1: 'Missing content transfer encoding'
                22      CALL_METHOD                     1
                24      CALL_METHOD                     1
                26      POP_TOP                         
                28      LOAD_FAST                       1: cte_header
                30      RETURN_VALUE                    
                32      SETUP_FINALLY                   8 (to 50)
                34      LOAD_GLOBAL                     5: get_token
                36      LOAD_FAST                       0: value
                38      CALL_FUNCTION                   1
                40      UNPACK_SEQUENCE                 2
                42      STORE_FAST                      2: token
                44      STORE_FAST                      0: value
                46      POP_BLOCK                       
                48      JUMP_FORWARD                    22 (to 94)
                50      DUP_TOP                         
                52      LOAD_GLOBAL                     3: errors
                54      LOAD_ATTR                       6: HeaderParseError
                56      JUMP_IF_NOT_EXC_MATCH           46 (to 92)
                58      POP_TOP                         
                60      POP_TOP                         
                62      POP_TOP                         
                64      LOAD_FAST                       1: cte_header
                66      LOAD_ATTR                       1: defects
                68      LOAD_METHOD                     2: append
                70      LOAD_GLOBAL                     3: errors
                72      LOAD_METHOD                     7: InvalidHeaderDefect
                74      LOAD_CONST                      2: 'Expected content transfer encoding but found {!r}'
                76      LOAD_METHOD                     8: format
                78      LOAD_FAST                       0: value
                80      CALL_METHOD                     1
                82      CALL_METHOD                     1
                84      CALL_METHOD                     1
                86      POP_TOP                         
                88      POP_EXCEPT                      
                90      JUMP_FORWARD                    14 (to 120)
                92      RERAISE                         0
                94      LOAD_FAST                       1: cte_header
                96      LOAD_METHOD                     2: append
                98      LOAD_FAST                       2: token
                100     CALL_METHOD                     1
                102     POP_TOP                         
                104     LOAD_FAST                       2: token
                106     LOAD_ATTR                       9: value
                108     LOAD_METHOD                     10: strip
                110     CALL_METHOD                     0
                112     LOAD_METHOD                     11: lower
                114     CALL_METHOD                     0
                116     LOAD_FAST                       1: cte_header
                118     STORE_ATTR                      12: cte
                120     LOAD_FAST                       0: value
                122     POP_JUMP_IF_TRUE                64 (to 128)
                124     LOAD_FAST                       1: cte_header
                126     RETURN_VALUE                    
                128     LOAD_FAST                       0: value
                130     POP_JUMP_IF_FALSE               111 (to 222)
                132     LOAD_FAST                       1: cte_header
                134     LOAD_ATTR                       1: defects
                136     LOAD_METHOD                     2: append
                138     LOAD_GLOBAL                     3: errors
                140     LOAD_METHOD                     7: InvalidHeaderDefect
                142     LOAD_CONST                      3: 'Extra text after content transfer encoding'
                144     CALL_METHOD                     1
                146     CALL_METHOD                     1
                148     POP_TOP                         
                150     LOAD_FAST                       0: value
                152     LOAD_CONST                      4: 0
                154     BINARY_SUBSCR                   
                156     LOAD_GLOBAL                     13: PHRASE_ENDS
                158     CONTAINS_OP                     0 (in)
                160     POP_JUMP_IF_FALSE               98 (to 196)
                162     LOAD_FAST                       1: cte_header
                164     LOAD_METHOD                     2: append
                166     LOAD_GLOBAL                     14: ValueTerminal
                168     LOAD_FAST                       0: value
                170     LOAD_CONST                      4: 0
                172     BINARY_SUBSCR                   
                174     LOAD_CONST                      5: 'misplaced-special'
                176     CALL_FUNCTION                   2
                178     CALL_METHOD                     1
                180     POP_TOP                         
                182     LOAD_FAST                       0: value
                184     LOAD_CONST                      6: 1
                186     LOAD_CONST                      7: None
                188     BUILD_SLICE                     2
                190     BINARY_SUBSCR                   
                192     STORE_FAST                      0: value
                194     JUMP_FORWARD                    11 (to 218)
                196     LOAD_GLOBAL                     15: get_phrase
                198     LOAD_FAST                       0: value
                200     CALL_FUNCTION                   1
                202     UNPACK_SEQUENCE                 2
                204     STORE_FAST                      2: token
                206     STORE_FAST                      0: value
                208     LOAD_FAST                       1: cte_header
                210     LOAD_METHOD                     2: append
                212     LOAD_FAST                       2: token
                214     CALL_METHOD                     1
                216     POP_TOP                         
                218     LOAD_FAST                       0: value
                220     POP_JUMP_IF_TRUE                66 (to 132)
                222     LOAD_FAST                       1: cte_header
                224     RETURN_VALUE                    
        'parse_content_transfer_encoding_header'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: _steal_trailing_WSP_if_exists
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'WSP'
            [Var Names]
                'lines'
                'wsp'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                ''
                -1
            [Disassembly]
                0       LOAD_CONST                      1: ''
                2       STORE_FAST                      1: wsp
                4       LOAD_FAST                       0: lines
                6       POP_JUMP_IF_FALSE               32 (to 64)
                8       LOAD_FAST                       0: lines
                10      LOAD_CONST                      2: -1
                12      BINARY_SUBSCR                   
                14      POP_JUMP_IF_FALSE               32 (to 64)
                16      LOAD_FAST                       0: lines
                18      LOAD_CONST                      2: -1
                20      BINARY_SUBSCR                   
                22      LOAD_CONST                      2: -1
                24      BINARY_SUBSCR                   
                26      LOAD_GLOBAL                     0: WSP
                28      CONTAINS_OP                     0 (in)
                30      POP_JUMP_IF_FALSE               32 (to 64)
                32      LOAD_FAST                       0: lines
                34      LOAD_CONST                      2: -1
                36      BINARY_SUBSCR                   
                38      LOAD_CONST                      2: -1
                40      BINARY_SUBSCR                   
                42      STORE_FAST                      1: wsp
                44      LOAD_FAST                       0: lines
                46      LOAD_CONST                      2: -1
                48      BINARY_SUBSCR                   
                50      LOAD_CONST                      0: None
                52      LOAD_CONST                      2: -1
                54      BUILD_SLICE                     2
                56      BINARY_SUBSCR                   
                58      LOAD_FAST                       0: lines
                60      LOAD_CONST                      2: -1
                62      STORE_SUBSCR                    
                64      LOAD_FAST                       1: wsp
                66      RETURN_VALUE                    
        '_steal_trailing_WSP_if_exists'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: _refold_parse_tree
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 1
            Locals: 16
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'max_line_length'
                'sys'
                'maxsize'
                'utf8'
                'Terminal'
                'list'
                'pop'
                'str'
                'token_type'
                'SPECIALSNL'
                'isdisjoint'
                'NLSET'
                'encode'
                'UnicodeEncodeError'
                'any'
                'all_defects'
                '_fold_mime_parameters'
                'as_ew_allowed'
                'syntactic_break'
                'fold'
                'len'
                'linesep'
                '_steal_trailing_WSP_if_exists'
                'append'
                'hasattr'
                '_fold_as_ew'
                'ew_combine_allowed'
                'startswith_fws'
                'insert'
                'join'
            [Var Names]
                'parse_tree'
                'policy'
                'maxlen'
                'encoding'
                'lines'
                'last_ew'
                'wrap_as_ew_blocked'
                'want_encoding'
                'end_ew_not_allowed'
                'parts'
                'part'
                'tstr'
                'charset'
                'encoded_part'
                'newline'
                'newparts'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return string of contents of parse_tree folded according to RFC rules.\n\n    '
                'utf-8'
                'us-ascii'
                ''
                None
                0
                False
                'wrap_as_ew_blocked'
                1
                'ptext'
                [Code]
                    File Name: email/_header_value_parser.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'errors'
                        'UndecodableBytesDefect'
                    [Var Names]
                        '.0'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        9 (to 24)
                        6       STORE_FAST                      1: x
                        8       LOAD_GLOBAL                     0: isinstance
                        10      LOAD_FAST                       1: x
                        12      LOAD_GLOBAL                     1: errors
                        14      LOAD_ATTR                       2: UndecodableBytesDefect
                        16      CALL_FUNCTION                   2
                        18      YIELD_VALUE                     
                        20      POP_TOP                         
                        22      JUMP_ABSOLUTE                   2 (to 4)
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                '_refold_parse_tree.<locals>.<genexpr>'
                'unknown-8bit'
                True
                'mime-parameters'
                (
                    'policy'
                )
                -1
                'encode'
            [Disassembly]
                0       LOAD_FAST                       1: policy
                2       LOAD_ATTR                       0: max_line_length
                4       JUMP_IF_TRUE_OR_POP             5 (to 10)
                6       LOAD_GLOBAL                     1: sys
                8       LOAD_ATTR                       2: maxsize
                10      STORE_FAST                      2: maxlen
                12      LOAD_FAST                       1: policy
                14      LOAD_ATTR                       3: utf8
                16      POP_JUMP_IF_FALSE               11 (to 22)
                18      LOAD_CONST                      1: 'utf-8'
                20      JUMP_FORWARD                    1 (to 24)
                22      LOAD_CONST                      2: 'us-ascii'
                24      STORE_FAST                      3: encoding
                26      LOAD_CONST                      3: ''
                28      BUILD_LIST                      1
                30      STORE_FAST                      4: lines
                32      LOAD_CONST                      4: None
                34      STORE_FAST                      5: last_ew
                36      LOAD_CONST                      5: 0
                38      STORE_FAST                      6: wrap_as_ew_blocked
                40      LOAD_CONST                      6: False
                42      STORE_FAST                      7: want_encoding
                44      LOAD_GLOBAL                     4: Terminal
                46      LOAD_CONST                      3: ''
                48      LOAD_CONST                      7: 'wrap_as_ew_blocked'
                50      CALL_FUNCTION                   2
                52      STORE_FAST                      8: end_ew_not_allowed
                54      LOAD_GLOBAL                     5: list
                56      LOAD_FAST                       0: parse_tree
                58      CALL_FUNCTION                   1
                60      STORE_FAST                      9: parts
                62      LOAD_FAST                       9: parts
                64      POP_JUMP_IF_FALSE               338 (to 676)
                68      LOAD_FAST                       9: parts
                70      LOAD_METHOD                     6: pop
                72      LOAD_CONST                      5: 0
                74      CALL_METHOD                     1
                76      STORE_FAST                      10: part
                78      LOAD_FAST                       10: part
                80      LOAD_FAST                       8: end_ew_not_allowed
                82      IS_OP                           0 (is)
                84      POP_JUMP_IF_FALSE               48 (to 96)
                86      LOAD_FAST                       6: wrap_as_ew_blocked
                88      LOAD_CONST                      8: 1
                90      INPLACE_SUBTRACT                
                92      STORE_FAST                      6: wrap_as_ew_blocked
                94      JUMP_ABSOLUTE                   31 (to 62)
                96      LOAD_GLOBAL                     7: str
                98      LOAD_FAST                       10: part
                100     CALL_FUNCTION                   1
                102     STORE_FAST                      11: tstr
                104     LOAD_FAST                       7: want_encoding
                106     POP_JUMP_IF_TRUE                72 (to 144)
                108     LOAD_FAST                       10: part
                110     LOAD_ATTR                       8: token_type
                112     LOAD_CONST                      9: 'ptext'
                114     COMPARE_OP                      2 (==)
                116     POP_JUMP_IF_FALSE               66 (to 132)
                118     LOAD_GLOBAL                     9: SPECIALSNL
                120     LOAD_METHOD                     10: isdisjoint
                122     LOAD_FAST                       11: tstr
                124     CALL_METHOD                     1
                126     UNARY_NOT                       
                128     STORE_FAST                      7: want_encoding
                130     JUMP_FORWARD                    6 (to 144)
                132     LOAD_GLOBAL                     11: NLSET
                134     LOAD_METHOD                     10: isdisjoint
                136     LOAD_FAST                       11: tstr
                138     CALL_METHOD                     1
                140     UNARY_NOT                       
                142     STORE_FAST                      7: want_encoding
                144     SETUP_FINALLY                   9 (to 164)
                146     LOAD_FAST                       11: tstr
                148     LOAD_METHOD                     12: encode
                150     LOAD_FAST                       3: encoding
                152     CALL_METHOD                     1
                154     POP_TOP                         
                156     LOAD_FAST                       3: encoding
                158     STORE_FAST                      12: charset
                160     POP_BLOCK                       
                162     JUMP_FORWARD                    26 (to 216)
                164     DUP_TOP                         
                166     LOAD_GLOBAL                     13: UnicodeEncodeError
                168     JUMP_IF_NOT_EXC_MATCH           107 (to 214)
                170     POP_TOP                         
                172     POP_TOP                         
                174     POP_TOP                         
                176     LOAD_GLOBAL                     14: any
                178     LOAD_CONST                      10: <CODE> <genexpr>
                180     LOAD_CONST                      11: '_refold_parse_tree.<locals>.<genexpr>'
                182     MAKE_FUNCTION                   0
                184     LOAD_FAST                       10: part
                186     LOAD_ATTR                       15: all_defects
                188     GET_ITER                        
                190     CALL_FUNCTION                   1
                192     CALL_FUNCTION                   1
                194     POP_JUMP_IF_FALSE               101 (to 202)
                196     LOAD_CONST                      12: 'unknown-8bit'
                198     STORE_FAST                      12: charset
                200     JUMP_FORWARD                    2 (to 206)
                202     LOAD_CONST                      1: 'utf-8'
                204     STORE_FAST                      12: charset
                206     LOAD_CONST                      13: True
                208     STORE_FAST                      7: want_encoding
                210     POP_EXCEPT                      
                212     JUMP_FORWARD                    1 (to 216)
                214     RERAISE                         0
                216     LOAD_FAST                       10: part
                218     LOAD_ATTR                       8: token_type
                220     LOAD_CONST                      14: 'mime-parameters'
                222     COMPARE_OP                      2 (==)
                224     POP_JUMP_IF_FALSE               121 (to 242)
                226     LOAD_GLOBAL                     16: _fold_mime_parameters
                228     LOAD_FAST                       10: part
                230     LOAD_FAST                       4: lines
                232     LOAD_FAST                       2: maxlen
                234     LOAD_FAST                       3: encoding
                236     CALL_FUNCTION                   4
                238     POP_TOP                         
                240     JUMP_ABSOLUTE                   31 (to 62)
                242     LOAD_FAST                       7: want_encoding
                244     POP_JUMP_IF_FALSE               209 (to 418)
                246     LOAD_FAST                       6: wrap_as_ew_blocked
                248     POP_JUMP_IF_TRUE                209 (to 418)
                250     LOAD_FAST                       10: part
                252     LOAD_ATTR                       17: as_ew_allowed
                254     POP_JUMP_IF_TRUE                184 (to 368)
                256     LOAD_CONST                      6: False
                258     STORE_FAST                      7: want_encoding
                260     LOAD_CONST                      4: None
                262     STORE_FAST                      5: last_ew
                264     LOAD_FAST                       10: part
                266     LOAD_ATTR                       18: syntactic_break
                268     POP_JUMP_IF_FALSE               184 (to 368)
                270     LOAD_FAST                       10: part
                272     LOAD_ATTR                       19: fold
                274     LOAD_FAST                       1: policy
                276     LOAD_CONST                      15: ('policy',)
                278     CALL_FUNCTION_KW                1
                280     LOAD_CONST                      4: None
                282     LOAD_GLOBAL                     20: len
                284     LOAD_FAST                       1: policy
                286     LOAD_ATTR                       21: linesep
                288     CALL_FUNCTION                   1
                290     UNARY_NEGATIVE                  
                292     BUILD_SLICE                     2
                294     BINARY_SUBSCR                   
                296     STORE_FAST                      13: encoded_part
                298     LOAD_FAST                       1: policy
                300     LOAD_ATTR                       21: linesep
                302     LOAD_FAST                       13: encoded_part
                304     CONTAINS_OP                     1 (not in)
                306     POP_JUMP_IF_FALSE               184 (to 368)
                308     LOAD_GLOBAL                     20: len
                310     LOAD_FAST                       13: encoded_part
                312     CALL_FUNCTION                   1
                314     LOAD_FAST                       2: maxlen
                316     LOAD_GLOBAL                     20: len
                318     LOAD_FAST                       4: lines
                320     LOAD_CONST                      16: -1
                322     BINARY_SUBSCR                   
                324     CALL_FUNCTION                   1
                326     BINARY_SUBTRACT                 
                328     COMPARE_OP                      4 (>)
                330     POP_JUMP_IF_FALSE               175 (to 350)
                332     LOAD_GLOBAL                     22: _steal_trailing_WSP_if_exists
                334     LOAD_FAST                       4: lines
                336     CALL_FUNCTION                   1
                338     STORE_FAST                      14: newline
                340     LOAD_FAST                       4: lines
                342     LOAD_METHOD                     23: append
                344     LOAD_FAST                       14: newline
                346     CALL_METHOD                     1
                348     POP_TOP                         
                350     LOAD_FAST                       4: lines
                352     LOAD_CONST                      16: -1
                354     DUP_TOP_TWO                     
                356     BINARY_SUBSCR                   
                358     LOAD_FAST                       13: encoded_part
                360     INPLACE_ADD                     
                362     ROT_THREE                       
                364     STORE_SUBSCR                    
                366     JUMP_ABSOLUTE                   31 (to 62)
                368     LOAD_GLOBAL                     24: hasattr
                370     LOAD_FAST                       10: part
                372     LOAD_CONST                      17: 'encode'
                374     CALL_FUNCTION                   2
                376     POP_JUMP_IF_TRUE                196 (to 392)
                378     LOAD_GLOBAL                     5: list
                380     LOAD_FAST                       10: part
                382     CALL_FUNCTION                   1
                384     LOAD_FAST                       9: parts
                386     BINARY_ADD                      
                388     STORE_FAST                      9: parts
                390     JUMP_FORWARD                    10 (to 412)
                392     LOAD_GLOBAL                     25: _fold_as_ew
                394     LOAD_FAST                       11: tstr
                396     LOAD_FAST                       4: lines
                398     LOAD_FAST                       2: maxlen
                400     LOAD_FAST                       5: last_ew
                402     LOAD_FAST                       10: part
                404     LOAD_ATTR                       26: ew_combine_allowed
                406     LOAD_FAST                       12: charset
                408     CALL_FUNCTION                   6
                410     STORE_FAST                      5: last_ew
                412     LOAD_CONST                      6: False
                414     STORE_FAST                      7: want_encoding
                416     JUMP_ABSOLUTE                   31 (to 62)
                418     LOAD_GLOBAL                     20: len
                420     LOAD_FAST                       11: tstr
                422     CALL_FUNCTION                   1
                424     LOAD_FAST                       2: maxlen
                426     LOAD_GLOBAL                     20: len
                428     LOAD_FAST                       4: lines
                430     LOAD_CONST                      16: -1
                432     BINARY_SUBSCR                   
                434     CALL_FUNCTION                   1
                436     BINARY_SUBTRACT                 
                438     COMPARE_OP                      1 (<=)
                440     POP_JUMP_IF_FALSE               230 (to 460)
                442     LOAD_FAST                       4: lines
                444     LOAD_CONST                      16: -1
                446     DUP_TOP_TWO                     
                448     BINARY_SUBSCR                   
                450     LOAD_FAST                       11: tstr
                452     INPLACE_ADD                     
                454     ROT_THREE                       
                456     STORE_SUBSCR                    
                458     JUMP_ABSOLUTE                   31 (to 62)
                460     LOAD_FAST                       10: part
                462     LOAD_ATTR                       18: syntactic_break
                464     POP_JUMP_IF_FALSE               264 (to 528)
                468     LOAD_GLOBAL                     20: len
                470     LOAD_FAST                       11: tstr
                472     CALL_FUNCTION                   1
                474     LOAD_CONST                      8: 1
                476     BINARY_ADD                      
                478     LOAD_FAST                       2: maxlen
                480     COMPARE_OP                      1 (<=)
                482     POP_JUMP_IF_FALSE               264 (to 528)
                486     LOAD_GLOBAL                     22: _steal_trailing_WSP_if_exists
                488     LOAD_FAST                       4: lines
                490     CALL_FUNCTION                   1
                492     STORE_FAST                      14: newline
                494     LOAD_FAST                       14: newline
                496     POP_JUMP_IF_TRUE                254 (to 508)
                498     LOAD_FAST                       10: part
                500     LOAD_METHOD                     27: startswith_fws
                502     CALL_METHOD                     0
                504     POP_JUMP_IF_FALSE               264 (to 528)
                508     LOAD_FAST                       4: lines
                510     LOAD_METHOD                     23: append
                512     LOAD_FAST                       14: newline
                514     LOAD_FAST                       11: tstr
                516     BINARY_ADD                      
                518     CALL_METHOD                     1
                520     POP_TOP                         
                522     LOAD_CONST                      4: None
                524     STORE_FAST                      5: last_ew
                526     JUMP_ABSOLUTE                   31 (to 62)
                528     LOAD_GLOBAL                     24: hasattr
                530     LOAD_FAST                       10: part
                532     LOAD_CONST                      17: 'encode'
                534     CALL_FUNCTION                   2
                536     POP_JUMP_IF_TRUE                292 (to 584)
                540     LOAD_GLOBAL                     5: list
                542     LOAD_FAST                       10: part
                544     CALL_FUNCTION                   1
                546     STORE_FAST                      15: newparts
                548     LOAD_FAST                       10: part
                550     LOAD_ATTR                       17: as_ew_allowed
                552     POP_JUMP_IF_TRUE                287 (to 574)
                556     LOAD_FAST                       6: wrap_as_ew_blocked
                558     LOAD_CONST                      8: 1
                560     INPLACE_ADD                     
                562     STORE_FAST                      6: wrap_as_ew_blocked
                564     LOAD_FAST                       15: newparts
                566     LOAD_METHOD                     23: append
                568     LOAD_FAST                       8: end_ew_not_allowed
                570     CALL_METHOD                     1
                572     POP_TOP                         
                574     LOAD_FAST                       15: newparts
                576     LOAD_FAST                       9: parts
                578     BINARY_ADD                      
                580     STORE_FAST                      9: parts
                582     JUMP_ABSOLUTE                   31 (to 62)
                584     LOAD_FAST                       10: part
                586     LOAD_ATTR                       17: as_ew_allowed
                588     POP_JUMP_IF_FALSE               308 (to 616)
                592     LOAD_FAST                       6: wrap_as_ew_blocked
                594     POP_JUMP_IF_TRUE                308 (to 616)
                598     LOAD_FAST                       9: parts
                600     LOAD_METHOD                     28: insert
                602     LOAD_CONST                      5: 0
                604     LOAD_FAST                       10: part
                606     CALL_METHOD                     2
                608     POP_TOP                         
                610     LOAD_CONST                      13: True
                612     STORE_FAST                      7: want_encoding
                614     JUMP_ABSOLUTE                   31 (to 62)
                616     LOAD_GLOBAL                     22: _steal_trailing_WSP_if_exists
                618     LOAD_FAST                       4: lines
                620     CALL_FUNCTION                   1
                622     STORE_FAST                      14: newline
                624     LOAD_FAST                       14: newline
                626     POP_JUMP_IF_TRUE                320 (to 640)
                630     LOAD_FAST                       10: part
                632     LOAD_METHOD                     27: startswith_fws
                634     CALL_METHOD                     0
                636     POP_JUMP_IF_FALSE               328 (to 656)
                640     LOAD_FAST                       4: lines
                642     LOAD_METHOD                     23: append
                644     LOAD_FAST                       14: newline
                646     LOAD_FAST                       11: tstr
                648     BINARY_ADD                      
                650     CALL_METHOD                     1
                652     POP_TOP                         
                654     JUMP_FORWARD                    8 (to 672)
                656     LOAD_FAST                       4: lines
                658     LOAD_CONST                      16: -1
                660     DUP_TOP_TWO                     
                662     BINARY_SUBSCR                   
                664     LOAD_FAST                       11: tstr
                666     INPLACE_ADD                     
                668     ROT_THREE                       
                670     STORE_SUBSCR                    
                672     LOAD_FAST                       9: parts
                674     POP_JUMP_IF_TRUE                34 (to 68)
                676     LOAD_FAST                       1: policy
                678     LOAD_ATTR                       21: linesep
                680     LOAD_METHOD                     29: join
                682     LOAD_FAST                       4: lines
                684     CALL_METHOD                     1
                686     LOAD_FAST                       1: policy
                688     LOAD_ATTR                       21: linesep
                690     BINARY_ADD                      
                692     RETURN_VALUE                    
        '_refold_parse_tree'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: _fold_as_ew
            Arg Count: 6
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 16
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'str'
                'get_unstructured'
                'WSP'
                'len'
                'append'
                '_steal_trailing_WSP_if_exists'
                'errors'
                'HeaderParseError'
                '_ew'
                'encode'
            [Var Names]
                'to_encode'
                'lines'
                'maxlen'
                'last_ew'
                'ew_combine_allowed'
                'charset'
                'leading_wsp'
                'trailing_wsp'
                'new_last_ew'
                'encode_as'
                'chrome_len'
                'remaining_space'
                'text_space'
                'to_encode_word'
                'encoded_word'
                'excess'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Fold string to_encode into lines as encoded word, combining if allowed.\n    Return the new value for last_ew, or None if ew_combine_allowed is False.\n\n    If there is already an encoded word in the last line of lines (indicated by\n    a non-None value for last_ew) and ew_combine_allowed is true, decode the\n    existing ew, combine it with to_encode, and re-encode.  Otherwise, encode\n    to_encode.  In either case, split to_encode as necessary so that the\n    encoded segments fit within maxlen.\n\n    '
                None
                -1
                0
                1
                ''
                'us-ascii'
                'utf-8'
                7
                'max_line_length is too small to fit an encoded word'
                ' '
                (
                    'charset'
                )
            [Disassembly]
                0       LOAD_FAST                       3: last_ew
                2       LOAD_CONST                      1: None
                4       IS_OP                           1 (is not)
                6       POP_JUMP_IF_FALSE               30 (to 60)
                8       LOAD_FAST                       4: ew_combine_allowed
                10      POP_JUMP_IF_FALSE               30 (to 60)
                12      LOAD_GLOBAL                     0: str
                14      LOAD_GLOBAL                     1: get_unstructured
                16      LOAD_FAST                       1: lines
                18      LOAD_CONST                      2: -1
                20      BINARY_SUBSCR                   
                22      LOAD_FAST                       3: last_ew
                24      LOAD_CONST                      1: None
                26      BUILD_SLICE                     2
                28      BINARY_SUBSCR                   
                30      LOAD_FAST                       0: to_encode
                32      BINARY_ADD                      
                34      CALL_FUNCTION                   1
                36      CALL_FUNCTION                   1
                38      STORE_FAST                      0: to_encode
                40      LOAD_FAST                       1: lines
                42      LOAD_CONST                      2: -1
                44      BINARY_SUBSCR                   
                46      LOAD_CONST                      1: None
                48      LOAD_FAST                       3: last_ew
                50      BUILD_SLICE                     2
                52      BINARY_SUBSCR                   
                54      LOAD_FAST                       1: lines
                56      LOAD_CONST                      2: -1
                58      STORE_SUBSCR                    
                60      LOAD_FAST                       0: to_encode
                62      LOAD_CONST                      3: 0
                64      BINARY_SUBSCR                   
                66      LOAD_GLOBAL                     2: WSP
                68      CONTAINS_OP                     0 (in)
                70      POP_JUMP_IF_FALSE               69 (to 138)
                72      LOAD_FAST                       0: to_encode
                74      LOAD_CONST                      3: 0
                76      BINARY_SUBSCR                   
                78      STORE_FAST                      6: leading_wsp
                80      LOAD_FAST                       0: to_encode
                82      LOAD_CONST                      4: 1
                84      LOAD_CONST                      1: None
                86      BUILD_SLICE                     2
                88      BINARY_SUBSCR                   
                90      STORE_FAST                      0: to_encode
                92      LOAD_GLOBAL                     3: len
                94      LOAD_FAST                       1: lines
                96      LOAD_CONST                      2: -1
                98      BINARY_SUBSCR                   
                100     CALL_FUNCTION                   1
                102     LOAD_FAST                       2: maxlen
                104     COMPARE_OP                      2 (==)
                106     POP_JUMP_IF_FALSE               61 (to 122)
                108     LOAD_FAST                       1: lines
                110     LOAD_METHOD                     4: append
                112     LOAD_GLOBAL                     5: _steal_trailing_WSP_if_exists
                114     LOAD_FAST                       1: lines
                116     CALL_FUNCTION                   1
                118     CALL_METHOD                     1
                120     POP_TOP                         
                122     LOAD_FAST                       1: lines
                124     LOAD_CONST                      2: -1
                126     DUP_TOP_TWO                     
                128     BINARY_SUBSCR                   
                130     LOAD_FAST                       6: leading_wsp
                132     INPLACE_ADD                     
                134     ROT_THREE                       
                136     STORE_SUBSCR                    
                138     LOAD_CONST                      5: ''
                140     STORE_FAST                      7: trailing_wsp
                142     LOAD_FAST                       0: to_encode
                144     LOAD_CONST                      2: -1
                146     BINARY_SUBSCR                   
                148     LOAD_GLOBAL                     2: WSP
                150     CONTAINS_OP                     0 (in)
                152     POP_JUMP_IF_FALSE               87 (to 174)
                154     LOAD_FAST                       0: to_encode
                156     LOAD_CONST                      2: -1
                158     BINARY_SUBSCR                   
                160     STORE_FAST                      7: trailing_wsp
                162     LOAD_FAST                       0: to_encode
                164     LOAD_CONST                      1: None
                166     LOAD_CONST                      2: -1
                168     BUILD_SLICE                     2
                170     BINARY_SUBSCR                   
                172     STORE_FAST                      0: to_encode
                174     LOAD_FAST                       3: last_ew
                176     LOAD_CONST                      1: None
                178     IS_OP                           0 (is)
                180     POP_JUMP_IF_FALSE               97 (to 194)
                182     LOAD_GLOBAL                     3: len
                184     LOAD_FAST                       1: lines
                186     LOAD_CONST                      2: -1
                188     BINARY_SUBSCR                   
                190     CALL_FUNCTION                   1
                192     JUMP_FORWARD                    1 (to 196)
                194     LOAD_FAST                       3: last_ew
                196     STORE_FAST                      8: new_last_ew
                198     LOAD_FAST                       5: charset
                200     LOAD_CONST                      6: 'us-ascii'
                202     COMPARE_OP                      2 (==)
                204     POP_JUMP_IF_FALSE               105 (to 210)
                206     LOAD_CONST                      7: 'utf-8'
                208     JUMP_FORWARD                    1 (to 212)
                210     LOAD_FAST                       5: charset
                212     STORE_FAST                      9: encode_as
                214     LOAD_GLOBAL                     3: len
                216     LOAD_FAST                       9: encode_as
                218     CALL_FUNCTION                   1
                220     LOAD_CONST                      8: 7
                222     BINARY_ADD                      
                224     STORE_FAST                      10: chrome_len
                226     LOAD_FAST                       10: chrome_len
                228     LOAD_CONST                      4: 1
                230     BINARY_ADD                      
                232     LOAD_FAST                       2: maxlen
                234     COMPARE_OP                      5 (>=)
                236     POP_JUMP_IF_FALSE               124 (to 248)
                238     LOAD_GLOBAL                     6: errors
                240     LOAD_METHOD                     7: HeaderParseError
                242     LOAD_CONST                      9: 'max_line_length is too small to fit an encoded word'
                244     CALL_METHOD                     1
                246     RAISE_VARARGS                   1
                248     LOAD_FAST                       0: to_encode
                250     POP_JUMP_IF_FALSE               225 (to 450)
                252     LOAD_FAST                       2: maxlen
                254     LOAD_GLOBAL                     3: len
                256     LOAD_FAST                       1: lines
                258     LOAD_CONST                      2: -1
                260     BINARY_SUBSCR                   
                262     CALL_FUNCTION                   1
                264     BINARY_SUBTRACT                 
                266     STORE_FAST                      11: remaining_space
                268     LOAD_FAST                       11: remaining_space
                270     LOAD_FAST                       10: chrome_len
                272     BINARY_SUBTRACT                 
                274     STORE_FAST                      12: text_space
                276     LOAD_FAST                       12: text_space
                278     LOAD_CONST                      3: 0
                280     COMPARE_OP                      1 (<=)
                282     POP_JUMP_IF_FALSE               148 (to 296)
                284     LOAD_FAST                       1: lines
                286     LOAD_METHOD                     4: append
                288     LOAD_CONST                      10: ' '
                290     CALL_METHOD                     1
                292     POP_TOP                         
                294     JUMP_ABSOLUTE                   124 (to 248)
                296     LOAD_FAST                       0: to_encode
                298     LOAD_CONST                      1: None
                300     LOAD_FAST                       12: text_space
                302     BUILD_SLICE                     2
                304     BINARY_SUBSCR                   
                306     STORE_FAST                      13: to_encode_word
                308     LOAD_GLOBAL                     8: _ew
                310     LOAD_ATTR                       9: encode
                312     LOAD_FAST                       13: to_encode_word
                314     LOAD_FAST                       9: encode_as
                316     LOAD_CONST                      11: ('charset',)
                318     CALL_FUNCTION_KW                2
                320     STORE_FAST                      14: encoded_word
                322     LOAD_GLOBAL                     3: len
                324     LOAD_FAST                       14: encoded_word
                326     CALL_FUNCTION                   1
                328     LOAD_FAST                       11: remaining_space
                330     BINARY_SUBTRACT                 
                332     STORE_FAST                      15: excess
                334     LOAD_FAST                       15: excess
                336     LOAD_CONST                      3: 0
                338     COMPARE_OP                      4 (>)
                340     POP_JUMP_IF_FALSE               194 (to 388)
                342     LOAD_FAST                       13: to_encode_word
                344     LOAD_CONST                      1: None
                346     LOAD_CONST                      2: -1
                348     BUILD_SLICE                     2
                350     BINARY_SUBSCR                   
                352     STORE_FAST                      13: to_encode_word
                354     LOAD_GLOBAL                     8: _ew
                356     LOAD_ATTR                       9: encode
                358     LOAD_FAST                       13: to_encode_word
                360     LOAD_FAST                       9: encode_as
                362     LOAD_CONST                      11: ('charset',)
                364     CALL_FUNCTION_KW                2
                366     STORE_FAST                      14: encoded_word
                368     LOAD_GLOBAL                     3: len
                370     LOAD_FAST                       14: encoded_word
                372     CALL_FUNCTION                   1
                374     LOAD_FAST                       11: remaining_space
                376     BINARY_SUBTRACT                 
                378     STORE_FAST                      15: excess
                380     LOAD_FAST                       15: excess
                382     LOAD_CONST                      3: 0
                384     COMPARE_OP                      4 (>)
                386     POP_JUMP_IF_TRUE                171 (to 342)
                388     LOAD_FAST                       1: lines
                390     LOAD_CONST                      2: -1
                392     DUP_TOP_TWO                     
                394     BINARY_SUBSCR                   
                396     LOAD_FAST                       14: encoded_word
                398     INPLACE_ADD                     
                400     ROT_THREE                       
                402     STORE_SUBSCR                    
                404     LOAD_FAST                       0: to_encode
                406     LOAD_GLOBAL                     3: len
                408     LOAD_FAST                       13: to_encode_word
                410     CALL_FUNCTION                   1
                412     LOAD_CONST                      1: None
                414     BUILD_SLICE                     2
                416     BINARY_SUBSCR                   
                418     STORE_FAST                      0: to_encode
                420     LOAD_FAST                       0: to_encode
                422     POP_JUMP_IF_FALSE               223 (to 446)
                424     LOAD_FAST                       1: lines
                426     LOAD_METHOD                     4: append
                428     LOAD_CONST                      10: ' '
                430     CALL_METHOD                     1
                432     POP_TOP                         
                434     LOAD_GLOBAL                     3: len
                436     LOAD_FAST                       1: lines
                438     LOAD_CONST                      2: -1
                440     BINARY_SUBSCR                   
                442     CALL_FUNCTION                   1
                444     STORE_FAST                      8: new_last_ew
                446     LOAD_FAST                       0: to_encode
                448     POP_JUMP_IF_TRUE                126 (to 252)
                450     LOAD_FAST                       1: lines
                452     LOAD_CONST                      2: -1
                454     DUP_TOP_TWO                     
                456     BINARY_SUBSCR                   
                458     LOAD_FAST                       7: trailing_wsp
                460     INPLACE_ADD                     
                462     ROT_THREE                       
                464     STORE_SUBSCR                    
                466     LOAD_FAST                       4: ew_combine_allowed
                468     POP_JUMP_IF_FALSE               237 (to 474)
                470     LOAD_FAST                       8: new_last_ew
                472     RETURN_VALUE                    
                474     LOAD_CONST                      1: None
                476     RETURN_VALUE                    
        '_fold_as_ew'
        [Code]
            File Name: email/_header_value_parser.py
            Object Name: _fold_mime_parameters
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 17
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'params'
                'rstrip'
                'endswith'
                'encode'
                'UnicodeEncodeError'
                'utils'
                '_has_surrogates'
                'urllib'
                'parse'
                'quote'
                'format'
                'quote_string'
                'len'
                'append'
                'str'
            [Var Names]
                'part'
                'lines'
                'maxlen'
                'encoding'
                'name'
                'value'
                'charset'
                'error_handler'
                'encoding_required'
                'encoded_value'
                'tstr'
                'section'
                'extra_chrome'
                'chrome_len'
                'splitpoint'
                'maxchars'
                'partial'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Fold TokenList 'part' into the 'lines' list as mime parameters.\n\n    Using the decoded list of parameters and values, format them according to\n    the RFC rules, including using RFC2231 encoding if the value cannot be\n    expressed in 'encoding' and/or the parameter+value is too long to fit\n    within 'maxlen'.\n\n    "
                -1
                ';'
                'strict'
                False
                True
                'unknown-8bit'
                'surrogateescape'
                'utf-8'
                ''
                (
                    'safe'
                    'errors'
                )
                "{}*={}''{}"
                '{}={}'
                1
                ' '
                2
                0
                "''"
                3
                78
                None
                ' {}*{}*={}{}'
            [Disassembly]
                0       LOAD_FAST                       0: part
                2       LOAD_ATTR                       0: params
                4       GET_ITER                        
                6       FOR_ITER                        229 (to 466)
                8       UNPACK_SEQUENCE                 2
                10      STORE_FAST                      4: name
                12      STORE_FAST                      5: value
                14      LOAD_FAST                       1: lines
                16      LOAD_CONST                      1: -1
                18      BINARY_SUBSCR                   
                20      LOAD_METHOD                     1: rstrip
                22      CALL_METHOD                     0
                24      LOAD_METHOD                     2: endswith
                26      LOAD_CONST                      2: ';'
                28      CALL_METHOD                     1
                30      POP_JUMP_IF_TRUE                24 (to 48)
                32      LOAD_FAST                       1: lines
                34      LOAD_CONST                      1: -1
                36      DUP_TOP_TWO                     
                38      BINARY_SUBSCR                   
                40      LOAD_CONST                      2: ';'
                42      INPLACE_ADD                     
                44      ROT_THREE                       
                46      STORE_SUBSCR                    
                48      LOAD_FAST                       3: encoding
                50      STORE_FAST                      6: charset
                52      LOAD_CONST                      3: 'strict'
                54      STORE_FAST                      7: error_handler
                56      SETUP_FINALLY                   9 (to 76)
                58      LOAD_FAST                       5: value
                60      LOAD_METHOD                     3: encode
                62      LOAD_FAST                       3: encoding
                64      CALL_METHOD                     1
                66      POP_TOP                         
                68      LOAD_CONST                      4: False
                70      STORE_FAST                      8: encoding_required
                72      POP_BLOCK                       
                74      JUMP_FORWARD                    23 (to 122)
                76      DUP_TOP                         
                78      LOAD_GLOBAL                     4: UnicodeEncodeError
                80      JUMP_IF_NOT_EXC_MATCH           60 (to 120)
                82      POP_TOP                         
                84      POP_TOP                         
                86      POP_TOP                         
                88      LOAD_CONST                      5: True
                90      STORE_FAST                      8: encoding_required
                92      LOAD_GLOBAL                     5: utils
                94      LOAD_METHOD                     6: _has_surrogates
                96      LOAD_FAST                       5: value
                98      CALL_METHOD                     1
                100     POP_JUMP_IF_FALSE               56 (to 112)
                102     LOAD_CONST                      6: 'unknown-8bit'
                104     STORE_FAST                      6: charset
                106     LOAD_CONST                      7: 'surrogateescape'
                108     STORE_FAST                      7: error_handler
                110     JUMP_FORWARD                    2 (to 116)
                112     LOAD_CONST                      8: 'utf-8'
                114     STORE_FAST                      6: charset
                116     POP_EXCEPT                      
                118     JUMP_FORWARD                    1 (to 122)
                120     RERAISE                         0
                122     LOAD_FAST                       8: encoding_required
                124     POP_JUMP_IF_FALSE               80 (to 160)
                126     LOAD_GLOBAL                     7: urllib
                128     LOAD_ATTR                       8: parse
                130     LOAD_ATTR                       9: quote
                132     LOAD_FAST                       5: value
                134     LOAD_CONST                      9: ''
                136     LOAD_FAST                       7: error_handler
                138     LOAD_CONST                      10: ('safe', 'errors')
                140     CALL_FUNCTION_KW                3
                142     STORE_FAST                      9: encoded_value
                144     LOAD_CONST                      11: "{}*={}''{}"
                146     LOAD_METHOD                     10: format
                148     LOAD_FAST                       4: name
                150     LOAD_FAST                       6: charset
                152     LOAD_FAST                       9: encoded_value
                154     CALL_METHOD                     3
                156     STORE_FAST                      10: tstr
                158     JUMP_FORWARD                    8 (to 176)
                160     LOAD_CONST                      12: '{}={}'
                162     LOAD_METHOD                     10: format
                164     LOAD_FAST                       4: name
                166     LOAD_GLOBAL                     11: quote_string
                168     LOAD_FAST                       5: value
                170     CALL_FUNCTION                   1
                172     CALL_METHOD                     2
                174     STORE_FAST                      10: tstr
                176     LOAD_GLOBAL                     12: len
                178     LOAD_FAST                       1: lines
                180     LOAD_CONST                      1: -1
                182     BINARY_SUBSCR                   
                184     CALL_FUNCTION                   1
                186     LOAD_GLOBAL                     12: len
                188     LOAD_FAST                       10: tstr
                190     CALL_FUNCTION                   1
                192     BINARY_ADD                      
                194     LOAD_CONST                      13: 1
                196     BINARY_ADD                      
                198     LOAD_FAST                       2: maxlen
                200     COMPARE_OP                      0 (<)
                202     POP_JUMP_IF_FALSE               113 (to 226)
                204     LOAD_FAST                       1: lines
                206     LOAD_CONST                      1: -1
                208     BINARY_SUBSCR                   
                210     LOAD_CONST                      14: ' '
                212     BINARY_ADD                      
                214     LOAD_FAST                       10: tstr
                216     BINARY_ADD                      
                218     LOAD_FAST                       1: lines
                220     LOAD_CONST                      1: -1
                222     STORE_SUBSCR                    
                224     JUMP_ABSOLUTE                   3 (to 6)
                226     LOAD_GLOBAL                     12: len
                228     LOAD_FAST                       10: tstr
                230     CALL_FUNCTION                   1
                232     LOAD_CONST                      15: 2
                234     BINARY_ADD                      
                236     LOAD_FAST                       2: maxlen
                238     COMPARE_OP                      1 (<=)
                240     POP_JUMP_IF_FALSE               129 (to 258)
                242     LOAD_FAST                       1: lines
                244     LOAD_METHOD                     13: append
                246     LOAD_CONST                      14: ' '
                248     LOAD_FAST                       10: tstr
                250     BINARY_ADD                      
                252     CALL_METHOD                     1
                254     POP_TOP                         
                256     JUMP_ABSOLUTE                   3 (to 6)
                258     LOAD_CONST                      16: 0
                260     STORE_FAST                      11: section
                262     LOAD_FAST                       6: charset
                264     LOAD_CONST                      17: "''"
                266     BINARY_ADD                      
                268     STORE_FAST                      12: extra_chrome
                270     LOAD_FAST                       5: value
                272     POP_JUMP_IF_FALSE               232 (to 464)
                274     LOAD_GLOBAL                     12: len
                276     LOAD_FAST                       4: name
                278     CALL_FUNCTION                   1
                280     LOAD_GLOBAL                     12: len
                282     LOAD_GLOBAL                     14: str
                284     LOAD_FAST                       11: section
                286     CALL_FUNCTION                   1
                288     CALL_FUNCTION                   1
                290     BINARY_ADD                      
                292     LOAD_CONST                      18: 3
                294     BINARY_ADD                      
                296     LOAD_GLOBAL                     12: len
                298     LOAD_FAST                       12: extra_chrome
                300     CALL_FUNCTION                   1
                302     BINARY_ADD                      
                304     STORE_FAST                      13: chrome_len
                306     LOAD_FAST                       2: maxlen
                308     LOAD_FAST                       13: chrome_len
                310     LOAD_CONST                      18: 3
                312     BINARY_ADD                      
                314     COMPARE_OP                      1 (<=)
                316     POP_JUMP_IF_FALSE               161 (to 322)
                318     LOAD_CONST                      19: 78
                320     STORE_FAST                      2: maxlen
                322     LOAD_FAST                       2: maxlen
                324     LOAD_FAST                       13: chrome_len
                326     BINARY_SUBTRACT                 
                328     LOAD_CONST                      15: 2
                330     BINARY_SUBTRACT                 
                332     DUP_TOP                         
                334     STORE_FAST                      14: splitpoint
                336     STORE_FAST                      15: maxchars
                338     NOP                             
                340     LOAD_FAST                       5: value
                342     LOAD_CONST                      20: None
                344     LOAD_FAST                       14: splitpoint
                346     BUILD_SLICE                     2
                348     BINARY_SUBSCR                   
                350     STORE_FAST                      16: partial
                352     LOAD_GLOBAL                     7: urllib
                354     LOAD_ATTR                       8: parse
                356     LOAD_ATTR                       9: quote
                358     LOAD_FAST                       16: partial
                360     LOAD_CONST                      9: ''
                362     LOAD_FAST                       7: error_handler
                364     LOAD_CONST                      10: ('safe', 'errors')
                366     CALL_FUNCTION_KW                3
                368     STORE_FAST                      9: encoded_value
                370     LOAD_GLOBAL                     12: len
                372     LOAD_FAST                       9: encoded_value
                374     CALL_FUNCTION                   1
                376     LOAD_FAST                       15: maxchars
                378     COMPARE_OP                      1 (<=)
                380     POP_JUMP_IF_FALSE               192 (to 384)
                382     JUMP_FORWARD                    5 (to 394)
                384     LOAD_FAST                       14: splitpoint
                386     LOAD_CONST                      13: 1
                388     INPLACE_SUBTRACT                
                390     STORE_FAST                      14: splitpoint
                392     JUMP_ABSOLUTE                   170 (to 340)
                394     LOAD_FAST                       1: lines
                396     LOAD_METHOD                     13: append
                398     LOAD_CONST                      21: ' {}*{}*={}{}'
                400     LOAD_METHOD                     10: format
                402     LOAD_FAST                       4: name
                404     LOAD_FAST                       11: section
                406     LOAD_FAST                       12: extra_chrome
                408     LOAD_FAST                       9: encoded_value
                410     CALL_METHOD                     4
                412     CALL_METHOD                     1
                414     POP_TOP                         
                416     LOAD_CONST                      9: ''
                418     STORE_FAST                      12: extra_chrome
                420     LOAD_FAST                       11: section
                422     LOAD_CONST                      13: 1
                424     INPLACE_ADD                     
                426     STORE_FAST                      11: section
                428     LOAD_FAST                       5: value
                430     LOAD_FAST                       14: splitpoint
                432     LOAD_CONST                      20: None
                434     BUILD_SLICE                     2
                436     BINARY_SUBSCR                   
                438     STORE_FAST                      5: value
                440     LOAD_FAST                       5: value
                442     POP_JUMP_IF_FALSE               230 (to 460)
                444     LOAD_FAST                       1: lines
                446     LOAD_CONST                      1: -1
                448     DUP_TOP_TWO                     
                450     BINARY_SUBSCR                   
                452     LOAD_CONST                      2: ';'
                454     INPLACE_ADD                     
                456     ROT_THREE                       
                458     STORE_SUBSCR                    
                460     LOAD_FAST                       5: value
                462     POP_JUMP_IF_TRUE                137 (to 274)
                464     JUMP_ABSOLUTE                   3 (to 6)
                466     LOAD_CONST                      20: None
                468     RETURN_VALUE                    
        '_fold_mime_parameters'
    [Disassembly]
        0       LOAD_CONST                      0: 'Header value parser implementing various email-related RFC parsing rules.\n\nThe parsing methods defined in this module implement various email related\nparsing rules.  Principal among them is RFC 5322, which is the followon\nto RFC 2822 and primarily a clarification of the former.  It also implements\nRFC 2047 encoded word decoding.\n\nRFC 5322 goes to considerable trouble to maintain backward compatibility with\nRFC 822 in the parse phase, while cleaning up the structure on the generation\nphase.  This parser supports correct RFC 5322 generation by tagging white space\nas folding white space only when folding is allowed in the non-obsolete rule\nsets.  Actually, the parser is even more generous when accepting input than RFC\n5322 mandates, following the spirit of Postel\'s Law, which RFC 5322 encourages.\nWhere possible deviations from the standard are annotated on the \'defects\'\nattribute of tokens that deviate.\n\nThe general structure of the parser follows RFC 5322, and uses its terminology\nwhere there is a direct correspondence.  Where the implementation requires a\nsomewhat different structure than that used by the formal grammar, new terms\nthat mimic the closest existing terms are used.  Thus, it really helps to have\na copy of RFC 5322 handy when studying this code.\n\nInput to the parser is a string that has already been unfolded according to\nRFC 5322 rules.  According to the RFC this unfolding is the very first step, and\nthis parser leaves the unfolding step to a higher level message parser, which\nwill have already detected the line breaks that need unfolding while\ndetermining the beginning and end of each header.\n\nThe output of the parser is a TokenList object, which is a list subclass.  A\nTokenList is a recursive data structure.  The terminal nodes of the structure\nare Terminal objects, which are subclasses of str.  These do not correspond\ndirectly to terminal objects in the formal grammar, but are instead more\npractical higher level combinations of true terminals.\n\nAll TokenList and Terminal objects have a \'value\' attribute, which produces the\nsemantically meaningful value of that part of the parse subtree.  The value of\nall whitespace tokens (no matter how many sub-tokens they may contain) is a\nsingle space, as per the RFC rules.  This includes \'CFWS\', which is herein\nincluded in the general class of whitespace tokens.  There is one exception to\nthe rule that whitespace tokens are collapsed into single spaces in values: in\nthe value of a \'bare-quoted-string\' (a quoted-string with no leading or\ntrailing whitespace), any whitespace that appeared between the quotation marks\nis preserved in the returned value.  Note that in all Terminal strings quoted\npairs are turned into their unquoted values.\n\nAll TokenList and Terminal objects also have a string value, which attempts to\nbe a "canonical" representation of the RFC-compliant form of the substring that\nproduced the parsed subtree, including minimal use of quoted pair quoting.\nWhitespace runs are not collapsed.\n\nComment tokens also have a \'content\' attribute providing the string found\nbetween the parens (including any nested comments) with whitespace preserved.\n\nAll TokenList and Terminal objects have a \'defects\' attribute which is a\npossibly empty list all of the defects found while creating the token.  Defects\nmay appear on any token in the tree, and a composite list of all defects in the\nsubtree is available through the \'all_defects\' attribute of any node.  (For\nTerminal notes x.defects == x.all_defects.)\n\nEach object in a parse tree is called a \'token\', and each has a \'token_type\'\nattribute that gives the name from the RFC 5322 grammar that it represents.\nNot all RFC 5322 nodes are produced, and there is one non-RFC 5322 node that\nmay be produced: \'ptext\'.  A \'ptext\' is a string of printable ascii characters.\nIt is returned in place of lists of (ctext/quoted-pair) and\n(qtext/quoted-pair).\n\nXXX: provide complete list of token types.\n'
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: 0
        6       LOAD_CONST                      2: None
        8       IMPORT_NAME                     1: re
        10      STORE_NAME                      1: re
        12      LOAD_CONST                      1: 0
        14      LOAD_CONST                      2: None
        16      IMPORT_NAME                     2: sys
        18      STORE_NAME                      2: sys
        20      LOAD_CONST                      1: 0
        22      LOAD_CONST                      2: None
        24      IMPORT_NAME                     3: urllib
        26      STORE_NAME                      3: urllib
        28      LOAD_CONST                      1: 0
        30      LOAD_CONST                      3: ('hexdigits',)
        32      IMPORT_NAME                     4: string
        34      IMPORT_FROM                     5: hexdigits
        36      STORE_NAME                      5: hexdigits
        38      POP_TOP                         
        40      LOAD_CONST                      1: 0
        42      LOAD_CONST                      4: ('itemgetter',)
        44      IMPORT_NAME                     6: operator
        46      IMPORT_FROM                     7: itemgetter
        48      STORE_NAME                      7: itemgetter
        50      POP_TOP                         
        52      LOAD_CONST                      1: 0
        54      LOAD_CONST                      5: ('_encoded_words',)
        56      IMPORT_NAME                     8: email
        58      IMPORT_FROM                     9: _encoded_words
        60      STORE_NAME                      10: _ew
        62      POP_TOP                         
        64      LOAD_CONST                      1: 0
        66      LOAD_CONST                      6: ('errors',)
        68      IMPORT_NAME                     8: email
        70      IMPORT_FROM                     11: errors
        72      STORE_NAME                      11: errors
        74      POP_TOP                         
        76      LOAD_CONST                      1: 0
        78      LOAD_CONST                      7: ('utils',)
        80      IMPORT_NAME                     8: email
        82      IMPORT_FROM                     12: utils
        84      STORE_NAME                      12: utils
        86      POP_TOP                         
        88      LOAD_NAME                       13: set
        90      LOAD_CONST                      8: ' \t'
        92      CALL_FUNCTION                   1
        94      STORE_NAME                      14: WSP
        96      LOAD_NAME                       14: WSP
        98      LOAD_NAME                       13: set
        100     LOAD_CONST                      9: '('
        102     CALL_FUNCTION                   1
        104     BINARY_OR                       
        106     STORE_NAME                      15: CFWS_LEADER
        108     LOAD_NAME                       13: set
        110     LOAD_CONST                      10: '()<>@,:;.\\"[]'
        112     CALL_FUNCTION                   1
        114     STORE_NAME                      16: SPECIALS
        116     LOAD_NAME                       16: SPECIALS
        118     LOAD_NAME                       14: WSP
        120     BINARY_OR                       
        122     STORE_NAME                      17: ATOM_ENDS
        124     LOAD_NAME                       17: ATOM_ENDS
        126     LOAD_NAME                       13: set
        128     LOAD_CONST                      11: '.'
        130     CALL_FUNCTION                   1
        132     BINARY_SUBTRACT                 
        134     STORE_NAME                      18: DOT_ATOM_ENDS
        136     LOAD_NAME                       16: SPECIALS
        138     LOAD_NAME                       13: set
        140     LOAD_CONST                      12: '."('
        142     CALL_FUNCTION                   1
        144     BINARY_SUBTRACT                 
        146     STORE_NAME                      19: PHRASE_ENDS
        148     LOAD_NAME                       16: SPECIALS
        150     LOAD_NAME                       13: set
        152     LOAD_CONST                      13: '/?='
        154     CALL_FUNCTION                   1
        156     BINARY_OR                       
        158     LOAD_NAME                       13: set
        160     LOAD_CONST                      11: '.'
        162     CALL_FUNCTION                   1
        164     BINARY_SUBTRACT                 
        166     STORE_NAME                      20: TSPECIALS
        168     LOAD_NAME                       20: TSPECIALS
        170     LOAD_NAME                       14: WSP
        172     BINARY_OR                       
        174     STORE_NAME                      21: TOKEN_ENDS
        176     LOAD_NAME                       20: TSPECIALS
        178     LOAD_NAME                       13: set
        180     LOAD_CONST                      14: "*'%"
        182     CALL_FUNCTION                   1
        184     BINARY_OR                       
        186     STORE_NAME                      22: ASPECIALS
        188     LOAD_NAME                       22: ASPECIALS
        190     LOAD_NAME                       14: WSP
        192     BINARY_OR                       
        194     STORE_NAME                      23: ATTRIBUTE_ENDS
        196     LOAD_NAME                       23: ATTRIBUTE_ENDS
        198     LOAD_NAME                       13: set
        200     LOAD_CONST                      15: '%'
        202     CALL_FUNCTION                   1
        204     BINARY_SUBTRACT                 
        206     STORE_NAME                      24: EXTENDED_ATTRIBUTE_ENDS
        208     LOAD_CONST                      16: '\n'
        210     LOAD_CONST                      17: '\r'
        212     BUILD_SET                       2
        214     STORE_NAME                      25: NLSET
        216     LOAD_NAME                       16: SPECIALS
        218     LOAD_NAME                       25: NLSET
        220     BINARY_OR                       
        222     STORE_NAME                      26: SPECIALSNL
        224     LOAD_CONST                      18: <CODE> quote_string
        226     LOAD_CONST                      19: 'quote_string'
        228     MAKE_FUNCTION                   0
        230     STORE_NAME                      27: quote_string
        232     LOAD_NAME                       1: re
        234     LOAD_METHOD                     28: compile
        236     LOAD_CONST                      20: "\n   =\\?            # literal =?\n   [^?]*          # charset\n   \\?             # literal ?\n   [qQbB]         # literal 'q' or 'b', case insensitive\n   \\?             # literal ?\n  .*?             # encoded word\n  \\?=             # literal ?=\n"
        238     LOAD_NAME                       1: re
        240     LOAD_ATTR                       29: VERBOSE
        242     LOAD_NAME                       1: re
        244     LOAD_ATTR                       30: MULTILINE
        246     BINARY_OR                       
        248     CALL_METHOD                     2
        250     STORE_NAME                      31: rfc2047_matcher
        252     LOAD_BUILD_CLASS                
        254     LOAD_CONST                      21: <CODE> TokenList
        256     LOAD_CONST                      22: 'TokenList'
        258     MAKE_FUNCTION                   0
        260     LOAD_CONST                      22: 'TokenList'
        262     LOAD_NAME                       32: list
        264     CALL_FUNCTION                   3
        266     STORE_NAME                      33: TokenList
        268     LOAD_BUILD_CLASS                
        270     LOAD_CONST                      23: <CODE> WhiteSpaceTokenList
        272     LOAD_CONST                      24: 'WhiteSpaceTokenList'
        274     MAKE_FUNCTION                   0
        276     LOAD_CONST                      24: 'WhiteSpaceTokenList'
        278     LOAD_NAME                       33: TokenList
        280     CALL_FUNCTION                   3
        282     STORE_NAME                      34: WhiteSpaceTokenList
        284     LOAD_BUILD_CLASS                
        286     LOAD_CONST                      25: <CODE> UnstructuredTokenList
        288     LOAD_CONST                      26: 'UnstructuredTokenList'
        290     MAKE_FUNCTION                   0
        292     LOAD_CONST                      26: 'UnstructuredTokenList'
        294     LOAD_NAME                       33: TokenList
        296     CALL_FUNCTION                   3
        298     STORE_NAME                      35: UnstructuredTokenList
        300     LOAD_BUILD_CLASS                
        302     LOAD_CONST                      27: <CODE> Phrase
        304     LOAD_CONST                      28: 'Phrase'
        306     MAKE_FUNCTION                   0
        308     LOAD_CONST                      28: 'Phrase'
        310     LOAD_NAME                       33: TokenList
        312     CALL_FUNCTION                   3
        314     STORE_NAME                      36: Phrase
        316     LOAD_BUILD_CLASS                
        318     LOAD_CONST                      29: <CODE> Word
        320     LOAD_CONST                      30: 'Word'
        322     MAKE_FUNCTION                   0
        324     LOAD_CONST                      30: 'Word'
        326     LOAD_NAME                       33: TokenList
        328     CALL_FUNCTION                   3
        330     STORE_NAME                      37: Word
        332     LOAD_BUILD_CLASS                
        334     LOAD_CONST                      31: <CODE> CFWSList
        336     LOAD_CONST                      32: 'CFWSList'
        338     MAKE_FUNCTION                   0
        340     LOAD_CONST                      32: 'CFWSList'
        342     LOAD_NAME                       34: WhiteSpaceTokenList
        344     CALL_FUNCTION                   3
        346     STORE_NAME                      38: CFWSList
        348     LOAD_BUILD_CLASS                
        350     LOAD_CONST                      33: <CODE> Atom
        352     LOAD_CONST                      34: 'Atom'
        354     MAKE_FUNCTION                   0
        356     LOAD_CONST                      34: 'Atom'
        358     LOAD_NAME                       33: TokenList
        360     CALL_FUNCTION                   3
        362     STORE_NAME                      39: Atom
        364     LOAD_BUILD_CLASS                
        366     LOAD_CONST                      35: <CODE> Token
        368     LOAD_CONST                      36: 'Token'
        370     MAKE_FUNCTION                   0
        372     LOAD_CONST                      36: 'Token'
        374     LOAD_NAME                       33: TokenList
        376     CALL_FUNCTION                   3
        378     STORE_NAME                      40: Token
        380     LOAD_BUILD_CLASS                
        382     LOAD_CONST                      37: <CODE> EncodedWord
        384     LOAD_CONST                      38: 'EncodedWord'
        386     MAKE_FUNCTION                   0
        388     LOAD_CONST                      38: 'EncodedWord'
        390     LOAD_NAME                       33: TokenList
        392     CALL_FUNCTION                   3
        394     STORE_NAME                      41: EncodedWord
        396     LOAD_BUILD_CLASS                
        398     LOAD_CONST                      39: <CODE> QuotedString
        400     LOAD_CONST                      40: 'QuotedString'
        402     MAKE_FUNCTION                   0
        404     LOAD_CONST                      40: 'QuotedString'
        406     LOAD_NAME                       33: TokenList
        408     CALL_FUNCTION                   3
        410     STORE_NAME                      42: QuotedString
        412     LOAD_BUILD_CLASS                
        414     LOAD_CONST                      41: <CODE> BareQuotedString
        416     LOAD_CONST                      42: 'BareQuotedString'
        418     MAKE_FUNCTION                   0
        420     LOAD_CONST                      42: 'BareQuotedString'
        422     LOAD_NAME                       42: QuotedString
        424     CALL_FUNCTION                   3
        426     STORE_NAME                      43: BareQuotedString
        428     LOAD_BUILD_CLASS                
        430     LOAD_CONST                      43: <CODE> Comment
        432     LOAD_CONST                      44: 'Comment'
        434     MAKE_FUNCTION                   0
        436     LOAD_CONST                      44: 'Comment'
        438     LOAD_NAME                       34: WhiteSpaceTokenList
        440     CALL_FUNCTION                   3
        442     STORE_NAME                      44: Comment
        444     LOAD_BUILD_CLASS                
        446     LOAD_CONST                      45: <CODE> AddressList
        448     LOAD_CONST                      46: 'AddressList'
        450     MAKE_FUNCTION                   0
        452     LOAD_CONST                      46: 'AddressList'
        454     LOAD_NAME                       33: TokenList
        456     CALL_FUNCTION                   3
        458     STORE_NAME                      45: AddressList
        460     LOAD_BUILD_CLASS                
        462     LOAD_CONST                      47: <CODE> Address
        464     LOAD_CONST                      48: 'Address'
        466     MAKE_FUNCTION                   0
        468     LOAD_CONST                      48: 'Address'
        470     LOAD_NAME                       33: TokenList
        472     CALL_FUNCTION                   3
        474     STORE_NAME                      46: Address
        476     LOAD_BUILD_CLASS                
        478     LOAD_CONST                      49: <CODE> MailboxList
        480     LOAD_CONST                      50: 'MailboxList'
        482     MAKE_FUNCTION                   0
        484     LOAD_CONST                      50: 'MailboxList'
        486     LOAD_NAME                       33: TokenList
        488     CALL_FUNCTION                   3
        490     STORE_NAME                      47: MailboxList
        492     LOAD_BUILD_CLASS                
        494     LOAD_CONST                      51: <CODE> GroupList
        496     LOAD_CONST                      52: 'GroupList'
        498     MAKE_FUNCTION                   0
        500     LOAD_CONST                      52: 'GroupList'
        502     LOAD_NAME                       33: TokenList
        504     CALL_FUNCTION                   3
        506     STORE_NAME                      48: GroupList
        508     LOAD_BUILD_CLASS                
        510     LOAD_CONST                      53: <CODE> Group
        512     LOAD_CONST                      54: 'Group'
        514     MAKE_FUNCTION                   0
        516     LOAD_CONST                      54: 'Group'
        518     LOAD_NAME                       33: TokenList
        520     CALL_FUNCTION                   3
        522     STORE_NAME                      49: Group
        524     LOAD_BUILD_CLASS                
        526     LOAD_CONST                      55: <CODE> NameAddr
        528     LOAD_CONST                      56: 'NameAddr'
        530     MAKE_FUNCTION                   0
        532     LOAD_CONST                      56: 'NameAddr'
        534     LOAD_NAME                       33: TokenList
        536     CALL_FUNCTION                   3
        538     STORE_NAME                      50: NameAddr
        540     LOAD_BUILD_CLASS                
        542     LOAD_CONST                      57: <CODE> AngleAddr
        544     LOAD_CONST                      58: 'AngleAddr'
        546     MAKE_FUNCTION                   0
        548     LOAD_CONST                      58: 'AngleAddr'
        550     LOAD_NAME                       33: TokenList
        552     CALL_FUNCTION                   3
        554     STORE_NAME                      51: AngleAddr
        556     LOAD_BUILD_CLASS                
        558     LOAD_CONST                      59: <CODE> ObsRoute
        560     LOAD_CONST                      60: 'ObsRoute'
        562     MAKE_FUNCTION                   0
        564     LOAD_CONST                      60: 'ObsRoute'
        566     LOAD_NAME                       33: TokenList
        568     CALL_FUNCTION                   3
        570     STORE_NAME                      52: ObsRoute
        572     LOAD_BUILD_CLASS                
        574     LOAD_CONST                      61: <CODE> Mailbox
        576     LOAD_CONST                      62: 'Mailbox'
        578     MAKE_FUNCTION                   0
        580     LOAD_CONST                      62: 'Mailbox'
        582     LOAD_NAME                       33: TokenList
        584     CALL_FUNCTION                   3
        586     STORE_NAME                      53: Mailbox
        588     LOAD_BUILD_CLASS                
        590     LOAD_CONST                      63: <CODE> InvalidMailbox
        592     LOAD_CONST                      64: 'InvalidMailbox'
        594     MAKE_FUNCTION                   0
        596     LOAD_CONST                      64: 'InvalidMailbox'
        598     LOAD_NAME                       33: TokenList
        600     CALL_FUNCTION                   3
        602     STORE_NAME                      54: InvalidMailbox
        604     LOAD_BUILD_CLASS                
        606     LOAD_CONST                      65: <CODE> Domain
        608     LOAD_CONST                      66: 'Domain'
        610     MAKE_FUNCTION                   0
        612     LOAD_CONST                      66: 'Domain'
        614     LOAD_NAME                       33: TokenList
        616     CALL_FUNCTION                   3
        618     STORE_NAME                      55: Domain
        620     LOAD_BUILD_CLASS                
        622     LOAD_CONST                      67: <CODE> DotAtom
        624     LOAD_CONST                      68: 'DotAtom'
        626     MAKE_FUNCTION                   0
        628     LOAD_CONST                      68: 'DotAtom'
        630     LOAD_NAME                       33: TokenList
        632     CALL_FUNCTION                   3
        634     STORE_NAME                      56: DotAtom
        636     LOAD_BUILD_CLASS                
        638     LOAD_CONST                      69: <CODE> DotAtomText
        640     LOAD_CONST                      70: 'DotAtomText'
        642     MAKE_FUNCTION                   0
        644     LOAD_CONST                      70: 'DotAtomText'
        646     LOAD_NAME                       33: TokenList
        648     CALL_FUNCTION                   3
        650     STORE_NAME                      57: DotAtomText
        652     LOAD_BUILD_CLASS                
        654     LOAD_CONST                      71: <CODE> NoFoldLiteral
        656     LOAD_CONST                      72: 'NoFoldLiteral'
        658     MAKE_FUNCTION                   0
        660     LOAD_CONST                      72: 'NoFoldLiteral'
        662     LOAD_NAME                       33: TokenList
        664     CALL_FUNCTION                   3
        666     STORE_NAME                      58: NoFoldLiteral
        668     LOAD_BUILD_CLASS                
        670     LOAD_CONST                      73: <CODE> AddrSpec
        672     LOAD_CONST                      74: 'AddrSpec'
        674     MAKE_FUNCTION                   0
        676     LOAD_CONST                      74: 'AddrSpec'
        678     LOAD_NAME                       33: TokenList
        680     CALL_FUNCTION                   3
        682     STORE_NAME                      59: AddrSpec
        684     LOAD_BUILD_CLASS                
        686     LOAD_CONST                      75: <CODE> ObsLocalPart
        688     LOAD_CONST                      76: 'ObsLocalPart'
        690     MAKE_FUNCTION                   0
        692     LOAD_CONST                      76: 'ObsLocalPart'
        694     LOAD_NAME                       33: TokenList
        696     CALL_FUNCTION                   3
        698     STORE_NAME                      60: ObsLocalPart
        700     LOAD_BUILD_CLASS                
        702     LOAD_CONST                      77: <CODE> DisplayName
        704     LOAD_CONST                      78: 'DisplayName'
        706     MAKE_FUNCTION                   0
        708     LOAD_CONST                      78: 'DisplayName'
        710     LOAD_NAME                       36: Phrase
        712     CALL_FUNCTION                   3
        714     STORE_NAME                      61: DisplayName
        716     LOAD_BUILD_CLASS                
        718     LOAD_CONST                      79: <CODE> LocalPart
        720     LOAD_CONST                      80: 'LocalPart'
        722     MAKE_FUNCTION                   0
        724     LOAD_CONST                      80: 'LocalPart'
        726     LOAD_NAME                       33: TokenList
        728     CALL_FUNCTION                   3
        730     STORE_NAME                      62: LocalPart
        732     LOAD_BUILD_CLASS                
        734     LOAD_CONST                      81: <CODE> DomainLiteral
        736     LOAD_CONST                      82: 'DomainLiteral'
        738     MAKE_FUNCTION                   0
        740     LOAD_CONST                      82: 'DomainLiteral'
        742     LOAD_NAME                       33: TokenList
        744     CALL_FUNCTION                   3
        746     STORE_NAME                      63: DomainLiteral
        748     LOAD_BUILD_CLASS                
        750     LOAD_CONST                      83: <CODE> MIMEVersion
        752     LOAD_CONST                      84: 'MIMEVersion'
        754     MAKE_FUNCTION                   0
        756     LOAD_CONST                      84: 'MIMEVersion'
        758     LOAD_NAME                       33: TokenList
        760     CALL_FUNCTION                   3
        762     STORE_NAME                      64: MIMEVersion
        764     LOAD_BUILD_CLASS                
        766     LOAD_CONST                      85: <CODE> Parameter
        768     LOAD_CONST                      86: 'Parameter'
        770     MAKE_FUNCTION                   0
        772     LOAD_CONST                      86: 'Parameter'
        774     LOAD_NAME                       33: TokenList
        776     CALL_FUNCTION                   3
        778     STORE_NAME                      65: Parameter
        780     LOAD_BUILD_CLASS                
        782     LOAD_CONST                      87: <CODE> InvalidParameter
        784     LOAD_CONST                      88: 'InvalidParameter'
        786     MAKE_FUNCTION                   0
        788     LOAD_CONST                      88: 'InvalidParameter'
        790     LOAD_NAME                       65: Parameter
        792     CALL_FUNCTION                   3
        794     STORE_NAME                      66: InvalidParameter
        796     LOAD_BUILD_CLASS                
        798     LOAD_CONST                      89: <CODE> Attribute
        800     LOAD_CONST                      90: 'Attribute'
        802     MAKE_FUNCTION                   0
        804     LOAD_CONST                      90: 'Attribute'
        806     LOAD_NAME                       33: TokenList
        808     CALL_FUNCTION                   3
        810     STORE_NAME                      67: Attribute
        812     LOAD_BUILD_CLASS                
        814     LOAD_CONST                      91: <CODE> Section
        816     LOAD_CONST                      92: 'Section'
        818     MAKE_FUNCTION                   0
        820     LOAD_CONST                      92: 'Section'
        822     LOAD_NAME                       33: TokenList
        824     CALL_FUNCTION                   3
        826     STORE_NAME                      68: Section
        828     LOAD_BUILD_CLASS                
        830     LOAD_CONST                      93: <CODE> Value
        832     LOAD_CONST                      94: 'Value'
        834     MAKE_FUNCTION                   0
        836     LOAD_CONST                      94: 'Value'
        838     LOAD_NAME                       33: TokenList
        840     CALL_FUNCTION                   3
        842     STORE_NAME                      69: Value
        844     LOAD_BUILD_CLASS                
        846     LOAD_CONST                      95: <CODE> MimeParameters
        848     LOAD_CONST                      96: 'MimeParameters'
        850     MAKE_FUNCTION                   0
        852     LOAD_CONST                      96: 'MimeParameters'
        854     LOAD_NAME                       33: TokenList
        856     CALL_FUNCTION                   3
        858     STORE_NAME                      70: MimeParameters
        860     LOAD_BUILD_CLASS                
        862     LOAD_CONST                      97: <CODE> ParameterizedHeaderValue
        864     LOAD_CONST                      98: 'ParameterizedHeaderValue'
        866     MAKE_FUNCTION                   0
        868     LOAD_CONST                      98: 'ParameterizedHeaderValue'
        870     LOAD_NAME                       33: TokenList
        872     CALL_FUNCTION                   3
        874     STORE_NAME                      71: ParameterizedHeaderValue
        876     LOAD_BUILD_CLASS                
        878     LOAD_CONST                      99: <CODE> ContentType
        880     LOAD_CONST                      100: 'ContentType'
        882     MAKE_FUNCTION                   0
        884     LOAD_CONST                      100: 'ContentType'
        886     LOAD_NAME                       71: ParameterizedHeaderValue
        888     CALL_FUNCTION                   3
        890     STORE_NAME                      72: ContentType
        892     LOAD_BUILD_CLASS                
        894     LOAD_CONST                      101: <CODE> ContentDisposition
        896     LOAD_CONST                      102: 'ContentDisposition'
        898     MAKE_FUNCTION                   0
        900     LOAD_CONST                      102: 'ContentDisposition'
        902     LOAD_NAME                       71: ParameterizedHeaderValue
        904     CALL_FUNCTION                   3
        906     STORE_NAME                      73: ContentDisposition
        908     LOAD_BUILD_CLASS                
        910     LOAD_CONST                      103: <CODE> ContentTransferEncoding
        912     LOAD_CONST                      104: 'ContentTransferEncoding'
        914     MAKE_FUNCTION                   0
        916     LOAD_CONST                      104: 'ContentTransferEncoding'
        918     LOAD_NAME                       33: TokenList
        920     CALL_FUNCTION                   3
        922     STORE_NAME                      74: ContentTransferEncoding
        924     LOAD_BUILD_CLASS                
        926     LOAD_CONST                      105: <CODE> HeaderLabel
        928     LOAD_CONST                      106: 'HeaderLabel'
        930     MAKE_FUNCTION                   0
        932     LOAD_CONST                      106: 'HeaderLabel'
        934     LOAD_NAME                       33: TokenList
        936     CALL_FUNCTION                   3
        938     STORE_NAME                      75: HeaderLabel
        940     LOAD_BUILD_CLASS                
        942     LOAD_CONST                      107: <CODE> MsgID
        944     LOAD_CONST                      108: 'MsgID'
        946     MAKE_FUNCTION                   0
        948     LOAD_CONST                      108: 'MsgID'
        950     LOAD_NAME                       33: TokenList
        952     CALL_FUNCTION                   3
        954     STORE_NAME                      76: MsgID
        956     LOAD_BUILD_CLASS                
        958     LOAD_CONST                      109: <CODE> MessageID
        960     LOAD_CONST                      110: 'MessageID'
        962     MAKE_FUNCTION                   0
        964     LOAD_CONST                      110: 'MessageID'
        966     LOAD_NAME                       76: MsgID
        968     CALL_FUNCTION                   3
        970     STORE_NAME                      77: MessageID
        972     LOAD_BUILD_CLASS                
        974     LOAD_CONST                      111: <CODE> InvalidMessageID
        976     LOAD_CONST                      112: 'InvalidMessageID'
        978     MAKE_FUNCTION                   0
        980     LOAD_CONST                      112: 'InvalidMessageID'
        982     LOAD_NAME                       77: MessageID
        984     CALL_FUNCTION                   3
        986     STORE_NAME                      78: InvalidMessageID
        988     LOAD_BUILD_CLASS                
        990     LOAD_CONST                      113: <CODE> Header
        992     LOAD_CONST                      114: 'Header'
        994     MAKE_FUNCTION                   0
        996     LOAD_CONST                      114: 'Header'
        998     LOAD_NAME                       33: TokenList
        1000    CALL_FUNCTION                   3
        1002    STORE_NAME                      79: Header
        1004    LOAD_BUILD_CLASS                
        1006    LOAD_CONST                      115: <CODE> Terminal
        1008    LOAD_CONST                      116: 'Terminal'
        1010    MAKE_FUNCTION                   0
        1012    LOAD_CONST                      116: 'Terminal'
        1014    LOAD_NAME                       80: str
        1016    CALL_FUNCTION                   3
        1018    STORE_NAME                      81: Terminal
        1020    LOAD_BUILD_CLASS                
        1022    LOAD_CONST                      117: <CODE> WhiteSpaceTerminal
        1024    LOAD_CONST                      118: 'WhiteSpaceTerminal'
        1026    MAKE_FUNCTION                   0
        1028    LOAD_CONST                      118: 'WhiteSpaceTerminal'
        1030    LOAD_NAME                       81: Terminal
        1032    CALL_FUNCTION                   3
        1034    STORE_NAME                      82: WhiteSpaceTerminal
        1036    LOAD_BUILD_CLASS                
        1038    LOAD_CONST                      119: <CODE> ValueTerminal
        1040    LOAD_CONST                      120: 'ValueTerminal'
        1042    MAKE_FUNCTION                   0
        1044    LOAD_CONST                      120: 'ValueTerminal'
        1046    LOAD_NAME                       81: Terminal
        1048    CALL_FUNCTION                   3
        1050    STORE_NAME                      83: ValueTerminal
        1052    LOAD_BUILD_CLASS                
        1054    LOAD_CONST                      121: <CODE> EWWhiteSpaceTerminal
        1056    LOAD_CONST                      122: 'EWWhiteSpaceTerminal'
        1058    MAKE_FUNCTION                   0
        1060    LOAD_CONST                      122: 'EWWhiteSpaceTerminal'
        1062    LOAD_NAME                       82: WhiteSpaceTerminal
        1064    CALL_FUNCTION                   3
        1066    STORE_NAME                      84: EWWhiteSpaceTerminal
        1068    LOAD_BUILD_CLASS                
        1070    LOAD_CONST                      123: <CODE> _InvalidEwError
        1072    LOAD_CONST                      124: '_InvalidEwError'
        1074    MAKE_FUNCTION                   0
        1076    LOAD_CONST                      124: '_InvalidEwError'
        1078    LOAD_NAME                       11: errors
        1080    LOAD_ATTR                       85: HeaderParseError
        1082    CALL_FUNCTION                   3
        1084    STORE_NAME                      86: _InvalidEwError
        1086    LOAD_NAME                       83: ValueTerminal
        1088    LOAD_CONST                      11: '.'
        1090    LOAD_CONST                      125: 'dot'
        1092    CALL_FUNCTION                   2
        1094    STORE_NAME                      87: DOT
        1096    LOAD_NAME                       83: ValueTerminal
        1098    LOAD_CONST                      126: ','
        1100    LOAD_CONST                      127: 'list-separator'
        1102    CALL_FUNCTION                   2
        1104    STORE_NAME                      88: ListSeparator
        1106    LOAD_NAME                       83: ValueTerminal
        1108    LOAD_CONST                      128: '@'
        1110    LOAD_CONST                      129: 'route-component-marker'
        1112    CALL_FUNCTION                   2
        1114    STORE_NAME                      89: RouteComponentMarker
        1116    LOAD_NAME                       1: re
        1118    LOAD_METHOD                     28: compile
        1120    LOAD_CONST                      130: '([{}]+)'
        1122    LOAD_METHOD                     90: format
        1124    LOAD_CONST                      131: ''
        1126    LOAD_METHOD                     91: join
        1128    LOAD_NAME                       14: WSP
        1130    CALL_METHOD                     1
        1132    CALL_METHOD                     1
        1134    CALL_METHOD                     1
        1136    LOAD_ATTR                       92: split
        1138    STORE_NAME                      93: _wsp_splitter
        1140    LOAD_NAME                       1: re
        1142    LOAD_METHOD                     28: compile
        1144    LOAD_CONST                      132: '[^{}]+'
        1146    LOAD_METHOD                     90: format
        1148    LOAD_NAME                       1: re
        1150    LOAD_METHOD                     94: escape
        1152    LOAD_CONST                      131: ''
        1154    LOAD_METHOD                     91: join
        1156    LOAD_NAME                       17: ATOM_ENDS
        1158    CALL_METHOD                     1
        1160    CALL_METHOD                     1
        1162    CALL_METHOD                     1
        1164    CALL_METHOD                     1
        1166    LOAD_ATTR                       95: match
        1168    STORE_NAME                      96: _non_atom_end_matcher
        1170    LOAD_NAME                       1: re
        1172    LOAD_METHOD                     28: compile
        1174    LOAD_CONST                      133: '[\\x00-\\x20\\x7F]'
        1176    CALL_METHOD                     1
        1178    LOAD_ATTR                       97: findall
        1180    STORE_NAME                      98: _non_printable_finder
        1182    LOAD_NAME                       1: re
        1184    LOAD_METHOD                     28: compile
        1186    LOAD_CONST                      132: '[^{}]+'
        1188    LOAD_METHOD                     90: format
        1190    LOAD_NAME                       1: re
        1192    LOAD_METHOD                     94: escape
        1194    LOAD_CONST                      131: ''
        1196    LOAD_METHOD                     91: join
        1198    LOAD_NAME                       21: TOKEN_ENDS
        1200    CALL_METHOD                     1
        1202    CALL_METHOD                     1
        1204    CALL_METHOD                     1
        1206    CALL_METHOD                     1
        1208    LOAD_ATTR                       95: match
        1210    STORE_NAME                      99: _non_token_end_matcher
        1212    LOAD_NAME                       1: re
        1214    LOAD_METHOD                     28: compile
        1216    LOAD_CONST                      132: '[^{}]+'
        1218    LOAD_METHOD                     90: format
        1220    LOAD_NAME                       1: re
        1222    LOAD_METHOD                     94: escape
        1224    LOAD_CONST                      131: ''
        1226    LOAD_METHOD                     91: join
        1228    LOAD_NAME                       23: ATTRIBUTE_ENDS
        1230    CALL_METHOD                     1
        1232    CALL_METHOD                     1
        1234    CALL_METHOD                     1
        1236    CALL_METHOD                     1
        1238    LOAD_ATTR                       95: match
        1240    STORE_NAME                      100: _non_attribute_end_matcher
        1242    LOAD_NAME                       1: re
        1244    LOAD_METHOD                     28: compile
        1246    LOAD_CONST                      132: '[^{}]+'
        1248    LOAD_METHOD                     90: format
        1250    LOAD_NAME                       1: re
        1252    LOAD_METHOD                     94: escape
        1254    LOAD_CONST                      131: ''
        1256    LOAD_METHOD                     91: join
        1258    LOAD_NAME                       24: EXTENDED_ATTRIBUTE_ENDS
        1260    CALL_METHOD                     1
        1262    CALL_METHOD                     1
        1264    CALL_METHOD                     1
        1266    CALL_METHOD                     1
        1268    LOAD_ATTR                       95: match
        1270    STORE_NAME                      101: _non_extended_attribute_end_matcher
        1272    LOAD_CONST                      134: <CODE> _validate_xtext
        1274    LOAD_CONST                      135: '_validate_xtext'
        1276    MAKE_FUNCTION                   0
        1278    STORE_NAME                      102: _validate_xtext
        1280    LOAD_CONST                      136: <CODE> _get_ptext_to_endchars
        1282    LOAD_CONST                      137: '_get_ptext_to_endchars'
        1284    MAKE_FUNCTION                   0
        1286    STORE_NAME                      103: _get_ptext_to_endchars
        1288    LOAD_CONST                      138: <CODE> get_fws
        1290    LOAD_CONST                      139: 'get_fws'
        1292    MAKE_FUNCTION                   0
        1294    STORE_NAME                      104: get_fws
        1296    LOAD_CONST                      140: <CODE> get_encoded_word
        1298    LOAD_CONST                      141: 'get_encoded_word'
        1300    MAKE_FUNCTION                   0
        1302    STORE_NAME                      105: get_encoded_word
        1304    LOAD_CONST                      142: <CODE> get_unstructured
        1306    LOAD_CONST                      143: 'get_unstructured'
        1308    MAKE_FUNCTION                   0
        1310    STORE_NAME                      106: get_unstructured
        1312    LOAD_CONST                      144: <CODE> get_qp_ctext
        1314    LOAD_CONST                      145: 'get_qp_ctext'
        1316    MAKE_FUNCTION                   0
        1318    STORE_NAME                      107: get_qp_ctext
        1320    LOAD_CONST                      146: <CODE> get_qcontent
        1322    LOAD_CONST                      147: 'get_qcontent'
        1324    MAKE_FUNCTION                   0
        1326    STORE_NAME                      108: get_qcontent
        1328    LOAD_CONST                      148: <CODE> get_atext
        1330    LOAD_CONST                      149: 'get_atext'
        1332    MAKE_FUNCTION                   0
        1334    STORE_NAME                      109: get_atext
        1336    LOAD_CONST                      150: <CODE> get_bare_quoted_string
        1338    LOAD_CONST                      151: 'get_bare_quoted_string'
        1340    MAKE_FUNCTION                   0
        1342    STORE_NAME                      110: get_bare_quoted_string
        1344    LOAD_CONST                      152: <CODE> get_comment
        1346    LOAD_CONST                      153: 'get_comment'
        1348    MAKE_FUNCTION                   0
        1350    STORE_NAME                      111: get_comment
        1352    LOAD_CONST                      154: <CODE> get_cfws
        1354    LOAD_CONST                      155: 'get_cfws'
        1356    MAKE_FUNCTION                   0
        1358    STORE_NAME                      112: get_cfws
        1360    LOAD_CONST                      156: <CODE> get_quoted_string
        1362    LOAD_CONST                      157: 'get_quoted_string'
        1364    MAKE_FUNCTION                   0
        1366    STORE_NAME                      113: get_quoted_string
        1368    LOAD_CONST                      158: <CODE> get_atom
        1370    LOAD_CONST                      159: 'get_atom'
        1372    MAKE_FUNCTION                   0
        1374    STORE_NAME                      114: get_atom
        1376    LOAD_CONST                      160: <CODE> get_dot_atom_text
        1378    LOAD_CONST                      161: 'get_dot_atom_text'
        1380    MAKE_FUNCTION                   0
        1382    STORE_NAME                      115: get_dot_atom_text
        1384    LOAD_CONST                      162: <CODE> get_dot_atom
        1386    LOAD_CONST                      163: 'get_dot_atom'
        1388    MAKE_FUNCTION                   0
        1390    STORE_NAME                      116: get_dot_atom
        1392    LOAD_CONST                      164: <CODE> get_word
        1394    LOAD_CONST                      165: 'get_word'
        1396    MAKE_FUNCTION                   0
        1398    STORE_NAME                      117: get_word
        1400    LOAD_CONST                      166: <CODE> get_phrase
        1402    LOAD_CONST                      167: 'get_phrase'
        1404    MAKE_FUNCTION                   0
        1406    STORE_NAME                      118: get_phrase
        1408    LOAD_CONST                      168: <CODE> get_local_part
        1410    LOAD_CONST                      169: 'get_local_part'
        1412    MAKE_FUNCTION                   0
        1414    STORE_NAME                      119: get_local_part
        1416    LOAD_CONST                      170: <CODE> get_obs_local_part
        1418    LOAD_CONST                      171: 'get_obs_local_part'
        1420    MAKE_FUNCTION                   0
        1422    STORE_NAME                      120: get_obs_local_part
        1424    LOAD_CONST                      172: <CODE> get_dtext
        1426    LOAD_CONST                      173: 'get_dtext'
        1428    MAKE_FUNCTION                   0
        1430    STORE_NAME                      121: get_dtext
        1432    LOAD_CONST                      174: <CODE> _check_for_early_dl_end
        1434    LOAD_CONST                      175: '_check_for_early_dl_end'
        1436    MAKE_FUNCTION                   0
        1438    STORE_NAME                      122: _check_for_early_dl_end
        1440    LOAD_CONST                      176: <CODE> get_domain_literal
        1442    LOAD_CONST                      177: 'get_domain_literal'
        1444    MAKE_FUNCTION                   0
        1446    STORE_NAME                      123: get_domain_literal
        1448    LOAD_CONST                      178: <CODE> get_domain
        1450    LOAD_CONST                      179: 'get_domain'
        1452    MAKE_FUNCTION                   0
        1454    STORE_NAME                      124: get_domain
        1456    LOAD_CONST                      180: <CODE> get_addr_spec
        1458    LOAD_CONST                      181: 'get_addr_spec'
        1460    MAKE_FUNCTION                   0
        1462    STORE_NAME                      125: get_addr_spec
        1464    LOAD_CONST                      182: <CODE> get_obs_route
        1466    LOAD_CONST                      183: 'get_obs_route'
        1468    MAKE_FUNCTION                   0
        1470    STORE_NAME                      126: get_obs_route
        1472    LOAD_CONST                      184: <CODE> get_angle_addr
        1474    LOAD_CONST                      185: 'get_angle_addr'
        1476    MAKE_FUNCTION                   0
        1478    STORE_NAME                      127: get_angle_addr
        1480    LOAD_CONST                      186: <CODE> get_display_name
        1482    LOAD_CONST                      187: 'get_display_name'
        1484    MAKE_FUNCTION                   0
        1486    STORE_NAME                      128: get_display_name
        1488    LOAD_CONST                      188: <CODE> get_name_addr
        1490    LOAD_CONST                      189: 'get_name_addr'
        1492    MAKE_FUNCTION                   0
        1494    STORE_NAME                      129: get_name_addr
        1496    LOAD_CONST                      190: <CODE> get_mailbox
        1498    LOAD_CONST                      191: 'get_mailbox'
        1500    MAKE_FUNCTION                   0
        1502    STORE_NAME                      130: get_mailbox
        1504    LOAD_CONST                      192: <CODE> get_invalid_mailbox
        1506    LOAD_CONST                      193: 'get_invalid_mailbox'
        1508    MAKE_FUNCTION                   0
        1510    STORE_NAME                      131: get_invalid_mailbox
        1512    LOAD_CONST                      194: <CODE> get_mailbox_list
        1514    LOAD_CONST                      195: 'get_mailbox_list'
        1516    MAKE_FUNCTION                   0
        1518    STORE_NAME                      132: get_mailbox_list
        1520    LOAD_CONST                      196: <CODE> get_group_list
        1522    LOAD_CONST                      197: 'get_group_list'
        1524    MAKE_FUNCTION                   0
        1526    STORE_NAME                      133: get_group_list
        1528    LOAD_CONST                      198: <CODE> get_group
        1530    LOAD_CONST                      199: 'get_group'
        1532    MAKE_FUNCTION                   0
        1534    STORE_NAME                      134: get_group
        1536    LOAD_CONST                      200: <CODE> get_address
        1538    LOAD_CONST                      201: 'get_address'
        1540    MAKE_FUNCTION                   0
        1542    STORE_NAME                      135: get_address
        1544    LOAD_CONST                      202: <CODE> get_address_list
        1546    LOAD_CONST                      203: 'get_address_list'
        1548    MAKE_FUNCTION                   0
        1550    STORE_NAME                      136: get_address_list
        1552    LOAD_CONST                      204: <CODE> get_no_fold_literal
        1554    LOAD_CONST                      205: 'get_no_fold_literal'
        1556    MAKE_FUNCTION                   0
        1558    STORE_NAME                      137: get_no_fold_literal
        1560    LOAD_CONST                      206: <CODE> get_msg_id
        1562    LOAD_CONST                      207: 'get_msg_id'
        1564    MAKE_FUNCTION                   0
        1566    STORE_NAME                      138: get_msg_id
        1568    LOAD_CONST                      208: <CODE> parse_message_id
        1570    LOAD_CONST                      209: 'parse_message_id'
        1572    MAKE_FUNCTION                   0
        1574    STORE_NAME                      139: parse_message_id
        1576    LOAD_CONST                      210: <CODE> parse_mime_version
        1578    LOAD_CONST                      211: 'parse_mime_version'
        1580    MAKE_FUNCTION                   0
        1582    STORE_NAME                      140: parse_mime_version
        1584    LOAD_CONST                      212: <CODE> get_invalid_parameter
        1586    LOAD_CONST                      213: 'get_invalid_parameter'
        1588    MAKE_FUNCTION                   0
        1590    STORE_NAME                      141: get_invalid_parameter
        1592    LOAD_CONST                      214: <CODE> get_ttext
        1594    LOAD_CONST                      215: 'get_ttext'
        1596    MAKE_FUNCTION                   0
        1598    STORE_NAME                      142: get_ttext
        1600    LOAD_CONST                      216: <CODE> get_token
        1602    LOAD_CONST                      217: 'get_token'
        1604    MAKE_FUNCTION                   0
        1606    STORE_NAME                      143: get_token
        1608    LOAD_CONST                      218: <CODE> get_attrtext
        1610    LOAD_CONST                      219: 'get_attrtext'
        1612    MAKE_FUNCTION                   0
        1614    STORE_NAME                      144: get_attrtext
        1616    LOAD_CONST                      220: <CODE> get_attribute
        1618    LOAD_CONST                      221: 'get_attribute'
        1620    MAKE_FUNCTION                   0
        1622    STORE_NAME                      145: get_attribute
        1624    LOAD_CONST                      222: <CODE> get_extended_attrtext
        1626    LOAD_CONST                      223: 'get_extended_attrtext'
        1628    MAKE_FUNCTION                   0
        1630    STORE_NAME                      146: get_extended_attrtext
        1632    LOAD_CONST                      224: <CODE> get_extended_attribute
        1634    LOAD_CONST                      225: 'get_extended_attribute'
        1636    MAKE_FUNCTION                   0
        1638    STORE_NAME                      147: get_extended_attribute
        1640    LOAD_CONST                      226: <CODE> get_section
        1642    LOAD_CONST                      227: 'get_section'
        1644    MAKE_FUNCTION                   0
        1646    STORE_NAME                      148: get_section
        1648    LOAD_CONST                      228: <CODE> get_value
        1650    LOAD_CONST                      229: 'get_value'
        1652    MAKE_FUNCTION                   0
        1654    STORE_NAME                      149: get_value
        1656    LOAD_CONST                      230: <CODE> get_parameter
        1658    LOAD_CONST                      231: 'get_parameter'
        1660    MAKE_FUNCTION                   0
        1662    STORE_NAME                      150: get_parameter
        1664    LOAD_CONST                      232: <CODE> parse_mime_parameters
        1666    LOAD_CONST                      233: 'parse_mime_parameters'
        1668    MAKE_FUNCTION                   0
        1670    STORE_NAME                      151: parse_mime_parameters
        1672    LOAD_CONST                      234: <CODE> _find_mime_parameters
        1674    LOAD_CONST                      235: '_find_mime_parameters'
        1676    MAKE_FUNCTION                   0
        1678    STORE_NAME                      152: _find_mime_parameters
        1680    LOAD_CONST                      236: <CODE> parse_content_type_header
        1682    LOAD_CONST                      237: 'parse_content_type_header'
        1684    MAKE_FUNCTION                   0
        1686    STORE_NAME                      153: parse_content_type_header
        1688    LOAD_CONST                      238: <CODE> parse_content_disposition_header
        1690    LOAD_CONST                      239: 'parse_content_disposition_header'
        1692    MAKE_FUNCTION                   0
        1694    STORE_NAME                      154: parse_content_disposition_header
        1696    LOAD_CONST                      240: <CODE> parse_content_transfer_encoding_header
        1698    LOAD_CONST                      241: 'parse_content_transfer_encoding_header'
        1700    MAKE_FUNCTION                   0
        1702    STORE_NAME                      155: parse_content_transfer_encoding_header
        1704    LOAD_CONST                      242: <CODE> _steal_trailing_WSP_if_exists
        1706    LOAD_CONST                      243: '_steal_trailing_WSP_if_exists'
        1708    MAKE_FUNCTION                   0
        1710    STORE_NAME                      156: _steal_trailing_WSP_if_exists
        1712    LOAD_CONST                      244: <CODE> _refold_parse_tree
        1714    LOAD_CONST                      245: '_refold_parse_tree'
        1716    MAKE_FUNCTION                   0
        1718    STORE_NAME                      157: _refold_parse_tree
        1720    LOAD_CONST                      246: <CODE> _fold_as_ew
        1722    LOAD_CONST                      247: '_fold_as_ew'
        1724    MAKE_FUNCTION                   0
        1726    STORE_NAME                      158: _fold_as_ew
        1728    LOAD_CONST                      248: <CODE> _fold_mime_parameters
        1730    LOAD_CONST                      249: '_fold_mime_parameters'
        1732    MAKE_FUNCTION                   0
        1734    STORE_NAME                      159: _fold_mime_parameters
        1736    LOAD_CONST                      2: None
        1738    RETURN_VALUE                    
