{
  "zipfile": [],
  "shutil": [],
  "tempfile": [],
  "translate": [
    {
      "name": "__init__",
      "args": "self",
      "signature": "def __init__(self):",
      "docstring": ""
    },
    {
      "name": "get_lang",
      "args": "self",
      "signature": "def get_lang(self):",
      "docstring": ""
    }
  ],
  "dis": [
    {
      "name": "_try_compile",
      "args": "source, name",
      "signature": "def _try_compile(source, name):",
      "docstring": ""
    },
    {
      "name": "dis",
      "args": "x = None, *, file, depth",
      "signature": "def dis(x = None, *, file, depth):",
      "docstring": ""
    },
    {
      "name": "distb",
      "args": "tb = None, *, file",
      "signature": "def distb(tb = None, *, file):",
      "docstring": ""
    },
    {
      "name": "pretty_flags",
      "args": "flags",
      "signature": "def pretty_flags(flags):",
      "docstring": ""
    },
    {
      "name": "_get_code_object",
      "args": "x",
      "signature": "def _get_code_object(x):",
      "docstring": ""
    },
    {
      "name": "code_info",
      "args": "x",
      "signature": "def code_info(x):",
      "docstring": ""
    },
    {
      "name": "_format_code_info",
      "args": "co",
      "signature": "def _format_code_info(co):",
      "docstring": ""
    },
    {
      "name": "show_code",
      "args": "co = None, *, file",
      "signature": "def show_code(co = None, *, file):",
      "docstring": ""
    },
    {
      "name": "get_instructions",
      "args": "x = None, *, first_line",
      "signature": "def get_instructions(x = None, *, first_line):",
      "docstring": ""
    },
    {
      "name": "_get_const_info",
      "args": "const_index, const_list",
      "signature": "def _get_const_info(const_index, const_list):",
      "docstring": ""
    },
    {
      "name": "_get_name_info",
      "args": "name_index, name_list",
      "signature": "def _get_name_info(name_index, name_list):",
      "docstring": ""
    },
    {
      "name": "_disassemble_recursive",
      "args": "co = None, *, file, depth",
      "signature": "def _disassemble_recursive(co = None, *, file, depth):",
      "docstring": ""
    },
    {
      "name": "_disassemble_str",
      "args": "source, **kwargs",
      "signature": "def _disassemble_str(source, **kwargs):",
      "docstring": ""
    },
    {
      "name": "_unpack_opargs",
      "args": "code",
      "signature": "def _unpack_opargs(code):",
      "docstring": ""
    },
    {
      "name": "findlabels",
      "args": "code",
      "signature": "def findlabels(code):",
      "docstring": ""
    },
    {
      "name": "findlinestarts",
      "args": "code",
      "signature": "def findlinestarts(code):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self = None, x = {\n        'first_line': None,\n        'current_offset': None }, *, first_line, current_offset",
      "signature": "def __init__(self = None, x = {\n        'first_line': None,\n        'current_offset': None }, *, first_line, current_offset):",
      "docstring": ""
    },
    {
      "name": "__iter__",
      "args": "self",
      "signature": "def __iter__(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "from_traceback",
      "args": "cls, tb",
      "signature": "def from_traceback(cls, tb):",
      "docstring": ""
    },
    {
      "name": "info",
      "args": "self",
      "signature": "def info(self):",
      "docstring": ""
    },
    {
      "name": "dis",
      "args": "self",
      "signature": "def dis(self):",
      "docstring": ""
    },
    {
      "name": "_test",
      "args": "",
      "signature": "def _test():",
      "docstring": ""
    }
  ],
  "token": [],
  "signal": [
    {
      "name": "_int_to_enum",
      "args": "value, enum_klass",
      "signature": "def _int_to_enum(value, enum_klass):",
      "docstring": "Convert a numeric value to an IntEnum member.\n    If it's not a known member, return the numeric value itself."
    },
    {
      "name": "_enum_to_int",
      "args": "value",
      "signature": "def _enum_to_int(value):",
      "docstring": "Convert an IntEnum member to a numeric value.\n    If it's not an IntEnum member return the value itself."
    },
    {
      "name": "_wraps",
      "args": "wrapped",
      "signature": "def _wraps(wrapped):",
      "docstring": ""
    },
    {
      "name": "decorator",
      "args": "wrapper = None",
      "signature": "def decorator(wrapper = None):",
      "docstring": ""
    },
    {
      "name": "signal",
      "args": "signalnum, handler",
      "signature": "def signal(signalnum, handler):",
      "docstring": ""
    },
    {
      "name": "getsignal",
      "args": "signalnum",
      "signature": "def getsignal(signalnum):",
      "docstring": ""
    },
    {
      "name": "pthread_sigmask",
      "args": "how, mask",
      "signature": "def pthread_sigmask(how, mask):",
      "docstring": ""
    },
    {
      "name": "sigpending",
      "args": "",
      "signature": "def sigpending():",
      "docstring": ""
    },
    {
      "name": "sigwait",
      "args": "sigset",
      "signature": "def sigwait(sigset):",
      "docstring": ""
    },
    {
      "name": "valid_signals",
      "args": "",
      "signature": "def valid_signals():",
      "docstring": ""
    }
  ],
  "opcode": [],
  "fnmatch": [
    {
      "name": "fnmatch",
      "args": "name, pat",
      "signature": "def fnmatch(name, pat):",
      "docstring": ""
    },
    {
      "name": "_compile_pattern",
      "args": "pat",
      "signature": "def _compile_pattern(pat):",
      "docstring": ""
    },
    {
      "name": "filter",
      "args": "names, pat",
      "signature": "def filter(names, pat):",
      "docstring": ""
    },
    {
      "name": "fnmatchcase",
      "args": "name, pat",
      "signature": "def fnmatchcase(name, pat):",
      "docstring": "Test whether FILENAME matches PATTERN, including case.\n\n    This is a version of fnmatch() which doesn't case-normalize\n    its arguments."
    },
    {
      "name": "translate",
      "args": "pat",
      "signature": "def translate(pat):",
      "docstring": ""
    }
  ],
  ".py": [
    {
      "name": "parsedate_tz",
      "args": "data",
      "signature": "def parsedate_tz(data):",
      "docstring": ""
    },
    {
      "name": "_parsedate_tz",
      "args": "data",
      "signature": "def _parsedate_tz(data):",
      "docstring": ""
    },
    {
      "name": "parsedate",
      "args": "data",
      "signature": "def parsedate(data):",
      "docstring": ""
    },
    {
      "name": "mktime_tz",
      "args": "data",
      "signature": "def mktime_tz(data):",
      "docstring": ""
    },
    {
      "name": "quote",
      "args": "str",
      "signature": "def quote(str):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, field",
      "signature": "def __init__(self, field):",
      "docstring": "Initialize a new instance.\n\n        `field' is an unparsed address header field, containing\n        one or more addresses."
    },
    {
      "name": "gotonext",
      "args": "self",
      "signature": "def gotonext(self):",
      "docstring": ""
    },
    {
      "name": "getaddrlist",
      "args": "self",
      "signature": "def getaddrlist(self):",
      "docstring": ""
    },
    {
      "name": "getaddress",
      "args": "self",
      "signature": "def getaddress(self):",
      "docstring": ""
    },
    {
      "name": "getrouteaddr",
      "args": "self",
      "signature": "def getrouteaddr(self):",
      "docstring": ""
    },
    {
      "name": "getaddrspec",
      "args": "self",
      "signature": "def getaddrspec(self):",
      "docstring": ""
    },
    {
      "name": "getdomain",
      "args": "self",
      "signature": "def getdomain(self):",
      "docstring": ""
    },
    {
      "name": "getquote",
      "args": "self",
      "signature": "def getquote(self):",
      "docstring": "Get a quote-delimited fragment from self's field."
    },
    {
      "name": "getcomment",
      "args": "self",
      "signature": "def getcomment(self):",
      "docstring": "Get a parenthesis-delimited fragment from self's field."
    },
    {
      "name": "getdomainliteral",
      "args": "self",
      "signature": "def getdomainliteral(self):",
      "docstring": ""
    },
    {
      "name": "getphraselist",
      "args": "self",
      "signature": "def getphraselist(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, field",
      "signature": "def __init__(self, field):",
      "docstring": ""
    },
    {
      "name": "__len__",
      "args": "self",
      "signature": "def __len__(self):",
      "docstring": ""
    },
    {
      "name": "__add__",
      "args": "self, other",
      "signature": "def __add__(self, other):",
      "docstring": ""
    },
    {
      "name": "__iadd__",
      "args": "self, other",
      "signature": "def __iadd__(self, other):",
      "docstring": ""
    },
    {
      "name": "__sub__",
      "args": "self, other",
      "signature": "def __sub__(self, other):",
      "docstring": ""
    },
    {
      "name": "__isub__",
      "args": "self, other",
      "signature": "def __isub__(self, other):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self, index",
      "signature": "def __getitem__(self, index):",
      "docstring": ""
    }
  ],
  "decimal": [],
  "contextvars": [],
  "random": [],
  "threading": [],
  "platform": [
    {
      "name": "_comparable_version",
      "args": "version",
      "signature": "def _comparable_version(version):",
      "docstring": ""
    },
    {
      "name": "win32_is_iot",
      "args": "",
      "signature": "def win32_is_iot():",
      "docstring": ""
    }
  ],
  "glob": [
    {
      "name": "glob",
      "args": "pathname = None, *, root_dir, dir_fd, recursive",
      "signature": "def glob(pathname = None, *, root_dir, dir_fd, recursive):",
      "docstring": ""
    },
    {
      "name": "iglob",
      "args": "pathname = None, *, root_dir, dir_fd, recursive",
      "signature": "def iglob(pathname = None, *, root_dir, dir_fd, recursive):",
      "docstring": ""
    },
    {
      "name": "_iglob",
      "args": "pathname, root_dir, dir_fd, recursive, dironly",
      "signature": "def _iglob(pathname, root_dir, dir_fd, recursive, dironly):",
      "docstring": ""
    },
    {
      "name": "_glob1",
      "args": "dirname, pattern, dir_fd, dironly",
      "signature": "def _glob1(dirname, pattern, dir_fd, dironly):",
      "docstring": ""
    },
    {
      "name": "_glob0",
      "args": "dirname, basename, dir_fd, dironly",
      "signature": "def _glob0(dirname, basename, dir_fd, dironly):",
      "docstring": ""
    },
    {
      "name": "glob0",
      "args": "dirname, pattern",
      "signature": "def glob0(dirname, pattern):",
      "docstring": ""
    },
    {
      "name": "glob1",
      "args": "dirname, pattern",
      "signature": "def glob1(dirname, pattern):",
      "docstring": ""
    },
    {
      "name": "_glob2",
      "args": "dirname, pattern, dir_fd, dironly",
      "signature": "def _glob2(dirname, pattern, dir_fd, dironly):",
      "docstring": ""
    },
    {
      "name": "_iterdir",
      "args": "dirname, dir_fd, dironly",
      "signature": "def _iterdir(dirname, dir_fd, dironly):",
      "docstring": ""
    },
    {
      "name": "_listdir",
      "args": "dirname, dir_fd, dironly",
      "signature": "def _listdir(dirname, dir_fd, dironly):",
      "docstring": ""
    },
    {
      "name": "_rlistdir",
      "args": "dirname, dir_fd, dironly",
      "signature": "def _rlistdir(dirname, dir_fd, dironly):",
      "docstring": ""
    },
    {
      "name": "_lexists",
      "args": "pathname, dir_fd",
      "signature": "def _lexists(pathname, dir_fd):",
      "docstring": ""
    }
  ],
  "quopri": [],
  "install": [
    {
      "name": "__init__",
      "args": "self, translate_service",
      "signature": "def __init__(self, translate_service):",
      "docstring": ""
    },
    {
      "name": "_on_manage",
      "args": "self",
      "signature": "def _on_manage(self):",
      "docstring": ""
    },
    {
      "name": "_on_accept",
      "args": "self",
      "signature": "def _on_accept(self):",
      "docstring": ""
    },
    {
      "name": "_on_decline",
      "args": "self",
      "signature": "def _on_decline(self):",
      "docstring": ""
    },
    {
      "name": "_on_open_link",
      "args": "self, url",
      "signature": "def _on_open_link(self, url):",
      "docstring": ""
    },
    {
      "name": "wait_for_state",
      "args": "self",
      "signature": "def wait_for_state(self):",
      "docstring": ""
    },
    {
      "name": "show",
      "args": "self",
      "signature": "def show(self):",
      "docstring": ""
    },
    {
      "name": "add_progress",
      "args": "self, msg",
      "signature": "def add_progress(self, msg):",
      "docstring": ""
    },
    {
      "name": "update_progress_text",
      "args": "self, msg",
      "signature": "def update_progress_text(self, msg):",
      "docstring": ""
    },
    {
      "name": "_clean_dialog",
      "args": "self",
      "signature": "def _clean_dialog(self):",
      "docstring": ""
    },
    {
      "name": "add_success_message",
      "args": "self, title, sub_title, msg",
      "signature": "def add_success_message(self, title, sub_title, msg):",
      "docstring": ""
    },
    {
      "name": "start_move",
      "args": "self, event",
      "signature": "def start_move(self, event):",
      "docstring": ""
    },
    {
      "name": "stop_move",
      "args": "self, event",
      "signature": "def stop_move(self, event):",
      "docstring": ""
    },
    {
      "name": "on_drag",
      "args": "self, event",
      "signature": "def on_drag(self, event):",
      "docstring": ""
    }
  ],
  "tarfile": [],
  "stringprep": [],
  "socket": [],
  "datetime": [
    {
      "name": "_cmp",
      "args": "x, y",
      "signature": "def _cmp(x, y):",
      "docstring": ""
    },
    {
      "name": "_is_leap",
      "args": "year",
      "signature": "def _is_leap(year):",
      "docstring": ""
    },
    {
      "name": "_days_before_year",
      "args": "year",
      "signature": "def _days_before_year(year):",
      "docstring": ""
    },
    {
      "name": "_days_in_month",
      "args": "year, month",
      "signature": "def _days_in_month(year, month):",
      "docstring": ""
    },
    {
      "name": "_days_before_month",
      "args": "year, month",
      "signature": "def _days_before_month(year, month):",
      "docstring": ""
    },
    {
      "name": "_ymd2ord",
      "args": "year, month, day",
      "signature": "def _ymd2ord(year, month, day):",
      "docstring": ""
    }
  ],
  "tokenize": [
    {
      "name": "TokenInfo",
      "args": "",
      "signature": "def TokenInfo():",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "exact_type",
      "args": "self",
      "signature": "def exact_type(self):",
      "docstring": ""
    },
    {
      "name": "group",
      "args": "*choices",
      "signature": "def group(*choices):",
      "docstring": ""
    },
    {
      "name": "any",
      "args": "*choices",
      "signature": "def any(*choices):",
      "docstring": ""
    },
    {
      "name": "maybe",
      "args": "*choices",
      "signature": "def maybe(*choices):",
      "docstring": ""
    },
    {
      "name": "_all_string_prefixes",
      "args": "",
      "signature": "def _all_string_prefixes():",
      "docstring": ""
    },
    {
      "name": "_compile",
      "args": "expr",
      "signature": "def _compile(expr):",
      "docstring": ""
    }
  ],
  "constants": [],
  "decoder": [],
  "scanner": [],
  "encoder": [],
  "machinery": [
    {
      "name": "all_suffixes",
      "args": "",
      "signature": "def all_suffixes():",
      "docstring": ""
    }
  ],
  "abc": [],
  "policy": [],
  "parser": [
    {
      "name": "__init__",
      "args": "self, *args, **kw",
      "signature": "def __init__(self, *args, **kw):",
      "docstring": ""
    }
  ],
  "utils": [
    {
      "name": "_has_surrogates",
      "args": "s",
      "signature": "def _has_surrogates(s):",
      "docstring": ""
    },
    {
      "name": "_sanitize",
      "args": "string",
      "signature": "def _sanitize(string):",
      "docstring": ""
    },
    {
      "name": "_iter_escaped_chars",
      "args": "addr",
      "signature": "def _iter_escaped_chars(addr):",
      "docstring": ""
    },
    {
      "name": "_strip_quoted_realnames",
      "args": "addr",
      "signature": "def _strip_quoted_realnames(addr):",
      "docstring": ""
    },
    {
      "name": "getaddresses",
      "args": "fieldvalues = None, *, strict",
      "signature": "def getaddresses(fieldvalues = None, *, strict):",
      "docstring": ""
    }
  ],
  "charset": [],
  "iterators": [
    {
      "name": "walk",
      "args": "self",
      "signature": "def walk(self):",
      "docstring": ""
    }
  ],
  "feedparser": [
    {
      "name": "__init__",
      "args": "self",
      "signature": "def __init__(self):",
      "docstring": ""
    },
    {
      "name": "push_eof_matcher",
      "args": "self, pred",
      "signature": "def push_eof_matcher(self, pred):",
      "docstring": ""
    },
    {
      "name": "pop_eof_matcher",
      "args": "self",
      "signature": "def pop_eof_matcher(self):",
      "docstring": ""
    },
    {
      "name": "close",
      "args": "self",
      "signature": "def close(self):",
      "docstring": ""
    },
    {
      "name": "readline",
      "args": "self",
      "signature": "def readline(self):",
      "docstring": ""
    },
    {
      "name": "unreadline",
      "args": "self, line",
      "signature": "def unreadline(self, line):",
      "docstring": ""
    },
    {
      "name": "push",
      "args": "self, data",
      "signature": "def push(self, data):",
      "docstring": ""
    },
    {
      "name": "pushlines",
      "args": "self, lines",
      "signature": "def pushlines(self, lines):",
      "docstring": ""
    },
    {
      "name": "__iter__",
      "args": "self",
      "signature": "def __iter__(self):",
      "docstring": ""
    },
    {
      "name": "__next__",
      "args": "self",
      "signature": "def __next__(self):",
      "docstring": ""
    },
    {
      "name": "_set_headersonly",
      "args": "self",
      "signature": "def _set_headersonly(self):",
      "docstring": ""
    },
    {
      "name": "feed",
      "args": "self, data",
      "signature": "def feed(self, data):",
      "docstring": ""
    },
    {
      "name": "_call_parse",
      "args": "self",
      "signature": "def _call_parse(self):",
      "docstring": ""
    },
    {
      "name": "close",
      "args": "self",
      "signature": "def close(self):",
      "docstring": ""
    },
    {
      "name": "_new_message",
      "args": "self",
      "signature": "def _new_message(self):",
      "docstring": ""
    },
    {
      "name": "_pop_message",
      "args": "self",
      "signature": "def _pop_message(self):",
      "docstring": ""
    },
    {
      "name": "_parsegen",
      "args": "self",
      "signature": "def _parsegen(self):",
      "docstring": ""
    },
    {
      "name": "_parse_headers",
      "args": "self, lines",
      "signature": "def _parse_headers(self, lines):",
      "docstring": ""
    },
    {
      "name": "feed",
      "args": "self = None, data = None",
      "signature": "def feed(self = None, data = None):",
      "docstring": ""
    }
  ],
  "base64mime": [
    {
      "name": "header_length",
      "args": "bytearray",
      "signature": "def header_length(bytearray):",
      "docstring": ""
    },
    {
      "name": "decode",
      "args": "string",
      "signature": "def decode(string):",
      "docstring": ""
    }
  ],
  "hashlib": [],
  "lzma": [
    {
      "name": "close",
      "args": "self",
      "signature": "def close(self):",
      "docstring": ""
    },
    {
      "name": "closed",
      "args": "self",
      "signature": "def closed(self):",
      "docstring": ""
    },
    {
      "name": "fileno",
      "args": "self",
      "signature": "def fileno(self):",
      "docstring": ""
    },
    {
      "name": "seekable",
      "args": "self",
      "signature": "def seekable(self):",
      "docstring": ""
    },
    {
      "name": "readable",
      "args": "self",
      "signature": "def readable(self):",
      "docstring": ""
    },
    {
      "name": "writable",
      "args": "self",
      "signature": "def writable(self):",
      "docstring": ""
    },
    {
      "name": "write",
      "args": "self, data",
      "signature": "def write(self, data):",
      "docstring": ""
    },
    {
      "name": "tell",
      "args": "self",
      "signature": "def tell(self):",
      "docstring": ""
    }
  ],
  "csv": [
    {
      "name": "__init__",
      "args": "self",
      "signature": "def __init__(self):",
      "docstring": ""
    },
    {
      "name": "_validate",
      "args": "self",
      "signature": "def _validate(self):",
      "docstring": ""
    },
    {
      "name": "__iter__",
      "args": "self",
      "signature": "def __iter__(self):",
      "docstring": ""
    },
    {
      "name": "fieldnames",
      "args": "self",
      "signature": "def fieldnames(self):",
      "docstring": ""
    },
    {
      "name": "fieldnames",
      "args": "self, value",
      "signature": "def fieldnames(self, value):",
      "docstring": ""
    },
    {
      "name": "__next__",
      "args": "self",
      "signature": "def __next__(self):",
      "docstring": ""
    },
    {
      "name": "writeheader",
      "args": "self",
      "signature": "def writeheader(self):",
      "docstring": ""
    },
    {
      "name": "_dict_to_list",
      "args": "self, rowdict",
      "signature": "def _dict_to_list(self, rowdict):",
      "docstring": ""
    },
    {
      "name": "writerow",
      "args": "self, rowdict",
      "signature": "def writerow(self, rowdict):",
      "docstring": ""
    },
    {
      "name": "writerows",
      "args": "self, rowdicts",
      "signature": "def writerows(self, rowdicts):",
      "docstring": ""
    }
  ],
  "numbers": [
    {
      "name": "__complex__",
      "args": "self",
      "signature": "def __complex__(self):",
      "docstring": ""
    },
    {
      "name": "__bool__",
      "args": "self",
      "signature": "def __bool__(self):",
      "docstring": ""
    },
    {
      "name": "real",
      "args": "self",
      "signature": "def real(self):",
      "docstring": ""
    },
    {
      "name": "imag",
      "args": "self",
      "signature": "def imag(self):",
      "docstring": ""
    },
    {
      "name": "__add__",
      "args": "self, other",
      "signature": "def __add__(self, other):",
      "docstring": ""
    },
    {
      "name": "__radd__",
      "args": "self, other",
      "signature": "def __radd__(self, other):",
      "docstring": ""
    },
    {
      "name": "__neg__",
      "args": "self",
      "signature": "def __neg__(self):",
      "docstring": ""
    },
    {
      "name": "__pos__",
      "args": "self",
      "signature": "def __pos__(self):",
      "docstring": ""
    },
    {
      "name": "__sub__",
      "args": "self, other",
      "signature": "def __sub__(self, other):",
      "docstring": ""
    },
    {
      "name": "__rsub__",
      "args": "self, other",
      "signature": "def __rsub__(self, other):",
      "docstring": ""
    },
    {
      "name": "__mul__",
      "args": "self, other",
      "signature": "def __mul__(self, other):",
      "docstring": ""
    },
    {
      "name": "__rmul__",
      "args": "self, other",
      "signature": "def __rmul__(self, other):",
      "docstring": ""
    },
    {
      "name": "__truediv__",
      "args": "self, other",
      "signature": "def __truediv__(self, other):",
      "docstring": ""
    },
    {
      "name": "__rtruediv__",
      "args": "self, other",
      "signature": "def __rtruediv__(self, other):",
      "docstring": ""
    },
    {
      "name": "__pow__",
      "args": "self, exponent",
      "signature": "def __pow__(self, exponent):",
      "docstring": ""
    },
    {
      "name": "__rpow__",
      "args": "self, base",
      "signature": "def __rpow__(self, base):",
      "docstring": ""
    },
    {
      "name": "__abs__",
      "args": "self",
      "signature": "def __abs__(self):",
      "docstring": ""
    },
    {
      "name": "conjugate",
      "args": "self",
      "signature": "def conjugate(self):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "__float__",
      "args": "self",
      "signature": "def __float__(self):",
      "docstring": ""
    },
    {
      "name": "__trunc__",
      "args": "self",
      "signature": "def __trunc__(self):",
      "docstring": ""
    },
    {
      "name": "__floor__",
      "args": "self",
      "signature": "def __floor__(self):",
      "docstring": ""
    },
    {
      "name": "__ceil__",
      "args": "self",
      "signature": "def __ceil__(self):",
      "docstring": ""
    },
    {
      "name": "__divmod__",
      "args": "self, other",
      "signature": "def __divmod__(self, other):",
      "docstring": ""
    },
    {
      "name": "__rdivmod__",
      "args": "self, other",
      "signature": "def __rdivmod__(self, other):",
      "docstring": ""
    },
    {
      "name": "__floordiv__",
      "args": "self, other",
      "signature": "def __floordiv__(self, other):",
      "docstring": ""
    },
    {
      "name": "__rfloordiv__",
      "args": "self, other",
      "signature": "def __rfloordiv__(self, other):",
      "docstring": ""
    },
    {
      "name": "__mod__",
      "args": "self, other",
      "signature": "def __mod__(self, other):",
      "docstring": ""
    },
    {
      "name": "__rmod__",
      "args": "self, other",
      "signature": "def __rmod__(self, other):",
      "docstring": ""
    },
    {
      "name": "__lt__",
      "args": "self, other",
      "signature": "def __lt__(self, other):",
      "docstring": ""
    },
    {
      "name": "__le__",
      "args": "self, other",
      "signature": "def __le__(self, other):",
      "docstring": ""
    },
    {
      "name": "__complex__",
      "args": "self",
      "signature": "def __complex__(self):",
      "docstring": ""
    },
    {
      "name": "real",
      "args": "self",
      "signature": "def real(self):",
      "docstring": ""
    },
    {
      "name": "imag",
      "args": "self",
      "signature": "def imag(self):",
      "docstring": ""
    },
    {
      "name": "conjugate",
      "args": "self",
      "signature": "def conjugate(self):",
      "docstring": ""
    },
    {
      "name": "numerator",
      "args": "self",
      "signature": "def numerator(self):",
      "docstring": ""
    },
    {
      "name": "denominator",
      "args": "self",
      "signature": "def denominator(self):",
      "docstring": ""
    },
    {
      "name": "__float__",
      "args": "self",
      "signature": "def __float__(self):",
      "docstring": ""
    },
    {
      "name": "__int__",
      "args": "self",
      "signature": "def __int__(self):",
      "docstring": ""
    },
    {
      "name": "__index__",
      "args": "self",
      "signature": "def __index__(self):",
      "docstring": ""
    },
    {
      "name": "__lshift__",
      "args": "self, other",
      "signature": "def __lshift__(self, other):",
      "docstring": ""
    },
    {
      "name": "__rlshift__",
      "args": "self, other",
      "signature": "def __rlshift__(self, other):",
      "docstring": ""
    },
    {
      "name": "__rshift__",
      "args": "self, other",
      "signature": "def __rshift__(self, other):",
      "docstring": ""
    },
    {
      "name": "__rrshift__",
      "args": "self, other",
      "signature": "def __rrshift__(self, other):",
      "docstring": ""
    },
    {
      "name": "__and__",
      "args": "self, other",
      "signature": "def __and__(self, other):",
      "docstring": ""
    },
    {
      "name": "__rand__",
      "args": "self, other",
      "signature": "def __rand__(self, other):",
      "docstring": ""
    },
    {
      "name": "__xor__",
      "args": "self, other",
      "signature": "def __xor__(self, other):",
      "docstring": ""
    },
    {
      "name": "__rxor__",
      "args": "self, other",
      "signature": "def __rxor__(self, other):",
      "docstring": ""
    },
    {
      "name": "__or__",
      "args": "self, other",
      "signature": "def __or__(self, other):",
      "docstring": ""
    },
    {
      "name": "__ror__",
      "args": "self, other",
      "signature": "def __ror__(self, other):",
      "docstring": ""
    },
    {
      "name": "__invert__",
      "args": "self",
      "signature": "def __invert__(self):",
      "docstring": ""
    },
    {
      "name": "__float__",
      "args": "self",
      "signature": "def __float__(self):",
      "docstring": ""
    },
    {
      "name": "numerator",
      "args": "self",
      "signature": "def numerator(self):",
      "docstring": ""
    },
    {
      "name": "denominator",
      "args": "self",
      "signature": "def denominator(self):",
      "docstring": ""
    }
  ],
  "argparse": [],
  "_compression": [
    {
      "name": "_check_not_closed",
      "args": "self",
      "signature": "def _check_not_closed(self):",
      "docstring": ""
    },
    {
      "name": "_check_can_read",
      "args": "self",
      "signature": "def _check_can_read(self):",
      "docstring": ""
    },
    {
      "name": "_check_can_write",
      "args": "self",
      "signature": "def _check_can_write(self):",
      "docstring": ""
    },
    {
      "name": "_check_can_seek",
      "args": "self",
      "signature": "def _check_can_seek(self):",
      "docstring": ""
    },
    {
      "name": "readable",
      "args": "self",
      "signature": "def readable(self):",
      "docstring": ""
    },
    {
      "name": "close",
      "args": "self = None",
      "signature": "def close(self = None):",
      "docstring": ""
    },
    {
      "name": "seekable",
      "args": "self",
      "signature": "def seekable(self):",
      "docstring": ""
    },
    {
      "name": "readinto",
      "args": "self, b",
      "signature": "def readinto(self, b):",
      "docstring": ""
    },
    {
      "name": "readall",
      "args": "self",
      "signature": "def readall(self):",
      "docstring": ""
    },
    {
      "name": "_rewind",
      "args": "self",
      "signature": "def _rewind(self):",
      "docstring": ""
    },
    {
      "name": "tell",
      "args": "self",
      "signature": "def tell(self):",
      "docstring": ""
    }
  ],
  "copy": [],
  "fractions": [
    {
      "name": "__new__",
      "args": "cls = None, numerator = None, denominator = None, *, _normalize",
      "signature": "def __new__(cls = None, numerator = None, denominator = None, *, _normalize):",
      "docstring": ""
    },
    {
      "name": "from_float",
      "args": "cls, f",
      "signature": "def from_float(cls, f):",
      "docstring": ""
    },
    {
      "name": "from_decimal",
      "args": "cls, dec",
      "signature": "def from_decimal(cls, dec):",
      "docstring": ""
    },
    {
      "name": "as_integer_ratio",
      "args": "self",
      "signature": "def as_integer_ratio(self):",
      "docstring": ""
    },
    {
      "name": "numerator",
      "args": "a",
      "signature": "def numerator(a):",
      "docstring": ""
    },
    {
      "name": "denominator",
      "args": "a",
      "signature": "def denominator(a):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "_operator_fallbacks",
      "args": "monomorphic_operator, fallback_operator",
      "signature": "def _operator_fallbacks(monomorphic_operator, fallback_operator):",
      "docstring": ""
    },
    {
      "name": "__add__",
      "args": "self, other",
      "signature": "def __add__(self, other):",
      "docstring": ""
    },
    {
      "name": "__radd__",
      "args": "self, other",
      "signature": "def __radd__(self, other):",
      "docstring": ""
    },
    {
      "name": "forward",
      "args": "a = None, b = None",
      "signature": "def forward(a = None, b = None):",
      "docstring": ""
    },
    {
      "name": "reverse",
      "args": "b = None, a = None",
      "signature": "def reverse(b = None, a = None):",
      "docstring": ""
    },
    {
      "name": "_add",
      "args": "a, b",
      "signature": "def _add(a, b):",
      "docstring": ""
    },
    {
      "name": "_sub",
      "args": "a, b",
      "signature": "def _sub(a, b):",
      "docstring": ""
    },
    {
      "name": "_mul",
      "args": "a, b",
      "signature": "def _mul(a, b):",
      "docstring": ""
    },
    {
      "name": "_div",
      "args": "a, b",
      "signature": "def _div(a, b):",
      "docstring": ""
    },
    {
      "name": "_floordiv",
      "args": "a, b",
      "signature": "def _floordiv(a, b):",
      "docstring": ""
    },
    {
      "name": "_divmod",
      "args": "a, b",
      "signature": "def _divmod(a, b):",
      "docstring": ""
    },
    {
      "name": "_mod",
      "args": "a, b",
      "signature": "def _mod(a, b):",
      "docstring": ""
    },
    {
      "name": "__pow__",
      "args": "a, b",
      "signature": "def __pow__(a, b):",
      "docstring": ""
    },
    {
      "name": "__rpow__",
      "args": "b, a",
      "signature": "def __rpow__(b, a):",
      "docstring": ""
    },
    {
      "name": "__pos__",
      "args": "a",
      "signature": "def __pos__(a):",
      "docstring": ""
    },
    {
      "name": "__neg__",
      "args": "a",
      "signature": "def __neg__(a):",
      "docstring": ""
    },
    {
      "name": "__abs__",
      "args": "a",
      "signature": "def __abs__(a):",
      "docstring": ""
    },
    {
      "name": "__trunc__",
      "args": "a",
      "signature": "def __trunc__(a):",
      "docstring": ""
    },
    {
      "name": "__floor__",
      "args": "a",
      "signature": "def __floor__(a):",
      "docstring": ""
    },
    {
      "name": "__ceil__",
      "args": "a",
      "signature": "def __ceil__(a):",
      "docstring": ""
    },
    {
      "name": "__hash__",
      "args": "self",
      "signature": "def __hash__(self):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "a, b",
      "signature": "def __eq__(a, b):",
      "docstring": ""
    },
    {
      "name": "_richcmp",
      "args": "self, other, op",
      "signature": "def _richcmp(self, other, op):",
      "docstring": ""
    },
    {
      "name": "__lt__",
      "args": "a, b",
      "signature": "def __lt__(a, b):",
      "docstring": ""
    },
    {
      "name": "__gt__",
      "args": "a, b",
      "signature": "def __gt__(a, b):",
      "docstring": ""
    },
    {
      "name": "__le__",
      "args": "a, b",
      "signature": "def __le__(a, b):",
      "docstring": ""
    },
    {
      "name": "__ge__",
      "args": "a, b",
      "signature": "def __ge__(a, b):",
      "docstring": ""
    },
    {
      "name": "__bool__",
      "args": "a",
      "signature": "def __bool__(a):",
      "docstring": ""
    },
    {
      "name": "__reduce__",
      "args": "self",
      "signature": "def __reduce__(self):",
      "docstring": ""
    },
    {
      "name": "__copy__",
      "args": "self",
      "signature": "def __copy__(self):",
      "docstring": ""
    },
    {
      "name": "__deepcopy__",
      "args": "self, memo",
      "signature": "def __deepcopy__(self, memo):",
      "docstring": ""
    }
  ],
  "inspect": [
    {
      "name": "get_annotations",
      "args": "obj = None, *, globals, locals, eval_str",
      "signature": "def get_annotations(obj = None, *, globals, locals, eval_str):",
      "docstring": ""
    },
    {
      "name": "ismodule",
      "args": "object",
      "signature": "def ismodule(object):",
      "docstring": ""
    },
    {
      "name": "isclass",
      "args": "object",
      "signature": "def isclass(object):",
      "docstring": ""
    },
    {
      "name": "ismethod",
      "args": "object",
      "signature": "def ismethod(object):",
      "docstring": ""
    },
    {
      "name": "ismethoddescriptor",
      "args": "object",
      "signature": "def ismethoddescriptor(object):",
      "docstring": ""
    },
    {
      "name": "isdatadescriptor",
      "args": "object",
      "signature": "def isdatadescriptor(object):",
      "docstring": ""
    },
    {
      "name": "ismemberdescriptor",
      "args": "object",
      "signature": "def ismemberdescriptor(object):",
      "docstring": ""
    },
    {
      "name": "ismemberdescriptor",
      "args": "object",
      "signature": "def ismemberdescriptor(object):",
      "docstring": ""
    },
    {
      "name": "isgetsetdescriptor",
      "args": "object",
      "signature": "def isgetsetdescriptor(object):",
      "docstring": ""
    },
    {
      "name": "isgetsetdescriptor",
      "args": "object",
      "signature": "def isgetsetdescriptor(object):",
      "docstring": ""
    },
    {
      "name": "isfunction",
      "args": "object",
      "signature": "def isfunction(object):",
      "docstring": ""
    },
    {
      "name": "_has_code_flag",
      "args": "f, flag",
      "signature": "def _has_code_flag(f, flag):",
      "docstring": ""
    },
    {
      "name": "isgeneratorfunction",
      "args": "obj",
      "signature": "def isgeneratorfunction(obj):",
      "docstring": ""
    },
    {
      "name": "iscoroutinefunction",
      "args": "obj",
      "signature": "def iscoroutinefunction(obj):",
      "docstring": ""
    },
    {
      "name": "isasyncgenfunction",
      "args": "obj",
      "signature": "def isasyncgenfunction(obj):",
      "docstring": ""
    },
    {
      "name": "isasyncgen",
      "args": "object",
      "signature": "def isasyncgen(object):",
      "docstring": ""
    },
    {
      "name": "isgenerator",
      "args": "object",
      "signature": "def isgenerator(object):",
      "docstring": ""
    },
    {
      "name": "iscoroutine",
      "args": "object",
      "signature": "def iscoroutine(object):",
      "docstring": ""
    },
    {
      "name": "isawaitable",
      "args": "object",
      "signature": "def isawaitable(object):",
      "docstring": ""
    },
    {
      "name": "istraceback",
      "args": "object",
      "signature": "def istraceback(object):",
      "docstring": ""
    },
    {
      "name": "isframe",
      "args": "object",
      "signature": "def isframe(object):",
      "docstring": ""
    },
    {
      "name": "iscode",
      "args": "object",
      "signature": "def iscode(object):",
      "docstring": ""
    },
    {
      "name": "isbuiltin",
      "args": "object",
      "signature": "def isbuiltin(object):",
      "docstring": ""
    },
    {
      "name": "isroutine",
      "args": "object",
      "signature": "def isroutine(object):",
      "docstring": ""
    },
    {
      "name": "isabstract",
      "args": "object",
      "signature": "def isabstract(object):",
      "docstring": ""
    },
    {
      "name": "classify_class_attrs",
      "args": "cls",
      "signature": "def classify_class_attrs(cls):",
      "docstring": ""
    },
    {
      "name": "getmro",
      "args": "cls",
      "signature": "def getmro(cls):",
      "docstring": ""
    },
    {
      "name": "unwrap",
      "args": "func = None, *, stop",
      "signature": "def unwrap(func = None, *, stop):",
      "docstring": ""
    },
    {
      "name": "_is_wrapper",
      "args": "f",
      "signature": "def _is_wrapper(f):",
      "docstring": ""
    },
    {
      "name": "_is_wrapper",
      "args": "f = None",
      "signature": "def _is_wrapper(f = None):",
      "docstring": ""
    }
  ],
  "typing": [
    {
      "name": "_is_param_expr",
      "args": "arg",
      "signature": "def _is_param_expr(arg):",
      "docstring": ""
    },
    {
      "name": "_type_repr",
      "args": "obj",
      "signature": "def _type_repr(obj):",
      "docstring": ""
    },
    {
      "name": "_check_generic",
      "args": "cls, parameters, elen",
      "signature": "def _check_generic(cls, parameters, elen):",
      "docstring": ""
    },
    {
      "name": "_prepare_paramspec_params",
      "args": "cls, params",
      "signature": "def _prepare_paramspec_params(cls, params):",
      "docstring": ""
    },
    {
      "name": "_deduplicate",
      "args": "params",
      "signature": "def _deduplicate(params):",
      "docstring": ""
    },
    {
      "name": "_remove_dups_flatten",
      "args": "parameters",
      "signature": "def _remove_dups_flatten(parameters):",
      "docstring": ""
    },
    {
      "name": "_flatten_literal_params",
      "args": "parameters",
      "signature": "def _flatten_literal_params(parameters):",
      "docstring": ""
    },
    {
      "name": "_tp_cache",
      "args": "func = None, *, typed",
      "signature": "def _tp_cache(func = None, *, typed):",
      "docstring": ""
    },
    {
      "name": "decorator",
      "args": "func = None",
      "signature": "def decorator(func = None):",
      "docstring": ""
    },
    {
      "name": "inner",
      "args": "*args, **kwds",
      "signature": "def inner(*args, **kwds):",
      "docstring": ""
    },
    {
      "name": "__init_subclass__",
      "args": "self, *args, **kwds",
      "signature": "def __init_subclass__(self, *args, **kwds):",
      "docstring": ""
    },
    {
      "name": "__copy__",
      "args": "self",
      "signature": "def __copy__(self):",
      "docstring": ""
    },
    {
      "name": "__deepcopy__",
      "args": "self, memo",
      "signature": "def __deepcopy__(self, memo):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, getitem",
      "signature": "def __init__(self, getitem):",
      "docstring": ""
    },
    {
      "name": "__getattr__",
      "args": "self, item",
      "signature": "def __getattr__(self, item):",
      "docstring": ""
    },
    {
      "name": "__mro_entries__",
      "args": "self, bases",
      "signature": "def __mro_entries__(self, bases):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__reduce__",
      "args": "self",
      "signature": "def __reduce__(self):",
      "docstring": ""
    },
    {
      "name": "__call__",
      "args": "self, *args, **kwds",
      "signature": "def __call__(self, *args, **kwds):",
      "docstring": ""
    },
    {
      "name": "__or__",
      "args": "self, other",
      "signature": "def __or__(self, other):",
      "docstring": ""
    },
    {
      "name": "__ror__",
      "args": "self, other",
      "signature": "def __ror__(self, other):",
      "docstring": ""
    },
    {
      "name": "__instancecheck__",
      "args": "self, obj",
      "signature": "def __instancecheck__(self, obj):",
      "docstring": ""
    },
    {
      "name": "__subclasscheck__",
      "args": "self, cls",
      "signature": "def __subclasscheck__(self, cls):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self, parameters",
      "signature": "def __getitem__(self, parameters):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self, parameters",
      "signature": "def __getitem__(self, parameters):",
      "docstring": ""
    },
    {
      "name": "Any",
      "args": "self, parameters",
      "signature": "def Any(self, parameters):",
      "docstring": ""
    },
    {
      "name": "NoReturn",
      "args": "self, parameters",
      "signature": "def NoReturn(self, parameters):",
      "docstring": ""
    },
    {
      "name": "ClassVar",
      "args": "self, parameters",
      "signature": "def ClassVar(self, parameters):",
      "docstring": ""
    },
    {
      "name": "Final",
      "args": "self, parameters",
      "signature": "def Final(self, parameters):",
      "docstring": ""
    },
    {
      "name": "Union",
      "args": "self, parameters",
      "signature": "def Union(self, parameters):",
      "docstring": ""
    },
    {
      "name": "Optional",
      "args": "self, parameters",
      "signature": "def Optional(self, parameters):",
      "docstring": ""
    },
    {
      "name": "Literal",
      "args": "self, *parameters",
      "signature": "def Literal(self, *parameters):",
      "docstring": ""
    },
    {
      "name": "TypeAlias",
      "args": "self, parameters",
      "signature": "def TypeAlias(self, parameters):",
      "docstring": ""
    },
    {
      "name": "Concatenate",
      "args": "self, parameters",
      "signature": "def Concatenate(self, parameters):",
      "docstring": ""
    }
  ],
  "webbrowser": [
    {
      "name": "open_new",
      "args": "url",
      "signature": "def open_new(url):",
      "docstring": ""
    },
    {
      "name": "open_new_tab",
      "args": "url",
      "signature": "def open_new_tab(url):",
      "docstring": ""
    },
    {
      "name": "_synthesize",
      "args": "browser = None, *, preferred",
      "signature": "def _synthesize(browser = None, *, preferred):",
      "docstring": ""
    },
    {
      "name": "open_new",
      "args": "self, url",
      "signature": "def open_new(self, url):",
      "docstring": ""
    },
    {
      "name": "open_new_tab",
      "args": "self, url",
      "signature": "def open_new_tab(self, url):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, name",
      "signature": "def __init__(self, name):",
      "docstring": ""
    },
    {
      "name": "_find_grail_rc",
      "args": "self",
      "signature": "def _find_grail_rc(self):",
      "docstring": ""
    },
    {
      "name": "_remote",
      "args": "self, action",
      "signature": "def _remote(self, action):",
      "docstring": ""
    },
    {
      "name": "register_X_browsers",
      "args": "",
      "signature": "def register_X_browsers():",
      "docstring": ""
    },
    {
      "name": "register_standard_browsers",
      "args": "",
      "signature": "def register_standard_browsers():",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, name",
      "signature": "def __init__(self, name):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, name",
      "signature": "def __init__(self, name):",
      "docstring": ""
    },
    {
      "name": "main",
      "args": "",
      "signature": "def main():",
      "docstring": ""
    }
  ],
  "_compat_pickle": [],
  "textwrap": [
    {
      "name": "_munge_whitespace",
      "args": "self, text",
      "signature": "def _munge_whitespace(self, text):",
      "docstring": ""
    },
    {
      "name": "_split",
      "args": "self, text",
      "signature": "def _split(self, text):",
      "docstring": ""
    },
    {
      "name": "_fix_sentence_endings",
      "args": "self, chunks",
      "signature": "def _fix_sentence_endings(self, chunks):",
      "docstring": ""
    },
    {
      "name": "_handle_long_word",
      "args": "self, reversed_chunks, cur_line, cur_len, width",
      "signature": "def _handle_long_word(self, reversed_chunks, cur_line, cur_len, width):",
      "docstring": ""
    },
    {
      "name": "_wrap_chunks",
      "args": "self, chunks",
      "signature": "def _wrap_chunks(self, chunks):",
      "docstring": ""
    },
    {
      "name": "_split_chunks",
      "args": "self, text",
      "signature": "def _split_chunks(self, text):",
      "docstring": ""
    },
    {
      "name": "wrap",
      "args": "self, text",
      "signature": "def wrap(self, text):",
      "docstring": ""
    },
    {
      "name": "fill",
      "args": "self, text",
      "signature": "def fill(self, text):",
      "docstring": ""
    },
    {
      "name": "shorten",
      "args": "text, width, **kwargs",
      "signature": "def shorten(text, width, **kwargs):",
      "docstring": ""
    },
    {
      "name": "dedent",
      "args": "text",
      "signature": "def dedent(text):",
      "docstring": ""
    },
    {
      "name": "predicate",
      "args": "line",
      "signature": "def predicate(line):",
      "docstring": ""
    },
    {
      "name": "prefixed_lines",
      "args": "",
      "signature": "def prefixed_lines():",
      "docstring": ""
    }
  ],
  "pprint": [
    {
      "name": "pp",
      "args": "object = None, *, sort_dicts, *args, **kwargs",
      "signature": "def pp(object = None, *, sort_dicts, *args, **kwargs):",
      "docstring": ""
    },
    {
      "name": "saferepr",
      "args": "object",
      "signature": "def saferepr(object):",
      "docstring": ""
    },
    {
      "name": "isreadable",
      "args": "object",
      "signature": "def isreadable(object):",
      "docstring": ""
    },
    {
      "name": "isrecursive",
      "args": "object",
      "signature": "def isrecursive(object):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, obj",
      "signature": "def __init__(self, obj):",
      "docstring": ""
    },
    {
      "name": "__lt__",
      "args": "self, other",
      "signature": "def __lt__(self, other):",
      "docstring": ""
    },
    {
      "name": "_safe_tuple",
      "args": "t",
      "signature": "def _safe_tuple(t):",
      "docstring": ""
    },
    {
      "name": "pprint",
      "args": "self, object",
      "signature": "def pprint(self, object):",
      "docstring": ""
    },
    {
      "name": "pformat",
      "args": "self, object",
      "signature": "def pformat(self, object):",
      "docstring": ""
    },
    {
      "name": "isrecursive",
      "args": "self, object",
      "signature": "def isrecursive(self, object):",
      "docstring": ""
    },
    {
      "name": "isreadable",
      "args": "self, object",
      "signature": "def isreadable(self, object):",
      "docstring": ""
    },
    {
      "name": "_format",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _format(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_dataclass",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_dataclass(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_dict",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_dict(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_ordered_dict",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_ordered_dict(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_list",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_list(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_tuple",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_tuple(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_set",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_set(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_str",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_str(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_bytes",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_bytes(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_bytearray",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_bytearray(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_mappingproxy",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_mappingproxy(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_simplenamespace",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_simplenamespace(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_format_dict_items",
      "args": "self, items, stream, indent, allowance, context, level",
      "signature": "def _format_dict_items(self, items, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_format_namespace_items",
      "args": "self, items, stream, indent, allowance, context, level",
      "signature": "def _format_namespace_items(self, items, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_format_items",
      "args": "self, items, stream, indent, allowance, context, level",
      "signature": "def _format_items(self, items, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_repr",
      "args": "self, object, context, level",
      "signature": "def _repr(self, object, context, level):",
      "docstring": ""
    },
    {
      "name": "format",
      "args": "self, object, context, maxlevels, level",
      "signature": "def format(self, object, context, maxlevels, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_default_dict",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_default_dict(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_counter",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_counter(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_chain_map",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_chain_map(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_deque",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_deque(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_user_dict",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_user_dict(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_user_list",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_user_list(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_pprint_user_string",
      "args": "self, object, stream, indent, allowance, context, level",
      "signature": "def _pprint_user_string(self, object, stream, indent, allowance, context, level):",
      "docstring": ""
    },
    {
      "name": "_safe_repr",
      "args": "self, object, context, maxlevels, level",
      "signature": "def _safe_repr(self, object, context, maxlevels, level):",
      "docstring": ""
    },
    {
      "name": "_recursion",
      "args": "object",
      "signature": "def _recursion(object):",
      "docstring": ""
    },
    {
      "name": "_wrap_bytes_repr",
      "args": "object, width, allowance",
      "signature": "def _wrap_bytes_repr(object, width, allowance):",
      "docstring": ""
    }
  ],
  "ipaddress": [
    {
      "name": "ip_address",
      "args": "address",
      "signature": "def ip_address(address):",
      "docstring": ""
    },
    {
      "name": "ip_interface",
      "args": "address",
      "signature": "def ip_interface(address):",
      "docstring": ""
    },
    {
      "name": "v4_int_to_packed",
      "args": "address",
      "signature": "def v4_int_to_packed(address):",
      "docstring": ""
    },
    {
      "name": "v6_int_to_packed",
      "args": "address",
      "signature": "def v6_int_to_packed(address):",
      "docstring": ""
    },
    {
      "name": "_split_optional_netmask",
      "args": "address",
      "signature": "def _split_optional_netmask(address):",
      "docstring": ""
    },
    {
      "name": "_find_address_range",
      "args": "addresses",
      "signature": "def _find_address_range(addresses):",
      "docstring": ""
    },
    {
      "name": "_count_righthand_zero_bits",
      "args": "number, bits",
      "signature": "def _count_righthand_zero_bits(number, bits):",
      "docstring": ""
    },
    {
      "name": "summarize_address_range",
      "args": "first, last",
      "signature": "def summarize_address_range(first, last):",
      "docstring": ""
    },
    {
      "name": "_collapse_addresses_internal",
      "args": "addresses",
      "signature": "def _collapse_addresses_internal(addresses):",
      "docstring": ""
    },
    {
      "name": "collapse_addresses",
      "args": "addresses",
      "signature": "def collapse_addresses(addresses):",
      "docstring": ""
    },
    {
      "name": "get_mixed_type_key",
      "args": "obj",
      "signature": "def get_mixed_type_key(obj):",
      "docstring": ""
    },
    {
      "name": "exploded",
      "args": "self",
      "signature": "def exploded(self):",
      "docstring": ""
    },
    {
      "name": "compressed",
      "args": "self",
      "signature": "def compressed(self):",
      "docstring": ""
    },
    {
      "name": "reverse_pointer",
      "args": "self",
      "signature": "def reverse_pointer(self):",
      "docstring": ""
    },
    {
      "name": "version",
      "args": "self",
      "signature": "def version(self):",
      "docstring": ""
    },
    {
      "name": "_check_int_address",
      "args": "self, address",
      "signature": "def _check_int_address(self, address):",
      "docstring": ""
    },
    {
      "name": "_check_packed_address",
      "args": "self, address, expected_len",
      "signature": "def _check_packed_address(self, address, expected_len):",
      "docstring": ""
    },
    {
      "name": "_ip_int_from_prefix",
      "args": "cls, prefixlen",
      "signature": "def _ip_int_from_prefix(cls, prefixlen):",
      "docstring": ""
    },
    {
      "name": "_prefix_from_ip_int",
      "args": "cls, ip_int",
      "signature": "def _prefix_from_ip_int(cls, ip_int):",
      "docstring": ""
    },
    {
      "name": "_report_invalid_netmask",
      "args": "cls, netmask_str",
      "signature": "def _report_invalid_netmask(cls, netmask_str):",
      "docstring": ""
    },
    {
      "name": "_prefix_from_prefix_string",
      "args": "cls, prefixlen_str",
      "signature": "def _prefix_from_prefix_string(cls, prefixlen_str):",
      "docstring": ""
    },
    {
      "name": "_prefix_from_ip_string",
      "args": "cls, ip_str",
      "signature": "def _prefix_from_ip_string(cls, ip_str):",
      "docstring": ""
    },
    {
      "name": "_split_addr_prefix",
      "args": "cls, address",
      "signature": "def _split_addr_prefix(cls, address):",
      "docstring": ""
    },
    {
      "name": "__reduce__",
      "args": "self",
      "signature": "def __reduce__(self):",
      "docstring": ""
    },
    {
      "name": "_explode_shorthand_ip_string",
      "args": "self",
      "signature": "def _explode_shorthand_ip_string(self):",
      "docstring": ""
    },
    {
      "name": "_make_netmask",
      "args": "cls, arg",
      "signature": "def _make_netmask(cls, arg):",
      "docstring": ""
    },
    {
      "name": "_ip_int_from_string",
      "args": "cls, ip_str",
      "signature": "def _ip_int_from_string(cls, ip_str):",
      "docstring": ""
    }
  ],
  "base64": [
    {
      "name": "_bytes_from_decode_data",
      "args": "s",
      "signature": "def _bytes_from_decode_data(s):",
      "docstring": ""
    },
    {
      "name": "standard_b64encode",
      "args": "s",
      "signature": "def standard_b64encode(s):",
      "docstring": ""
    },
    {
      "name": "standard_b64decode",
      "args": "s",
      "signature": "def standard_b64decode(s):",
      "docstring": ""
    },
    {
      "name": "urlsafe_b64encode",
      "args": "s",
      "signature": "def urlsafe_b64encode(s):",
      "docstring": ""
    },
    {
      "name": "urlsafe_b64decode",
      "args": "s",
      "signature": "def urlsafe_b64decode(s):",
      "docstring": ""
    },
    {
      "name": "_b32encode",
      "args": "alphabet, s",
      "signature": "def _b32encode(alphabet, s):",
      "docstring": ""
    },
    {
      "name": "b32encode",
      "args": "s",
      "signature": "def b32encode(s):",
      "docstring": ""
    },
    {
      "name": "b32hexencode",
      "args": "s",
      "signature": "def b32hexencode(s):",
      "docstring": ""
    },
    {
      "name": "b16encode",
      "args": "s",
      "signature": "def b16encode(s):",
      "docstring": ""
    },
    {
      "name": "a85encode",
      "args": "b = None, *, foldspaces, wrapcol, pad, adobe",
      "signature": "def a85encode(b = None, *, foldspaces, wrapcol, pad, adobe):",
      "docstring": ""
    },
    {
      "name": "a85decode",
      "args": "b = None, *, foldspaces, adobe, ignorechars",
      "signature": "def a85decode(b = None, *, foldspaces, adobe, ignorechars):",
      "docstring": ""
    },
    {
      "name": "b85decode",
      "args": "b",
      "signature": "def b85decode(b):",
      "docstring": ""
    },
    {
      "name": "encode",
      "args": "input, output",
      "signature": "def encode(input, output):",
      "docstring": ""
    },
    {
      "name": "decode",
      "args": "input, output",
      "signature": "def decode(input, output):",
      "docstring": ""
    },
    {
      "name": "_input_type_check",
      "args": "s",
      "signature": "def _input_type_check(s):",
      "docstring": ""
    },
    {
      "name": "encodebytes",
      "args": "s",
      "signature": "def encodebytes(s):",
      "docstring": ""
    },
    {
      "name": "decodebytes",
      "args": "s",
      "signature": "def decodebytes(s):",
      "docstring": ""
    },
    {
      "name": "main",
      "args": "",
      "signature": "def main():",
      "docstring": ""
    },
    {
      "name": "test",
      "args": "",
      "signature": "def test():",
      "docstring": ""
    }
  ],
  "bisect": [],
  "statistics": [
    {
      "name": "_sum",
      "args": "data",
      "signature": "def _sum(data):",
      "docstring": ""
    },
    {
      "name": "_isfinite",
      "args": "x",
      "signature": "def _isfinite(x):",
      "docstring": ""
    },
    {
      "name": "_coerce",
      "args": "T, S",
      "signature": "def _coerce(T, S):",
      "docstring": ""
    },
    {
      "name": "_exact_ratio",
      "args": "x",
      "signature": "def _exact_ratio(x):",
      "docstring": ""
    },
    {
      "name": "_convert",
      "args": "value, T",
      "signature": "def _convert(value, T):",
      "docstring": ""
    },
    {
      "name": "_find_lteq",
      "args": "a, x",
      "signature": "def _find_lteq(a, x):",
      "docstring": ""
    },
    {
      "name": "_find_rteq",
      "args": "a, l, x",
      "signature": "def _find_rteq(a, l, x):",
      "docstring": ""
    },
    {
      "name": "mean",
      "args": "data",
      "signature": "def mean(data):",
      "docstring": ""
    },
    {
      "name": "fmean",
      "args": "data",
      "signature": "def fmean(data):",
      "docstring": ""
    },
    {
      "name": "geometric_mean",
      "args": "data",
      "signature": "def geometric_mean(data):",
      "docstring": ""
    },
    {
      "name": "median",
      "args": "data",
      "signature": "def median(data):",
      "docstring": ""
    },
    {
      "name": "median_low",
      "args": "data",
      "signature": "def median_low(data):",
      "docstring": ""
    },
    {
      "name": "median_high",
      "args": "data",
      "signature": "def median_high(data):",
      "docstring": ""
    },
    {
      "name": "mode",
      "args": "data",
      "signature": "def mode(data):",
      "docstring": ""
    },
    {
      "name": "multimode",
      "args": "data",
      "signature": "def multimode(data):",
      "docstring": ""
    },
    {
      "name": "quantiles",
      "args": "data = None, *, n, method",
      "signature": "def quantiles(data = None, *, n, method):",
      "docstring": ""
    },
    {
      "name": "covariance",
      "args": "x, y",
      "signature": "def covariance(x, y):",
      "docstring": ""
    },
    {
      "name": "correlation",
      "args": "x, y",
      "signature": "def correlation(x, y):",
      "docstring": ""
    },
    {
      "name": "linear_regression",
      "args": "x, y",
      "signature": "def linear_regression(x, y):",
      "docstring": ""
    },
    {
      "name": "_normal_dist_inv_cdf",
      "args": "p, mu, sigma",
      "signature": "def _normal_dist_inv_cdf(p, mu, sigma):",
      "docstring": ""
    }
  ],
  "getopt": [],
  "_strptime": [
    {
      "name": "_getlang",
      "args": "",
      "signature": "def _getlang():",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self",
      "signature": "def __init__(self):",
      "docstring": ""
    },
    {
      "name": "__calc_weekday",
      "args": "self",
      "signature": "def __calc_weekday(self):",
      "docstring": ""
    },
    {
      "name": "__calc_month",
      "args": "self",
      "signature": "def __calc_month(self):",
      "docstring": ""
    },
    {
      "name": "__calc_am_pm",
      "args": "self",
      "signature": "def __calc_am_pm(self):",
      "docstring": ""
    },
    {
      "name": "__calc_date_time",
      "args": "self",
      "signature": "def __calc_date_time(self):",
      "docstring": ""
    },
    {
      "name": "__calc_timezone",
      "args": "self",
      "signature": "def __calc_timezone(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self = None, locale_time = None",
      "signature": "def __init__(self = None, locale_time = None):",
      "docstring": ""
    },
    {
      "name": "__seqToRE",
      "args": "self, to_convert, directive",
      "signature": "def __seqToRE(self, to_convert, directive):",
      "docstring": ""
    },
    {
      "name": "pattern",
      "args": "self, format",
      "signature": "def pattern(self, format):",
      "docstring": ""
    },
    {
      "name": "compile",
      "args": "self, format",
      "signature": "def compile(self, format):",
      "docstring": ""
    },
    {
      "name": "_calc_julian_from_U_or_W",
      "args": "year, week_of_year, day_of_week, week_starts_Mon",
      "signature": "def _calc_julian_from_U_or_W(year, week_of_year, day_of_week, week_starts_Mon):",
      "docstring": ""
    },
    {
      "name": "_calc_julian_from_V",
      "args": "iso_year, iso_week, iso_weekday",
      "signature": "def _calc_julian_from_V(iso_year, iso_week, iso_weekday):",
      "docstring": ""
    }
  ],
  "calendar": [
    {
      "name": "__init__",
      "args": "self, month",
      "signature": "def __init__(self, month):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, weekday",
      "signature": "def __init__(self, weekday):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, format",
      "signature": "def __init__(self, format):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self, i",
      "signature": "def __getitem__(self, i):",
      "docstring": ""
    },
    {
      "name": "__len__",
      "args": "self",
      "signature": "def __len__(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, format",
      "signature": "def __init__(self, format):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self, i",
      "signature": "def __getitem__(self, i):",
      "docstring": ""
    },
    {
      "name": "__len__",
      "args": "self",
      "signature": "def __len__(self):",
      "docstring": ""
    },
    {
      "name": "isleap",
      "args": "year",
      "signature": "def isleap(year):",
      "docstring": ""
    },
    {
      "name": "leapdays",
      "args": "y1, y2",
      "signature": "def leapdays(y1, y2):",
      "docstring": ""
    },
    {
      "name": "weekday",
      "args": "year, month, day",
      "signature": "def weekday(year, month, day):",
      "docstring": ""
    },
    {
      "name": "monthrange",
      "args": "year, month",
      "signature": "def monthrange(year, month):",
      "docstring": ""
    },
    {
      "name": "_monthlen",
      "args": "year, month",
      "signature": "def _monthlen(year, month):",
      "docstring": ""
    },
    {
      "name": "_prevmonth",
      "args": "year, month",
      "signature": "def _prevmonth(year, month):",
      "docstring": ""
    },
    {
      "name": "_nextmonth",
      "args": "year, month",
      "signature": "def _nextmonth(year, month):",
      "docstring": ""
    },
    {
      "name": "getfirstweekday",
      "args": "self",
      "signature": "def getfirstweekday(self):",
      "docstring": ""
    },
    {
      "name": "setfirstweekday",
      "args": "self, firstweekday",
      "signature": "def setfirstweekday(self, firstweekday):",
      "docstring": ""
    },
    {
      "name": "iterweekdays",
      "args": "self",
      "signature": "def iterweekdays(self):",
      "docstring": ""
    },
    {
      "name": "itermonthdates",
      "args": "self, year, month",
      "signature": "def itermonthdates(self, year, month):",
      "docstring": ""
    },
    {
      "name": "itermonthdays",
      "args": "self, year, month",
      "signature": "def itermonthdays(self, year, month):",
      "docstring": ""
    },
    {
      "name": "itermonthdays2",
      "args": "self, year, month",
      "signature": "def itermonthdays2(self, year, month):",
      "docstring": ""
    },
    {
      "name": "itermonthdays3",
      "args": "self, year, month",
      "signature": "def itermonthdays3(self, year, month):",
      "docstring": ""
    },
    {
      "name": "itermonthdays4",
      "args": "self, year, month",
      "signature": "def itermonthdays4(self, year, month):",
      "docstring": ""
    },
    {
      "name": "monthdatescalendar",
      "args": "self, year, month",
      "signature": "def monthdatescalendar(self, year, month):",
      "docstring": "Return a matrix (list of lists) representing a month's calendar.\n        Each row represents a week; week entries are datetime.date values."
    },
    {
      "name": "monthdays2calendar",
      "args": "self, year, month",
      "signature": "def monthdays2calendar(self, year, month):",
      "docstring": ""
    },
    {
      "name": "monthdayscalendar",
      "args": "self, year, month",
      "signature": "def monthdayscalendar(self, year, month):",
      "docstring": "Return a matrix representing a month's calendar.\n        Each row represents a week; days outside this month are zero."
    },
    {
      "name": "prweek",
      "args": "self, theweek, width",
      "signature": "def prweek(self, theweek, width):",
      "docstring": ""
    },
    {
      "name": "formatday",
      "args": "self, day, weekday, width",
      "signature": "def formatday(self, day, weekday, width):",
      "docstring": ""
    },
    {
      "name": "formatweek",
      "args": "self, theweek, width",
      "signature": "def formatweek(self, theweek, width):",
      "docstring": ""
    },
    {
      "name": "formatweekday",
      "args": "self, day, width",
      "signature": "def formatweekday(self, day, width):",
      "docstring": ""
    },
    {
      "name": "formatweekheader",
      "args": "self, width",
      "signature": "def formatweekheader(self, width):",
      "docstring": ""
    },
    {
      "name": "formatday",
      "args": "self, day, weekday",
      "signature": "def formatday(self, day, weekday):",
      "docstring": ""
    },
    {
      "name": "formatweek",
      "args": "self, theweek",
      "signature": "def formatweek(self, theweek):",
      "docstring": ""
    },
    {
      "name": "formatweekday",
      "args": "self, day",
      "signature": "def formatweekday(self, day):",
      "docstring": ""
    },
    {
      "name": "formatweekheader",
      "args": "self",
      "signature": "def formatweekheader(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, locale",
      "signature": "def __init__(self, locale):",
      "docstring": ""
    },
    {
      "name": "__enter__",
      "args": "self",
      "signature": "def __enter__(self):",
      "docstring": ""
    },
    {
      "name": "__exit__",
      "args": "self, *args",
      "signature": "def __exit__(self, *args):",
      "docstring": ""
    },
    {
      "name": "formatweekday",
      "args": "self = None, day = None, width = None",
      "signature": "def formatweekday(self = None, day = None, width = None):",
      "docstring": ""
    },
    {
      "name": "formatmonthname",
      "args": "self = None, theyear = None, themonth = None, width = None, withyear = None",
      "signature": "def formatmonthname(self = None, theyear = None, themonth = None, width = None, withyear = None):",
      "docstring": ""
    },
    {
      "name": "formatweekday",
      "args": "self = None, day = None",
      "signature": "def formatweekday(self = None, day = None):",
      "docstring": ""
    },
    {
      "name": "formatmonthname",
      "args": "self = None, theyear = None, themonth = None, withyear = None",
      "signature": "def formatmonthname(self = None, theyear = None, themonth = None, withyear = None):",
      "docstring": ""
    },
    {
      "name": "setfirstweekday",
      "args": "firstweekday",
      "signature": "def setfirstweekday(firstweekday):",
      "docstring": ""
    },
    {
      "name": "timegm",
      "args": "tuple",
      "signature": "def timegm(tuple):",
      "docstring": ""
    },
    {
      "name": "main",
      "args": "args",
      "signature": "def main(args):",
      "docstring": ""
    }
  ],
  "subprocess": [],
  "shlex": [
    {
      "name": "punctuation_chars",
      "args": "self",
      "signature": "def punctuation_chars(self):",
      "docstring": ""
    },
    {
      "name": "push_token",
      "args": "self, tok",
      "signature": "def push_token(self, tok):",
      "docstring": ""
    },
    {
      "name": "pop_source",
      "args": "self",
      "signature": "def pop_source(self):",
      "docstring": ""
    },
    {
      "name": "get_token",
      "args": "self",
      "signature": "def get_token(self):",
      "docstring": "Get a token from the input stream (or from stack if it's nonempty)"
    },
    {
      "name": "read_token",
      "args": "self",
      "signature": "def read_token(self):",
      "docstring": ""
    },
    {
      "name": "sourcehook",
      "args": "self, newfile",
      "signature": "def sourcehook(self, newfile):",
      "docstring": ""
    },
    {
      "name": "__iter__",
      "args": "self",
      "signature": "def __iter__(self):",
      "docstring": ""
    },
    {
      "name": "__next__",
      "args": "self",
      "signature": "def __next__(self):",
      "docstring": ""
    },
    {
      "name": "join",
      "args": "split_command",
      "signature": "def join(split_command):",
      "docstring": ""
    },
    {
      "name": "quote",
      "args": "s",
      "signature": "def quote(s):",
      "docstring": ""
    },
    {
      "name": "_print_tokens",
      "args": "lexer",
      "signature": "def _print_tokens(lexer):",
      "docstring": ""
    }
  ],
  "pickle": [],
  "gzip": [
    {
      "name": "write32u",
      "args": "output, value",
      "signature": "def write32u(output, value):",
      "docstring": ""
    },
    {
      "name": "read",
      "args": "self, size",
      "signature": "def read(self, size):",
      "docstring": ""
    },
    {
      "name": "seek",
      "args": "self, off",
      "signature": "def seek(self, off):",
      "docstring": ""
    },
    {
      "name": "seekable",
      "args": "self",
      "signature": "def seekable(self):",
      "docstring": ""
    },
    {
      "name": "filename",
      "args": "self",
      "signature": "def filename(self):",
      "docstring": ""
    },
    {
      "name": "mtime",
      "args": "self",
      "signature": "def mtime(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "_init_write",
      "args": "self, filename",
      "signature": "def _init_write(self, filename):",
      "docstring": ""
    },
    {
      "name": "_write_gzip_header",
      "args": "self, compresslevel",
      "signature": "def _write_gzip_header(self, compresslevel):",
      "docstring": ""
    },
    {
      "name": "write",
      "args": "self, data",
      "signature": "def write(self, data):",
      "docstring": ""
    },
    {
      "name": "peek",
      "args": "self, n",
      "signature": "def peek(self, n):",
      "docstring": ""
    },
    {
      "name": "closed",
      "args": "self",
      "signature": "def closed(self):",
      "docstring": ""
    },
    {
      "name": "close",
      "args": "self",
      "signature": "def close(self):",
      "docstring": ""
    },
    {
      "name": "fileno",
      "args": "self",
      "signature": "def fileno(self):",
      "docstring": "Invoke the underlying file object's fileno() method.\n\n        This will raise AttributeError if the underlying file object\n        doesn't support fileno()."
    },
    {
      "name": "rewind",
      "args": "self",
      "signature": "def rewind(self):",
      "docstring": ""
    },
    {
      "name": "readable",
      "args": "self",
      "signature": "def readable(self):",
      "docstring": ""
    },
    {
      "name": "writable",
      "args": "self",
      "signature": "def writable(self):",
      "docstring": ""
    },
    {
      "name": "seekable",
      "args": "self",
      "signature": "def seekable(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self = None, fp = None",
      "signature": "def __init__(self = None, fp = None):",
      "docstring": ""
    },
    {
      "name": "_init_read",
      "args": "self",
      "signature": "def _init_read(self):",
      "docstring": ""
    },
    {
      "name": "_read_exact",
      "args": "self, n",
      "signature": "def _read_exact(self, n):",
      "docstring": ""
    },
    {
      "name": "_read_gzip_header",
      "args": "self",
      "signature": "def _read_gzip_header(self):",
      "docstring": ""
    },
    {
      "name": "_add_read_data",
      "args": "self, data",
      "signature": "def _add_read_data(self, data):",
      "docstring": ""
    },
    {
      "name": "_read_eof",
      "args": "self",
      "signature": "def _read_eof(self):",
      "docstring": ""
    },
    {
      "name": "_rewind",
      "args": "self = None",
      "signature": "def _rewind(self = None):",
      "docstring": ""
    },
    {
      "name": "decompress",
      "args": "data",
      "signature": "def decompress(data):",
      "docstring": ""
    },
    {
      "name": "main",
      "args": "",
      "signature": "def main():",
      "docstring": ""
    }
  ],
  "_threading_local": [
    {
      "name": "__init__",
      "args": "self",
      "signature": "def __init__(self):",
      "docstring": ""
    },
    {
      "name": "get_dict",
      "args": "self",
      "signature": "def get_dict(self):",
      "docstring": ""
    },
    {
      "name": "create_dict",
      "args": "self",
      "signature": "def create_dict(self):",
      "docstring": ""
    },
    {
      "name": "local_deleted",
      "args": "_ = None, key = None",
      "signature": "def local_deleted(_ = None, key = None):",
      "docstring": ""
    },
    {
      "name": "thread_deleted",
      "args": "_ = None, idt = None",
      "signature": "def thread_deleted(_ = None, idt = None):",
      "docstring": ""
    },
    {
      "name": "_patch",
      "args": "self",
      "signature": "def _patch(self):",
      "docstring": ""
    },
    {
      "name": "__new__",
      "args": "cls, *args, **kw",
      "signature": "def __new__(cls, *args, **kw):",
      "docstring": ""
    },
    {
      "name": "__getattribute__",
      "args": "self, name",
      "signature": "def __getattribute__(self, name):",
      "docstring": ""
    },
    {
      "name": "__setattr__",
      "args": "self, name, value",
      "signature": "def __setattr__(self, name, value):",
      "docstring": ""
    },
    {
      "name": "__delattr__",
      "args": "self, name",
      "signature": "def __delattr__(self, name):",
      "docstring": ""
    }
  ],
  "pathlib": [
    {
      "name": "_ignore_error",
      "args": "exception",
      "signature": "def _ignore_error(exception):",
      "docstring": ""
    },
    {
      "name": "_is_wildcard_pattern",
      "args": "pat",
      "signature": "def _is_wildcard_pattern(pat):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self",
      "signature": "def __init__(self):",
      "docstring": ""
    },
    {
      "name": "parse_parts",
      "args": "self, parts",
      "signature": "def parse_parts(self, parts):",
      "docstring": ""
    },
    {
      "name": "join_parsed_parts",
      "args": "self, drv, root, parts, drv2, root2, parts2",
      "signature": "def join_parsed_parts(self, drv, root, parts, drv2, root2, parts2):",
      "docstring": ""
    },
    {
      "name": "casefold",
      "args": "self, s",
      "signature": "def casefold(self, s):",
      "docstring": ""
    },
    {
      "name": "casefold_parts",
      "args": "self, parts",
      "signature": "def casefold_parts(self, parts):",
      "docstring": ""
    },
    {
      "name": "compile_pattern",
      "args": "self, pattern",
      "signature": "def compile_pattern(self, pattern):",
      "docstring": ""
    },
    {
      "name": "is_reserved",
      "args": "self, parts",
      "signature": "def is_reserved(self, parts):",
      "docstring": ""
    },
    {
      "name": "make_uri",
      "args": "self, path",
      "signature": "def make_uri(self, path):",
      "docstring": ""
    },
    {
      "name": "casefold",
      "args": "self, s",
      "signature": "def casefold(self, s):",
      "docstring": ""
    },
    {
      "name": "casefold_parts",
      "args": "self, parts",
      "signature": "def casefold_parts(self, parts):",
      "docstring": ""
    },
    {
      "name": "compile_pattern",
      "args": "self, pattern",
      "signature": "def compile_pattern(self, pattern):",
      "docstring": ""
    },
    {
      "name": "is_reserved",
      "args": "self, parts",
      "signature": "def is_reserved(self, parts):",
      "docstring": ""
    },
    {
      "name": "make_uri",
      "args": "self, path",
      "signature": "def make_uri(self, path):",
      "docstring": ""
    },
    {
      "name": "link",
      "args": "self, src, dst",
      "signature": "def link(self, src, dst):",
      "docstring": ""
    },
    {
      "name": "readlink",
      "args": "self, path",
      "signature": "def readlink(self, path):",
      "docstring": ""
    },
    {
      "name": "owner",
      "args": "self, path",
      "signature": "def owner(self, path):",
      "docstring": ""
    },
    {
      "name": "group",
      "args": "self, path",
      "signature": "def group(self, path):",
      "docstring": ""
    },
    {
      "name": "_make_selector",
      "args": "pattern_parts, flavour",
      "signature": "def _make_selector(pattern_parts, flavour):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, child_parts, flavour",
      "signature": "def __init__(self, child_parts, flavour):",
      "docstring": ""
    },
    {
      "name": "select_from",
      "args": "self, parent_path",
      "signature": "def select_from(self, parent_path):",
      "docstring": ""
    },
    {
      "name": "_select_from",
      "args": "self, parent_path, is_dir, exists, scandir",
      "signature": "def _select_from(self, parent_path, is_dir, exists, scandir):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, name, child_parts, flavour",
      "signature": "def __init__(self, name, child_parts, flavour):",
      "docstring": ""
    },
    {
      "name": "_select_from",
      "args": "self, parent_path, is_dir, exists, scandir",
      "signature": "def _select_from(self, parent_path, is_dir, exists, scandir):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, pat, child_parts, flavour",
      "signature": "def __init__(self, pat, child_parts, flavour):",
      "docstring": ""
    },
    {
      "name": "_select_from",
      "args": "self, parent_path, is_dir, exists, scandir",
      "signature": "def _select_from(self, parent_path, is_dir, exists, scandir):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, pat, child_parts, flavour",
      "signature": "def __init__(self, pat, child_parts, flavour):",
      "docstring": ""
    },
    {
      "name": "_iterate_directories",
      "args": "self, parent_path, is_dir, scandir",
      "signature": "def _iterate_directories(self, parent_path, is_dir, scandir):",
      "docstring": ""
    },
    {
      "name": "_select_from",
      "args": "self, parent_path, is_dir, exists, scandir",
      "signature": "def _select_from(self, parent_path, is_dir, exists, scandir):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, path",
      "signature": "def __init__(self, path):",
      "docstring": ""
    },
    {
      "name": "__len__",
      "args": "self",
      "signature": "def __len__(self):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self, idx",
      "signature": "def __getitem__(self, idx):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__new__",
      "args": "cls, *args",
      "signature": "def __new__(cls, *args):",
      "docstring": ""
    },
    {
      "name": "__reduce__",
      "args": "self",
      "signature": "def __reduce__(self):",
      "docstring": ""
    },
    {
      "name": "_parse_args",
      "args": "cls, args",
      "signature": "def _parse_args(cls, args):",
      "docstring": ""
    },
    {
      "name": "_from_parts",
      "args": "cls, args",
      "signature": "def _from_parts(cls, args):",
      "docstring": ""
    },
    {
      "name": "_from_parsed_parts",
      "args": "cls, drv, root, parts",
      "signature": "def _from_parsed_parts(cls, drv, root, parts):",
      "docstring": ""
    },
    {
      "name": "_format_parsed_parts",
      "args": "cls, drv, root, parts",
      "signature": "def _format_parsed_parts(cls, drv, root, parts):",
      "docstring": ""
    },
    {
      "name": "_make_child",
      "args": "self, args",
      "signature": "def _make_child(self, args):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "__fspath__",
      "args": "self",
      "signature": "def __fspath__(self):",
      "docstring": ""
    },
    {
      "name": "as_posix",
      "args": "self",
      "signature": "def as_posix(self):",
      "docstring": ""
    },
    {
      "name": "__bytes__",
      "args": "self",
      "signature": "def __bytes__(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": "Return the path as a 'file' URI."
    },
    {
      "name": "as_uri",
      "args": "self",
      "signature": "def as_uri(self):",
      "docstring": "Return the path as a 'file' URI."
    },
    {
      "name": "_cparts",
      "args": "self",
      "signature": "def _cparts(self):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "__hash__",
      "args": "self",
      "signature": "def __hash__(self):",
      "docstring": ""
    },
    {
      "name": "__lt__",
      "args": "self, other",
      "signature": "def __lt__(self, other):",
      "docstring": ""
    },
    {
      "name": "__le__",
      "args": "self, other",
      "signature": "def __le__(self, other):",
      "docstring": ""
    },
    {
      "name": "__gt__",
      "args": "self, other",
      "signature": "def __gt__(self, other):",
      "docstring": ""
    },
    {
      "name": "__ge__",
      "args": "self, other",
      "signature": "def __ge__(self, other):",
      "docstring": ""
    },
    {
      "name": "__class_getitem__",
      "args": "cls, type",
      "signature": "def __class_getitem__(cls, type):",
      "docstring": ""
    },
    {
      "name": "anchor",
      "args": "self",
      "signature": "def anchor(self):",
      "docstring": "The concatenation of the drive and root, or ''."
    },
    {
      "name": "name",
      "args": "self",
      "signature": "def name(self):",
      "docstring": ""
    },
    {
      "name": "suffix",
      "args": "self",
      "signature": "def suffix(self):",
      "docstring": "The final component's last suffix, if any.\n\n        This includes the leading period. For example: '.txt'"
    },
    {
      "name": "suffixes",
      "args": "self",
      "signature": "def suffixes(self):",
      "docstring": "A list of the final component's suffixes, if any.\n\n        These include the leading periods. For example: ['.tar', '.gz']"
    },
    {
      "name": "stem",
      "args": "self",
      "signature": "def stem(self):",
      "docstring": ""
    },
    {
      "name": "with_name",
      "args": "self, name",
      "signature": "def with_name(self, name):",
      "docstring": ""
    },
    {
      "name": "with_stem",
      "args": "self, stem",
      "signature": "def with_stem(self, stem):",
      "docstring": ""
    },
    {
      "name": "with_suffix",
      "args": "self, suffix",
      "signature": "def with_suffix(self, suffix):",
      "docstring": ""
    },
    {
      "name": "relative_to",
      "args": "self, *other",
      "signature": "def relative_to(self, *other):",
      "docstring": ""
    },
    {
      "name": "is_relative_to",
      "args": "self, *other",
      "signature": "def is_relative_to(self, *other):",
      "docstring": ""
    },
    {
      "name": "parts",
      "args": "self",
      "signature": "def parts(self):",
      "docstring": ""
    },
    {
      "name": "joinpath",
      "args": "self, *args",
      "signature": "def joinpath(self, *args):",
      "docstring": ""
    },
    {
      "name": "__truediv__",
      "args": "self, key",
      "signature": "def __truediv__(self, key):",
      "docstring": ""
    },
    {
      "name": "__rtruediv__",
      "args": "self, key",
      "signature": "def __rtruediv__(self, key):",
      "docstring": ""
    },
    {
      "name": "parent",
      "args": "self",
      "signature": "def parent(self):",
      "docstring": ""
    },
    {
      "name": "parents",
      "args": "self",
      "signature": "def parents(self):",
      "docstring": "A sequence of this path's logical parents."
    },
    {
      "name": "is_absolute",
      "args": "self",
      "signature": "def is_absolute(self):",
      "docstring": ""
    },
    {
      "name": "is_reserved",
      "args": "self",
      "signature": "def is_reserved(self):",
      "docstring": ""
    },
    {
      "name": "match",
      "args": "self, path_pattern",
      "signature": "def match(self, path_pattern):",
      "docstring": ""
    },
    {
      "name": "__new__",
      "args": "cls, *args, **kwargs",
      "signature": "def __new__(cls, *args, **kwargs):",
      "docstring": ""
    },
    {
      "name": "_make_child_relpath",
      "args": "self, part",
      "signature": "def _make_child_relpath(self, part):",
      "docstring": ""
    },
    {
      "name": "__enter__",
      "args": "self",
      "signature": "def __enter__(self):",
      "docstring": ""
    },
    {
      "name": "__exit__",
      "args": "self, t, v, tb",
      "signature": "def __exit__(self, t, v, tb):",
      "docstring": ""
    },
    {
      "name": "cwd",
      "args": "cls",
      "signature": "def cwd(cls):",
      "docstring": ""
    },
    {
      "name": "home",
      "args": "cls",
      "signature": "def home(cls):",
      "docstring": "Return a new path pointing to the user's home directory (as\n        returned by os.path.expanduser('~'))."
    },
    {
      "name": "samefile",
      "args": "self, other_path",
      "signature": "def samefile(self, other_path):",
      "docstring": ""
    },
    {
      "name": "iterdir",
      "args": "self",
      "signature": "def iterdir(self):",
      "docstring": "Iterate over the files in this directory.  Does not yield any\n        result for the special paths '.' and '..'."
    },
    {
      "name": "glob",
      "args": "self, pattern",
      "signature": "def glob(self, pattern):",
      "docstring": ""
    },
    {
      "name": "rglob",
      "args": "self, pattern",
      "signature": "def rglob(self, pattern):",
      "docstring": ""
    },
    {
      "name": "absolute",
      "args": "self",
      "signature": "def absolute(self):",
      "docstring": ""
    },
    {
      "name": "check_eloop",
      "args": "e",
      "signature": "def check_eloop(e):",
      "docstring": ""
    },
    {
      "name": "stat",
      "args": "self = None, *, follow_symlinks",
      "signature": "def stat(self = None, *, follow_symlinks):",
      "docstring": ""
    },
    {
      "name": "owner",
      "args": "self",
      "signature": "def owner(self):",
      "docstring": ""
    },
    {
      "name": "group",
      "args": "self",
      "signature": "def group(self):",
      "docstring": ""
    },
    {
      "name": "read_bytes",
      "args": "self",
      "signature": "def read_bytes(self):",
      "docstring": ""
    },
    {
      "name": "write_bytes",
      "args": "self, data",
      "signature": "def write_bytes(self, data):",
      "docstring": ""
    },
    {
      "name": "readlink",
      "args": "self",
      "signature": "def readlink(self):",
      "docstring": ""
    },
    {
      "name": "chmod",
      "args": "self = None, mode = {\n        'follow_symlinks': True }, *, follow_symlinks",
      "signature": "def chmod(self = None, mode = {\n        'follow_symlinks': True }, *, follow_symlinks):",
      "docstring": ""
    },
    {
      "name": "lchmod",
      "args": "self, mode",
      "signature": "def lchmod(self, mode):",
      "docstring": "Like chmod(), except if the path points to a symlink, the symlink's\n        permissions are changed, rather than its target's."
    },
    {
      "name": "rmdir",
      "args": "self",
      "signature": "def rmdir(self):",
      "docstring": ""
    },
    {
      "name": "lstat",
      "args": "self",
      "signature": "def lstat(self):",
      "docstring": "Like stat(), except if the path points to a symlink, the symlink's\n        status information is returned, rather than its target's."
    },
    {
      "name": "rename",
      "args": "self, target",
      "signature": "def rename(self, target):",
      "docstring": ""
    },
    {
      "name": "replace",
      "args": "self, target",
      "signature": "def replace(self, target):",
      "docstring": ""
    }
  ],
  "_py_abc": [
    {
      "name": "get_cache_token",
      "args": "",
      "signature": "def get_cache_token():",
      "docstring": ""
    },
    {
      "name": "__new__",
      "args": "mcls = None, name = None, bases = None, namespace = None, **kwargs",
      "signature": "def __new__(mcls = None, name = None, bases = None, namespace = None, **kwargs):",
      "docstring": ""
    },
    {
      "name": "register",
      "args": "cls, subclass",
      "signature": "def register(cls, subclass):",
      "docstring": ""
    },
    {
      "name": "_abc_registry_clear",
      "args": "cls",
      "signature": "def _abc_registry_clear(cls):",
      "docstring": ""
    },
    {
      "name": "_abc_caches_clear",
      "args": "cls",
      "signature": "def _abc_caches_clear(cls):",
      "docstring": ""
    },
    {
      "name": "__instancecheck__",
      "args": "cls, instance",
      "signature": "def __instancecheck__(cls, instance):",
      "docstring": ""
    },
    {
      "name": "__subclasscheck__",
      "args": "cls, subclass",
      "signature": "def __subclasscheck__(cls, subclass):",
      "docstring": ""
    }
  ],
  "contextlib": [
    {
      "name": "__enter__",
      "args": "self",
      "signature": "def __enter__(self):",
      "docstring": ""
    },
    {
      "name": "__exit__",
      "args": "self, exc_type, exc_value, traceback",
      "signature": "def __exit__(self, exc_type, exc_value, traceback):",
      "docstring": ""
    },
    {
      "name": "__subclasshook__",
      "args": "cls, C",
      "signature": "def __subclasshook__(cls, C):",
      "docstring": ""
    },
    {
      "name": "__subclasshook__",
      "args": "cls, C",
      "signature": "def __subclasshook__(cls, C):",
      "docstring": ""
    },
    {
      "name": "_recreate_cm",
      "args": "self",
      "signature": "def _recreate_cm(self):",
      "docstring": ""
    },
    {
      "name": "__call__",
      "args": "self, func",
      "signature": "def __call__(self, func):",
      "docstring": ""
    },
    {
      "name": "inner",
      "args": "*args, **kwds",
      "signature": "def inner(*args, **kwds):",
      "docstring": ""
    },
    {
      "name": "_recreate_cm",
      "args": "self",
      "signature": "def _recreate_cm(self):",
      "docstring": ""
    },
    {
      "name": "__call__",
      "args": "self, func",
      "signature": "def __call__(self, func):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, func, args, kwds",
      "signature": "def __init__(self, func, args, kwds):",
      "docstring": ""
    },
    {
      "name": "_recreate_cm",
      "args": "self",
      "signature": "def _recreate_cm(self):",
      "docstring": ""
    },
    {
      "name": "__enter__",
      "args": "self",
      "signature": "def __enter__(self):",
      "docstring": ""
    },
    {
      "name": "__exit__",
      "args": "self, typ, value, traceback",
      "signature": "def __exit__(self, typ, value, traceback):",
      "docstring": ""
    },
    {
      "name": "contextmanager",
      "args": "func",
      "signature": "def contextmanager(func):",
      "docstring": ""
    },
    {
      "name": "some_generator",
      "args": "<arguments>",
      "signature": "def some_generator(<arguments>):",
      "docstring": ""
    },
    {
      "name": "helper",
      "args": "*args, **kwds",
      "signature": "def helper(*args, **kwds):",
      "docstring": ""
    },
    {
      "name": "asynccontextmanager",
      "args": "func",
      "signature": "def asynccontextmanager(func):",
      "docstring": ""
    },
    {
      "name": "helper",
      "args": "*args, **kwds",
      "signature": "def helper(*args, **kwds):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, thing",
      "signature": "def __init__(self, thing):",
      "docstring": ""
    },
    {
      "name": "__enter__",
      "args": "self",
      "signature": "def __enter__(self):",
      "docstring": ""
    },
    {
      "name": "__exit__",
      "args": "self, *exc_info",
      "signature": "def __exit__(self, *exc_info):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, thing",
      "signature": "def __init__(self, thing):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, new_target",
      "signature": "def __init__(self, new_target):",
      "docstring": ""
    },
    {
      "name": "__enter__",
      "args": "self",
      "signature": "def __enter__(self):",
      "docstring": ""
    },
    {
      "name": "__exit__",
      "args": "self, exctype, excinst, exctb",
      "signature": "def __exit__(self, exctype, excinst, exctb):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, *exceptions",
      "signature": "def __init__(self, *exceptions):",
      "docstring": ""
    },
    {
      "name": "__enter__",
      "args": "self",
      "signature": "def __enter__(self):",
      "docstring": ""
    },
    {
      "name": "__exit__",
      "args": "self, exctype, excinst, exctb",
      "signature": "def __exit__(self, exctype, excinst, exctb):",
      "docstring": ""
    },
    {
      "name": "_create_exit_wrapper",
      "args": "cm, cm_exit",
      "signature": "def _create_exit_wrapper(cm, cm_exit):",
      "docstring": ""
    },
    {
      "name": "_create_cb_wrapper",
      "args": "callback, *args, **kwds",
      "signature": "def _create_cb_wrapper(callback, *args, **kwds):",
      "docstring": ""
    },
    {
      "name": "_exit_wrapper",
      "args": "exc_type = None, exc = None, tb = None",
      "signature": "def _exit_wrapper(exc_type = None, exc = None, tb = None):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self",
      "signature": "def __init__(self):",
      "docstring": ""
    },
    {
      "name": "pop_all",
      "args": "self",
      "signature": "def pop_all(self):",
      "docstring": ""
    },
    {
      "name": "push",
      "args": "self, exit",
      "signature": "def push(self, exit):",
      "docstring": ""
    },
    {
      "name": "enter_context",
      "args": "self, cm",
      "signature": "def enter_context(self, cm):",
      "docstring": ""
    },
    {
      "name": "callback",
      "args": "self, callback, *args, **kwds",
      "signature": "def callback(self, callback, *args, **kwds):",
      "docstring": ""
    },
    {
      "name": "_push_cm_exit",
      "args": "self, cm, cm_exit",
      "signature": "def _push_cm_exit(self, cm, cm_exit):",
      "docstring": ""
    },
    {
      "name": "__enter__",
      "args": "self",
      "signature": "def __enter__(self):",
      "docstring": ""
    },
    {
      "name": "__exit__",
      "args": "self, *exc_details",
      "signature": "def __exit__(self, *exc_details):",
      "docstring": ""
    },
    {
      "name": "_fix_exception_context",
      "args": "new_exc = None, old_exc = None",
      "signature": "def _fix_exception_context(new_exc = None, old_exc = None):",
      "docstring": ""
    },
    {
      "name": "close",
      "args": "self",
      "signature": "def close(self):",
      "docstring": ""
    },
    {
      "name": "_create_async_exit_wrapper",
      "args": "cm, cm_exit",
      "signature": "def _create_async_exit_wrapper(cm, cm_exit):",
      "docstring": ""
    },
    {
      "name": "_create_async_cb_wrapper",
      "args": "callback, *args, **kwds",
      "signature": "def _create_async_cb_wrapper(callback, *args, **kwds):",
      "docstring": ""
    },
    {
      "name": "push_async_exit",
      "args": "self, exit",
      "signature": "def push_async_exit(self, exit):",
      "docstring": ""
    },
    {
      "name": "push_async_callback",
      "args": "self, callback, *args, **kwds",
      "signature": "def push_async_callback(self, callback, *args, **kwds):",
      "docstring": ""
    },
    {
      "name": "_push_async_cm_exit",
      "args": "self, cm, cm_exit",
      "signature": "def _push_async_cm_exit(self, cm, cm_exit):",
      "docstring": ""
    },
    {
      "name": "_fix_exception_context",
      "args": "new_exc = None, old_exc = None",
      "signature": "def _fix_exception_context(new_exc = None, old_exc = None):",
      "docstring": ""
    },
    {
      "name": "__enter__",
      "args": "self",
      "signature": "def __enter__(self):",
      "docstring": ""
    },
    {
      "name": "__exit__",
      "args": "self, *excinfo",
      "signature": "def __exit__(self, *excinfo):",
      "docstring": ""
    }
  ],
  "uu": [
    {
      "name": "test",
      "args": "",
      "signature": "def test():",
      "docstring": ""
    }
  ],
  "py_compile": [
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "_get_default_invalidation_mode",
      "args": "",
      "signature": "def _get_default_invalidation_mode():",
      "docstring": ""
    },
    {
      "name": "main",
      "args": "",
      "signature": "def main():",
      "docstring": ""
    }
  ],
  "string": [
    {
      "name": "__init_subclass__",
      "args": "cls = None",
      "signature": "def __init_subclass__(cls = None):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, template",
      "signature": "def __init__(self, template):",
      "docstring": ""
    },
    {
      "name": "_invalid",
      "args": "self, mo",
      "signature": "def _invalid(self, mo):",
      "docstring": ""
    },
    {
      "name": "convert",
      "args": "mo = None",
      "signature": "def convert(mo = None):",
      "docstring": ""
    },
    {
      "name": "convert",
      "args": "mo = None",
      "signature": "def convert(mo = None):",
      "docstring": ""
    },
    {
      "name": "format",
      "args": "self, format_string, *args, **kwargs",
      "signature": "def format(self, format_string, *args, **kwargs):",
      "docstring": ""
    },
    {
      "name": "vformat",
      "args": "self, format_string, args, kwargs",
      "signature": "def vformat(self, format_string, args, kwargs):",
      "docstring": ""
    },
    {
      "name": "get_value",
      "args": "self, key, args, kwargs",
      "signature": "def get_value(self, key, args, kwargs):",
      "docstring": ""
    },
    {
      "name": "check_unused_args",
      "args": "self, used_args, args, kwargs",
      "signature": "def check_unused_args(self, used_args, args, kwargs):",
      "docstring": ""
    },
    {
      "name": "format_field",
      "args": "self, value, format_spec",
      "signature": "def format_field(self, value, format_spec):",
      "docstring": ""
    },
    {
      "name": "convert_field",
      "args": "self, value, conversion",
      "signature": "def convert_field(self, value, conversion):",
      "docstring": ""
    },
    {
      "name": "parse",
      "args": "self, format_string",
      "signature": "def parse(self, format_string):",
      "docstring": ""
    },
    {
      "name": "get_field",
      "args": "self, field_name, args, kwargs",
      "signature": "def get_field(self, field_name, args, kwargs):",
      "docstring": ""
    }
  ],
  "dataclasses": [
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, name",
      "signature": "def __init__(self, name):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "_recursive_repr",
      "args": "user_function",
      "signature": "def _recursive_repr(user_function):",
      "docstring": ""
    },
    {
      "name": "wrapper",
      "args": "self = None",
      "signature": "def wrapper(self = None):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, type",
      "signature": "def __init__(self, type):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__class_getitem__",
      "args": "cls, type",
      "signature": "def __class_getitem__(cls, type):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, default, default_factory, init, repr, hash, compare, metadata, kw_only",
      "signature": "def __init__(self, default, default_factory, init, repr, hash, compare, metadata, kw_only):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__set_name__",
      "args": "self, owner, name",
      "signature": "def __set_name__(self, owner, name):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, init, repr, eq, order, unsafe_hash, frozen",
      "signature": "def __init__(self, init, repr, eq, order, unsafe_hash, frozen):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "field",
      "args": "*, default, default_factory, init, repr, hash, compare, metadata, kw_only",
      "signature": "def field(*, default, default_factory, init, repr, hash, compare, metadata, kw_only):",
      "docstring": ""
    },
    {
      "name": "_fields_in_init_order",
      "args": "fields",
      "signature": "def _fields_in_init_order(fields):",
      "docstring": ""
    },
    {
      "name": "_tuple_str",
      "args": "obj_name, fields",
      "signature": "def _tuple_str(obj_name, fields):",
      "docstring": ""
    },
    {
      "name": "_create_fn",
      "args": "name, args = None, body = {\n    'globals': None,\n    'locals': None,\n    'return_type': MISSING }, *, globals, locals, return_type",
      "signature": "def _create_fn(name, args = None, body = {\n    'globals': None,\n    'locals': None,\n    'return_type': MISSING }, *, globals, locals, return_type):",
      "docstring": ""
    },
    {
      "name": "_field_assign",
      "args": "frozen, name, value, self_name",
      "signature": "def _field_assign(frozen, name, value, self_name):",
      "docstring": ""
    },
    {
      "name": "_field_init",
      "args": "f, frozen, globals, self_name, slots",
      "signature": "def _field_init(f, frozen, globals, self_name, slots):",
      "docstring": ""
    },
    {
      "name": "_init_param",
      "args": "f",
      "signature": "def _init_param(f):",
      "docstring": ""
    },
    {
      "name": "_init_fn",
      "args": "fields, std_fields, kw_only_fields, frozen, has_post_init, self_name, globals, slots",
      "signature": "def _init_fn(fields, std_fields, kw_only_fields, frozen, has_post_init, self_name, globals, slots):",
      "docstring": ""
    },
    {
      "name": "_repr_fn",
      "args": "fields, globals",
      "signature": "def _repr_fn(fields, globals):",
      "docstring": ""
    },
    {
      "name": "_frozen_get_del_attr",
      "args": "cls, fields, globals",
      "signature": "def _frozen_get_del_attr(cls, fields, globals):",
      "docstring": ""
    },
    {
      "name": "_cmp_fn",
      "args": "name, op, self_tuple, other_tuple, globals",
      "signature": "def _cmp_fn(name, op, self_tuple, other_tuple, globals):",
      "docstring": ""
    },
    {
      "name": "_hash_fn",
      "args": "fields, globals",
      "signature": "def _hash_fn(fields, globals):",
      "docstring": ""
    },
    {
      "name": "_is_classvar",
      "args": "a_type, typing",
      "signature": "def _is_classvar(a_type, typing):",
      "docstring": ""
    },
    {
      "name": "_is_initvar",
      "args": "a_type, dataclasses",
      "signature": "def _is_initvar(a_type, dataclasses):",
      "docstring": ""
    },
    {
      "name": "_is_kw_only",
      "args": "a_type, dataclasses",
      "signature": "def _is_kw_only(a_type, dataclasses):",
      "docstring": ""
    },
    {
      "name": "_is_type",
      "args": "annotation, cls, a_module, a_type, is_type_predicate",
      "signature": "def _is_type(annotation, cls, a_module, a_type, is_type_predicate):",
      "docstring": ""
    },
    {
      "name": "_get_field",
      "args": "cls, a_name, a_type, default_kw_only",
      "signature": "def _get_field(cls, a_name, a_type, default_kw_only):",
      "docstring": ""
    },
    {
      "name": "_set_qualname",
      "args": "cls, value",
      "signature": "def _set_qualname(cls, value):",
      "docstring": ""
    },
    {
      "name": "_set_new_attribute",
      "args": "cls, name, value",
      "signature": "def _set_new_attribute(cls, name, value):",
      "docstring": ""
    },
    {
      "name": "_hash_set_none",
      "args": "cls, fields, globals",
      "signature": "def _hash_set_none(cls, fields, globals):",
      "docstring": ""
    },
    {
      "name": "_hash_add",
      "args": "cls, fields, globals",
      "signature": "def _hash_add(cls, fields, globals):",
      "docstring": ""
    },
    {
      "name": "_hash_exception",
      "args": "cls, fields, globals",
      "signature": "def _hash_exception(cls, fields, globals):",
      "docstring": ""
    }
  ],
  "gettext": [
    {
      "name": "_tokenize",
      "args": "plural",
      "signature": "def _tokenize(plural):",
      "docstring": ""
    },
    {
      "name": "_error",
      "args": "value",
      "signature": "def _error(value):",
      "docstring": ""
    },
    {
      "name": "_as_int",
      "args": "n",
      "signature": "def _as_int(n):",
      "docstring": ""
    },
    {
      "name": "c2py",
      "args": "plural",
      "signature": "def c2py(plural):",
      "docstring": ""
    }
  ],
  "optparse": [
    {
      "name": "_repr",
      "args": "self",
      "signature": "def _repr(self):",
      "docstring": ""
    }
  ],
  "ast": [],
  "bz2": [
    {
      "name": "close",
      "args": "self",
      "signature": "def close(self):",
      "docstring": ""
    },
    {
      "name": "closed",
      "args": "self",
      "signature": "def closed(self):",
      "docstring": ""
    },
    {
      "name": "fileno",
      "args": "self",
      "signature": "def fileno(self):",
      "docstring": ""
    },
    {
      "name": "seekable",
      "args": "self",
      "signature": "def seekable(self):",
      "docstring": ""
    },
    {
      "name": "readable",
      "args": "self",
      "signature": "def readable(self):",
      "docstring": ""
    },
    {
      "name": "writable",
      "args": "self",
      "signature": "def writable(self):",
      "docstring": ""
    },
    {
      "name": "readinto",
      "args": "self, b",
      "signature": "def readinto(self, b):",
      "docstring": ""
    },
    {
      "name": "write",
      "args": "self, data",
      "signature": "def write(self, data):",
      "docstring": ""
    },
    {
      "name": "writelines",
      "args": "self, seq",
      "signature": "def writelines(self, seq):",
      "docstring": ""
    },
    {
      "name": "tell",
      "args": "self",
      "signature": "def tell(self):",
      "docstring": ""
    },
    {
      "name": "decompress",
      "args": "data",
      "signature": "def decompress(data):",
      "docstring": ""
    }
  ],
  "_pydecimal": [],
  "tracemalloc": [
    {
      "name": "_format_size",
      "args": "size, sign",
      "signature": "def _format_size(size, sign):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, traceback, size, count",
      "signature": "def __init__(self, traceback, size, count):",
      "docstring": ""
    },
    {
      "name": "__hash__",
      "args": "self",
      "signature": "def __hash__(self):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "_sort_key",
      "args": "self",
      "signature": "def _sort_key(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, traceback, size, size_diff, count, count_diff",
      "signature": "def __init__(self, traceback, size, size_diff, count, count_diff):",
      "docstring": ""
    },
    {
      "name": "__hash__",
      "args": "self",
      "signature": "def __hash__(self):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "_sort_key",
      "args": "self",
      "signature": "def _sort_key(self):",
      "docstring": ""
    },
    {
      "name": "_compare_grouped_stats",
      "args": "old_group, new_group",
      "signature": "def _compare_grouped_stats(old_group, new_group):",
      "docstring": ""
    },
    {
      "name": "get_object_traceback",
      "args": "obj",
      "signature": "def get_object_traceback(obj):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, trace",
      "signature": "def __init__(self, trace):",
      "docstring": ""
    },
    {
      "name": "domain",
      "args": "self",
      "signature": "def domain(self):",
      "docstring": ""
    },
    {
      "name": "size",
      "args": "self",
      "signature": "def size(self):",
      "docstring": ""
    },
    {
      "name": "traceback",
      "args": "self",
      "signature": "def traceback(self):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "__hash__",
      "args": "self",
      "signature": "def __hash__(self):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, traces",
      "signature": "def __init__(self, traces):",
      "docstring": ""
    },
    {
      "name": "__len__",
      "args": "self",
      "signature": "def __len__(self):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self, index",
      "signature": "def __getitem__(self, index):",
      "docstring": ""
    },
    {
      "name": "__contains__",
      "args": "self, trace",
      "signature": "def __contains__(self, trace):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "_normalize_filename",
      "args": "filename",
      "signature": "def _normalize_filename(filename):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, inclusive",
      "signature": "def __init__(self, inclusive):",
      "docstring": ""
    },
    {
      "name": "_match",
      "args": "self, trace",
      "signature": "def _match(self, trace):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self = None, inclusive = None, filename_pattern = None, lineno = None, all_frames = None, domain = None",
      "signature": "def __init__(self = None, inclusive = None, filename_pattern = None, lineno = None, all_frames = None, domain = None):",
      "docstring": ""
    },
    {
      "name": "filename_pattern",
      "args": "self",
      "signature": "def filename_pattern(self):",
      "docstring": ""
    },
    {
      "name": "_match_frame_impl",
      "args": "self, filename, lineno",
      "signature": "def _match_frame_impl(self, filename, lineno):",
      "docstring": ""
    },
    {
      "name": "_match_frame",
      "args": "self, filename, lineno",
      "signature": "def _match_frame(self, filename, lineno):",
      "docstring": ""
    },
    {
      "name": "_match_traceback",
      "args": "self, traceback",
      "signature": "def _match_traceback(self, traceback):",
      "docstring": ""
    },
    {
      "name": "_match",
      "args": "self, trace",
      "signature": "def _match(self, trace):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self = None, inclusive = None, domain = None",
      "signature": "def __init__(self = None, inclusive = None, domain = None):",
      "docstring": ""
    },
    {
      "name": "domain",
      "args": "self",
      "signature": "def domain(self):",
      "docstring": ""
    },
    {
      "name": "_match",
      "args": "self, trace",
      "signature": "def _match(self, trace):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, traces, traceback_limit",
      "signature": "def __init__(self, traces, traceback_limit):",
      "docstring": ""
    },
    {
      "name": "dump",
      "args": "self, filename",
      "signature": "def dump(self, filename):",
      "docstring": ""
    },
    {
      "name": "load",
      "args": "filename",
      "signature": "def load(filename):",
      "docstring": ""
    },
    {
      "name": "_filter_trace",
      "args": "self, include_filters, exclude_filters, trace",
      "signature": "def _filter_trace(self, include_filters, exclude_filters, trace):",
      "docstring": ""
    },
    {
      "name": "filter_traces",
      "args": "self, filters",
      "signature": "def filter_traces(self, filters):",
      "docstring": ""
    },
    {
      "name": "_group_by",
      "args": "self, key_type, cumulative",
      "signature": "def _group_by(self, key_type, cumulative):",
      "docstring": ""
    },
    {
      "name": "take_snapshot",
      "args": "",
      "signature": "def take_snapshot():",
      "docstring": ""
    }
  ],
  "selectors": [
    {
      "name": "_fileobj_to_fd",
      "args": "fileobj",
      "signature": "def _fileobj_to_fd(fileobj):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, selector",
      "signature": "def __init__(self, selector):",
      "docstring": ""
    },
    {
      "name": "__len__",
      "args": "self",
      "signature": "def __len__(self):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self, fileobj",
      "signature": "def __getitem__(self, fileobj):",
      "docstring": ""
    },
    {
      "name": "__iter__",
      "args": "self",
      "signature": "def __iter__(self):",
      "docstring": ""
    },
    {
      "name": "unregister",
      "args": "self, fileobj",
      "signature": "def unregister(self, fileobj):",
      "docstring": ""
    },
    {
      "name": "close",
      "args": "self",
      "signature": "def close(self):",
      "docstring": ""
    },
    {
      "name": "get_key",
      "args": "self, fileobj",
      "signature": "def get_key(self, fileobj):",
      "docstring": ""
    }
  ],
  "parse": [
    {
      "name": "clear_cache",
      "args": "",
      "signature": "def clear_cache():",
      "docstring": ""
    },
    {
      "name": "_noop",
      "args": "obj",
      "signature": "def _noop(obj):",
      "docstring": ""
    },
    {
      "name": "_coerce_args",
      "args": "*args",
      "signature": "def _coerce_args(*args):",
      "docstring": ""
    },
    {
      "name": "username",
      "args": "self",
      "signature": "def username(self):",
      "docstring": ""
    },
    {
      "name": "password",
      "args": "self",
      "signature": "def password(self):",
      "docstring": ""
    },
    {
      "name": "hostname",
      "args": "self",
      "signature": "def hostname(self):",
      "docstring": ""
    },
    {
      "name": "port",
      "args": "self",
      "signature": "def port(self):",
      "docstring": ""
    },
    {
      "name": "_userinfo",
      "args": "self",
      "signature": "def _userinfo(self):",
      "docstring": ""
    },
    {
      "name": "_hostinfo",
      "args": "self",
      "signature": "def _hostinfo(self):",
      "docstring": ""
    },
    {
      "name": "_userinfo",
      "args": "self",
      "signature": "def _userinfo(self):",
      "docstring": ""
    },
    {
      "name": "_hostinfo",
      "args": "self",
      "signature": "def _hostinfo(self):",
      "docstring": ""
    },
    {
      "name": "geturl",
      "args": "self",
      "signature": "def geturl(self):",
      "docstring": ""
    },
    {
      "name": "geturl",
      "args": "self",
      "signature": "def geturl(self):",
      "docstring": ""
    },
    {
      "name": "geturl",
      "args": "self",
      "signature": "def geturl(self):",
      "docstring": ""
    },
    {
      "name": "geturl",
      "args": "self",
      "signature": "def geturl(self):",
      "docstring": ""
    },
    {
      "name": "geturl",
      "args": "self",
      "signature": "def geturl(self):",
      "docstring": ""
    },
    {
      "name": "geturl",
      "args": "self",
      "signature": "def geturl(self):",
      "docstring": ""
    },
    {
      "name": "_fix_result_transcoding",
      "args": "",
      "signature": "def _fix_result_transcoding():",
      "docstring": ""
    },
    {
      "name": "_splitparams",
      "args": "url",
      "signature": "def _splitparams(url):",
      "docstring": ""
    },
    {
      "name": "_checknetloc",
      "args": "netloc",
      "signature": "def _checknetloc(netloc):",
      "docstring": ""
    },
    {
      "name": "_check_bracketed_netloc",
      "args": "netloc",
      "signature": "def _check_bracketed_netloc(netloc):",
      "docstring": ""
    },
    {
      "name": "_check_bracketed_host",
      "args": "hostname",
      "signature": "def _check_bracketed_host(hostname):",
      "docstring": ""
    },
    {
      "name": "urlunparse",
      "args": "components",
      "signature": "def urlunparse(components):",
      "docstring": ""
    },
    {
      "name": "urlunsplit",
      "args": "components",
      "signature": "def urlunsplit(components):",
      "docstring": ""
    },
    {
      "name": "urldefrag",
      "args": "url",
      "signature": "def urldefrag(url):",
      "docstring": ""
    },
    {
      "name": "unquote_to_bytes",
      "args": "string",
      "signature": "def unquote_to_bytes(string):",
      "docstring": "unquote_to_bytes('abc%20def') -> b'abc def'."
    },
    {
      "name": "__init__",
      "args": "self, safe",
      "signature": "def __init__(self, safe):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__missing__",
      "args": "self, b",
      "signature": "def __missing__(self, b):",
      "docstring": ""
    }
  ],
  "__init__": [],
  "ttk": [
    {
      "name": "_load_tile",
      "args": "master",
      "signature": "def _load_tile(master):",
      "docstring": ""
    },
    {
      "name": "_mapdict_values",
      "args": "items",
      "signature": "def _mapdict_values(items):",
      "docstring": ""
    },
    {
      "name": "_script_from_settings",
      "args": "settings",
      "signature": "def _script_from_settings(settings):",
      "docstring": ""
    },
    {
      "name": "_list_from_statespec",
      "args": "stuple",
      "signature": "def _list_from_statespec(stuple):",
      "docstring": ""
    },
    {
      "name": "_list_from_layouttuple",
      "args": "tk, ltuple",
      "signature": "def _list_from_layouttuple(tk, ltuple):",
      "docstring": ""
    },
    {
      "name": "_val_or_dict",
      "args": "tk, options, *args",
      "signature": "def _val_or_dict(tk, options, *args):",
      "docstring": ""
    },
    {
      "name": "_convert_stringval",
      "args": "value",
      "signature": "def _convert_stringval(value):",
      "docstring": ""
    },
    {
      "name": "_to_number",
      "args": "x",
      "signature": "def _to_number(x):",
      "docstring": ""
    },
    {
      "name": "_tclobj_to_py",
      "args": "val",
      "signature": "def _tclobj_to_py(val):",
      "docstring": ""
    },
    {
      "name": "tclobjs_to_py",
      "args": "adict",
      "signature": "def tclobjs_to_py(adict):",
      "docstring": ""
    },
    {
      "name": "element_create",
      "args": "self, elementname, etype, *args, **kw",
      "signature": "def element_create(self, elementname, etype, *args, **kw):",
      "docstring": ""
    },
    {
      "name": "element_names",
      "args": "self",
      "signature": "def element_names(self):",
      "docstring": ""
    },
    {
      "name": "element_options",
      "args": "self, elementname",
      "signature": "def element_options(self, elementname):",
      "docstring": "Return the list of elementname's options."
    },
    {
      "name": "theme_settings",
      "args": "self, themename, settings",
      "signature": "def theme_settings(self, themename, settings):",
      "docstring": ""
    },
    {
      "name": "theme_names",
      "args": "self",
      "signature": "def theme_names(self):",
      "docstring": ""
    },
    {
      "name": "identify",
      "args": "self, x, y",
      "signature": "def identify(self, x, y):",
      "docstring": ""
    },
    {
      "name": "invoke",
      "args": "self",
      "signature": "def invoke(self):",
      "docstring": ""
    },
    {
      "name": "invoke",
      "args": "self",
      "signature": "def invoke(self):",
      "docstring": ""
    },
    {
      "name": "bbox",
      "args": "self, index",
      "signature": "def bbox(self, index):",
      "docstring": ""
    },
    {
      "name": "identify",
      "args": "self, x, y",
      "signature": "def identify(self, x, y):",
      "docstring": ""
    },
    {
      "name": "validate",
      "args": "self",
      "signature": "def validate(self):",
      "docstring": ""
    },
    {
      "name": "set",
      "args": "self, value",
      "signature": "def set(self, value):",
      "docstring": ""
    },
    {
      "name": "add",
      "args": "self, child, **kw",
      "signature": "def add(self, child, **kw):",
      "docstring": ""
    },
    {
      "name": "forget",
      "args": "self, tab_id",
      "signature": "def forget(self, tab_id):",
      "docstring": ""
    },
    {
      "name": "hide",
      "args": "self, tab_id",
      "signature": "def hide(self, tab_id):",
      "docstring": ""
    },
    {
      "name": "identify",
      "args": "self, x, y",
      "signature": "def identify(self, x, y):",
      "docstring": ""
    },
    {
      "name": "index",
      "args": "self, tab_id",
      "signature": "def index(self, tab_id):",
      "docstring": ""
    },
    {
      "name": "insert",
      "args": "self, pos, child, **kw",
      "signature": "def insert(self, pos, child, **kw):",
      "docstring": ""
    },
    {
      "name": "tabs",
      "args": "self",
      "signature": "def tabs(self):",
      "docstring": ""
    },
    {
      "name": "enable_traversal",
      "args": "self",
      "signature": "def enable_traversal(self):",
      "docstring": ""
    },
    {
      "name": "insert",
      "args": "self, pos, child, **kw",
      "signature": "def insert(self, pos, child, **kw):",
      "docstring": ""
    },
    {
      "name": "stop",
      "args": "self",
      "signature": "def stop(self):",
      "docstring": ""
    },
    {
      "name": "invoke",
      "args": "self",
      "signature": "def invoke(self):",
      "docstring": ""
    },
    {
      "name": "set",
      "args": "self, value",
      "signature": "def set(self, value):",
      "docstring": ""
    },
    {
      "name": "set_children",
      "args": "self, item, *newchildren",
      "signature": "def set_children(self, item, *newchildren):",
      "docstring": ""
    },
    {
      "name": "delete",
      "args": "self, *items",
      "signature": "def delete(self, *items):",
      "docstring": ""
    },
    {
      "name": "detach",
      "args": "self, *items",
      "signature": "def detach(self, *items):",
      "docstring": ""
    },
    {
      "name": "exists",
      "args": "self, item",
      "signature": "def exists(self, item):",
      "docstring": ""
    },
    {
      "name": "identify",
      "args": "self, component, x, y",
      "signature": "def identify(self, component, x, y):",
      "docstring": ""
    },
    {
      "name": "identify_row",
      "args": "self, y",
      "signature": "def identify_row(self, y):",
      "docstring": ""
    },
    {
      "name": "identify_column",
      "args": "self, x",
      "signature": "def identify_column(self, x):",
      "docstring": ""
    },
    {
      "name": "identify_region",
      "args": "self, x, y",
      "signature": "def identify_region(self, x, y):",
      "docstring": ""
    },
    {
      "name": "identify_element",
      "args": "self, x, y",
      "signature": "def identify_element(self, x, y):",
      "docstring": ""
    },
    {
      "name": "index",
      "args": "self, item",
      "signature": "def index(self, item):",
      "docstring": "Returns the integer index of item within its parent's list\n        of children."
    },
    {
      "name": "move",
      "args": "self, item, parent, index",
      "signature": "def move(self, item, parent, index):",
      "docstring": ""
    },
    {
      "name": "next",
      "args": "self, item",
      "signature": "def next(self, item):",
      "docstring": "Returns the identifier of item's next sibling, or '' if item\n        is the last child of its parent."
    },
    {
      "name": "parent",
      "args": "self, item",
      "signature": "def parent(self, item):",
      "docstring": "Returns the ID of the parent of item, or '' if item is at the\n        top level of the hierarchy."
    },
    {
      "name": "prev",
      "args": "self, item",
      "signature": "def prev(self, item):",
      "docstring": "Returns the identifier of item's previous sibling, or '' if\n        item is the first child of its parent."
    },
    {
      "name": "see",
      "args": "self, item",
      "signature": "def see(self, item):",
      "docstring": ""
    },
    {
      "name": "selection",
      "args": "self",
      "signature": "def selection(self):",
      "docstring": ""
    },
    {
      "name": "_selection",
      "args": "self, selop, items",
      "signature": "def _selection(self, selop, items):",
      "docstring": ""
    },
    {
      "name": "selection_set",
      "args": "self, *items",
      "signature": "def selection_set(self, *items):",
      "docstring": ""
    },
    {
      "name": "selection_add",
      "args": "self, *items",
      "signature": "def selection_add(self, *items):",
      "docstring": ""
    },
    {
      "name": "selection_remove",
      "args": "self, *items",
      "signature": "def selection_remove(self, *items):",
      "docstring": ""
    },
    {
      "name": "selection_toggle",
      "args": "self, *items",
      "signature": "def selection_toggle(self, *items):",
      "docstring": ""
    },
    {
      "name": "destroy",
      "args": "self = None",
      "signature": "def destroy(self = None):",
      "docstring": ""
    },
    {
      "name": "_adjust",
      "args": "self, *args",
      "signature": "def _adjust(self, *args):",
      "docstring": ""
    },
    {
      "name": "adjust_label",
      "args": "",
      "signature": "def adjust_label():",
      "docstring": ""
    },
    {
      "name": "value",
      "args": "self",
      "signature": "def value(self):",
      "docstring": ""
    },
    {
      "name": "value",
      "args": "self, val",
      "signature": "def value(self, val):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self, item",
      "signature": "def __getitem__(self, item):",
      "docstring": ""
    },
    {
      "name": "destroy",
      "args": "self = None",
      "signature": "def destroy(self = None):",
      "docstring": ""
    }
  ],
  "readers": [
    {
      "name": "remove_duplicates",
      "args": "items",
      "signature": "def remove_duplicates(items):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, loader",
      "signature": "def __init__(self, loader):",
      "docstring": ""
    },
    {
      "name": "resource_path",
      "args": "self, resource",
      "signature": "def resource_path(self, resource):",
      "docstring": ""
    },
    {
      "name": "files",
      "args": "self",
      "signature": "def files(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, loader, module",
      "signature": "def __init__(self, loader, module):",
      "docstring": ""
    },
    {
      "name": "open_resource",
      "args": "self = None, resource = None",
      "signature": "def open_resource(self = None, resource = None):",
      "docstring": ""
    },
    {
      "name": "is_resource",
      "args": "self, path",
      "signature": "def is_resource(self, path):",
      "docstring": ""
    },
    {
      "name": "files",
      "args": "self",
      "signature": "def files(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, *paths",
      "signature": "def __init__(self, *paths):",
      "docstring": ""
    },
    {
      "name": "iterdir",
      "args": "self",
      "signature": "def iterdir(self):",
      "docstring": ""
    },
    {
      "name": "read_bytes",
      "args": "self",
      "signature": "def read_bytes(self):",
      "docstring": ""
    },
    {
      "name": "read_text",
      "args": "self, *args, **kwargs",
      "signature": "def read_text(self, *args, **kwargs):",
      "docstring": ""
    },
    {
      "name": "is_dir",
      "args": "self",
      "signature": "def is_dir(self):",
      "docstring": ""
    },
    {
      "name": "is_file",
      "args": "self",
      "signature": "def is_file(self):",
      "docstring": ""
    },
    {
      "name": "joinpath",
      "args": "self, child",
      "signature": "def joinpath(self, child):",
      "docstring": ""
    },
    {
      "name": "open",
      "args": "self, *args, **kwargs",
      "signature": "def open(self, *args, **kwargs):",
      "docstring": ""
    },
    {
      "name": "name",
      "args": "self",
      "signature": "def name(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, namespace_path",
      "signature": "def __init__(self, namespace_path):",
      "docstring": ""
    },
    {
      "name": "resource_path",
      "args": "self, resource",
      "signature": "def resource_path(self, resource):",
      "docstring": ""
    },
    {
      "name": "files",
      "args": "self",
      "signature": "def files(self):",
      "docstring": ""
    }
  ],
  "util": [],
  "_bootstrap_external": [],
  "_abc": [
    {
      "name": "create_module",
      "args": "self, spec",
      "signature": "def create_module(self, spec):",
      "docstring": ""
    },
    {
      "name": "load_module",
      "args": "self, fullname",
      "signature": "def load_module(self, fullname):",
      "docstring": ""
    },
    {
      "name": "module_repr",
      "args": "self, module",
      "signature": "def module_repr(self, module):",
      "docstring": "Return a module's repr.\n\n        Used by the module type when the method does not raise\n        NotImplementedError.\n\n        This method is deprecated."
    }
  ],
  "_bootstrap": [
    {
      "name": "_object_name",
      "args": "obj",
      "signature": "def _object_name(obj):",
      "docstring": ""
    },
    {
      "name": "_wrap",
      "args": "new, old",
      "signature": "def _wrap(new, old):",
      "docstring": ""
    },
    {
      "name": "_new_module",
      "args": "name",
      "signature": "def _new_module(name):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, name",
      "signature": "def __init__(self, name):",
      "docstring": ""
    },
    {
      "name": "has_deadlock",
      "args": "self",
      "signature": "def has_deadlock(self):",
      "docstring": ""
    },
    {
      "name": "acquire",
      "args": "self",
      "signature": "def acquire(self):",
      "docstring": ""
    },
    {
      "name": "release",
      "args": "self",
      "signature": "def release(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, name",
      "signature": "def __init__(self, name):",
      "docstring": ""
    },
    {
      "name": "acquire",
      "args": "self",
      "signature": "def acquire(self):",
      "docstring": ""
    },
    {
      "name": "release",
      "args": "self",
      "signature": "def release(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, name",
      "signature": "def __init__(self, name):",
      "docstring": ""
    },
    {
      "name": "__enter__",
      "args": "self",
      "signature": "def __enter__(self):",
      "docstring": ""
    },
    {
      "name": "__exit__",
      "args": "self, *args, **kwargs",
      "signature": "def __exit__(self, *args, **kwargs):",
      "docstring": ""
    },
    {
      "name": "_get_module_lock",
      "args": "name",
      "signature": "def _get_module_lock(name):",
      "docstring": ""
    },
    {
      "name": "_lock_unlock_module",
      "args": "name",
      "signature": "def _lock_unlock_module(name):",
      "docstring": ""
    },
    {
      "name": "_call_with_frames_removed",
      "args": "f, *args, **kwds",
      "signature": "def _call_with_frames_removed(f, *args, **kwds):",
      "docstring": ""
    },
    {
      "name": "_verbose_message",
      "args": "message = None, *, verbosity, *args",
      "signature": "def _verbose_message(message = None, *, verbosity, *args):",
      "docstring": ""
    },
    {
      "name": "_requires_builtin",
      "args": "fxn",
      "signature": "def _requires_builtin(fxn):",
      "docstring": ""
    },
    {
      "name": "_requires_builtin_wrapper",
      "args": "self = None, fullname = None",
      "signature": "def _requires_builtin_wrapper(self = None, fullname = None):",
      "docstring": ""
    },
    {
      "name": "_requires_frozen",
      "args": "fxn",
      "signature": "def _requires_frozen(fxn):",
      "docstring": ""
    },
    {
      "name": "_requires_frozen_wrapper",
      "args": "self = None, fullname = None",
      "signature": "def _requires_frozen_wrapper(self = None, fullname = None):",
      "docstring": ""
    },
    {
      "name": "_load_module_shim",
      "args": "self, fullname",
      "signature": "def _load_module_shim(self, fullname):",
      "docstring": ""
    },
    {
      "name": "_module_repr",
      "args": "module",
      "signature": "def _module_repr(module):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, name = None, loader = {\n        'origin': None,\n        'loader_state': None,\n        'is_package': None }, *, origin, loader_state, is_package",
      "signature": "def __init__(self, name = None, loader = {\n        'origin': None,\n        'loader_state': None,\n        'is_package': None }, *, origin, loader_state, is_package):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "cached",
      "args": "self",
      "signature": "def cached(self):",
      "docstring": ""
    },
    {
      "name": "cached",
      "args": "self, cached",
      "signature": "def cached(self, cached):",
      "docstring": "The name of the module's parent."
    },
    {
      "name": "parent",
      "args": "self",
      "signature": "def parent(self):",
      "docstring": "The name of the module's parent."
    },
    {
      "name": "has_location",
      "args": "self",
      "signature": "def has_location(self):",
      "docstring": ""
    },
    {
      "name": "has_location",
      "args": "self, value",
      "signature": "def has_location(self, value):",
      "docstring": ""
    },
    {
      "name": "spec_from_loader",
      "args": "name = None, loader = {\n    'origin': None,\n    'is_package': None }, *, origin, is_package",
      "signature": "def spec_from_loader(name = None, loader = {\n    'origin': None,\n    'is_package': None }, *, origin, is_package):",
      "docstring": ""
    },
    {
      "name": "_init_module_attrs",
      "args": "spec = None, module = {\n    'override': False }, *, override",
      "signature": "def _init_module_attrs(spec = None, module = {\n    'override': False }, *, override):",
      "docstring": ""
    },
    {
      "name": "module_from_spec",
      "args": "spec",
      "signature": "def module_from_spec(spec):",
      "docstring": ""
    },
    {
      "name": "_module_repr_from_spec",
      "args": "spec",
      "signature": "def _module_repr_from_spec(spec):",
      "docstring": ""
    },
    {
      "name": "_exec",
      "args": "spec, module",
      "signature": "def _exec(spec, module):",
      "docstring": "Execute the spec's specified module in an existing module's namespace."
    },
    {
      "name": "_load_backward_compatible",
      "args": "spec",
      "signature": "def _load_backward_compatible(spec):",
      "docstring": ""
    },
    {
      "name": "_load_unlocked",
      "args": "spec",
      "signature": "def _load_unlocked(spec):",
      "docstring": ""
    },
    {
      "name": "_load",
      "args": "spec",
      "signature": "def _load(spec):",
      "docstring": ""
    },
    {
      "name": "module_repr",
      "args": "module",
      "signature": "def module_repr(module):",
      "docstring": ""
    },
    {
      "name": "create_module",
      "args": "spec",
      "signature": "def create_module(spec):",
      "docstring": ""
    },
    {
      "name": "exec_module",
      "args": "module",
      "signature": "def exec_module(module):",
      "docstring": ""
    },
    {
      "name": "get_code",
      "args": "cls, fullname",
      "signature": "def get_code(cls, fullname):",
      "docstring": ""
    },
    {
      "name": "get_source",
      "args": "cls, fullname",
      "signature": "def get_source(cls, fullname):",
      "docstring": ""
    },
    {
      "name": "is_package",
      "args": "cls, fullname",
      "signature": "def is_package(cls, fullname):",
      "docstring": ""
    },
    {
      "name": "module_repr",
      "args": "m",
      "signature": "def module_repr(m):",
      "docstring": ""
    },
    {
      "name": "create_module",
      "args": "spec",
      "signature": "def create_module(spec):",
      "docstring": ""
    },
    {
      "name": "exec_module",
      "args": "module",
      "signature": "def exec_module(module):",
      "docstring": ""
    },
    {
      "name": "load_module",
      "args": "cls, fullname",
      "signature": "def load_module(cls, fullname):",
      "docstring": ""
    },
    {
      "name": "get_code",
      "args": "cls, fullname",
      "signature": "def get_code(cls, fullname):",
      "docstring": ""
    },
    {
      "name": "get_source",
      "args": "cls, fullname",
      "signature": "def get_source(cls, fullname):",
      "docstring": ""
    },
    {
      "name": "is_package",
      "args": "cls, fullname",
      "signature": "def is_package(cls, fullname):",
      "docstring": ""
    },
    {
      "name": "__enter__",
      "args": "self",
      "signature": "def __enter__(self):",
      "docstring": ""
    },
    {
      "name": "__exit__",
      "args": "self, exc_type, exc_value, exc_traceback",
      "signature": "def __exit__(self, exc_type, exc_value, exc_traceback):",
      "docstring": ""
    },
    {
      "name": "_resolve_name",
      "args": "name, package, level",
      "signature": "def _resolve_name(name, package, level):",
      "docstring": ""
    },
    {
      "name": "_find_spec_legacy",
      "args": "finder, name, path",
      "signature": "def _find_spec_legacy(finder, name, path):",
      "docstring": ""
    },
    {
      "name": "_sanity_check",
      "args": "name, package, level",
      "signature": "def _sanity_check(name, package, level):",
      "docstring": ""
    },
    {
      "name": "_find_and_load_unlocked",
      "args": "name, import_",
      "signature": "def _find_and_load_unlocked(name, import_):",
      "docstring": ""
    },
    {
      "name": "_find_and_load",
      "args": "name, import_",
      "signature": "def _find_and_load(name, import_):",
      "docstring": ""
    },
    {
      "name": "_handle_fromlist",
      "args": "module, fromlist = None, import_ = {\n    'recursive': False }, *, recursive",
      "signature": "def _handle_fromlist(module, fromlist = None, import_ = {\n    'recursive': False }, *, recursive):",
      "docstring": ""
    },
    {
      "name": "_calc___package__",
      "args": "globals",
      "signature": "def _calc___package__(globals):",
      "docstring": ""
    },
    {
      "name": "_builtin_from_name",
      "args": "name",
      "signature": "def _builtin_from_name(name):",
      "docstring": ""
    },
    {
      "name": "_setup",
      "args": "sys_module, _imp_module",
      "signature": "def _setup(sys_module, _imp_module):",
      "docstring": ""
    },
    {
      "name": "_install",
      "args": "sys_module, _imp_module",
      "signature": "def _install(sys_module, _imp_module):",
      "docstring": ""
    },
    {
      "name": "_install_external_importers",
      "args": "",
      "signature": "def _install_external_importers():",
      "docstring": ""
    }
  ],
  "_text": [
    {
      "name": "__lt__",
      "args": "self, other",
      "signature": "def __lt__(self, other):",
      "docstring": ""
    },
    {
      "name": "__gt__",
      "args": "self, other",
      "signature": "def __gt__(self, other):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "__ne__",
      "args": "self, other",
      "signature": "def __ne__(self, other):",
      "docstring": ""
    },
    {
      "name": "__hash__",
      "args": "self",
      "signature": "def __hash__(self):",
      "docstring": ""
    },
    {
      "name": "__contains__",
      "args": "self = None, other = None",
      "signature": "def __contains__(self = None, other = None):",
      "docstring": ""
    },
    {
      "name": "in_",
      "args": "self, other",
      "signature": "def in_(self, other):",
      "docstring": ""
    },
    {
      "name": "lower",
      "args": "self = None",
      "signature": "def lower(self = None):",
      "docstring": ""
    },
    {
      "name": "index",
      "args": "self, sub",
      "signature": "def index(self, sub):",
      "docstring": ""
    }
  ],
  "_meta": [
    {
      "name": "__len__",
      "args": "self = None",
      "signature": "def __len__(self = None):",
      "docstring": ""
    },
    {
      "name": "__contains__",
      "args": "self = None, item = None",
      "signature": "def __contains__(self = None, item = None):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self = None, key = None",
      "signature": "def __getitem__(self = None, key = None):",
      "docstring": ""
    },
    {
      "name": "__iter__",
      "args": "self = None",
      "signature": "def __iter__(self = None):",
      "docstring": ""
    },
    {
      "name": "get_all",
      "args": "self = None, name = None, failobj = None",
      "signature": "def get_all(self = None, name = None, failobj = None):",
      "docstring": ""
    },
    {
      "name": "json",
      "args": "self = None",
      "signature": "def json(self = None):",
      "docstring": ""
    },
    {
      "name": "joinpath",
      "args": "self = None",
      "signature": "def joinpath(self = None):",
      "docstring": ""
    },
    {
      "name": "__div__",
      "args": "self = None",
      "signature": "def __div__(self = None):",
      "docstring": ""
    },
    {
      "name": "parent",
      "args": "self = None",
      "signature": "def parent(self = None):",
      "docstring": ""
    },
    {
      "name": "read_text",
      "args": "self = None",
      "signature": "def read_text(self = None):",
      "docstring": ""
    }
  ],
  "_collections": [
    {
      "name": "__missing__",
      "args": "self = None, key = None",
      "signature": "def __missing__(self = None, key = None):",
      "docstring": ""
    },
    {
      "name": "freeze",
      "args": "self",
      "signature": "def freeze(self):",
      "docstring": ""
    },
    {
      "name": "Pair",
      "args": "",
      "signature": "def Pair():",
      "docstring": ""
    },
    {
      "name": "parse",
      "args": "cls, text",
      "signature": "def parse(cls, text):",
      "docstring": ""
    }
  ],
  "_adapters": [
    {
      "name": "__new__",
      "args": "cls = None, orig = None",
      "signature": "def __new__(cls = None, orig = None):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, *args, **kwargs",
      "signature": "def __init__(self, *args, **kwargs):",
      "docstring": ""
    },
    {
      "name": "__iter__",
      "args": "self = None",
      "signature": "def __iter__(self = None):",
      "docstring": ""
    },
    {
      "name": "_repair_headers",
      "args": "self",
      "signature": "def _repair_headers(self):",
      "docstring": ""
    },
    {
      "name": "redent",
      "args": "value",
      "signature": "def redent(value):",
      "docstring": ""
    },
    {
      "name": "json",
      "args": "self",
      "signature": "def json(self):",
      "docstring": ""
    },
    {
      "name": "transform",
      "args": "key = None",
      "signature": "def transform(key = None):",
      "docstring": ""
    }
  ],
  "_itertools": [],
  "_functools": [
    {
      "name": "wrapper",
      "args": "self = None, *args, **kwargs",
      "signature": "def wrapper(self = None, *args, **kwargs):",
      "docstring": ""
    },
    {
      "name": "pass_none",
      "args": "func",
      "signature": "def pass_none(func):",
      "docstring": "Wrap func so it's not called if its first param is None\n\n    >>> print_text = pass_none(print)\n    >>> print_text('text')\n    text\n    >>> print_text(None)"
    },
    {
      "name": "wrapper",
      "args": "param = None, *args, **kwargs",
      "signature": "def wrapper(param = None, *args, **kwargs):",
      "docstring": ""
    }
  ],
  "contentmanager": [
    {
      "name": "__init__",
      "args": "self",
      "signature": "def __init__(self):",
      "docstring": ""
    },
    {
      "name": "add_get_handler",
      "args": "self, key, handler",
      "signature": "def add_get_handler(self, key, handler):",
      "docstring": ""
    },
    {
      "name": "get_content",
      "args": "self, msg, *args, **kw",
      "signature": "def get_content(self, msg, *args, **kw):",
      "docstring": ""
    },
    {
      "name": "add_set_handler",
      "args": "self, typekey, handler",
      "signature": "def add_set_handler(self, typekey, handler):",
      "docstring": ""
    },
    {
      "name": "set_content",
      "args": "self, msg, obj, *args, **kw",
      "signature": "def set_content(self, msg, obj, *args, **kw):",
      "docstring": ""
    },
    {
      "name": "_find_set_handler",
      "args": "self, msg, obj",
      "signature": "def _find_set_handler(self, msg, obj):",
      "docstring": ""
    },
    {
      "name": "get_non_text_content",
      "args": "msg",
      "signature": "def get_non_text_content(msg):",
      "docstring": ""
    },
    {
      "name": "get_message_content",
      "args": "msg",
      "signature": "def get_message_content(msg):",
      "docstring": ""
    },
    {
      "name": "get_and_fixup_unknown_message_content",
      "args": "msg",
      "signature": "def get_and_fixup_unknown_message_content(msg):",
      "docstring": ""
    },
    {
      "name": "_prepare_set",
      "args": "msg, maintype, subtype, headers",
      "signature": "def _prepare_set(msg, maintype, subtype, headers):",
      "docstring": ""
    },
    {
      "name": "_finalize_set",
      "args": "msg, disposition, filename, cid, params",
      "signature": "def _finalize_set(msg, disposition, filename, cid, params):",
      "docstring": ""
    },
    {
      "name": "_encode_base64",
      "args": "data, max_line_length",
      "signature": "def _encode_base64(data, max_line_length):",
      "docstring": ""
    },
    {
      "name": "_encode_text",
      "args": "string, charset, cte, policy",
      "signature": "def _encode_text(string, charset, cte, policy):",
      "docstring": ""
    },
    {
      "name": "embedded_body",
      "args": "lines = None",
      "signature": "def embedded_body(lines = None):",
      "docstring": ""
    },
    {
      "name": "normal_body",
      "args": "lines",
      "signature": "def normal_body(lines):",
      "docstring": ""
    }
  ],
  "_header_value_parser": [
    {
      "name": "quote_string",
      "args": "value",
      "signature": "def quote_string(value):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self = None, *args, **kw",
      "signature": "def __init__(self = None, *args, **kw):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self = None",
      "signature": "def __repr__(self = None):",
      "docstring": ""
    },
    {
      "name": "value",
      "args": "self",
      "signature": "def value(self):",
      "docstring": ""
    },
    {
      "name": "all_defects",
      "args": "self",
      "signature": "def all_defects(self):",
      "docstring": ""
    },
    {
      "name": "startswith_fws",
      "args": "self",
      "signature": "def startswith_fws(self):",
      "docstring": ""
    },
    {
      "name": "as_ew_allowed",
      "args": "self",
      "signature": "def as_ew_allowed(self):",
      "docstring": ""
    },
    {
      "name": "comments",
      "args": "self",
      "signature": "def comments(self):",
      "docstring": ""
    },
    {
      "name": "fold",
      "args": "self, *, policy",
      "signature": "def fold(self, *, policy):",
      "docstring": ""
    },
    {
      "name": "value",
      "args": "self",
      "signature": "def value(self):",
      "docstring": ""
    },
    {
      "name": "comments",
      "args": "self",
      "signature": "def comments(self):",
      "docstring": ""
    },
    {
      "name": "content",
      "args": "self",
      "signature": "def content(self):",
      "docstring": ""
    },
    {
      "name": "quoted_value",
      "args": "self",
      "signature": "def quoted_value(self):",
      "docstring": ""
    },
    {
      "name": "stripped_value",
      "args": "self",
      "signature": "def stripped_value(self):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "value",
      "args": "self",
      "signature": "def value(self):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "quote",
      "args": "self, value",
      "signature": "def quote(self, value):",
      "docstring": ""
    },
    {
      "name": "content",
      "args": "self",
      "signature": "def content(self):",
      "docstring": ""
    },
    {
      "name": "comments",
      "args": "self",
      "signature": "def comments(self):",
      "docstring": ""
    },
    {
      "name": "addresses",
      "args": "self",
      "signature": "def addresses(self):",
      "docstring": ""
    },
    {
      "name": "mailboxes",
      "args": "self",
      "signature": "def mailboxes(self):",
      "docstring": ""
    },
    {
      "name": "all_mailboxes",
      "args": "self",
      "signature": "def all_mailboxes(self):",
      "docstring": ""
    },
    {
      "name": "display_name",
      "args": "self",
      "signature": "def display_name(self):",
      "docstring": ""
    },
    {
      "name": "mailboxes",
      "args": "self",
      "signature": "def mailboxes(self):",
      "docstring": ""
    },
    {
      "name": "all_mailboxes",
      "args": "self",
      "signature": "def all_mailboxes(self):",
      "docstring": ""
    },
    {
      "name": "mailboxes",
      "args": "self",
      "signature": "def mailboxes(self):",
      "docstring": ""
    },
    {
      "name": "all_mailboxes",
      "args": "self",
      "signature": "def all_mailboxes(self):",
      "docstring": ""
    },
    {
      "name": "mailboxes",
      "args": "self",
      "signature": "def mailboxes(self):",
      "docstring": ""
    },
    {
      "name": "all_mailboxes",
      "args": "self",
      "signature": "def all_mailboxes(self):",
      "docstring": ""
    },
    {
      "name": "mailboxes",
      "args": "self",
      "signature": "def mailboxes(self):",
      "docstring": ""
    },
    {
      "name": "all_mailboxes",
      "args": "self",
      "signature": "def all_mailboxes(self):",
      "docstring": ""
    },
    {
      "name": "display_name",
      "args": "self",
      "signature": "def display_name(self):",
      "docstring": ""
    },
    {
      "name": "display_name",
      "args": "self",
      "signature": "def display_name(self):",
      "docstring": ""
    },
    {
      "name": "local_part",
      "args": "self",
      "signature": "def local_part(self):",
      "docstring": ""
    },
    {
      "name": "domain",
      "args": "self",
      "signature": "def domain(self):",
      "docstring": ""
    },
    {
      "name": "route",
      "args": "self",
      "signature": "def route(self):",
      "docstring": ""
    },
    {
      "name": "addr_spec",
      "args": "self",
      "signature": "def addr_spec(self):",
      "docstring": ""
    },
    {
      "name": "local_part",
      "args": "self",
      "signature": "def local_part(self):",
      "docstring": ""
    },
    {
      "name": "domain",
      "args": "self",
      "signature": "def domain(self):",
      "docstring": ""
    },
    {
      "name": "route",
      "args": "self",
      "signature": "def route(self):",
      "docstring": ""
    },
    {
      "name": "addr_spec",
      "args": "self",
      "signature": "def addr_spec(self):",
      "docstring": ""
    },
    {
      "name": "domains",
      "args": "self",
      "signature": "def domains(self):",
      "docstring": ""
    },
    {
      "name": "display_name",
      "args": "self",
      "signature": "def display_name(self):",
      "docstring": ""
    },
    {
      "name": "local_part",
      "args": "self",
      "signature": "def local_part(self):",
      "docstring": ""
    },
    {
      "name": "domain",
      "args": "self",
      "signature": "def domain(self):",
      "docstring": ""
    },
    {
      "name": "route",
      "args": "self",
      "signature": "def route(self):",
      "docstring": ""
    },
    {
      "name": "addr_spec",
      "args": "self",
      "signature": "def addr_spec(self):",
      "docstring": ""
    },
    {
      "name": "display_name",
      "args": "self",
      "signature": "def display_name(self):",
      "docstring": ""
    },
    {
      "name": "domain",
      "args": "self = None",
      "signature": "def domain(self = None):",
      "docstring": ""
    },
    {
      "name": "local_part",
      "args": "self",
      "signature": "def local_part(self):",
      "docstring": ""
    },
    {
      "name": "domain",
      "args": "self",
      "signature": "def domain(self):",
      "docstring": ""
    },
    {
      "name": "value",
      "args": "self",
      "signature": "def value(self):",
      "docstring": ""
    },
    {
      "name": "addr_spec",
      "args": "self",
      "signature": "def addr_spec(self):",
      "docstring": ""
    },
    {
      "name": "display_name",
      "args": "self",
      "signature": "def display_name(self):",
      "docstring": ""
    },
    {
      "name": "value",
      "args": "self = None",
      "signature": "def value(self = None):",
      "docstring": ""
    },
    {
      "name": "value",
      "args": "self",
      "signature": "def value(self):",
      "docstring": ""
    },
    {
      "name": "local_part",
      "args": "self",
      "signature": "def local_part(self):",
      "docstring": ""
    },
    {
      "name": "domain",
      "args": "self = None",
      "signature": "def domain(self = None):",
      "docstring": ""
    },
    {
      "name": "ip",
      "args": "self",
      "signature": "def ip(self):",
      "docstring": ""
    },
    {
      "name": "section_number",
      "args": "self",
      "signature": "def section_number(self):",
      "docstring": ""
    },
    {
      "name": "param_value",
      "args": "self",
      "signature": "def param_value(self):",
      "docstring": ""
    },
    {
      "name": "stripped_value",
      "args": "self",
      "signature": "def stripped_value(self):",
      "docstring": ""
    },
    {
      "name": "stripped_value",
      "args": "self",
      "signature": "def stripped_value(self):",
      "docstring": ""
    },
    {
      "name": "params",
      "args": "self",
      "signature": "def params(self):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "params",
      "args": "self",
      "signature": "def params(self):",
      "docstring": ""
    },
    {
      "name": "fold",
      "args": "self, policy",
      "signature": "def fold(self, policy):",
      "docstring": ""
    },
    {
      "name": "__new__",
      "args": "cls = None, value = None, token_type = None",
      "signature": "def __new__(cls = None, value = None, token_type = None):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self = None",
      "signature": "def __repr__(self = None):",
      "docstring": ""
    },
    {
      "name": "pprint",
      "args": "self",
      "signature": "def pprint(self):",
      "docstring": ""
    },
    {
      "name": "all_defects",
      "args": "self",
      "signature": "def all_defects(self):",
      "docstring": ""
    },
    {
      "name": "_pp",
      "args": "self = None, indent = None",
      "signature": "def _pp(self = None, indent = None):",
      "docstring": ""
    },
    {
      "name": "pop_trailing_ws",
      "args": "self",
      "signature": "def pop_trailing_ws(self):",
      "docstring": ""
    },
    {
      "name": "comments",
      "args": "self",
      "signature": "def comments(self):",
      "docstring": ""
    },
    {
      "name": "__getnewargs__",
      "args": "self",
      "signature": "def __getnewargs__(self):",
      "docstring": ""
    },
    {
      "name": "value",
      "args": "self",
      "signature": "def value(self):",
      "docstring": ""
    },
    {
      "name": "startswith_fws",
      "args": "self",
      "signature": "def startswith_fws(self):",
      "docstring": ""
    },
    {
      "name": "value",
      "args": "self",
      "signature": "def value(self):",
      "docstring": ""
    },
    {
      "name": "startswith_fws",
      "args": "self",
      "signature": "def startswith_fws(self):",
      "docstring": ""
    },
    {
      "name": "value",
      "args": "self",
      "signature": "def value(self):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "_validate_xtext",
      "args": "xtext",
      "signature": "def _validate_xtext(xtext):",
      "docstring": ""
    },
    {
      "name": "_get_ptext_to_endchars",
      "args": "value, endchars",
      "signature": "def _get_ptext_to_endchars(value, endchars):",
      "docstring": ""
    },
    {
      "name": "get_fws",
      "args": "value",
      "signature": "def get_fws(value):",
      "docstring": ""
    },
    {
      "name": "get_encoded_word",
      "args": "value",
      "signature": "def get_encoded_word(value):",
      "docstring": ""
    },
    {
      "name": "get_unstructured",
      "args": "value",
      "signature": "def get_unstructured(value):",
      "docstring": ""
    },
    {
      "name": "get_qp_ctext",
      "args": "value",
      "signature": "def get_qp_ctext(value):",
      "docstring": ""
    },
    {
      "name": "get_qcontent",
      "args": "value",
      "signature": "def get_qcontent(value):",
      "docstring": ""
    },
    {
      "name": "get_atext",
      "args": "value",
      "signature": "def get_atext(value):",
      "docstring": "atext = <matches _atext_matcher>\n\n    We allow any non-ATOM_ENDS in atext, but add an InvalidATextDefect to\n    the token's defects list if we find non-atext characters."
    },
    {
      "name": "get_bare_quoted_string",
      "args": "value",
      "signature": "def get_bare_quoted_string(value):",
      "docstring": ""
    },
    {
      "name": "get_comment",
      "args": "value",
      "signature": "def get_comment(value):",
      "docstring": ""
    },
    {
      "name": "get_cfws",
      "args": "value",
      "signature": "def get_cfws(value):",
      "docstring": ""
    },
    {
      "name": "get_quoted_string",
      "args": "value",
      "signature": "def get_quoted_string(value):",
      "docstring": ""
    },
    {
      "name": "get_atom",
      "args": "value",
      "signature": "def get_atom(value):",
      "docstring": ""
    },
    {
      "name": "get_dot_atom_text",
      "args": "value",
      "signature": "def get_dot_atom_text(value):",
      "docstring": ""
    }
  ],
  "headerregistry": [
    {
      "name": "display_name",
      "args": "self",
      "signature": "def display_name(self):",
      "docstring": ""
    },
    {
      "name": "username",
      "args": "self",
      "signature": "def username(self):",
      "docstring": ""
    },
    {
      "name": "domain",
      "args": "self",
      "signature": "def domain(self):",
      "docstring": ""
    },
    {
      "name": "addr_spec",
      "args": "self",
      "signature": "def addr_spec(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "display_name",
      "args": "self",
      "signature": "def display_name(self):",
      "docstring": ""
    },
    {
      "name": "addresses",
      "args": "self",
      "signature": "def addresses(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "__new__",
      "args": "cls, name, value",
      "signature": "def __new__(cls, name, value):",
      "docstring": ""
    },
    {
      "name": "init",
      "args": "self, name, *, parse_tree, defects",
      "signature": "def init(self, name, *, parse_tree, defects):",
      "docstring": ""
    },
    {
      "name": "name",
      "args": "self",
      "signature": "def name(self):",
      "docstring": ""
    },
    {
      "name": "defects",
      "args": "self",
      "signature": "def defects(self):",
      "docstring": ""
    },
    {
      "name": "__reduce__",
      "args": "self",
      "signature": "def __reduce__(self):",
      "docstring": ""
    },
    {
      "name": "_reconstruct",
      "args": "cls, value",
      "signature": "def _reconstruct(cls, value):",
      "docstring": ""
    },
    {
      "name": "fold",
      "args": "self, *, policy",
      "signature": "def fold(self, *, policy):",
      "docstring": ""
    },
    {
      "name": "_reconstruct_header",
      "args": "cls_name, bases, value",
      "signature": "def _reconstruct_header(cls_name, bases, value):",
      "docstring": ""
    },
    {
      "name": "parse",
      "args": "cls, value, kwds",
      "signature": "def parse(cls, value, kwds):",
      "docstring": ""
    },
    {
      "name": "parse",
      "args": "cls, value, kwds",
      "signature": "def parse(cls, value, kwds):",
      "docstring": ""
    },
    {
      "name": "init",
      "args": "self = None, *args, **kw",
      "signature": "def init(self = None, *args, **kw):",
      "docstring": ""
    },
    {
      "name": "datetime",
      "args": "self",
      "signature": "def datetime(self):",
      "docstring": ""
    },
    {
      "name": "value_parser",
      "args": "value",
      "signature": "def value_parser(value):",
      "docstring": ""
    },
    {
      "name": "parse",
      "args": "cls, value, kwds",
      "signature": "def parse(cls, value, kwds):",
      "docstring": ""
    },
    {
      "name": "init",
      "args": "self = None, *args, **kw",
      "signature": "def init(self = None, *args, **kw):",
      "docstring": ""
    },
    {
      "name": "groups",
      "args": "self",
      "signature": "def groups(self):",
      "docstring": ""
    },
    {
      "name": "addresses",
      "args": "self",
      "signature": "def addresses(self):",
      "docstring": ""
    },
    {
      "name": "address",
      "args": "self",
      "signature": "def address(self):",
      "docstring": ""
    },
    {
      "name": "parse",
      "args": "cls, value, kwds",
      "signature": "def parse(cls, value, kwds):",
      "docstring": ""
    },
    {
      "name": "init",
      "args": "self = None, *args, **kw",
      "signature": "def init(self = None, *args, **kw):",
      "docstring": ""
    },
    {
      "name": "major",
      "args": "self",
      "signature": "def major(self):",
      "docstring": ""
    },
    {
      "name": "minor",
      "args": "self",
      "signature": "def minor(self):",
      "docstring": ""
    },
    {
      "name": "version",
      "args": "self",
      "signature": "def version(self):",
      "docstring": ""
    },
    {
      "name": "parse",
      "args": "cls, value, kwds",
      "signature": "def parse(cls, value, kwds):",
      "docstring": ""
    }
  ],
  "header": [
    {
      "name": "decode_header",
      "args": "header",
      "signature": "def decode_header(header):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "_nonctext",
      "args": "self, s",
      "signature": "def _nonctext(self, s):",
      "docstring": ""
    },
    {
      "name": "_normalize",
      "args": "self",
      "signature": "def _normalize(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, headerlen, maxlen, continuation_ws, splitchars",
      "signature": "def __init__(self, headerlen, maxlen, continuation_ws, splitchars):",
      "docstring": ""
    },
    {
      "name": "_str",
      "args": "self, linesep",
      "signature": "def _str(self, linesep):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "newline",
      "args": "self",
      "signature": "def newline(self):",
      "docstring": ""
    },
    {
      "name": "add_transition",
      "args": "self",
      "signature": "def add_transition(self):",
      "docstring": ""
    },
    {
      "name": "feed",
      "args": "self, fws, string, charset",
      "signature": "def feed(self, fws, string, charset):",
      "docstring": ""
    },
    {
      "name": "_maxlengths",
      "args": "self",
      "signature": "def _maxlengths(self):",
      "docstring": ""
    },
    {
      "name": "_ascii_split",
      "args": "self, fws, string, splitchars",
      "signature": "def _ascii_split(self, fws, string, splitchars):",
      "docstring": ""
    },
    {
      "name": "_append_chunk",
      "args": "self, fws, string",
      "signature": "def _append_chunk(self, fws, string):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self = None, initial_size = None",
      "signature": "def __init__(self = None, initial_size = None):",
      "docstring": ""
    },
    {
      "name": "push",
      "args": "self, fws, string",
      "signature": "def push(self, fws, string):",
      "docstring": ""
    },
    {
      "name": "pop",
      "args": "self = None",
      "signature": "def pop(self = None):",
      "docstring": ""
    },
    {
      "name": "__len__",
      "args": "self",
      "signature": "def __len__(self):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    },
    {
      "name": "is_onlyws",
      "args": "self",
      "signature": "def is_onlyws(self):",
      "docstring": ""
    },
    {
      "name": "part_count",
      "args": "self = None",
      "signature": "def part_count(self = None):",
      "docstring": ""
    }
  ],
  "_policybase": [
    {
      "name": "__init__",
      "args": "self = None, **kw",
      "signature": "def __init__(self = None, **kw):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "clone",
      "args": "self, **kw",
      "signature": "def clone(self, **kw):",
      "docstring": ""
    },
    {
      "name": "__setattr__",
      "args": "self, name, value",
      "signature": "def __setattr__(self, name, value):",
      "docstring": ""
    },
    {
      "name": "__add__",
      "args": "self, other",
      "signature": "def __add__(self, other):",
      "docstring": ""
    },
    {
      "name": "_append_doc",
      "args": "doc, added_doc",
      "signature": "def _append_doc(doc, added_doc):",
      "docstring": ""
    },
    {
      "name": "_extend_docstrings",
      "args": "cls",
      "signature": "def _extend_docstrings(cls):",
      "docstring": ""
    },
    {
      "name": "handle_defect",
      "args": "self, obj, defect",
      "signature": "def handle_defect(self, obj, defect):",
      "docstring": ""
    },
    {
      "name": "register_defect",
      "args": "self, obj, defect",
      "signature": "def register_defect(self, obj, defect):",
      "docstring": ""
    },
    {
      "name": "header_max_count",
      "args": "self, name",
      "signature": "def header_max_count(self, name):",
      "docstring": ""
    },
    {
      "name": "header_source_parse",
      "args": "self, sourcelines",
      "signature": "def header_source_parse(self, sourcelines):",
      "docstring": ""
    },
    {
      "name": "header_store_parse",
      "args": "self, name, value",
      "signature": "def header_store_parse(self, name, value):",
      "docstring": ""
    },
    {
      "name": "header_fetch_parse",
      "args": "self, name, value",
      "signature": "def header_fetch_parse(self, name, value):",
      "docstring": ""
    },
    {
      "name": "fold",
      "args": "self, name, value",
      "signature": "def fold(self, name, value):",
      "docstring": ""
    },
    {
      "name": "fold_binary",
      "args": "self, name, value",
      "signature": "def fold_binary(self, name, value):",
      "docstring": ""
    }
  ],
  "encoders": [],
  "message": [],
  "_parseaddr": [
    {
      "name": "parsedate_tz",
      "args": "data",
      "signature": "def parsedate_tz(data):",
      "docstring": ""
    },
    {
      "name": "_parsedate_tz",
      "args": "data",
      "signature": "def _parsedate_tz(data):",
      "docstring": ""
    },
    {
      "name": "parsedate",
      "args": "data",
      "signature": "def parsedate(data):",
      "docstring": ""
    },
    {
      "name": "mktime_tz",
      "args": "data",
      "signature": "def mktime_tz(data):",
      "docstring": ""
    },
    {
      "name": "quote",
      "args": "str",
      "signature": "def quote(str):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, field",
      "signature": "def __init__(self, field):",
      "docstring": "Initialize a new instance.\n\n        `field' is an unparsed address header field, containing\n        one or more addresses."
    },
    {
      "name": "gotonext",
      "args": "self",
      "signature": "def gotonext(self):",
      "docstring": ""
    },
    {
      "name": "getaddrlist",
      "args": "self",
      "signature": "def getaddrlist(self):",
      "docstring": ""
    },
    {
      "name": "getaddress",
      "args": "self",
      "signature": "def getaddress(self):",
      "docstring": ""
    },
    {
      "name": "getrouteaddr",
      "args": "self",
      "signature": "def getrouteaddr(self):",
      "docstring": ""
    },
    {
      "name": "getaddrspec",
      "args": "self",
      "signature": "def getaddrspec(self):",
      "docstring": ""
    },
    {
      "name": "getdomain",
      "args": "self",
      "signature": "def getdomain(self):",
      "docstring": ""
    },
    {
      "name": "getquote",
      "args": "self",
      "signature": "def getquote(self):",
      "docstring": "Get a quote-delimited fragment from self's field."
    },
    {
      "name": "getcomment",
      "args": "self",
      "signature": "def getcomment(self):",
      "docstring": "Get a parenthesis-delimited fragment from self's field."
    },
    {
      "name": "getdomainliteral",
      "args": "self",
      "signature": "def getdomainliteral(self):",
      "docstring": ""
    },
    {
      "name": "getphraselist",
      "args": "self",
      "signature": "def getphraselist(self):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self, field",
      "signature": "def __init__(self, field):",
      "docstring": ""
    },
    {
      "name": "__len__",
      "args": "self",
      "signature": "def __len__(self):",
      "docstring": ""
    },
    {
      "name": "__add__",
      "args": "self, other",
      "signature": "def __add__(self, other):",
      "docstring": ""
    },
    {
      "name": "__iadd__",
      "args": "self, other",
      "signature": "def __iadd__(self, other):",
      "docstring": ""
    },
    {
      "name": "__sub__",
      "args": "self, other",
      "signature": "def __sub__(self, other):",
      "docstring": ""
    },
    {
      "name": "__isub__",
      "args": "self, other",
      "signature": "def __isub__(self, other):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self, index",
      "signature": "def __getitem__(self, index):",
      "docstring": ""
    }
  ],
  "generator": [
    {
      "name": "write",
      "args": "self, s",
      "signature": "def write(self, s):",
      "docstring": ""
    },
    {
      "name": "clone",
      "args": "self, fp",
      "signature": "def clone(self, fp):",
      "docstring": ""
    },
    {
      "name": "_new_buffer",
      "args": "self",
      "signature": "def _new_buffer(self):",
      "docstring": ""
    },
    {
      "name": "_encode",
      "args": "self, s",
      "signature": "def _encode(self, s):",
      "docstring": ""
    },
    {
      "name": "_write_lines",
      "args": "self, lines",
      "signature": "def _write_lines(self, lines):",
      "docstring": ""
    },
    {
      "name": "_write",
      "args": "self, msg",
      "signature": "def _write(self, msg):",
      "docstring": ""
    },
    {
      "name": "_dispatch",
      "args": "self, msg",
      "signature": "def _dispatch(self, msg):",
      "docstring": ""
    },
    {
      "name": "_write_headers",
      "args": "self, msg",
      "signature": "def _write_headers(self, msg):",
      "docstring": ""
    },
    {
      "name": "_handle_text",
      "args": "self, msg",
      "signature": "def _handle_text(self, msg):",
      "docstring": ""
    },
    {
      "name": "_handle_multipart",
      "args": "self, msg",
      "signature": "def _handle_multipart(self, msg):",
      "docstring": ""
    },
    {
      "name": "_handle_multipart_signed",
      "args": "self, msg",
      "signature": "def _handle_multipart_signed(self, msg):",
      "docstring": ""
    },
    {
      "name": "_handle_message_delivery_status",
      "args": "self, msg",
      "signature": "def _handle_message_delivery_status(self, msg):",
      "docstring": ""
    },
    {
      "name": "_handle_message",
      "args": "self, msg",
      "signature": "def _handle_message(self, msg):",
      "docstring": ""
    },
    {
      "name": "_compile_re",
      "args": "cls, s, flags",
      "signature": "def _compile_re(cls, s, flags):",
      "docstring": ""
    },
    {
      "name": "write",
      "args": "self, s",
      "signature": "def write(self, s):",
      "docstring": ""
    },
    {
      "name": "_new_buffer",
      "args": "self",
      "signature": "def _new_buffer(self):",
      "docstring": ""
    },
    {
      "name": "_encode",
      "args": "self, s",
      "signature": "def _encode(self, s):",
      "docstring": ""
    },
    {
      "name": "_write_headers",
      "args": "self, msg",
      "signature": "def _write_headers(self, msg):",
      "docstring": ""
    },
    {
      "name": "_handle_text",
      "args": "self = None, msg = None",
      "signature": "def _handle_text(self = None, msg = None):",
      "docstring": ""
    },
    {
      "name": "_compile_re",
      "args": "cls, s, flags",
      "signature": "def _compile_re(cls, s, flags):",
      "docstring": ""
    },
    {
      "name": "_dispatch",
      "args": "self, msg",
      "signature": "def _dispatch(self, msg):",
      "docstring": ""
    }
  ],
  "errors": [
    {
      "name": "__init__",
      "args": "self = None, line = None",
      "signature": "def __init__(self = None, line = None):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self = None, *args, **kw",
      "signature": "def __init__(self = None, *args, **kw):",
      "docstring": ""
    },
    {
      "name": "__init__",
      "args": "self = None, non_printables = None",
      "signature": "def __init__(self = None, non_printables = None):",
      "docstring": ""
    },
    {
      "name": "__str__",
      "args": "self",
      "signature": "def __str__(self):",
      "docstring": ""
    }
  ],
  "_encoded_words": [
    {
      "name": "decode_q",
      "args": "encoded",
      "signature": "def decode_q(encoded):",
      "docstring": ""
    },
    {
      "name": "__missing__",
      "args": "self, key",
      "signature": "def __missing__(self, key):",
      "docstring": ""
    },
    {
      "name": "encode_q",
      "args": "bstring",
      "signature": "def encode_q(bstring):",
      "docstring": ""
    },
    {
      "name": "len_q",
      "args": "bstring",
      "signature": "def len_q(bstring):",
      "docstring": ""
    },
    {
      "name": "decode_b",
      "args": "encoded",
      "signature": "def decode_b(encoded):",
      "docstring": ""
    },
    {
      "name": "encode_b",
      "args": "bstring",
      "signature": "def encode_b(bstring):",
      "docstring": ""
    },
    {
      "name": "len_b",
      "args": "bstring",
      "signature": "def len_b(bstring):",
      "docstring": ""
    },
    {
      "name": "decode",
      "args": "ew",
      "signature": "def decode(ew):",
      "docstring": ""
    }
  ],
  "quoprimime": [
    {
      "name": "header_check",
      "args": "octet",
      "signature": "def header_check(octet):",
      "docstring": ""
    },
    {
      "name": "body_check",
      "args": "octet",
      "signature": "def body_check(octet):",
      "docstring": ""
    },
    {
      "name": "header_length",
      "args": "bytearray",
      "signature": "def header_length(bytearray):",
      "docstring": ""
    },
    {
      "name": "body_length",
      "args": "bytearray",
      "signature": "def body_length(bytearray):",
      "docstring": ""
    },
    {
      "name": "unquote",
      "args": "s",
      "signature": "def unquote(s):",
      "docstring": ""
    },
    {
      "name": "quote",
      "args": "c",
      "signature": "def quote(c):",
      "docstring": ""
    },
    {
      "name": "_unquote_match",
      "args": "match",
      "signature": "def _unquote_match(match):",
      "docstring": ""
    },
    {
      "name": "header_decode",
      "args": "s",
      "signature": "def header_decode(s):",
      "docstring": ""
    }
  ],
  "vdict": [
    {
      "name": "__iter__",
      "args": "self",
      "signature": "def __iter__(self):",
      "docstring": ""
    },
    {
      "name": "__iter__",
      "args": "self",
      "signature": "def __iter__(self):",
      "docstring": ""
    },
    {
      "name": "__iter__",
      "args": "self",
      "signature": "def __iter__(self):",
      "docstring": ""
    },
    {
      "name": "__repr__",
      "args": "self",
      "signature": "def __repr__(self):",
      "docstring": ""
    },
    {
      "name": "__len__",
      "args": "self",
      "signature": "def __len__(self):",
      "docstring": ""
    },
    {
      "name": "_verify_key_tuple",
      "args": "self, key",
      "signature": "def _verify_key_tuple(self, key):",
      "docstring": ""
    },
    {
      "name": "_normalize_key",
      "args": "self, key",
      "signature": "def _normalize_key(self, key):",
      "docstring": ""
    },
    {
      "name": "__setitem__",
      "args": "self = None, key = None, value = None",
      "signature": "def __setitem__(self = None, key = None, value = None):",
      "docstring": ""
    },
    {
      "name": "__getitem__",
      "args": "self = None, key = None",
      "signature": "def __getitem__(self = None, key = None):",
      "docstring": ""
    },
    {
      "name": "__delitem__",
      "args": "self = None, key = None",
      "signature": "def __delitem__(self = None, key = None):",
      "docstring": ""
    },
    {
      "name": "__iter__",
      "args": "self",
      "signature": "def __iter__(self):",
      "docstring": ""
    },
    {
      "name": "__contains__",
      "args": "self = None, key = None",
      "signature": "def __contains__(self = None, key = None):",
      "docstring": ""
    },
    {
      "name": "__eq__",
      "args": "self, other",
      "signature": "def __eq__(self, other):",
      "docstring": ""
    },
    {
      "name": "__ne__",
      "args": "self, other",
      "signature": "def __ne__(self, other):",
      "docstring": ""
    },
    {
      "name": "clear",
      "args": "self = None",
      "signature": "def clear(self = None):",
      "docstring": ""
    },
    {
      "name": "get",
      "args": "self = None, key = None, *args",
      "signature": "def get(self = None, key = None, *args):",
      "docstring": ""
    },
    {
      "name": "pop",
      "args": "self, key",
      "signature": "def pop(self, key):",
      "docstring": ""
    },
    {
      "name": "popitem",
      "args": "self",
      "signature": "def popitem(self):",
      "docstring": ""
    },
    {
      "name": "iterkeys",
      "args": "self",
      "signature": "def iterkeys(self):",
      "docstring": ""
    },
    {
      "name": "keys",
      "args": "self",
      "signature": "def keys(self):",
      "docstring": ""
    },
    {
      "name": "itervalues",
      "args": "self",
      "signature": "def itervalues(self):",
      "docstring": ""
    },
    {
      "name": "values",
      "args": "self",
      "signature": "def values(self):",
      "docstring": ""
    },
    {
      "name": "iteritems",
      "args": "self",
      "signature": "def iteritems(self):",
      "docstring": ""
    },
    {
      "name": "items",
      "args": "self",
      "signature": "def items(self):",
      "docstring": ""
    },
    {
      "name": "get_all_for",
      "args": "self, key",
      "signature": "def get_all_for(self, key):",
      "docstring": ""
    },
    {
      "name": "remove_all_for",
      "args": "self = None, key = None",
      "signature": "def remove_all_for(self = None, key = None):",
      "docstring": ""
    },
    {
      "name": "has_duplicates",
      "args": "self",
      "signature": "def has_duplicates(self):",
      "docstring": ""
    },
    {
      "name": "dict_recurse",
      "args": "obj = None",
      "signature": "def dict_recurse(obj = None):",
      "docstring": ""
    }
  ]
}