inspect.pyc (Python 3.10)
[Code]
    File Name: inspect.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 12
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        '__author__'
        'abc'
        'ast'
        'dis'
        'collections.abc'
        'collections'
        'enum'
        'importlib.machinery'
        'importlib'
        'itertools'
        'linecache'
        'os'
        're'
        'sys'
        'tokenize'
        'token'
        'types'
        'warnings'
        'functools'
        'builtins'
        'operator'
        'attrgetter'
        'namedtuple'
        'OrderedDict'
        'globals'
        'mod_dict'
        'COMPILER_FLAG_NAMES'
        'items'
        'k'
        'v'
        'TPFLAGS_IS_ABSTRACT'
        'get_annotations'
        'ismodule'
        'isclass'
        'ismethod'
        'ismethoddescriptor'
        'isdatadescriptor'
        'hasattr'
        'ismemberdescriptor'
        'isgetsetdescriptor'
        'isfunction'
        '_has_code_flag'
        'isgeneratorfunction'
        'iscoroutinefunction'
        'isasyncgenfunction'
        'isasyncgen'
        'isgenerator'
        'iscoroutine'
        'isawaitable'
        'istraceback'
        'isframe'
        'iscode'
        'isbuiltin'
        'isroutine'
        'isabstract'
        'getmembers'
        'Attribute'
        'classify_class_attrs'
        'getmro'
        'unwrap'
        'indentsize'
        '_findclass'
        '_finddoc'
        'getdoc'
        'cleandoc'
        'getfile'
        'getmodulename'
        'getsourcefile'
        'getabsfile'
        'modulesbyfile'
        '_filesbymodname'
        'getmodule'
        'Exception'
        'ClassFoundException'
        'NodeVisitor'
        '_ClassFinder'
        'findsource'
        'getcomments'
        'EndOfBlock'
        'BlockFinder'
        'getblock'
        'getsourcelines'
        'getsource'
        'walktree'
        'getclasstree'
        'Arguments'
        'getargs'
        'ArgSpec'
        'getargspec'
        'FullArgSpec'
        'getfullargspec'
        'ArgInfo'
        'getargvalues'
        'formatannotation'
        'formatannotationrelativeto'
        'str'
        'formatargspec'
        'formatargvalues'
        '_missing_arguments'
        '_too_many'
        'getcallargs'
        'ClosureVars'
        'getclosurevars'
        'Traceback'
        'getframeinfo'
        'getlineno'
        '_fields'
        'FrameInfo'
        'getouterframes'
        'getinnerframes'
        'currentframe'
        'stack'
        'trace'
        'object'
        '_sentinel'
        '_static_getmro'
        '_check_instance'
        '_check_class'
        '_is_type'
        '_shadowed_dict'
        'getattr_static'
        'GEN_CREATED'
        'GEN_RUNNING'
        'GEN_SUSPENDED'
        'GEN_CLOSED'
        'getgeneratorstate'
        'getgeneratorlocals'
        'CORO_CREATED'
        'CORO_RUNNING'
        'CORO_SUSPENDED'
        'CORO_CLOSED'
        'getcoroutinestate'
        'getcoroutinelocals'
        'type'
        '__call__'
        '_WrapperDescriptor'
        'all'
        '_MethodWrapper'
        'int'
        '__dict__'
        '_ClassMethodWrapper'
        'BuiltinFunctionType'
        '_NonUserDefinedCallables'
        '_signature_get_user_defined_method'
        '_signature_get_partial'
        '_signature_bound_method'
        '_signature_is_builtin'
        '_signature_is_functionlike'
        '_signature_get_bound_param'
        '_signature_strip_non_python_syntax'
        '_signature_fromstr'
        '_signature_from_builtin'
        '_signature_from_function'
        '_signature_from_callable'
        '_void'
        '_empty'
        'IntEnum'
        '_ParameterKind'
        'POSITIONAL_ONLY'
        '_POSITIONAL_ONLY'
        'POSITIONAL_OR_KEYWORD'
        '_POSITIONAL_OR_KEYWORD'
        'VAR_POSITIONAL'
        '_VAR_POSITIONAL'
        'KEYWORD_ONLY'
        '_KEYWORD_ONLY'
        'VAR_KEYWORD'
        '_VAR_KEYWORD'
        '_PARAM_NAME_MAPPING'
        'Parameter'
        'BoundArguments'
        'Signature'
        'signature'
        '_main'
        '__name__'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        "Get useful information from live Python objects.\n\nThis module encapsulates the interface provided by the internal special\nattributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.\nIt also provides some help for examining source code and class layout.\n\nHere are some of the useful functions provided by this module:\n\n    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),\n        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),\n        isroutine() - check object types\n    getmembers() - get members of an object that satisfy a given condition\n\n    getfile(), getsourcefile(), getsource() - find an object's source code\n    getdoc(), getcomments() - get documentation on an object\n    getmodule() - determine the module that an object came from\n    getclasstree() - arrange classes so as to represent their hierarchy\n\n    getargvalues(), getcallargs() - get info about function arguments\n    getfullargspec() - same, with support for Python 3 features\n    formatargvalues() - format an argument spec\n    getouterframes(), getinnerframes() - get info about frames\n    currentframe() - get the current stack frame\n    stack(), trace() - get info about frames on the stack or in a traceback\n\n    signature() - get a Signature object for the callable\n\n    get_annotations() - safely compute an object's annotations\n"
        (
            'Ka-Ping Yee <ping@lfw.org>'
            'Yury Selivanov <yselivanov@sprymix.com>'
        )
        0
        None
        (
            'attrgetter'
        )
        (
            'namedtuple'
            'OrderedDict'
        )
        'CO_'
        1048576
        False
        (
            'globals'
            'locals'
            'eval_str'
        )
        [Code]
            File Name: inspect.py
            Object Name: get_annotations
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 3
            Locals: 12
            Stack Size: 4
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'isinstance'
                'type'
                'getattr'
                'hasattr'
                'get'
                'types'
                'GetSetDescriptorType'
                'sys'
                'modules'
                'dict'
                'vars'
                'ModuleType'
                'callable'
                'TypeError'
                'ValueError'
                '__wrapped__'
                'functools'
                'partial'
                'func'
                '__globals__'
                'items'
            [Var Names]
                'obj'
                'globals'
                'locals'
                'eval_str'
                'obj_dict'
                'ann'
                'obj_globals'
                'module_name'
                'module'
                'obj_locals'
                'unwrap'
                'return_value'
            [Free Vars]
            [Cell Vars]
                'globals'
                'locals'
            [Constants]
                'Compute the annotations dict for an object.\n\n    obj may be a callable, class, or module.\n    Passing in an object of any other type raises TypeError.\n\n    Returns a dict.  get_annotations() returns a new dict every time\n    it\'s called; calling it twice on the same object will return two\n    different but equivalent dicts.\n\n    This function handles several details for you:\n\n      * If eval_str is true, values of type str will\n        be un-stringized using eval().  This is intended\n        for use with stringized annotations\n        ("from __future__ import annotations").\n      * If obj doesn\'t have an annotations dict, returns an\n        empty dict.  (Functions and methods always have an\n        annotations dict; classes, modules, and other types of\n        callables may not.)\n      * Ignores inherited annotations on classes.  If a class\n        doesn\'t have its own annotations dict, returns an empty dict.\n      * All accesses to object members and dict values are done\n        using getattr() and dict.get() for safety.\n      * Always, always, always returns a freshly-created dict.\n\n    eval_str controls whether or not values of type str are replaced\n    with the result of calling eval() on those values:\n\n      * If eval_str is true, eval() is called on values of type str.\n      * If eval_str is false (the default), values of type str are unchanged.\n\n    globals and locals are passed in to eval(); see the documentation\n    for eval() for more information.  If either globals or locals is\n    None, this function may replace that value with a context-specific\n    default, contingent on type(obj):\n\n      * If obj is a module, globals defaults to obj.__dict__.\n      * If obj is a class, globals defaults to\n        sys.modules[obj.__module__].__dict__ and locals\n        defaults to the obj class namespace.\n      * If obj is a callable, globals defaults to obj.__globals__,\n        although if obj is a wrapped function (using\n        functools.update_wrapper()) it is first unwrapped.\n    '
                '__dict__'
                None
                'get'
                '__annotations__'
                '__module__'
                '__globals__'
                ' is not a module, class, or callable.'
                '.__annotations__ is neither a dict nor None'
                True
                '__wrapped__'
                [Code]
                    File Name: inspect.py
                    Object Name: <dictcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 7
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'isinstance'
                        'str'
                        'eval'
                    [Var Names]
                        '.0'
                        'key'
                        'value'
                    [Free Vars]
                        'globals'
                        'locals'
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_MAP                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        18 (to 42)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: key
                        10      STORE_FAST                      2: value
                        12      LOAD_FAST                       1: key
                        14      LOAD_GLOBAL                     0: isinstance
                        16      LOAD_FAST                       2: value
                        18      LOAD_GLOBAL                     1: str
                        20      CALL_FUNCTION                   2
                        22      POP_JUMP_IF_TRUE                14 (to 28)
                        24      LOAD_FAST                       2: value
                        26      JUMP_FORWARD                    5 (to 38)
                        28      LOAD_GLOBAL                     2: eval
                        30      LOAD_FAST                       2: value
                        32      LOAD_DEREF                      0: globals
                        34      LOAD_DEREF                      1: locals
                        36      CALL_FUNCTION                   3
                        38      MAP_ADD                         2
                        40      JUMP_ABSOLUTE                   2 (to 4)
                        42      RETURN_VALUE                    
                'get_annotations.<locals>.<dictcomp>'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: obj
                4       LOAD_GLOBAL                     1: type
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               69 (to 138)
                10      LOAD_GLOBAL                     2: getattr
                12      LOAD_FAST                       0: obj
                14      LOAD_CONST                      1: '__dict__'
                16      LOAD_CONST                      2: None
                18      CALL_FUNCTION                   3
                20      STORE_FAST                      4: obj_dict
                22      LOAD_FAST                       4: obj_dict
                24      POP_JUMP_IF_FALSE               33 (to 66)
                26      LOAD_GLOBAL                     3: hasattr
                28      LOAD_FAST                       4: obj_dict
                30      LOAD_CONST                      3: 'get'
                32      CALL_FUNCTION                   2
                34      POP_JUMP_IF_FALSE               33 (to 66)
                36      LOAD_FAST                       4: obj_dict
                38      LOAD_METHOD                     4: get
                40      LOAD_CONST                      4: '__annotations__'
                42      LOAD_CONST                      2: None
                44      CALL_METHOD                     2
                46      STORE_FAST                      5: ann
                48      LOAD_GLOBAL                     0: isinstance
                50      LOAD_FAST                       5: ann
                52      LOAD_GLOBAL                     5: types
                54      LOAD_ATTR                       6: GetSetDescriptorType
                56      CALL_FUNCTION                   2
                58      POP_JUMP_IF_FALSE               32 (to 64)
                60      LOAD_CONST                      2: None
                62      STORE_FAST                      5: ann
                64      JUMP_FORWARD                    2 (to 70)
                66      LOAD_CONST                      2: None
                68      STORE_FAST                      5: ann
                70      LOAD_CONST                      2: None
                72      STORE_FAST                      6: obj_globals
                74      LOAD_GLOBAL                     2: getattr
                76      LOAD_FAST                       0: obj
                78      LOAD_CONST                      5: '__module__'
                80      LOAD_CONST                      2: None
                82      CALL_FUNCTION                   3
                84      STORE_FAST                      7: module_name
                86      LOAD_FAST                       7: module_name
                88      POP_JUMP_IF_FALSE               60 (to 120)
                90      LOAD_GLOBAL                     7: sys
                92      LOAD_ATTR                       8: modules
                94      LOAD_METHOD                     4: get
                96      LOAD_FAST                       7: module_name
                98      LOAD_CONST                      2: None
                100     CALL_METHOD                     2
                102     STORE_FAST                      8: module
                104     LOAD_FAST                       8: module
                106     POP_JUMP_IF_FALSE               60 (to 120)
                108     LOAD_GLOBAL                     2: getattr
                110     LOAD_FAST                       8: module
                112     LOAD_CONST                      1: '__dict__'
                114     LOAD_CONST                      2: None
                116     CALL_FUNCTION                   3
                118     STORE_FAST                      6: obj_globals
                120     LOAD_GLOBAL                     9: dict
                122     LOAD_GLOBAL                     10: vars
                124     LOAD_FAST                       0: obj
                126     CALL_FUNCTION                   1
                128     CALL_FUNCTION                   1
                130     STORE_FAST                      9: obj_locals
                132     LOAD_FAST                       0: obj
                134     STORE_FAST                      10: unwrap
                136     JUMP_FORWARD                    50 (to 238)
                138     LOAD_GLOBAL                     0: isinstance
                140     LOAD_FAST                       0: obj
                142     LOAD_GLOBAL                     5: types
                144     LOAD_ATTR                       11: ModuleType
                146     CALL_FUNCTION                   2
                148     POP_JUMP_IF_FALSE               91 (to 182)
                150     LOAD_GLOBAL                     2: getattr
                152     LOAD_FAST                       0: obj
                154     LOAD_CONST                      4: '__annotations__'
                156     LOAD_CONST                      2: None
                158     CALL_FUNCTION                   3
                160     STORE_FAST                      5: ann
                162     LOAD_GLOBAL                     2: getattr
                164     LOAD_FAST                       0: obj
                166     LOAD_CONST                      1: '__dict__'
                168     CALL_FUNCTION                   2
                170     STORE_FAST                      6: obj_globals
                172     LOAD_CONST                      2: None
                174     STORE_FAST                      9: obj_locals
                176     LOAD_CONST                      2: None
                178     STORE_FAST                      10: unwrap
                180     JUMP_FORWARD                    28 (to 238)
                182     LOAD_GLOBAL                     12: callable
                184     LOAD_FAST                       0: obj
                186     CALL_FUNCTION                   1
                188     POP_JUMP_IF_FALSE               112 (to 224)
                190     LOAD_GLOBAL                     2: getattr
                192     LOAD_FAST                       0: obj
                194     LOAD_CONST                      4: '__annotations__'
                196     LOAD_CONST                      2: None
                198     CALL_FUNCTION                   3
                200     STORE_FAST                      5: ann
                202     LOAD_GLOBAL                     2: getattr
                204     LOAD_FAST                       0: obj
                206     LOAD_CONST                      6: '__globals__'
                208     LOAD_CONST                      2: None
                210     CALL_FUNCTION                   3
                212     STORE_FAST                      6: obj_globals
                214     LOAD_CONST                      2: None
                216     STORE_FAST                      9: obj_locals
                218     LOAD_FAST                       0: obj
                220     STORE_FAST                      10: unwrap
                222     JUMP_FORWARD                    7 (to 238)
                224     LOAD_GLOBAL                     13: TypeError
                226     LOAD_FAST                       0: obj
                228     FORMAT_VALUE                    2 (FVC_REPR)
                230     LOAD_CONST                      7: ' is not a module, class, or callable.'
                232     BUILD_STRING                    2
                234     CALL_FUNCTION                   1
                236     RAISE_VARARGS                   1
                238     LOAD_FAST                       5: ann
                240     LOAD_CONST                      2: None
                242     IS_OP                           0 (is)
                244     POP_JUMP_IF_FALSE               125 (to 250)
                246     BUILD_MAP                       0
                248     RETURN_VALUE                    
                250     LOAD_GLOBAL                     0: isinstance
                252     LOAD_FAST                       5: ann
                254     LOAD_GLOBAL                     9: dict
                256     CALL_FUNCTION                   2
                258     POP_JUMP_IF_TRUE                137 (to 274)
                260     LOAD_GLOBAL                     14: ValueError
                262     LOAD_FAST                       0: obj
                264     FORMAT_VALUE                    2 (FVC_REPR)
                266     LOAD_CONST                      8: '.__annotations__ is neither a dict nor None'
                268     BUILD_STRING                    2
                270     CALL_FUNCTION                   1
                272     RAISE_VARARGS                   1
                274     LOAD_FAST                       5: ann
                276     POP_JUMP_IF_TRUE                141 (to 282)
                278     BUILD_MAP                       0
                280     RETURN_VALUE                    
                282     LOAD_FAST                       3: eval_str
                284     POP_JUMP_IF_TRUE                147 (to 294)
                286     LOAD_GLOBAL                     9: dict
                288     LOAD_FAST                       5: ann
                290     CALL_FUNCTION                   1
                292     RETURN_VALUE                    
                294     LOAD_FAST                       10: unwrap
                296     LOAD_CONST                      2: None
                298     IS_OP                           1 (is not)
                300     POP_JUMP_IF_FALSE               180 (to 360)
                302     NOP                             
                304     LOAD_GLOBAL                     3: hasattr
                306     LOAD_FAST                       10: unwrap
                308     LOAD_CONST                      10: '__wrapped__'
                310     CALL_FUNCTION                   2
                312     POP_JUMP_IF_FALSE               161 (to 322)
                314     LOAD_FAST                       10: unwrap
                316     LOAD_ATTR                       15: __wrapped__
                318     STORE_FAST                      10: unwrap
                320     JUMP_ABSOLUTE                   151 (to 302)
                322     LOAD_GLOBAL                     0: isinstance
                324     LOAD_FAST                       10: unwrap
                326     LOAD_GLOBAL                     16: functools
                328     LOAD_ATTR                       17: partial
                330     CALL_FUNCTION                   2
                332     POP_JUMP_IF_FALSE               171 (to 342)
                334     LOAD_FAST                       10: unwrap
                336     LOAD_ATTR                       18: func
                338     STORE_FAST                      10: unwrap
                340     JUMP_ABSOLUTE                   151 (to 302)
                342     NOP                             
                344     LOAD_GLOBAL                     3: hasattr
                346     LOAD_FAST                       10: unwrap
                348     LOAD_CONST                      6: '__globals__'
                350     CALL_FUNCTION                   2
                352     POP_JUMP_IF_FALSE               180 (to 360)
                354     LOAD_FAST                       10: unwrap
                356     LOAD_ATTR                       19: __globals__
                358     STORE_FAST                      6: obj_globals
                360     LOAD_DEREF                      0: globals
                362     LOAD_CONST                      2: None
                364     IS_OP                           0 (is)
                366     POP_JUMP_IF_FALSE               186 (to 372)
                368     LOAD_FAST                       6: obj_globals
                370     STORE_DEREF                     0: globals
                372     LOAD_DEREF                      1: locals
                374     LOAD_CONST                      2: None
                376     IS_OP                           0 (is)
                378     POP_JUMP_IF_FALSE               192 (to 384)
                380     LOAD_FAST                       9: obj_locals
                382     STORE_DEREF                     1: locals
                384     LOAD_CLOSURE                    0: globals
                386     LOAD_CLOSURE                    1: locals
                388     BUILD_TUPLE                     2
                390     LOAD_CONST                      11: <CODE> <dictcomp>
                392     LOAD_CONST                      12: 'get_annotations.<locals>.<dictcomp>'
                394     MAKE_FUNCTION                   8
                396     LOAD_FAST                       5: ann
                398     LOAD_METHOD                     20: items
                400     CALL_METHOD                     0
                402     GET_ITER                        
                404     CALL_FUNCTION                   1
                406     STORE_FAST                      11: return_value
                408     LOAD_FAST                       11: return_value
                410     RETURN_VALUE                    
        'get_annotations'
        [Code]
            File Name: inspect.py
            Object Name: ismodule
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'ModuleType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a module.\n\n    Module objects provide these attributes:\n        __cached__      pathname to byte compiled file\n        __doc__         documentation string\n        __file__        filename (missing for built-in modules)'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: ModuleType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'ismodule'
        [Code]
            File Name: inspect.py
            Object Name: isclass
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'type'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a class.\n\n    Class objects provide these attributes:\n        __doc__         documentation string\n        __module__      name of module in which this class was defined'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: type
                6       CALL_FUNCTION                   2
                8       RETURN_VALUE                    
        'isclass'
        [Code]
            File Name: inspect.py
            Object Name: ismethod
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'MethodType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is an instance method.\n\n    Instance method objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this method was defined\n        __func__        function object containing implementation of method\n        __self__        instance to which this method is bound'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: MethodType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'ismethod'
        [Code]
            File Name: inspect.py
            Object Name: ismethoddescriptor
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isclass'
                'ismethod'
                'isfunction'
                'type'
                'hasattr'
            [Var Names]
                'object'
                'tp'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a method descriptor.\n\n    But not if ismethod() or isclass() or isfunction() are true.\n\n    This is new in Python 2.2, and, for example, is true of int.__add__.\n    An object passing this test has a __get__ attribute but not a __set__\n    attribute, but beyond that the set of attributes varies.  __name__ is\n    usually sensible, and __doc__ often is.\n\n    Methods implemented via descriptors that also pass one of the other\n    tests return false from the ismethoddescriptor() test, simply because\n    the other tests promise more -- you can, e.g., count on having the\n    __func__ attribute (etc) when an object passes ismethod().'
                False
                '__get__'
                '__set__'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isclass
                2       LOAD_FAST                       0: object
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_TRUE                12 (to 24)
                8       LOAD_GLOBAL                     1: ismethod
                10      LOAD_FAST                       0: object
                12      CALL_FUNCTION                   1
                14      POP_JUMP_IF_TRUE                12 (to 24)
                16      LOAD_GLOBAL                     2: isfunction
                18      LOAD_FAST                       0: object
                20      CALL_FUNCTION                   1
                22      POP_JUMP_IF_FALSE               14 (to 28)
                24      LOAD_CONST                      1: False
                26      RETURN_VALUE                    
                28      LOAD_GLOBAL                     3: type
                30      LOAD_FAST                       0: object
                32      CALL_FUNCTION                   1
                34      STORE_FAST                      1: tp
                36      LOAD_GLOBAL                     4: hasattr
                38      LOAD_FAST                       1: tp
                40      LOAD_CONST                      2: '__get__'
                42      CALL_FUNCTION                   2
                44      JUMP_IF_FALSE_OR_POP            28 (to 56)
                46      LOAD_GLOBAL                     4: hasattr
                48      LOAD_FAST                       1: tp
                50      LOAD_CONST                      3: '__set__'
                52      CALL_FUNCTION                   2
                54      UNARY_NOT                       
                56      RETURN_VALUE                    
        'ismethoddescriptor'
        [Code]
            File Name: inspect.py
            Object Name: isdatadescriptor
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isclass'
                'ismethod'
                'isfunction'
                'type'
                'hasattr'
            [Var Names]
                'object'
                'tp'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a data descriptor.\n\n    Data descriptors have a __set__ or a __delete__ attribute.  Examples are\n    properties (defined in Python) and getsets and members (defined in C).\n    Typically, data descriptors will also have __name__ and __doc__ attributes\n    (properties, getsets, and members have both of these attributes), but this\n    is not guaranteed.'
                False
                '__set__'
                '__delete__'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isclass
                2       LOAD_FAST                       0: object
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_TRUE                12 (to 24)
                8       LOAD_GLOBAL                     1: ismethod
                10      LOAD_FAST                       0: object
                12      CALL_FUNCTION                   1
                14      POP_JUMP_IF_TRUE                12 (to 24)
                16      LOAD_GLOBAL                     2: isfunction
                18      LOAD_FAST                       0: object
                20      CALL_FUNCTION                   1
                22      POP_JUMP_IF_FALSE               14 (to 28)
                24      LOAD_CONST                      1: False
                26      RETURN_VALUE                    
                28      LOAD_GLOBAL                     3: type
                30      LOAD_FAST                       0: object
                32      CALL_FUNCTION                   1
                34      STORE_FAST                      1: tp
                36      LOAD_GLOBAL                     4: hasattr
                38      LOAD_FAST                       1: tp
                40      LOAD_CONST                      2: '__set__'
                42      CALL_FUNCTION                   2
                44      JUMP_IF_TRUE_OR_POP             27 (to 54)
                46      LOAD_GLOBAL                     4: hasattr
                48      LOAD_FAST                       1: tp
                50      LOAD_CONST                      3: '__delete__'
                52      CALL_FUNCTION                   2
                54      RETURN_VALUE                    
        'isdatadescriptor'
        'MemberDescriptorType'
        [Code]
            File Name: inspect.py
            Object Name: ismemberdescriptor
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'MemberDescriptorType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: MemberDescriptorType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'ismemberdescriptor'
        [Code]
            File Name: inspect.py
            Object Name: ismemberdescriptor
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.'
                False
            [Disassembly]
                0       LOAD_CONST                      1: False
                2       RETURN_VALUE                    
        'GetSetDescriptorType'
        [Code]
            File Name: inspect.py
            Object Name: isgetsetdescriptor
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'GetSetDescriptorType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: GetSetDescriptorType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'isgetsetdescriptor'
        [Code]
            File Name: inspect.py
            Object Name: isgetsetdescriptor
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.'
                False
            [Disassembly]
                0       LOAD_CONST                      1: False
                2       RETURN_VALUE                    
        [Code]
            File Name: inspect.py
            Object Name: isfunction
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'FunctionType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a user-defined function.\n\n    Function objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this function was defined\n        __code__        code object containing compiled function bytecode\n        __defaults__    tuple of any default values for arguments\n        __globals__     global namespace in which this function was defined\n        __annotations__ dict of parameter annotations\n        __kwdefaults__  dict of keyword only parameters with defaults'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: FunctionType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'isfunction'
        [Code]
            File Name: inspect.py
            Object Name: _has_code_flag
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ismethod'
                '__func__'
                'functools'
                '_unwrap_partial'
                'isfunction'
                '_signature_is_functionlike'
                'bool'
                '__code__'
                'co_flags'
            [Var Names]
                'f'
                'flag'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if ``f`` is a function (or a method or functools.partial\n    wrapper wrapping a function) whose code object has the given ``flag``\n    set in its flags.'
                False
            [Disassembly]
                0       LOAD_GLOBAL                     0: ismethod
                2       LOAD_FAST                       0: f
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_FALSE               11 (to 22)
                8       LOAD_FAST                       0: f
                10      LOAD_ATTR                       1: __func__
                12      STORE_FAST                      0: f
                14      LOAD_GLOBAL                     0: ismethod
                16      LOAD_FAST                       0: f
                18      CALL_FUNCTION                   1
                20      POP_JUMP_IF_TRUE                4 (to 8)
                22      LOAD_GLOBAL                     2: functools
                24      LOAD_METHOD                     3: _unwrap_partial
                26      LOAD_FAST                       0: f
                28      CALL_METHOD                     1
                30      STORE_FAST                      0: f
                32      LOAD_GLOBAL                     4: isfunction
                34      LOAD_FAST                       0: f
                36      CALL_FUNCTION                   1
                38      POP_JUMP_IF_TRUE                26 (to 52)
                40      LOAD_GLOBAL                     5: _signature_is_functionlike
                42      LOAD_FAST                       0: f
                44      CALL_FUNCTION                   1
                46      POP_JUMP_IF_TRUE                26 (to 52)
                48      LOAD_CONST                      1: False
                50      RETURN_VALUE                    
                52      LOAD_GLOBAL                     6: bool
                54      LOAD_FAST                       0: f
                56      LOAD_ATTR                       7: __code__
                58      LOAD_ATTR                       8: co_flags
                60      LOAD_FAST                       1: flag
                62      BINARY_AND                      
                64      CALL_FUNCTION                   1
                66      RETURN_VALUE                    
        '_has_code_flag'
        [Code]
            File Name: inspect.py
            Object Name: isgeneratorfunction
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_has_code_flag'
                'CO_GENERATOR'
            [Var Names]
                'obj'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a user-defined generator function.\n\n    Generator function objects provide the same attributes as functions.\n    See help(isfunction) for a list of attributes.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _has_code_flag
                2       LOAD_FAST                       0: obj
                4       LOAD_GLOBAL                     1: CO_GENERATOR
                6       CALL_FUNCTION                   2
                8       RETURN_VALUE                    
        'isgeneratorfunction'
        [Code]
            File Name: inspect.py
            Object Name: iscoroutinefunction
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_has_code_flag'
                'CO_COROUTINE'
            [Var Names]
                'obj'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a coroutine function.\n\n    Coroutine functions are defined with "async def" syntax.\n    '
            [Disassembly]
                0       LOAD_GLOBAL                     0: _has_code_flag
                2       LOAD_FAST                       0: obj
                4       LOAD_GLOBAL                     1: CO_COROUTINE
                6       CALL_FUNCTION                   2
                8       RETURN_VALUE                    
        'iscoroutinefunction'
        [Code]
            File Name: inspect.py
            Object Name: isasyncgenfunction
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_has_code_flag'
                'CO_ASYNC_GENERATOR'
            [Var Names]
                'obj'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is an asynchronous generator function.\n\n    Asynchronous generator functions are defined with "async def"\n    syntax and have "yield" expressions in their body.\n    '
            [Disassembly]
                0       LOAD_GLOBAL                     0: _has_code_flag
                2       LOAD_FAST                       0: obj
                4       LOAD_GLOBAL                     1: CO_ASYNC_GENERATOR
                6       CALL_FUNCTION                   2
                8       RETURN_VALUE                    
        'isasyncgenfunction'
        [Code]
            File Name: inspect.py
            Object Name: isasyncgen
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'AsyncGeneratorType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is an asynchronous generator.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: AsyncGeneratorType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'isasyncgen'
        [Code]
            File Name: inspect.py
            Object Name: isgenerator
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'GeneratorType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a generator.\n\n    Generator objects provide these attributes:\n        __iter__        defined to support iteration over container\n        close           raises a new GeneratorExit exception inside the\n                        generator to terminate the iteration\n        gi_code         code object\n        gi_frame        frame object or possibly None once the generator has\n                        been exhausted\n        gi_running      set to 1 when generator is executing, 0 otherwise\n        next            return the next item from the container\n        send            resumes the generator and "sends" a value that becomes\n                        the result of the current yield-expression\n        throw           used to raise an exception inside the generator'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: GeneratorType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'isgenerator'
        [Code]
            File Name: inspect.py
            Object Name: iscoroutine
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'CoroutineType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a coroutine.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: CoroutineType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'iscoroutine'
        [Code]
            File Name: inspect.py
            Object Name: isawaitable
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'CoroutineType'
                'GeneratorType'
                'bool'
                'gi_code'
                'co_flags'
                'CO_ITERABLE_COROUTINE'
                'collections'
                'abc'
                'Awaitable'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if object can be passed to an ``await`` expression.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: CoroutineType
                8       CALL_FUNCTION                   2
                10      JUMP_IF_TRUE_OR_POP             26 (to 52)
                12      LOAD_GLOBAL                     0: isinstance
                14      LOAD_FAST                       0: object
                16      LOAD_GLOBAL                     1: types
                18      LOAD_ATTR                       3: GeneratorType
                20      CALL_FUNCTION                   2
                22      JUMP_IF_FALSE_OR_POP            19 (to 38)
                24      LOAD_GLOBAL                     4: bool
                26      LOAD_FAST                       0: object
                28      LOAD_ATTR                       5: gi_code
                30      LOAD_ATTR                       6: co_flags
                32      LOAD_GLOBAL                     7: CO_ITERABLE_COROUTINE
                34      BINARY_AND                      
                36      CALL_FUNCTION                   1
                38      JUMP_IF_TRUE_OR_POP             26 (to 52)
                40      LOAD_GLOBAL                     0: isinstance
                42      LOAD_FAST                       0: object
                44      LOAD_GLOBAL                     8: collections
                46      LOAD_ATTR                       9: abc
                48      LOAD_ATTR                       10: Awaitable
                50      CALL_FUNCTION                   2
                52      RETURN_VALUE                    
        'isawaitable'
        [Code]
            File Name: inspect.py
            Object Name: istraceback
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'TracebackType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a traceback.\n\n    Traceback objects provide these attributes:\n        tb_frame        frame object at this level\n        tb_lasti        index of last attempted instruction in bytecode\n        tb_lineno       current line number in Python source code\n        tb_next         next inner traceback object (called by this level)'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: TracebackType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'istraceback'
        [Code]
            File Name: inspect.py
            Object Name: isframe
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'FrameType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Return true if the object is a frame object.\n\n    Frame objects provide these attributes:\n        f_back          next outer frame object (this frame's caller)\n        f_builtins      built-in namespace seen by this frame\n        f_code          code object being executed in this frame\n        f_globals       global namespace seen by this frame\n        f_lasti         index of last attempted instruction in bytecode\n        f_lineno        current line number in Python source code\n        f_locals        local namespace seen by this frame\n        f_trace         tracing function for this frame, or None"
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: FrameType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'isframe'
        [Code]
            File Name: inspect.py
            Object Name: iscode
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'CodeType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a code object.\n\n    Code objects provide these attributes:\n        co_argcount         number of arguments (not including *, ** args\n                            or keyword only arguments)\n        co_code             string of raw compiled bytecode\n        co_cellvars         tuple of names of cell variables\n        co_consts           tuple of constants used in the bytecode\n        co_filename         name of file in which this code object was created\n        co_firstlineno      number of first line in Python source code\n        co_flags            bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg\n                            | 16=nested | 32=generator | 64=nofree | 128=coroutine\n                            | 256=iterable_coroutine | 512=async_generator\n        co_freevars         tuple of names of free variables\n        co_posonlyargcount  number of positional only arguments\n        co_kwonlyargcount   number of keyword only arguments (not including ** arg)\n        co_lnotab           encoded mapping of line numbers to bytecode indices\n        co_name             name with which this code object was defined\n        co_names            tuple of names other than arguments and function locals\n        co_nlocals          number of local variables\n        co_stacksize        virtual machine stack space required\n        co_varnames         tuple of names of arguments and local variables'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: CodeType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'iscode'
        [Code]
            File Name: inspect.py
            Object Name: isbuiltin
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'types'
                'BuiltinFunctionType'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is a built-in function or method.\n\n    Built-in functions and methods provide these attributes:\n        __doc__         documentation string\n        __name__        original name of this function or method\n        __self__        instance to which a method is bound, or None'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: types
                6       LOAD_ATTR                       2: BuiltinFunctionType
                8       CALL_FUNCTION                   2
                10      RETURN_VALUE                    
        'isbuiltin'
        [Code]
            File Name: inspect.py
            Object Name: isroutine
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isbuiltin'
                'isfunction'
                'ismethod'
                'ismethoddescriptor'
            [Var Names]
                'object'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is any kind of function or method.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isbuiltin
                2       LOAD_FAST                       0: object
                4       CALL_FUNCTION                   1
                6       JUMP_IF_TRUE_OR_POP             15 (to 30)
                8       LOAD_GLOBAL                     1: isfunction
                10      LOAD_FAST                       0: object
                12      CALL_FUNCTION                   1
                14      JUMP_IF_TRUE_OR_POP             15 (to 30)
                16      LOAD_GLOBAL                     2: ismethod
                18      LOAD_FAST                       0: object
                20      CALL_FUNCTION                   1
                22      JUMP_IF_TRUE_OR_POP             15 (to 30)
                24      LOAD_GLOBAL                     3: ismethoddescriptor
                26      LOAD_FAST                       0: object
                28      CALL_FUNCTION                   1
                30      RETURN_VALUE                    
        'isroutine'
        [Code]
            File Name: inspect.py
            Object Name: isabstract
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                'type'
                '__flags__'
                'TPFLAGS_IS_ABSTRACT'
                'issubclass'
                'abc'
                'ABCMeta'
                'hasattr'
                '__dict__'
                'items'
                'getattr'
                '__bases__'
            [Var Names]
                'object'
                'name'
                'value'
                'base'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return true if the object is an abstract base class (ABC).'
                False
                True
                '__abstractmethods__'
                '__isabstractmethod__'
                (
                )
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: object
                4       LOAD_GLOBAL                     1: type
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_TRUE                7 (to 14)
                10      LOAD_CONST                      1: False
                12      RETURN_VALUE                    
                14      LOAD_FAST                       0: object
                16      LOAD_ATTR                       2: __flags__
                18      LOAD_GLOBAL                     3: TPFLAGS_IS_ABSTRACT
                20      BINARY_AND                      
                22      POP_JUMP_IF_FALSE               14 (to 28)
                24      LOAD_CONST                      2: True
                26      RETURN_VALUE                    
                28      LOAD_GLOBAL                     4: issubclass
                30      LOAD_GLOBAL                     1: type
                32      LOAD_FAST                       0: object
                34      CALL_FUNCTION                   1
                36      LOAD_GLOBAL                     5: abc
                38      LOAD_ATTR                       6: ABCMeta
                40      CALL_FUNCTION                   2
                42      POP_JUMP_IF_TRUE                24 (to 48)
                44      LOAD_CONST                      1: False
                46      RETURN_VALUE                    
                48      LOAD_GLOBAL                     7: hasattr
                50      LOAD_FAST                       0: object
                52      LOAD_CONST                      3: '__abstractmethods__'
                54      CALL_FUNCTION                   2
                56      POP_JUMP_IF_FALSE               31 (to 62)
                58      LOAD_CONST                      1: False
                60      RETURN_VALUE                    
                62      LOAD_FAST                       0: object
                64      LOAD_ATTR                       8: __dict__
                66      LOAD_METHOD                     9: items
                68      CALL_METHOD                     0
                70      GET_ITER                        
                72      FOR_ITER                        13 (to 100)
                74      UNPACK_SEQUENCE                 2
                76      STORE_FAST                      1: name
                78      STORE_FAST                      2: value
                80      LOAD_GLOBAL                     10: getattr
                82      LOAD_FAST                       2: value
                84      LOAD_CONST                      4: '__isabstractmethod__'
                86      LOAD_CONST                      1: False
                88      CALL_FUNCTION                   3
                90      POP_JUMP_IF_FALSE               49 (to 98)
                92      POP_TOP                         
                94      LOAD_CONST                      2: True
                96      RETURN_VALUE                    
                98      JUMP_ABSOLUTE                   36 (to 72)
                100     LOAD_FAST                       0: object
                102     LOAD_ATTR                       11: __bases__
                104     GET_ITER                        
                106     FOR_ITER                        27 (to 162)
                108     STORE_FAST                      3: base
                110     LOAD_GLOBAL                     10: getattr
                112     LOAD_FAST                       3: base
                114     LOAD_CONST                      3: '__abstractmethods__'
                116     LOAD_CONST                      5: ()
                118     CALL_FUNCTION                   3
                120     GET_ITER                        
                122     FOR_ITER                        18 (to 160)
                124     STORE_FAST                      1: name
                126     LOAD_GLOBAL                     10: getattr
                128     LOAD_FAST                       0: object
                130     LOAD_FAST                       1: name
                132     LOAD_CONST                      6: None
                134     CALL_FUNCTION                   3
                136     STORE_FAST                      2: value
                138     LOAD_GLOBAL                     10: getattr
                140     LOAD_FAST                       2: value
                142     LOAD_CONST                      4: '__isabstractmethod__'
                144     LOAD_CONST                      1: False
                146     CALL_FUNCTION                   3
                148     POP_JUMP_IF_FALSE               79 (to 158)
                150     POP_TOP                         
                152     POP_TOP                         
                154     LOAD_CONST                      2: True
                156     RETURN_VALUE                    
                158     JUMP_ABSOLUTE                   61 (to 122)
                160     JUMP_ABSOLUTE                   53 (to 106)
                162     LOAD_CONST                      1: False
                164     RETURN_VALUE                    
        'isabstract'
        [Code]
            File Name: inspect.py
            Object Name: getmembers
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 11
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isclass'
                'getmro'
                'set'
                'dir'
                '__bases__'
                '__dict__'
                'items'
                'isinstance'
                'types'
                'DynamicClassAttribute'
                'append'
                'AttributeError'
                'getattr'
                'add'
                'sort'
            [Var Names]
                'object'
                'predicate'
                'mro'
                'results'
                'processed'
                'names'
                'base'
                'k'
                'v'
                'key'
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return all members of an object as (name, value) pairs sorted by name.\n    Optionally, only return members that satisfy a given predicate.'
                (
                )
                [Code]
                    File Name: inspect.py
                    Object Name: <lambda>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'pair'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: pair
                        2       LOAD_CONST                      1: 0
                        4       BINARY_SUBSCR                   
                        6       RETURN_VALUE                    
                'getmembers.<locals>.<lambda>'
                (
                    'key'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: isclass
                2       LOAD_FAST                       0: object
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_FALSE               12 (to 24)
                8       LOAD_FAST                       0: object
                10      BUILD_TUPLE                     1
                12      LOAD_GLOBAL                     1: getmro
                14      LOAD_FAST                       0: object
                16      CALL_FUNCTION                   1
                18      BINARY_ADD                      
                20      STORE_FAST                      2: mro
                22      JUMP_FORWARD                    2 (to 28)
                24      LOAD_CONST                      1: ()
                26      STORE_FAST                      2: mro
                28      BUILD_LIST                      0
                30      STORE_FAST                      3: results
                32      LOAD_GLOBAL                     2: set
                34      CALL_FUNCTION                   0
                36      STORE_FAST                      4: processed
                38      LOAD_GLOBAL                     3: dir
                40      LOAD_FAST                       0: object
                42      CALL_FUNCTION                   1
                44      STORE_FAST                      5: names
                46      SETUP_FINALLY                   29 (to 106)
                48      LOAD_FAST                       0: object
                50      LOAD_ATTR                       4: __bases__
                52      GET_ITER                        
                54      FOR_ITER                        23 (to 102)
                56      STORE_FAST                      6: base
                58      LOAD_FAST                       6: base
                60      LOAD_ATTR                       5: __dict__
                62      LOAD_METHOD                     6: items
                64      CALL_METHOD                     0
                66      GET_ITER                        
                68      FOR_ITER                        15 (to 100)
                70      UNPACK_SEQUENCE                 2
                72      STORE_FAST                      7: k
                74      STORE_FAST                      8: v
                76      LOAD_GLOBAL                     7: isinstance
                78      LOAD_FAST                       8: v
                80      LOAD_GLOBAL                     8: types
                82      LOAD_ATTR                       9: DynamicClassAttribute
                84      CALL_FUNCTION                   2
                86      POP_JUMP_IF_FALSE               49 (to 98)
                88      LOAD_FAST                       5: names
                90      LOAD_METHOD                     10: append
                92      LOAD_FAST                       7: k
                94      CALL_METHOD                     1
                96      POP_TOP                         
                98      JUMP_ABSOLUTE                   34 (to 68)
                100     JUMP_ABSOLUTE                   27 (to 54)
                102     POP_BLOCK                       
                104     JUMP_FORWARD                    9 (to 124)
                106     DUP_TOP                         
                108     LOAD_GLOBAL                     11: AttributeError
                110     JUMP_IF_NOT_EXC_MATCH           61 (to 122)
                112     POP_TOP                         
                114     POP_TOP                         
                116     POP_TOP                         
                118     POP_EXCEPT                      
                120     JUMP_FORWARD                    1 (to 124)
                122     RERAISE                         0
                124     LOAD_FAST                       5: names
                126     GET_ITER                        
                128     FOR_ITER                        62 (to 254)
                130     STORE_FAST                      9: key
                132     SETUP_FINALLY                   13 (to 160)
                134     LOAD_GLOBAL                     12: getattr
                136     LOAD_FAST                       0: object
                138     LOAD_FAST                       9: key
                140     CALL_FUNCTION                   2
                142     STORE_FAST                      10: value
                144     LOAD_FAST                       9: key
                146     LOAD_FAST                       4: processed
                148     CONTAINS_OP                     0 (in)
                150     POP_JUMP_IF_FALSE               78 (to 156)
                152     LOAD_GLOBAL                     11: AttributeError
                154     RAISE_VARARGS                   1
                156     POP_BLOCK                       
                158     JUMP_FORWARD                    28 (to 216)
                160     DUP_TOP                         
                162     LOAD_GLOBAL                     11: AttributeError
                164     JUMP_IF_NOT_EXC_MATCH           107 (to 214)
                166     POP_TOP                         
                168     POP_TOP                         
                170     POP_TOP                         
                172     LOAD_FAST                       2: mro
                174     GET_ITER                        
                176     FOR_ITER                        14 (to 206)
                178     STORE_FAST                      6: base
                180     LOAD_FAST                       9: key
                182     LOAD_FAST                       6: base
                184     LOAD_ATTR                       5: __dict__
                186     CONTAINS_OP                     0 (in)
                188     POP_JUMP_IF_FALSE               102 (to 204)
                190     LOAD_FAST                       6: base
                192     LOAD_ATTR                       5: __dict__
                194     LOAD_FAST                       9: key
                196     BINARY_SUBSCR                   
                198     STORE_FAST                      10: value
                200     POP_TOP                         
                202     JUMP_FORWARD                    3 (to 210)
                204     JUMP_ABSOLUTE                   88 (to 176)
                206     POP_EXCEPT                      
                208     JUMP_ABSOLUTE                   64 (to 128)
                210     POP_EXCEPT                      
                212     JUMP_FORWARD                    1 (to 216)
                214     RERAISE                         0
                216     LOAD_FAST                       1: predicate
                218     POP_JUMP_IF_FALSE               114 (to 228)
                220     LOAD_FAST                       1: predicate
                222     LOAD_FAST                       10: value
                224     CALL_FUNCTION                   1
                226     POP_JUMP_IF_FALSE               121 (to 242)
                228     LOAD_FAST                       3: results
                230     LOAD_METHOD                     10: append
                232     LOAD_FAST                       9: key
                234     LOAD_FAST                       10: value
                236     BUILD_TUPLE                     2
                238     CALL_METHOD                     1
                240     POP_TOP                         
                242     LOAD_FAST                       4: processed
                244     LOAD_METHOD                     13: add
                246     LOAD_FAST                       9: key
                248     CALL_METHOD                     1
                250     POP_TOP                         
                252     JUMP_ABSOLUTE                   64 (to 128)
                254     LOAD_FAST                       3: results
                256     LOAD_ATTR                       14: sort
                258     LOAD_CONST                      2: <CODE> <lambda>
                260     LOAD_CONST                      3: 'getmembers.<locals>.<lambda>'
                262     MAKE_FUNCTION                   0
                264     LOAD_CONST                      4: ('key',)
                266     CALL_FUNCTION_KW                1
                268     POP_TOP                         
                270     LOAD_FAST                       3: results
                272     RETURN_VALUE                    
        'getmembers'
        'Attribute'
        'name kind defining_class object'
        [Code]
            File Name: inspect.py
            Object Name: classify_class_attrs
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 21
            Stack Size: 11
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getmro'
                'type'
                'tuple'
                'dir'
                '__dict__'
                'items'
                'isinstance'
                'types'
                'DynamicClassAttribute'
                'fget'
                'append'
                'set'
                'Exception'
                'getattr'
                '__getattr__'
                'AttributeError'
                'staticmethod'
                'BuiltinMethodType'
                'classmethod'
                'ClassMethodDescriptorType'
                'property'
                'isroutine'
                'Attribute'
                'add'
            [Var Names]
                'cls'
                'mro'
                'metamro'
                'class_bases'
                'all_bases'
                'names'
                'base'
                'k'
                'v'
                'result'
                'processed'
                'name'
                'homecls'
                'get_obj'
                'dict_obj'
                'exc'
                'last_cls'
                'srch_cls'
                'srch_obj'
                'obj'
                'kind'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Return list of attribute-descriptor tuples.\n\n    For each name in dir(cls), the return list contains a 4-tuple\n    with these elements:\n\n        0. The name (a string).\n\n        1. The kind of attribute this is, one of these strings:\n               'class method'    created via classmethod()\n               'static method'   created via staticmethod()\n               'property'        created via property()\n               'method'          any other flavor of method or descriptor\n               'data'            not a method\n\n        2. The class which defined this attribute (a class).\n\n        3. The object as obtained by calling getattr; if this fails, or if the\n           resulting object does not live anywhere in the class' mro (including\n           metaclasses) then the object is looked up in the defining class's\n           dict (found by walking the mro).\n\n    If one of the items in dir(cls) is stored in the metaclass it will now\n    be discovered and not have None be listed as the class in which it was\n    defined.  Any items whose home class cannot be discovered are skipped.\n    "
                [Code]
                    File Name: inspect.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'type'
                        'object'
                    [Var Names]
                        '.0'
                        'cls'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        11 (to 28)
                        6       STORE_FAST                      1: cls
                        8       LOAD_FAST                       1: cls
                        10      LOAD_GLOBAL                     0: type
                        12      LOAD_GLOBAL                     1: object
                        14      BUILD_TUPLE                     2
                        16      CONTAINS_OP                     1 (not in)
                        18      POP_JUMP_IF_FALSE               2 (to 4)
                        20      LOAD_FAST                       1: cls
                        22      YIELD_VALUE                     
                        24      POP_TOP                         
                        26      JUMP_ABSOLUTE                   2 (to 4)
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                'classify_class_attrs.<locals>.<genexpr>'
                None
                '__dict__'
                "__dict__ is special, don't want the proxy"
                '__objclass__'
                'static method'
                'class method'
                'property'
                'method'
                'data'
            [Disassembly]
                0       LOAD_GLOBAL                     0: getmro
                2       LOAD_FAST                       0: cls
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      1: mro
                8       LOAD_GLOBAL                     0: getmro
                10      LOAD_GLOBAL                     1: type
                12      LOAD_FAST                       0: cls
                14      CALL_FUNCTION                   1
                16      CALL_FUNCTION                   1
                18      STORE_FAST                      2: metamro
                20      LOAD_GLOBAL                     2: tuple
                22      LOAD_CONST                      1: <CODE> <genexpr>
                24      LOAD_CONST                      2: 'classify_class_attrs.<locals>.<genexpr>'
                26      MAKE_FUNCTION                   0
                28      LOAD_FAST                       2: metamro
                30      GET_ITER                        
                32      CALL_FUNCTION                   1
                34      CALL_FUNCTION                   1
                36      STORE_FAST                      2: metamro
                38      LOAD_FAST                       0: cls
                40      BUILD_TUPLE                     1
                42      LOAD_FAST                       1: mro
                44      BINARY_ADD                      
                46      STORE_FAST                      3: class_bases
                48      LOAD_FAST                       3: class_bases
                50      LOAD_FAST                       2: metamro
                52      BINARY_ADD                      
                54      STORE_FAST                      4: all_bases
                56      LOAD_GLOBAL                     3: dir
                58      LOAD_FAST                       0: cls
                60      CALL_FUNCTION                   1
                62      STORE_FAST                      5: names
                64      LOAD_FAST                       1: mro
                66      GET_ITER                        
                68      FOR_ITER                        28 (to 126)
                70      STORE_FAST                      6: base
                72      LOAD_FAST                       6: base
                74      LOAD_ATTR                       4: __dict__
                76      LOAD_METHOD                     5: items
                78      CALL_METHOD                     0
                80      GET_ITER                        
                82      FOR_ITER                        20 (to 124)
                84      UNPACK_SEQUENCE                 2
                86      STORE_FAST                      7: k
                88      STORE_FAST                      8: v
                90      LOAD_GLOBAL                     6: isinstance
                92      LOAD_FAST                       8: v
                94      LOAD_GLOBAL                     7: types
                96      LOAD_ATTR                       8: DynamicClassAttribute
                98      CALL_FUNCTION                   2
                100     POP_JUMP_IF_FALSE               61 (to 122)
                102     LOAD_FAST                       8: v
                104     LOAD_ATTR                       9: fget
                106     LOAD_CONST                      3: None
                108     IS_OP                           1 (is not)
                110     POP_JUMP_IF_FALSE               61 (to 122)
                112     LOAD_FAST                       5: names
                114     LOAD_METHOD                     10: append
                116     LOAD_FAST                       7: k
                118     CALL_METHOD                     1
                120     POP_TOP                         
                122     JUMP_ABSOLUTE                   41 (to 82)
                124     JUMP_ABSOLUTE                   34 (to 68)
                126     BUILD_LIST                      0
                128     STORE_FAST                      9: result
                130     LOAD_GLOBAL                     11: set
                132     CALL_FUNCTION                   0
                134     STORE_FAST                      10: processed
                136     LOAD_FAST                       5: names
                138     GET_ITER                        
                140     FOR_ITER                        209 (to 560)
                142     STORE_FAST                      11: name
                144     LOAD_CONST                      3: None
                146     STORE_FAST                      12: homecls
                148     LOAD_CONST                      3: None
                150     STORE_FAST                      13: get_obj
                152     LOAD_CONST                      3: None
                154     STORE_FAST                      14: dict_obj
                156     LOAD_FAST                       11: name
                158     LOAD_FAST                       10: processed
                160     CONTAINS_OP                     1 (not in)
                162     POP_JUMP_IF_FALSE               182 (to 364)
                164     SETUP_FINALLY                   15 (to 196)
                166     LOAD_FAST                       11: name
                168     LOAD_CONST                      4: '__dict__'
                170     COMPARE_OP                      2 (==)
                172     POP_JUMP_IF_FALSE               91 (to 182)
                174     LOAD_GLOBAL                     12: Exception
                176     LOAD_CONST                      5: "__dict__ is special, don't want the proxy"
                178     CALL_FUNCTION                   1
                180     RAISE_VARARGS                   1
                182     LOAD_GLOBAL                     13: getattr
                184     LOAD_FAST                       0: cls
                186     LOAD_FAST                       11: name
                188     CALL_FUNCTION                   2
                190     STORE_FAST                      13: get_obj
                192     POP_BLOCK                       
                194     JUMP_FORWARD                    18 (to 232)
                196     DUP_TOP                         
                198     LOAD_GLOBAL                     12: Exception
                200     JUMP_IF_NOT_EXC_MATCH           115 (to 230)
                202     POP_TOP                         
                204     STORE_FAST                      15: exc
                206     POP_TOP                         
                208     SETUP_FINALLY                   6 (to 222)
                210     POP_BLOCK                       
                212     POP_EXCEPT                      
                214     LOAD_CONST                      3: None
                216     STORE_FAST                      15: exc
                218     DELETE_FAST                     15: exc
                220     JUMP_FORWARD                    71 (to 364)
                222     LOAD_CONST                      3: None
                224     STORE_FAST                      15: exc
                226     DELETE_FAST                     15: exc
                228     RERAISE                         1
                230     RERAISE                         0
                232     LOAD_GLOBAL                     13: getattr
                234     LOAD_FAST                       13: get_obj
                236     LOAD_CONST                      6: '__objclass__'
                238     LOAD_FAST                       12: homecls
                240     CALL_FUNCTION                   3
                242     STORE_FAST                      12: homecls
                244     LOAD_FAST                       12: homecls
                246     LOAD_FAST                       3: class_bases
                248     CONTAINS_OP                     1 (not in)
                250     POP_JUMP_IF_FALSE               182 (to 364)
                252     LOAD_CONST                      3: None
                254     STORE_FAST                      12: homecls
                256     LOAD_CONST                      3: None
                258     STORE_FAST                      16: last_cls
                260     LOAD_FAST                       3: class_bases
                262     GET_ITER                        
                264     FOR_ITER                        14 (to 294)
                266     STORE_FAST                      17: srch_cls
                268     LOAD_GLOBAL                     13: getattr
                270     LOAD_FAST                       17: srch_cls
                272     LOAD_FAST                       11: name
                274     LOAD_CONST                      3: None
                276     CALL_FUNCTION                   3
                278     STORE_FAST                      18: srch_obj
                280     LOAD_FAST                       18: srch_obj
                282     LOAD_FAST                       13: get_obj
                284     IS_OP                           0 (is)
                286     POP_JUMP_IF_FALSE               146 (to 292)
                288     LOAD_FAST                       17: srch_cls
                290     STORE_FAST                      16: last_cls
                292     JUMP_ABSOLUTE                   132 (to 264)
                294     LOAD_FAST                       2: metamro
                296     GET_ITER                        
                298     FOR_ITER                        26 (to 352)
                300     STORE_FAST                      17: srch_cls
                302     SETUP_FINALLY                   8 (to 320)
                304     LOAD_FAST                       17: srch_cls
                306     LOAD_METHOD                     14: __getattr__
                308     LOAD_FAST                       0: cls
                310     LOAD_FAST                       11: name
                312     CALL_METHOD                     2
                314     STORE_FAST                      18: srch_obj
                316     POP_BLOCK                       
                318     JUMP_FORWARD                    9 (to 338)
                320     DUP_TOP                         
                322     LOAD_GLOBAL                     15: AttributeError
                324     JUMP_IF_NOT_EXC_MATCH           168 (to 336)
                326     POP_TOP                         
                328     POP_TOP                         
                330     POP_TOP                         
                332     POP_EXCEPT                      
                334     JUMP_ABSOLUTE                   149 (to 298)
                336     RERAISE                         0
                338     LOAD_FAST                       18: srch_obj
                340     LOAD_FAST                       13: get_obj
                342     IS_OP                           0 (is)
                344     POP_JUMP_IF_FALSE               175 (to 350)
                346     LOAD_FAST                       17: srch_cls
                348     STORE_FAST                      16: last_cls
                350     JUMP_ABSOLUTE                   149 (to 298)
                352     LOAD_FAST                       16: last_cls
                354     LOAD_CONST                      3: None
                356     IS_OP                           1 (is not)
                358     POP_JUMP_IF_FALSE               182 (to 364)
                360     LOAD_FAST                       16: last_cls
                362     STORE_FAST                      12: homecls
                364     LOAD_FAST                       4: all_bases
                366     GET_ITER                        
                368     FOR_ITER                        20 (to 410)
                370     STORE_FAST                      6: base
                372     LOAD_FAST                       11: name
                374     LOAD_FAST                       6: base
                376     LOAD_ATTR                       4: __dict__
                378     CONTAINS_OP                     0 (in)
                380     POP_JUMP_IF_FALSE               204 (to 408)
                382     LOAD_FAST                       6: base
                384     LOAD_ATTR                       4: __dict__
                386     LOAD_FAST                       11: name
                388     BINARY_SUBSCR                   
                390     STORE_FAST                      14: dict_obj
                392     LOAD_FAST                       12: homecls
                394     LOAD_FAST                       2: metamro
                396     CONTAINS_OP                     1 (not in)
                398     POP_JUMP_IF_FALSE               202 (to 404)
                400     LOAD_FAST                       6: base
                402     STORE_FAST                      12: homecls
                404     POP_TOP                         
                406     JUMP_FORWARD                    1 (to 410)
                408     JUMP_ABSOLUTE                   184 (to 368)
                410     LOAD_FAST                       12: homecls
                412     LOAD_CONST                      3: None
                414     IS_OP                           0 (is)
                416     POP_JUMP_IF_FALSE               210 (to 420)
                418     JUMP_ABSOLUTE                   70 (to 140)
                420     LOAD_FAST                       13: get_obj
                422     LOAD_CONST                      3: None
                424     IS_OP                           1 (is not)
                426     POP_JUMP_IF_FALSE               216 (to 432)
                428     LOAD_FAST                       13: get_obj
                430     JUMP_FORWARD                    1 (to 434)
                432     LOAD_FAST                       14: dict_obj
                434     STORE_FAST                      19: obj
                436     LOAD_GLOBAL                     6: isinstance
                438     LOAD_FAST                       14: dict_obj
                440     LOAD_GLOBAL                     16: staticmethod
                442     LOAD_GLOBAL                     7: types
                444     LOAD_ATTR                       17: BuiltinMethodType
                446     BUILD_TUPLE                     2
                448     CALL_FUNCTION                   2
                450     POP_JUMP_IF_FALSE               231 (to 462)
                452     LOAD_CONST                      7: 'static method'
                454     STORE_FAST                      20: kind
                456     LOAD_FAST                       14: dict_obj
                458     STORE_FAST                      19: obj
                460     JUMP_FORWARD                    33 (to 528)
                462     LOAD_GLOBAL                     6: isinstance
                464     LOAD_FAST                       14: dict_obj
                466     LOAD_GLOBAL                     18: classmethod
                468     LOAD_GLOBAL                     7: types
                470     LOAD_ATTR                       19: ClassMethodDescriptorType
                472     BUILD_TUPLE                     2
                474     CALL_FUNCTION                   2
                476     POP_JUMP_IF_FALSE               244 (to 488)
                478     LOAD_CONST                      8: 'class method'
                480     STORE_FAST                      20: kind
                482     LOAD_FAST                       14: dict_obj
                484     STORE_FAST                      19: obj
                486     JUMP_FORWARD                    20 (to 528)
                488     LOAD_GLOBAL                     6: isinstance
                490     LOAD_FAST                       14: dict_obj
                492     LOAD_GLOBAL                     20: property
                494     CALL_FUNCTION                   2
                496     POP_JUMP_IF_FALSE               254 (to 508)
                498     LOAD_CONST                      9: 'property'
                500     STORE_FAST                      20: kind
                502     LOAD_FAST                       14: dict_obj
                504     STORE_FAST                      19: obj
                506     JUMP_FORWARD                    10 (to 528)
                508     LOAD_GLOBAL                     21: isroutine
                510     LOAD_FAST                       19: obj
                512     CALL_FUNCTION                   1
                514     POP_JUMP_IF_FALSE               262 (to 524)
                518     LOAD_CONST                      10: 'method'
                520     STORE_FAST                      20: kind
                522     JUMP_FORWARD                    2 (to 528)
                524     LOAD_CONST                      11: 'data'
                526     STORE_FAST                      20: kind
                528     LOAD_FAST                       9: result
                530     LOAD_METHOD                     10: append
                532     LOAD_GLOBAL                     22: Attribute
                534     LOAD_FAST                       11: name
                536     LOAD_FAST                       20: kind
                538     LOAD_FAST                       12: homecls
                540     LOAD_FAST                       19: obj
                542     CALL_FUNCTION                   4
                544     CALL_METHOD                     1
                546     POP_TOP                         
                548     LOAD_FAST                       10: processed
                550     LOAD_METHOD                     23: add
                552     LOAD_FAST                       11: name
                554     CALL_METHOD                     1
                556     POP_TOP                         
                558     JUMP_ABSOLUTE                   70 (to 140)
                560     LOAD_FAST                       9: result
                562     RETURN_VALUE                    
        'classify_class_attrs'
        [Code]
            File Name: inspect.py
            Object Name: getmro
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '__mro__'
            [Var Names]
                'cls'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return tuple of base classes (including cls) in method resolution order.'
            [Disassembly]
                0       LOAD_FAST                       0: cls
                2       LOAD_ATTR                       0: __mro__
                4       RETURN_VALUE                    
        'getmro'
        (
            'stop'
        )
        [Code]
            File Name: inspect.py
            Object Name: unwrap
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 1
            Locals: 7
            Stack Size: 4
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'id'
                'sys'
                'getrecursionlimit'
                '__wrapped__'
                'len'
                'ValueError'
                'format'
            [Var Names]
                'func'
                'stop'
                '_is_wrapper'
                'f'
                'memo'
                'recursion_limit'
                'id_func'
            [Free Vars]
            [Cell Vars]
                'stop'
            [Constants]
                'Get the object wrapped by *func*.\n\n   Follows the chain of :attr:`__wrapped__` attributes returning the last\n   object in the chain.\n\n   *stop* is an optional callback accepting an object in the wrapper chain\n   as its sole argument that allows the unwrapping to be terminated early if\n   the callback returns a true value. If the callback never returns a true\n   value, the last object in the chain is returned as usual. For example,\n   :func:`signature` uses this to stop unwrapping if any object in the\n   chain has a ``__signature__`` attribute defined.\n\n   :exc:`ValueError` is raised if a cycle is encountered.\n\n    '
                None
                [Code]
                    File Name: inspect.py
                    Object Name: _is_wrapper
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        'hasattr'
                    [Var Names]
                        'f'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '__wrapped__'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hasattr
                        2       LOAD_FAST                       0: f
                        4       LOAD_CONST                      1: '__wrapped__'
                        6       CALL_FUNCTION                   2
                        8       RETURN_VALUE                    
                'unwrap.<locals>._is_wrapper'
                [Code]
                    File Name: inspect.py
                    Object Name: _is_wrapper
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'hasattr'
                    [Var Names]
                        'f'
                    [Free Vars]
                        'stop'
                    [Cell Vars]
                    [Constants]
                        None
                        '__wrapped__'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hasattr
                        2       LOAD_FAST                       0: f
                        4       LOAD_CONST                      1: '__wrapped__'
                        6       CALL_FUNCTION                   2
                        8       JUMP_IF_FALSE_OR_POP            9 (to 18)
                        10      LOAD_DEREF                      0: stop
                        12      LOAD_FAST                       0: f
                        14      CALL_FUNCTION                   1
                        16      UNARY_NOT                       
                        18      RETURN_VALUE                    
                'wrapper loop when unwrapping {!r}'
            [Disassembly]
                0       LOAD_DEREF                      0: stop
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               9 (to 18)
                8       LOAD_CONST                      2: <CODE> _is_wrapper
                10      LOAD_CONST                      3: 'unwrap.<locals>._is_wrapper'
                12      MAKE_FUNCTION                   0
                14      STORE_FAST                      2: _is_wrapper
                16      JUMP_FORWARD                    6 (to 30)
                18      LOAD_CLOSURE                    0: stop
                20      BUILD_TUPLE                     1
                22      LOAD_CONST                      4: <CODE> _is_wrapper
                24      LOAD_CONST                      3: 'unwrap.<locals>._is_wrapper'
                26      MAKE_FUNCTION                   8
                28      STORE_FAST                      2: _is_wrapper
                30      LOAD_FAST                       0: func
                32      STORE_FAST                      3: f
                34      LOAD_GLOBAL                     0: id
                36      LOAD_FAST                       3: f
                38      CALL_FUNCTION                   1
                40      LOAD_FAST                       3: f
                42      BUILD_MAP                       1
                44      STORE_FAST                      4: memo
                46      LOAD_GLOBAL                     1: sys
                48      LOAD_METHOD                     2: getrecursionlimit
                50      CALL_METHOD                     0
                52      STORE_FAST                      5: recursion_limit
                54      LOAD_FAST                       2: _is_wrapper
                56      LOAD_FAST                       0: func
                58      CALL_FUNCTION                   1
                60      POP_JUMP_IF_FALSE               63 (to 126)
                62      LOAD_FAST                       0: func
                64      LOAD_ATTR                       3: __wrapped__
                66      STORE_FAST                      0: func
                68      LOAD_GLOBAL                     0: id
                70      LOAD_FAST                       0: func
                72      CALL_FUNCTION                   1
                74      STORE_FAST                      6: id_func
                76      LOAD_FAST                       6: id_func
                78      LOAD_FAST                       4: memo
                80      CONTAINS_OP                     0 (in)
                82      POP_JUMP_IF_TRUE                48 (to 96)
                84      LOAD_GLOBAL                     4: len
                86      LOAD_FAST                       4: memo
                88      CALL_FUNCTION                   1
                90      LOAD_FAST                       5: recursion_limit
                92      COMPARE_OP                      5 (>=)
                94      POP_JUMP_IF_FALSE               55 (to 110)
                96      LOAD_GLOBAL                     5: ValueError
                98      LOAD_CONST                      5: 'wrapper loop when unwrapping {!r}'
                100     LOAD_METHOD                     6: format
                102     LOAD_FAST                       3: f
                104     CALL_METHOD                     1
                106     CALL_FUNCTION                   1
                108     RAISE_VARARGS                   1
                110     LOAD_FAST                       0: func
                112     LOAD_FAST                       4: memo
                114     LOAD_FAST                       6: id_func
                116     STORE_SUBSCR                    
                118     LOAD_FAST                       2: _is_wrapper
                120     LOAD_FAST                       0: func
                122     CALL_FUNCTION                   1
                124     POP_JUMP_IF_TRUE                31 (to 62)
                126     LOAD_FAST                       0: func
                128     RETURN_VALUE                    
        'unwrap'
        [Code]
            File Name: inspect.py
            Object Name: indentsize
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'expandtabs'
                'len'
                'lstrip'
            [Var Names]
                'line'
                'expline'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the indent size, in spaces, at the start of a line of text.'
            [Disassembly]
                0       LOAD_FAST                       0: line
                2       LOAD_METHOD                     0: expandtabs
                4       CALL_METHOD                     0
                6       STORE_FAST                      1: expline
                8       LOAD_GLOBAL                     1: len
                10      LOAD_FAST                       1: expline
                12      CALL_FUNCTION                   1
                14      LOAD_GLOBAL                     1: len
                16      LOAD_FAST                       1: expline
                18      LOAD_METHOD                     2: lstrip
                20      CALL_METHOD                     0
                22      CALL_FUNCTION                   1
                24      BINARY_SUBTRACT                 
                26      RETURN_VALUE                    
        'indentsize'
        [Code]
            File Name: inspect.py
            Object Name: _findclass
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'sys'
                'modules'
                'get'
                '__module__'
                '__qualname__'
                'split'
                'getattr'
                'isclass'
            [Var Names]
                'func'
                'cls'
                'name'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '.'
                -1
            [Disassembly]
                0       LOAD_GLOBAL                     0: sys
                2       LOAD_ATTR                       1: modules
                4       LOAD_METHOD                     2: get
                6       LOAD_FAST                       0: func
                8       LOAD_ATTR                       3: __module__
                10      CALL_METHOD                     1
                12      STORE_FAST                      1: cls
                14      LOAD_FAST                       1: cls
                16      LOAD_CONST                      0: None
                18      IS_OP                           0 (is)
                20      POP_JUMP_IF_FALSE               13 (to 26)
                22      LOAD_CONST                      0: None
                24      RETURN_VALUE                    
                26      LOAD_FAST                       0: func
                28      LOAD_ATTR                       4: __qualname__
                30      LOAD_METHOD                     5: split
                32      LOAD_CONST                      1: '.'
                34      CALL_METHOD                     1
                36      LOAD_CONST                      0: None
                38      LOAD_CONST                      2: -1
                40      BUILD_SLICE                     2
                42      BINARY_SUBSCR                   
                44      GET_ITER                        
                46      FOR_ITER                        7 (to 62)
                48      STORE_FAST                      2: name
                50      LOAD_GLOBAL                     6: getattr
                52      LOAD_FAST                       1: cls
                54      LOAD_FAST                       2: name
                56      CALL_FUNCTION                   2
                58      STORE_FAST                      1: cls
                60      JUMP_ABSOLUTE                   23 (to 46)
                62      LOAD_GLOBAL                     7: isclass
                64      LOAD_FAST                       1: cls
                66      CALL_FUNCTION                   1
                68      POP_JUMP_IF_TRUE                37 (to 74)
                70      LOAD_CONST                      0: None
                72      RETURN_VALUE                    
                74      LOAD_FAST                       1: cls
                76      RETURN_VALUE                    
        '_findclass'
        [Code]
            File Name: inspect.py
            Object Name: _finddoc
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isclass'
                '__mro__'
                'object'
                '__doc__'
                'AttributeError'
                'ismethod'
                '__func__'
                '__name__'
                '__self__'
                'getattr'
                '__class__'
                'isfunction'
                '_findclass'
                'isbuiltin'
                '__qualname__'
                'isinstance'
                'property'
                'fget'
                'ismethoddescriptor'
                'isdatadescriptor'
                '__objclass__'
                'ismemberdescriptor'
                'dict'
            [Var Names]
                'obj'
                'base'
                'doc'
                'name'
                'self'
                'cls'
                'func'
                'slots'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '__func__'
                '.'
                '__slots__'
            [Disassembly]
                0       LOAD_GLOBAL                     0: isclass
                2       LOAD_FAST                       0: obj
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_FALSE               39 (to 78)
                8       LOAD_FAST                       0: obj
                10      LOAD_ATTR                       1: __mro__
                12      GET_ITER                        
                14      FOR_ITER                        29 (to 74)
                16      STORE_FAST                      1: base
                18      LOAD_FAST                       1: base
                20      LOAD_GLOBAL                     2: object
                22      IS_OP                           1 (is not)
                24      POP_JUMP_IF_FALSE               36 (to 72)
                26      SETUP_FINALLY                   5 (to 38)
                28      LOAD_FAST                       1: base
                30      LOAD_ATTR                       3: __doc__
                32      STORE_FAST                      2: doc
                34      POP_BLOCK                       
                36      JUMP_FORWARD                    9 (to 56)
                38      DUP_TOP                         
                40      LOAD_GLOBAL                     4: AttributeError
                42      JUMP_IF_NOT_EXC_MATCH           27 (to 54)
                44      POP_TOP                         
                46      POP_TOP                         
                48      POP_TOP                         
                50      POP_EXCEPT                      
                52      JUMP_ABSOLUTE                   7 (to 14)
                54      RERAISE                         0
                56      LOAD_FAST                       2: doc
                58      LOAD_CONST                      0: None
                60      IS_OP                           1 (is not)
                62      POP_JUMP_IF_FALSE               36 (to 72)
                64      LOAD_FAST                       2: doc
                66      ROT_TWO                         
                68      POP_TOP                         
                70      RETURN_VALUE                    
                72      JUMP_ABSOLUTE                   7 (to 14)
                74      LOAD_CONST                      0: None
                76      RETURN_VALUE                    
                78      LOAD_GLOBAL                     5: ismethod
                80      LOAD_FAST                       0: obj
                82      CALL_FUNCTION                   1
                84      POP_JUMP_IF_FALSE               73 (to 146)
                86      LOAD_FAST                       0: obj
                88      LOAD_ATTR                       6: __func__
                90      LOAD_ATTR                       7: __name__
                92      STORE_FAST                      3: name
                94      LOAD_FAST                       0: obj
                96      LOAD_ATTR                       8: __self__
                98      STORE_FAST                      4: self
                100     LOAD_GLOBAL                     0: isclass
                102     LOAD_FAST                       4: self
                104     CALL_FUNCTION                   1
                106     POP_JUMP_IF_FALSE               69 (to 138)
                108     LOAD_GLOBAL                     9: getattr
                110     LOAD_GLOBAL                     9: getattr
                112     LOAD_FAST                       4: self
                114     LOAD_FAST                       3: name
                116     LOAD_CONST                      0: None
                118     CALL_FUNCTION                   3
                120     LOAD_CONST                      1: '__func__'
                122     CALL_FUNCTION                   2
                124     LOAD_FAST                       0: obj
                126     LOAD_ATTR                       6: __func__
                128     IS_OP                           0 (is)
                130     POP_JUMP_IF_FALSE               69 (to 138)
                132     LOAD_FAST                       4: self
                134     STORE_FAST                      5: cls
                136     JUMP_FORWARD                    138 (to 414)
                138     LOAD_FAST                       4: self
                140     LOAD_ATTR                       10: __class__
                142     STORE_FAST                      5: cls
                144     JUMP_FORWARD                    134 (to 414)
                146     LOAD_GLOBAL                     11: isfunction
                148     LOAD_FAST                       0: obj
                150     CALL_FUNCTION                   1
                152     POP_JUMP_IF_FALSE               98 (to 196)
                154     LOAD_FAST                       0: obj
                156     LOAD_ATTR                       7: __name__
                158     STORE_FAST                      3: name
                160     LOAD_GLOBAL                     12: _findclass
                162     LOAD_FAST                       0: obj
                164     CALL_FUNCTION                   1
                166     STORE_FAST                      5: cls
                168     LOAD_FAST                       5: cls
                170     LOAD_CONST                      0: None
                172     IS_OP                           0 (is)
                174     POP_JUMP_IF_TRUE                95 (to 190)
                176     LOAD_GLOBAL                     9: getattr
                178     LOAD_FAST                       5: cls
                180     LOAD_FAST                       3: name
                182     CALL_FUNCTION                   2
                184     LOAD_FAST                       0: obj
                186     IS_OP                           1 (is not)
                188     POP_JUMP_IF_FALSE               97 (to 194)
                190     LOAD_CONST                      0: None
                192     RETURN_VALUE                    
                194     JUMP_FORWARD                    109 (to 414)
                196     LOAD_GLOBAL                     13: isbuiltin
                198     LOAD_FAST                       0: obj
                200     CALL_FUNCTION                   1
                202     POP_JUMP_IF_FALSE               129 (to 258)
                204     LOAD_FAST                       0: obj
                206     LOAD_ATTR                       7: __name__
                208     STORE_FAST                      3: name
                210     LOAD_FAST                       0: obj
                212     LOAD_ATTR                       8: __self__
                214     STORE_FAST                      4: self
                216     LOAD_GLOBAL                     0: isclass
                218     LOAD_FAST                       4: self
                220     CALL_FUNCTION                   1
                222     POP_JUMP_IF_FALSE               125 (to 250)
                224     LOAD_FAST                       4: self
                226     LOAD_ATTR                       14: __qualname__
                228     LOAD_CONST                      2: '.'
                230     BINARY_ADD                      
                232     LOAD_FAST                       3: name
                234     BINARY_ADD                      
                236     LOAD_FAST                       0: obj
                238     LOAD_ATTR                       14: __qualname__
                240     COMPARE_OP                      2 (==)
                242     POP_JUMP_IF_FALSE               125 (to 250)
                244     LOAD_FAST                       4: self
                246     STORE_FAST                      5: cls
                248     JUMP_FORWARD                    82 (to 414)
                250     LOAD_FAST                       4: self
                252     LOAD_ATTR                       10: __class__
                254     STORE_FAST                      5: cls
                256     JUMP_FORWARD                    78 (to 414)
                258     LOAD_GLOBAL                     15: isinstance
                260     LOAD_FAST                       0: obj
                262     LOAD_GLOBAL                     16: property
                264     CALL_FUNCTION                   2
                266     POP_JUMP_IF_FALSE               158 (to 316)
                268     LOAD_FAST                       0: obj
                270     LOAD_ATTR                       17: fget
                272     STORE_FAST                      6: func
                274     LOAD_FAST                       6: func
                276     LOAD_ATTR                       7: __name__
                278     STORE_FAST                      3: name
                280     LOAD_GLOBAL                     12: _findclass
                282     LOAD_FAST                       6: func
                284     CALL_FUNCTION                   1
                286     STORE_FAST                      5: cls
                288     LOAD_FAST                       5: cls
                290     LOAD_CONST                      0: None
                292     IS_OP                           0 (is)
                294     POP_JUMP_IF_TRUE                155 (to 310)
                296     LOAD_GLOBAL                     9: getattr
                298     LOAD_FAST                       5: cls
                300     LOAD_FAST                       3: name
                302     CALL_FUNCTION                   2
                304     LOAD_FAST                       0: obj
                306     IS_OP                           1 (is not)
                308     POP_JUMP_IF_FALSE               157 (to 314)
                310     LOAD_CONST                      0: None
                312     RETURN_VALUE                    
                314     JUMP_FORWARD                    49 (to 414)
                316     LOAD_GLOBAL                     18: ismethoddescriptor
                318     LOAD_FAST                       0: obj
                320     CALL_FUNCTION                   1
                322     POP_JUMP_IF_TRUE                166 (to 332)
                324     LOAD_GLOBAL                     19: isdatadescriptor
                326     LOAD_FAST                       0: obj
                328     CALL_FUNCTION                   1
                330     POP_JUMP_IF_FALSE               205 (to 410)
                332     LOAD_FAST                       0: obj
                334     LOAD_ATTR                       7: __name__
                336     STORE_FAST                      3: name
                338     LOAD_FAST                       0: obj
                340     LOAD_ATTR                       20: __objclass__
                342     STORE_FAST                      5: cls
                344     LOAD_GLOBAL                     9: getattr
                346     LOAD_FAST                       5: cls
                348     LOAD_FAST                       3: name
                350     CALL_FUNCTION                   2
                352     LOAD_FAST                       0: obj
                354     IS_OP                           1 (is not)
                356     POP_JUMP_IF_FALSE               181 (to 362)
                358     LOAD_CONST                      0: None
                360     RETURN_VALUE                    
                362     LOAD_GLOBAL                     21: ismemberdescriptor
                364     LOAD_FAST                       0: obj
                366     CALL_FUNCTION                   1
                368     POP_JUMP_IF_FALSE               204 (to 408)
                370     LOAD_GLOBAL                     9: getattr
                372     LOAD_FAST                       5: cls
                374     LOAD_CONST                      3: '__slots__'
                376     LOAD_CONST                      0: None
                378     CALL_FUNCTION                   3
                380     STORE_FAST                      7: slots
                382     LOAD_GLOBAL                     15: isinstance
                384     LOAD_FAST                       7: slots
                386     LOAD_GLOBAL                     22: dict
                388     CALL_FUNCTION                   2
                390     POP_JUMP_IF_FALSE               204 (to 408)
                392     LOAD_FAST                       3: name
                394     LOAD_FAST                       7: slots
                396     CONTAINS_OP                     0 (in)
                398     POP_JUMP_IF_FALSE               204 (to 408)
                400     LOAD_FAST                       7: slots
                402     LOAD_FAST                       3: name
                404     BINARY_SUBSCR                   
                406     RETURN_VALUE                    
                408     JUMP_FORWARD                    2 (to 414)
                410     LOAD_CONST                      0: None
                412     RETURN_VALUE                    
                414     LOAD_FAST                       5: cls
                416     LOAD_ATTR                       1: __mro__
                418     GET_ITER                        
                420     FOR_ITER                        28 (to 478)
                422     STORE_FAST                      1: base
                424     SETUP_FINALLY                   8 (to 442)
                426     LOAD_GLOBAL                     9: getattr
                428     LOAD_FAST                       1: base
                430     LOAD_FAST                       3: name
                432     CALL_FUNCTION                   2
                434     LOAD_ATTR                       3: __doc__
                436     STORE_FAST                      2: doc
                438     POP_BLOCK                       
                440     JUMP_FORWARD                    9 (to 460)
                442     DUP_TOP                         
                444     LOAD_GLOBAL                     4: AttributeError
                446     JUMP_IF_NOT_EXC_MATCH           229 (to 458)
                448     POP_TOP                         
                450     POP_TOP                         
                452     POP_TOP                         
                454     POP_EXCEPT                      
                456     JUMP_ABSOLUTE                   210 (to 420)
                458     RERAISE                         0
                460     LOAD_FAST                       2: doc
                462     LOAD_CONST                      0: None
                464     IS_OP                           1 (is not)
                466     POP_JUMP_IF_FALSE               238 (to 476)
                468     LOAD_FAST                       2: doc
                470     ROT_TWO                         
                472     POP_TOP                         
                474     RETURN_VALUE                    
                476     JUMP_ABSOLUTE                   210 (to 420)
                478     LOAD_CONST                      0: None
                480     RETURN_VALUE                    
        '_finddoc'
        [Code]
            File Name: inspect.py
            Object Name: getdoc
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '__doc__'
                'AttributeError'
                '_finddoc'
                'TypeError'
                'isinstance'
                'str'
                'cleandoc'
            [Var Names]
                'object'
                'doc'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get the documentation string for an object.\n\n    All tabs are expanded to spaces.  To clean up docstrings that are\n    indented to line up with blocks of code, any whitespace than can be\n    uniformly removed from the second line onwards is removed.'
                None
            [Disassembly]
                0       SETUP_FINALLY                   5 (to 12)
                2       LOAD_FAST                       0: object
                4       LOAD_ATTR                       0: __doc__
                6       STORE_FAST                      1: doc
                8       POP_BLOCK                       
                10      JUMP_FORWARD                    10 (to 32)
                12      DUP_TOP                         
                14      LOAD_GLOBAL                     1: AttributeError
                16      JUMP_IF_NOT_EXC_MATCH           15 (to 30)
                18      POP_TOP                         
                20      POP_TOP                         
                22      POP_TOP                         
                24      POP_EXCEPT                      
                26      LOAD_CONST                      1: None
                28      RETURN_VALUE                    
                30      RERAISE                         0
                32      LOAD_FAST                       1: doc
                34      LOAD_CONST                      1: None
                36      IS_OP                           0 (is)
                38      POP_JUMP_IF_FALSE               39 (to 78)
                40      SETUP_FINALLY                   6 (to 54)
                42      LOAD_GLOBAL                     2: _finddoc
                44      LOAD_FAST                       0: object
                46      CALL_FUNCTION                   1
                48      STORE_FAST                      1: doc
                50      POP_BLOCK                       
                52      JUMP_FORWARD                    12 (to 78)
                54      DUP_TOP                         
                56      LOAD_GLOBAL                     1: AttributeError
                58      LOAD_GLOBAL                     3: TypeError
                60      BUILD_TUPLE                     2
                62      JUMP_IF_NOT_EXC_MATCH           38 (to 76)
                64      POP_TOP                         
                66      POP_TOP                         
                68      POP_TOP                         
                70      POP_EXCEPT                      
                72      LOAD_CONST                      1: None
                74      RETURN_VALUE                    
                76      RERAISE                         0
                78      LOAD_GLOBAL                     4: isinstance
                80      LOAD_FAST                       1: doc
                82      LOAD_GLOBAL                     5: str
                84      CALL_FUNCTION                   2
                86      POP_JUMP_IF_TRUE                46 (to 92)
                88      LOAD_CONST                      1: None
                90      RETURN_VALUE                    
                92      LOAD_GLOBAL                     6: cleandoc
                94      LOAD_FAST                       1: doc
                96      CALL_FUNCTION                   1
                98      RETURN_VALUE                    
        'getdoc'
        [Code]
            File Name: inspect.py
            Object Name: cleandoc
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 7
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'expandtabs'
                'split'
                'UnicodeError'
                'sys'
                'maxsize'
                'len'
                'lstrip'
                'min'
                'range'
                'pop'
                'join'
            [Var Names]
                'doc'
                'lines'
                'margin'
                'line'
                'content'
                'indent'
                'i'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Clean up indentation from docstrings.\n\n    Any whitespace that can be uniformly removed from the second line\n    onwards is removed.'
                '\n'
                None
                1
                0
                -1
            [Disassembly]
                0       SETUP_FINALLY                   9 (to 20)
                2       LOAD_FAST                       0: doc
                4       LOAD_METHOD                     0: expandtabs
                6       CALL_METHOD                     0
                8       LOAD_METHOD                     1: split
                10      LOAD_CONST                      1: '\n'
                12      CALL_METHOD                     1
                14      STORE_FAST                      1: lines
                16      POP_BLOCK                       
                18      JUMP_FORWARD                    10 (to 40)
                20      DUP_TOP                         
                22      LOAD_GLOBAL                     2: UnicodeError
                24      JUMP_IF_NOT_EXC_MATCH           19 (to 38)
                26      POP_TOP                         
                28      POP_TOP                         
                30      POP_TOP                         
                32      POP_EXCEPT                      
                34      LOAD_CONST                      2: None
                36      RETURN_VALUE                    
                38      RERAISE                         0
                40      LOAD_GLOBAL                     3: sys
                42      LOAD_ATTR                       4: maxsize
                44      STORE_FAST                      2: margin
                46      LOAD_FAST                       1: lines
                48      LOAD_CONST                      3: 1
                50      LOAD_CONST                      2: None
                52      BUILD_SLICE                     2
                54      BINARY_SUBSCR                   
                56      GET_ITER                        
                58      FOR_ITER                        21 (to 102)
                60      STORE_FAST                      3: line
                62      LOAD_GLOBAL                     5: len
                64      LOAD_FAST                       3: line
                66      LOAD_METHOD                     6: lstrip
                68      CALL_METHOD                     0
                70      CALL_FUNCTION                   1
                72      STORE_FAST                      4: content
                74      LOAD_FAST                       4: content
                76      POP_JUMP_IF_FALSE               50 (to 100)
                78      LOAD_GLOBAL                     5: len
                80      LOAD_FAST                       3: line
                82      CALL_FUNCTION                   1
                84      LOAD_FAST                       4: content
                86      BINARY_SUBTRACT                 
                88      STORE_FAST                      5: indent
                90      LOAD_GLOBAL                     7: min
                92      LOAD_FAST                       2: margin
                94      LOAD_FAST                       5: indent
                96      CALL_FUNCTION                   2
                98      STORE_FAST                      2: margin
                100     JUMP_ABSOLUTE                   29 (to 58)
                102     LOAD_FAST                       1: lines
                104     POP_JUMP_IF_FALSE               61 (to 122)
                106     LOAD_FAST                       1: lines
                108     LOAD_CONST                      4: 0
                110     BINARY_SUBSCR                   
                112     LOAD_METHOD                     6: lstrip
                114     CALL_METHOD                     0
                116     LOAD_FAST                       1: lines
                118     LOAD_CONST                      4: 0
                120     STORE_SUBSCR                    
                122     LOAD_FAST                       2: margin
                124     LOAD_GLOBAL                     3: sys
                126     LOAD_ATTR                       4: maxsize
                128     COMPARE_OP                      0 (<)
                130     POP_JUMP_IF_FALSE               86 (to 172)
                132     LOAD_GLOBAL                     8: range
                134     LOAD_CONST                      3: 1
                136     LOAD_GLOBAL                     5: len
                138     LOAD_FAST                       1: lines
                140     CALL_FUNCTION                   1
                142     CALL_FUNCTION                   2
                144     GET_ITER                        
                146     FOR_ITER                        12 (to 172)
                148     STORE_FAST                      6: i
                150     LOAD_FAST                       1: lines
                152     LOAD_FAST                       6: i
                154     BINARY_SUBSCR                   
                156     LOAD_FAST                       2: margin
                158     LOAD_CONST                      2: None
                160     BUILD_SLICE                     2
                162     BINARY_SUBSCR                   
                164     LOAD_FAST                       1: lines
                166     LOAD_FAST                       6: i
                168     STORE_SUBSCR                    
                170     JUMP_ABSOLUTE                   73 (to 146)
                172     LOAD_FAST                       1: lines
                174     POP_JUMP_IF_FALSE               102 (to 204)
                176     LOAD_FAST                       1: lines
                178     LOAD_CONST                      5: -1
                180     BINARY_SUBSCR                   
                182     POP_JUMP_IF_TRUE                102 (to 204)
                184     LOAD_FAST                       1: lines
                186     LOAD_METHOD                     9: pop
                188     CALL_METHOD                     0
                190     POP_TOP                         
                192     LOAD_FAST                       1: lines
                194     POP_JUMP_IF_FALSE               102 (to 204)
                196     LOAD_FAST                       1: lines
                198     LOAD_CONST                      5: -1
                200     BINARY_SUBSCR                   
                202     POP_JUMP_IF_FALSE               92 (to 184)
                204     LOAD_FAST                       1: lines
                206     POP_JUMP_IF_FALSE               119 (to 238)
                208     LOAD_FAST                       1: lines
                210     LOAD_CONST                      4: 0
                212     BINARY_SUBSCR                   
                214     POP_JUMP_IF_TRUE                119 (to 238)
                216     LOAD_FAST                       1: lines
                218     LOAD_METHOD                     9: pop
                220     LOAD_CONST                      4: 0
                222     CALL_METHOD                     1
                224     POP_TOP                         
                226     LOAD_FAST                       1: lines
                228     POP_JUMP_IF_FALSE               119 (to 238)
                230     LOAD_FAST                       1: lines
                232     LOAD_CONST                      4: 0
                234     BINARY_SUBSCR                   
                236     POP_JUMP_IF_FALSE               108 (to 216)
                238     LOAD_CONST                      1: '\n'
                240     LOAD_METHOD                     10: join
                242     LOAD_FAST                       1: lines
                244     CALL_METHOD                     1
                246     RETURN_VALUE                    
        'cleandoc'
        [Code]
            File Name: inspect.py
            Object Name: getfile
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ismodule'
                'getattr'
                '__file__'
                'TypeError'
                'format'
                'isclass'
                'hasattr'
                'sys'
                'modules'
                'get'
                '__module__'
                'OSError'
                'ismethod'
                '__func__'
                'isfunction'
                '__code__'
                'istraceback'
                'tb_frame'
                'isframe'
                'f_code'
                'iscode'
                'co_filename'
                'type'
                '__name__'
            [Var Names]
                'object'
                'module'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Work out which source or compiled file an object was defined in.'
                '__file__'
                None
                '{!r} is a built-in module'
                '__module__'
                '__main__'
                'source code not available'
                '{!r} is a built-in class'
                'module, class, method, function, traceback, frame, or code object was expected, got {}'
            [Disassembly]
                0       LOAD_GLOBAL                     0: ismodule
                2       LOAD_FAST                       0: object
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_FALSE               20 (to 40)
                8       LOAD_GLOBAL                     1: getattr
                10      LOAD_FAST                       0: object
                12      LOAD_CONST                      1: '__file__'
                14      LOAD_CONST                      2: None
                16      CALL_FUNCTION                   3
                18      POP_JUMP_IF_FALSE               13 (to 26)
                20      LOAD_FAST                       0: object
                22      LOAD_ATTR                       2: __file__
                24      RETURN_VALUE                    
                26      LOAD_GLOBAL                     3: TypeError
                28      LOAD_CONST                      3: '{!r} is a built-in module'
                30      LOAD_METHOD                     4: format
                32      LOAD_FAST                       0: object
                34      CALL_METHOD                     1
                36      CALL_FUNCTION                   1
                38      RAISE_VARARGS                   1
                40      LOAD_GLOBAL                     5: isclass
                42      LOAD_FAST                       0: object
                44      CALL_FUNCTION                   1
                46      POP_JUMP_IF_FALSE               61 (to 122)
                48      LOAD_GLOBAL                     6: hasattr
                50      LOAD_FAST                       0: object
                52      LOAD_CONST                      4: '__module__'
                54      CALL_FUNCTION                   2
                56      POP_JUMP_IF_FALSE               54 (to 108)
                58      LOAD_GLOBAL                     7: sys
                60      LOAD_ATTR                       8: modules
                62      LOAD_METHOD                     9: get
                64      LOAD_FAST                       0: object
                66      LOAD_ATTR                       10: __module__
                68      CALL_METHOD                     1
                70      STORE_FAST                      1: module
                72      LOAD_GLOBAL                     1: getattr
                74      LOAD_FAST                       1: module
                76      LOAD_CONST                      1: '__file__'
                78      LOAD_CONST                      2: None
                80      CALL_FUNCTION                   3
                82      POP_JUMP_IF_FALSE               45 (to 90)
                84      LOAD_FAST                       1: module
                86      LOAD_ATTR                       2: __file__
                88      RETURN_VALUE                    
                90      LOAD_FAST                       0: object
                92      LOAD_ATTR                       10: __module__
                94      LOAD_CONST                      5: '__main__'
                96      COMPARE_OP                      2 (==)
                98      POP_JUMP_IF_FALSE               54 (to 108)
                100     LOAD_GLOBAL                     11: OSError
                102     LOAD_CONST                      6: 'source code not available'
                104     CALL_FUNCTION                   1
                106     RAISE_VARARGS                   1
                108     LOAD_GLOBAL                     3: TypeError
                110     LOAD_CONST                      7: '{!r} is a built-in class'
                112     LOAD_METHOD                     4: format
                114     LOAD_FAST                       0: object
                116     CALL_METHOD                     1
                118     CALL_FUNCTION                   1
                120     RAISE_VARARGS                   1
                122     LOAD_GLOBAL                     12: ismethod
                124     LOAD_FAST                       0: object
                126     CALL_FUNCTION                   1
                128     POP_JUMP_IF_FALSE               68 (to 136)
                130     LOAD_FAST                       0: object
                132     LOAD_ATTR                       13: __func__
                134     STORE_FAST                      0: object
                136     LOAD_GLOBAL                     14: isfunction
                138     LOAD_FAST                       0: object
                140     CALL_FUNCTION                   1
                142     POP_JUMP_IF_FALSE               75 (to 150)
                144     LOAD_FAST                       0: object
                146     LOAD_ATTR                       15: __code__
                148     STORE_FAST                      0: object
                150     LOAD_GLOBAL                     16: istraceback
                152     LOAD_FAST                       0: object
                154     CALL_FUNCTION                   1
                156     POP_JUMP_IF_FALSE               82 (to 164)
                158     LOAD_FAST                       0: object
                160     LOAD_ATTR                       17: tb_frame
                162     STORE_FAST                      0: object
                164     LOAD_GLOBAL                     18: isframe
                166     LOAD_FAST                       0: object
                168     CALL_FUNCTION                   1
                170     POP_JUMP_IF_FALSE               89 (to 178)
                172     LOAD_FAST                       0: object
                174     LOAD_ATTR                       19: f_code
                176     STORE_FAST                      0: object
                178     LOAD_GLOBAL                     20: iscode
                180     LOAD_FAST                       0: object
                182     CALL_FUNCTION                   1
                184     POP_JUMP_IF_FALSE               96 (to 192)
                186     LOAD_FAST                       0: object
                188     LOAD_ATTR                       21: co_filename
                190     RETURN_VALUE                    
                192     LOAD_GLOBAL                     3: TypeError
                194     LOAD_CONST                      8: 'module, class, method, function, traceback, frame, or code object was expected, got {}'
                196     LOAD_METHOD                     4: format
                198     LOAD_GLOBAL                     22: type
                200     LOAD_FAST                       0: object
                202     CALL_FUNCTION                   1
                204     LOAD_ATTR                       23: __name__
                206     CALL_METHOD                     1
                208     CALL_FUNCTION                   1
                210     RAISE_VARARGS                   1
        'getfile'
        [Code]
            File Name: inspect.py
            Object Name: getmodulename
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'os'
                'path'
                'basename'
                'importlib'
                'machinery'
                'all_suffixes'
                'sort'
                'endswith'
            [Var Names]
                'path'
                'fname'
                'suffixes'
                'neglen'
                'suffix'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the module name for a given file, or None.'
                [Code]
                    File Name: inspect.py
                    Object Name: <listcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        'len'
                    [Var Names]
                        '.0'
                        'suffix'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        9 (to 24)
                        6       STORE_FAST                      1: suffix
                        8       LOAD_GLOBAL                     0: len
                        10      LOAD_FAST                       1: suffix
                        12      CALL_FUNCTION                   1
                        14      UNARY_NEGATIVE                  
                        16      LOAD_FAST                       1: suffix
                        18      BUILD_TUPLE                     2
                        20      LIST_APPEND                     2
                        22      JUMP_ABSOLUTE                   2 (to 4)
                        24      RETURN_VALUE                    
                'getmodulename.<locals>.<listcomp>'
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: os
                2       LOAD_ATTR                       1: path
                4       LOAD_METHOD                     2: basename
                6       LOAD_FAST                       0: path
                8       CALL_METHOD                     1
                10      STORE_FAST                      1: fname
                12      LOAD_CONST                      1: <CODE> <listcomp>
                14      LOAD_CONST                      2: 'getmodulename.<locals>.<listcomp>'
                16      MAKE_FUNCTION                   0
                18      LOAD_GLOBAL                     3: importlib
                20      LOAD_ATTR                       4: machinery
                22      LOAD_METHOD                     5: all_suffixes
                24      CALL_METHOD                     0
                26      GET_ITER                        
                28      CALL_FUNCTION                   1
                30      STORE_FAST                      2: suffixes
                32      LOAD_FAST                       2: suffixes
                34      LOAD_METHOD                     6: sort
                36      CALL_METHOD                     0
                38      POP_TOP                         
                40      LOAD_FAST                       2: suffixes
                42      GET_ITER                        
                44      FOR_ITER                        17 (to 80)
                46      UNPACK_SEQUENCE                 2
                48      STORE_FAST                      3: neglen
                50      STORE_FAST                      4: suffix
                52      LOAD_FAST                       1: fname
                54      LOAD_METHOD                     7: endswith
                56      LOAD_FAST                       4: suffix
                58      CALL_METHOD                     1
                60      POP_JUMP_IF_FALSE               39 (to 78)
                62      LOAD_FAST                       1: fname
                64      LOAD_CONST                      3: None
                66      LOAD_FAST                       3: neglen
                68      BUILD_SLICE                     2
                70      BINARY_SUBSCR                   
                72      ROT_TWO                         
                74      POP_TOP                         
                76      RETURN_VALUE                    
                78      JUMP_ABSOLUTE                   22 (to 44)
                80      LOAD_CONST                      3: None
                82      RETURN_VALUE                    
        'getmodulename'
        [Code]
            File Name: inspect.py
            Object Name: getsourcefile
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 5
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'getfile'
                'importlib'
                'machinery'
                'DEBUG_BYTECODE_SUFFIXES'
                'OPTIMIZED_BYTECODE_SUFFIXES'
                'any'
                'os'
                'path'
                'splitext'
                'SOURCE_SUFFIXES'
                'EXTENSION_SUFFIXES'
                'exists'
                'getmodule'
                'getattr'
                'linecache'
                'cache'
            [Var Names]
                'object'
                'all_bytecode_suffixes'
                'module'
            [Free Vars]
            [Cell Vars]
                'filename'
            [Constants]
                "Return the filename that can be used to locate an object's source.\n    Return None if no way can be identified to get the source.\n    "
                None
                [Code]
                    File Name: inspect.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                        'endswith'
                    [Var Names]
                        '.0'
                        's'
                    [Free Vars]
                        'filename'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        8 (to 22)
                        6       STORE_FAST                      1: s
                        8       LOAD_DEREF                      0: filename
                        10      LOAD_METHOD                     0: endswith
                        12      LOAD_FAST                       1: s
                        14      CALL_METHOD                     1
                        16      YIELD_VALUE                     
                        18      POP_TOP                         
                        20      JUMP_ABSOLUTE                   2 (to 4)
                        22      LOAD_CONST                      0: None
                        24      RETURN_VALUE                    
                'getsourcefile.<locals>.<genexpr>'
                0
                [Code]
                    File Name: inspect.py
                    Object Name: <genexpr>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                    [Names]
                        'endswith'
                    [Var Names]
                        '.0'
                        's'
                    [Free Vars]
                        'filename'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        8 (to 22)
                        6       STORE_FAST                      1: s
                        8       LOAD_DEREF                      0: filename
                        10      LOAD_METHOD                     0: endswith
                        12      LOAD_FAST                       1: s
                        14      CALL_METHOD                     1
                        16      YIELD_VALUE                     
                        18      POP_TOP                         
                        20      JUMP_ABSOLUTE                   2 (to 4)
                        22      LOAD_CONST                      0: None
                        24      RETURN_VALUE                    
                '__loader__'
                '__spec__'
                'loader'
            [Disassembly]
                0       LOAD_GLOBAL                     0: getfile
                2       LOAD_FAST                       0: object
                4       CALL_FUNCTION                   1
                6       STORE_DEREF                     0: filename
                8       LOAD_GLOBAL                     1: importlib
                10      LOAD_ATTR                       2: machinery
                12      LOAD_ATTR                       3: DEBUG_BYTECODE_SUFFIXES
                14      LOAD_CONST                      1: None
                16      LOAD_CONST                      1: None
                18      BUILD_SLICE                     2
                20      BINARY_SUBSCR                   
                22      STORE_FAST                      1: all_bytecode_suffixes
                24      LOAD_FAST                       1: all_bytecode_suffixes
                26      LOAD_GLOBAL                     1: importlib
                28      LOAD_ATTR                       2: machinery
                30      LOAD_ATTR                       4: OPTIMIZED_BYTECODE_SUFFIXES
                32      LOAD_CONST                      1: None
                34      LOAD_CONST                      1: None
                36      BUILD_SLICE                     2
                38      BINARY_SUBSCR                   
                40      INPLACE_ADD                     
                42      STORE_FAST                      1: all_bytecode_suffixes
                44      LOAD_GLOBAL                     5: any
                46      LOAD_CLOSURE                    0: filename
                48      BUILD_TUPLE                     1
                50      LOAD_CONST                      2: <CODE> <genexpr>
                52      LOAD_CONST                      3: 'getsourcefile.<locals>.<genexpr>'
                54      MAKE_FUNCTION                   8
                56      LOAD_FAST                       1: all_bytecode_suffixes
                58      GET_ITER                        
                60      CALL_FUNCTION                   1
                62      CALL_FUNCTION                   1
                64      POP_JUMP_IF_FALSE               48 (to 96)
                66      LOAD_GLOBAL                     6: os
                68      LOAD_ATTR                       7: path
                70      LOAD_METHOD                     8: splitext
                72      LOAD_DEREF                      0: filename
                74      CALL_METHOD                     1
                76      LOAD_CONST                      4: 0
                78      BINARY_SUBSCR                   
                80      LOAD_GLOBAL                     1: importlib
                82      LOAD_ATTR                       2: machinery
                84      LOAD_ATTR                       9: SOURCE_SUFFIXES
                86      LOAD_CONST                      4: 0
                88      BINARY_SUBSCR                   
                90      BINARY_ADD                      
                92      STORE_DEREF                     0: filename
                94      JUMP_FORWARD                    15 (to 126)
                96      LOAD_GLOBAL                     5: any
                98      LOAD_CLOSURE                    0: filename
                100     BUILD_TUPLE                     1
                102     LOAD_CONST                      5: <CODE> <genexpr>
                104     LOAD_CONST                      3: 'getsourcefile.<locals>.<genexpr>'
                106     MAKE_FUNCTION                   8
                108     LOAD_GLOBAL                     1: importlib
                110     LOAD_ATTR                       2: machinery
                112     LOAD_ATTR                       10: EXTENSION_SUFFIXES
                114     GET_ITER                        
                116     CALL_FUNCTION                   1
                118     CALL_FUNCTION                   1
                120     POP_JUMP_IF_FALSE               63 (to 126)
                122     LOAD_CONST                      1: None
                124     RETURN_VALUE                    
                126     LOAD_GLOBAL                     6: os
                128     LOAD_ATTR                       7: path
                130     LOAD_METHOD                     11: exists
                132     LOAD_DEREF                      0: filename
                134     CALL_METHOD                     1
                136     POP_JUMP_IF_FALSE               71 (to 142)
                138     LOAD_DEREF                      0: filename
                140     RETURN_VALUE                    
                142     LOAD_GLOBAL                     12: getmodule
                144     LOAD_FAST                       0: object
                146     LOAD_DEREF                      0: filename
                148     CALL_FUNCTION                   2
                150     STORE_FAST                      2: module
                152     LOAD_GLOBAL                     13: getattr
                154     LOAD_FAST                       2: module
                156     LOAD_CONST                      6: '__loader__'
                158     LOAD_CONST                      1: None
                160     CALL_FUNCTION                   3
                162     LOAD_CONST                      1: None
                164     IS_OP                           1 (is not)
                166     POP_JUMP_IF_FALSE               86 (to 172)
                168     LOAD_DEREF                      0: filename
                170     RETURN_VALUE                    
                172     LOAD_GLOBAL                     13: getattr
                174     LOAD_GLOBAL                     13: getattr
                176     LOAD_FAST                       2: module
                178     LOAD_CONST                      7: '__spec__'
                180     LOAD_CONST                      1: None
                182     CALL_FUNCTION                   3
                184     LOAD_CONST                      8: 'loader'
                186     LOAD_CONST                      1: None
                188     CALL_FUNCTION                   3
                190     LOAD_CONST                      1: None
                192     IS_OP                           1 (is not)
                194     POP_JUMP_IF_FALSE               100 (to 200)
                196     LOAD_DEREF                      0: filename
                198     RETURN_VALUE                    
                200     LOAD_DEREF                      0: filename
                202     LOAD_GLOBAL                     14: linecache
                204     LOAD_ATTR                       15: cache
                206     CONTAINS_OP                     0 (in)
                208     POP_JUMP_IF_FALSE               107 (to 214)
                210     LOAD_DEREF                      0: filename
                212     RETURN_VALUE                    
                214     LOAD_CONST                      1: None
                216     RETURN_VALUE                    
        'getsourcefile'
        [Code]
            File Name: inspect.py
            Object Name: getabsfile
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getsourcefile'
                'getfile'
                'os'
                'path'
                'normcase'
                'abspath'
            [Var Names]
                'object'
                '_filename'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return an absolute path to the source or compiled file for an object.\n\n    The idea is for each object to have a unique origin, so this routine\n    normalizes the result as much as possible.'
                None
            [Disassembly]
                0       LOAD_FAST                       1: _filename
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               12 (to 24)
                8       LOAD_GLOBAL                     0: getsourcefile
                10      LOAD_FAST                       0: object
                12      CALL_FUNCTION                   1
                14      JUMP_IF_TRUE_OR_POP             11 (to 22)
                16      LOAD_GLOBAL                     1: getfile
                18      LOAD_FAST                       0: object
                20      CALL_FUNCTION                   1
                22      STORE_FAST                      1: _filename
                24      LOAD_GLOBAL                     2: os
                26      LOAD_ATTR                       3: path
                28      LOAD_METHOD                     4: normcase
                30      LOAD_GLOBAL                     2: os
                32      LOAD_ATTR                       3: path
                34      LOAD_METHOD                     5: abspath
                36      LOAD_FAST                       1: _filename
                38      CALL_METHOD                     1
                40      CALL_METHOD                     1
                42      RETURN_VALUE                    
        'getabsfile'
        [Code]
            File Name: inspect.py
            Object Name: getmodule
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 10
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ismodule'
                'hasattr'
                'sys'
                'modules'
                'get'
                '__module__'
                'modulesbyfile'
                'getabsfile'
                'TypeError'
                'FileNotFoundError'
                'copy'
                'items'
                '__file__'
                '_filesbymodname'
                '__name__'
                'os'
                'path'
                'realpath'
                'getattr'
            [Var Names]
                'object'
                '_filename'
                'file'
                'modname'
                'module'
                'f'
                'main'
                'mainobject'
                'builtin'
                'builtinobject'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the module an object was defined in, or None if not found.'
                '__module__'
                None
                '__file__'
                '__main__'
                '__name__'
                'builtins'
            [Disassembly]
                0       LOAD_GLOBAL                     0: ismodule
                2       LOAD_FAST                       0: object
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_FALSE               6 (to 12)
                8       LOAD_FAST                       0: object
                10      RETURN_VALUE                    
                12      LOAD_GLOBAL                     1: hasattr
                14      LOAD_FAST                       0: object
                16      LOAD_CONST                      1: '__module__'
                18      CALL_FUNCTION                   2
                20      POP_JUMP_IF_FALSE               18 (to 36)
                22      LOAD_GLOBAL                     2: sys
                24      LOAD_ATTR                       3: modules
                26      LOAD_METHOD                     4: get
                28      LOAD_FAST                       0: object
                30      LOAD_ATTR                       5: __module__
                32      CALL_METHOD                     1
                34      RETURN_VALUE                    
                36      LOAD_FAST                       1: _filename
                38      LOAD_CONST                      2: None
                40      IS_OP                           1 (is not)
                42      POP_JUMP_IF_FALSE               34 (to 68)
                44      LOAD_FAST                       1: _filename
                46      LOAD_GLOBAL                     6: modulesbyfile
                48      CONTAINS_OP                     0 (in)
                50      POP_JUMP_IF_FALSE               34 (to 68)
                52      LOAD_GLOBAL                     2: sys
                54      LOAD_ATTR                       3: modules
                56      LOAD_METHOD                     4: get
                58      LOAD_GLOBAL                     6: modulesbyfile
                60      LOAD_FAST                       1: _filename
                62      BINARY_SUBSCR                   
                64      CALL_METHOD                     1
                66      RETURN_VALUE                    
                68      SETUP_FINALLY                   7 (to 84)
                70      LOAD_GLOBAL                     7: getabsfile
                72      LOAD_FAST                       0: object
                74      LOAD_FAST                       1: _filename
                76      CALL_FUNCTION                   2
                78      STORE_FAST                      2: file
                80      POP_BLOCK                       
                82      JUMP_FORWARD                    12 (to 108)
                84      DUP_TOP                         
                86      LOAD_GLOBAL                     8: TypeError
                88      LOAD_GLOBAL                     9: FileNotFoundError
                90      BUILD_TUPLE                     2
                92      JUMP_IF_NOT_EXC_MATCH           53 (to 106)
                94      POP_TOP                         
                96      POP_TOP                         
                98      POP_TOP                         
                100     POP_EXCEPT                      
                102     LOAD_CONST                      2: None
                104     RETURN_VALUE                    
                106     RERAISE                         0
                108     LOAD_FAST                       2: file
                110     LOAD_GLOBAL                     6: modulesbyfile
                112     CONTAINS_OP                     0 (in)
                114     POP_JUMP_IF_FALSE               66 (to 132)
                116     LOAD_GLOBAL                     2: sys
                118     LOAD_ATTR                       3: modules
                120     LOAD_METHOD                     4: get
                122     LOAD_GLOBAL                     6: modulesbyfile
                124     LOAD_FAST                       2: file
                126     BINARY_SUBSCR                   
                128     CALL_METHOD                     1
                130     RETURN_VALUE                    
                132     LOAD_GLOBAL                     2: sys
                134     LOAD_ATTR                       3: modules
                136     LOAD_METHOD                     10: copy
                138     CALL_METHOD                     0
                140     LOAD_METHOD                     11: items
                142     CALL_METHOD                     0
                144     GET_ITER                        
                146     FOR_ITER                        46 (to 240)
                148     UNPACK_SEQUENCE                 2
                150     STORE_FAST                      3: modname
                152     STORE_FAST                      4: module
                154     LOAD_GLOBAL                     0: ismodule
                156     LOAD_FAST                       4: module
                158     CALL_FUNCTION                   1
                160     POP_JUMP_IF_FALSE               119 (to 238)
                162     LOAD_GLOBAL                     1: hasattr
                164     LOAD_FAST                       4: module
                166     LOAD_CONST                      3: '__file__'
                168     CALL_FUNCTION                   2
                170     POP_JUMP_IF_FALSE               119 (to 238)
                172     LOAD_FAST                       4: module
                174     LOAD_ATTR                       12: __file__
                176     STORE_FAST                      5: f
                178     LOAD_FAST                       5: f
                180     LOAD_GLOBAL                     13: _filesbymodname
                182     LOAD_METHOD                     4: get
                184     LOAD_FAST                       3: modname
                186     LOAD_CONST                      2: None
                188     CALL_METHOD                     2
                190     COMPARE_OP                      2 (==)
                192     POP_JUMP_IF_FALSE               98 (to 196)
                194     JUMP_ABSOLUTE                   73 (to 146)
                196     LOAD_FAST                       5: f
                198     LOAD_GLOBAL                     13: _filesbymodname
                200     LOAD_FAST                       3: modname
                202     STORE_SUBSCR                    
                204     LOAD_GLOBAL                     7: getabsfile
                206     LOAD_FAST                       4: module
                208     CALL_FUNCTION                   1
                210     STORE_FAST                      5: f
                212     LOAD_FAST                       4: module
                214     LOAD_ATTR                       14: __name__
                216     DUP_TOP                         
                218     LOAD_GLOBAL                     6: modulesbyfile
                220     LOAD_FAST                       5: f
                222     STORE_SUBSCR                    
                224     LOAD_GLOBAL                     6: modulesbyfile
                226     LOAD_GLOBAL                     15: os
                228     LOAD_ATTR                       16: path
                230     LOAD_METHOD                     17: realpath
                232     LOAD_FAST                       5: f
                234     CALL_METHOD                     1
                236     STORE_SUBSCR                    
                238     JUMP_ABSOLUTE                   73 (to 146)
                240     LOAD_FAST                       2: file
                242     LOAD_GLOBAL                     6: modulesbyfile
                244     CONTAINS_OP                     0 (in)
                246     POP_JUMP_IF_FALSE               132 (to 264)
                248     LOAD_GLOBAL                     2: sys
                250     LOAD_ATTR                       3: modules
                252     LOAD_METHOD                     4: get
                254     LOAD_GLOBAL                     6: modulesbyfile
                256     LOAD_FAST                       2: file
                258     BINARY_SUBSCR                   
                260     CALL_METHOD                     1
                262     RETURN_VALUE                    
                264     LOAD_GLOBAL                     2: sys
                266     LOAD_ATTR                       3: modules
                268     LOAD_CONST                      4: '__main__'
                270     BINARY_SUBSCR                   
                272     STORE_FAST                      6: main
                274     LOAD_GLOBAL                     1: hasattr
                276     LOAD_FAST                       0: object
                278     LOAD_CONST                      5: '__name__'
                280     CALL_FUNCTION                   2
                282     POP_JUMP_IF_TRUE                144 (to 288)
                284     LOAD_CONST                      2: None
                286     RETURN_VALUE                    
                288     LOAD_GLOBAL                     1: hasattr
                290     LOAD_FAST                       6: main
                292     LOAD_FAST                       0: object
                294     LOAD_ATTR                       14: __name__
                296     CALL_FUNCTION                   2
                298     POP_JUMP_IF_FALSE               162 (to 324)
                300     LOAD_GLOBAL                     18: getattr
                302     LOAD_FAST                       6: main
                304     LOAD_FAST                       0: object
                306     LOAD_ATTR                       14: __name__
                308     CALL_FUNCTION                   2
                310     STORE_FAST                      7: mainobject
                312     LOAD_FAST                       7: mainobject
                314     LOAD_FAST                       0: object
                316     IS_OP                           0 (is)
                318     POP_JUMP_IF_FALSE               162 (to 324)
                320     LOAD_FAST                       6: main
                322     RETURN_VALUE                    
                324     LOAD_GLOBAL                     2: sys
                326     LOAD_ATTR                       3: modules
                328     LOAD_CONST                      6: 'builtins'
                330     BINARY_SUBSCR                   
                332     STORE_FAST                      8: builtin
                334     LOAD_GLOBAL                     1: hasattr
                336     LOAD_FAST                       8: builtin
                338     LOAD_FAST                       0: object
                340     LOAD_ATTR                       14: __name__
                342     CALL_FUNCTION                   2
                344     POP_JUMP_IF_FALSE               185 (to 370)
                346     LOAD_GLOBAL                     18: getattr
                348     LOAD_FAST                       8: builtin
                350     LOAD_FAST                       0: object
                352     LOAD_ATTR                       14: __name__
                354     CALL_FUNCTION                   2
                356     STORE_FAST                      9: builtinobject
                358     LOAD_FAST                       9: builtinobject
                360     LOAD_FAST                       0: object
                362     IS_OP                           0 (is)
                364     POP_JUMP_IF_FALSE               187 (to 374)
                366     LOAD_FAST                       8: builtin
                368     RETURN_VALUE                    
                370     LOAD_CONST                      2: None
                372     RETURN_VALUE                    
                374     LOAD_CONST                      2: None
                376     RETURN_VALUE                    
        'getmodule'
        [Code]
            File Name: inspect.py
            Object Name: ClassFoundException
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'ClassFoundException'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'ClassFoundException'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: None
                10      RETURN_VALUE                    
        'ClassFoundException'
        [Code]
            File Name: inspect.py
            Object Name: _ClassFinder
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                'visit_FunctionDef'
                'visit_AsyncFunctionDef'
                'visit_ClassDef'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_ClassFinder'
                [Code]
                    File Name: inspect.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'stack'
                        'qualname'
                    [Var Names]
                        'self'
                        'qualname'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: stack
                        6       LOAD_FAST                       1: qualname
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: qualname
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                '_ClassFinder.__init__'
                [Code]
                    File Name: inspect.py
                    Object Name: visit_FunctionDef
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'stack'
                        'append'
                        'name'
                        'generic_visit'
                        'pop'
                    [Var Names]
                        'self'
                        'node'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<locals>'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: stack
                        4       LOAD_METHOD                     1: append
                        6       LOAD_FAST                       1: node
                        8       LOAD_ATTR                       2: name
                        10      CALL_METHOD                     1
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       0: stack
                        18      LOAD_METHOD                     1: append
                        20      LOAD_CONST                      1: '<locals>'
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     3: generic_visit
                        30      LOAD_FAST                       1: node
                        32      CALL_METHOD                     1
                        34      POP_TOP                         
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       0: stack
                        40      LOAD_METHOD                     4: pop
                        42      CALL_METHOD                     0
                        44      POP_TOP                         
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       0: stack
                        50      LOAD_METHOD                     4: pop
                        52      CALL_METHOD                     0
                        54      POP_TOP                         
                        56      LOAD_CONST                      0: None
                        58      RETURN_VALUE                    
                '_ClassFinder.visit_FunctionDef'
                [Code]
                    File Name: inspect.py
                    Object Name: visit_ClassDef
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'stack'
                        'append'
                        'name'
                        'qualname'
                        'join'
                        'decorator_list'
                        'lineno'
                        'ClassFoundException'
                        'generic_visit'
                        'pop'
                    [Var Names]
                        'self'
                        'node'
                        'line_number'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '.'
                        0
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: stack
                        4       LOAD_METHOD                     1: append
                        6       LOAD_FAST                       1: node
                        8       LOAD_ATTR                       2: name
                        10      CALL_METHOD                     1
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: qualname
                        18      LOAD_CONST                      1: '.'
                        20      LOAD_METHOD                     4: join
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       0: stack
                        26      CALL_METHOD                     1
                        28      COMPARE_OP                      2 (==)
                        30      POP_JUMP_IF_FALSE               37 (to 74)
                        32      LOAD_FAST                       1: node
                        34      LOAD_ATTR                       5: decorator_list
                        36      POP_JUMP_IF_FALSE               26 (to 52)
                        38      LOAD_FAST                       1: node
                        40      LOAD_ATTR                       5: decorator_list
                        42      LOAD_CONST                      2: 0
                        44      BINARY_SUBSCR                   
                        46      LOAD_ATTR                       6: lineno
                        48      STORE_FAST                      2: line_number
                        50      JUMP_FORWARD                    3 (to 58)
                        52      LOAD_FAST                       1: node
                        54      LOAD_ATTR                       6: lineno
                        56      STORE_FAST                      2: line_number
                        58      LOAD_FAST                       2: line_number
                        60      LOAD_CONST                      3: 1
                        62      INPLACE_SUBTRACT                
                        64      STORE_FAST                      2: line_number
                        66      LOAD_GLOBAL                     7: ClassFoundException
                        68      LOAD_FAST                       2: line_number
                        70      CALL_FUNCTION                   1
                        72      RAISE_VARARGS                   1
                        74      LOAD_FAST                       0: self
                        76      LOAD_METHOD                     8: generic_visit
                        78      LOAD_FAST                       1: node
                        80      CALL_METHOD                     1
                        82      POP_TOP                         
                        84      LOAD_FAST                       0: self
                        86      LOAD_ATTR                       0: stack
                        88      LOAD_METHOD                     9: pop
                        90      CALL_METHOD                     0
                        92      POP_TOP                         
                        94      LOAD_CONST                      0: None
                        96      RETURN_VALUE                    
                '_ClassFinder.visit_ClassDef'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_ClassFinder'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: <CODE> __init__
                10      LOAD_CONST                      2: '_ClassFinder.__init__'
                12      MAKE_FUNCTION                   0
                14      STORE_NAME                      3: __init__
                16      LOAD_CONST                      3: <CODE> visit_FunctionDef
                18      LOAD_CONST                      4: '_ClassFinder.visit_FunctionDef'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      4: visit_FunctionDef
                24      LOAD_NAME                       4: visit_FunctionDef
                26      STORE_NAME                      5: visit_AsyncFunctionDef
                28      LOAD_CONST                      5: <CODE> visit_ClassDef
                30      LOAD_CONST                      6: '_ClassFinder.visit_ClassDef'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: visit_ClassDef
                36      LOAD_CONST                      7: None
                38      RETURN_VALUE                    
        '_ClassFinder'
        [Code]
            File Name: inspect.py
            Object Name: findsource
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 13
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getsourcefile'
                'linecache'
                'checkcache'
                'getfile'
                'startswith'
                'endswith'
                'OSError'
                'getmodule'
                'getlines'
                '__dict__'
                'ismodule'
                'isclass'
                '__qualname__'
                'join'
                'ast'
                'parse'
                '_ClassFinder'
                'visit'
                'ClassFoundException'
                'args'
                'ismethod'
                '__func__'
                'isfunction'
                '__code__'
                'istraceback'
                'tb_frame'
                'isframe'
                'f_code'
                'iscode'
                'hasattr'
                'co_firstlineno'
                're'
                'compile'
                'IndexError'
                'match'
            [Var Names]
                'object'
                'file'
                'module'
                'lines'
                'qualname'
                'source'
                'tree'
                'class_finder'
                'e'
                'line_number'
                'lnum'
                'pat'
                'line'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the entire source file and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of all the lines\n    in the file and the line number indexes a line in that list.  An OSError\n    is raised if the source code cannot be retrieved.'
                '<'
                '>'
                'source code not available'
                'could not get source code'
                0
                ''
                None
                'could not find class definition'
                'co_firstlineno'
                'could not find function definition'
                1
                '^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)'
                'lineno is out of bounds'
                'could not find code object'
            [Disassembly]
                0       LOAD_GLOBAL                     0: getsourcefile
                2       LOAD_FAST                       0: object
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      1: file
                8       LOAD_FAST                       1: file
                10      POP_JUMP_IF_FALSE               12 (to 24)
                12      LOAD_GLOBAL                     1: linecache
                14      LOAD_METHOD                     2: checkcache
                16      LOAD_FAST                       1: file
                18      CALL_METHOD                     1
                20      POP_TOP                         
                22      JUMP_FORWARD                    18 (to 60)
                24      LOAD_GLOBAL                     3: getfile
                26      LOAD_FAST                       0: object
                28      CALL_FUNCTION                   1
                30      STORE_FAST                      1: file
                32      LOAD_FAST                       1: file
                34      LOAD_METHOD                     4: startswith
                36      LOAD_CONST                      1: '<'
                38      CALL_METHOD                     1
                40      POP_JUMP_IF_FALSE               26 (to 52)
                42      LOAD_FAST                       1: file
                44      LOAD_METHOD                     5: endswith
                46      LOAD_CONST                      2: '>'
                48      CALL_METHOD                     1
                50      POP_JUMP_IF_TRUE                30 (to 60)
                52      LOAD_GLOBAL                     6: OSError
                54      LOAD_CONST                      3: 'source code not available'
                56      CALL_FUNCTION                   1
                58      RAISE_VARARGS                   1
                60      LOAD_GLOBAL                     7: getmodule
                62      LOAD_FAST                       0: object
                64      LOAD_FAST                       1: file
                66      CALL_FUNCTION                   2
                68      STORE_FAST                      2: module
                70      LOAD_FAST                       2: module
                72      POP_JUMP_IF_FALSE               45 (to 90)
                74      LOAD_GLOBAL                     1: linecache
                76      LOAD_METHOD                     8: getlines
                78      LOAD_FAST                       1: file
                80      LOAD_FAST                       2: module
                82      LOAD_ATTR                       9: __dict__
                84      CALL_METHOD                     2
                86      STORE_FAST                      3: lines
                88      JUMP_FORWARD                    5 (to 100)
                90      LOAD_GLOBAL                     1: linecache
                92      LOAD_METHOD                     8: getlines
                94      LOAD_FAST                       1: file
                96      CALL_METHOD                     1
                98      STORE_FAST                      3: lines
                100     LOAD_FAST                       3: lines
                102     POP_JUMP_IF_TRUE                56 (to 112)
                104     LOAD_GLOBAL                     6: OSError
                106     LOAD_CONST                      4: 'could not get source code'
                108     CALL_FUNCTION                   1
                110     RAISE_VARARGS                   1
                112     LOAD_GLOBAL                     10: ismodule
                114     LOAD_FAST                       0: object
                116     CALL_FUNCTION                   1
                118     POP_JUMP_IF_FALSE               64 (to 128)
                120     LOAD_FAST                       3: lines
                122     LOAD_CONST                      5: 0
                124     BUILD_TUPLE                     2
                126     RETURN_VALUE                    
                128     LOAD_GLOBAL                     11: isclass
                130     LOAD_FAST                       0: object
                132     CALL_FUNCTION                   1
                134     POP_JUMP_IF_FALSE               123 (to 246)
                136     LOAD_FAST                       0: object
                138     LOAD_ATTR                       12: __qualname__
                140     STORE_FAST                      4: qualname
                142     LOAD_CONST                      6: ''
                144     LOAD_METHOD                     13: join
                146     LOAD_FAST                       3: lines
                148     CALL_METHOD                     1
                150     STORE_FAST                      5: source
                152     LOAD_GLOBAL                     14: ast
                154     LOAD_METHOD                     15: parse
                156     LOAD_FAST                       5: source
                158     CALL_METHOD                     1
                160     STORE_FAST                      6: tree
                162     LOAD_GLOBAL                     16: _ClassFinder
                164     LOAD_FAST                       4: qualname
                166     CALL_FUNCTION                   1
                168     STORE_FAST                      7: class_finder
                170     SETUP_FINALLY                   10 (to 192)
                172     LOAD_FAST                       7: class_finder
                174     LOAD_METHOD                     17: visit
                176     LOAD_FAST                       6: tree
                178     CALL_METHOD                     1
                180     POP_TOP                         
                182     POP_BLOCK                       
                184     LOAD_GLOBAL                     6: OSError
                186     LOAD_CONST                      8: 'could not find class definition'
                188     CALL_FUNCTION                   1
                190     RAISE_VARARGS                   1
                192     DUP_TOP                         
                194     LOAD_GLOBAL                     18: ClassFoundException
                196     JUMP_IF_NOT_EXC_MATCH           122 (to 244)
                198     POP_TOP                         
                200     STORE_FAST                      8: e
                202     POP_TOP                         
                204     SETUP_FINALLY                   15 (to 236)
                206     LOAD_FAST                       8: e
                208     LOAD_ATTR                       19: args
                210     LOAD_CONST                      5: 0
                212     BINARY_SUBSCR                   
                214     STORE_FAST                      9: line_number
                216     LOAD_FAST                       3: lines
                218     LOAD_FAST                       9: line_number
                220     BUILD_TUPLE                     2
                222     POP_BLOCK                       
                224     ROT_FOUR                        
                226     POP_EXCEPT                      
                228     LOAD_CONST                      7: None
                230     STORE_FAST                      8: e
                232     DELETE_FAST                     8: e
                234     RETURN_VALUE                    
                236     LOAD_CONST                      7: None
                238     STORE_FAST                      8: e
                240     DELETE_FAST                     8: e
                242     RERAISE                         1
                244     RERAISE                         0
                246     LOAD_GLOBAL                     20: ismethod
                248     LOAD_FAST                       0: object
                250     CALL_FUNCTION                   1
                252     POP_JUMP_IF_FALSE               130 (to 260)
                254     LOAD_FAST                       0: object
                256     LOAD_ATTR                       21: __func__
                258     STORE_FAST                      0: object
                260     LOAD_GLOBAL                     22: isfunction
                262     LOAD_FAST                       0: object
                264     CALL_FUNCTION                   1
                266     POP_JUMP_IF_FALSE               137 (to 274)
                268     LOAD_FAST                       0: object
                270     LOAD_ATTR                       23: __code__
                272     STORE_FAST                      0: object
                274     LOAD_GLOBAL                     24: istraceback
                276     LOAD_FAST                       0: object
                278     CALL_FUNCTION                   1
                280     POP_JUMP_IF_FALSE               144 (to 288)
                282     LOAD_FAST                       0: object
                284     LOAD_ATTR                       25: tb_frame
                286     STORE_FAST                      0: object
                288     LOAD_GLOBAL                     26: isframe
                290     LOAD_FAST                       0: object
                292     CALL_FUNCTION                   1
                294     POP_JUMP_IF_FALSE               151 (to 302)
                296     LOAD_FAST                       0: object
                298     LOAD_ATTR                       27: f_code
                300     STORE_FAST                      0: object
                302     LOAD_GLOBAL                     28: iscode
                304     LOAD_FAST                       0: object
                306     CALL_FUNCTION                   1
                308     POP_JUMP_IF_FALSE               218 (to 436)
                310     LOAD_GLOBAL                     29: hasattr
                312     LOAD_FAST                       0: object
                314     LOAD_CONST                      9: 'co_firstlineno'
                316     CALL_FUNCTION                   2
                318     POP_JUMP_IF_TRUE                164 (to 328)
                320     LOAD_GLOBAL                     6: OSError
                322     LOAD_CONST                      10: 'could not find function definition'
                324     CALL_FUNCTION                   1
                326     RAISE_VARARGS                   1
                328     LOAD_FAST                       0: object
                330     LOAD_ATTR                       30: co_firstlineno
                332     LOAD_CONST                      11: 1
                334     BINARY_SUBTRACT                 
                336     STORE_FAST                      10: lnum
                338     LOAD_GLOBAL                     31: re
                340     LOAD_METHOD                     32: compile
                342     LOAD_CONST                      12: '^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)'
                344     CALL_METHOD                     1
                346     STORE_FAST                      11: pat
                348     LOAD_FAST                       10: lnum
                350     LOAD_CONST                      5: 0
                352     COMPARE_OP                      4 (>)
                354     POP_JUMP_IF_FALSE               214 (to 428)
                356     SETUP_FINALLY                   6 (to 370)
                358     LOAD_FAST                       3: lines
                360     LOAD_FAST                       10: lnum
                362     BINARY_SUBSCR                   
                364     STORE_FAST                      12: line
                366     POP_BLOCK                       
                368     JUMP_FORWARD                    11 (to 392)
                370     DUP_TOP                         
                372     LOAD_GLOBAL                     33: IndexError
                374     JUMP_IF_NOT_EXC_MATCH           195 (to 390)
                376     POP_TOP                         
                378     POP_TOP                         
                380     POP_TOP                         
                382     LOAD_GLOBAL                     6: OSError
                384     LOAD_CONST                      13: 'lineno is out of bounds'
                386     CALL_FUNCTION                   1
                388     RAISE_VARARGS                   1
                390     RERAISE                         0
                392     LOAD_FAST                       11: pat
                394     LOAD_METHOD                     34: match
                396     LOAD_FAST                       12: line
                398     CALL_METHOD                     1
                400     POP_JUMP_IF_FALSE               206 (to 412)
                402     NOP                             
                404     LOAD_FAST                       3: lines
                406     LOAD_FAST                       10: lnum
                408     BUILD_TUPLE                     2
                410     RETURN_VALUE                    
                412     LOAD_FAST                       10: lnum
                414     LOAD_CONST                      11: 1
                416     BINARY_SUBTRACT                 
                418     STORE_FAST                      10: lnum
                420     LOAD_FAST                       10: lnum
                422     LOAD_CONST                      5: 0
                424     COMPARE_OP                      4 (>)
                426     POP_JUMP_IF_TRUE                178 (to 356)
                428     LOAD_FAST                       3: lines
                430     LOAD_FAST                       10: lnum
                432     BUILD_TUPLE                     2
                434     RETURN_VALUE                    
                436     LOAD_GLOBAL                     6: OSError
                438     LOAD_CONST                      14: 'could not find code object'
                440     CALL_FUNCTION                   1
                442     RAISE_VARARGS                   1
        'findsource'
        [Code]
            File Name: inspect.py
            Object Name: getcomments
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'findsource'
                'OSError'
                'TypeError'
                'ismodule'
                'len'
                'strip'
                'append'
                'expandtabs'
                'join'
                'indentsize'
                'lstrip'
            [Var Names]
                'object'
                'lines'
                'lnum'
                'start'
                'comments'
                'end'
                'indent'
                'comment'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Get lines of comments immediately preceding an object's source code.\n\n    Returns None when source can't be found.\n    "
                None
                0
                2
                '#!'
                1
                (
                    ''
                    '#'
                )
                '#'
                ''
                -1
            [Disassembly]
                0       SETUP_FINALLY                   8 (to 18)
                2       LOAD_GLOBAL                     0: findsource
                4       LOAD_FAST                       0: object
                6       CALL_FUNCTION                   1
                8       UNPACK_SEQUENCE                 2
                10      STORE_FAST                      1: lines
                12      STORE_FAST                      2: lnum
                14      POP_BLOCK                       
                16      JUMP_FORWARD                    12 (to 42)
                18      DUP_TOP                         
                20      LOAD_GLOBAL                     1: OSError
                22      LOAD_GLOBAL                     2: TypeError
                24      BUILD_TUPLE                     2
                26      JUMP_IF_NOT_EXC_MATCH           20 (to 40)
                28      POP_TOP                         
                30      POP_TOP                         
                32      POP_TOP                         
                34      POP_EXCEPT                      
                36      LOAD_CONST                      1: None
                38      RETURN_VALUE                    
                40      RERAISE                         0
                42      LOAD_GLOBAL                     3: ismodule
                44      LOAD_FAST                       0: object
                46      CALL_FUNCTION                   1
                48      POP_JUMP_IF_FALSE               147 (to 294)
                50      LOAD_CONST                      2: 0
                52      STORE_FAST                      3: start
                54      LOAD_FAST                       1: lines
                56      POP_JUMP_IF_FALSE               41 (to 82)
                58      LOAD_FAST                       1: lines
                60      LOAD_CONST                      2: 0
                62      BINARY_SUBSCR                   
                64      LOAD_CONST                      1: None
                66      LOAD_CONST                      3: 2
                68      BUILD_SLICE                     2
                70      BINARY_SUBSCR                   
                72      LOAD_CONST                      4: '#!'
                74      COMPARE_OP                      2 (==)
                76      POP_JUMP_IF_FALSE               41 (to 82)
                78      LOAD_CONST                      5: 1
                80      STORE_FAST                      3: start
                82      LOAD_FAST                       3: start
                84      LOAD_GLOBAL                     4: len
                86      LOAD_FAST                       1: lines
                88      CALL_FUNCTION                   1
                90      COMPARE_OP                      0 (<)
                92      POP_JUMP_IF_FALSE               73 (to 146)
                94      LOAD_FAST                       1: lines
                96      LOAD_FAST                       3: start
                98      BINARY_SUBSCR                   
                100     LOAD_METHOD                     5: strip
                102     CALL_METHOD                     0
                104     LOAD_CONST                      6: ('', '#')
                106     CONTAINS_OP                     0 (in)
                108     POP_JUMP_IF_FALSE               73 (to 146)
                110     LOAD_FAST                       3: start
                112     LOAD_CONST                      5: 1
                114     BINARY_ADD                      
                116     STORE_FAST                      3: start
                118     LOAD_FAST                       3: start
                120     LOAD_GLOBAL                     4: len
                122     LOAD_FAST                       1: lines
                124     CALL_FUNCTION                   1
                126     COMPARE_OP                      0 (<)
                128     POP_JUMP_IF_FALSE               73 (to 146)
                130     LOAD_FAST                       1: lines
                132     LOAD_FAST                       3: start
                134     BINARY_SUBSCR                   
                136     LOAD_METHOD                     5: strip
                138     CALL_METHOD                     0
                140     LOAD_CONST                      6: ('', '#')
                142     CONTAINS_OP                     0 (in)
                144     POP_JUMP_IF_TRUE                55 (to 110)
                146     LOAD_FAST                       3: start
                148     LOAD_GLOBAL                     4: len
                150     LOAD_FAST                       1: lines
                152     CALL_FUNCTION                   1
                154     COMPARE_OP                      0 (<)
                156     POP_JUMP_IF_FALSE               143 (to 286)
                158     LOAD_FAST                       1: lines
                160     LOAD_FAST                       3: start
                162     BINARY_SUBSCR                   
                164     LOAD_CONST                      1: None
                166     LOAD_CONST                      5: 1
                168     BUILD_SLICE                     2
                170     BINARY_SUBSCR                   
                172     LOAD_CONST                      7: '#'
                174     COMPARE_OP                      2 (==)
                176     POP_JUMP_IF_FALSE               145 (to 290)
                178     BUILD_LIST                      0
                180     STORE_FAST                      4: comments
                182     LOAD_FAST                       3: start
                184     STORE_FAST                      5: end
                186     LOAD_FAST                       5: end
                188     LOAD_GLOBAL                     4: len
                190     LOAD_FAST                       1: lines
                192     CALL_FUNCTION                   1
                194     COMPARE_OP                      0 (<)
                196     POP_JUMP_IF_FALSE               138 (to 276)
                198     LOAD_FAST                       1: lines
                200     LOAD_FAST                       5: end
                202     BINARY_SUBSCR                   
                204     LOAD_CONST                      1: None
                206     LOAD_CONST                      5: 1
                208     BUILD_SLICE                     2
                210     BINARY_SUBSCR                   
                212     LOAD_CONST                      7: '#'
                214     COMPARE_OP                      2 (==)
                216     POP_JUMP_IF_FALSE               138 (to 276)
                218     LOAD_FAST                       4: comments
                220     LOAD_METHOD                     6: append
                222     LOAD_FAST                       1: lines
                224     LOAD_FAST                       5: end
                226     BINARY_SUBSCR                   
                228     LOAD_METHOD                     7: expandtabs
                230     CALL_METHOD                     0
                232     CALL_METHOD                     1
                234     POP_TOP                         
                236     LOAD_FAST                       5: end
                238     LOAD_CONST                      5: 1
                240     BINARY_ADD                      
                242     STORE_FAST                      5: end
                244     LOAD_FAST                       5: end
                246     LOAD_GLOBAL                     4: len
                248     LOAD_FAST                       1: lines
                250     CALL_FUNCTION                   1
                252     COMPARE_OP                      0 (<)
                254     POP_JUMP_IF_FALSE               138 (to 276)
                256     LOAD_FAST                       1: lines
                258     LOAD_FAST                       5: end
                260     BINARY_SUBSCR                   
                262     LOAD_CONST                      1: None
                264     LOAD_CONST                      5: 1
                266     BUILD_SLICE                     2
                268     BINARY_SUBSCR                   
                270     LOAD_CONST                      7: '#'
                272     COMPARE_OP                      2 (==)
                274     POP_JUMP_IF_TRUE                109 (to 218)
                276     LOAD_CONST                      8: ''
                278     LOAD_METHOD                     8: join
                280     LOAD_FAST                       4: comments
                282     CALL_METHOD                     1
                284     RETURN_VALUE                    
                286     LOAD_CONST                      1: None
                288     RETURN_VALUE                    
                290     LOAD_CONST                      1: None
                292     RETURN_VALUE                    
                294     LOAD_FAST                       2: lnum
                296     LOAD_CONST                      2: 0
                298     COMPARE_OP                      4 (>)
                300     POP_JUMP_IF_FALSE               339 (to 678)
                304     LOAD_GLOBAL                     9: indentsize
                306     LOAD_FAST                       1: lines
                308     LOAD_FAST                       2: lnum
                310     BINARY_SUBSCR                   
                312     CALL_FUNCTION                   1
                314     STORE_FAST                      6: indent
                316     LOAD_FAST                       2: lnum
                318     LOAD_CONST                      5: 1
                320     BINARY_SUBTRACT                 
                322     STORE_FAST                      5: end
                324     LOAD_FAST                       5: end
                326     LOAD_CONST                      2: 0
                328     COMPARE_OP                      5 (>=)
                330     POP_JUMP_IF_FALSE               341 (to 682)
                334     LOAD_FAST                       1: lines
                336     LOAD_FAST                       5: end
                338     BINARY_SUBSCR                   
                340     LOAD_METHOD                     10: lstrip
                342     CALL_METHOD                     0
                344     LOAD_CONST                      1: None
                346     LOAD_CONST                      5: 1
                348     BUILD_SLICE                     2
                350     BINARY_SUBSCR                   
                352     LOAD_CONST                      7: '#'
                354     COMPARE_OP                      2 (==)
                356     POP_JUMP_IF_FALSE               343 (to 686)
                360     LOAD_GLOBAL                     9: indentsize
                362     LOAD_FAST                       1: lines
                364     LOAD_FAST                       5: end
                366     BINARY_SUBSCR                   
                368     CALL_FUNCTION                   1
                370     LOAD_FAST                       6: indent
                372     COMPARE_OP                      2 (==)
                374     POP_JUMP_IF_FALSE               345 (to 690)
                378     LOAD_FAST                       1: lines
                380     LOAD_FAST                       5: end
                382     BINARY_SUBSCR                   
                384     LOAD_METHOD                     7: expandtabs
                386     CALL_METHOD                     0
                388     LOAD_METHOD                     10: lstrip
                390     CALL_METHOD                     0
                392     BUILD_LIST                      1
                394     STORE_FAST                      4: comments
                396     LOAD_FAST                       5: end
                398     LOAD_CONST                      2: 0
                400     COMPARE_OP                      4 (>)
                402     POP_JUMP_IF_FALSE               274 (to 548)
                406     LOAD_FAST                       5: end
                408     LOAD_CONST                      5: 1
                410     BINARY_SUBTRACT                 
                412     STORE_FAST                      5: end
                414     LOAD_FAST                       1: lines
                416     LOAD_FAST                       5: end
                418     BINARY_SUBSCR                   
                420     LOAD_METHOD                     7: expandtabs
                422     CALL_METHOD                     0
                424     LOAD_METHOD                     10: lstrip
                426     CALL_METHOD                     0
                428     STORE_FAST                      7: comment
                430     LOAD_FAST                       7: comment
                432     LOAD_CONST                      1: None
                434     LOAD_CONST                      5: 1
                436     BUILD_SLICE                     2
                438     BINARY_SUBSCR                   
                440     LOAD_CONST                      7: '#'
                442     COMPARE_OP                      2 (==)
                444     POP_JUMP_IF_FALSE               274 (to 548)
                448     LOAD_GLOBAL                     9: indentsize
                450     LOAD_FAST                       1: lines
                452     LOAD_FAST                       5: end
                454     BINARY_SUBSCR                   
                456     CALL_FUNCTION                   1
                458     LOAD_FAST                       6: indent
                460     COMPARE_OP                      2 (==)
                462     POP_JUMP_IF_FALSE               274 (to 548)
                466     LOAD_FAST                       7: comment
                468     BUILD_LIST                      1
                470     LOAD_FAST                       4: comments
                472     LOAD_CONST                      1: None
                474     LOAD_CONST                      2: 0
                476     BUILD_SLICE                     2
                478     STORE_SUBSCR                    
                480     LOAD_FAST                       5: end
                482     LOAD_CONST                      5: 1
                484     BINARY_SUBTRACT                 
                486     STORE_FAST                      5: end
                488     LOAD_FAST                       5: end
                490     LOAD_CONST                      2: 0
                492     COMPARE_OP                      0 (<)
                494     POP_JUMP_IF_FALSE               249 (to 498)
                496     JUMP_FORWARD                    25 (to 548)
                498     LOAD_FAST                       1: lines
                500     LOAD_FAST                       5: end
                502     BINARY_SUBSCR                   
                504     LOAD_METHOD                     7: expandtabs
                506     CALL_METHOD                     0
                508     LOAD_METHOD                     10: lstrip
                510     CALL_METHOD                     0
                512     STORE_FAST                      7: comment
                514     LOAD_FAST                       7: comment
                516     LOAD_CONST                      1: None
                518     LOAD_CONST                      5: 1
                520     BUILD_SLICE                     2
                522     BINARY_SUBSCR                   
                524     LOAD_CONST                      7: '#'
                526     COMPARE_OP                      2 (==)
                528     POP_JUMP_IF_FALSE               274 (to 548)
                532     LOAD_GLOBAL                     9: indentsize
                534     LOAD_FAST                       1: lines
                536     LOAD_FAST                       5: end
                538     BINARY_SUBSCR                   
                540     CALL_FUNCTION                   1
                542     LOAD_FAST                       6: indent
                544     COMPARE_OP                      2 (==)
                546     POP_JUMP_IF_TRUE                233 (to 466)
                548     LOAD_FAST                       4: comments
                550     POP_JUMP_IF_FALSE               304 (to 608)
                554     LOAD_FAST                       4: comments
                556     LOAD_CONST                      2: 0
                558     BINARY_SUBSCR                   
                560     LOAD_METHOD                     5: strip
                562     CALL_METHOD                     0
                564     LOAD_CONST                      7: '#'
                566     COMPARE_OP                      2 (==)
                568     POP_JUMP_IF_FALSE               304 (to 608)
                572     BUILD_LIST                      0
                574     LOAD_FAST                       4: comments
                576     LOAD_CONST                      1: None
                578     LOAD_CONST                      5: 1
                580     BUILD_SLICE                     2
                582     STORE_SUBSCR                    
                584     LOAD_FAST                       4: comments
                586     POP_JUMP_IF_FALSE               304 (to 608)
                590     LOAD_FAST                       4: comments
                592     LOAD_CONST                      2: 0
                594     BINARY_SUBSCR                   
                596     LOAD_METHOD                     5: strip
                598     CALL_METHOD                     0
                600     LOAD_CONST                      7: '#'
                602     COMPARE_OP                      2 (==)
                604     POP_JUMP_IF_TRUE                286 (to 572)
                608     LOAD_FAST                       4: comments
                610     POP_JUMP_IF_FALSE               334 (to 668)
                614     LOAD_FAST                       4: comments
                616     LOAD_CONST                      9: -1
                618     BINARY_SUBSCR                   
                620     LOAD_METHOD                     5: strip
                622     CALL_METHOD                     0
                624     LOAD_CONST                      7: '#'
                626     COMPARE_OP                      2 (==)
                628     POP_JUMP_IF_FALSE               334 (to 668)
                632     BUILD_LIST                      0
                634     LOAD_FAST                       4: comments
                636     LOAD_CONST                      9: -1
                638     LOAD_CONST                      1: None
                640     BUILD_SLICE                     2
                642     STORE_SUBSCR                    
                644     LOAD_FAST                       4: comments
                646     POP_JUMP_IF_FALSE               334 (to 668)
                650     LOAD_FAST                       4: comments
                652     LOAD_CONST                      9: -1
                654     BINARY_SUBSCR                   
                656     LOAD_METHOD                     5: strip
                658     CALL_METHOD                     0
                660     LOAD_CONST                      7: '#'
                662     COMPARE_OP                      2 (==)
                664     POP_JUMP_IF_TRUE                316 (to 632)
                668     LOAD_CONST                      8: ''
                670     LOAD_METHOD                     8: join
                672     LOAD_FAST                       4: comments
                674     CALL_METHOD                     1
                676     RETURN_VALUE                    
                678     LOAD_CONST                      1: None
                680     RETURN_VALUE                    
                682     LOAD_CONST                      1: None
                684     RETURN_VALUE                    
                686     LOAD_CONST                      1: None
                688     RETURN_VALUE                    
                690     LOAD_CONST                      1: None
                692     RETURN_VALUE                    
        'getcomments'
        [Code]
            File Name: inspect.py
            Object Name: EndOfBlock
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'EndOfBlock'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'EndOfBlock'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: None
                10      RETURN_VALUE                    
        'EndOfBlock'
        [Code]
            File Name: inspect.py
            Object Name: BlockFinder
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 2
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'tokeneater'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'BlockFinder'
                'Provide a tokeneater() method to detect the end of a code block.'
                [Code]
                    File Name: inspect.py
                    Object Name: __init__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'indent'
                        'islambda'
                        'started'
                        'passline'
                        'indecorator'
                        'last'
                        'body_col0'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        False
                        1
                    [Disassembly]
                        0       LOAD_CONST                      1: 0
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: indent
                        6       LOAD_CONST                      2: False
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: islambda
                        12      LOAD_CONST                      2: False
                        14      LOAD_FAST                       0: self
                        16      STORE_ATTR                      2: started
                        18      LOAD_CONST                      2: False
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      3: passline
                        24      LOAD_CONST                      2: False
                        26      LOAD_FAST                       0: self
                        28      STORE_ATTR                      4: indecorator
                        30      LOAD_CONST                      3: 1
                        32      LOAD_FAST                       0: self
                        34      STORE_ATTR                      5: last
                        36      LOAD_CONST                      0: None
                        38      LOAD_FAST                       0: self
                        40      STORE_ATTR                      6: body_col0
                        42      LOAD_CONST                      0: None
                        44      RETURN_VALUE                    
                'BlockFinder.__init__'
                [Code]
                    File Name: inspect.py
                    Object Name: tokeneater
                    Arg Count: 6
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'started'
                        'indecorator'
                        'islambda'
                        'passline'
                        'tokenize'
                        'NEWLINE'
                        'last'
                        'EndOfBlock'
                        'INDENT'
                        'body_col0'
                        'indent'
                        'DEDENT'
                        'COMMENT'
                        'NL'
                    [Var Names]
                        'self'
                        'type'
                        'token'
                        'srowcol'
                        'erowcol'
                        'line'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '@'
                        True
                        (
                            'def'
                            'class'
                            'lambda'
                        )
                        'lambda'
                        False
                        0
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: started
                        4       POP_JUMP_IF_TRUE                33 (to 66)
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: indecorator
                        10      POP_JUMP_IF_TRUE                33 (to 66)
                        12      LOAD_FAST                       2: token
                        14      LOAD_CONST                      1: '@'
                        16      COMPARE_OP                      2 (==)
                        18      POP_JUMP_IF_FALSE               14 (to 28)
                        20      LOAD_CONST                      2: True
                        22      LOAD_FAST                       0: self
                        24      STORE_ATTR                      1: indecorator
                        26      JUMP_FORWARD                    14 (to 56)
                        28      LOAD_FAST                       2: token
                        30      LOAD_CONST                      3: ('def', 'class', 'lambda')
                        32      CONTAINS_OP                     0 (in)
                        34      POP_JUMP_IF_FALSE               28 (to 56)
                        36      LOAD_FAST                       2: token
                        38      LOAD_CONST                      4: 'lambda'
                        40      COMPARE_OP                      2 (==)
                        42      POP_JUMP_IF_FALSE               25 (to 50)
                        44      LOAD_CONST                      2: True
                        46      LOAD_FAST                       0: self
                        48      STORE_ATTR                      2: islambda
                        50      LOAD_CONST                      2: True
                        52      LOAD_FAST                       0: self
                        54      STORE_ATTR                      0: started
                        56      LOAD_CONST                      2: True
                        58      LOAD_FAST                       0: self
                        60      STORE_ATTR                      3: passline
                        62      LOAD_CONST                      0: None
                        64      RETURN_VALUE                    
                        66      LOAD_FAST                       1: type
                        68      LOAD_GLOBAL                     4: tokenize
                        70      LOAD_ATTR                       5: NEWLINE
                        72      COMPARE_OP                      2 (==)
                        74      POP_JUMP_IF_FALSE               61 (to 122)
                        76      LOAD_CONST                      5: False
                        78      LOAD_FAST                       0: self
                        80      STORE_ATTR                      3: passline
                        82      LOAD_FAST                       3: srowcol
                        84      LOAD_CONST                      6: 0
                        86      BINARY_SUBSCR                   
                        88      LOAD_FAST                       0: self
                        90      STORE_ATTR                      6: last
                        92      LOAD_FAST                       0: self
                        94      LOAD_ATTR                       2: islambda
                        96      POP_JUMP_IF_FALSE               51 (to 102)
                        98      LOAD_GLOBAL                     7: EndOfBlock
                        100     RAISE_VARARGS                   1
                        102     LOAD_FAST                       0: self
                        104     LOAD_ATTR                       1: indecorator
                        106     POP_JUMP_IF_FALSE               59 (to 118)
                        108     LOAD_CONST                      5: False
                        110     LOAD_FAST                       0: self
                        112     STORE_ATTR                      1: indecorator
                        114     LOAD_CONST                      0: None
                        116     RETURN_VALUE                    
                        118     LOAD_CONST                      0: None
                        120     RETURN_VALUE                    
                        122     LOAD_FAST                       0: self
                        124     LOAD_ATTR                       3: passline
                        126     POP_JUMP_IF_FALSE               66 (to 132)
                        128     LOAD_CONST                      0: None
                        130     RETURN_VALUE                    
                        132     LOAD_FAST                       1: type
                        134     LOAD_GLOBAL                     4: tokenize
                        136     LOAD_ATTR                       8: INDENT
                        138     COMPARE_OP                      2 (==)
                        140     POP_JUMP_IF_FALSE               95 (to 190)
                        142     LOAD_FAST                       0: self
                        144     LOAD_ATTR                       9: body_col0
                        146     LOAD_CONST                      0: None
                        148     IS_OP                           0 (is)
                        150     POP_JUMP_IF_FALSE               84 (to 168)
                        152     LOAD_FAST                       0: self
                        154     LOAD_ATTR                       0: started
                        156     POP_JUMP_IF_FALSE               84 (to 168)
                        158     LOAD_FAST                       4: erowcol
                        160     LOAD_CONST                      7: 1
                        162     BINARY_SUBSCR                   
                        164     LOAD_FAST                       0: self
                        166     STORE_ATTR                      9: body_col0
                        168     LOAD_FAST                       0: self
                        170     LOAD_ATTR                       10: indent
                        172     LOAD_CONST                      7: 1
                        174     BINARY_ADD                      
                        176     LOAD_FAST                       0: self
                        178     STORE_ATTR                      10: indent
                        180     LOAD_CONST                      2: True
                        182     LOAD_FAST                       0: self
                        184     STORE_ATTR                      3: passline
                        186     LOAD_CONST                      0: None
                        188     RETURN_VALUE                    
                        190     LOAD_FAST                       1: type
                        192     LOAD_GLOBAL                     4: tokenize
                        194     LOAD_ATTR                       11: DEDENT
                        196     COMPARE_OP                      2 (==)
                        198     POP_JUMP_IF_FALSE               115 (to 230)
                        200     LOAD_FAST                       0: self
                        202     LOAD_ATTR                       10: indent
                        204     LOAD_CONST                      7: 1
                        206     BINARY_SUBTRACT                 
                        208     LOAD_FAST                       0: self
                        210     STORE_ATTR                      10: indent
                        212     LOAD_FAST                       0: self
                        214     LOAD_ATTR                       10: indent
                        216     LOAD_CONST                      6: 0
                        218     COMPARE_OP                      1 (<=)
                        220     POP_JUMP_IF_FALSE               113 (to 226)
                        222     LOAD_GLOBAL                     7: EndOfBlock
                        224     RAISE_VARARGS                   1
                        226     LOAD_CONST                      0: None
                        228     RETURN_VALUE                    
                        230     LOAD_FAST                       1: type
                        232     LOAD_GLOBAL                     4: tokenize
                        234     LOAD_ATTR                       12: COMMENT
                        236     COMPARE_OP                      2 (==)
                        238     POP_JUMP_IF_FALSE               143 (to 286)
                        240     LOAD_FAST                       0: self
                        242     LOAD_ATTR                       9: body_col0
                        244     LOAD_CONST                      0: None
                        246     IS_OP                           1 (is not)
                        248     POP_JUMP_IF_FALSE               139 (to 278)
                        250     LOAD_FAST                       3: srowcol
                        252     LOAD_CONST                      7: 1
                        254     BINARY_SUBSCR                   
                        256     LOAD_FAST                       0: self
                        258     LOAD_ATTR                       9: body_col0
                        260     COMPARE_OP                      5 (>=)
                        262     POP_JUMP_IF_FALSE               141 (to 282)
                        264     LOAD_FAST                       3: srowcol
                        266     LOAD_CONST                      6: 0
                        268     BINARY_SUBSCR                   
                        270     LOAD_FAST                       0: self
                        272     STORE_ATTR                      6: last
                        274     LOAD_CONST                      0: None
                        276     RETURN_VALUE                    
                        278     LOAD_CONST                      0: None
                        280     RETURN_VALUE                    
                        282     LOAD_CONST                      0: None
                        284     RETURN_VALUE                    
                        286     LOAD_FAST                       0: self
                        288     LOAD_ATTR                       10: indent
                        290     LOAD_CONST                      6: 0
                        292     COMPARE_OP                      2 (==)
                        294     POP_JUMP_IF_FALSE               158 (to 316)
                        296     LOAD_FAST                       1: type
                        298     LOAD_GLOBAL                     4: tokenize
                        300     LOAD_ATTR                       12: COMMENT
                        302     LOAD_GLOBAL                     4: tokenize
                        304     LOAD_ATTR                       13: NL
                        306     BUILD_TUPLE                     2
                        308     CONTAINS_OP                     1 (not in)
                        310     POP_JUMP_IF_FALSE               160 (to 320)
                        312     LOAD_GLOBAL                     7: EndOfBlock
                        314     RAISE_VARARGS                   1
                        316     LOAD_CONST                      0: None
                        318     RETURN_VALUE                    
                        320     LOAD_CONST                      0: None
                        322     RETURN_VALUE                    
                'BlockFinder.tokeneater'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'BlockFinder'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Provide a tokeneater() method to detect the end of a code block.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'BlockFinder.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> tokeneater
                22      LOAD_CONST                      5: 'BlockFinder.tokeneater'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: tokeneater
                28      LOAD_CONST                      6: None
                30      RETURN_VALUE                    
        'BlockFinder'
        [Code]
            File Name: inspect.py
            Object Name: getblock
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'BlockFinder'
                'tokenize'
                'generate_tokens'
                'iter'
                '__next__'
                'tokeneater'
                'EndOfBlock'
                'IndentationError'
                'last'
            [Var Names]
                'lines'
                'blockfinder'
                'tokens'
                '_token'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Extract the block of code at the top of the given list of lines.'
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: BlockFinder
                2       CALL_FUNCTION                   0
                4       STORE_FAST                      1: blockfinder
                6       SETUP_FINALLY                   20 (to 48)
                8       LOAD_GLOBAL                     1: tokenize
                10      LOAD_METHOD                     2: generate_tokens
                12      LOAD_GLOBAL                     3: iter
                14      LOAD_FAST                       0: lines
                16      CALL_FUNCTION                   1
                18      LOAD_ATTR                       4: __next__
                20      CALL_METHOD                     1
                22      STORE_FAST                      2: tokens
                24      LOAD_FAST                       2: tokens
                26      GET_ITER                        
                28      FOR_ITER                        7 (to 44)
                30      STORE_FAST                      3: _token
                32      LOAD_FAST                       1: blockfinder
                34      LOAD_ATTR                       5: tokeneater
                36      LOAD_FAST                       3: _token
                38      CALL_FUNCTION_EX                0
                40      POP_TOP                         
                42      JUMP_ABSOLUTE                   14 (to 28)
                44      POP_BLOCK                       
                46      JUMP_FORWARD                    11 (to 70)
                48      DUP_TOP                         
                50      LOAD_GLOBAL                     6: EndOfBlock
                52      LOAD_GLOBAL                     7: IndentationError
                54      BUILD_TUPLE                     2
                56      JUMP_IF_NOT_EXC_MATCH           34 (to 68)
                58      POP_TOP                         
                60      POP_TOP                         
                62      POP_TOP                         
                64      POP_EXCEPT                      
                66      JUMP_FORWARD                    1 (to 70)
                68      RERAISE                         0
                70      LOAD_FAST                       0: lines
                72      LOAD_CONST                      1: None
                74      LOAD_FAST                       1: blockfinder
                76      LOAD_ATTR                       8: last
                78      BUILD_SLICE                     2
                80      BINARY_SUBSCR                   
                82      RETURN_VALUE                    
        'getblock'
        [Code]
            File Name: inspect.py
            Object Name: getsourcelines
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'unwrap'
                'findsource'
                'istraceback'
                'tb_frame'
                'ismodule'
                'isframe'
                'f_code'
                'co_name'
                'getblock'
            [Var Names]
                'object'
                'lines'
                'lnum'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return a list of source lines and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of the lines\n    corresponding to the object and the line number indicates where in the\n    original source file the first line of code was found.  An OSError is\n    raised if the source code cannot be retrieved.'
                '<module>'
                0
                None
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: unwrap
                2       LOAD_FAST                       0: object
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      0: object
                8       LOAD_GLOBAL                     1: findsource
                10      LOAD_FAST                       0: object
                12      CALL_FUNCTION                   1
                14      UNPACK_SEQUENCE                 2
                16      STORE_FAST                      1: lines
                18      STORE_FAST                      2: lnum
                20      LOAD_GLOBAL                     2: istraceback
                22      LOAD_FAST                       0: object
                24      CALL_FUNCTION                   1
                26      POP_JUMP_IF_FALSE               17 (to 34)
                28      LOAD_FAST                       0: object
                30      LOAD_ATTR                       3: tb_frame
                32      STORE_FAST                      0: object
                34      LOAD_GLOBAL                     4: ismodule
                36      LOAD_FAST                       0: object
                38      CALL_FUNCTION                   1
                40      POP_JUMP_IF_TRUE                31 (to 62)
                42      LOAD_GLOBAL                     5: isframe
                44      LOAD_FAST                       0: object
                46      CALL_FUNCTION                   1
                48      POP_JUMP_IF_FALSE               35 (to 70)
                50      LOAD_FAST                       0: object
                52      LOAD_ATTR                       6: f_code
                54      LOAD_ATTR                       7: co_name
                56      LOAD_CONST                      1: '<module>'
                58      COMPARE_OP                      2 (==)
                60      POP_JUMP_IF_FALSE               35 (to 70)
                62      LOAD_FAST                       1: lines
                64      LOAD_CONST                      2: 0
                66      BUILD_TUPLE                     2
                68      RETURN_VALUE                    
                70      LOAD_GLOBAL                     8: getblock
                72      LOAD_FAST                       1: lines
                74      LOAD_FAST                       2: lnum
                76      LOAD_CONST                      3: None
                78      BUILD_SLICE                     2
                80      BINARY_SUBSCR                   
                82      CALL_FUNCTION                   1
                84      LOAD_FAST                       2: lnum
                86      LOAD_CONST                      4: 1
                88      BINARY_ADD                      
                90      BUILD_TUPLE                     2
                92      RETURN_VALUE                    
        'getsourcelines'
        [Code]
            File Name: inspect.py
            Object Name: getsource
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getsourcelines'
                'join'
            [Var Names]
                'object'
                'lines'
                'lnum'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the text of the source code for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a single string.  An\n    OSError is raised if the source code cannot be retrieved.'
                ''
            [Disassembly]
                0       LOAD_GLOBAL                     0: getsourcelines
                2       LOAD_FAST                       0: object
                4       CALL_FUNCTION                   1
                6       UNPACK_SEQUENCE                 2
                8       STORE_FAST                      1: lines
                10      STORE_FAST                      2: lnum
                12      LOAD_CONST                      1: ''
                14      LOAD_METHOD                     1: join
                16      LOAD_FAST                       1: lines
                18      CALL_METHOD                     1
                20      RETURN_VALUE                    
        'getsource'
        [Code]
            File Name: inspect.py
            Object Name: walktree
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'sort'
                'attrgetter'
                'append'
                '__bases__'
                'walktree'
            [Var Names]
                'classes'
                'children'
                'parent'
                'results'
                'c'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Recursive helper function for getclasstree().'
                '__module__'
                '__name__'
                (
                    'key'
                )
            [Disassembly]
                0       BUILD_LIST                      0
                2       STORE_FAST                      3: results
                4       LOAD_FAST                       0: classes
                6       LOAD_ATTR                       0: sort
                8       LOAD_GLOBAL                     1: attrgetter
                10      LOAD_CONST                      1: '__module__'
                12      LOAD_CONST                      2: '__name__'
                14      CALL_FUNCTION                   2
                16      LOAD_CONST                      3: ('key',)
                18      CALL_FUNCTION_KW                1
                20      POP_TOP                         
                22      LOAD_FAST                       0: classes
                24      GET_ITER                        
                26      FOR_ITER                        25 (to 78)
                28      STORE_FAST                      4: c
                30      LOAD_FAST                       3: results
                32      LOAD_METHOD                     2: append
                34      LOAD_FAST                       4: c
                36      LOAD_FAST                       4: c
                38      LOAD_ATTR                       3: __bases__
                40      BUILD_TUPLE                     2
                42      CALL_METHOD                     1
                44      POP_TOP                         
                46      LOAD_FAST                       4: c
                48      LOAD_FAST                       1: children
                50      CONTAINS_OP                     0 (in)
                52      POP_JUMP_IF_FALSE               38 (to 76)
                54      LOAD_FAST                       3: results
                56      LOAD_METHOD                     2: append
                58      LOAD_GLOBAL                     4: walktree
                60      LOAD_FAST                       1: children
                62      LOAD_FAST                       4: c
                64      BINARY_SUBSCR                   
                66      LOAD_FAST                       1: children
                68      LOAD_FAST                       4: c
                70      CALL_FUNCTION                   3
                72      CALL_METHOD                     1
                74      POP_TOP                         
                76      JUMP_ABSOLUTE                   13 (to 26)
                78      LOAD_FAST                       3: results
                80      RETURN_VALUE                    
        'walktree'
        [Code]
            File Name: inspect.py
            Object Name: getclasstree
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 6
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '__bases__'
                'append'
                'walktree'
            [Var Names]
                'classes'
                'unique'
                'children'
                'roots'
                'c'
                'parent'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Arrange the given list of classes into a hierarchy of nested lists.\n\n    Where a nested list appears, it contains classes derived from the class\n    whose entry immediately precedes the list.  Each entry is a 2-tuple\n    containing a class and a tuple of its base classes.  If the 'unique'\n    argument is true, exactly one entry appears in the returned structure\n    for each class in the given list.  Otherwise, classes using multiple\n    inheritance and their descendants will appear multiple times."
                None
            [Disassembly]
                0       BUILD_MAP                       0
                2       STORE_FAST                      2: children
                4       BUILD_LIST                      0
                6       STORE_FAST                      3: roots
                8       LOAD_FAST                       0: classes
                10      GET_ITER                        
                12      FOR_ITER                        50 (to 114)
                14      STORE_FAST                      4: c
                16      LOAD_FAST                       4: c
                18      LOAD_ATTR                       0: __bases__
                20      POP_JUMP_IF_FALSE               47 (to 94)
                22      LOAD_FAST                       4: c
                24      LOAD_ATTR                       0: __bases__
                26      GET_ITER                        
                28      FOR_ITER                        31 (to 92)
                30      STORE_FAST                      5: parent
                32      LOAD_FAST                       5: parent
                34      LOAD_FAST                       2: children
                36      CONTAINS_OP                     1 (not in)
                38      POP_JUMP_IF_FALSE               24 (to 48)
                40      BUILD_LIST                      0
                42      LOAD_FAST                       2: children
                44      LOAD_FAST                       5: parent
                46      STORE_SUBSCR                    
                48      LOAD_FAST                       4: c
                50      LOAD_FAST                       2: children
                52      LOAD_FAST                       5: parent
                54      BINARY_SUBSCR                   
                56      CONTAINS_OP                     1 (not in)
                58      POP_JUMP_IF_FALSE               37 (to 74)
                60      LOAD_FAST                       2: children
                62      LOAD_FAST                       5: parent
                64      BINARY_SUBSCR                   
                66      LOAD_METHOD                     1: append
                68      LOAD_FAST                       4: c
                70      CALL_METHOD                     1
                72      POP_TOP                         
                74      LOAD_FAST                       1: unique
                76      POP_JUMP_IF_FALSE               45 (to 90)
                78      LOAD_FAST                       5: parent
                80      LOAD_FAST                       0: classes
                82      CONTAINS_OP                     0 (in)
                84      POP_JUMP_IF_FALSE               45 (to 90)
                86      POP_TOP                         
                88      JUMP_FORWARD                    1 (to 92)
                90      JUMP_ABSOLUTE                   14 (to 28)
                92      JUMP_ABSOLUTE                   6 (to 12)
                94      LOAD_FAST                       4: c
                96      LOAD_FAST                       3: roots
                98      CONTAINS_OP                     1 (not in)
                100     POP_JUMP_IF_FALSE               56 (to 112)
                102     LOAD_FAST                       3: roots
                104     LOAD_METHOD                     1: append
                106     LOAD_FAST                       4: c
                108     CALL_METHOD                     1
                110     POP_TOP                         
                112     JUMP_ABSOLUTE                   6 (to 12)
                114     LOAD_FAST                       2: children
                116     GET_ITER                        
                118     FOR_ITER                        11 (to 142)
                120     STORE_FAST                      5: parent
                122     LOAD_FAST                       5: parent
                124     LOAD_FAST                       0: classes
                126     CONTAINS_OP                     1 (not in)
                128     POP_JUMP_IF_FALSE               70 (to 140)
                130     LOAD_FAST                       3: roots
                132     LOAD_METHOD                     1: append
                134     LOAD_FAST                       5: parent
                136     CALL_METHOD                     1
                138     POP_TOP                         
                140     JUMP_ABSOLUTE                   59 (to 118)
                142     LOAD_GLOBAL                     2: walktree
                144     LOAD_FAST                       3: roots
                146     LOAD_FAST                       2: children
                148     LOAD_CONST                      1: None
                150     CALL_FUNCTION                   3
                152     RETURN_VALUE                    
        'getclasstree'
        'Arguments'
        'args, varargs, varkw'
        [Code]
            File Name: inspect.py
            Object Name: getargs
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 9
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'iscode'
                'TypeError'
                'format'
                'co_varnames'
                'co_argcount'
                'co_kwonlyargcount'
                'list'
                'co_flags'
                'CO_VARARGS'
                'CO_VARKEYWORDS'
                'Arguments'
            [Var Names]
                'co'
                'names'
                'nargs'
                'nkwargs'
                'args'
                'kwonlyargs'
                'step'
                'varargs'
                'varkw'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Get information about the arguments accepted by a code object.\n\n    Three things are returned: (args, varargs, varkw), where\n    'args' is the list of argument names. Keyword-only arguments are\n    appended. 'varargs' and 'varkw' are the names of the * and **\n    arguments or None."
                '{!r} is not a code object'
                None
                0
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: iscode
                2       LOAD_FAST                       0: co
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_TRUE                11 (to 22)
                8       LOAD_GLOBAL                     1: TypeError
                10      LOAD_CONST                      1: '{!r} is not a code object'
                12      LOAD_METHOD                     2: format
                14      LOAD_FAST                       0: co
                16      CALL_METHOD                     1
                18      CALL_FUNCTION                   1
                20      RAISE_VARARGS                   1
                22      LOAD_FAST                       0: co
                24      LOAD_ATTR                       3: co_varnames
                26      STORE_FAST                      1: names
                28      LOAD_FAST                       0: co
                30      LOAD_ATTR                       4: co_argcount
                32      STORE_FAST                      2: nargs
                34      LOAD_FAST                       0: co
                36      LOAD_ATTR                       5: co_kwonlyargcount
                38      STORE_FAST                      3: nkwargs
                40      LOAD_GLOBAL                     6: list
                42      LOAD_FAST                       1: names
                44      LOAD_CONST                      2: None
                46      LOAD_FAST                       2: nargs
                48      BUILD_SLICE                     2
                50      BINARY_SUBSCR                   
                52      CALL_FUNCTION                   1
                54      STORE_FAST                      4: args
                56      LOAD_GLOBAL                     6: list
                58      LOAD_FAST                       1: names
                60      LOAD_FAST                       2: nargs
                62      LOAD_FAST                       2: nargs
                64      LOAD_FAST                       3: nkwargs
                66      BINARY_ADD                      
                68      BUILD_SLICE                     2
                70      BINARY_SUBSCR                   
                72      CALL_FUNCTION                   1
                74      STORE_FAST                      5: kwonlyargs
                76      LOAD_CONST                      3: 0
                78      STORE_FAST                      6: step
                80      LOAD_FAST                       2: nargs
                82      LOAD_FAST                       3: nkwargs
                84      INPLACE_ADD                     
                86      STORE_FAST                      2: nargs
                88      LOAD_CONST                      2: None
                90      STORE_FAST                      7: varargs
                92      LOAD_FAST                       0: co
                94      LOAD_ATTR                       7: co_flags
                96      LOAD_GLOBAL                     8: CO_VARARGS
                98      BINARY_AND                      
                100     POP_JUMP_IF_FALSE               60 (to 120)
                102     LOAD_FAST                       0: co
                104     LOAD_ATTR                       3: co_varnames
                106     LOAD_FAST                       2: nargs
                108     BINARY_SUBSCR                   
                110     STORE_FAST                      7: varargs
                112     LOAD_FAST                       2: nargs
                114     LOAD_CONST                      4: 1
                116     BINARY_ADD                      
                118     STORE_FAST                      2: nargs
                120     LOAD_CONST                      2: None
                122     STORE_FAST                      8: varkw
                124     LOAD_FAST                       0: co
                126     LOAD_ATTR                       7: co_flags
                128     LOAD_GLOBAL                     9: CO_VARKEYWORDS
                130     BINARY_AND                      
                132     POP_JUMP_IF_FALSE               72 (to 144)
                134     LOAD_FAST                       0: co
                136     LOAD_ATTR                       3: co_varnames
                138     LOAD_FAST                       2: nargs
                140     BINARY_SUBSCR                   
                142     STORE_FAST                      8: varkw
                144     LOAD_GLOBAL                     10: Arguments
                146     LOAD_FAST                       4: args
                148     LOAD_FAST                       5: kwonlyargs
                150     BINARY_ADD                      
                152     LOAD_FAST                       7: varargs
                154     LOAD_FAST                       8: varkw
                156     CALL_FUNCTION                   3
                158     RETURN_VALUE                    
        'getargs'
        'ArgSpec'
        'args varargs keywords defaults'
        [Code]
            File Name: inspect.py
            Object Name: getargspec
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                'getfullargspec'
                'ValueError'
                'ArgSpec'
            [Var Names]
                'func'
                'args'
                'varargs'
                'varkw'
                'defaults'
                'kwonlyargs'
                'kwonlydefaults'
                'ann'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Get the names and default values of a function's parameters.\n\n    A tuple of four things is returned: (args, varargs, keywords, defaults).\n    'args' is a list of the argument names, including keyword-only argument names.\n    'varargs' and 'keywords' are the names of the * and ** parameters or None.\n    'defaults' is an n-tuple of the default values of the last n parameters.\n\n    This function is deprecated, as it does not support annotations or\n    keyword-only parameters and will raise ValueError if either is present\n    on the supplied callable.\n\n    For a more structured introspection API, use inspect.signature() instead.\n\n    Alternatively, use getfullargspec() for an API with a similar namedtuple\n    based interface, but full support for annotations and keyword-only\n    parameters.\n\n    Deprecated since Python 3.5, use `inspect.getfullargspec()`.\n    "
                'inspect.getargspec() is deprecated since Python 3.0, use inspect.signature() or inspect.getfullargspec()'
                2
                (
                    'stacklevel'
                )
                'Function has keyword-only parameters or annotations, use inspect.signature() API which can support them'
            [Disassembly]
                0       LOAD_GLOBAL                     0: warnings
                2       LOAD_ATTR                       1: warn
                4       LOAD_CONST                      1: 'inspect.getargspec() is deprecated since Python 3.0, use inspect.signature() or inspect.getfullargspec()'
                6       LOAD_GLOBAL                     2: DeprecationWarning
                8       LOAD_CONST                      2: 2
                10      LOAD_CONST                      3: ('stacklevel',)
                12      CALL_FUNCTION_KW                3
                14      POP_TOP                         
                16      LOAD_GLOBAL                     3: getfullargspec
                18      LOAD_FAST                       0: func
                20      CALL_FUNCTION                   1
                22      UNPACK_SEQUENCE                 7
                24      STORE_FAST                      1: args
                26      STORE_FAST                      2: varargs
                28      STORE_FAST                      3: varkw
                30      STORE_FAST                      4: defaults
                32      STORE_FAST                      5: kwonlyargs
                34      STORE_FAST                      6: kwonlydefaults
                36      STORE_FAST                      7: ann
                38      LOAD_FAST                       5: kwonlyargs
                40      POP_JUMP_IF_TRUE                23 (to 46)
                42      LOAD_FAST                       7: ann
                44      POP_JUMP_IF_FALSE               27 (to 54)
                46      LOAD_GLOBAL                     4: ValueError
                48      LOAD_CONST                      4: 'Function has keyword-only parameters or annotations, use inspect.signature() API which can support them'
                50      CALL_FUNCTION                   1
                52      RAISE_VARARGS                   1
                54      LOAD_GLOBAL                     5: ArgSpec
                56      LOAD_FAST                       1: args
                58      LOAD_FAST                       2: varargs
                60      LOAD_FAST                       3: varkw
                62      LOAD_FAST                       4: defaults
                64      CALL_FUNCTION                   4
                66      RETURN_VALUE                    
        'getargspec'
        'FullArgSpec'
        'args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations'
        [Code]
            File Name: inspect.py
            Object Name: getfullargspec
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 14
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_signature_from_callable'
                'Signature'
                'Exception'
                'TypeError'
                'return_annotation'
                'empty'
                'parameters'
                'values'
                'kind'
                'name'
                '_POSITIONAL_ONLY'
                'append'
                'default'
                '_POSITIONAL_OR_KEYWORD'
                '_VAR_POSITIONAL'
                '_KEYWORD_ONLY'
                '_VAR_KEYWORD'
                'annotation'
                'FullArgSpec'
            [Var Names]
                'func'
                'sig'
                'ex'
                'args'
                'varargs'
                'varkw'
                'posonlyargs'
                'kwonlyargs'
                'annotations'
                'defaults'
                'kwdefaults'
                'param'
                'kind'
                'name'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get the names and default values of a callable object\'s parameters.\n\n    A tuple of seven things is returned:\n    (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n    \'args\' is a list of the parameter names.\n    \'varargs\' and \'varkw\' are the names of the * and ** parameters or None.\n    \'defaults\' is an n-tuple of the default values of the last n parameters.\n    \'kwonlyargs\' is a list of keyword-only parameter names.\n    \'kwonlydefaults\' is a dictionary mapping names from kwonlyargs to defaults.\n    \'annotations\' is a dictionary mapping parameter names to annotations.\n\n    Notable differences from inspect.signature():\n      - the "self" parameter is always reported, even for bound methods\n      - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n    '
                False
                (
                    'follow_wrapper_chains'
                    'skip_bound_arg'
                    'sigcls'
                    'eval_str'
                )
                'unsupported callable'
                None
                (
                )
                'return'
            [Disassembly]
                0       SETUP_FINALLY                   11 (to 24)
                2       LOAD_GLOBAL                     0: _signature_from_callable
                4       LOAD_FAST                       0: func
                6       LOAD_CONST                      1: False
                8       LOAD_CONST                      1: False
                10      LOAD_GLOBAL                     1: Signature
                12      LOAD_CONST                      1: False
                14      LOAD_CONST                      2: ('follow_wrapper_chains', 'skip_bound_arg', 'sigcls', 'eval_str')
                16      CALL_FUNCTION_KW                5
                18      STORE_FAST                      1: sig
                20      POP_BLOCK                       
                22      JUMP_FORWARD                    17 (to 58)
                24      DUP_TOP                         
                26      LOAD_GLOBAL                     2: Exception
                28      JUMP_IF_NOT_EXC_MATCH           28 (to 56)
                30      POP_TOP                         
                32      STORE_FAST                      2: ex
                34      POP_TOP                         
                36      SETUP_FINALLY                   5 (to 48)
                38      LOAD_GLOBAL                     3: TypeError
                40      LOAD_CONST                      3: 'unsupported callable'
                42      CALL_FUNCTION                   1
                44      LOAD_FAST                       2: ex
                46      RAISE_VARARGS                   2
                48      LOAD_CONST                      4: None
                50      STORE_FAST                      2: ex
                52      DELETE_FAST                     2: ex
                54      RERAISE                         1
                56      RERAISE                         0
                58      BUILD_LIST                      0
                60      STORE_FAST                      3: args
                62      LOAD_CONST                      4: None
                64      STORE_FAST                      4: varargs
                66      LOAD_CONST                      4: None
                68      STORE_FAST                      5: varkw
                70      BUILD_LIST                      0
                72      STORE_FAST                      6: posonlyargs
                74      BUILD_LIST                      0
                76      STORE_FAST                      7: kwonlyargs
                78      BUILD_MAP                       0
                80      STORE_FAST                      8: annotations
                82      LOAD_CONST                      5: ()
                84      STORE_FAST                      9: defaults
                86      BUILD_MAP                       0
                88      STORE_FAST                      10: kwdefaults
                90      LOAD_FAST                       1: sig
                92      LOAD_ATTR                       4: return_annotation
                94      LOAD_FAST                       1: sig
                96      LOAD_ATTR                       5: empty
                98      IS_OP                           1 (is not)
                100     POP_JUMP_IF_FALSE               56 (to 112)
                102     LOAD_FAST                       1: sig
                104     LOAD_ATTR                       4: return_annotation
                106     LOAD_FAST                       8: annotations
                108     LOAD_CONST                      6: 'return'
                110     STORE_SUBSCR                    
                112     LOAD_FAST                       1: sig
                114     LOAD_ATTR                       6: parameters
                116     LOAD_METHOD                     7: values
                118     CALL_METHOD                     0
                120     GET_ITER                        
                122     FOR_ITER                        97 (to 318)
                124     STORE_FAST                      11: param
                126     LOAD_FAST                       11: param
                128     LOAD_ATTR                       8: kind
                130     STORE_FAST                      12: kind
                132     LOAD_FAST                       11: param
                134     LOAD_ATTR                       9: name
                136     STORE_FAST                      13: name
                138     LOAD_FAST                       12: kind
                140     LOAD_GLOBAL                     10: _POSITIONAL_ONLY
                142     IS_OP                           0 (is)
                144     POP_JUMP_IF_FALSE               91 (to 182)
                146     LOAD_FAST                       6: posonlyargs
                148     LOAD_METHOD                     11: append
                150     LOAD_FAST                       13: name
                152     CALL_METHOD                     1
                154     POP_TOP                         
                156     LOAD_FAST                       11: param
                158     LOAD_ATTR                       12: default
                160     LOAD_FAST                       11: param
                162     LOAD_ATTR                       5: empty
                164     IS_OP                           1 (is not)
                166     POP_JUMP_IF_FALSE               90 (to 180)
                168     LOAD_FAST                       9: defaults
                170     LOAD_FAST                       11: param
                172     LOAD_ATTR                       12: default
                174     BUILD_TUPLE                     1
                176     INPLACE_ADD                     
                178     STORE_FAST                      9: defaults
                180     JUMP_FORWARD                    56 (to 294)
                182     LOAD_FAST                       12: kind
                184     LOAD_GLOBAL                     13: _POSITIONAL_OR_KEYWORD
                186     IS_OP                           0 (is)
                188     POP_JUMP_IF_FALSE               113 (to 226)
                190     LOAD_FAST                       3: args
                192     LOAD_METHOD                     11: append
                194     LOAD_FAST                       13: name
                196     CALL_METHOD                     1
                198     POP_TOP                         
                200     LOAD_FAST                       11: param
                202     LOAD_ATTR                       12: default
                204     LOAD_FAST                       11: param
                206     LOAD_ATTR                       5: empty
                208     IS_OP                           1 (is not)
                210     POP_JUMP_IF_FALSE               112 (to 224)
                212     LOAD_FAST                       9: defaults
                214     LOAD_FAST                       11: param
                216     LOAD_ATTR                       12: default
                218     BUILD_TUPLE                     1
                220     INPLACE_ADD                     
                222     STORE_FAST                      9: defaults
                224     JUMP_FORWARD                    34 (to 294)
                226     LOAD_FAST                       12: kind
                228     LOAD_GLOBAL                     14: _VAR_POSITIONAL
                230     IS_OP                           0 (is)
                232     POP_JUMP_IF_FALSE               120 (to 240)
                234     LOAD_FAST                       13: name
                236     STORE_FAST                      4: varargs
                238     JUMP_FORWARD                    27 (to 294)
                240     LOAD_FAST                       12: kind
                242     LOAD_GLOBAL                     15: _KEYWORD_ONLY
                244     IS_OP                           0 (is)
                246     POP_JUMP_IF_FALSE               141 (to 282)
                248     LOAD_FAST                       7: kwonlyargs
                250     LOAD_METHOD                     11: append
                252     LOAD_FAST                       13: name
                254     CALL_METHOD                     1
                256     POP_TOP                         
                258     LOAD_FAST                       11: param
                260     LOAD_ATTR                       12: default
                262     LOAD_FAST                       11: param
                264     LOAD_ATTR                       5: empty
                266     IS_OP                           1 (is not)
                268     POP_JUMP_IF_FALSE               140 (to 280)
                270     LOAD_FAST                       11: param
                272     LOAD_ATTR                       12: default
                274     LOAD_FAST                       10: kwdefaults
                276     LOAD_FAST                       13: name
                278     STORE_SUBSCR                    
                280     JUMP_FORWARD                    6 (to 294)
                282     LOAD_FAST                       12: kind
                284     LOAD_GLOBAL                     16: _VAR_KEYWORD
                286     IS_OP                           0 (is)
                288     POP_JUMP_IF_FALSE               147 (to 294)
                290     LOAD_FAST                       13: name
                292     STORE_FAST                      5: varkw
                294     LOAD_FAST                       11: param
                296     LOAD_ATTR                       17: annotation
                298     LOAD_FAST                       11: param
                300     LOAD_ATTR                       5: empty
                302     IS_OP                           1 (is not)
                304     POP_JUMP_IF_FALSE               158 (to 316)
                306     LOAD_FAST                       11: param
                308     LOAD_ATTR                       17: annotation
                310     LOAD_FAST                       8: annotations
                312     LOAD_FAST                       13: name
                314     STORE_SUBSCR                    
                316     JUMP_ABSOLUTE                   61 (to 122)
                318     LOAD_FAST                       10: kwdefaults
                320     POP_JUMP_IF_TRUE                163 (to 326)
                322     LOAD_CONST                      4: None
                324     STORE_FAST                      10: kwdefaults
                326     LOAD_FAST                       9: defaults
                328     POP_JUMP_IF_TRUE                167 (to 334)
                330     LOAD_CONST                      4: None
                332     STORE_FAST                      9: defaults
                334     LOAD_GLOBAL                     18: FullArgSpec
                336     LOAD_FAST                       6: posonlyargs
                338     LOAD_FAST                       3: args
                340     BINARY_ADD                      
                342     LOAD_FAST                       4: varargs
                344     LOAD_FAST                       5: varkw
                346     LOAD_FAST                       9: defaults
                348     LOAD_FAST                       7: kwonlyargs
                350     LOAD_FAST                       10: kwdefaults
                352     LOAD_FAST                       8: annotations
                354     CALL_FUNCTION                   7
                356     RETURN_VALUE                    
        'getfullargspec'
        'ArgInfo'
        'args varargs keywords locals'
        [Code]
            File Name: inspect.py
            Object Name: getargvalues
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getargs'
                'f_code'
                'ArgInfo'
                'f_locals'
            [Var Names]
                'frame'
                'args'
                'varargs'
                'varkw'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Get information about arguments passed into a particular frame.\n\n    A tuple of four things is returned: (args, varargs, varkw, locals).\n    'args' is a list of the argument names.\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'locals' is the locals dictionary of the given frame."
            [Disassembly]
                0       LOAD_GLOBAL                     0: getargs
                2       LOAD_FAST                       0: frame
                4       LOAD_ATTR                       1: f_code
                6       CALL_FUNCTION                   1
                8       UNPACK_SEQUENCE                 3
                10      STORE_FAST                      1: args
                12      STORE_FAST                      2: varargs
                14      STORE_FAST                      3: varkw
                16      LOAD_GLOBAL                     2: ArgInfo
                18      LOAD_FAST                       1: args
                20      LOAD_FAST                       2: varargs
                22      LOAD_FAST                       3: varkw
                24      LOAD_FAST                       0: frame
                26      LOAD_ATTR                       3: f_locals
                28      CALL_FUNCTION                   4
                30      RETURN_VALUE                    
        'getargvalues'
        [Code]
            File Name: inspect.py
            Object Name: formatannotation
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getattr'
                're'
                'sub'
                'repr'
                'isinstance'
                'types'
                'GenericAlias'
                'str'
                'type'
                '__module__'
                '__qualname__'
            [Var Names]
                'annotation'
                'base_module'
                'repl'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '__module__'
                'typing'
                [Code]
                    File Name: inspect.py
                    Object Name: repl
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        'group'
                        'removeprefix'
                    [Var Names]
                        'match'
                        'text'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'typing.'
                    [Disassembly]
                        0       LOAD_FAST                       0: match
                        2       LOAD_METHOD                     0: group
                        4       CALL_METHOD                     0
                        6       STORE_FAST                      1: text
                        8       LOAD_FAST                       1: text
                        10      LOAD_METHOD                     1: removeprefix
                        12      LOAD_CONST                      1: 'typing.'
                        14      CALL_METHOD                     1
                        16      RETURN_VALUE                    
                'formatannotation.<locals>.repl'
                '[\\w\\.]+'
                'builtins'
                '.'
            [Disassembly]
                0       LOAD_GLOBAL                     0: getattr
                2       LOAD_FAST                       0: annotation
                4       LOAD_CONST                      1: '__module__'
                6       LOAD_CONST                      0: None
                8       CALL_FUNCTION                   3
                10      LOAD_CONST                      2: 'typing'
                12      COMPARE_OP                      2 (==)
                14      POP_JUMP_IF_FALSE               21 (to 42)
                16      LOAD_CONST                      3: <CODE> repl
                18      LOAD_CONST                      4: 'formatannotation.<locals>.repl'
                20      MAKE_FUNCTION                   0
                22      STORE_FAST                      2: repl
                24      LOAD_GLOBAL                     1: re
                26      LOAD_METHOD                     2: sub
                28      LOAD_CONST                      5: '[\\w\\.]+'
                30      LOAD_FAST                       2: repl
                32      LOAD_GLOBAL                     3: repr
                34      LOAD_FAST                       0: annotation
                36      CALL_FUNCTION                   1
                38      CALL_METHOD                     3
                40      RETURN_VALUE                    
                42      LOAD_GLOBAL                     4: isinstance
                44      LOAD_FAST                       0: annotation
                46      LOAD_GLOBAL                     5: types
                48      LOAD_ATTR                       6: GenericAlias
                50      CALL_FUNCTION                   2
                52      POP_JUMP_IF_FALSE               31 (to 62)
                54      LOAD_GLOBAL                     7: str
                56      LOAD_FAST                       0: annotation
                58      CALL_FUNCTION                   1
                60      RETURN_VALUE                    
                62      LOAD_GLOBAL                     4: isinstance
                64      LOAD_FAST                       0: annotation
                66      LOAD_GLOBAL                     8: type
                68      CALL_FUNCTION                   2
                70      POP_JUMP_IF_FALSE               54 (to 108)
                72      LOAD_FAST                       0: annotation
                74      LOAD_ATTR                       9: __module__
                76      LOAD_CONST                      6: 'builtins'
                78      LOAD_FAST                       1: base_module
                80      BUILD_TUPLE                     2
                82      CONTAINS_OP                     0 (in)
                84      POP_JUMP_IF_FALSE               46 (to 92)
                86      LOAD_FAST                       0: annotation
                88      LOAD_ATTR                       10: __qualname__
                90      RETURN_VALUE                    
                92      LOAD_FAST                       0: annotation
                94      LOAD_ATTR                       9: __module__
                96      LOAD_CONST                      7: '.'
                98      BINARY_ADD                      
                100     LOAD_FAST                       0: annotation
                102     LOAD_ATTR                       10: __qualname__
                104     BINARY_ADD                      
                106     RETURN_VALUE                    
                108     LOAD_GLOBAL                     3: repr
                110     LOAD_FAST                       0: annotation
                112     CALL_FUNCTION                   1
                114     RETURN_VALUE                    
        'formatannotation'
        [Code]
            File Name: inspect.py
            Object Name: formatannotationrelativeto
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'getattr'
            [Var Names]
                'object'
                '_formatannotation'
            [Free Vars]
            [Cell Vars]
                'module'
            [Constants]
                None
                '__module__'
                [Code]
                    File Name: inspect.py
                    Object Name: _formatannotation
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'formatannotation'
                    [Var Names]
                        'annotation'
                    [Free Vars]
                        'module'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: formatannotation
                        2       LOAD_FAST                       0: annotation
                        4       LOAD_DEREF                      0: module
                        6       CALL_FUNCTION                   2
                        8       RETURN_VALUE                    
                'formatannotationrelativeto.<locals>._formatannotation'
            [Disassembly]
                0       LOAD_GLOBAL                     0: getattr
                2       LOAD_FAST                       0: object
                4       LOAD_CONST                      1: '__module__'
                6       LOAD_CONST                      0: None
                8       CALL_FUNCTION                   3
                10      STORE_DEREF                     0: module
                12      LOAD_CLOSURE                    0: module
                14      BUILD_TUPLE                     1
                16      LOAD_CONST                      2: <CODE> _formatannotation
                18      LOAD_CONST                      3: 'formatannotationrelativeto.<locals>._formatannotation'
                20      MAKE_FUNCTION                   8
                22      STORE_FAST                      1: _formatannotation
                24      LOAD_FAST                       1: _formatannotation
                26      RETURN_VALUE                    
        'formatannotationrelativeto'
        (
        )
        [Code]
            File Name: inspect.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'name'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '*'
            [Disassembly]
                0       LOAD_CONST                      1: '*'
                2       LOAD_FAST                       0: name
                4       BINARY_ADD                      
                6       RETURN_VALUE                    
        '<lambda>'
        [Code]
            File Name: inspect.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'name'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '**'
            [Disassembly]
                0       LOAD_CONST                      1: '**'
                2       LOAD_FAST                       0: name
                4       BINARY_ADD                      
                6       RETURN_VALUE                    
        [Code]
            File Name: inspect.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'repr'
            [Var Names]
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '='
            [Disassembly]
                0       LOAD_CONST                      1: '='
                2       LOAD_GLOBAL                     0: repr
                4       LOAD_FAST                       0: value
                6       CALL_FUNCTION                   1
                8       BINARY_ADD                      
                10      RETURN_VALUE                    
        [Code]
            File Name: inspect.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'text'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                ' -> '
            [Disassembly]
                0       LOAD_CONST                      1: ' -> '
                2       LOAD_FAST                       0: text
                4       BINARY_ADD                      
                6       RETURN_VALUE                    
        [Code]
            File Name: inspect.py
            Object Name: formatargspec
            Arg Count: 13
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 22
            Stack Size: 6
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'warnings'
                'warn'
                'DeprecationWarning'
                'len'
                'enumerate'
                'append'
                'join'
            [Var Names]
                'args'
                'varargs'
                'varkw'
                'defaults'
                'kwonlyargs'
                'kwonlydefaults'
                'annotations'
                'formatarg'
                'formatvarargs'
                'formatvarkw'
                'formatvalue'
                'formatreturns'
                'formatannotation'
                'warn'
                'formatargandannotation'
                'specs'
                'firstdefault'
                'i'
                'arg'
                'spec'
                'kwonlyarg'
                'result'
            [Free Vars]
            [Cell Vars]
                'annotations'
                'formatannotation'
                'formatarg'
            [Constants]
                'Format an argument spec from the values returned by getfullargspec.\n\n    The first seven arguments are (args, varargs, varkw, defaults,\n    kwonlyargs, kwonlydefaults, annotations).  The other five arguments\n    are the corresponding optional formatting functions that are called to\n    turn names and values into strings.  The last argument is an optional\n    function to format the sequence of arguments.\n\n    Deprecated since Python 3.5: use the `signature` function and `Signature`\n    objects.\n    '
                0
                (
                    'warn'
                )
                '`formatargspec` is deprecated since Python 3.5. Use `signature` and the `Signature` object directly'
                2
                (
                    'stacklevel'
                )
                [Code]
                    File Name: inspect.py
                    Object Name: formatargandannotation
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                    [Var Names]
                        'arg'
                        'result'
                    [Free Vars]
                        'annotations'
                        'formatannotation'
                        'formatarg'
                    [Cell Vars]
                    [Constants]
                        None
                        ': '
                    [Disassembly]
                        0       LOAD_DEREF                      2: formatarg
                        2       LOAD_FAST                       0: arg
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      1: result
                        8       LOAD_FAST                       0: arg
                        10      LOAD_DEREF                      0: annotations
                        12      CONTAINS_OP                     0 (in)
                        14      POP_JUMP_IF_FALSE               18 (to 36)
                        16      LOAD_FAST                       1: result
                        18      LOAD_CONST                      1: ': '
                        20      LOAD_DEREF                      1: formatannotation
                        22      LOAD_DEREF                      0: annotations
                        24      LOAD_FAST                       0: arg
                        26      BINARY_SUBSCR                   
                        28      CALL_FUNCTION                   1
                        30      BINARY_ADD                      
                        32      INPLACE_ADD                     
                        34      STORE_FAST                      1: result
                        36      LOAD_FAST                       1: result
                        38      RETURN_VALUE                    
                'formatargspec.<locals>.formatargandannotation'
                None
                '*'
                '('
                ', '
                ')'
                'return'
            [Disassembly]
                0       LOAD_CONST                      1: 0
                2       LOAD_CONST                      2: ('warn',)
                4       IMPORT_NAME                     0: warnings
                6       IMPORT_FROM                     1: warn
                8       STORE_FAST                      13: warn
                10      POP_TOP                         
                12      LOAD_FAST                       13: warn
                14      LOAD_CONST                      3: '`formatargspec` is deprecated since Python 3.5. Use `signature` and the `Signature` object directly'
                16      LOAD_GLOBAL                     2: DeprecationWarning
                18      LOAD_CONST                      4: 2
                20      LOAD_CONST                      5: ('stacklevel',)
                22      CALL_FUNCTION_KW                3
                24      POP_TOP                         
                26      LOAD_CLOSURE                    0: annotations
                28      LOAD_CLOSURE                    1: formatannotation
                30      LOAD_CLOSURE                    2: formatarg
                32      BUILD_TUPLE                     3
                34      LOAD_CONST                      6: <CODE> formatargandannotation
                36      LOAD_CONST                      7: 'formatargspec.<locals>.formatargandannotation'
                38      MAKE_FUNCTION                   8
                40      STORE_FAST                      14: formatargandannotation
                42      BUILD_LIST                      0
                44      STORE_FAST                      15: specs
                46      LOAD_FAST                       3: defaults
                48      POP_JUMP_IF_FALSE               33 (to 66)
                50      LOAD_GLOBAL                     3: len
                52      LOAD_FAST                       0: args
                54      CALL_FUNCTION                   1
                56      LOAD_GLOBAL                     3: len
                58      LOAD_FAST                       3: defaults
                60      CALL_FUNCTION                   1
                62      BINARY_SUBTRACT                 
                64      STORE_FAST                      16: firstdefault
                66      LOAD_GLOBAL                     4: enumerate
                68      LOAD_FAST                       0: args
                70      CALL_FUNCTION                   1
                72      GET_ITER                        
                74      FOR_ITER                        29 (to 134)
                76      UNPACK_SEQUENCE                 2
                78      STORE_FAST                      17: i
                80      STORE_FAST                      18: arg
                82      LOAD_FAST                       14: formatargandannotation
                84      LOAD_FAST                       18: arg
                86      CALL_FUNCTION                   1
                88      STORE_FAST                      19: spec
                90      LOAD_FAST                       3: defaults
                92      POP_JUMP_IF_FALSE               61 (to 122)
                94      LOAD_FAST                       17: i
                96      LOAD_FAST                       16: firstdefault
                98      COMPARE_OP                      5 (>=)
                100     POP_JUMP_IF_FALSE               61 (to 122)
                102     LOAD_FAST                       19: spec
                104     LOAD_FAST                       10: formatvalue
                106     LOAD_FAST                       3: defaults
                108     LOAD_FAST                       17: i
                110     LOAD_FAST                       16: firstdefault
                112     BINARY_SUBTRACT                 
                114     BINARY_SUBSCR                   
                116     CALL_FUNCTION                   1
                118     BINARY_ADD                      
                120     STORE_FAST                      19: spec
                122     LOAD_FAST                       15: specs
                124     LOAD_METHOD                     5: append
                126     LOAD_FAST                       19: spec
                128     CALL_METHOD                     1
                130     POP_TOP                         
                132     JUMP_ABSOLUTE                   37 (to 74)
                134     LOAD_FAST                       1: varargs
                136     LOAD_CONST                      8: None
                138     IS_OP                           1 (is not)
                140     POP_JUMP_IF_FALSE               81 (to 162)
                142     LOAD_FAST                       15: specs
                144     LOAD_METHOD                     5: append
                146     LOAD_FAST                       8: formatvarargs
                148     LOAD_FAST                       14: formatargandannotation
                150     LOAD_FAST                       1: varargs
                152     CALL_FUNCTION                   1
                154     CALL_FUNCTION                   1
                156     CALL_METHOD                     1
                158     POP_TOP                         
                160     JUMP_FORWARD                    7 (to 176)
                162     LOAD_FAST                       4: kwonlyargs
                164     POP_JUMP_IF_FALSE               88 (to 176)
                166     LOAD_FAST                       15: specs
                168     LOAD_METHOD                     5: append
                170     LOAD_CONST                      9: '*'
                172     CALL_METHOD                     1
                174     POP_TOP                         
                176     LOAD_FAST                       4: kwonlyargs
                178     POP_JUMP_IF_FALSE               118 (to 236)
                180     LOAD_FAST                       4: kwonlyargs
                182     GET_ITER                        
                184     FOR_ITER                        25 (to 236)
                186     STORE_FAST                      20: kwonlyarg
                188     LOAD_FAST                       14: formatargandannotation
                190     LOAD_FAST                       20: kwonlyarg
                192     CALL_FUNCTION                   1
                194     STORE_FAST                      19: spec
                196     LOAD_FAST                       5: kwonlydefaults
                198     POP_JUMP_IF_FALSE               112 (to 224)
                200     LOAD_FAST                       20: kwonlyarg
                202     LOAD_FAST                       5: kwonlydefaults
                204     CONTAINS_OP                     0 (in)
                206     POP_JUMP_IF_FALSE               112 (to 224)
                208     LOAD_FAST                       19: spec
                210     LOAD_FAST                       10: formatvalue
                212     LOAD_FAST                       5: kwonlydefaults
                214     LOAD_FAST                       20: kwonlyarg
                216     BINARY_SUBSCR                   
                218     CALL_FUNCTION                   1
                220     INPLACE_ADD                     
                222     STORE_FAST                      19: spec
                224     LOAD_FAST                       15: specs
                226     LOAD_METHOD                     5: append
                228     LOAD_FAST                       19: spec
                230     CALL_METHOD                     1
                232     POP_TOP                         
                234     JUMP_ABSOLUTE                   92 (to 184)
                236     LOAD_FAST                       2: varkw
                238     LOAD_CONST                      8: None
                240     IS_OP                           1 (is not)
                242     POP_JUMP_IF_FALSE               131 (to 262)
                244     LOAD_FAST                       15: specs
                246     LOAD_METHOD                     5: append
                248     LOAD_FAST                       9: formatvarkw
                250     LOAD_FAST                       14: formatargandannotation
                252     LOAD_FAST                       2: varkw
                254     CALL_FUNCTION                   1
                256     CALL_FUNCTION                   1
                258     CALL_METHOD                     1
                260     POP_TOP                         
                262     LOAD_CONST                      10: '('
                264     LOAD_CONST                      11: ', '
                266     LOAD_METHOD                     6: join
                268     LOAD_FAST                       15: specs
                270     CALL_METHOD                     1
                272     BINARY_ADD                      
                274     LOAD_CONST                      12: ')'
                276     BINARY_ADD                      
                278     STORE_FAST                      21: result
                280     LOAD_CONST                      13: 'return'
                282     LOAD_DEREF                      0: annotations
                284     CONTAINS_OP                     0 (in)
                286     POP_JUMP_IF_FALSE               154 (to 308)
                288     LOAD_FAST                       21: result
                290     LOAD_FAST                       11: formatreturns
                292     LOAD_DEREF                      1: formatannotation
                294     LOAD_DEREF                      0: annotations
                296     LOAD_CONST                      13: 'return'
                298     BINARY_SUBSCR                   
                300     CALL_FUNCTION                   1
                302     CALL_FUNCTION                   1
                304     INPLACE_ADD                     
                306     STORE_FAST                      21: result
                308     LOAD_FAST                       21: result
                310     RETURN_VALUE                    
        'formatargspec'
        [Code]
            File Name: inspect.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'name'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '*'
            [Disassembly]
                0       LOAD_CONST                      1: '*'
                2       LOAD_FAST                       0: name
                4       BINARY_ADD                      
                6       RETURN_VALUE                    
        [Code]
            File Name: inspect.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
            [Var Names]
                'name'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '**'
            [Disassembly]
                0       LOAD_CONST                      1: '**'
                2       LOAD_FAST                       0: name
                4       BINARY_ADD                      
                6       RETURN_VALUE                    
        [Code]
            File Name: inspect.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'repr'
            [Var Names]
                'value'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '='
            [Disassembly]
                0       LOAD_CONST                      1: '='
                2       LOAD_GLOBAL                     0: repr
                4       LOAD_FAST                       0: value
                6       CALL_FUNCTION                   1
                8       BINARY_ADD                      
                10      RETURN_VALUE                    
        [Code]
            File Name: inspect.py
            Object Name: formatargvalues
            Arg Count: 8
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 11
            Stack Size: 6
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'range'
                'len'
                'append'
                'join'
            [Var Names]
                'args'
                'varargs'
                'varkw'
                'locals'
                'formatarg'
                'formatvarargs'
                'formatvarkw'
                'formatvalue'
                'convert'
                'specs'
                'i'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Format an argument spec from the 4 values returned by getargvalues.\n\n    The first four arguments are (args, varargs, varkw, locals).  The\n    next four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.'
                [Code]
                    File Name: inspect.py
                    Object Name: convert
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'name'
                        'locals'
                        'formatarg'
                        'formatvalue'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       2: formatarg
                        2       LOAD_FAST                       0: name
                        4       CALL_FUNCTION                   1
                        6       LOAD_FAST                       3: formatvalue
                        8       LOAD_FAST                       1: locals
                        10      LOAD_FAST                       0: name
                        12      BINARY_SUBSCR                   
                        14      CALL_FUNCTION                   1
                        16      BINARY_ADD                      
                        18      RETURN_VALUE                    
                'formatargvalues.<locals>.convert'
                '('
                ', '
                ')'
            [Disassembly]
                0       LOAD_FAST                       3: locals
                2       LOAD_FAST                       4: formatarg
                4       LOAD_FAST                       7: formatvalue
                6       BUILD_TUPLE                     3
                8       LOAD_CONST                      1: <CODE> convert
                10      LOAD_CONST                      2: 'formatargvalues.<locals>.convert'
                12      MAKE_FUNCTION                   1
                14      STORE_FAST                      8: convert
                16      BUILD_LIST                      0
                18      STORE_FAST                      9: specs
                20      LOAD_GLOBAL                     0: range
                22      LOAD_GLOBAL                     1: len
                24      LOAD_FAST                       0: args
                26      CALL_FUNCTION                   1
                28      CALL_FUNCTION                   1
                30      GET_ITER                        
                32      FOR_ITER                        11 (to 56)
                34      STORE_FAST                      10: i
                36      LOAD_FAST                       9: specs
                38      LOAD_METHOD                     2: append
                40      LOAD_FAST                       8: convert
                42      LOAD_FAST                       0: args
                44      LOAD_FAST                       10: i
                46      BINARY_SUBSCR                   
                48      CALL_FUNCTION                   1
                50      CALL_METHOD                     1
                52      POP_TOP                         
                54      JUMP_ABSOLUTE                   16 (to 32)
                56      LOAD_FAST                       1: varargs
                58      POP_JUMP_IF_FALSE               43 (to 86)
                60      LOAD_FAST                       9: specs
                62      LOAD_METHOD                     2: append
                64      LOAD_FAST                       5: formatvarargs
                66      LOAD_FAST                       1: varargs
                68      CALL_FUNCTION                   1
                70      LOAD_FAST                       7: formatvalue
                72      LOAD_FAST                       3: locals
                74      LOAD_FAST                       1: varargs
                76      BINARY_SUBSCR                   
                78      CALL_FUNCTION                   1
                80      BINARY_ADD                      
                82      CALL_METHOD                     1
                84      POP_TOP                         
                86      LOAD_FAST                       2: varkw
                88      POP_JUMP_IF_FALSE               58 (to 116)
                90      LOAD_FAST                       9: specs
                92      LOAD_METHOD                     2: append
                94      LOAD_FAST                       6: formatvarkw
                96      LOAD_FAST                       2: varkw
                98      CALL_FUNCTION                   1
                100     LOAD_FAST                       7: formatvalue
                102     LOAD_FAST                       3: locals
                104     LOAD_FAST                       2: varkw
                106     BINARY_SUBSCR                   
                108     CALL_FUNCTION                   1
                110     BINARY_ADD                      
                112     CALL_METHOD                     1
                114     POP_TOP                         
                116     LOAD_CONST                      3: '('
                118     LOAD_CONST                      4: ', '
                120     LOAD_METHOD                     3: join
                122     LOAD_FAST                       9: specs
                124     CALL_METHOD                     1
                126     BINARY_ADD                      
                128     LOAD_CONST                      5: ')'
                130     BINARY_ADD                      
                132     RETURN_VALUE                    
        'formatargvalues'
        [Code]
            File Name: inspect.py
            Object Name: _missing_arguments
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 7
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'len'
                'format'
                'join'
                'TypeError'
            [Var Names]
                'f_name'
                'argnames'
                'pos'
                'values'
                'names'
                'missing'
                's'
                'tail'
            [Free Vars]
            [Cell Vars]
                'values'
            [Constants]
                None
                [Code]
                    File Name: inspect.py
                    Object Name: <listcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'repr'
                    [Var Names]
                        '.0'
                        'name'
                    [Free Vars]
                        'values'
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        10 (to 26)
                        6       STORE_FAST                      1: name
                        8       LOAD_FAST                       1: name
                        10      LOAD_DEREF                      0: values
                        12      CONTAINS_OP                     1 (not in)
                        14      POP_JUMP_IF_FALSE               2 (to 4)
                        16      LOAD_GLOBAL                     0: repr
                        18      LOAD_FAST                       1: name
                        20      CALL_FUNCTION                   1
                        22      LIST_APPEND                     2
                        24      JUMP_ABSOLUTE                   2 (to 4)
                        26      RETURN_VALUE                    
                '_missing_arguments.<locals>.<listcomp>'
                1
                0
                2
                '{} and {}'
                ', {} and {}'
                -2
                ', '
                '%s() missing %i required %s argument%s: %s'
                'positional'
                'keyword-only'
                ''
                's'
            [Disassembly]
                0       LOAD_CLOSURE                    0: values
                2       BUILD_TUPLE                     1
                4       LOAD_CONST                      1: <CODE> <listcomp>
                6       LOAD_CONST                      2: '_missing_arguments.<locals>.<listcomp>'
                8       MAKE_FUNCTION                   8
                10      LOAD_FAST                       1: argnames
                12      GET_ITER                        
                14      CALL_FUNCTION                   1
                16      STORE_FAST                      4: names
                18      LOAD_GLOBAL                     0: len
                20      LOAD_FAST                       4: names
                22      CALL_FUNCTION                   1
                24      STORE_FAST                      5: missing
                26      LOAD_FAST                       5: missing
                28      LOAD_CONST                      3: 1
                30      COMPARE_OP                      2 (==)
                32      POP_JUMP_IF_FALSE               22 (to 44)
                34      LOAD_FAST                       4: names
                36      LOAD_CONST                      4: 0
                38      BINARY_SUBSCR                   
                40      STORE_FAST                      6: s
                42      JUMP_FORWARD                    31 (to 106)
                44      LOAD_FAST                       5: missing
                46      LOAD_CONST                      5: 2
                48      COMPARE_OP                      2 (==)
                50      POP_JUMP_IF_FALSE               32 (to 64)
                52      LOAD_CONST                      6: '{} and {}'
                54      LOAD_ATTR                       1: format
                56      LOAD_FAST                       4: names
                58      CALL_FUNCTION_EX                0
                60      STORE_FAST                      6: s
                62      JUMP_FORWARD                    21 (to 106)
                64      LOAD_CONST                      7: ', {} and {}'
                66      LOAD_ATTR                       1: format
                68      LOAD_FAST                       4: names
                70      LOAD_CONST                      8: -2
                72      LOAD_CONST                      0: None
                74      BUILD_SLICE                     2
                76      BINARY_SUBSCR                   
                78      CALL_FUNCTION_EX                0
                80      STORE_FAST                      7: tail
                82      LOAD_FAST                       4: names
                84      LOAD_CONST                      8: -2
                86      LOAD_CONST                      0: None
                88      BUILD_SLICE                     2
                90      DELETE_SUBSCR                   
                92      LOAD_CONST                      9: ', '
                94      LOAD_METHOD                     2: join
                96      LOAD_FAST                       4: names
                98      CALL_METHOD                     1
                100     LOAD_FAST                       7: tail
                102     BINARY_ADD                      
                104     STORE_FAST                      6: s
                106     LOAD_GLOBAL                     3: TypeError
                108     LOAD_CONST                      10: '%s() missing %i required %s argument%s: %s'
                110     LOAD_FAST                       0: f_name
                112     LOAD_FAST                       5: missing
                114     LOAD_FAST                       2: pos
                116     POP_JUMP_IF_FALSE               61 (to 122)
                118     LOAD_CONST                      11: 'positional'
                120     JUMP_FORWARD                    1 (to 124)
                122     LOAD_CONST                      12: 'keyword-only'
                124     LOAD_FAST                       5: missing
                126     LOAD_CONST                      3: 1
                128     COMPARE_OP                      2 (==)
                130     POP_JUMP_IF_FALSE               68 (to 136)
                132     LOAD_CONST                      13: ''
                134     JUMP_FORWARD                    1 (to 138)
                136     LOAD_CONST                      14: 's'
                138     LOAD_FAST                       6: s
                140     BUILD_TUPLE                     5
                142     BINARY_MODULO                   
                144     CALL_FUNCTION                   1
                146     RAISE_VARARGS                   1
        '_missing_arguments'
        [Code]
            File Name: inspect.py
            Object Name: _too_many
            Arg Count: 7
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 13
            Stack Size: 9
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'len'
                'str'
                'TypeError'
            [Var Names]
                'f_name'
                'args'
                'kwonly'
                'varargs'
                'defcount'
                'given'
                'values'
                'atleast'
                'kwonly_given'
                'plural'
                'sig'
                'kwonly_sig'
                'msg'
            [Free Vars]
            [Cell Vars]
                'values'
            [Constants]
                None
                [Code]
                    File Name: inspect.py
                    Object Name: <listcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                    [Var Names]
                        '.0'
                        'arg'
                    [Free Vars]
                        'values'
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        8 (to 22)
                        6       STORE_FAST                      1: arg
                        8       LOAD_FAST                       1: arg
                        10      LOAD_DEREF                      0: values
                        12      CONTAINS_OP                     0 (in)
                        14      POP_JUMP_IF_FALSE               2 (to 4)
                        16      LOAD_FAST                       1: arg
                        18      LIST_APPEND                     2
                        20      JUMP_ABSOLUTE                   2 (to 4)
                        22      RETURN_VALUE                    
                '_too_many.<locals>.<listcomp>'
                1
                'at least %d'
                True
                'from %d to %d'
                ''
                ' positional argument%s (and %d keyword-only argument%s)'
                's'
                '%s() takes %s positional argument%s but %d%s %s given'
                'was'
                'were'
            [Disassembly]
                0       LOAD_GLOBAL                     0: len
                2       LOAD_FAST                       1: args
                4       CALL_FUNCTION                   1
                6       LOAD_FAST                       4: defcount
                8       BINARY_SUBTRACT                 
                10      STORE_FAST                      7: atleast
                12      LOAD_GLOBAL                     0: len
                14      LOAD_CLOSURE                    0: values
                16      BUILD_TUPLE                     1
                18      LOAD_CONST                      1: <CODE> <listcomp>
                20      LOAD_CONST                      2: '_too_many.<locals>.<listcomp>'
                22      MAKE_FUNCTION                   8
                24      LOAD_FAST                       2: kwonly
                26      GET_ITER                        
                28      CALL_FUNCTION                   1
                30      CALL_FUNCTION                   1
                32      STORE_FAST                      8: kwonly_given
                34      LOAD_FAST                       3: varargs
                36      POP_JUMP_IF_FALSE               29 (to 58)
                38      LOAD_FAST                       7: atleast
                40      LOAD_CONST                      3: 1
                42      COMPARE_OP                      3 (!=)
                44      STORE_FAST                      9: plural
                46      LOAD_CONST                      4: 'at least %d'
                48      LOAD_FAST                       7: atleast
                50      BUILD_TUPLE                     1
                52      BINARY_MODULO                   
                54      STORE_FAST                      10: sig
                56      JUMP_FORWARD                    25 (to 108)
                58      LOAD_FAST                       4: defcount
                60      POP_JUMP_IF_FALSE               42 (to 84)
                62      LOAD_CONST                      5: True
                64      STORE_FAST                      9: plural
                66      LOAD_CONST                      6: 'from %d to %d'
                68      LOAD_FAST                       7: atleast
                70      LOAD_GLOBAL                     0: len
                72      LOAD_FAST                       1: args
                74      CALL_FUNCTION                   1
                76      BUILD_TUPLE                     2
                78      BINARY_MODULO                   
                80      STORE_FAST                      10: sig
                82      JUMP_FORWARD                    12 (to 108)
                84      LOAD_GLOBAL                     0: len
                86      LOAD_FAST                       1: args
                88      CALL_FUNCTION                   1
                90      LOAD_CONST                      3: 1
                92      COMPARE_OP                      3 (!=)
                94      STORE_FAST                      9: plural
                96      LOAD_GLOBAL                     1: str
                98      LOAD_GLOBAL                     0: len
                100     LOAD_FAST                       1: args
                102     CALL_FUNCTION                   1
                104     CALL_FUNCTION                   1
                106     STORE_FAST                      10: sig
                108     LOAD_CONST                      7: ''
                110     STORE_FAST                      11: kwonly_sig
                112     LOAD_FAST                       8: kwonly_given
                114     POP_JUMP_IF_FALSE               79 (to 158)
                116     LOAD_CONST                      8: ' positional argument%s (and %d keyword-only argument%s)'
                118     STORE_FAST                      12: msg
                120     LOAD_FAST                       12: msg
                122     LOAD_FAST                       5: given
                124     LOAD_CONST                      3: 1
                126     COMPARE_OP                      3 (!=)
                128     POP_JUMP_IF_FALSE               67 (to 134)
                130     LOAD_CONST                      9: 's'
                132     JUMP_FORWARD                    1 (to 136)
                134     LOAD_CONST                      7: ''
                136     LOAD_FAST                       8: kwonly_given
                138     LOAD_FAST                       8: kwonly_given
                140     LOAD_CONST                      3: 1
                142     COMPARE_OP                      3 (!=)
                144     POP_JUMP_IF_FALSE               75 (to 150)
                146     LOAD_CONST                      9: 's'
                148     JUMP_FORWARD                    1 (to 152)
                150     LOAD_CONST                      7: ''
                152     BUILD_TUPLE                     3
                154     BINARY_MODULO                   
                156     STORE_FAST                      11: kwonly_sig
                158     LOAD_GLOBAL                     2: TypeError
                160     LOAD_CONST                      10: '%s() takes %s positional argument%s but %d%s %s given'
                162     LOAD_FAST                       0: f_name
                164     LOAD_FAST                       10: sig
                166     LOAD_FAST                       9: plural
                168     POP_JUMP_IF_FALSE               87 (to 174)
                170     LOAD_CONST                      9: 's'
                172     JUMP_FORWARD                    1 (to 176)
                174     LOAD_CONST                      7: ''
                176     LOAD_FAST                       5: given
                178     LOAD_FAST                       11: kwonly_sig
                180     LOAD_FAST                       5: given
                182     LOAD_CONST                      3: 1
                184     COMPARE_OP                      2 (==)
                186     POP_JUMP_IF_FALSE               101 (to 202)
                188     LOAD_FAST                       8: kwonly_given
                190     POP_JUMP_IF_TRUE                101 (to 202)
                192     LOAD_CONST                      11: 'was'
                194     BUILD_TUPLE                     6
                196     BINARY_MODULO                   
                198     CALL_FUNCTION                   1
                200     RAISE_VARARGS                   1
                202     LOAD_CONST                      12: 'were'
                204     BUILD_TUPLE                     6
                206     BINARY_MODULO                   
                208     CALL_FUNCTION                   1
                210     RAISE_VARARGS                   1
        '_too_many'
        [Code]
            File Name: inspect.py
            Object Name: getcallargs
            Arg Count: 1
            Pos Only Arg Count: 1
            KW Only Arg Count: 0
            Locals: 25
            Stack Size: 8
            Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
            [Names]
                'getfullargspec'
                '__name__'
                'ismethod'
                '__self__'
                'len'
                'min'
                'range'
                'tuple'
                'set'
                'items'
                'TypeError'
                '_too_many'
                '_missing_arguments'
                'enumerate'
            [Var Names]
                'func'
                'positional'
                'named'
                'spec'
                'args'
                'varargs'
                'varkw'
                'defaults'
                'kwonlyargs'
                'kwonlydefaults'
                'ann'
                'f_name'
                'arg2value'
                'num_pos'
                'num_args'
                'num_defaults'
                'n'
                'i'
                'possible_kwargs'
                'kw'
                'value'
                'req'
                'arg'
                'missing'
                'kwarg'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Get the mapping of arguments to values.\n\n    A dict is returned, with keys the function argument names (including the\n    names of the * and ** arguments, if any), and values the respective bound\n    values from 'positional' and 'named'."
                None
                0
                '%s() got an unexpected keyword argument %r'
                '%s() got multiple values for argument %r'
                True
                1
                False
            [Disassembly]
                0       LOAD_GLOBAL                     0: getfullargspec
                2       LOAD_FAST                       0: func
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      3: spec
                8       LOAD_FAST                       3: spec
                10      UNPACK_SEQUENCE                 7
                12      STORE_FAST                      4: args
                14      STORE_FAST                      5: varargs
                16      STORE_FAST                      6: varkw
                18      STORE_FAST                      7: defaults
                20      STORE_FAST                      8: kwonlyargs
                22      STORE_FAST                      9: kwonlydefaults
                24      STORE_FAST                      10: ann
                26      LOAD_FAST                       0: func
                28      LOAD_ATTR                       1: __name__
                30      STORE_FAST                      11: f_name
                32      BUILD_MAP                       0
                34      STORE_FAST                      12: arg2value
                36      LOAD_GLOBAL                     2: ismethod
                38      LOAD_FAST                       0: func
                40      CALL_FUNCTION                   1
                42      POP_JUMP_IF_FALSE               33 (to 66)
                44      LOAD_FAST                       0: func
                46      LOAD_ATTR                       3: __self__
                48      LOAD_CONST                      1: None
                50      IS_OP                           1 (is not)
                52      POP_JUMP_IF_FALSE               33 (to 66)
                54      LOAD_FAST                       0: func
                56      LOAD_ATTR                       3: __self__
                58      BUILD_TUPLE                     1
                60      LOAD_FAST                       1: positional
                62      BINARY_ADD                      
                64      STORE_FAST                      1: positional
                66      LOAD_GLOBAL                     4: len
                68      LOAD_FAST                       1: positional
                70      CALL_FUNCTION                   1
                72      STORE_FAST                      13: num_pos
                74      LOAD_GLOBAL                     4: len
                76      LOAD_FAST                       4: args
                78      CALL_FUNCTION                   1
                80      STORE_FAST                      14: num_args
                82      LOAD_FAST                       7: defaults
                84      POP_JUMP_IF_FALSE               47 (to 94)
                86      LOAD_GLOBAL                     4: len
                88      LOAD_FAST                       7: defaults
                90      CALL_FUNCTION                   1
                92      JUMP_FORWARD                    1 (to 96)
                94      LOAD_CONST                      2: 0
                96      STORE_FAST                      15: num_defaults
                98      LOAD_GLOBAL                     5: min
                100     LOAD_FAST                       13: num_pos
                102     LOAD_FAST                       14: num_args
                104     CALL_FUNCTION                   2
                106     STORE_FAST                      16: n
                108     LOAD_GLOBAL                     6: range
                110     LOAD_FAST                       16: n
                112     CALL_FUNCTION                   1
                114     GET_ITER                        
                116     FOR_ITER                        10 (to 138)
                118     STORE_FAST                      17: i
                120     LOAD_FAST                       1: positional
                122     LOAD_FAST                       17: i
                124     BINARY_SUBSCR                   
                126     LOAD_FAST                       12: arg2value
                128     LOAD_FAST                       4: args
                130     LOAD_FAST                       17: i
                132     BINARY_SUBSCR                   
                134     STORE_SUBSCR                    
                136     JUMP_ABSOLUTE                   58 (to 116)
                138     LOAD_FAST                       5: varargs
                140     POP_JUMP_IF_FALSE               81 (to 162)
                142     LOAD_GLOBAL                     7: tuple
                144     LOAD_FAST                       1: positional
                146     LOAD_FAST                       16: n
                148     LOAD_CONST                      1: None
                150     BUILD_SLICE                     2
                152     BINARY_SUBSCR                   
                154     CALL_FUNCTION                   1
                156     LOAD_FAST                       12: arg2value
                158     LOAD_FAST                       5: varargs
                160     STORE_SUBSCR                    
                162     LOAD_GLOBAL                     8: set
                164     LOAD_FAST                       4: args
                166     LOAD_FAST                       8: kwonlyargs
                168     BINARY_ADD                      
                170     CALL_FUNCTION                   1
                172     STORE_FAST                      18: possible_kwargs
                174     LOAD_FAST                       6: varkw
                176     POP_JUMP_IF_FALSE               93 (to 186)
                178     BUILD_MAP                       0
                180     LOAD_FAST                       12: arg2value
                182     LOAD_FAST                       6: varkw
                184     STORE_SUBSCR                    
                186     LOAD_FAST                       2: named
                188     LOAD_METHOD                     9: items
                190     CALL_METHOD                     0
                192     GET_ITER                        
                194     FOR_ITER                        41 (to 278)
                196     UNPACK_SEQUENCE                 2
                198     STORE_FAST                      19: kw
                200     STORE_FAST                      20: value
                202     LOAD_FAST                       19: kw
                204     LOAD_FAST                       18: possible_kwargs
                206     CONTAINS_OP                     1 (not in)
                208     POP_JUMP_IF_FALSE               122 (to 244)
                210     LOAD_FAST                       6: varkw
                212     POP_JUMP_IF_TRUE                115 (to 230)
                214     LOAD_GLOBAL                     10: TypeError
                216     LOAD_CONST                      3: '%s() got an unexpected keyword argument %r'
                218     LOAD_FAST                       11: f_name
                220     LOAD_FAST                       19: kw
                222     BUILD_TUPLE                     2
                224     BINARY_MODULO                   
                226     CALL_FUNCTION                   1
                228     RAISE_VARARGS                   1
                230     LOAD_FAST                       20: value
                232     LOAD_FAST                       12: arg2value
                234     LOAD_FAST                       6: varkw
                236     BINARY_SUBSCR                   
                238     LOAD_FAST                       19: kw
                240     STORE_SUBSCR                    
                242     JUMP_ABSOLUTE                   97 (to 194)
                244     LOAD_FAST                       19: kw
                246     LOAD_FAST                       12: arg2value
                248     CONTAINS_OP                     0 (in)
                250     POP_JUMP_IF_FALSE               134 (to 268)
                252     LOAD_GLOBAL                     10: TypeError
                254     LOAD_CONST                      4: '%s() got multiple values for argument %r'
                256     LOAD_FAST                       11: f_name
                258     LOAD_FAST                       19: kw
                260     BUILD_TUPLE                     2
                262     BINARY_MODULO                   
                264     CALL_FUNCTION                   1
                266     RAISE_VARARGS                   1
                268     LOAD_FAST                       20: value
                270     LOAD_FAST                       12: arg2value
                272     LOAD_FAST                       19: kw
                274     STORE_SUBSCR                    
                276     JUMP_ABSOLUTE                   97 (to 194)
                278     LOAD_FAST                       13: num_pos
                280     LOAD_FAST                       14: num_args
                282     COMPARE_OP                      4 (>)
                284     POP_JUMP_IF_FALSE               155 (to 310)
                286     LOAD_FAST                       5: varargs
                288     POP_JUMP_IF_TRUE                155 (to 310)
                290     LOAD_GLOBAL                     11: _too_many
                292     LOAD_FAST                       11: f_name
                294     LOAD_FAST                       4: args
                296     LOAD_FAST                       8: kwonlyargs
                298     LOAD_FAST                       5: varargs
                300     LOAD_FAST                       15: num_defaults
                302     LOAD_FAST                       13: num_pos
                304     LOAD_FAST                       12: arg2value
                306     CALL_FUNCTION                   7
                308     POP_TOP                         
                310     LOAD_FAST                       13: num_pos
                312     LOAD_FAST                       14: num_args
                314     COMPARE_OP                      0 (<)
                316     POP_JUMP_IF_FALSE               208 (to 416)
                318     LOAD_FAST                       4: args
                320     LOAD_CONST                      1: None
                322     LOAD_FAST                       14: num_args
                324     LOAD_FAST                       15: num_defaults
                326     BINARY_SUBTRACT                 
                328     BUILD_SLICE                     2
                330     BINARY_SUBSCR                   
                332     STORE_FAST                      21: req
                334     LOAD_FAST                       21: req
                336     GET_ITER                        
                338     FOR_ITER                        13 (to 366)
                340     STORE_FAST                      22: arg
                342     LOAD_FAST                       22: arg
                344     LOAD_FAST                       12: arg2value
                346     CONTAINS_OP                     1 (not in)
                348     POP_JUMP_IF_FALSE               182 (to 364)
                350     LOAD_GLOBAL                     12: _missing_arguments
                352     LOAD_FAST                       11: f_name
                354     LOAD_FAST                       21: req
                356     LOAD_CONST                      5: True
                358     LOAD_FAST                       12: arg2value
                360     CALL_FUNCTION                   4
                362     POP_TOP                         
                364     JUMP_ABSOLUTE                   169 (to 338)
                366     LOAD_GLOBAL                     13: enumerate
                368     LOAD_FAST                       4: args
                370     LOAD_FAST                       14: num_args
                372     LOAD_FAST                       15: num_defaults
                374     BINARY_SUBTRACT                 
                376     LOAD_CONST                      1: None
                378     BUILD_SLICE                     2
                380     BINARY_SUBSCR                   
                382     CALL_FUNCTION                   1
                384     GET_ITER                        
                386     FOR_ITER                        14 (to 416)
                388     UNPACK_SEQUENCE                 2
                390     STORE_FAST                      17: i
                392     STORE_FAST                      22: arg
                394     LOAD_FAST                       22: arg
                396     LOAD_FAST                       12: arg2value
                398     CONTAINS_OP                     1 (not in)
                400     POP_JUMP_IF_FALSE               207 (to 414)
                402     LOAD_FAST                       7: defaults
                404     LOAD_FAST                       17: i
                406     BINARY_SUBSCR                   
                408     LOAD_FAST                       12: arg2value
                410     LOAD_FAST                       22: arg
                412     STORE_SUBSCR                    
                414     JUMP_ABSOLUTE                   193 (to 386)
                416     LOAD_CONST                      2: 0
                418     STORE_FAST                      23: missing
                420     LOAD_FAST                       8: kwonlyargs
                422     GET_ITER                        
                424     FOR_ITER                        23 (to 472)
                426     STORE_FAST                      24: kwarg
                428     LOAD_FAST                       24: kwarg
                430     LOAD_FAST                       12: arg2value
                432     CONTAINS_OP                     1 (not in)
                434     POP_JUMP_IF_FALSE               235 (to 470)
                436     LOAD_FAST                       9: kwonlydefaults
                438     POP_JUMP_IF_FALSE               231 (to 462)
                440     LOAD_FAST                       24: kwarg
                442     LOAD_FAST                       9: kwonlydefaults
                444     CONTAINS_OP                     0 (in)
                446     POP_JUMP_IF_FALSE               231 (to 462)
                448     LOAD_FAST                       9: kwonlydefaults
                450     LOAD_FAST                       24: kwarg
                452     BINARY_SUBSCR                   
                454     LOAD_FAST                       12: arg2value
                456     LOAD_FAST                       24: kwarg
                458     STORE_SUBSCR                    
                460     JUMP_ABSOLUTE                   212 (to 424)
                462     LOAD_FAST                       23: missing
                464     LOAD_CONST                      6: 1
                466     INPLACE_ADD                     
                468     STORE_FAST                      23: missing
                470     JUMP_ABSOLUTE                   212 (to 424)
                472     LOAD_FAST                       23: missing
                474     POP_JUMP_IF_FALSE               245 (to 490)
                476     LOAD_GLOBAL                     12: _missing_arguments
                478     LOAD_FAST                       11: f_name
                480     LOAD_FAST                       8: kwonlyargs
                482     LOAD_CONST                      7: False
                484     LOAD_FAST                       12: arg2value
                486     CALL_FUNCTION                   4
                488     POP_TOP                         
                490     LOAD_FAST                       12: arg2value
                492     RETURN_VALUE                    
        'getcallargs'
        'ClosureVars'
        'nonlocals globals builtins unbound'
        [Code]
            File Name: inspect.py
            Object Name: getclosurevars
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 9
            Stack Size: 12
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ismethod'
                '__func__'
                'isfunction'
                'TypeError'
                'format'
                '__code__'
                '__closure__'
                'zip'
                'co_freevars'
                '__globals__'
                'get'
                'builtins'
                '__dict__'
                'ismodule'
                'set'
                'co_names'
                'KeyError'
                'add'
                'ClosureVars'
            [Var Names]
                'func'
                'code'
                'nonlocal_vars'
                'global_ns'
                'builtin_ns'
                'global_vars'
                'builtin_vars'
                'unbound_names'
                'name'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Get the mapping of free variables to their current values.\n\n    Returns a named tuple of dicts mapping the current nonlocal, global\n    and builtin references as seen by the body of the function. A final\n    set of unbound names that could not be resolved is also provided.\n    '
                '{!r} is not a Python function'
                None
                [Code]
                    File Name: inspect.py
                    Object Name: <dictcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        'cell_contents'
                    [Var Names]
                        '.0'
                        'var'
                        'cell'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                    [Disassembly]
                        0       BUILD_MAP                       0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        8 (to 22)
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: var
                        10      STORE_FAST                      2: cell
                        12      LOAD_FAST                       1: var
                        14      LOAD_FAST                       2: cell
                        16      LOAD_ATTR                       0: cell_contents
                        18      MAP_ADD                         2
                        20      JUMP_ABSOLUTE                   2 (to 4)
                        22      RETURN_VALUE                    
                'getclosurevars.<locals>.<dictcomp>'
                '__builtins__'
                (
                    'None'
                    'True'
                    'False'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: ismethod
                2       LOAD_FAST                       0: func
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_FALSE               7 (to 14)
                8       LOAD_FAST                       0: func
                10      LOAD_ATTR                       1: __func__
                12      STORE_FAST                      0: func
                14      LOAD_GLOBAL                     2: isfunction
                16      LOAD_FAST                       0: func
                18      CALL_FUNCTION                   1
                20      POP_JUMP_IF_TRUE                18 (to 36)
                22      LOAD_GLOBAL                     3: TypeError
                24      LOAD_CONST                      1: '{!r} is not a Python function'
                26      LOAD_METHOD                     4: format
                28      LOAD_FAST                       0: func
                30      CALL_METHOD                     1
                32      CALL_FUNCTION                   1
                34      RAISE_VARARGS                   1
                36      LOAD_FAST                       0: func
                38      LOAD_ATTR                       5: __code__
                40      STORE_FAST                      1: code
                42      LOAD_FAST                       0: func
                44      LOAD_ATTR                       6: __closure__
                46      LOAD_CONST                      2: None
                48      IS_OP                           0 (is)
                50      POP_JUMP_IF_FALSE               29 (to 58)
                52      BUILD_MAP                       0
                54      STORE_FAST                      2: nonlocal_vars
                56      JUMP_FORWARD                    12 (to 82)
                58      LOAD_CONST                      3: <CODE> <dictcomp>
                60      LOAD_CONST                      4: 'getclosurevars.<locals>.<dictcomp>'
                62      MAKE_FUNCTION                   0
                64      LOAD_GLOBAL                     7: zip
                66      LOAD_FAST                       1: code
                68      LOAD_ATTR                       8: co_freevars
                70      LOAD_FAST                       0: func
                72      LOAD_ATTR                       6: __closure__
                74      CALL_FUNCTION                   2
                76      GET_ITER                        
                78      CALL_FUNCTION                   1
                80      STORE_FAST                      2: nonlocal_vars
                82      LOAD_FAST                       0: func
                84      LOAD_ATTR                       9: __globals__
                86      STORE_FAST                      3: global_ns
                88      LOAD_FAST                       3: global_ns
                90      LOAD_METHOD                     10: get
                92      LOAD_CONST                      5: '__builtins__'
                94      LOAD_GLOBAL                     11: builtins
                96      LOAD_ATTR                       12: __dict__
                98      CALL_METHOD                     2
                100     STORE_FAST                      4: builtin_ns
                102     LOAD_GLOBAL                     13: ismodule
                104     LOAD_FAST                       4: builtin_ns
                106     CALL_FUNCTION                   1
                108     POP_JUMP_IF_FALSE               58 (to 116)
                110     LOAD_FAST                       4: builtin_ns
                112     LOAD_ATTR                       12: __dict__
                114     STORE_FAST                      4: builtin_ns
                116     BUILD_MAP                       0
                118     STORE_FAST                      5: global_vars
                120     BUILD_MAP                       0
                122     STORE_FAST                      6: builtin_vars
                124     LOAD_GLOBAL                     14: set
                126     CALL_FUNCTION                   0
                128     STORE_FAST                      7: unbound_names
                130     LOAD_FAST                       1: code
                132     LOAD_ATTR                       15: co_names
                134     GET_ITER                        
                136     FOR_ITER                        47 (to 232)
                138     STORE_FAST                      8: name
                140     LOAD_FAST                       8: name
                142     LOAD_CONST                      6: ('None', 'True', 'False')
                144     CONTAINS_OP                     0 (in)
                146     POP_JUMP_IF_FALSE               75 (to 150)
                148     JUMP_ABSOLUTE                   68 (to 136)
                150     SETUP_FINALLY                   8 (to 168)
                152     LOAD_FAST                       3: global_ns
                154     LOAD_FAST                       8: name
                156     BINARY_SUBSCR                   
                158     LOAD_FAST                       5: global_vars
                160     LOAD_FAST                       8: name
                162     STORE_SUBSCR                    
                164     POP_BLOCK                       
                166     JUMP_ABSOLUTE                   68 (to 136)
                168     DUP_TOP                         
                170     LOAD_GLOBAL                     16: KeyError
                172     JUMP_IF_NOT_EXC_MATCH           115 (to 230)
                174     POP_TOP                         
                176     POP_TOP                         
                178     POP_TOP                         
                180     SETUP_FINALLY                   8 (to 198)
                182     LOAD_FAST                       4: builtin_ns
                184     LOAD_FAST                       8: name
                186     BINARY_SUBSCR                   
                188     LOAD_FAST                       6: builtin_vars
                190     LOAD_FAST                       8: name
                192     STORE_SUBSCR                    
                194     POP_BLOCK                       
                196     JUMP_FORWARD                    14 (to 226)
                198     DUP_TOP                         
                200     LOAD_GLOBAL                     16: KeyError
                202     JUMP_IF_NOT_EXC_MATCH           112 (to 224)
                204     POP_TOP                         
                206     POP_TOP                         
                208     POP_TOP                         
                210     LOAD_FAST                       7: unbound_names
                212     LOAD_METHOD                     17: add
                214     LOAD_FAST                       8: name
                216     CALL_METHOD                     1
                218     POP_TOP                         
                220     POP_EXCEPT                      
                222     JUMP_FORWARD                    1 (to 226)
                224     RERAISE                         0
                226     POP_EXCEPT                      
                228     JUMP_ABSOLUTE                   68 (to 136)
                230     RERAISE                         0
                232     LOAD_GLOBAL                     18: ClosureVars
                234     LOAD_FAST                       2: nonlocal_vars
                236     LOAD_FAST                       5: global_vars
                238     LOAD_FAST                       6: builtin_vars
                240     LOAD_FAST                       7: unbound_names
                242     CALL_FUNCTION                   4
                244     RETURN_VALUE                    
        'getclosurevars'
        'Traceback'
        'filename lineno function code_context index'
        1
        [Code]
            File Name: inspect.py
            Object Name: getframeinfo
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'istraceback'
                'tb_lineno'
                'tb_frame'
                'f_lineno'
                'isframe'
                'TypeError'
                'format'
                'getsourcefile'
                'getfile'
                'findsource'
                'OSError'
                'max'
                'min'
                'len'
                'Traceback'
                'f_code'
                'co_name'
            [Var Names]
                'frame'
                'context'
                'lineno'
                'filename'
                'start'
                'lines'
                'lnum'
                'index'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get information about a frame or traceback object.\n\n    A tuple of five things is returned: the filename, the line number of\n    the current line, the function name, a list of lines of context from\n    the source code, and the index of the current line within that list.\n    The optional second argument specifies the number of lines of context\n    to return, which are centered around the current line.'
                '{!r} is not a frame or traceback object'
                0
                1
                2
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: istraceback
                2       LOAD_FAST                       0: frame
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_FALSE               11 (to 22)
                8       LOAD_FAST                       0: frame
                10      LOAD_ATTR                       1: tb_lineno
                12      STORE_FAST                      2: lineno
                14      LOAD_FAST                       0: frame
                16      LOAD_ATTR                       2: tb_frame
                18      STORE_FAST                      0: frame
                20      JUMP_FORWARD                    3 (to 28)
                22      LOAD_FAST                       0: frame
                24      LOAD_ATTR                       3: f_lineno
                26      STORE_FAST                      2: lineno
                28      LOAD_GLOBAL                     4: isframe
                30      LOAD_FAST                       0: frame
                32      CALL_FUNCTION                   1
                34      POP_JUMP_IF_TRUE                25 (to 50)
                36      LOAD_GLOBAL                     5: TypeError
                38      LOAD_CONST                      1: '{!r} is not a frame or traceback object'
                40      LOAD_METHOD                     6: format
                42      LOAD_FAST                       0: frame
                44      CALL_METHOD                     1
                46      CALL_FUNCTION                   1
                48      RAISE_VARARGS                   1
                50      LOAD_GLOBAL                     7: getsourcefile
                52      LOAD_FAST                       0: frame
                54      CALL_FUNCTION                   1
                56      JUMP_IF_TRUE_OR_POP             32 (to 64)
                58      LOAD_GLOBAL                     8: getfile
                60      LOAD_FAST                       0: frame
                62      CALL_FUNCTION                   1
                64      STORE_FAST                      3: filename
                66      LOAD_FAST                       1: context
                68      LOAD_CONST                      2: 0
                70      COMPARE_OP                      4 (>)
                72      POP_JUMP_IF_FALSE               94 (to 188)
                74      LOAD_FAST                       2: lineno
                76      LOAD_CONST                      3: 1
                78      BINARY_SUBTRACT                 
                80      LOAD_FAST                       1: context
                82      LOAD_CONST                      4: 2
                84      BINARY_FLOOR_DIVIDE             
                86      BINARY_SUBTRACT                 
                88      STORE_FAST                      4: start
                90      SETUP_FINALLY                   8 (to 108)
                92      LOAD_GLOBAL                     9: findsource
                94      LOAD_FAST                       0: frame
                96      CALL_FUNCTION                   1
                98      UNPACK_SEQUENCE                 2
                100     STORE_FAST                      5: lines
                102     STORE_FAST                      6: lnum
                104     POP_BLOCK                       
                106     JUMP_FORWARD                    13 (to 134)
                108     DUP_TOP                         
                110     LOAD_GLOBAL                     10: OSError
                112     JUMP_IF_NOT_EXC_MATCH           66 (to 132)
                114     POP_TOP                         
                116     POP_TOP                         
                118     POP_TOP                         
                120     LOAD_CONST                      5: None
                122     DUP_TOP                         
                124     STORE_FAST                      5: lines
                126     STORE_FAST                      7: index
                128     POP_EXCEPT                      
                130     JUMP_FORWARD                    32 (to 196)
                132     RERAISE                         0
                134     LOAD_GLOBAL                     11: max
                136     LOAD_CONST                      2: 0
                138     LOAD_GLOBAL                     12: min
                140     LOAD_FAST                       4: start
                142     LOAD_GLOBAL                     13: len
                144     LOAD_FAST                       5: lines
                146     CALL_FUNCTION                   1
                148     LOAD_FAST                       1: context
                150     BINARY_SUBTRACT                 
                152     CALL_FUNCTION                   2
                154     CALL_FUNCTION                   2
                156     STORE_FAST                      4: start
                158     LOAD_FAST                       5: lines
                160     LOAD_FAST                       4: start
                162     LOAD_FAST                       4: start
                164     LOAD_FAST                       1: context
                166     BINARY_ADD                      
                168     BUILD_SLICE                     2
                170     BINARY_SUBSCR                   
                172     STORE_FAST                      5: lines
                174     LOAD_FAST                       2: lineno
                176     LOAD_CONST                      3: 1
                178     BINARY_SUBTRACT                 
                180     LOAD_FAST                       4: start
                182     BINARY_SUBTRACT                 
                184     STORE_FAST                      7: index
                186     JUMP_FORWARD                    4 (to 196)
                188     LOAD_CONST                      5: None
                190     DUP_TOP                         
                192     STORE_FAST                      5: lines
                194     STORE_FAST                      7: index
                196     LOAD_GLOBAL                     14: Traceback
                198     LOAD_FAST                       3: filename
                200     LOAD_FAST                       2: lineno
                202     LOAD_FAST                       0: frame
                204     LOAD_ATTR                       15: f_code
                206     LOAD_ATTR                       16: co_name
                208     LOAD_FAST                       5: lines
                210     LOAD_FAST                       7: index
                212     CALL_FUNCTION                   5
                214     RETURN_VALUE                    
        'getframeinfo'
        [Code]
            File Name: inspect.py
            Object Name: getlineno
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 1
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'f_lineno'
            [Var Names]
                'frame'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get the line number from a frame object, allowing for optimization.'
            [Disassembly]
                0       LOAD_FAST                       0: frame
                2       LOAD_ATTR                       0: f_lineno
                4       RETURN_VALUE                    
        'getlineno'
        'FrameInfo'
        (
            'frame'
        )
        [Code]
            File Name: inspect.py
            Object Name: getouterframes
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getframeinfo'
                'append'
                'FrameInfo'
                'f_back'
            [Var Names]
                'frame'
                'context'
                'framelist'
                'frameinfo'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get a list of records for a frame and all higher (calling) frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context.'
            [Disassembly]
                0       BUILD_LIST                      0
                2       STORE_FAST                      2: framelist
                4       LOAD_FAST                       0: frame
                6       POP_JUMP_IF_FALSE               24 (to 48)
                8       LOAD_FAST                       0: frame
                10      BUILD_TUPLE                     1
                12      LOAD_GLOBAL                     0: getframeinfo
                14      LOAD_FAST                       0: frame
                16      LOAD_FAST                       1: context
                18      CALL_FUNCTION                   2
                20      BINARY_ADD                      
                22      STORE_FAST                      3: frameinfo
                24      LOAD_FAST                       2: framelist
                26      LOAD_METHOD                     1: append
                28      LOAD_GLOBAL                     2: FrameInfo
                30      LOAD_FAST                       3: frameinfo
                32      CALL_FUNCTION_EX                0
                34      CALL_METHOD                     1
                36      POP_TOP                         
                38      LOAD_FAST                       0: frame
                40      LOAD_ATTR                       3: f_back
                42      STORE_FAST                      0: frame
                44      LOAD_FAST                       0: frame
                46      POP_JUMP_IF_TRUE                4 (to 8)
                48      LOAD_FAST                       2: framelist
                50      RETURN_VALUE                    
        'getouterframes'
        [Code]
            File Name: inspect.py
            Object Name: getinnerframes
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'tb_frame'
                'getframeinfo'
                'append'
                'FrameInfo'
                'tb_next'
            [Var Names]
                'tb'
                'context'
                'framelist'
                'frameinfo'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Get a list of records for a traceback's frame and all lower frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context."
            [Disassembly]
                0       BUILD_LIST                      0
                2       STORE_FAST                      2: framelist
                4       LOAD_FAST                       0: tb
                6       POP_JUMP_IF_FALSE               25 (to 50)
                8       LOAD_FAST                       0: tb
                10      LOAD_ATTR                       0: tb_frame
                12      BUILD_TUPLE                     1
                14      LOAD_GLOBAL                     1: getframeinfo
                16      LOAD_FAST                       0: tb
                18      LOAD_FAST                       1: context
                20      CALL_FUNCTION                   2
                22      BINARY_ADD                      
                24      STORE_FAST                      3: frameinfo
                26      LOAD_FAST                       2: framelist
                28      LOAD_METHOD                     2: append
                30      LOAD_GLOBAL                     3: FrameInfo
                32      LOAD_FAST                       3: frameinfo
                34      CALL_FUNCTION_EX                0
                36      CALL_METHOD                     1
                38      POP_TOP                         
                40      LOAD_FAST                       0: tb
                42      LOAD_ATTR                       4: tb_next
                44      STORE_FAST                      0: tb
                46      LOAD_FAST                       0: tb
                48      POP_JUMP_IF_TRUE                4 (to 8)
                50      LOAD_FAST                       2: framelist
                52      RETURN_VALUE                    
        'getinnerframes'
        [Code]
            File Name: inspect.py
            Object Name: currentframe
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'hasattr'
                'sys'
                '_getframe'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return the frame of the caller or None if this is not possible.'
                '_getframe'
                1
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: hasattr
                2       LOAD_GLOBAL                     1: sys
                4       LOAD_CONST                      1: '_getframe'
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               10 (to 20)
                10      LOAD_GLOBAL                     1: sys
                12      LOAD_METHOD                     2: _getframe
                14      LOAD_CONST                      2: 1
                16      CALL_METHOD                     1
                18      RETURN_VALUE                    
                20      LOAD_CONST                      3: None
                22      RETURN_VALUE                    
        'currentframe'
        [Code]
            File Name: inspect.py
            Object Name: stack
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getouterframes'
                'sys'
                '_getframe'
            [Var Names]
                'context'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Return a list of records for the stack above the caller's frame."
                1
            [Disassembly]
                0       LOAD_GLOBAL                     0: getouterframes
                2       LOAD_GLOBAL                     1: sys
                4       LOAD_METHOD                     2: _getframe
                6       LOAD_CONST                      1: 1
                8       CALL_METHOD                     1
                10      LOAD_FAST                       0: context
                12      CALL_FUNCTION                   2
                14      RETURN_VALUE                    
        'stack'
        [Code]
            File Name: inspect.py
            Object Name: trace
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getinnerframes'
                'sys'
                'exc_info'
            [Var Names]
                'context'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return a list of records for the stack below the current exception.'
                2
            [Disassembly]
                0       LOAD_GLOBAL                     0: getinnerframes
                2       LOAD_GLOBAL                     1: sys
                4       LOAD_METHOD                     2: exc_info
                6       CALL_METHOD                     0
                8       LOAD_CONST                      1: 2
                10      BINARY_SUBSCR                   
                12      LOAD_FAST                       0: context
                14      CALL_FUNCTION                   2
                16      RETURN_VALUE                    
        'trace'
        [Code]
            File Name: inspect.py
            Object Name: _static_getmro
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'type'
                '__dict__'
                '__get__'
            [Var Names]
                'klass'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '__mro__'
            [Disassembly]
                0       LOAD_GLOBAL                     0: type
                2       LOAD_ATTR                       1: __dict__
                4       LOAD_CONST                      1: '__mro__'
                6       BINARY_SUBSCR                   
                8       LOAD_METHOD                     2: __get__
                10      LOAD_FAST                       0: klass
                12      CALL_METHOD                     1
                14      RETURN_VALUE                    
        '_static_getmro'
        [Code]
            File Name: inspect.py
            Object Name: _check_instance
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'object'
                '__getattribute__'
                'AttributeError'
                'dict'
                'get'
                '_sentinel'
            [Var Names]
                'obj'
                'attr'
                'instance_dict'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '__dict__'
            [Disassembly]
                0       BUILD_MAP                       0
                2       STORE_FAST                      2: instance_dict
                4       SETUP_FINALLY                   8 (to 22)
                6       LOAD_GLOBAL                     0: object
                8       LOAD_METHOD                     1: __getattribute__
                10      LOAD_FAST                       0: obj
                12      LOAD_CONST                      1: '__dict__'
                14      CALL_METHOD                     2
                16      STORE_FAST                      2: instance_dict
                18      POP_BLOCK                       
                20      JUMP_FORWARD                    9 (to 40)
                22      DUP_TOP                         
                24      LOAD_GLOBAL                     2: AttributeError
                26      JUMP_IF_NOT_EXC_MATCH           19 (to 38)
                28      POP_TOP                         
                30      POP_TOP                         
                32      POP_TOP                         
                34      POP_EXCEPT                      
                36      JUMP_FORWARD                    1 (to 40)
                38      RERAISE                         0
                40      LOAD_GLOBAL                     3: dict
                42      LOAD_METHOD                     4: get
                44      LOAD_FAST                       2: instance_dict
                46      LOAD_FAST                       1: attr
                48      LOAD_GLOBAL                     5: _sentinel
                50      CALL_METHOD                     3
                52      RETURN_VALUE                    
        '_check_instance'
        [Code]
            File Name: inspect.py
            Object Name: _check_class
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_static_getmro'
                '_shadowed_dict'
                'type'
                '_sentinel'
                '__dict__'
                'KeyError'
            [Var Names]
                'klass'
                'attr'
                'entry'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: _static_getmro
                2       LOAD_FAST                       0: klass
                4       CALL_FUNCTION                   1
                6       GET_ITER                        
                8       FOR_ITER                        28 (to 66)
                10      STORE_FAST                      2: entry
                12      LOAD_GLOBAL                     1: _shadowed_dict
                14      LOAD_GLOBAL                     2: type
                16      LOAD_FAST                       2: entry
                18      CALL_FUNCTION                   1
                20      CALL_FUNCTION                   1
                22      LOAD_GLOBAL                     3: _sentinel
                24      IS_OP                           0 (is)
                26      POP_JUMP_IF_FALSE               32 (to 64)
                28      SETUP_FINALLY                   8 (to 46)
                30      LOAD_FAST                       2: entry
                32      LOAD_ATTR                       4: __dict__
                34      LOAD_FAST                       1: attr
                36      BINARY_SUBSCR                   
                38      POP_BLOCK                       
                40      ROT_TWO                         
                42      POP_TOP                         
                44      RETURN_VALUE                    
                46      DUP_TOP                         
                48      LOAD_GLOBAL                     5: KeyError
                50      JUMP_IF_NOT_EXC_MATCH           31 (to 62)
                52      POP_TOP                         
                54      POP_TOP                         
                56      POP_TOP                         
                58      POP_EXCEPT                      
                60      JUMP_ABSOLUTE                   4 (to 8)
                62      RERAISE                         0
                64      JUMP_ABSOLUTE                   4 (to 8)
                66      LOAD_GLOBAL                     3: _sentinel
                68      RETURN_VALUE                    
        '_check_class'
        [Code]
            File Name: inspect.py
            Object Name: _is_type
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_static_getmro'
                'TypeError'
            [Var Names]
                'obj'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                False
                True
            [Disassembly]
                0       SETUP_FINALLY                   7 (to 16)
                2       LOAD_GLOBAL                     0: _static_getmro
                4       LOAD_FAST                       0: obj
                6       CALL_FUNCTION                   1
                8       POP_TOP                         
                10      POP_BLOCK                       
                12      LOAD_CONST                      2: True
                14      RETURN_VALUE                    
                16      DUP_TOP                         
                18      LOAD_GLOBAL                     1: TypeError
                20      JUMP_IF_NOT_EXC_MATCH           17 (to 34)
                22      POP_TOP                         
                24      POP_TOP                         
                26      POP_TOP                         
                28      POP_EXCEPT                      
                30      LOAD_CONST                      1: False
                32      RETURN_VALUE                    
                34      RERAISE                         0
        '_is_type'
        [Code]
            File Name: inspect.py
            Object Name: _shadowed_dict
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'type'
                '__dict__'
                '_static_getmro'
                '__get__'
                'KeyError'
                'types'
                'GetSetDescriptorType'
                '__name__'
                '__objclass__'
                '_sentinel'
            [Var Names]
                'klass'
                'dict_attr'
                'entry'
                'class_dict'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                '__dict__'
            [Disassembly]
                0       LOAD_GLOBAL                     0: type
                2       LOAD_ATTR                       1: __dict__
                4       LOAD_CONST                      1: '__dict__'
                6       BINARY_SUBSCR                   
                8       STORE_FAST                      1: dict_attr
                10      LOAD_GLOBAL                     2: _static_getmro
                12      LOAD_FAST                       0: klass
                14      CALL_FUNCTION                   1
                16      GET_ITER                        
                18      FOR_ITER                        42 (to 104)
                20      STORE_FAST                      2: entry
                22      SETUP_FINALLY                   9 (to 42)
                24      LOAD_FAST                       1: dict_attr
                26      LOAD_METHOD                     3: __get__
                28      LOAD_FAST                       2: entry
                30      CALL_METHOD                     1
                32      LOAD_CONST                      1: '__dict__'
                34      BINARY_SUBSCR                   
                36      STORE_FAST                      3: class_dict
                38      POP_BLOCK                       
                40      JUMP_FORWARD                    9 (to 60)
                42      DUP_TOP                         
                44      LOAD_GLOBAL                     4: KeyError
                46      JUMP_IF_NOT_EXC_MATCH           29 (to 58)
                48      POP_TOP                         
                50      POP_TOP                         
                52      POP_TOP                         
                54      POP_EXCEPT                      
                56      JUMP_ABSOLUTE                   9 (to 18)
                58      RERAISE                         0
                60      LOAD_GLOBAL                     0: type
                62      LOAD_FAST                       3: class_dict
                64      CALL_FUNCTION                   1
                66      LOAD_GLOBAL                     5: types
                68      LOAD_ATTR                       6: GetSetDescriptorType
                70      IS_OP                           0 (is)
                72      POP_JUMP_IF_FALSE               47 (to 94)
                74      LOAD_FAST                       3: class_dict
                76      LOAD_ATTR                       7: __name__
                78      LOAD_CONST                      1: '__dict__'
                80      COMPARE_OP                      2 (==)
                82      POP_JUMP_IF_FALSE               47 (to 94)
                84      LOAD_FAST                       3: class_dict
                86      LOAD_ATTR                       8: __objclass__
                88      LOAD_FAST                       2: entry
                90      IS_OP                           0 (is)
                92      POP_JUMP_IF_TRUE                51 (to 102)
                94      LOAD_FAST                       3: class_dict
                96      ROT_TWO                         
                98      POP_TOP                         
                100     RETURN_VALUE                    
                102     JUMP_ABSOLUTE                   9 (to 18)
                104     LOAD_GLOBAL                     9: _sentinel
                106     RETURN_VALUE                    
        '_shadowed_dict'
        [Code]
            File Name: inspect.py
            Object Name: getattr_static
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_sentinel'
                '_is_type'
                'type'
                '_shadowed_dict'
                'types'
                'MemberDescriptorType'
                '_check_instance'
                '_check_class'
                '_static_getmro'
                '__dict__'
                'KeyError'
                'AttributeError'
            [Var Names]
                'obj'
                'attr'
                'default'
                'instance_result'
                'klass'
                'dict_attr'
                'klass_result'
                'entry'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Retrieve attributes without triggering dynamic lookup via the\n       descriptor protocol,  __getattr__ or __getattribute__.\n\n       Note: this function may not be able to retrieve all attributes\n       that getattr can fetch (like dynamically created attributes)\n       and may find attributes that getattr can't (like descriptors\n       that raise AttributeError). It can also return descriptor objects\n       instead of instance members in some cases. See the\n       documentation for details.\n    "
                '__get__'
                '__set__'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _sentinel
                2       STORE_FAST                      3: instance_result
                4       LOAD_GLOBAL                     1: _is_type
                6       LOAD_FAST                       0: obj
                8       CALL_FUNCTION                   1
                10      POP_JUMP_IF_TRUE                31 (to 62)
                12      LOAD_GLOBAL                     2: type
                14      LOAD_FAST                       0: obj
                16      CALL_FUNCTION                   1
                18      STORE_FAST                      4: klass
                20      LOAD_GLOBAL                     3: _shadowed_dict
                22      LOAD_FAST                       4: klass
                24      CALL_FUNCTION                   1
                26      STORE_FAST                      5: dict_attr
                28      LOAD_FAST                       5: dict_attr
                30      LOAD_GLOBAL                     0: _sentinel
                32      IS_OP                           0 (is)
                34      POP_JUMP_IF_TRUE                25 (to 50)
                36      LOAD_GLOBAL                     2: type
                38      LOAD_FAST                       5: dict_attr
                40      CALL_FUNCTION                   1
                42      LOAD_GLOBAL                     4: types
                44      LOAD_ATTR                       5: MemberDescriptorType
                46      IS_OP                           0 (is)
                48      POP_JUMP_IF_FALSE               30 (to 60)
                50      LOAD_GLOBAL                     6: _check_instance
                52      LOAD_FAST                       0: obj
                54      LOAD_FAST                       1: attr
                56      CALL_FUNCTION                   2
                58      STORE_FAST                      3: instance_result
                60      JUMP_FORWARD                    2 (to 66)
                62      LOAD_FAST                       0: obj
                64      STORE_FAST                      4: klass
                66      LOAD_GLOBAL                     7: _check_class
                68      LOAD_FAST                       4: klass
                70      LOAD_FAST                       1: attr
                72      CALL_FUNCTION                   2
                74      STORE_FAST                      6: klass_result
                76      LOAD_FAST                       3: instance_result
                78      LOAD_GLOBAL                     0: _sentinel
                80      IS_OP                           1 (is not)
                82      POP_JUMP_IF_FALSE               66 (to 132)
                84      LOAD_FAST                       6: klass_result
                86      LOAD_GLOBAL                     0: _sentinel
                88      IS_OP                           1 (is not)
                90      POP_JUMP_IF_FALSE               66 (to 132)
                92      LOAD_GLOBAL                     7: _check_class
                94      LOAD_GLOBAL                     2: type
                96      LOAD_FAST                       6: klass_result
                98      CALL_FUNCTION                   1
                100     LOAD_CONST                      1: '__get__'
                102     CALL_FUNCTION                   2
                104     LOAD_GLOBAL                     0: _sentinel
                106     IS_OP                           1 (is not)
                108     POP_JUMP_IF_FALSE               66 (to 132)
                110     LOAD_GLOBAL                     7: _check_class
                112     LOAD_GLOBAL                     2: type
                114     LOAD_FAST                       6: klass_result
                116     CALL_FUNCTION                   1
                118     LOAD_CONST                      2: '__set__'
                120     CALL_FUNCTION                   2
                122     LOAD_GLOBAL                     0: _sentinel
                124     IS_OP                           1 (is not)
                126     POP_JUMP_IF_FALSE               66 (to 132)
                128     LOAD_FAST                       6: klass_result
                130     RETURN_VALUE                    
                132     LOAD_FAST                       3: instance_result
                134     LOAD_GLOBAL                     0: _sentinel
                136     IS_OP                           1 (is not)
                138     POP_JUMP_IF_FALSE               72 (to 144)
                140     LOAD_FAST                       3: instance_result
                142     RETURN_VALUE                    
                144     LOAD_FAST                       6: klass_result
                146     LOAD_GLOBAL                     0: _sentinel
                148     IS_OP                           1 (is not)
                150     POP_JUMP_IF_FALSE               78 (to 156)
                152     LOAD_FAST                       6: klass_result
                154     RETURN_VALUE                    
                156     LOAD_FAST                       0: obj
                158     LOAD_FAST                       4: klass
                160     IS_OP                           0 (is)
                162     POP_JUMP_IF_FALSE               117 (to 234)
                164     LOAD_GLOBAL                     8: _static_getmro
                166     LOAD_GLOBAL                     2: type
                168     LOAD_FAST                       4: klass
                170     CALL_FUNCTION                   1
                172     CALL_FUNCTION                   1
                174     GET_ITER                        
                176     FOR_ITER                        28 (to 234)
                178     STORE_FAST                      7: entry
                180     LOAD_GLOBAL                     3: _shadowed_dict
                182     LOAD_GLOBAL                     2: type
                184     LOAD_FAST                       7: entry
                186     CALL_FUNCTION                   1
                188     CALL_FUNCTION                   1
                190     LOAD_GLOBAL                     0: _sentinel
                192     IS_OP                           0 (is)
                194     POP_JUMP_IF_FALSE               116 (to 232)
                196     SETUP_FINALLY                   8 (to 214)
                198     LOAD_FAST                       7: entry
                200     LOAD_ATTR                       9: __dict__
                202     LOAD_FAST                       1: attr
                204     BINARY_SUBSCR                   
                206     POP_BLOCK                       
                208     ROT_TWO                         
                210     POP_TOP                         
                212     RETURN_VALUE                    
                214     DUP_TOP                         
                216     LOAD_GLOBAL                     10: KeyError
                218     JUMP_IF_NOT_EXC_MATCH           115 (to 230)
                220     POP_TOP                         
                222     POP_TOP                         
                224     POP_TOP                         
                226     POP_EXCEPT                      
                228     JUMP_ABSOLUTE                   88 (to 176)
                230     RERAISE                         0
                232     JUMP_ABSOLUTE                   88 (to 176)
                234     LOAD_FAST                       2: default
                236     LOAD_GLOBAL                     0: _sentinel
                238     IS_OP                           1 (is not)
                240     POP_JUMP_IF_FALSE               123 (to 246)
                242     LOAD_FAST                       2: default
                244     RETURN_VALUE                    
                246     LOAD_GLOBAL                     11: AttributeError
                248     LOAD_FAST                       1: attr
                250     CALL_FUNCTION                   1
                252     RAISE_VARARGS                   1
        'getattr_static'
        'GEN_CREATED'
        'GEN_RUNNING'
        'GEN_SUSPENDED'
        'GEN_CLOSED'
        [Code]
            File Name: inspect.py
            Object Name: getgeneratorstate
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'gi_running'
                'GEN_RUNNING'
                'gi_frame'
                'GEN_CLOSED'
                'f_lasti'
                'GEN_CREATED'
                'GEN_SUSPENDED'
            [Var Names]
                'generator'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get current state of a generator-iterator.\n\n    Possible states are:\n      GEN_CREATED: Waiting to start execution.\n      GEN_RUNNING: Currently being executed by the interpreter.\n      GEN_SUSPENDED: Currently suspended at a yield expression.\n      GEN_CLOSED: Execution has completed.\n    '
                None
                -1
            [Disassembly]
                0       LOAD_FAST                       0: generator
                2       LOAD_ATTR                       0: gi_running
                4       POP_JUMP_IF_FALSE               5 (to 10)
                6       LOAD_GLOBAL                     1: GEN_RUNNING
                8       RETURN_VALUE                    
                10      LOAD_FAST                       0: generator
                12      LOAD_ATTR                       2: gi_frame
                14      LOAD_CONST                      1: None
                16      IS_OP                           0 (is)
                18      POP_JUMP_IF_FALSE               12 (to 24)
                20      LOAD_GLOBAL                     3: GEN_CLOSED
                22      RETURN_VALUE                    
                24      LOAD_FAST                       0: generator
                26      LOAD_ATTR                       2: gi_frame
                28      LOAD_ATTR                       4: f_lasti
                30      LOAD_CONST                      2: -1
                32      COMPARE_OP                      2 (==)
                34      POP_JUMP_IF_FALSE               20 (to 40)
                36      LOAD_GLOBAL                     5: GEN_CREATED
                38      RETURN_VALUE                    
                40      LOAD_GLOBAL                     6: GEN_SUSPENDED
                42      RETURN_VALUE                    
        'getgeneratorstate'
        [Code]
            File Name: inspect.py
            Object Name: getgeneratorlocals
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isgenerator'
                'TypeError'
                'format'
                'getattr'
                'gi_frame'
                'f_locals'
            [Var Names]
                'generator'
                'frame'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Get the mapping of generator local variables to their current values.\n\n    A dict is returned, with the keys the local variable names and values the\n    bound values.'
                '{!r} is not a Python generator'
                'gi_frame'
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: isgenerator
                2       LOAD_FAST                       0: generator
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_TRUE                11 (to 22)
                8       LOAD_GLOBAL                     1: TypeError
                10      LOAD_CONST                      1: '{!r} is not a Python generator'
                12      LOAD_METHOD                     2: format
                14      LOAD_FAST                       0: generator
                16      CALL_METHOD                     1
                18      CALL_FUNCTION                   1
                20      RAISE_VARARGS                   1
                22      LOAD_GLOBAL                     3: getattr
                24      LOAD_FAST                       0: generator
                26      LOAD_CONST                      2: 'gi_frame'
                28      LOAD_CONST                      3: None
                30      CALL_FUNCTION                   3
                32      STORE_FAST                      1: frame
                34      LOAD_FAST                       1: frame
                36      LOAD_CONST                      3: None
                38      IS_OP                           1 (is not)
                40      POP_JUMP_IF_FALSE               25 (to 50)
                42      LOAD_FAST                       0: generator
                44      LOAD_ATTR                       4: gi_frame
                46      LOAD_ATTR                       5: f_locals
                48      RETURN_VALUE                    
                50      BUILD_MAP                       0
                52      RETURN_VALUE                    
        'getgeneratorlocals'
        'CORO_CREATED'
        'CORO_RUNNING'
        'CORO_SUSPENDED'
        'CORO_CLOSED'
        [Code]
            File Name: inspect.py
            Object Name: getcoroutinestate
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 2
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'cr_running'
                'CORO_RUNNING'
                'cr_frame'
                'CORO_CLOSED'
                'f_lasti'
                'CORO_CREATED'
                'CORO_SUSPENDED'
            [Var Names]
                'coroutine'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get current state of a coroutine object.\n\n    Possible states are:\n      CORO_CREATED: Waiting to start execution.\n      CORO_RUNNING: Currently being executed by the interpreter.\n      CORO_SUSPENDED: Currently suspended at an await expression.\n      CORO_CLOSED: Execution has completed.\n    '
                None
                -1
            [Disassembly]
                0       LOAD_FAST                       0: coroutine
                2       LOAD_ATTR                       0: cr_running
                4       POP_JUMP_IF_FALSE               5 (to 10)
                6       LOAD_GLOBAL                     1: CORO_RUNNING
                8       RETURN_VALUE                    
                10      LOAD_FAST                       0: coroutine
                12      LOAD_ATTR                       2: cr_frame
                14      LOAD_CONST                      1: None
                16      IS_OP                           0 (is)
                18      POP_JUMP_IF_FALSE               12 (to 24)
                20      LOAD_GLOBAL                     3: CORO_CLOSED
                22      RETURN_VALUE                    
                24      LOAD_FAST                       0: coroutine
                26      LOAD_ATTR                       2: cr_frame
                28      LOAD_ATTR                       4: f_lasti
                30      LOAD_CONST                      2: -1
                32      COMPARE_OP                      2 (==)
                34      POP_JUMP_IF_FALSE               20 (to 40)
                36      LOAD_GLOBAL                     5: CORO_CREATED
                38      RETURN_VALUE                    
                40      LOAD_GLOBAL                     6: CORO_SUSPENDED
                42      RETURN_VALUE                    
        'getcoroutinestate'
        [Code]
            File Name: inspect.py
            Object Name: getcoroutinelocals
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getattr'
                'f_locals'
            [Var Names]
                'coroutine'
                'frame'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Get the mapping of coroutine local variables to their current values.\n\n    A dict is returned, with the keys the local variable names and values the\n    bound values.'
                'cr_frame'
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: getattr
                2       LOAD_FAST                       0: coroutine
                4       LOAD_CONST                      1: 'cr_frame'
                6       LOAD_CONST                      2: None
                8       CALL_FUNCTION                   3
                10      STORE_FAST                      1: frame
                12      LOAD_FAST                       1: frame
                14      LOAD_CONST                      2: None
                16      IS_OP                           1 (is not)
                18      POP_JUMP_IF_FALSE               13 (to 26)
                20      LOAD_FAST                       1: frame
                22      LOAD_ATTR                       1: f_locals
                24      RETURN_VALUE                    
                26      BUILD_MAP                       0
                28      RETURN_VALUE                    
        'getcoroutinelocals'
        'from_bytes'
        [Code]
            File Name: inspect.py
            Object Name: _signature_get_user_defined_method
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getattr'
                'AttributeError'
                'isinstance'
                '_NonUserDefinedCallables'
            [Var Names]
                'cls'
                'method_name'
                'meth'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Private helper. Checks if ``cls`` has an attribute\n    named ``method_name`` and returns it only if it is a\n    pure python function.\n    '
                None
            [Disassembly]
                0       SETUP_FINALLY                   7 (to 16)
                2       LOAD_GLOBAL                     0: getattr
                4       LOAD_FAST                       0: cls
                6       LOAD_FAST                       1: method_name
                8       CALL_FUNCTION                   2
                10      STORE_FAST                      2: meth
                12      POP_BLOCK                       
                14      JUMP_FORWARD                    10 (to 36)
                16      DUP_TOP                         
                18      LOAD_GLOBAL                     1: AttributeError
                20      JUMP_IF_NOT_EXC_MATCH           17 (to 34)
                22      POP_TOP                         
                24      POP_TOP                         
                26      POP_TOP                         
                28      POP_EXCEPT                      
                30      LOAD_CONST                      1: None
                32      RETURN_VALUE                    
                34      RERAISE                         0
                36      LOAD_GLOBAL                     2: isinstance
                38      LOAD_FAST                       2: meth
                40      LOAD_GLOBAL                     3: _NonUserDefinedCallables
                42      CALL_FUNCTION                   2
                44      POP_JUMP_IF_TRUE                25 (to 50)
                46      LOAD_FAST                       2: meth
                48      RETURN_VALUE                    
                50      LOAD_CONST                      1: None
                52      RETURN_VALUE                    
        '_signature_get_user_defined_method'
        [Code]
            File Name: inspect.py
            Object Name: _signature_get_partial
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 15
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'parameters'
                'OrderedDict'
                'items'
                'args'
                'keywords'
                'bind_partial'
                'TypeError'
                'format'
                'ValueError'
                'arguments'
                'KeyError'
                'kind'
                '_POSITIONAL_ONLY'
                'pop'
                '_POSITIONAL_OR_KEYWORD'
                'replace'
                'name'
                '_KEYWORD_ONLY'
                'move_to_end'
                '_VAR_KEYWORD'
                '_VAR_POSITIONAL'
                'values'
            [Var Names]
                'wrapped_sig'
                'partial'
                'extra_args'
                'old_params'
                'new_params'
                'partial_args'
                'partial_keywords'
                'ba'
                'ex'
                'msg'
                'transform_to_kwonly'
                'param_name'
                'param'
                'arg_value'
                'new_param'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Private helper to calculate how 'wrapped_sig' signature will\n    look like after applying a 'functools.partial' object (or alike)\n    on it.\n    "
                (
                )
                'partial object {!r} has incorrect arguments'
                None
                False
                True
                (
                    'default'
                )
                (
                    'kind'
                )
                (
                    'parameters'
                )
            [Disassembly]
                0       LOAD_FAST                       0: wrapped_sig
                2       LOAD_ATTR                       0: parameters
                4       STORE_FAST                      3: old_params
                6       LOAD_GLOBAL                     1: OrderedDict
                8       LOAD_FAST                       3: old_params
                10      LOAD_METHOD                     2: items
                12      CALL_METHOD                     0
                14      CALL_FUNCTION                   1
                16      STORE_FAST                      4: new_params
                18      LOAD_FAST                       1: partial
                20      LOAD_ATTR                       3: args
                22      JUMP_IF_TRUE_OR_POP             13 (to 26)
                24      LOAD_CONST                      1: ()
                26      STORE_FAST                      5: partial_args
                28      LOAD_FAST                       1: partial
                30      LOAD_ATTR                       4: keywords
                32      JUMP_IF_TRUE_OR_POP             18 (to 36)
                34      BUILD_MAP                       0
                36      STORE_FAST                      6: partial_keywords
                38      LOAD_FAST                       2: extra_args
                40      POP_JUMP_IF_FALSE               25 (to 50)
                42      LOAD_FAST                       2: extra_args
                44      LOAD_FAST                       5: partial_args
                46      BINARY_ADD                      
                48      STORE_FAST                      5: partial_args
                50      SETUP_FINALLY                   10 (to 72)
                52      LOAD_FAST                       0: wrapped_sig
                54      LOAD_ATTR                       5: bind_partial
                56      LOAD_FAST                       5: partial_args
                58      BUILD_MAP                       0
                60      LOAD_FAST                       6: partial_keywords
                62      DICT_MERGE                      1
                64      CALL_FUNCTION_EX                1
                66      STORE_FAST                      7: ba
                68      POP_BLOCK                       
                70      JUMP_FORWARD                    22 (to 116)
                72      DUP_TOP                         
                74      LOAD_GLOBAL                     6: TypeError
                76      JUMP_IF_NOT_EXC_MATCH           57 (to 114)
                78      POP_TOP                         
                80      STORE_FAST                      8: ex
                82      POP_TOP                         
                84      SETUP_FINALLY                   10 (to 106)
                86      LOAD_CONST                      2: 'partial object {!r} has incorrect arguments'
                88      LOAD_METHOD                     7: format
                90      LOAD_FAST                       1: partial
                92      CALL_METHOD                     1
                94      STORE_FAST                      9: msg
                96      LOAD_GLOBAL                     8: ValueError
                98      LOAD_FAST                       9: msg
                100     CALL_FUNCTION                   1
                102     LOAD_FAST                       8: ex
                104     RAISE_VARARGS                   2
                106     LOAD_CONST                      3: None
                108     STORE_FAST                      8: ex
                110     DELETE_FAST                     8: ex
                112     RERAISE                         1
                114     RERAISE                         0
                116     LOAD_CONST                      4: False
                118     STORE_FAST                      10: transform_to_kwonly
                120     LOAD_FAST                       3: old_params
                122     LOAD_METHOD                     2: items
                124     CALL_METHOD                     0
                126     GET_ITER                        
                128     FOR_ITER                        128 (to 386)
                130     UNPACK_SEQUENCE                 2
                132     STORE_FAST                      11: param_name
                134     STORE_FAST                      12: param
                136     SETUP_FINALLY                   7 (to 152)
                138     LOAD_FAST                       7: ba
                140     LOAD_ATTR                       9: arguments
                142     LOAD_FAST                       11: param_name
                144     BINARY_SUBSCR                   
                146     STORE_FAST                      13: arg_value
                148     POP_BLOCK                       
                150     JUMP_FORWARD                    9 (to 170)
                152     DUP_TOP                         
                154     LOAD_GLOBAL                     10: KeyError
                156     JUMP_IF_NOT_EXC_MATCH           84 (to 168)
                158     POP_TOP                         
                160     POP_TOP                         
                162     POP_TOP                         
                164     POP_EXCEPT                      
                166     JUMP_FORWARD                    52 (to 272)
                168     RERAISE                         0
                170     LOAD_FAST                       12: param
                172     LOAD_ATTR                       11: kind
                174     LOAD_GLOBAL                     12: _POSITIONAL_ONLY
                176     IS_OP                           0 (is)
                178     POP_JUMP_IF_FALSE               96 (to 192)
                180     LOAD_FAST                       4: new_params
                182     LOAD_METHOD                     13: pop
                184     LOAD_FAST                       11: param_name
                186     CALL_METHOD                     1
                188     POP_TOP                         
                190     JUMP_ABSOLUTE                   64 (to 128)
                192     LOAD_FAST                       12: param
                194     LOAD_ATTR                       11: kind
                196     LOAD_GLOBAL                     14: _POSITIONAL_OR_KEYWORD
                198     IS_OP                           0 (is)
                200     POP_JUMP_IF_FALSE               123 (to 246)
                202     LOAD_FAST                       11: param_name
                204     LOAD_FAST                       6: partial_keywords
                206     CONTAINS_OP                     0 (in)
                208     POP_JUMP_IF_FALSE               116 (to 232)
                210     LOAD_CONST                      5: True
                212     STORE_FAST                      10: transform_to_kwonly
                214     LOAD_FAST                       12: param
                216     LOAD_ATTR                       15: replace
                218     LOAD_FAST                       13: arg_value
                220     LOAD_CONST                      6: ('default',)
                222     CALL_FUNCTION_KW                1
                224     LOAD_FAST                       4: new_params
                226     LOAD_FAST                       11: param_name
                228     STORE_SUBSCR                    
                230     JUMP_FORWARD                    7 (to 246)
                232     LOAD_FAST                       4: new_params
                234     LOAD_METHOD                     13: pop
                236     LOAD_FAST                       12: param
                238     LOAD_ATTR                       16: name
                240     CALL_METHOD                     1
                242     POP_TOP                         
                244     JUMP_ABSOLUTE                   64 (to 128)
                246     LOAD_FAST                       12: param
                248     LOAD_ATTR                       11: kind
                250     LOAD_GLOBAL                     17: _KEYWORD_ONLY
                252     IS_OP                           0 (is)
                254     POP_JUMP_IF_FALSE               136 (to 272)
                256     LOAD_FAST                       12: param
                258     LOAD_ATTR                       15: replace
                260     LOAD_FAST                       13: arg_value
                262     LOAD_CONST                      6: ('default',)
                264     CALL_FUNCTION_KW                1
                266     LOAD_FAST                       4: new_params
                268     LOAD_FAST                       11: param_name
                270     STORE_SUBSCR                    
                272     LOAD_FAST                       10: transform_to_kwonly
                274     POP_JUMP_IF_FALSE               192 (to 384)
                276     LOAD_FAST                       12: param
                278     LOAD_ATTR                       11: kind
                280     LOAD_GLOBAL                     12: _POSITIONAL_ONLY
                282     IS_OP                           1 (is not)
                284     POP_JUMP_IF_TRUE                145 (to 290)
                286     LOAD_ASSERTION_ERROR            
                288     RAISE_VARARGS                   1
                290     LOAD_FAST                       12: param
                292     LOAD_ATTR                       11: kind
                294     LOAD_GLOBAL                     14: _POSITIONAL_OR_KEYWORD
                296     IS_OP                           0 (is)
                298     POP_JUMP_IF_FALSE               168 (to 336)
                300     LOAD_FAST                       4: new_params
                302     LOAD_FAST                       11: param_name
                304     BINARY_SUBSCR                   
                306     LOAD_ATTR                       15: replace
                308     LOAD_GLOBAL                     17: _KEYWORD_ONLY
                310     LOAD_CONST                      7: ('kind',)
                312     CALL_FUNCTION_KW                1
                314     STORE_FAST                      14: new_param
                316     LOAD_FAST                       14: new_param
                318     LOAD_FAST                       4: new_params
                320     LOAD_FAST                       11: param_name
                322     STORE_SUBSCR                    
                324     LOAD_FAST                       4: new_params
                326     LOAD_METHOD                     18: move_to_end
                328     LOAD_FAST                       11: param_name
                330     CALL_METHOD                     1
                332     POP_TOP                         
                334     JUMP_ABSOLUTE                   64 (to 128)
                336     LOAD_FAST                       12: param
                338     LOAD_ATTR                       11: kind
                340     LOAD_GLOBAL                     17: _KEYWORD_ONLY
                342     LOAD_GLOBAL                     19: _VAR_KEYWORD
                344     BUILD_TUPLE                     2
                346     CONTAINS_OP                     0 (in)
                348     POP_JUMP_IF_FALSE               181 (to 362)
                350     LOAD_FAST                       4: new_params
                352     LOAD_METHOD                     18: move_to_end
                354     LOAD_FAST                       11: param_name
                356     CALL_METHOD                     1
                358     POP_TOP                         
                360     JUMP_ABSOLUTE                   64 (to 128)
                362     LOAD_FAST                       12: param
                364     LOAD_ATTR                       11: kind
                366     LOAD_GLOBAL                     20: _VAR_POSITIONAL
                368     IS_OP                           0 (is)
                370     POP_JUMP_IF_FALSE               192 (to 384)
                372     LOAD_FAST                       4: new_params
                374     LOAD_METHOD                     13: pop
                376     LOAD_FAST                       12: param
                378     LOAD_ATTR                       16: name
                380     CALL_METHOD                     1
                382     POP_TOP                         
                384     JUMP_ABSOLUTE                   64 (to 128)
                386     LOAD_FAST                       0: wrapped_sig
                388     LOAD_ATTR                       15: replace
                390     LOAD_FAST                       4: new_params
                392     LOAD_METHOD                     21: values
                394     CALL_METHOD                     0
                396     LOAD_CONST                      8: ('parameters',)
                398     CALL_FUNCTION_KW                1
                400     RETURN_VALUE                    
        '_signature_get_partial'
        [Code]
            File Name: inspect.py
            Object Name: _signature_bound_method
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'tuple'
                'parameters'
                'values'
                'kind'
                '_VAR_KEYWORD'
                '_KEYWORD_ONLY'
                'ValueError'
                '_POSITIONAL_OR_KEYWORD'
                '_POSITIONAL_ONLY'
                '_VAR_POSITIONAL'
                'replace'
            [Var Names]
                'sig'
                'params'
                'kind'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Private helper to transform signatures for unbound\n    functions to bound methods.\n    '
                0
                'invalid method signature'
                1
                None
                'invalid argument type'
                (
                    'parameters'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: tuple
                2       LOAD_FAST                       0: sig
                4       LOAD_ATTR                       1: parameters
                6       LOAD_METHOD                     2: values
                8       CALL_METHOD                     0
                10      CALL_FUNCTION                   1
                12      STORE_FAST                      1: params
                14      LOAD_FAST                       1: params
                16      POP_JUMP_IF_FALSE               18 (to 36)
                18      LOAD_FAST                       1: params
                20      LOAD_CONST                      1: 0
                22      BINARY_SUBSCR                   
                24      LOAD_ATTR                       3: kind
                26      LOAD_GLOBAL                     4: _VAR_KEYWORD
                28      LOAD_GLOBAL                     5: _KEYWORD_ONLY
                30      BUILD_TUPLE                     2
                32      CONTAINS_OP                     0 (in)
                34      POP_JUMP_IF_FALSE               22 (to 44)
                36      LOAD_GLOBAL                     6: ValueError
                38      LOAD_CONST                      2: 'invalid method signature'
                40      CALL_FUNCTION                   1
                42      RAISE_VARARGS                   1
                44      LOAD_FAST                       1: params
                46      LOAD_CONST                      1: 0
                48      BINARY_SUBSCR                   
                50      LOAD_ATTR                       3: kind
                52      STORE_FAST                      2: kind
                54      LOAD_FAST                       2: kind
                56      LOAD_GLOBAL                     7: _POSITIONAL_OR_KEYWORD
                58      LOAD_GLOBAL                     8: _POSITIONAL_ONLY
                60      BUILD_TUPLE                     2
                62      CONTAINS_OP                     0 (in)
                64      POP_JUMP_IF_FALSE               40 (to 80)
                66      LOAD_FAST                       1: params
                68      LOAD_CONST                      3: 1
                70      LOAD_CONST                      4: None
                72      BUILD_SLICE                     2
                74      BINARY_SUBSCR                   
                76      STORE_FAST                      1: params
                78      JUMP_FORWARD                    8 (to 96)
                80      LOAD_FAST                       2: kind
                82      LOAD_GLOBAL                     9: _VAR_POSITIONAL
                84      IS_OP                           1 (is not)
                86      POP_JUMP_IF_FALSE               48 (to 96)
                88      LOAD_GLOBAL                     6: ValueError
                90      LOAD_CONST                      5: 'invalid argument type'
                92      CALL_FUNCTION                   1
                94      RAISE_VARARGS                   1
                96      LOAD_FAST                       0: sig
                98      LOAD_ATTR                       10: replace
                100     LOAD_FAST                       1: params
                102     LOAD_CONST                      6: ('parameters',)
                104     CALL_FUNCTION_KW                1
                106     RETURN_VALUE                    
        '_signature_bound_method'
        [Code]
            File Name: inspect.py
            Object Name: _signature_is_builtin
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isbuiltin'
                'ismethoddescriptor'
                'isinstance'
                '_NonUserDefinedCallables'
                'type'
                'object'
            [Var Names]
                'obj'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Private helper to test if `obj` is a callable that might\n    support Argument Clinic's __text_signature__ protocol.\n    "
            [Disassembly]
                0       LOAD_GLOBAL                     0: isbuiltin
                2       LOAD_FAST                       0: obj
                4       CALL_FUNCTION                   1
                6       JUMP_IF_TRUE_OR_POP             18 (to 36)
                8       LOAD_GLOBAL                     1: ismethoddescriptor
                10      LOAD_FAST                       0: obj
                12      CALL_FUNCTION                   1
                14      JUMP_IF_TRUE_OR_POP             18 (to 36)
                16      LOAD_GLOBAL                     2: isinstance
                18      LOAD_FAST                       0: obj
                20      LOAD_GLOBAL                     3: _NonUserDefinedCallables
                22      CALL_FUNCTION                   2
                24      JUMP_IF_TRUE_OR_POP             18 (to 36)
                26      LOAD_FAST                       0: obj
                28      LOAD_GLOBAL                     4: type
                30      LOAD_GLOBAL                     5: object
                32      BUILD_TUPLE                     2
                34      CONTAINS_OP                     0 (in)
                36      RETURN_VALUE                    
        '_signature_is_builtin'
        [Code]
            File Name: inspect.py
            Object Name: _signature_is_functionlike
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 6
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'callable'
                'isclass'
                'getattr'
                '_void'
                'isinstance'
                'types'
                'CodeType'
                'str'
                'tuple'
                'dict'
            [Var Names]
                'obj'
                'name'
                'code'
                'defaults'
                'kwdefaults'
                'annotations'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Private helper to test if `obj` is a duck type of FunctionType.\n    A good example of such objects are functions compiled with\n    Cython, which have all attributes that a pure Python function\n    would have, but have their code statically compiled.\n    '
                False
                '__name__'
                None
                '__code__'
                '__defaults__'
                '__kwdefaults__'
                '__annotations__'
            [Disassembly]
                0       LOAD_GLOBAL                     0: callable
                2       LOAD_FAST                       0: obj
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_FALSE               8 (to 16)
                8       LOAD_GLOBAL                     1: isclass
                10      LOAD_FAST                       0: obj
                12      CALL_FUNCTION                   1
                14      POP_JUMP_IF_FALSE               10 (to 20)
                16      LOAD_CONST                      1: False
                18      RETURN_VALUE                    
                20      LOAD_GLOBAL                     2: getattr
                22      LOAD_FAST                       0: obj
                24      LOAD_CONST                      2: '__name__'
                26      LOAD_CONST                      3: None
                28      CALL_FUNCTION                   3
                30      STORE_FAST                      1: name
                32      LOAD_GLOBAL                     2: getattr
                34      LOAD_FAST                       0: obj
                36      LOAD_CONST                      4: '__code__'
                38      LOAD_CONST                      3: None
                40      CALL_FUNCTION                   3
                42      STORE_FAST                      2: code
                44      LOAD_GLOBAL                     2: getattr
                46      LOAD_FAST                       0: obj
                48      LOAD_CONST                      5: '__defaults__'
                50      LOAD_GLOBAL                     3: _void
                52      CALL_FUNCTION                   3
                54      STORE_FAST                      3: defaults
                56      LOAD_GLOBAL                     2: getattr
                58      LOAD_FAST                       0: obj
                60      LOAD_CONST                      6: '__kwdefaults__'
                62      LOAD_GLOBAL                     3: _void
                64      CALL_FUNCTION                   3
                66      STORE_FAST                      4: kwdefaults
                68      LOAD_GLOBAL                     2: getattr
                70      LOAD_FAST                       0: obj
                72      LOAD_CONST                      7: '__annotations__'
                74      LOAD_CONST                      3: None
                76      CALL_FUNCTION                   3
                78      STORE_FAST                      5: annotations
                80      LOAD_GLOBAL                     4: isinstance
                82      LOAD_FAST                       2: code
                84      LOAD_GLOBAL                     5: types
                86      LOAD_ATTR                       6: CodeType
                88      CALL_FUNCTION                   2
                90      JUMP_IF_FALSE_OR_POP            77 (to 154)
                92      LOAD_GLOBAL                     4: isinstance
                94      LOAD_FAST                       1: name
                96      LOAD_GLOBAL                     7: str
                98      CALL_FUNCTION                   2
                100     JUMP_IF_FALSE_OR_POP            77 (to 154)
                102     LOAD_FAST                       3: defaults
                104     LOAD_CONST                      3: None
                106     IS_OP                           0 (is)
                108     JUMP_IF_TRUE_OR_POP             59 (to 118)
                110     LOAD_GLOBAL                     4: isinstance
                112     LOAD_FAST                       3: defaults
                114     LOAD_GLOBAL                     8: tuple
                116     CALL_FUNCTION                   2
                118     JUMP_IF_FALSE_OR_POP            77 (to 154)
                120     LOAD_FAST                       4: kwdefaults
                122     LOAD_CONST                      3: None
                124     IS_OP                           0 (is)
                126     JUMP_IF_TRUE_OR_POP             68 (to 136)
                128     LOAD_GLOBAL                     4: isinstance
                130     LOAD_FAST                       4: kwdefaults
                132     LOAD_GLOBAL                     9: dict
                134     CALL_FUNCTION                   2
                136     JUMP_IF_FALSE_OR_POP            77 (to 154)
                138     LOAD_GLOBAL                     4: isinstance
                140     LOAD_FAST                       5: annotations
                142     LOAD_GLOBAL                     9: dict
                144     CALL_FUNCTION                   2
                146     JUMP_IF_TRUE_OR_POP             77 (to 154)
                148     LOAD_FAST                       5: annotations
                150     LOAD_CONST                      3: None
                152     IS_OP                           0 (is)
                154     RETURN_VALUE                    
        '_signature_is_functionlike'
        [Code]
            File Name: inspect.py
            Object Name: _signature_get_bound_param
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 3
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'startswith'
                'find'
            [Var Names]
                'spec'
                'pos'
                'cpos'
            [Free Vars]
            [Cell Vars]
            [Constants]
                " Private helper to get first parameter name from a\n    __text_signature__ of a builtin method, which should\n    be in the following format: '($param1, ...)'.\n    Assumptions are that the first argument won't have\n    a default value or an annotation.\n    "
                '($'
                ','
                -1
                ')'
                ':'
                '='
                2
            [Disassembly]
                0       LOAD_FAST                       0: spec
                2       LOAD_METHOD                     0: startswith
                4       LOAD_CONST                      1: '($'
                6       CALL_METHOD                     1
                8       POP_JUMP_IF_TRUE                7 (to 14)
                10      LOAD_ASSERTION_ERROR            
                12      RAISE_VARARGS                   1
                14      LOAD_FAST                       0: spec
                16      LOAD_METHOD                     1: find
                18      LOAD_CONST                      2: ','
                20      CALL_METHOD                     1
                22      STORE_FAST                      1: pos
                24      LOAD_FAST                       1: pos
                26      LOAD_CONST                      3: -1
                28      COMPARE_OP                      2 (==)
                30      POP_JUMP_IF_FALSE               21 (to 42)
                32      LOAD_FAST                       0: spec
                34      LOAD_METHOD                     1: find
                36      LOAD_CONST                      4: ')'
                38      CALL_METHOD                     1
                40      STORE_FAST                      1: pos
                42      LOAD_FAST                       0: spec
                44      LOAD_METHOD                     1: find
                46      LOAD_CONST                      5: ':'
                48      CALL_METHOD                     1
                50      STORE_FAST                      2: cpos
                52      LOAD_FAST                       2: cpos
                54      LOAD_CONST                      3: -1
                56      COMPARE_OP                      2 (==)
                58      POP_JUMP_IF_TRUE                36 (to 72)
                60      LOAD_FAST                       2: cpos
                62      LOAD_FAST                       1: pos
                64      COMPARE_OP                      4 (>)
                66      POP_JUMP_IF_TRUE                36 (to 72)
                68      LOAD_ASSERTION_ERROR            
                70      RAISE_VARARGS                   1
                72      LOAD_FAST                       0: spec
                74      LOAD_METHOD                     1: find
                76      LOAD_CONST                      6: '='
                78      CALL_METHOD                     1
                80      STORE_FAST                      2: cpos
                82      LOAD_FAST                       2: cpos
                84      LOAD_CONST                      3: -1
                86      COMPARE_OP                      2 (==)
                88      POP_JUMP_IF_TRUE                51 (to 102)
                90      LOAD_FAST                       2: cpos
                92      LOAD_FAST                       1: pos
                94      COMPARE_OP                      4 (>)
                96      POP_JUMP_IF_TRUE                51 (to 102)
                98      LOAD_ASSERTION_ERROR            
                100     RAISE_VARARGS                   1
                102     LOAD_FAST                       0: spec
                104     LOAD_CONST                      7: 2
                106     LOAD_FAST                       1: pos
                108     BUILD_SLICE                     2
                110     BINARY_SUBSCR                   
                112     RETURN_VALUE                    
        '_signature_get_bound_param'
        [Code]
            File Name: inspect.py
            Object Name: _signature_strip_non_python_syntax
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 17
            Stack Size: 4
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'split'
                'iter'
                '__next__'
                'tokenize'
                'append'
                'token'
                'OP'
                'ERRORTOKEN'
                'next'
                'type'
                'ENCODING'
                'string'
                'join'
            [Var Names]
                'signature'
                'self_parameter'
                'last_positional_only'
                'lines'
                'generator'
                'token_stream'
                'delayed_comma'
                'skip_next_comma'
                'text'
                'add'
                'current_parameter'
                'OP'
                'ERRORTOKEN'
                't'
                'type'
                'string'
                'clean_signature'
            [Free Vars]
            [Cell Vars]
            [Constants]
                '\n    Private helper function. Takes a signature in Argument Clinic\'s\n    extended signature format.\n\n    Returns a tuple of three things:\n      * that signature re-rendered in standard Python syntax,\n      * the index of the "self" parameter (generally 0), or None if\n        the function does not have a "self" parameter, and\n      * the index of the last "positional only" parameter,\n        or None if the signature has no positional-only parameters.\n    '
                None
                [Code]
                    File Name: inspect.py
                    Object Name: <listcomp>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        'encode'
                    [Var Names]
                        '.0'
                        'l'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'ascii'
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       LOAD_FAST                       0: .0
                        4       FOR_ITER                        9 (to 24)
                        6       STORE_FAST                      1: l
                        8       LOAD_FAST                       1: l
                        10      POP_JUMP_IF_FALSE               2 (to 4)
                        12      LOAD_FAST                       1: l
                        14      LOAD_METHOD                     0: encode
                        16      LOAD_CONST                      0: 'ascii'
                        18      CALL_METHOD                     1
                        20      LIST_APPEND                     2
                        22      JUMP_ABSOLUTE                   2 (to 4)
                        24      RETURN_VALUE                    
                '_signature_strip_non_python_syntax.<locals>.<listcomp>'
                '\n'
                False
                0
                ','
                True
                1
                '/'
                '$'
                ')'
                ', '
                ' '
                ''
            [Disassembly]
                0       LOAD_FAST                       0: signature
                2       POP_JUMP_IF_TRUE                7 (to 14)
                4       LOAD_FAST                       0: signature
                6       LOAD_CONST                      1: None
                8       LOAD_CONST                      1: None
                10      BUILD_TUPLE                     3
                12      RETURN_VALUE                    
                14      LOAD_CONST                      1: None
                16      STORE_FAST                      1: self_parameter
                18      LOAD_CONST                      1: None
                20      STORE_FAST                      2: last_positional_only
                22      LOAD_CONST                      2: <CODE> <listcomp>
                24      LOAD_CONST                      3: '_signature_strip_non_python_syntax.<locals>.<listcomp>'
                26      MAKE_FUNCTION                   0
                28      LOAD_FAST                       0: signature
                30      LOAD_METHOD                     0: split
                32      LOAD_CONST                      4: '\n'
                34      CALL_METHOD                     1
                36      GET_ITER                        
                38      CALL_FUNCTION                   1
                40      STORE_FAST                      3: lines
                42      LOAD_GLOBAL                     1: iter
                44      LOAD_FAST                       3: lines
                46      CALL_FUNCTION                   1
                48      LOAD_ATTR                       2: __next__
                50      STORE_FAST                      4: generator
                52      LOAD_GLOBAL                     3: tokenize
                54      LOAD_METHOD                     3: tokenize
                56      LOAD_FAST                       4: generator
                58      CALL_METHOD                     1
                60      STORE_FAST                      5: token_stream
                62      LOAD_CONST                      5: False
                64      STORE_FAST                      6: delayed_comma
                66      LOAD_CONST                      5: False
                68      STORE_FAST                      7: skip_next_comma
                70      BUILD_LIST                      0
                72      STORE_FAST                      8: text
                74      LOAD_FAST                       8: text
                76      LOAD_ATTR                       4: append
                78      STORE_FAST                      9: add
                80      LOAD_CONST                      6: 0
                82      STORE_FAST                      10: current_parameter
                84      LOAD_GLOBAL                     5: token
                86      LOAD_ATTR                       6: OP
                88      STORE_FAST                      11: OP
                90      LOAD_GLOBAL                     5: token
                92      LOAD_ATTR                       7: ERRORTOKEN
                94      STORE_FAST                      12: ERRORTOKEN
                96      LOAD_GLOBAL                     8: next
                98      LOAD_FAST                       5: token_stream
                100     CALL_FUNCTION                   1
                102     STORE_FAST                      13: t
                104     LOAD_FAST                       13: t
                106     LOAD_ATTR                       9: type
                108     LOAD_GLOBAL                     3: tokenize
                110     LOAD_ATTR                       10: ENCODING
                112     COMPARE_OP                      2 (==)
                114     POP_JUMP_IF_TRUE                60 (to 120)
                116     LOAD_ASSERTION_ERROR            
                118     RAISE_VARARGS                   1
                120     LOAD_FAST                       5: token_stream
                122     GET_ITER                        
                124     FOR_ITER                        99 (to 324)
                126     STORE_FAST                      13: t
                128     LOAD_FAST                       13: t
                130     LOAD_ATTR                       9: type
                132     LOAD_FAST                       13: t
                134     LOAD_ATTR                       11: string
                136     ROT_TWO                         
                138     STORE_FAST                      14: type
                140     STORE_FAST                      15: string
                142     LOAD_FAST                       14: type
                144     LOAD_FAST                       11: OP
                146     COMPARE_OP                      2 (==)
                148     POP_JUMP_IF_FALSE               116 (to 232)
                150     LOAD_FAST                       15: string
                152     LOAD_CONST                      7: ','
                154     COMPARE_OP                      2 (==)
                156     POP_JUMP_IF_FALSE               95 (to 190)
                158     LOAD_FAST                       7: skip_next_comma
                160     POP_JUMP_IF_FALSE               84 (to 168)
                162     LOAD_CONST                      5: False
                164     STORE_FAST                      7: skip_next_comma
                166     JUMP_FORWARD                    10 (to 188)
                168     LOAD_FAST                       6: delayed_comma
                170     POP_JUMP_IF_FALSE               88 (to 176)
                172     LOAD_ASSERTION_ERROR            
                174     RAISE_VARARGS                   1
                176     LOAD_CONST                      8: True
                178     STORE_FAST                      6: delayed_comma
                180     LOAD_FAST                       10: current_parameter
                182     LOAD_CONST                      9: 1
                184     INPLACE_ADD                     
                186     STORE_FAST                      10: current_parameter
                188     JUMP_ABSOLUTE                   62 (to 124)
                190     LOAD_FAST                       15: string
                192     LOAD_CONST                      10: '/'
                194     COMPARE_OP                      2 (==)
                196     POP_JUMP_IF_FALSE               116 (to 232)
                198     LOAD_FAST                       7: skip_next_comma
                200     POP_JUMP_IF_FALSE               103 (to 206)
                202     LOAD_ASSERTION_ERROR            
                204     RAISE_VARARGS                   1
                206     LOAD_FAST                       2: last_positional_only
                208     LOAD_CONST                      1: None
                210     IS_OP                           0 (is)
                212     POP_JUMP_IF_TRUE                109 (to 218)
                214     LOAD_ASSERTION_ERROR            
                216     RAISE_VARARGS                   1
                218     LOAD_CONST                      8: True
                220     STORE_FAST                      7: skip_next_comma
                222     LOAD_FAST                       10: current_parameter
                224     LOAD_CONST                      9: 1
                226     BINARY_SUBTRACT                 
                228     STORE_FAST                      2: last_positional_only
                230     JUMP_ABSOLUTE                   62 (to 124)
                232     LOAD_FAST                       14: type
                234     LOAD_FAST                       12: ERRORTOKEN
                236     COMPARE_OP                      2 (==)
                238     POP_JUMP_IF_FALSE               133 (to 266)
                240     LOAD_FAST                       15: string
                242     LOAD_CONST                      11: '$'
                244     COMPARE_OP                      2 (==)
                246     POP_JUMP_IF_FALSE               133 (to 266)
                248     LOAD_FAST                       1: self_parameter
                250     LOAD_CONST                      1: None
                252     IS_OP                           0 (is)
                254     POP_JUMP_IF_TRUE                130 (to 260)
                256     LOAD_ASSERTION_ERROR            
                258     RAISE_VARARGS                   1
                260     LOAD_FAST                       10: current_parameter
                262     STORE_FAST                      1: self_parameter
                264     JUMP_ABSOLUTE                   62 (to 124)
                266     LOAD_FAST                       6: delayed_comma
                268     POP_JUMP_IF_FALSE               149 (to 298)
                270     LOAD_CONST                      5: False
                272     STORE_FAST                      6: delayed_comma
                274     LOAD_FAST                       14: type
                276     LOAD_FAST                       11: OP
                278     COMPARE_OP                      2 (==)
                280     POP_JUMP_IF_FALSE               145 (to 290)
                282     LOAD_FAST                       15: string
                284     LOAD_CONST                      12: ')'
                286     COMPARE_OP                      2 (==)
                288     POP_JUMP_IF_TRUE                149 (to 298)
                290     LOAD_FAST                       9: add
                292     LOAD_CONST                      13: ', '
                294     CALL_FUNCTION                   1
                296     POP_TOP                         
                298     LOAD_FAST                       9: add
                300     LOAD_FAST                       15: string
                302     CALL_FUNCTION                   1
                304     POP_TOP                         
                306     LOAD_FAST                       15: string
                308     LOAD_CONST                      7: ','
                310     COMPARE_OP                      2 (==)
                312     POP_JUMP_IF_FALSE               161 (to 322)
                314     LOAD_FAST                       9: add
                316     LOAD_CONST                      14: ' '
                318     CALL_FUNCTION                   1
                320     POP_TOP                         
                322     JUMP_ABSOLUTE                   62 (to 124)
                324     LOAD_CONST                      15: ''
                326     LOAD_METHOD                     12: join
                328     LOAD_FAST                       8: text
                330     CALL_METHOD                     1
                332     STORE_FAST                      16: clean_signature
                334     LOAD_FAST                       16: clean_signature
                336     LOAD_FAST                       1: self_parameter
                338     LOAD_FAST                       2: last_positional_only
                340     BUILD_TUPLE                     3
                342     RETURN_VALUE                    
        '_signature_strip_non_python_syntax'
        True
        [Code]
            File Name: inspect.py
            Object Name: _signature_fromstr
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 21
            Stack Size: 9
            Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
            [Names]
                'ast'
                '_parameter_cls'
                '_signature_strip_non_python_syntax'
                'parse'
                'SyntaxError'
                'isinstance'
                'Module'
                'ValueError'
                'format'
                'body'
                'empty'
                'getattr'
                'sys'
                'modules'
                'get'
                '__dict__'
                'copy'
                'NodeTransformer'
                'reversed'
                'args'
                'defaults'
                'itertools'
                'zip_longest'
                'POSITIONAL_ONLY'
                'POSITIONAL_OR_KEYWORD'
                'enumerate'
                'list'
                'vararg'
                'VAR_POSITIONAL'
                'KEYWORD_ONLY'
                'zip'
                'kwonlyargs'
                'kw_defaults'
                'kwarg'
                'VAR_KEYWORD'
                'ismodule'
                'pop'
                'replace'
            [Var Names]
                'cls'
                'obj'
                's'
                'skip_bound_arg'
                'clean_signature'
                'self_parameter'
                'last_positional_only'
                'program'
                'module'
                'f'
                'module_name'
                'p'
                'args'
                'defaults'
                'iter'
                'i'
                'name'
                'default'
                '_self'
                'self_isbound'
                'self_ismodule'
            [Free Vars]
            [Cell Vars]
                'Parameter'
                'RewriteSymbolics'
                'ast'
                'empty'
                'kind'
                'module_dict'
                'obj'
                'parameters'
                'parse_name'
                'sys_module_dict'
                'wrap_value'
            [Constants]
                "Private helper to parse content of '__text_signature__'\n    and return a Signature based on it.\n    "
                0
                None
                'def foo'
                ': pass'
                '{!r} builtin has invalid signature'
                '__module__'
                [Code]
                    File Name: inspect.py
                    Object Name: parse_name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'isinstance'
                        'arg'
                        'annotation'
                        'ValueError'
                    [Var Names]
                        'node'
                    [Free Vars]
                        'ast'
                    [Cell Vars]
                    [Constants]
                        None
                        'Annotations are not currently supported'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       0: node
                        4       LOAD_DEREF                      0: ast
                        6       LOAD_ATTR                       1: arg
                        8       CALL_FUNCTION                   2
                        10      POP_JUMP_IF_TRUE                8 (to 16)
                        12      LOAD_ASSERTION_ERROR            
                        14      RAISE_VARARGS                   1
                        16      LOAD_FAST                       0: node
                        18      LOAD_ATTR                       2: annotation
                        20      LOAD_CONST                      0: None
                        22      IS_OP                           1 (is not)
                        24      POP_JUMP_IF_FALSE               17 (to 34)
                        26      LOAD_GLOBAL                     3: ValueError
                        28      LOAD_CONST                      1: 'Annotations are not currently supported'
                        30      CALL_FUNCTION                   1
                        32      RAISE_VARARGS                   1
                        34      LOAD_FAST                       0: node
                        36      LOAD_ATTR                       1: arg
                        38      RETURN_VALUE                    
                '_signature_fromstr.<locals>.parse_name'
                [Code]
                    File Name: inspect.py
                    Object Name: wrap_value
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 11
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        'eval'
                        'NameError'
                        'ValueError'
                        'isinstance'
                        'str'
                        'int'
                        'float'
                        'bytes'
                        'bool'
                        'type'
                        'Constant'
                    [Var Names]
                        's'
                        'value'
                    [Free Vars]
                        'ast'
                        'module_dict'
                        'sys_module_dict'
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       SETUP_FINALLY                   7 (to 16)
                        2       LOAD_GLOBAL                     0: eval
                        4       LOAD_FAST                       0: s
                        6       LOAD_DEREF                      1: module_dict
                        8       CALL_FUNCTION                   2
                        10      STORE_FAST                      1: value
                        12      POP_BLOCK                       
                        14      JUMP_FORWARD                    26 (to 68)
                        16      DUP_TOP                         
                        18      LOAD_GLOBAL                     1: NameError
                        20      JUMP_IF_NOT_EXC_MATCH           33 (to 66)
                        22      POP_TOP                         
                        24      POP_TOP                         
                        26      POP_TOP                         
                        28      SETUP_FINALLY                   7 (to 44)
                        30      LOAD_GLOBAL                     0: eval
                        32      LOAD_FAST                       0: s
                        34      LOAD_DEREF                      2: sys_module_dict
                        36      CALL_FUNCTION                   2
                        38      STORE_FAST                      1: value
                        40      POP_BLOCK                       
                        42      JUMP_FORWARD                    9 (to 62)
                        44      DUP_TOP                         
                        46      LOAD_GLOBAL                     1: NameError
                        48      JUMP_IF_NOT_EXC_MATCH           30 (to 60)
                        50      POP_TOP                         
                        52      POP_TOP                         
                        54      POP_TOP                         
                        56      LOAD_GLOBAL                     2: ValueError
                        58      RAISE_VARARGS                   1
                        60      RERAISE                         0
                        62      POP_EXCEPT                      
                        64      JUMP_FORWARD                    1 (to 68)
                        66      RERAISE                         0
                        68      LOAD_GLOBAL                     3: isinstance
                        70      LOAD_FAST                       1: value
                        72      LOAD_GLOBAL                     4: str
                        74      LOAD_GLOBAL                     5: int
                        76      LOAD_GLOBAL                     6: float
                        78      LOAD_GLOBAL                     7: bytes
                        80      LOAD_GLOBAL                     8: bool
                        82      LOAD_GLOBAL                     9: type
                        84      LOAD_CONST                      0: None
                        86      CALL_FUNCTION                   1
                        88      BUILD_TUPLE                     6
                        90      CALL_FUNCTION                   2
                        92      POP_JUMP_IF_FALSE               52 (to 104)
                        94      LOAD_DEREF                      0: ast
                        96      LOAD_METHOD                     10: Constant
                        98      LOAD_FAST                       1: value
                        100     CALL_METHOD                     1
                        102     RETURN_VALUE                    
                        104     LOAD_GLOBAL                     2: ValueError
                        106     RAISE_VARARGS                   1
                '_signature_fromstr.<locals>.wrap_value'
                [Code]
                    File Name: inspect.py
                    Object Name: RewriteSymbolics
                    Arg Count: 0
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 0
                    Stack Size: 3
                    Flags: 0x00000000
                    [Names]
                        '__name__'
                        '__module__'
                        '__qualname__'
                        'visit_Attribute'
                        'visit_Name'
                        'visit_BinOp'
                    [Var Names]
                    [Free Vars]
                        'ast'
                        'wrap_value'
                    [Cell Vars]
                    [Constants]
                        '_signature_fromstr.<locals>.RewriteSymbolics'
                        [Code]
                            File Name: inspect.py
                            Object Name: visit_Attribute
                            Arg Count: 2
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 5
                            Stack Size: 4
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'isinstance'
                                'Attribute'
                                'append'
                                'attr'
                                'value'
                                'Name'
                                'ValueError'
                                'id'
                                'join'
                                'reversed'
                            [Var Names]
                                'self'
                                'node'
                                'a'
                                'n'
                                'value'
                            [Free Vars]
                                'ast'
                                'wrap_value'
                            [Cell Vars]
                            [Constants]
                                None
                                '.'
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       STORE_FAST                      2: a
                                4       LOAD_FAST                       1: node
                                6       STORE_FAST                      3: n
                                8       LOAD_GLOBAL                     0: isinstance
                                10      LOAD_FAST                       3: n
                                12      LOAD_DEREF                      0: ast
                                14      LOAD_ATTR                       1: Attribute
                                16      CALL_FUNCTION                   2
                                18      POP_JUMP_IF_FALSE               25 (to 50)
                                20      LOAD_FAST                       2: a
                                22      LOAD_METHOD                     2: append
                                24      LOAD_FAST                       3: n
                                26      LOAD_ATTR                       3: attr
                                28      CALL_METHOD                     1
                                30      POP_TOP                         
                                32      LOAD_FAST                       3: n
                                34      LOAD_ATTR                       4: value
                                36      STORE_FAST                      3: n
                                38      LOAD_GLOBAL                     0: isinstance
                                40      LOAD_FAST                       3: n
                                42      LOAD_DEREF                      0: ast
                                44      LOAD_ATTR                       1: Attribute
                                46      CALL_FUNCTION                   2
                                48      POP_JUMP_IF_TRUE                10 (to 20)
                                50      LOAD_GLOBAL                     0: isinstance
                                52      LOAD_FAST                       3: n
                                54      LOAD_DEREF                      0: ast
                                56      LOAD_ATTR                       5: Name
                                58      CALL_FUNCTION                   2
                                60      POP_JUMP_IF_TRUE                33 (to 66)
                                62      LOAD_GLOBAL                     6: ValueError
                                64      RAISE_VARARGS                   1
                                66      LOAD_FAST                       2: a
                                68      LOAD_METHOD                     2: append
                                70      LOAD_FAST                       3: n
                                72      LOAD_ATTR                       7: id
                                74      CALL_METHOD                     1
                                76      POP_TOP                         
                                78      LOAD_CONST                      1: '.'
                                80      LOAD_METHOD                     8: join
                                82      LOAD_GLOBAL                     9: reversed
                                84      LOAD_FAST                       2: a
                                86      CALL_FUNCTION                   1
                                88      CALL_METHOD                     1
                                90      STORE_FAST                      4: value
                                92      LOAD_DEREF                      1: wrap_value
                                94      LOAD_FAST                       4: value
                                96      CALL_FUNCTION                   1
                                98      RETURN_VALUE                    
                        '_signature_fromstr.<locals>.RewriteSymbolics.visit_Attribute'
                        [Code]
                            File Name: inspect.py
                            Object Name: visit_Name
                            Arg Count: 2
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'isinstance'
                                'ctx'
                                'Load'
                                'ValueError'
                                'id'
                            [Var Names]
                                'self'
                                'node'
                            [Free Vars]
                                'ast'
                                'wrap_value'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_GLOBAL                     0: isinstance
                                2       LOAD_FAST                       1: node
                                4       LOAD_ATTR                       1: ctx
                                6       LOAD_DEREF                      0: ast
                                8       LOAD_ATTR                       2: Load
                                10      CALL_FUNCTION                   2
                                12      POP_JUMP_IF_TRUE                10 (to 20)
                                14      LOAD_GLOBAL                     3: ValueError
                                16      CALL_FUNCTION                   0
                                18      RAISE_VARARGS                   1
                                20      LOAD_DEREF                      1: wrap_value
                                22      LOAD_FAST                       1: node
                                24      LOAD_ATTR                       4: id
                                26      CALL_FUNCTION                   1
                                28      RETURN_VALUE                    
                        '_signature_fromstr.<locals>.RewriteSymbolics.visit_Name'
                        [Code]
                            File Name: inspect.py
                            Object Name: visit_BinOp
                            Arg Count: 2
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 4
                            Stack Size: 4
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'visit'
                                'left'
                                'right'
                                'isinstance'
                                'Constant'
                                'ValueError'
                                'op'
                                'Add'
                                'value'
                                'Sub'
                                'BitOr'
                            [Var Names]
                                'self'
                                'node'
                                'left'
                                'right'
                            [Free Vars]
                                'ast'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_FAST                       0: self
                                2       LOAD_METHOD                     0: visit
                                4       LOAD_FAST                       1: node
                                6       LOAD_ATTR                       1: left
                                8       CALL_METHOD                     1
                                10      STORE_FAST                      2: left
                                12      LOAD_FAST                       0: self
                                14      LOAD_METHOD                     0: visit
                                16      LOAD_FAST                       1: node
                                18      LOAD_ATTR                       2: right
                                20      CALL_METHOD                     1
                                22      STORE_FAST                      3: right
                                24      LOAD_GLOBAL                     3: isinstance
                                26      LOAD_FAST                       2: left
                                28      LOAD_DEREF                      0: ast
                                30      LOAD_ATTR                       4: Constant
                                32      CALL_FUNCTION                   2
                                34      POP_JUMP_IF_FALSE               24 (to 48)
                                36      LOAD_GLOBAL                     3: isinstance
                                38      LOAD_FAST                       3: right
                                40      LOAD_DEREF                      0: ast
                                42      LOAD_ATTR                       4: Constant
                                44      CALL_FUNCTION                   2
                                46      POP_JUMP_IF_TRUE                26 (to 52)
                                48      LOAD_GLOBAL                     5: ValueError
                                50      RAISE_VARARGS                   1
                                52      LOAD_GLOBAL                     3: isinstance
                                54      LOAD_FAST                       1: node
                                56      LOAD_ATTR                       6: op
                                58      LOAD_DEREF                      0: ast
                                60      LOAD_ATTR                       7: Add
                                62      CALL_FUNCTION                   2
                                64      POP_JUMP_IF_FALSE               42 (to 84)
                                66      LOAD_DEREF                      0: ast
                                68      LOAD_METHOD                     4: Constant
                                70      LOAD_FAST                       2: left
                                72      LOAD_ATTR                       8: value
                                74      LOAD_FAST                       3: right
                                76      LOAD_ATTR                       8: value
                                78      BINARY_ADD                      
                                80      CALL_METHOD                     1
                                82      RETURN_VALUE                    
                                84      LOAD_GLOBAL                     3: isinstance
                                86      LOAD_FAST                       1: node
                                88      LOAD_ATTR                       6: op
                                90      LOAD_DEREF                      0: ast
                                92      LOAD_ATTR                       9: Sub
                                94      CALL_FUNCTION                   2
                                96      POP_JUMP_IF_FALSE               58 (to 116)
                                98      LOAD_DEREF                      0: ast
                                100     LOAD_METHOD                     4: Constant
                                102     LOAD_FAST                       2: left
                                104     LOAD_ATTR                       8: value
                                106     LOAD_FAST                       3: right
                                108     LOAD_ATTR                       8: value
                                110     BINARY_SUBTRACT                 
                                112     CALL_METHOD                     1
                                114     RETURN_VALUE                    
                                116     LOAD_GLOBAL                     3: isinstance
                                118     LOAD_FAST                       1: node
                                120     LOAD_ATTR                       6: op
                                122     LOAD_DEREF                      0: ast
                                124     LOAD_ATTR                       10: BitOr
                                126     CALL_FUNCTION                   2
                                128     POP_JUMP_IF_FALSE               74 (to 148)
                                130     LOAD_DEREF                      0: ast
                                132     LOAD_METHOD                     4: Constant
                                134     LOAD_FAST                       2: left
                                136     LOAD_ATTR                       8: value
                                138     LOAD_FAST                       3: right
                                140     LOAD_ATTR                       8: value
                                142     BINARY_OR                       
                                144     CALL_METHOD                     1
                                146     RETURN_VALUE                    
                                148     LOAD_GLOBAL                     5: ValueError
                                150     RAISE_VARARGS                   1
                        '_signature_fromstr.<locals>.RewriteSymbolics.visit_BinOp'
                        None
                    [Disassembly]
                        0       LOAD_NAME                       0: __name__
                        2       STORE_NAME                      1: __module__
                        4       LOAD_CONST                      0: '_signature_fromstr.<locals>.RewriteSymbolics'
                        6       STORE_NAME                      2: __qualname__
                        8       LOAD_CLOSURE                    0: ast
                        10      LOAD_CLOSURE                    1: wrap_value
                        12      BUILD_TUPLE                     2
                        14      LOAD_CONST                      1: <CODE> visit_Attribute
                        16      LOAD_CONST                      2: '_signature_fromstr.<locals>.RewriteSymbolics.visit_Attribute'
                        18      MAKE_FUNCTION                   8
                        20      STORE_NAME                      3: visit_Attribute
                        22      LOAD_CLOSURE                    0: ast
                        24      LOAD_CLOSURE                    1: wrap_value
                        26      BUILD_TUPLE                     2
                        28      LOAD_CONST                      3: <CODE> visit_Name
                        30      LOAD_CONST                      4: '_signature_fromstr.<locals>.RewriteSymbolics.visit_Name'
                        32      MAKE_FUNCTION                   8
                        34      STORE_NAME                      4: visit_Name
                        36      LOAD_CLOSURE                    0: ast
                        38      BUILD_TUPLE                     1
                        40      LOAD_CONST                      5: <CODE> visit_BinOp
                        42      LOAD_CONST                      6: '_signature_fromstr.<locals>.RewriteSymbolics.visit_BinOp'
                        44      MAKE_FUNCTION                   8
                        46      STORE_NAME                      5: visit_BinOp
                        48      LOAD_CONST                      7: None
                        50      RETURN_VALUE                    
                'RewriteSymbolics'
                [Code]
                    File Name: inspect.py
                    Object Name: p
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                    [Names]
                        '_empty'
                        'visit'
                        'literal_eval'
                        'ValueError'
                        'format'
                        'append'
                    [Var Names]
                        'name_node'
                        'default_node'
                        'default'
                        'name'
                    [Free Vars]
                        'Parameter'
                        'RewriteSymbolics'
                        'ast'
                        'empty'
                        'kind'
                        'obj'
                        'parameters'
                        'parse_name'
                    [Cell Vars]
                    [Constants]
                        None
                        '{!r} builtin has invalid signature'
                        (
                            'default'
                            'annotation'
                        )
                    [Disassembly]
                        0       LOAD_DEREF                      7: parse_name
                        2       LOAD_FAST                       0: name_node
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      3: name
                        8       LOAD_FAST                       1: default_node
                        10      POP_JUMP_IF_FALSE               39 (to 78)
                        12      LOAD_FAST                       1: default_node
                        14      LOAD_GLOBAL                     0: _empty
                        16      IS_OP                           1 (is not)
                        18      POP_JUMP_IF_FALSE               39 (to 78)
                        20      SETUP_FINALLY                   13 (to 48)
                        22      LOAD_DEREF                      1: RewriteSymbolics
                        24      CALL_FUNCTION                   0
                        26      LOAD_METHOD                     1: visit
                        28      LOAD_FAST                       1: default_node
                        30      CALL_METHOD                     1
                        32      STORE_FAST                      1: default_node
                        34      LOAD_DEREF                      2: ast
                        36      LOAD_METHOD                     2: literal_eval
                        38      LOAD_FAST                       1: default_node
                        40      CALL_METHOD                     1
                        42      STORE_FAST                      2: default
                        44      POP_BLOCK                       
                        46      JUMP_FORWARD                    15 (to 78)
                        48      DUP_TOP                         
                        50      LOAD_GLOBAL                     3: ValueError
                        52      JUMP_IF_NOT_EXC_MATCH           38 (to 76)
                        54      POP_TOP                         
                        56      POP_TOP                         
                        58      POP_TOP                         
                        60      LOAD_GLOBAL                     3: ValueError
                        62      LOAD_CONST                      1: '{!r} builtin has invalid signature'
                        64      LOAD_METHOD                     4: format
                        66      LOAD_DEREF                      5: obj
                        68      CALL_METHOD                     1
                        70      CALL_FUNCTION                   1
                        72      LOAD_CONST                      0: None
                        74      RAISE_VARARGS                   2
                        76      RERAISE                         0
                        78      LOAD_DEREF                      6: parameters
                        80      LOAD_METHOD                     5: append
                        82      LOAD_DEREF                      0: Parameter
                        84      LOAD_FAST                       3: name
                        86      LOAD_DEREF                      4: kind
                        88      LOAD_FAST                       2: default
                        90      LOAD_DEREF                      3: empty
                        92      LOAD_CONST                      2: ('default', 'annotation')
                        94      CALL_FUNCTION_KW                4
                        96      CALL_METHOD                     1
                        98      POP_TOP                         
                        100     LOAD_CONST                      0: None
                        102     RETURN_VALUE                    
                '_signature_fromstr.<locals>.p'
                (
                    'fillvalue'
                )
                '__self__'
                (
                    'kind'
                )
                (
                    'return_annotation'
                )
            [Disassembly]
                0       LOAD_CONST                      1: 0
                2       LOAD_CONST                      2: None
                4       IMPORT_NAME                     0: ast
                6       STORE_DEREF                     2: ast
                8       LOAD_FAST                       0: cls
                10      LOAD_ATTR                       1: _parameter_cls
                12      STORE_DEREF                     0: Parameter
                14      LOAD_GLOBAL                     2: _signature_strip_non_python_syntax
                16      LOAD_FAST                       2: s
                18      CALL_FUNCTION                   1
                20      UNPACK_SEQUENCE                 3
                22      STORE_FAST                      4: clean_signature
                24      STORE_FAST                      5: self_parameter
                26      STORE_FAST                      6: last_positional_only
                28      LOAD_CONST                      3: 'def foo'
                30      LOAD_FAST                       4: clean_signature
                32      BINARY_ADD                      
                34      LOAD_CONST                      4: ': pass'
                36      BINARY_ADD                      
                38      STORE_FAST                      7: program
                40      SETUP_FINALLY                   7 (to 56)
                42      LOAD_DEREF                      2: ast
                44      LOAD_METHOD                     3: parse
                46      LOAD_FAST                       7: program
                48      CALL_METHOD                     1
                50      STORE_FAST                      8: module
                52      POP_BLOCK                       
                54      JUMP_FORWARD                    11 (to 78)
                56      DUP_TOP                         
                58      LOAD_GLOBAL                     4: SyntaxError
                60      JUMP_IF_NOT_EXC_MATCH           38 (to 76)
                62      POP_TOP                         
                64      POP_TOP                         
                66      POP_TOP                         
                68      LOAD_CONST                      2: None
                70      STORE_FAST                      8: module
                72      POP_EXCEPT                      
                74      JUMP_FORWARD                    1 (to 78)
                76      RERAISE                         0
                78      LOAD_GLOBAL                     5: isinstance
                80      LOAD_FAST                       8: module
                82      LOAD_DEREF                      2: ast
                84      LOAD_ATTR                       6: Module
                86      CALL_FUNCTION                   2
                88      POP_JUMP_IF_TRUE                52 (to 104)
                90      LOAD_GLOBAL                     7: ValueError
                92      LOAD_CONST                      5: '{!r} builtin has invalid signature'
                94      LOAD_METHOD                     8: format
                96      LOAD_DEREF                      6: obj
                98      CALL_METHOD                     1
                100     CALL_FUNCTION                   1
                102     RAISE_VARARGS                   1
                104     LOAD_FAST                       8: module
                106     LOAD_ATTR                       9: body
                108     LOAD_CONST                      1: 0
                110     BINARY_SUBSCR                   
                112     STORE_FAST                      9: f
                114     BUILD_LIST                      0
                116     STORE_DEREF                     7: parameters
                118     LOAD_DEREF                      0: Parameter
                120     LOAD_ATTR                       10: empty
                122     STORE_DEREF                     3: empty
                124     LOAD_CONST                      2: None
                126     STORE_FAST                      8: module
                128     BUILD_MAP                       0
                130     STORE_DEREF                     5: module_dict
                132     LOAD_GLOBAL                     11: getattr
                134     LOAD_DEREF                      6: obj
                136     LOAD_CONST                      6: '__module__'
                138     LOAD_CONST                      2: None
                140     CALL_FUNCTION                   3
                142     STORE_FAST                      10: module_name
                144     LOAD_FAST                       10: module_name
                146     POP_JUMP_IF_FALSE               86 (to 172)
                148     LOAD_GLOBAL                     12: sys
                150     LOAD_ATTR                       13: modules
                152     LOAD_METHOD                     14: get
                154     LOAD_FAST                       10: module_name
                156     LOAD_CONST                      2: None
                158     CALL_METHOD                     2
                160     STORE_FAST                      8: module
                162     LOAD_FAST                       8: module
                164     POP_JUMP_IF_FALSE               86 (to 172)
                166     LOAD_FAST                       8: module
                168     LOAD_ATTR                       15: __dict__
                170     STORE_DEREF                     5: module_dict
                172     LOAD_GLOBAL                     12: sys
                174     LOAD_ATTR                       13: modules
                176     LOAD_METHOD                     16: copy
                178     CALL_METHOD                     0
                180     STORE_DEREF                     9: sys_module_dict
                182     LOAD_CLOSURE                    2: ast
                184     BUILD_TUPLE                     1
                186     LOAD_CONST                      7: <CODE> parse_name
                188     LOAD_CONST                      8: '_signature_fromstr.<locals>.parse_name'
                190     MAKE_FUNCTION                   8
                192     STORE_DEREF                     8: parse_name
                194     LOAD_CLOSURE                    2: ast
                196     LOAD_CLOSURE                    5: module_dict
                198     LOAD_CLOSURE                    9: sys_module_dict
                200     BUILD_TUPLE                     3
                202     LOAD_CONST                      9: <CODE> wrap_value
                204     LOAD_CONST                      10: '_signature_fromstr.<locals>.wrap_value'
                206     MAKE_FUNCTION                   8
                208     STORE_DEREF                     10: wrap_value
                210     LOAD_BUILD_CLASS                
                212     LOAD_CLOSURE                    2: ast
                214     LOAD_CLOSURE                    10: wrap_value
                216     BUILD_TUPLE                     2
                218     LOAD_CONST                      11: <CODE> RewriteSymbolics
                220     LOAD_CONST                      12: 'RewriteSymbolics'
                222     MAKE_FUNCTION                   8
                224     LOAD_CONST                      12: 'RewriteSymbolics'
                226     LOAD_DEREF                      2: ast
                228     LOAD_ATTR                       17: NodeTransformer
                230     CALL_FUNCTION                   3
                232     STORE_DEREF                     1: RewriteSymbolics
                234     LOAD_DEREF                      3: empty
                236     BUILD_TUPLE                     1
                238     LOAD_CLOSURE                    0: Parameter
                240     LOAD_CLOSURE                    1: RewriteSymbolics
                242     LOAD_CLOSURE                    2: ast
                244     LOAD_CLOSURE                    3: empty
                246     LOAD_CLOSURE                    4: kind
                248     LOAD_CLOSURE                    6: obj
                250     LOAD_CLOSURE                    7: parameters
                252     LOAD_CLOSURE                    8: parse_name
                254     BUILD_TUPLE                     8
                256     LOAD_CONST                      13: <CODE> p
                258     LOAD_CONST                      14: '_signature_fromstr.<locals>.p'
                260     MAKE_FUNCTION                   9
                262     STORE_FAST                      11: p
                264     LOAD_GLOBAL                     18: reversed
                266     LOAD_FAST                       9: f
                268     LOAD_ATTR                       19: args
                270     LOAD_ATTR                       19: args
                272     CALL_FUNCTION                   1
                274     STORE_FAST                      12: args
                276     LOAD_GLOBAL                     18: reversed
                278     LOAD_FAST                       9: f
                280     LOAD_ATTR                       19: args
                282     LOAD_ATTR                       20: defaults
                284     CALL_FUNCTION                   1
                286     STORE_FAST                      13: defaults
                288     LOAD_GLOBAL                     21: itertools
                290     LOAD_ATTR                       22: zip_longest
                292     LOAD_FAST                       12: args
                294     LOAD_FAST                       13: defaults
                296     LOAD_CONST                      2: None
                298     LOAD_CONST                      15: ('fillvalue',)
                300     CALL_FUNCTION_KW                3
                302     STORE_FAST                      14: iter
                304     LOAD_FAST                       6: last_positional_only
                306     LOAD_CONST                      2: None
                308     IS_OP                           1 (is not)
                310     POP_JUMP_IF_FALSE               160 (to 320)
                312     LOAD_DEREF                      0: Parameter
                314     LOAD_ATTR                       23: POSITIONAL_ONLY
                316     STORE_DEREF                     4: kind
                318     JUMP_FORWARD                    3 (to 326)
                320     LOAD_DEREF                      0: Parameter
                322     LOAD_ATTR                       24: POSITIONAL_OR_KEYWORD
                324     STORE_DEREF                     4: kind
                326     LOAD_GLOBAL                     25: enumerate
                328     LOAD_GLOBAL                     18: reversed
                330     LOAD_GLOBAL                     26: list
                332     LOAD_FAST                       14: iter
                334     CALL_FUNCTION                   1
                336     CALL_FUNCTION                   1
                338     CALL_FUNCTION                   1
                340     GET_ITER                        
                342     FOR_ITER                        18 (to 380)
                344     UNPACK_SEQUENCE                 2
                346     STORE_FAST                      15: i
                348     UNPACK_SEQUENCE                 2
                350     STORE_FAST                      16: name
                352     STORE_FAST                      17: default
                354     LOAD_FAST                       11: p
                356     LOAD_FAST                       16: name
                358     LOAD_FAST                       17: default
                360     CALL_FUNCTION                   2
                362     POP_TOP                         
                364     LOAD_FAST                       15: i
                366     LOAD_FAST                       6: last_positional_only
                368     COMPARE_OP                      2 (==)
                370     POP_JUMP_IF_FALSE               189 (to 378)
                372     LOAD_DEREF                      0: Parameter
                374     LOAD_ATTR                       24: POSITIONAL_OR_KEYWORD
                376     STORE_DEREF                     4: kind
                378     JUMP_ABSOLUTE                   171 (to 342)
                380     LOAD_FAST                       9: f
                382     LOAD_ATTR                       19: args
                384     LOAD_ATTR                       27: vararg
                386     POP_JUMP_IF_FALSE               204 (to 408)
                388     LOAD_DEREF                      0: Parameter
                390     LOAD_ATTR                       28: VAR_POSITIONAL
                392     STORE_DEREF                     4: kind
                394     LOAD_FAST                       11: p
                396     LOAD_FAST                       9: f
                398     LOAD_ATTR                       19: args
                400     LOAD_ATTR                       27: vararg
                402     LOAD_DEREF                      3: empty
                404     CALL_FUNCTION                   2
                406     POP_TOP                         
                408     LOAD_DEREF                      0: Parameter
                410     LOAD_ATTR                       29: KEYWORD_ONLY
                412     STORE_DEREF                     4: kind
                414     LOAD_GLOBAL                     30: zip
                416     LOAD_FAST                       9: f
                418     LOAD_ATTR                       19: args
                420     LOAD_ATTR                       31: kwonlyargs
                422     LOAD_FAST                       9: f
                424     LOAD_ATTR                       19: args
                426     LOAD_ATTR                       32: kw_defaults
                428     CALL_FUNCTION                   2
                430     GET_ITER                        
                432     FOR_ITER                        9 (to 452)
                434     UNPACK_SEQUENCE                 2
                436     STORE_FAST                      16: name
                438     STORE_FAST                      17: default
                440     LOAD_FAST                       11: p
                442     LOAD_FAST                       16: name
                444     LOAD_FAST                       17: default
                446     CALL_FUNCTION                   2
                448     POP_TOP                         
                450     JUMP_ABSOLUTE                   216 (to 432)
                452     LOAD_FAST                       9: f
                454     LOAD_ATTR                       19: args
                456     LOAD_ATTR                       33: kwarg
                458     POP_JUMP_IF_FALSE               240 (to 480)
                460     LOAD_DEREF                      0: Parameter
                462     LOAD_ATTR                       34: VAR_KEYWORD
                464     STORE_DEREF                     4: kind
                466     LOAD_FAST                       11: p
                468     LOAD_FAST                       9: f
                470     LOAD_ATTR                       19: args
                472     LOAD_ATTR                       33: kwarg
                474     LOAD_DEREF                      3: empty
                476     CALL_FUNCTION                   2
                478     POP_TOP                         
                480     LOAD_FAST                       5: self_parameter
                482     LOAD_CONST                      2: None
                484     IS_OP                           1 (is not)
                486     POP_JUMP_IF_FALSE               291 (to 582)
                490     LOAD_DEREF                      7: parameters
                492     POP_JUMP_IF_TRUE                249 (to 498)
                494     LOAD_ASSERTION_ERROR            
                496     RAISE_VARARGS                   1
                498     LOAD_GLOBAL                     11: getattr
                500     LOAD_DEREF                      6: obj
                502     LOAD_CONST                      16: '__self__'
                504     LOAD_CONST                      2: None
                506     CALL_FUNCTION                   3
                508     STORE_FAST                      18: _self
                510     LOAD_FAST                       18: _self
                512     LOAD_CONST                      2: None
                514     IS_OP                           1 (is not)
                516     STORE_FAST                      19: self_isbound
                518     LOAD_GLOBAL                     35: ismodule
                520     LOAD_FAST                       18: _self
                522     CALL_FUNCTION                   1
                524     STORE_FAST                      20: self_ismodule
                526     LOAD_FAST                       19: self_isbound
                528     POP_JUMP_IF_FALSE               278 (to 556)
                532     LOAD_FAST                       20: self_ismodule
                534     POP_JUMP_IF_TRUE                272 (to 544)
                538     LOAD_FAST                       3: skip_bound_arg
                540     POP_JUMP_IF_FALSE               278 (to 556)
                544     LOAD_DEREF                      7: parameters
                546     LOAD_METHOD                     36: pop
                548     LOAD_CONST                      1: 0
                550     CALL_METHOD                     1
                552     POP_TOP                         
                554     JUMP_FORWARD                    13 (to 582)
                556     LOAD_DEREF                      7: parameters
                558     LOAD_CONST                      1: 0
                560     BINARY_SUBSCR                   
                562     LOAD_ATTR                       37: replace
                564     LOAD_DEREF                      0: Parameter
                566     LOAD_ATTR                       23: POSITIONAL_ONLY
                568     LOAD_CONST                      17: ('kind',)
                570     CALL_FUNCTION_KW                1
                572     STORE_FAST                      11: p
                574     LOAD_FAST                       11: p
                576     LOAD_DEREF                      7: parameters
                578     LOAD_CONST                      1: 0
                580     STORE_SUBSCR                    
                582     LOAD_FAST                       0: cls
                584     LOAD_DEREF                      7: parameters
                586     LOAD_FAST                       0: cls
                588     LOAD_ATTR                       10: empty
                590     LOAD_CONST                      18: ('return_annotation',)
                592     CALL_FUNCTION_KW                2
                594     RETURN_VALUE                    
        '_signature_fromstr'
        [Code]
            File Name: inspect.py
            Object Name: _signature_from_builtin
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_signature_is_builtin'
                'TypeError'
                'format'
                'getattr'
                'ValueError'
                '_signature_fromstr'
            [Var Names]
                'cls'
                'func'
                'skip_bound_arg'
                's'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Private helper function to get signature for\n    builtin callables.\n    '
                '{!r} is not a Python builtin function'
                '__text_signature__'
                None
                'no signature found for builtin {!r}'
            [Disassembly]
                0       LOAD_GLOBAL                     0: _signature_is_builtin
                2       LOAD_FAST                       1: func
                4       CALL_FUNCTION                   1
                6       POP_JUMP_IF_TRUE                11 (to 22)
                8       LOAD_GLOBAL                     1: TypeError
                10      LOAD_CONST                      1: '{!r} is not a Python builtin function'
                12      LOAD_METHOD                     2: format
                14      LOAD_FAST                       1: func
                16      CALL_METHOD                     1
                18      CALL_FUNCTION                   1
                20      RAISE_VARARGS                   1
                22      LOAD_GLOBAL                     3: getattr
                24      LOAD_FAST                       1: func
                26      LOAD_CONST                      2: '__text_signature__'
                28      LOAD_CONST                      3: None
                30      CALL_FUNCTION                   3
                32      STORE_FAST                      3: s
                34      LOAD_FAST                       3: s
                36      POP_JUMP_IF_TRUE                26 (to 52)
                38      LOAD_GLOBAL                     4: ValueError
                40      LOAD_CONST                      4: 'no signature found for builtin {!r}'
                42      LOAD_METHOD                     2: format
                44      LOAD_FAST                       1: func
                46      CALL_METHOD                     1
                48      CALL_FUNCTION                   1
                50      RAISE_VARARGS                   1
                52      LOAD_GLOBAL                     5: _signature_fromstr
                54      LOAD_FAST                       0: cls
                56      LOAD_FAST                       1: func
                58      LOAD_FAST                       3: s
                60      LOAD_FAST                       2: skip_bound_arg
                62      CALL_FUNCTION                   4
                64      RETURN_VALUE                    
        '_signature_from_builtin'
        [Code]
            File Name: inspect.py
            Object Name: _signature_from_function
            Arg Count: 6
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 29
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isfunction'
                '_signature_is_functionlike'
                'TypeError'
                'format'
                'getattr'
                '_signature_fromstr'
                '_parameter_cls'
                '__code__'
                'co_argcount'
                'co_varnames'
                'co_posonlyargcount'
                'co_kwonlyargcount'
                'get_annotations'
                '__defaults__'
                '__kwdefaults__'
                'len'
                '_POSITIONAL_ONLY'
                '_POSITIONAL_OR_KEYWORD'
                'get'
                '_empty'
                'append'
                'enumerate'
                'co_flags'
                'CO_VARARGS'
                '_VAR_POSITIONAL'
                '_KEYWORD_ONLY'
                'CO_VARKEYWORDS'
                '_VAR_KEYWORD'
            [Var Names]
                'cls'
                'func'
                'skip_bound_arg'
                'globals'
                'locals'
                'eval_str'
                'is_duck_function'
                's'
                'Parameter'
                'func_code'
                'pos_count'
                'arg_names'
                'posonly_count'
                'positional'
                'keyword_only_count'
                'keyword_only'
                'annotations'
                'defaults'
                'kwdefaults'
                'pos_default_count'
                'parameters'
                'non_default_count'
                'posonly_left'
                'name'
                'kind'
                'annotation'
                'offset'
                'default'
                'index'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Private helper: constructs Signature for the given python function.'
                False
                True
                '{!r} is not a Python function'
                '__text_signature__'
                None
                (
                    'globals'
                    'locals'
                    'eval_str'
                )
                0
                (
                    'annotation'
                    'kind'
                )
                1
                (
                    'annotation'
                    'kind'
                    'default'
                )
                'return'
                (
                    'return_annotation'
                    '__validate_parameters__'
                )
            [Disassembly]
                0       LOAD_CONST                      1: False
                2       STORE_FAST                      6: is_duck_function
                4       LOAD_GLOBAL                     0: isfunction
                6       LOAD_FAST                       1: func
                8       CALL_FUNCTION                   1
                10      POP_JUMP_IF_TRUE                20 (to 40)
                12      LOAD_GLOBAL                     1: _signature_is_functionlike
                14      LOAD_FAST                       1: func
                16      CALL_FUNCTION                   1
                18      POP_JUMP_IF_FALSE               13 (to 26)
                20      LOAD_CONST                      2: True
                22      STORE_FAST                      6: is_duck_function
                24      JUMP_FORWARD                    7 (to 40)
                26      LOAD_GLOBAL                     2: TypeError
                28      LOAD_CONST                      3: '{!r} is not a Python function'
                30      LOAD_METHOD                     3: format
                32      LOAD_FAST                       1: func
                34      CALL_METHOD                     1
                36      CALL_FUNCTION                   1
                38      RAISE_VARARGS                   1
                40      LOAD_GLOBAL                     4: getattr
                42      LOAD_FAST                       1: func
                44      LOAD_CONST                      4: '__text_signature__'
                46      LOAD_CONST                      5: None
                48      CALL_FUNCTION                   3
                50      STORE_FAST                      7: s
                52      LOAD_FAST                       7: s
                54      POP_JUMP_IF_FALSE               35 (to 70)
                56      LOAD_GLOBAL                     5: _signature_fromstr
                58      LOAD_FAST                       0: cls
                60      LOAD_FAST                       1: func
                62      LOAD_FAST                       7: s
                64      LOAD_FAST                       2: skip_bound_arg
                66      CALL_FUNCTION                   4
                68      RETURN_VALUE                    
                70      LOAD_FAST                       0: cls
                72      LOAD_ATTR                       6: _parameter_cls
                74      STORE_FAST                      8: Parameter
                76      LOAD_FAST                       1: func
                78      LOAD_ATTR                       7: __code__
                80      STORE_FAST                      9: func_code
                82      LOAD_FAST                       9: func_code
                84      LOAD_ATTR                       8: co_argcount
                86      STORE_FAST                      10: pos_count
                88      LOAD_FAST                       9: func_code
                90      LOAD_ATTR                       9: co_varnames
                92      STORE_FAST                      11: arg_names
                94      LOAD_FAST                       9: func_code
                96      LOAD_ATTR                       10: co_posonlyargcount
                98      STORE_FAST                      12: posonly_count
                100     LOAD_FAST                       11: arg_names
                102     LOAD_CONST                      5: None
                104     LOAD_FAST                       10: pos_count
                106     BUILD_SLICE                     2
                108     BINARY_SUBSCR                   
                110     STORE_FAST                      13: positional
                112     LOAD_FAST                       9: func_code
                114     LOAD_ATTR                       11: co_kwonlyargcount
                116     STORE_FAST                      14: keyword_only_count
                118     LOAD_FAST                       11: arg_names
                120     LOAD_FAST                       10: pos_count
                122     LOAD_FAST                       10: pos_count
                124     LOAD_FAST                       14: keyword_only_count
                126     BINARY_ADD                      
                128     BUILD_SLICE                     2
                130     BINARY_SUBSCR                   
                132     STORE_FAST                      15: keyword_only
                134     LOAD_GLOBAL                     12: get_annotations
                136     LOAD_FAST                       1: func
                138     LOAD_FAST                       3: globals
                140     LOAD_FAST                       4: locals
                142     LOAD_FAST                       5: eval_str
                144     LOAD_CONST                      6: ('globals', 'locals', 'eval_str')
                146     CALL_FUNCTION_KW                4
                148     STORE_FAST                      16: annotations
                150     LOAD_FAST                       1: func
                152     LOAD_ATTR                       13: __defaults__
                154     STORE_FAST                      17: defaults
                156     LOAD_FAST                       1: func
                158     LOAD_ATTR                       14: __kwdefaults__
                160     STORE_FAST                      18: kwdefaults
                162     LOAD_FAST                       17: defaults
                164     POP_JUMP_IF_FALSE               88 (to 176)
                166     LOAD_GLOBAL                     15: len
                168     LOAD_FAST                       17: defaults
                170     CALL_FUNCTION                   1
                172     STORE_FAST                      19: pos_default_count
                174     JUMP_FORWARD                    2 (to 180)
                176     LOAD_CONST                      7: 0
                178     STORE_FAST                      19: pos_default_count
                180     BUILD_LIST                      0
                182     STORE_FAST                      20: parameters
                184     LOAD_FAST                       10: pos_count
                186     LOAD_FAST                       19: pos_default_count
                188     BINARY_SUBTRACT                 
                190     STORE_FAST                      21: non_default_count
                192     LOAD_FAST                       12: posonly_count
                194     STORE_FAST                      22: posonly_left
                196     LOAD_FAST                       13: positional
                198     LOAD_CONST                      5: None
                200     LOAD_FAST                       21: non_default_count
                202     BUILD_SLICE                     2
                204     BINARY_SUBSCR                   
                206     GET_ITER                        
                208     FOR_ITER                        30 (to 270)
                210     STORE_FAST                      23: name
                212     LOAD_FAST                       22: posonly_left
                214     POP_JUMP_IF_FALSE               110 (to 220)
                216     LOAD_GLOBAL                     16: _POSITIONAL_ONLY
                218     JUMP_FORWARD                    1 (to 222)
                220     LOAD_GLOBAL                     17: _POSITIONAL_OR_KEYWORD
                222     STORE_FAST                      24: kind
                224     LOAD_FAST                       16: annotations
                226     LOAD_METHOD                     18: get
                228     LOAD_FAST                       23: name
                230     LOAD_GLOBAL                     19: _empty
                232     CALL_METHOD                     2
                234     STORE_FAST                      25: annotation
                236     LOAD_FAST                       20: parameters
                238     LOAD_METHOD                     20: append
                240     LOAD_FAST                       8: Parameter
                242     LOAD_FAST                       23: name
                244     LOAD_FAST                       25: annotation
                246     LOAD_FAST                       24: kind
                248     LOAD_CONST                      8: ('annotation', 'kind')
                250     CALL_FUNCTION_KW                3
                252     CALL_METHOD                     1
                254     POP_TOP                         
                256     LOAD_FAST                       22: posonly_left
                258     POP_JUMP_IF_FALSE               134 (to 268)
                260     LOAD_FAST                       22: posonly_left
                262     LOAD_CONST                      9: 1
                264     INPLACE_SUBTRACT                
                266     STORE_FAST                      22: posonly_left
                268     JUMP_ABSOLUTE                   104 (to 208)
                270     LOAD_GLOBAL                     21: enumerate
                272     LOAD_FAST                       13: positional
                274     LOAD_FAST                       21: non_default_count
                276     LOAD_CONST                      5: None
                278     BUILD_SLICE                     2
                280     BINARY_SUBSCR                   
                282     CALL_FUNCTION                   1
                284     GET_ITER                        
                286     FOR_ITER                        35 (to 358)
                288     UNPACK_SEQUENCE                 2
                290     STORE_FAST                      26: offset
                292     STORE_FAST                      23: name
                294     LOAD_FAST                       22: posonly_left
                296     POP_JUMP_IF_FALSE               151 (to 302)
                298     LOAD_GLOBAL                     16: _POSITIONAL_ONLY
                300     JUMP_FORWARD                    1 (to 304)
                302     LOAD_GLOBAL                     17: _POSITIONAL_OR_KEYWORD
                304     STORE_FAST                      24: kind
                306     LOAD_FAST                       16: annotations
                308     LOAD_METHOD                     18: get
                310     LOAD_FAST                       23: name
                312     LOAD_GLOBAL                     19: _empty
                314     CALL_METHOD                     2
                316     STORE_FAST                      25: annotation
                318     LOAD_FAST                       20: parameters
                320     LOAD_METHOD                     20: append
                322     LOAD_FAST                       8: Parameter
                324     LOAD_FAST                       23: name
                326     LOAD_FAST                       25: annotation
                328     LOAD_FAST                       24: kind
                330     LOAD_FAST                       17: defaults
                332     LOAD_FAST                       26: offset
                334     BINARY_SUBSCR                   
                336     LOAD_CONST                      10: ('annotation', 'kind', 'default')
                338     CALL_FUNCTION_KW                4
                340     CALL_METHOD                     1
                342     POP_TOP                         
                344     LOAD_FAST                       22: posonly_left
                346     POP_JUMP_IF_FALSE               178 (to 356)
                348     LOAD_FAST                       22: posonly_left
                350     LOAD_CONST                      9: 1
                352     INPLACE_SUBTRACT                
                354     STORE_FAST                      22: posonly_left
                356     JUMP_ABSOLUTE                   143 (to 286)
                358     LOAD_FAST                       9: func_code
                360     LOAD_ATTR                       22: co_flags
                362     LOAD_GLOBAL                     23: CO_VARARGS
                364     BINARY_AND                      
                366     POP_JUMP_IF_FALSE               206 (to 412)
                368     LOAD_FAST                       11: arg_names
                370     LOAD_FAST                       10: pos_count
                372     LOAD_FAST                       14: keyword_only_count
                374     BINARY_ADD                      
                376     BINARY_SUBSCR                   
                378     STORE_FAST                      23: name
                380     LOAD_FAST                       16: annotations
                382     LOAD_METHOD                     18: get
                384     LOAD_FAST                       23: name
                386     LOAD_GLOBAL                     19: _empty
                388     CALL_METHOD                     2
                390     STORE_FAST                      25: annotation
                392     LOAD_FAST                       20: parameters
                394     LOAD_METHOD                     20: append
                396     LOAD_FAST                       8: Parameter
                398     LOAD_FAST                       23: name
                400     LOAD_FAST                       25: annotation
                402     LOAD_GLOBAL                     24: _VAR_POSITIONAL
                404     LOAD_CONST                      8: ('annotation', 'kind')
                406     CALL_FUNCTION_KW                3
                408     CALL_METHOD                     1
                410     POP_TOP                         
                412     LOAD_FAST                       15: keyword_only
                414     GET_ITER                        
                416     FOR_ITER                        31 (to 480)
                418     STORE_FAST                      23: name
                420     LOAD_GLOBAL                     19: _empty
                422     STORE_FAST                      27: default
                424     LOAD_FAST                       18: kwdefaults
                426     LOAD_CONST                      5: None
                428     IS_OP                           1 (is not)
                430     POP_JUMP_IF_FALSE               222 (to 444)
                432     LOAD_FAST                       18: kwdefaults
                434     LOAD_METHOD                     18: get
                436     LOAD_FAST                       23: name
                438     LOAD_GLOBAL                     19: _empty
                440     CALL_METHOD                     2
                442     STORE_FAST                      27: default
                444     LOAD_FAST                       16: annotations
                446     LOAD_METHOD                     18: get
                448     LOAD_FAST                       23: name
                450     LOAD_GLOBAL                     19: _empty
                452     CALL_METHOD                     2
                454     STORE_FAST                      25: annotation
                456     LOAD_FAST                       20: parameters
                458     LOAD_METHOD                     20: append
                460     LOAD_FAST                       8: Parameter
                462     LOAD_FAST                       23: name
                464     LOAD_FAST                       25: annotation
                466     LOAD_GLOBAL                     25: _KEYWORD_ONLY
                468     LOAD_FAST                       27: default
                470     LOAD_CONST                      10: ('annotation', 'kind', 'default')
                472     CALL_FUNCTION_KW                4
                474     CALL_METHOD                     1
                476     POP_TOP                         
                478     JUMP_ABSOLUTE                   208 (to 416)
                480     LOAD_FAST                       9: func_code
                482     LOAD_ATTR                       22: co_flags
                484     LOAD_GLOBAL                     26: CO_VARKEYWORDS
                486     BINARY_AND                      
                488     POP_JUMP_IF_FALSE               280 (to 560)
                492     LOAD_FAST                       10: pos_count
                494     LOAD_FAST                       14: keyword_only_count
                496     BINARY_ADD                      
                498     STORE_FAST                      28: index
                500     LOAD_FAST                       9: func_code
                502     LOAD_ATTR                       22: co_flags
                504     LOAD_GLOBAL                     23: CO_VARARGS
                506     BINARY_AND                      
                508     POP_JUMP_IF_FALSE               260 (to 520)
                512     LOAD_FAST                       28: index
                514     LOAD_CONST                      9: 1
                516     INPLACE_ADD                     
                518     STORE_FAST                      28: index
                520     LOAD_FAST                       11: arg_names
                522     LOAD_FAST                       28: index
                524     BINARY_SUBSCR                   
                526     STORE_FAST                      23: name
                528     LOAD_FAST                       16: annotations
                530     LOAD_METHOD                     18: get
                532     LOAD_FAST                       23: name
                534     LOAD_GLOBAL                     19: _empty
                536     CALL_METHOD                     2
                538     STORE_FAST                      25: annotation
                540     LOAD_FAST                       20: parameters
                542     LOAD_METHOD                     20: append
                544     LOAD_FAST                       8: Parameter
                546     LOAD_FAST                       23: name
                548     LOAD_FAST                       25: annotation
                550     LOAD_GLOBAL                     27: _VAR_KEYWORD
                552     LOAD_CONST                      8: ('annotation', 'kind')
                554     CALL_FUNCTION_KW                3
                556     CALL_METHOD                     1
                558     POP_TOP                         
                560     LOAD_FAST                       0: cls
                562     LOAD_FAST                       20: parameters
                564     LOAD_FAST                       16: annotations
                566     LOAD_METHOD                     18: get
                568     LOAD_CONST                      11: 'return'
                570     LOAD_GLOBAL                     19: _empty
                572     CALL_METHOD                     2
                574     LOAD_FAST                       6: is_duck_function
                576     LOAD_CONST                      12: ('return_annotation', '__validate_parameters__')
                578     CALL_FUNCTION_KW                3
                580     RETURN_VALUE                    
        '_signature_from_function'
        (
            'follow_wrapper_chains'
            'skip_bound_arg'
            'globals'
            'locals'
            'eval_str'
        )
        [Code]
            File Name: inspect.py
            Object Name: _signature_from_callable
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 6
            Locals: 22
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'functools'
                'partial'
                '_signature_from_callable'
                'callable'
                'TypeError'
                'format'
                'isinstance'
                'types'
                'MethodType'
                '__func__'
                '_signature_bound_method'
                'unwrap'
                '__signature__'
                'AttributeError'
                'Signature'
                '_partialmethod'
                'partialmethod'
                'func'
                '_signature_get_partial'
                'tuple'
                'parameters'
                'values'
                'kind'
                'Parameter'
                'VAR_POSITIONAL'
                'replace'
                'isfunction'
                '_signature_is_functionlike'
                '_signature_from_function'
                '_signature_is_builtin'
                '_signature_from_builtin'
                'type'
                '_signature_get_user_defined_method'
                '__dict__'
                '__mro__'
                '__text_signature__'
                '_signature_fromstr'
                '__init__'
                'object'
                '__new__'
                'from_callable'
                'ValueError'
                '_NonUserDefinedCallables'
                'BuiltinFunctionType'
            [Var Names]
                'obj'
                'follow_wrapper_chains'
                'skip_bound_arg'
                'globals'
                'locals'
                'eval_str'
                'sigcls'
                '_get_signature_of'
                'sig'
                'partialmethod'
                'wrapped_sig'
                'first_wrapped_param'
                'sig_params'
                'new_params'
                'call'
                'factory_method'
                'new'
                'init'
                'base'
                'text_sig'
                'ex'
                'msg'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Private helper function to get signature for arbitrary\n    callable objects.\n    '
                (
                    'follow_wrapper_chains'
                    'skip_bound_arg'
                    'globals'
                    'locals'
                    'sigcls'
                    'eval_str'
                )
                '{!r} is not a callable object'
                [Code]
                    File Name: inspect.py
                    Object Name: <lambda>
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                    [Names]
                        'hasattr'
                        'isinstance'
                        'types'
                        'MethodType'
                    [Var Names]
                        'f'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '__signature__'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hasattr
                        2       LOAD_FAST                       0: f
                        4       LOAD_CONST                      1: '__signature__'
                        6       CALL_FUNCTION                   2
                        8       JUMP_IF_TRUE_OR_POP             10 (to 20)
                        10      LOAD_GLOBAL                     1: isinstance
                        12      LOAD_FAST                       0: f
                        14      LOAD_GLOBAL                     2: types
                        16      LOAD_ATTR                       3: MethodType
                        18      CALL_FUNCTION                   2
                        20      RETURN_VALUE                    
                '_signature_from_callable.<locals>.<lambda>'
                (
                    'stop'
                )
                None
                'unexpected object {!r} in __signature__ attribute'
                (
                    None
                )
                0
                (
                    'parameters'
                )
                (
                    'skip_bound_arg'
                    'globals'
                    'locals'
                    'eval_str'
                )
                (
                    'skip_bound_arg'
                )
                '__call__'
                '__new__'
                '__init__'
                -1
                'no signature found for builtin type {!r}'
                'no signature found for {!r}'
                'no signature found for builtin function {!r}'
                'callable {!r} is not supported by signature'
            [Disassembly]
                0       LOAD_GLOBAL                     0: functools
                2       LOAD_ATTR                       1: partial
                4       LOAD_GLOBAL                     2: _signature_from_callable
                6       LOAD_FAST                       1: follow_wrapper_chains
                8       LOAD_FAST                       2: skip_bound_arg
                10      LOAD_FAST                       3: globals
                12      LOAD_FAST                       4: locals
                14      LOAD_FAST                       6: sigcls
                16      LOAD_FAST                       5: eval_str
                18      LOAD_CONST                      1: ('follow_wrapper_chains', 'skip_bound_arg', 'globals', 'locals', 'sigcls', 'eval_str')
                20      CALL_FUNCTION_KW                7
                22      STORE_FAST                      7: _get_signature_of
                24      LOAD_GLOBAL                     3: callable
                26      LOAD_FAST                       0: obj
                28      CALL_FUNCTION                   1
                30      POP_JUMP_IF_TRUE                23 (to 46)
                32      LOAD_GLOBAL                     4: TypeError
                34      LOAD_CONST                      2: '{!r} is not a callable object'
                36      LOAD_METHOD                     5: format
                38      LOAD_FAST                       0: obj
                40      CALL_METHOD                     1
                42      CALL_FUNCTION                   1
                44      RAISE_VARARGS                   1
                46      LOAD_GLOBAL                     6: isinstance
                48      LOAD_FAST                       0: obj
                50      LOAD_GLOBAL                     7: types
                52      LOAD_ATTR                       8: MethodType
                54      CALL_FUNCTION                   2
                56      POP_JUMP_IF_FALSE               42 (to 84)
                58      LOAD_FAST                       7: _get_signature_of
                60      LOAD_FAST                       0: obj
                62      LOAD_ATTR                       9: __func__
                64      CALL_FUNCTION                   1
                66      STORE_FAST                      8: sig
                68      LOAD_FAST                       2: skip_bound_arg
                70      POP_JUMP_IF_FALSE               40 (to 80)
                72      LOAD_GLOBAL                     10: _signature_bound_method
                74      LOAD_FAST                       8: sig
                76      CALL_FUNCTION                   1
                78      RETURN_VALUE                    
                80      LOAD_FAST                       8: sig
                82      RETURN_VALUE                    
                84      LOAD_FAST                       1: follow_wrapper_chains
                86      POP_JUMP_IF_FALSE               62 (to 124)
                88      LOAD_GLOBAL                     11: unwrap
                90      LOAD_FAST                       0: obj
                92      LOAD_CONST                      3: <CODE> <lambda>
                94      LOAD_CONST                      4: '_signature_from_callable.<locals>.<lambda>'
                96      MAKE_FUNCTION                   0
                98      LOAD_CONST                      5: ('stop',)
                100     CALL_FUNCTION_KW                2
                102     STORE_FAST                      0: obj
                104     LOAD_GLOBAL                     6: isinstance
                106     LOAD_FAST                       0: obj
                108     LOAD_GLOBAL                     7: types
                110     LOAD_ATTR                       8: MethodType
                112     CALL_FUNCTION                   2
                114     POP_JUMP_IF_FALSE               62 (to 124)
                116     LOAD_FAST                       7: _get_signature_of
                118     LOAD_FAST                       0: obj
                120     CALL_FUNCTION                   1
                122     RETURN_VALUE                    
                124     SETUP_FINALLY                   5 (to 136)
                126     LOAD_FAST                       0: obj
                128     LOAD_ATTR                       12: __signature__
                130     STORE_FAST                      8: sig
                132     POP_BLOCK                       
                134     JUMP_FORWARD                    9 (to 154)
                136     DUP_TOP                         
                138     LOAD_GLOBAL                     13: AttributeError
                140     JUMP_IF_NOT_EXC_MATCH           76 (to 152)
                142     POP_TOP                         
                144     POP_TOP                         
                146     POP_TOP                         
                148     POP_EXCEPT                      
                150     JUMP_FORWARD                    19 (to 190)
                152     RERAISE                         0
                154     LOAD_FAST                       8: sig
                156     LOAD_CONST                      6: None
                158     IS_OP                           1 (is not)
                160     POP_JUMP_IF_FALSE               95 (to 190)
                162     LOAD_GLOBAL                     6: isinstance
                164     LOAD_FAST                       8: sig
                166     LOAD_GLOBAL                     14: Signature
                168     CALL_FUNCTION                   2
                170     POP_JUMP_IF_TRUE                93 (to 186)
                172     LOAD_GLOBAL                     4: TypeError
                174     LOAD_CONST                      7: 'unexpected object {!r} in __signature__ attribute'
                176     LOAD_METHOD                     5: format
                178     LOAD_FAST                       8: sig
                180     CALL_METHOD                     1
                182     CALL_FUNCTION                   1
                184     RAISE_VARARGS                   1
                186     LOAD_FAST                       8: sig
                188     RETURN_VALUE                    
                190     SETUP_FINALLY                   5 (to 202)
                192     LOAD_FAST                       0: obj
                194     LOAD_ATTR                       15: _partialmethod
                196     STORE_FAST                      9: partialmethod
                198     POP_BLOCK                       
                200     JUMP_FORWARD                    9 (to 220)
                202     DUP_TOP                         
                204     LOAD_GLOBAL                     13: AttributeError
                206     JUMP_IF_NOT_EXC_MATCH           109 (to 218)
                208     POP_TOP                         
                210     POP_TOP                         
                212     POP_TOP                         
                214     POP_EXCEPT                      
                216     JUMP_FORWARD                    63 (to 344)
                218     RERAISE                         0
                220     LOAD_GLOBAL                     6: isinstance
                222     LOAD_FAST                       9: partialmethod
                224     LOAD_GLOBAL                     0: functools
                226     LOAD_ATTR                       16: partialmethod
                228     CALL_FUNCTION                   2
                230     POP_JUMP_IF_FALSE               172 (to 344)
                232     LOAD_FAST                       7: _get_signature_of
                234     LOAD_FAST                       9: partialmethod
                236     LOAD_ATTR                       17: func
                238     CALL_FUNCTION                   1
                240     STORE_FAST                      10: wrapped_sig
                242     LOAD_GLOBAL                     18: _signature_get_partial
                244     LOAD_FAST                       10: wrapped_sig
                246     LOAD_FAST                       9: partialmethod
                248     LOAD_CONST                      8: (None,)
                250     CALL_FUNCTION                   3
                252     STORE_FAST                      8: sig
                254     LOAD_GLOBAL                     19: tuple
                256     LOAD_FAST                       10: wrapped_sig
                258     LOAD_ATTR                       20: parameters
                260     LOAD_METHOD                     21: values
                262     CALL_METHOD                     0
                264     CALL_FUNCTION                   1
                266     LOAD_CONST                      9: 0
                268     BINARY_SUBSCR                   
                270     STORE_FAST                      11: first_wrapped_param
                272     LOAD_FAST                       11: first_wrapped_param
                274     LOAD_ATTR                       22: kind
                276     LOAD_GLOBAL                     23: Parameter
                278     LOAD_ATTR                       24: VAR_POSITIONAL
                280     IS_OP                           0 (is)
                282     POP_JUMP_IF_FALSE               144 (to 288)
                284     LOAD_FAST                       8: sig
                286     RETURN_VALUE                    
                288     LOAD_GLOBAL                     19: tuple
                290     LOAD_FAST                       8: sig
                292     LOAD_ATTR                       20: parameters
                294     LOAD_METHOD                     21: values
                296     CALL_METHOD                     0
                298     CALL_FUNCTION                   1
                300     STORE_FAST                      12: sig_params
                302     LOAD_FAST                       12: sig_params
                304     POP_JUMP_IF_FALSE               161 (to 322)
                306     LOAD_FAST                       11: first_wrapped_param
                308     LOAD_FAST                       12: sig_params
                310     LOAD_CONST                      9: 0
                312     BINARY_SUBSCR                   
                314     IS_OP                           1 (is not)
                316     POP_JUMP_IF_TRUE                161 (to 322)
                318     LOAD_ASSERTION_ERROR            
                320     RAISE_VARARGS                   1
                322     LOAD_FAST                       11: first_wrapped_param
                324     BUILD_TUPLE                     1
                326     LOAD_FAST                       12: sig_params
                328     BINARY_ADD                      
                330     STORE_FAST                      13: new_params
                332     LOAD_FAST                       8: sig
                334     LOAD_ATTR                       25: replace
                336     LOAD_FAST                       13: new_params
                338     LOAD_CONST                      10: ('parameters',)
                340     CALL_FUNCTION_KW                1
                342     RETURN_VALUE                    
                344     LOAD_GLOBAL                     26: isfunction
                346     LOAD_FAST                       0: obj
                348     CALL_FUNCTION                   1
                350     POP_JUMP_IF_TRUE                180 (to 360)
                352     LOAD_GLOBAL                     27: _signature_is_functionlike
                354     LOAD_FAST                       0: obj
                356     CALL_FUNCTION                   1
                358     POP_JUMP_IF_FALSE               190 (to 380)
                360     LOAD_GLOBAL                     28: _signature_from_function
                362     LOAD_FAST                       6: sigcls
                364     LOAD_FAST                       0: obj
                366     LOAD_FAST                       2: skip_bound_arg
                368     LOAD_FAST                       3: globals
                370     LOAD_FAST                       4: locals
                372     LOAD_FAST                       5: eval_str
                374     LOAD_CONST                      11: ('skip_bound_arg', 'globals', 'locals', 'eval_str')
                376     CALL_FUNCTION_KW                6
                378     RETURN_VALUE                    
                380     LOAD_GLOBAL                     29: _signature_is_builtin
                382     LOAD_FAST                       0: obj
                384     CALL_FUNCTION                   1
                386     POP_JUMP_IF_FALSE               201 (to 402)
                388     LOAD_GLOBAL                     30: _signature_from_builtin
                390     LOAD_FAST                       6: sigcls
                392     LOAD_FAST                       0: obj
                394     LOAD_FAST                       2: skip_bound_arg
                396     LOAD_CONST                      12: ('skip_bound_arg',)
                398     CALL_FUNCTION_KW                3
                400     RETURN_VALUE                    
                402     LOAD_GLOBAL                     6: isinstance
                404     LOAD_FAST                       0: obj
                406     LOAD_GLOBAL                     0: functools
                408     LOAD_ATTR                       1: partial
                410     CALL_FUNCTION                   2
                412     POP_JUMP_IF_FALSE               217 (to 434)
                414     LOAD_FAST                       7: _get_signature_of
                416     LOAD_FAST                       0: obj
                418     LOAD_ATTR                       17: func
                420     CALL_FUNCTION                   1
                422     STORE_FAST                      10: wrapped_sig
                424     LOAD_GLOBAL                     18: _signature_get_partial
                426     LOAD_FAST                       10: wrapped_sig
                428     LOAD_FAST                       0: obj
                430     CALL_FUNCTION                   2
                432     RETURN_VALUE                    
                434     LOAD_CONST                      6: None
                436     STORE_FAST                      8: sig
                438     LOAD_GLOBAL                     6: isinstance
                440     LOAD_FAST                       0: obj
                442     LOAD_GLOBAL                     31: type
                444     CALL_FUNCTION                   2
                446     POP_JUMP_IF_FALSE               372 (to 744)
                450     LOAD_GLOBAL                     32: _signature_get_user_defined_method
                452     LOAD_GLOBAL                     31: type
                454     LOAD_FAST                       0: obj
                456     CALL_FUNCTION                   1
                458     LOAD_CONST                      13: '__call__'
                460     CALL_FUNCTION                   2
                462     STORE_FAST                      14: call
                464     LOAD_FAST                       14: call
                466     LOAD_CONST                      6: None
                468     IS_OP                           1 (is not)
                470     POP_JUMP_IF_FALSE               241 (to 482)
                472     LOAD_FAST                       7: _get_signature_of
                474     LOAD_FAST                       14: call
                476     CALL_FUNCTION                   1
                478     STORE_FAST                      8: sig
                480     JUMP_FORWARD                    54 (to 590)
                482     LOAD_CONST                      6: None
                484     STORE_FAST                      15: factory_method
                486     LOAD_GLOBAL                     32: _signature_get_user_defined_method
                488     LOAD_FAST                       0: obj
                490     LOAD_CONST                      14: '__new__'
                492     CALL_FUNCTION                   2
                494     STORE_FAST                      16: new
                496     LOAD_GLOBAL                     32: _signature_get_user_defined_method
                498     LOAD_FAST                       0: obj
                500     LOAD_CONST                      15: '__init__'
                502     CALL_FUNCTION                   2
                504     STORE_FAST                      17: init
                506     LOAD_CONST                      14: '__new__'
                508     LOAD_FAST                       0: obj
                510     LOAD_ATTR                       33: __dict__
                512     CONTAINS_OP                     0 (in)
                514     POP_JUMP_IF_FALSE               262 (to 524)
                518     LOAD_FAST                       16: new
                520     STORE_FAST                      15: factory_method
                522     JUMP_FORWARD                    24 (to 572)
                524     LOAD_CONST                      15: '__init__'
                526     LOAD_FAST                       0: obj
                528     LOAD_ATTR                       33: __dict__
                530     CONTAINS_OP                     0 (in)
                532     POP_JUMP_IF_FALSE               271 (to 542)
                536     LOAD_FAST                       17: init
                538     STORE_FAST                      15: factory_method
                540     JUMP_FORWARD                    15 (to 572)
                542     LOAD_FAST                       16: new
                544     LOAD_CONST                      6: None
                546     IS_OP                           1 (is not)
                548     POP_JUMP_IF_FALSE               279 (to 558)
                552     LOAD_FAST                       16: new
                554     STORE_FAST                      15: factory_method
                556     JUMP_FORWARD                    7 (to 572)
                558     LOAD_FAST                       17: init
                560     LOAD_CONST                      6: None
                562     IS_OP                           1 (is not)
                564     POP_JUMP_IF_FALSE               286 (to 572)
                568     LOAD_FAST                       17: init
                570     STORE_FAST                      15: factory_method
                572     LOAD_FAST                       15: factory_method
                574     LOAD_CONST                      6: None
                576     IS_OP                           1 (is not)
                578     POP_JUMP_IF_FALSE               295 (to 590)
                582     LOAD_FAST                       7: _get_signature_of
                584     LOAD_FAST                       15: factory_method
                586     CALL_FUNCTION                   1
                588     STORE_FAST                      8: sig
                590     LOAD_FAST                       8: sig
                592     LOAD_CONST                      6: None
                594     IS_OP                           0 (is)
                596     POP_JUMP_IF_FALSE               371 (to 742)
                600     LOAD_FAST                       0: obj
                602     LOAD_ATTR                       34: __mro__
                604     LOAD_CONST                      6: None
                606     LOAD_CONST                      16: -1
                608     BUILD_SLICE                     2
                610     BINARY_SUBSCR                   
                612     GET_ITER                        
                614     FOR_ITER                        31 (to 678)
                616     STORE_FAST                      18: base
                618     SETUP_FINALLY                   5 (to 630)
                620     LOAD_FAST                       18: base
                622     LOAD_ATTR                       35: __text_signature__
                624     STORE_FAST                      19: text_sig
                626     POP_BLOCK                       
                628     JUMP_FORWARD                    11 (to 652)
                630     DUP_TOP                         
                632     LOAD_GLOBAL                     13: AttributeError
                634     JUMP_IF_NOT_EXC_MATCH           325 (to 650)
                638     POP_TOP                         
                640     POP_TOP                         
                642     POP_TOP                         
                644     POP_EXCEPT                      
                646     JUMP_ABSOLUTE                   307 (to 614)
                650     RERAISE                         0
                652     LOAD_FAST                       19: text_sig
                654     POP_JUMP_IF_FALSE               337 (to 674)
                658     LOAD_GLOBAL                     36: _signature_fromstr
                660     LOAD_FAST                       6: sigcls
                662     LOAD_FAST                       18: base
                664     LOAD_FAST                       19: text_sig
                666     CALL_FUNCTION                   3
                668     ROT_TWO                         
                670     POP_TOP                         
                672     RETURN_VALUE                    
                674     JUMP_ABSOLUTE                   307 (to 614)
                678     LOAD_GLOBAL                     31: type
                680     LOAD_FAST                       0: obj
                682     LOAD_ATTR                       34: __mro__
                684     CONTAINS_OP                     1 (not in)
                686     POP_JUMP_IF_FALSE               371 (to 742)
                690     LOAD_FAST                       0: obj
                692     LOAD_ATTR                       37: __init__
                694     LOAD_GLOBAL                     38: object
                696     LOAD_ATTR                       37: __init__
                698     IS_OP                           0 (is)
                700     POP_JUMP_IF_FALSE               364 (to 728)
                704     LOAD_FAST                       0: obj
                706     LOAD_ATTR                       39: __new__
                708     LOAD_GLOBAL                     38: object
                710     LOAD_ATTR                       39: __new__
                712     IS_OP                           0 (is)
                714     POP_JUMP_IF_FALSE               364 (to 728)
                718     LOAD_FAST                       6: sigcls
                720     LOAD_METHOD                     40: from_callable
                722     LOAD_GLOBAL                     38: object
                724     CALL_METHOD                     1
                726     RETURN_VALUE                    
                728     LOAD_GLOBAL                     41: ValueError
                730     LOAD_CONST                      17: 'no signature found for builtin type {!r}'
                732     LOAD_METHOD                     5: format
                734     LOAD_FAST                       0: obj
                736     CALL_METHOD                     1
                738     CALL_FUNCTION                   1
                740     RAISE_VARARGS                   1
                742     JUMP_FORWARD                    48 (to 840)
                744     LOAD_GLOBAL                     6: isinstance
                746     LOAD_FAST                       0: obj
                748     LOAD_GLOBAL                     42: _NonUserDefinedCallables
                750     CALL_FUNCTION                   2
                752     POP_JUMP_IF_TRUE                420 (to 840)
                756     LOAD_GLOBAL                     32: _signature_get_user_defined_method
                758     LOAD_GLOBAL                     31: type
                760     LOAD_FAST                       0: obj
                762     CALL_FUNCTION                   1
                764     LOAD_CONST                      13: '__call__'
                766     CALL_FUNCTION                   2
                768     STORE_FAST                      14: call
                770     LOAD_FAST                       14: call
                772     LOAD_CONST                      6: None
                774     IS_OP                           1 (is not)
                776     POP_JUMP_IF_FALSE               420 (to 840)
                780     SETUP_FINALLY                   6 (to 794)
                782     LOAD_FAST                       7: _get_signature_of
                784     LOAD_FAST                       14: call
                786     CALL_FUNCTION                   1
                788     STORE_FAST                      8: sig
                790     POP_BLOCK                       
                792     JUMP_FORWARD                    23 (to 840)
                794     DUP_TOP                         
                796     LOAD_GLOBAL                     41: ValueError
                798     JUMP_IF_NOT_EXC_MATCH           419 (to 838)
                802     POP_TOP                         
                804     STORE_FAST                      20: ex
                806     POP_TOP                         
                808     SETUP_FINALLY                   10 (to 830)
                810     LOAD_CONST                      18: 'no signature found for {!r}'
                812     LOAD_METHOD                     5: format
                814     LOAD_FAST                       0: obj
                816     CALL_METHOD                     1
                818     STORE_FAST                      21: msg
                820     LOAD_GLOBAL                     41: ValueError
                822     LOAD_FAST                       21: msg
                824     CALL_FUNCTION                   1
                826     LOAD_FAST                       20: ex
                828     RAISE_VARARGS                   2
                830     LOAD_CONST                      6: None
                832     STORE_FAST                      20: ex
                834     DELETE_FAST                     20: ex
                836     RERAISE                         1
                838     RERAISE                         0
                840     LOAD_FAST                       8: sig
                842     LOAD_CONST                      6: None
                844     IS_OP                           1 (is not)
                846     POP_JUMP_IF_FALSE               434 (to 868)
                850     LOAD_FAST                       2: skip_bound_arg
                852     POP_JUMP_IF_FALSE               432 (to 864)
                856     LOAD_GLOBAL                     10: _signature_bound_method
                858     LOAD_FAST                       8: sig
                860     CALL_FUNCTION                   1
                862     RETURN_VALUE                    
                864     LOAD_FAST                       8: sig
                866     RETURN_VALUE                    
                868     LOAD_GLOBAL                     6: isinstance
                870     LOAD_FAST                       0: obj
                872     LOAD_GLOBAL                     7: types
                874     LOAD_ATTR                       43: BuiltinFunctionType
                876     CALL_FUNCTION                   2
                878     POP_JUMP_IF_FALSE               450 (to 900)
                882     LOAD_CONST                      19: 'no signature found for builtin function {!r}'
                884     LOAD_METHOD                     5: format
                886     LOAD_FAST                       0: obj
                888     CALL_METHOD                     1
                890     STORE_FAST                      21: msg
                892     LOAD_GLOBAL                     41: ValueError
                894     LOAD_FAST                       21: msg
                896     CALL_FUNCTION                   1
                898     RAISE_VARARGS                   1
                900     LOAD_GLOBAL                     41: ValueError
                902     LOAD_CONST                      20: 'callable {!r} is not supported by signature'
                904     LOAD_METHOD                     5: format
                906     LOAD_FAST                       0: obj
                908     CALL_METHOD                     1
                910     CALL_FUNCTION                   1
                912     RAISE_VARARGS                   1
        '_signature_from_callable'
        [Code]
            File Name: inspect.py
            Object Name: _void
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_void'
                'A private marker - used in Parameter & Signature.'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_void'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A private marker - used in Parameter & Signature.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        '_void'
        [Code]
            File Name: inspect.py
            Object Name: _empty
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_empty'
                'Marker object for Signature.empty and Parameter.empty.'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_empty'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Marker object for Signature.empty and Parameter.empty.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        '_empty'
        [Code]
            File Name: inspect.py
            Object Name: _ParameterKind
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'POSITIONAL_ONLY'
                'POSITIONAL_OR_KEYWORD'
                'VAR_POSITIONAL'
                'KEYWORD_ONLY'
                'VAR_KEYWORD'
                '__str__'
                'property'
                'description'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_ParameterKind'
                0
                1
                2
                3
                4
                [Code]
                    File Name: inspect.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name_'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _name_
                        4       RETURN_VALUE                    
                '_ParameterKind.__str__'
                [Code]
                    File Name: inspect.py
                    Object Name: description
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_PARAM_NAME_MAPPING'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _PARAM_NAME_MAPPING
                        2       LOAD_FAST                       0: self
                        4       BINARY_SUBSCR                   
                        6       RETURN_VALUE                    
                '_ParameterKind.description'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_ParameterKind'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 0
                10      STORE_NAME                      3: POSITIONAL_ONLY
                12      LOAD_CONST                      2: 1
                14      STORE_NAME                      4: POSITIONAL_OR_KEYWORD
                16      LOAD_CONST                      3: 2
                18      STORE_NAME                      5: VAR_POSITIONAL
                20      LOAD_CONST                      4: 3
                22      STORE_NAME                      6: KEYWORD_ONLY
                24      LOAD_CONST                      5: 4
                26      STORE_NAME                      7: VAR_KEYWORD
                28      LOAD_CONST                      6: <CODE> __str__
                30      LOAD_CONST                      7: '_ParameterKind.__str__'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      8: __str__
                36      LOAD_NAME                       9: property
                38      LOAD_CONST                      8: <CODE> description
                40      LOAD_CONST                      9: '_ParameterKind.description'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      10: description
                48      LOAD_CONST                      10: None
                50      RETURN_VALUE                    
        '_ParameterKind'
        'positional-only'
        'positional or keyword'
        'variadic positional'
        'keyword-only'
        'variadic keyword'
        [Code]
            File Name: inspect.py
            Object Name: Parameter
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 5
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '_POSITIONAL_ONLY'
                'POSITIONAL_ONLY'
                '_POSITIONAL_OR_KEYWORD'
                'POSITIONAL_OR_KEYWORD'
                '_VAR_POSITIONAL'
                'VAR_POSITIONAL'
                '_KEYWORD_ONLY'
                'KEYWORD_ONLY'
                '_VAR_KEYWORD'
                'VAR_KEYWORD'
                '_empty'
                'empty'
                '__init__'
                '__reduce__'
                '__setstate__'
                'property'
                'name'
                'default'
                'annotation'
                'kind'
                '_void'
                'replace'
                '__str__'
                '__repr__'
                '__hash__'
                '__eq__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Parameter'
                'Represents a parameter in a function signature.\n\n    Has the following public attributes:\n\n    * name : str\n        The name of the parameter as a string.\n    * default : object\n        The default value for the parameter if specified.  If the\n        parameter has no default value, this attribute is set to\n        `Parameter.empty`.\n    * annotation\n        The annotation for the parameter if specified.  If the\n        parameter has no annotation, this attribute is set to\n        `Parameter.empty`.\n    * kind : str\n        Describes how argument values are bound to the parameter.\n        Possible values: `Parameter.POSITIONAL_ONLY`,\n        `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,\n        `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.\n    '
                (
                    '_name'
                    '_kind'
                    '_default'
                    '_annotation'
                )
                (
                    'default'
                    'annotation'
                )
                [Code]
                    File Name: inspect.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 2
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ParameterKind'
                        '_kind'
                        'ValueError'
                        '_empty'
                        '_VAR_POSITIONAL'
                        '_VAR_KEYWORD'
                        'format'
                        'description'
                        '_default'
                        '_annotation'
                        'isinstance'
                        'str'
                        'type'
                        '__name__'
                        'TypeError'
                        'isdigit'
                        '_POSITIONAL_OR_KEYWORD'
                        '_POSITIONAL_ONLY'
                        'isidentifier'
                        '_name'
                    [Var Names]
                        'self'
                        'name'
                        'kind'
                        'default'
                        'annotation'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'value '
                        ' is not a valid Parameter.kind'
                        '{} parameters cannot have default values'
                        'name is a required attribute for Parameter'
                        'name must be a str, not a {}'
                        0
                        '.'
                        1
                        'implicit arguments must be passed as positional or keyword arguments, not {}'
                        'implicit{}'
                        '{!r} is not a valid parameter name'
                    [Disassembly]
                        0       SETUP_FINALLY                   7 (to 16)
                        2       LOAD_GLOBAL                     0: _ParameterKind
                        4       LOAD_FAST                       2: kind
                        6       CALL_FUNCTION                   1
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _kind
                        12      POP_BLOCK                       
                        14      JUMP_FORWARD                    15 (to 46)
                        16      DUP_TOP                         
                        18      LOAD_GLOBAL                     2: ValueError
                        20      JUMP_IF_NOT_EXC_MATCH           22 (to 44)
                        22      POP_TOP                         
                        24      POP_TOP                         
                        26      POP_TOP                         
                        28      LOAD_GLOBAL                     2: ValueError
                        30      LOAD_CONST                      1: 'value '
                        32      LOAD_FAST                       2: kind
                        34      FORMAT_VALUE                    2 (FVC_REPR)
                        36      LOAD_CONST                      2: ' is not a valid Parameter.kind'
                        38      BUILD_STRING                    3
                        40      CALL_FUNCTION                   1
                        42      RAISE_VARARGS                   1
                        44      RERAISE                         0
                        46      LOAD_FAST                       3: default
                        48      LOAD_GLOBAL                     3: _empty
                        50      IS_OP                           1 (is not)
                        52      POP_JUMP_IF_FALSE               47 (to 94)
                        54      LOAD_FAST                       0: self
                        56      LOAD_ATTR                       1: _kind
                        58      LOAD_GLOBAL                     4: _VAR_POSITIONAL
                        60      LOAD_GLOBAL                     5: _VAR_KEYWORD
                        62      BUILD_TUPLE                     2
                        64      CONTAINS_OP                     0 (in)
                        66      POP_JUMP_IF_FALSE               47 (to 94)
                        68      LOAD_CONST                      3: '{} parameters cannot have default values'
                        70      STORE_FAST                      5: msg
                        72      LOAD_FAST                       5: msg
                        74      LOAD_METHOD                     6: format
                        76      LOAD_FAST                       0: self
                        78      LOAD_ATTR                       1: _kind
                        80      LOAD_ATTR                       7: description
                        82      CALL_METHOD                     1
                        84      STORE_FAST                      5: msg
                        86      LOAD_GLOBAL                     2: ValueError
                        88      LOAD_FAST                       5: msg
                        90      CALL_FUNCTION                   1
                        92      RAISE_VARARGS                   1
                        94      LOAD_FAST                       3: default
                        96      LOAD_FAST                       0: self
                        98      STORE_ATTR                      8: _default
                        100     LOAD_FAST                       4: annotation
                        102     LOAD_FAST                       0: self
                        104     STORE_ATTR                      9: _annotation
                        106     LOAD_FAST                       1: name
                        108     LOAD_GLOBAL                     3: _empty
                        110     IS_OP                           0 (is)
                        112     POP_JUMP_IF_FALSE               61 (to 122)
                        114     LOAD_GLOBAL                     2: ValueError
                        116     LOAD_CONST                      4: 'name is a required attribute for Parameter'
                        118     CALL_FUNCTION                   1
                        120     RAISE_VARARGS                   1
                        122     LOAD_GLOBAL                     10: isinstance
                        124     LOAD_FAST                       1: name
                        126     LOAD_GLOBAL                     11: str
                        128     CALL_FUNCTION                   2
                        130     POP_JUMP_IF_TRUE                78 (to 156)
                        132     LOAD_CONST                      5: 'name must be a str, not a {}'
                        134     LOAD_METHOD                     6: format
                        136     LOAD_GLOBAL                     12: type
                        138     LOAD_FAST                       1: name
                        140     CALL_FUNCTION                   1
                        142     LOAD_ATTR                       13: __name__
                        144     CALL_METHOD                     1
                        146     STORE_FAST                      5: msg
                        148     LOAD_GLOBAL                     14: TypeError
                        150     LOAD_FAST                       5: msg
                        152     CALL_FUNCTION                   1
                        154     RAISE_VARARGS                   1
                        156     LOAD_FAST                       1: name
                        158     LOAD_CONST                      6: 0
                        160     BINARY_SUBSCR                   
                        162     LOAD_CONST                      7: '.'
                        164     COMPARE_OP                      2 (==)
                        166     POP_JUMP_IF_FALSE               122 (to 244)
                        168     LOAD_FAST                       1: name
                        170     LOAD_CONST                      8: 1
                        172     LOAD_CONST                      0: None
                        174     BUILD_SLICE                     2
                        176     BINARY_SUBSCR                   
                        178     LOAD_METHOD                     15: isdigit
                        180     CALL_METHOD                     0
                        182     POP_JUMP_IF_FALSE               122 (to 244)
                        184     LOAD_FAST                       0: self
                        186     LOAD_ATTR                       1: _kind
                        188     LOAD_GLOBAL                     16: _POSITIONAL_OR_KEYWORD
                        190     COMPARE_OP                      3 (!=)
                        192     POP_JUMP_IF_FALSE               110 (to 220)
                        194     LOAD_CONST                      9: 'implicit arguments must be passed as positional or keyword arguments, not {}'
                        196     STORE_FAST                      5: msg
                        198     LOAD_FAST                       5: msg
                        200     LOAD_METHOD                     6: format
                        202     LOAD_FAST                       0: self
                        204     LOAD_ATTR                       1: _kind
                        206     LOAD_ATTR                       7: description
                        208     CALL_METHOD                     1
                        210     STORE_FAST                      5: msg
                        212     LOAD_GLOBAL                     2: ValueError
                        214     LOAD_FAST                       5: msg
                        216     CALL_FUNCTION                   1
                        218     RAISE_VARARGS                   1
                        220     LOAD_GLOBAL                     17: _POSITIONAL_ONLY
                        222     LOAD_FAST                       0: self
                        224     STORE_ATTR                      1: _kind
                        226     LOAD_CONST                      10: 'implicit{}'
                        228     LOAD_METHOD                     6: format
                        230     LOAD_FAST                       1: name
                        232     LOAD_CONST                      8: 1
                        234     LOAD_CONST                      0: None
                        236     BUILD_SLICE                     2
                        238     BINARY_SUBSCR                   
                        240     CALL_METHOD                     1
                        242     STORE_FAST                      1: name
                        244     LOAD_FAST                       1: name
                        246     LOAD_METHOD                     18: isidentifier
                        248     CALL_METHOD                     0
                        250     POP_JUMP_IF_TRUE                133 (to 266)
                        252     LOAD_GLOBAL                     2: ValueError
                        254     LOAD_CONST                      11: '{!r} is not a valid parameter name'
                        256     LOAD_METHOD                     6: format
                        258     LOAD_FAST                       1: name
                        260     CALL_METHOD                     1
                        262     CALL_FUNCTION                   1
                        264     RAISE_VARARGS                   1
                        266     LOAD_FAST                       1: name
                        268     LOAD_FAST                       0: self
                        270     STORE_ATTR                      19: _name
                        272     LOAD_CONST                      0: None
                        274     RETURN_VALUE                    
                'Parameter.__init__'
                [Code]
                    File Name: inspect.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        '_name'
                        '_kind'
                        '_default'
                        '_annotation'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            '_default'
                            '_annotation'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: type
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _name
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _kind
                        14      BUILD_TUPLE                     2
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       3: _default
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       4: _annotation
                        24      LOAD_CONST                      1: ('_default', '_annotation')
                        26      BUILD_CONST_KEY_MAP             2
                        28      BUILD_TUPLE                     3
                        30      RETURN_VALUE                    
                'Parameter.__reduce__'
                [Code]
                    File Name: inspect.py
                    Object Name: __setstate__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_default'
                        '_annotation'
                    [Var Names]
                        'self'
                        'state'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '_default'
                        '_annotation'
                    [Disassembly]
                        0       LOAD_FAST                       1: state
                        2       LOAD_CONST                      1: '_default'
                        4       BINARY_SUBSCR                   
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      0: _default
                        10      LOAD_FAST                       1: state
                        12      LOAD_CONST                      2: '_annotation'
                        14      BINARY_SUBSCR                   
                        16      LOAD_FAST                       0: self
                        18      STORE_ATTR                      1: _annotation
                        20      LOAD_CONST                      0: None
                        22      RETURN_VALUE                    
                'Parameter.__setstate__'
                [Code]
                    File Name: inspect.py
                    Object Name: name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_name'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _name
                        4       RETURN_VALUE                    
                'Parameter.name'
                [Code]
                    File Name: inspect.py
                    Object Name: default
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_default'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _default
                        4       RETURN_VALUE                    
                'Parameter.default'
                [Code]
                    File Name: inspect.py
                    Object Name: annotation
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_annotation'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _annotation
                        4       RETURN_VALUE                    
                'Parameter.annotation'
                [Code]
                    File Name: inspect.py
                    Object Name: kind
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_kind'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _kind
                        4       RETURN_VALUE                    
                'Parameter.kind'
                (
                    'name'
                    'kind'
                    'annotation'
                    'default'
                )
                [Code]
                    File Name: inspect.py
                    Object Name: replace
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 4
                    Locals: 5
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_void'
                        '_name'
                        '_kind'
                        '_annotation'
                        '_default'
                        'type'
                    [Var Names]
                        'self'
                        'name'
                        'kind'
                        'annotation'
                        'default'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Creates a customized copy of the Parameter.'
                        (
                            'default'
                            'annotation'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       1: name
                        2       LOAD_GLOBAL                     0: _void
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               7 (to 14)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: _name
                        12      STORE_FAST                      1: name
                        14      LOAD_FAST                       2: kind
                        16      LOAD_GLOBAL                     0: _void
                        18      IS_OP                           0 (is)
                        20      POP_JUMP_IF_FALSE               14 (to 28)
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       2: _kind
                        26      STORE_FAST                      2: kind
                        28      LOAD_FAST                       3: annotation
                        30      LOAD_GLOBAL                     0: _void
                        32      IS_OP                           0 (is)
                        34      POP_JUMP_IF_FALSE               21 (to 42)
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       3: _annotation
                        40      STORE_FAST                      3: annotation
                        42      LOAD_FAST                       4: default
                        44      LOAD_GLOBAL                     0: _void
                        46      IS_OP                           0 (is)
                        48      POP_JUMP_IF_FALSE               28 (to 56)
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       4: _default
                        54      STORE_FAST                      4: default
                        56      LOAD_GLOBAL                     5: type
                        58      LOAD_FAST                       0: self
                        60      CALL_FUNCTION                   1
                        62      LOAD_FAST                       1: name
                        64      LOAD_FAST                       2: kind
                        66      LOAD_FAST                       4: default
                        68      LOAD_FAST                       3: annotation
                        70      LOAD_CONST                      1: ('default', 'annotation')
                        72      CALL_FUNCTION_KW                4
                        74      RETURN_VALUE                    
                'Parameter.replace'
                [Code]
                    File Name: inspect.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'kind'
                        '_name'
                        '_annotation'
                        '_empty'
                        'format'
                        'formatannotation'
                        '_default'
                        'repr'
                        '_VAR_POSITIONAL'
                        '_VAR_KEYWORD'
                    [Var Names]
                        'self'
                        'kind'
                        'formatted'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '{}: {}'
                        '{} = {}'
                        '{}={}'
                        '*'
                        '**'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: kind
                        4       STORE_FAST                      1: kind
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _name
                        10      STORE_FAST                      2: formatted
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: _annotation
                        16      LOAD_GLOBAL                     3: _empty
                        18      IS_OP                           1 (is not)
                        20      POP_JUMP_IF_FALSE               20 (to 40)
                        22      LOAD_CONST                      1: '{}: {}'
                        24      LOAD_METHOD                     4: format
                        26      LOAD_FAST                       2: formatted
                        28      LOAD_GLOBAL                     5: formatannotation
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       2: _annotation
                        34      CALL_FUNCTION                   1
                        36      CALL_METHOD                     2
                        38      STORE_FAST                      2: formatted
                        40      LOAD_FAST                       0: self
                        42      LOAD_ATTR                       6: _default
                        44      LOAD_GLOBAL                     3: _empty
                        46      IS_OP                           1 (is not)
                        48      POP_JUMP_IF_FALSE               49 (to 98)
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       2: _annotation
                        54      LOAD_GLOBAL                     3: _empty
                        56      IS_OP                           1 (is not)
                        58      POP_JUMP_IF_FALSE               40 (to 80)
                        60      LOAD_CONST                      2: '{} = {}'
                        62      LOAD_METHOD                     4: format
                        64      LOAD_FAST                       2: formatted
                        66      LOAD_GLOBAL                     7: repr
                        68      LOAD_FAST                       0: self
                        70      LOAD_ATTR                       6: _default
                        72      CALL_FUNCTION                   1
                        74      CALL_METHOD                     2
                        76      STORE_FAST                      2: formatted
                        78      JUMP_FORWARD                    9 (to 98)
                        80      LOAD_CONST                      3: '{}={}'
                        82      LOAD_METHOD                     4: format
                        84      LOAD_FAST                       2: formatted
                        86      LOAD_GLOBAL                     7: repr
                        88      LOAD_FAST                       0: self
                        90      LOAD_ATTR                       6: _default
                        92      CALL_FUNCTION                   1
                        94      CALL_METHOD                     2
                        96      STORE_FAST                      2: formatted
                        98      LOAD_FAST                       1: kind
                        100     LOAD_GLOBAL                     8: _VAR_POSITIONAL
                        102     COMPARE_OP                      2 (==)
                        104     POP_JUMP_IF_FALSE               59 (to 118)
                        106     LOAD_CONST                      4: '*'
                        108     LOAD_FAST                       2: formatted
                        110     BINARY_ADD                      
                        112     STORE_FAST                      2: formatted
                        114     LOAD_FAST                       2: formatted
                        116     RETURN_VALUE                    
                        118     LOAD_FAST                       1: kind
                        120     LOAD_GLOBAL                     9: _VAR_KEYWORD
                        122     COMPARE_OP                      2 (==)
                        124     POP_JUMP_IF_FALSE               67 (to 134)
                        126     LOAD_CONST                      5: '**'
                        128     LOAD_FAST                       2: formatted
                        130     BINARY_ADD                      
                        132     STORE_FAST                      2: formatted
                        134     LOAD_FAST                       2: formatted
                        136     RETURN_VALUE                    
                'Parameter.__str__'
                [Code]
                    File Name: inspect.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'format'
                        '__class__'
                        '__name__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<{} "{}">'
                    [Disassembly]
                        0       LOAD_CONST                      1: '<{} "{}">'
                        2       LOAD_METHOD                     0: format
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: __class__
                        8       LOAD_ATTR                       2: __name__
                        10      LOAD_FAST                       0: self
                        12      CALL_METHOD                     2
                        14      RETURN_VALUE                    
                'Parameter.__repr__'
                [Code]
                    File Name: inspect.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        'name'
                        'kind'
                        'annotation'
                        'default'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: name
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: kind
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       3: annotation
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       4: default
                        18      BUILD_TUPLE                     4
                        20      CALL_FUNCTION                   1
                        22      RETURN_VALUE                    
                'Parameter.__hash__'
                [Code]
                    File Name: inspect.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'Parameter'
                        'NotImplemented'
                        '_name'
                        '_kind'
                        '_default'
                        '_annotation'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       1: other
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               6 (to 12)
                        8       LOAD_CONST                      1: True
                        10      RETURN_VALUE                    
                        12      LOAD_GLOBAL                     0: isinstance
                        14      LOAD_FAST                       1: other
                        16      LOAD_GLOBAL                     1: Parameter
                        18      CALL_FUNCTION                   2
                        20      POP_JUMP_IF_TRUE                13 (to 26)
                        22      LOAD_GLOBAL                     2: NotImplemented
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       3: _name
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       3: _name
                        34      COMPARE_OP                      2 (==)
                        36      JUMP_IF_FALSE_OR_POP            36 (to 72)
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       4: _kind
                        42      LOAD_FAST                       1: other
                        44      LOAD_ATTR                       4: _kind
                        46      COMPARE_OP                      2 (==)
                        48      JUMP_IF_FALSE_OR_POP            36 (to 72)
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       5: _default
                        54      LOAD_FAST                       1: other
                        56      LOAD_ATTR                       5: _default
                        58      COMPARE_OP                      2 (==)
                        60      JUMP_IF_FALSE_OR_POP            36 (to 72)
                        62      LOAD_FAST                       0: self
                        64      LOAD_ATTR                       6: _annotation
                        66      LOAD_FAST                       1: other
                        68      LOAD_ATTR                       6: _annotation
                        70      COMPARE_OP                      2 (==)
                        72      RETURN_VALUE                    
                'Parameter.__eq__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Parameter'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Represents a parameter in a function signature.\n\n    Has the following public attributes:\n\n    * name : str\n        The name of the parameter as a string.\n    * default : object\n        The default value for the parameter if specified.  If the\n        parameter has no default value, this attribute is set to\n        `Parameter.empty`.\n    * annotation\n        The annotation for the parameter if specified.  If the\n        parameter has no annotation, this attribute is set to\n        `Parameter.empty`.\n    * kind : str\n        Describes how argument values are bound to the parameter.\n        Possible values: `Parameter.POSITIONAL_ONLY`,\n        `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,\n        `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ('_name', '_kind', '_default', '_annotation')
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: _POSITIONAL_ONLY
                18      STORE_NAME                      6: POSITIONAL_ONLY
                20      LOAD_NAME                       7: _POSITIONAL_OR_KEYWORD
                22      STORE_NAME                      8: POSITIONAL_OR_KEYWORD
                24      LOAD_NAME                       9: _VAR_POSITIONAL
                26      STORE_NAME                      10: VAR_POSITIONAL
                28      LOAD_NAME                       11: _KEYWORD_ONLY
                30      STORE_NAME                      12: KEYWORD_ONLY
                32      LOAD_NAME                       13: _VAR_KEYWORD
                34      STORE_NAME                      14: VAR_KEYWORD
                36      LOAD_NAME                       15: _empty
                38      STORE_NAME                      16: empty
                40      LOAD_NAME                       15: _empty
                42      LOAD_NAME                       15: _empty
                44      LOAD_CONST                      3: ('default', 'annotation')
                46      BUILD_CONST_KEY_MAP             2
                48      LOAD_CONST                      4: <CODE> __init__
                50      LOAD_CONST                      5: 'Parameter.__init__'
                52      MAKE_FUNCTION                   2
                54      STORE_NAME                      17: __init__
                56      LOAD_CONST                      6: <CODE> __reduce__
                58      LOAD_CONST                      7: 'Parameter.__reduce__'
                60      MAKE_FUNCTION                   0
                62      STORE_NAME                      18: __reduce__
                64      LOAD_CONST                      8: <CODE> __setstate__
                66      LOAD_CONST                      9: 'Parameter.__setstate__'
                68      MAKE_FUNCTION                   0
                70      STORE_NAME                      19: __setstate__
                72      LOAD_NAME                       20: property
                74      LOAD_CONST                      10: <CODE> name
                76      LOAD_CONST                      11: 'Parameter.name'
                78      MAKE_FUNCTION                   0
                80      CALL_FUNCTION                   1
                82      STORE_NAME                      21: name
                84      LOAD_NAME                       20: property
                86      LOAD_CONST                      12: <CODE> default
                88      LOAD_CONST                      13: 'Parameter.default'
                90      MAKE_FUNCTION                   0
                92      CALL_FUNCTION                   1
                94      STORE_NAME                      22: default
                96      LOAD_NAME                       20: property
                98      LOAD_CONST                      14: <CODE> annotation
                100     LOAD_CONST                      15: 'Parameter.annotation'
                102     MAKE_FUNCTION                   0
                104     CALL_FUNCTION                   1
                106     STORE_NAME                      23: annotation
                108     LOAD_NAME                       20: property
                110     LOAD_CONST                      16: <CODE> kind
                112     LOAD_CONST                      17: 'Parameter.kind'
                114     MAKE_FUNCTION                   0
                116     CALL_FUNCTION                   1
                118     STORE_NAME                      24: kind
                120     LOAD_NAME                       25: _void
                122     LOAD_NAME                       25: _void
                124     LOAD_NAME                       25: _void
                126     LOAD_NAME                       25: _void
                128     LOAD_CONST                      18: ('name', 'kind', 'annotation', 'default')
                130     BUILD_CONST_KEY_MAP             4
                132     LOAD_CONST                      19: <CODE> replace
                134     LOAD_CONST                      20: 'Parameter.replace'
                136     MAKE_FUNCTION                   2
                138     STORE_NAME                      26: replace
                140     LOAD_CONST                      21: <CODE> __str__
                142     LOAD_CONST                      22: 'Parameter.__str__'
                144     MAKE_FUNCTION                   0
                146     STORE_NAME                      27: __str__
                148     LOAD_CONST                      23: <CODE> __repr__
                150     LOAD_CONST                      24: 'Parameter.__repr__'
                152     MAKE_FUNCTION                   0
                154     STORE_NAME                      28: __repr__
                156     LOAD_CONST                      25: <CODE> __hash__
                158     LOAD_CONST                      26: 'Parameter.__hash__'
                160     MAKE_FUNCTION                   0
                162     STORE_NAME                      29: __hash__
                164     LOAD_CONST                      27: <CODE> __eq__
                166     LOAD_CONST                      28: 'Parameter.__eq__'
                168     MAKE_FUNCTION                   0
                170     STORE_NAME                      30: __eq__
                172     LOAD_CONST                      29: None
                174     RETURN_VALUE                    
        'Parameter'
        [Code]
            File Name: inspect.py
            Object Name: BoundArguments
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__init__'
                'property'
                'signature'
                'args'
                'kwargs'
                'apply_defaults'
                '__eq__'
                '__setstate__'
                '__getstate__'
                '__repr__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'BoundArguments'
                "Result of `Signature.bind` call.  Holds the mapping of arguments\n    to the function's parameters.\n\n    Has the following public attributes:\n\n    * arguments : dict\n        An ordered mutable mapping of parameters' names to arguments' values.\n        Does not contain arguments' default values.\n    * signature : Signature\n        The Signature object that created this instance.\n    * args : tuple\n        Tuple of positional arguments values.\n    * kwargs : dict\n        Dict of keyword arguments values.\n    "
                (
                    'arguments'
                    '_signature'
                    '__weakref__'
                )
                [Code]
                    File Name: inspect.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'arguments'
                        '_signature'
                    [Var Names]
                        'self'
                        'signature'
                        'arguments'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       2: arguments
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: arguments
                        6       LOAD_FAST                       1: signature
                        8       LOAD_FAST                       0: self
                        10      STORE_ATTR                      1: _signature
                        12      LOAD_CONST                      0: None
                        14      RETURN_VALUE                    
                'BoundArguments.__init__'
                [Code]
                    File Name: inspect.py
                    Object Name: signature
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_signature'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _signature
                        4       RETURN_VALUE                    
                'BoundArguments.signature'
                [Code]
                    File Name: inspect.py
                    Object Name: args
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 9
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_signature'
                        'parameters'
                        'items'
                        'kind'
                        '_VAR_KEYWORD'
                        '_KEYWORD_ONLY'
                        'arguments'
                        'KeyError'
                        '_VAR_POSITIONAL'
                        'extend'
                        'append'
                        'tuple'
                    [Var Names]
                        'self'
                        'args'
                        'param_name'
                        'param'
                        'arg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      1: args
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       0: _signature
                        8       LOAD_ATTR                       1: parameters
                        10      LOAD_METHOD                     2: items
                        12      CALL_METHOD                     0
                        14      GET_ITER                        
                        16      FOR_ITER                        53 (to 124)
                        18      UNPACK_SEQUENCE                 2
                        20      STORE_FAST                      2: param_name
                        22      STORE_FAST                      3: param
                        24      LOAD_FAST                       3: param
                        26      LOAD_ATTR                       3: kind
                        28      LOAD_GLOBAL                     4: _VAR_KEYWORD
                        30      LOAD_GLOBAL                     5: _KEYWORD_ONLY
                        32      BUILD_TUPLE                     2
                        34      CONTAINS_OP                     0 (in)
                        36      POP_JUMP_IF_FALSE               24 (to 48)
                        38      POP_TOP                         
                        40      LOAD_GLOBAL                     11: tuple
                        42      LOAD_FAST                       1: args
                        44      CALL_FUNCTION                   1
                        46      RETURN_VALUE                    
                        48      SETUP_FINALLY                   7 (to 64)
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       6: arguments
                        54      LOAD_FAST                       2: param_name
                        56      BINARY_SUBSCR                   
                        58      STORE_FAST                      4: arg
                        60      POP_BLOCK                       
                        62      JUMP_FORWARD                    13 (to 90)
                        64      DUP_TOP                         
                        66      LOAD_GLOBAL                     7: KeyError
                        68      JUMP_IF_NOT_EXC_MATCH           44 (to 88)
                        70      POP_TOP                         
                        72      POP_TOP                         
                        74      POP_TOP                         
                        76      POP_EXCEPT                      
                        78      POP_TOP                         
                        80      LOAD_GLOBAL                     11: tuple
                        82      LOAD_FAST                       1: args
                        84      CALL_FUNCTION                   1
                        86      RETURN_VALUE                    
                        88      RERAISE                         0
                        90      LOAD_FAST                       3: param
                        92      LOAD_ATTR                       3: kind
                        94      LOAD_GLOBAL                     8: _VAR_POSITIONAL
                        96      COMPARE_OP                      2 (==)
                        98      POP_JUMP_IF_FALSE               56 (to 112)
                        100     LOAD_FAST                       1: args
                        102     LOAD_METHOD                     9: extend
                        104     LOAD_FAST                       4: arg
                        106     CALL_METHOD                     1
                        108     POP_TOP                         
                        110     JUMP_ABSOLUTE                   8 (to 16)
                        112     LOAD_FAST                       1: args
                        114     LOAD_METHOD                     10: append
                        116     LOAD_FAST                       4: arg
                        118     CALL_METHOD                     1
                        120     POP_TOP                         
                        122     JUMP_ABSOLUTE                   8 (to 16)
                        124     LOAD_GLOBAL                     11: tuple
                        126     LOAD_FAST                       1: args
                        128     CALL_FUNCTION                   1
                        130     RETURN_VALUE                    
                'BoundArguments.args'
                [Code]
                    File Name: inspect.py
                    Object Name: kwargs
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 9
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_signature'
                        'parameters'
                        'items'
                        'kind'
                        '_VAR_KEYWORD'
                        '_KEYWORD_ONLY'
                        'arguments'
                        'KeyError'
                        'update'
                    [Var Names]
                        'self'
                        'kwargs'
                        'kwargs_started'
                        'param_name'
                        'param'
                        'arg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        True
                    [Disassembly]
                        0       BUILD_MAP                       0
                        2       STORE_FAST                      1: kwargs
                        4       LOAD_CONST                      1: False
                        6       STORE_FAST                      2: kwargs_started
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       0: _signature
                        12      LOAD_ATTR                       1: parameters
                        14      LOAD_METHOD                     2: items
                        16      CALL_METHOD                     0
                        18      GET_ITER                        
                        20      FOR_ITER                        59 (to 140)
                        22      UNPACK_SEQUENCE                 2
                        24      STORE_FAST                      3: param_name
                        26      STORE_FAST                      4: param
                        28      LOAD_FAST                       2: kwargs_started
                        30      POP_JUMP_IF_TRUE                34 (to 68)
                        32      LOAD_FAST                       4: param
                        34      LOAD_ATTR                       3: kind
                        36      LOAD_GLOBAL                     4: _VAR_KEYWORD
                        38      LOAD_GLOBAL                     5: _KEYWORD_ONLY
                        40      BUILD_TUPLE                     2
                        42      CONTAINS_OP                     0 (in)
                        44      POP_JUMP_IF_FALSE               26 (to 52)
                        46      LOAD_CONST                      2: True
                        48      STORE_FAST                      2: kwargs_started
                        50      JUMP_FORWARD                    8 (to 68)
                        52      LOAD_FAST                       3: param_name
                        54      LOAD_FAST                       0: self
                        56      LOAD_ATTR                       6: arguments
                        58      CONTAINS_OP                     1 (not in)
                        60      POP_JUMP_IF_FALSE               34 (to 68)
                        62      LOAD_CONST                      2: True
                        64      STORE_FAST                      2: kwargs_started
                        66      JUMP_ABSOLUTE                   10 (to 20)
                        68      LOAD_FAST                       2: kwargs_started
                        70      POP_JUMP_IF_TRUE                37 (to 74)
                        72      JUMP_ABSOLUTE                   10 (to 20)
                        74      SETUP_FINALLY                   7 (to 90)
                        76      LOAD_FAST                       0: self
                        78      LOAD_ATTR                       6: arguments
                        80      LOAD_FAST                       3: param_name
                        82      BINARY_SUBSCR                   
                        84      STORE_FAST                      5: arg
                        86      POP_BLOCK                       
                        88      JUMP_FORWARD                    9 (to 108)
                        90      DUP_TOP                         
                        92      LOAD_GLOBAL                     7: KeyError
                        94      JUMP_IF_NOT_EXC_MATCH           53 (to 106)
                        96      POP_TOP                         
                        98      POP_TOP                         
                        100     POP_TOP                         
                        102     POP_EXCEPT                      
                        104     JUMP_ABSOLUTE                   10 (to 20)
                        106     RERAISE                         0
                        108     LOAD_FAST                       4: param
                        110     LOAD_ATTR                       3: kind
                        112     LOAD_GLOBAL                     4: _VAR_KEYWORD
                        114     COMPARE_OP                      2 (==)
                        116     POP_JUMP_IF_FALSE               65 (to 130)
                        118     LOAD_FAST                       1: kwargs
                        120     LOAD_METHOD                     8: update
                        122     LOAD_FAST                       5: arg
                        124     CALL_METHOD                     1
                        126     POP_TOP                         
                        128     JUMP_ABSOLUTE                   10 (to 20)
                        130     LOAD_FAST                       5: arg
                        132     LOAD_FAST                       1: kwargs
                        134     LOAD_FAST                       3: param_name
                        136     STORE_SUBSCR                    
                        138     JUMP_ABSOLUTE                   10 (to 20)
                        140     LOAD_FAST                       1: kwargs
                        142     RETURN_VALUE                    
                'BoundArguments.kwargs'
                [Code]
                    File Name: inspect.py
                    Object Name: apply_defaults
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 6
                    Stack Size: 9
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'arguments'
                        '_signature'
                        'parameters'
                        'items'
                        'append'
                        'KeyError'
                        'default'
                        '_empty'
                        'kind'
                        '_VAR_POSITIONAL'
                        '_VAR_KEYWORD'
                        'dict'
                    [Var Names]
                        'self'
                        'arguments'
                        'new_arguments'
                        'name'
                        'param'
                        'val'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Set default values for missing arguments.\n\n        For variable-positional arguments (*args) the default is an\n        empty tuple.\n\n        For variable-keyword arguments (**kwargs) the default is an\n        empty dict.\n        '
                        (
                        )
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: arguments
                        4       STORE_FAST                      1: arguments
                        6       BUILD_LIST                      0
                        8       STORE_FAST                      2: new_arguments
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: _signature
                        14      LOAD_ATTR                       2: parameters
                        16      LOAD_METHOD                     3: items
                        18      CALL_METHOD                     0
                        20      GET_ITER                        
                        22      FOR_ITER                        58 (to 140)
                        24      UNPACK_SEQUENCE                 2
                        26      STORE_FAST                      3: name
                        28      STORE_FAST                      4: param
                        30      SETUP_FINALLY                   11 (to 54)
                        32      LOAD_FAST                       2: new_arguments
                        34      LOAD_METHOD                     4: append
                        36      LOAD_FAST                       3: name
                        38      LOAD_FAST                       1: arguments
                        40      LOAD_FAST                       3: name
                        42      BINARY_SUBSCR                   
                        44      BUILD_TUPLE                     2
                        46      CALL_METHOD                     1
                        48      POP_TOP                         
                        50      POP_BLOCK                       
                        52      JUMP_ABSOLUTE                   11 (to 22)
                        54      DUP_TOP                         
                        56      LOAD_GLOBAL                     5: KeyError
                        58      JUMP_IF_NOT_EXC_MATCH           69 (to 138)
                        60      POP_TOP                         
                        62      POP_TOP                         
                        64      POP_TOP                         
                        66      LOAD_FAST                       4: param
                        68      LOAD_ATTR                       6: default
                        70      LOAD_GLOBAL                     7: _empty
                        72      IS_OP                           1 (is not)
                        74      POP_JUMP_IF_FALSE               42 (to 84)
                        76      LOAD_FAST                       4: param
                        78      LOAD_ATTR                       6: default
                        80      STORE_FAST                      5: val
                        82      JUMP_FORWARD                    18 (to 120)
                        84      LOAD_FAST                       4: param
                        86      LOAD_ATTR                       8: kind
                        88      LOAD_GLOBAL                     9: _VAR_POSITIONAL
                        90      IS_OP                           0 (is)
                        92      POP_JUMP_IF_FALSE               50 (to 100)
                        94      LOAD_CONST                      1: ()
                        96      STORE_FAST                      5: val
                        98      JUMP_FORWARD                    10 (to 120)
                        100     LOAD_FAST                       4: param
                        102     LOAD_ATTR                       8: kind
                        104     LOAD_GLOBAL                     10: _VAR_KEYWORD
                        106     IS_OP                           0 (is)
                        108     POP_JUMP_IF_FALSE               58 (to 116)
                        110     BUILD_MAP                       0
                        112     STORE_FAST                      5: val
                        114     JUMP_FORWARD                    2 (to 120)
                        116     POP_EXCEPT                      
                        118     JUMP_ABSOLUTE                   11 (to 22)
                        120     LOAD_FAST                       2: new_arguments
                        122     LOAD_METHOD                     4: append
                        124     LOAD_FAST                       3: name
                        126     LOAD_FAST                       5: val
                        128     BUILD_TUPLE                     2
                        130     CALL_METHOD                     1
                        132     POP_TOP                         
                        134     POP_EXCEPT                      
                        136     JUMP_ABSOLUTE                   11 (to 22)
                        138     RERAISE                         0
                        140     LOAD_GLOBAL                     11: dict
                        142     LOAD_FAST                       2: new_arguments
                        144     CALL_FUNCTION                   1
                        146     LOAD_FAST                       0: self
                        148     STORE_ATTR                      0: arguments
                        150     LOAD_CONST                      2: None
                        152     RETURN_VALUE                    
                'BoundArguments.apply_defaults'
                [Code]
                    File Name: inspect.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'BoundArguments'
                        'NotImplemented'
                        'signature'
                        'arguments'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       1: other
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               6 (to 12)
                        8       LOAD_CONST                      1: True
                        10      RETURN_VALUE                    
                        12      LOAD_GLOBAL                     0: isinstance
                        14      LOAD_FAST                       1: other
                        16      LOAD_GLOBAL                     1: BoundArguments
                        18      CALL_FUNCTION                   2
                        20      POP_JUMP_IF_TRUE                13 (to 26)
                        22      LOAD_GLOBAL                     2: NotImplemented
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       3: signature
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       3: signature
                        34      COMPARE_OP                      2 (==)
                        36      JUMP_IF_FALSE_OR_POP            24 (to 48)
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       4: arguments
                        42      LOAD_FAST                       1: other
                        44      LOAD_ATTR                       4: arguments
                        46      COMPARE_OP                      2 (==)
                        48      RETURN_VALUE                    
                'BoundArguments.__eq__'
                [Code]
                    File Name: inspect.py
                    Object Name: __setstate__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_signature'
                        'arguments'
                    [Var Names]
                        'self'
                        'state'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '_signature'
                        'arguments'
                    [Disassembly]
                        0       LOAD_FAST                       1: state
                        2       LOAD_CONST                      1: '_signature'
                        4       BINARY_SUBSCR                   
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      0: _signature
                        10      LOAD_FAST                       1: state
                        12      LOAD_CONST                      2: 'arguments'
                        14      BINARY_SUBSCR                   
                        16      LOAD_FAST                       0: self
                        18      STORE_ATTR                      1: arguments
                        20      LOAD_CONST                      0: None
                        22      RETURN_VALUE                    
                'BoundArguments.__setstate__'
                [Code]
                    File Name: inspect.py
                    Object Name: __getstate__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_signature'
                        'arguments'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            '_signature'
                            'arguments'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _signature
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: arguments
                        8       LOAD_CONST                      1: ('_signature', 'arguments')
                        10      BUILD_CONST_KEY_MAP             2
                        12      RETURN_VALUE                    
                'BoundArguments.__getstate__'
                [Code]
                    File Name: inspect.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'arguments'
                        'items'
                        'append'
                        'format'
                        '__class__'
                        '__name__'
                        'join'
                    [Var Names]
                        'self'
                        'args'
                        'arg'
                        'value'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '{}={!r}'
                        '<{} ({})>'
                        ', '
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      1: args
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       0: arguments
                        8       LOAD_METHOD                     1: items
                        10      CALL_METHOD                     0
                        12      GET_ITER                        
                        14      FOR_ITER                        13 (to 42)
                        16      UNPACK_SEQUENCE                 2
                        18      STORE_FAST                      2: arg
                        20      STORE_FAST                      3: value
                        22      LOAD_FAST                       1: args
                        24      LOAD_METHOD                     2: append
                        26      LOAD_CONST                      1: '{}={!r}'
                        28      LOAD_METHOD                     3: format
                        30      LOAD_FAST                       2: arg
                        32      LOAD_FAST                       3: value
                        34      CALL_METHOD                     2
                        36      CALL_METHOD                     1
                        38      POP_TOP                         
                        40      JUMP_ABSOLUTE                   7 (to 14)
                        42      LOAD_CONST                      2: '<{} ({})>'
                        44      LOAD_METHOD                     3: format
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       4: __class__
                        50      LOAD_ATTR                       5: __name__
                        52      LOAD_CONST                      3: ', '
                        54      LOAD_METHOD                     6: join
                        56      LOAD_FAST                       1: args
                        58      CALL_METHOD                     1
                        60      CALL_METHOD                     2
                        62      RETURN_VALUE                    
                'BoundArguments.__repr__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'BoundArguments'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "Result of `Signature.bind` call.  Holds the mapping of arguments\n    to the function's parameters.\n\n    Has the following public attributes:\n\n    * arguments : dict\n        An ordered mutable mapping of parameters' names to arguments' values.\n        Does not contain arguments' default values.\n    * signature : Signature\n        The Signature object that created this instance.\n    * args : tuple\n        Tuple of positional arguments values.\n    * kwargs : dict\n        Dict of keyword arguments values.\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ('arguments', '_signature', '__weakref__')
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: <CODE> __init__
                18      LOAD_CONST                      4: 'BoundArguments.__init__'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      5: __init__
                24      LOAD_NAME                       6: property
                26      LOAD_CONST                      5: <CODE> signature
                28      LOAD_CONST                      6: 'BoundArguments.signature'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      7: signature
                36      LOAD_NAME                       6: property
                38      LOAD_CONST                      7: <CODE> args
                40      LOAD_CONST                      8: 'BoundArguments.args'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      8: args
                48      LOAD_NAME                       6: property
                50      LOAD_CONST                      9: <CODE> kwargs
                52      LOAD_CONST                      10: 'BoundArguments.kwargs'
                54      MAKE_FUNCTION                   0
                56      CALL_FUNCTION                   1
                58      STORE_NAME                      9: kwargs
                60      LOAD_CONST                      11: <CODE> apply_defaults
                62      LOAD_CONST                      12: 'BoundArguments.apply_defaults'
                64      MAKE_FUNCTION                   0
                66      STORE_NAME                      10: apply_defaults
                68      LOAD_CONST                      13: <CODE> __eq__
                70      LOAD_CONST                      14: 'BoundArguments.__eq__'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      11: __eq__
                76      LOAD_CONST                      15: <CODE> __setstate__
                78      LOAD_CONST                      16: 'BoundArguments.__setstate__'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      12: __setstate__
                84      LOAD_CONST                      17: <CODE> __getstate__
                86      LOAD_CONST                      18: 'BoundArguments.__getstate__'
                88      MAKE_FUNCTION                   0
                90      STORE_NAME                      13: __getstate__
                92      LOAD_CONST                      19: <CODE> __repr__
                94      LOAD_CONST                      20: 'BoundArguments.__repr__'
                96      MAKE_FUNCTION                   0
                98      STORE_NAME                      14: __repr__
                100     LOAD_CONST                      21: None
                102     RETURN_VALUE                    
        'BoundArguments'
        [Code]
            File Name: inspect.py
            Object Name: Signature
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 6
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'Parameter'
                '_parameter_cls'
                'BoundArguments'
                '_bound_arguments_cls'
                '_empty'
                'empty'
                '__init__'
                'classmethod'
                'from_function'
                'from_builtin'
                'from_callable'
                'property'
                'parameters'
                'return_annotation'
                '_void'
                'replace'
                '_hash_basis'
                '__hash__'
                '__eq__'
                '_bind'
                'bind'
                'bind_partial'
                '__reduce__'
                '__setstate__'
                '__repr__'
                '__str__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Signature'
                "A Signature object represents the overall signature of a function.\n    It stores a Parameter object for each parameter accepted by the\n    function, as well as information specific to the function itself.\n\n    A Signature object has the following public attributes and methods:\n\n    * parameters : OrderedDict\n        An ordered mapping of parameters' names to the corresponding\n        Parameter objects (keyword-only arguments are in the same order\n        as listed in `code.co_varnames`).\n    * return_annotation : object\n        The annotation for the return type of the function if specified.\n        If the function has no annotation for its return type, this\n        attribute is set to `Signature.empty`.\n    * bind(*args, **kwargs) -> BoundArguments\n        Creates a mapping from positional and keyword arguments to\n        parameters.\n    * bind_partial(*args, **kwargs) -> BoundArguments\n        Creates a partial mapping from positional and keyword arguments\n        to parameters (simulating 'functools.partial' behavior.)\n    "
                (
                    '_return_annotation'
                    '_parameters'
                )
                None
                True
                (
                    'return_annotation'
                    '__validate_parameters__'
                )
                [Code]
                    File Name: inspect.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 2
                    Locals: 11
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'OrderedDict'
                        '_POSITIONAL_ONLY'
                        'kind'
                        'name'
                        'format'
                        'description'
                        'ValueError'
                        '_POSITIONAL_OR_KEYWORD'
                        'default'
                        '_empty'
                        'types'
                        'MappingProxyType'
                        '_parameters'
                        '_return_annotation'
                    [Var Names]
                        'self'
                        'parameters'
                        'return_annotation'
                        '__validate_parameters__'
                        'params'
                        'top_kind'
                        'kind_defaults'
                        'param'
                        'kind'
                        'name'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Constructs Signature from the given list of Parameter\n        objects and 'return_annotation'.  All arguments are optional.\n        "
                        None
                        False
                        'wrong parameter order: {} parameter before {} parameter'
                        'non-default argument follows default argument'
                        True
                        'duplicate parameter name: {!r}'
                        [Code]
                            File Name: inspect.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'name'
                            [Var Names]
                                '.0'
                                'param'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        8 (to 22)
                                6       STORE_FAST                      1: param
                                8       LOAD_FAST                       1: param
                                10      LOAD_ATTR                       0: name
                                12      LOAD_FAST                       1: param
                                14      BUILD_TUPLE                     2
                                16      YIELD_VALUE                     
                                18      POP_TOP                         
                                20      JUMP_ABSOLUTE                   2 (to 4)
                                22      LOAD_CONST                      0: None
                                24      RETURN_VALUE                    
                        'Signature.__init__.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_FAST                       1: parameters
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_GLOBAL                     0: OrderedDict
                        10      CALL_FUNCTION                   0
                        12      STORE_FAST                      4: params
                        14      JUMP_FORWARD                    95 (to 206)
                        16      LOAD_FAST                       3: __validate_parameters__
                        18      POP_JUMP_IF_FALSE               94 (to 188)
                        20      LOAD_GLOBAL                     0: OrderedDict
                        22      CALL_FUNCTION                   0
                        24      STORE_FAST                      4: params
                        26      LOAD_GLOBAL                     1: _POSITIONAL_ONLY
                        28      STORE_FAST                      5: top_kind
                        30      LOAD_CONST                      2: False
                        32      STORE_FAST                      6: kind_defaults
                        34      LOAD_FAST                       1: parameters
                        36      GET_ITER                        
                        38      FOR_ITER                        73 (to 186)
                        40      STORE_FAST                      7: param
                        42      LOAD_FAST                       7: param
                        44      LOAD_ATTR                       2: kind
                        46      STORE_FAST                      8: kind
                        48      LOAD_FAST                       7: param
                        50      LOAD_ATTR                       3: name
                        52      STORE_FAST                      9: name
                        54      LOAD_FAST                       8: kind
                        56      LOAD_FAST                       5: top_kind
                        58      COMPARE_OP                      0 (<)
                        60      POP_JUMP_IF_FALSE               45 (to 90)
                        62      LOAD_CONST                      3: 'wrong parameter order: {} parameter before {} parameter'
                        64      STORE_FAST                      10: msg
                        66      LOAD_FAST                       10: msg
                        68      LOAD_METHOD                     4: format
                        70      LOAD_FAST                       5: top_kind
                        72      LOAD_ATTR                       5: description
                        74      LOAD_FAST                       8: kind
                        76      LOAD_ATTR                       5: description
                        78      CALL_METHOD                     2
                        80      STORE_FAST                      10: msg
                        82      LOAD_GLOBAL                     6: ValueError
                        84      LOAD_FAST                       10: msg
                        86      CALL_FUNCTION                   1
                        88      RAISE_VARARGS                   1
                        90      LOAD_FAST                       8: kind
                        92      LOAD_FAST                       5: top_kind
                        94      COMPARE_OP                      4 (>)
                        96      POP_JUMP_IF_FALSE               53 (to 106)
                        98      LOAD_CONST                      2: False
                        100     STORE_FAST                      6: kind_defaults
                        102     LOAD_FAST                       8: kind
                        104     STORE_FAST                      5: top_kind
                        106     LOAD_FAST                       8: kind
                        108     LOAD_GLOBAL                     1: _POSITIONAL_ONLY
                        110     LOAD_GLOBAL                     7: _POSITIONAL_OR_KEYWORD
                        112     BUILD_TUPLE                     2
                        114     CONTAINS_OP                     0 (in)
                        116     POP_JUMP_IF_FALSE               75 (to 150)
                        118     LOAD_FAST                       7: param
                        120     LOAD_ATTR                       8: default
                        122     LOAD_GLOBAL                     9: _empty
                        124     IS_OP                           0 (is)
                        126     POP_JUMP_IF_FALSE               73 (to 146)
                        128     LOAD_FAST                       6: kind_defaults
                        130     POP_JUMP_IF_FALSE               72 (to 144)
                        132     LOAD_CONST                      4: 'non-default argument follows default argument'
                        134     STORE_FAST                      10: msg
                        136     LOAD_GLOBAL                     6: ValueError
                        138     LOAD_FAST                       10: msg
                        140     CALL_FUNCTION                   1
                        142     RAISE_VARARGS                   1
                        144     JUMP_FORWARD                    2 (to 150)
                        146     LOAD_CONST                      5: True
                        148     STORE_FAST                      6: kind_defaults
                        150     LOAD_FAST                       9: name
                        152     LOAD_FAST                       4: params
                        154     CONTAINS_OP                     0 (in)
                        156     POP_JUMP_IF_FALSE               88 (to 176)
                        158     LOAD_CONST                      6: 'duplicate parameter name: {!r}'
                        160     LOAD_METHOD                     4: format
                        162     LOAD_FAST                       9: name
                        164     CALL_METHOD                     1
                        166     STORE_FAST                      10: msg
                        168     LOAD_GLOBAL                     6: ValueError
                        170     LOAD_FAST                       10: msg
                        172     CALL_FUNCTION                   1
                        174     RAISE_VARARGS                   1
                        176     LOAD_FAST                       7: param
                        178     LOAD_FAST                       4: params
                        180     LOAD_FAST                       9: name
                        182     STORE_SUBSCR                    
                        184     JUMP_ABSOLUTE                   19 (to 38)
                        186     JUMP_FORWARD                    9 (to 206)
                        188     LOAD_GLOBAL                     0: OrderedDict
                        190     LOAD_CONST                      7: <CODE> <genexpr>
                        192     LOAD_CONST                      8: 'Signature.__init__.<locals>.<genexpr>'
                        194     MAKE_FUNCTION                   0
                        196     LOAD_FAST                       1: parameters
                        198     GET_ITER                        
                        200     CALL_FUNCTION                   1
                        202     CALL_FUNCTION                   1
                        204     STORE_FAST                      4: params
                        206     LOAD_GLOBAL                     10: types
                        208     LOAD_METHOD                     11: MappingProxyType
                        210     LOAD_FAST                       4: params
                        212     CALL_METHOD                     1
                        214     LOAD_FAST                       0: self
                        216     STORE_ATTR                      12: _parameters
                        218     LOAD_FAST                       2: return_annotation
                        220     LOAD_FAST                       0: self
                        222     STORE_ATTR                      13: _return_annotation
                        224     LOAD_CONST                      1: None
                        226     RETURN_VALUE                    
                'Signature.__init__'
                [Code]
                    File Name: inspect.py
                    Object Name: from_function
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'warnings'
                        'warn'
                        'DeprecationWarning'
                        '_signature_from_function'
                    [Var Names]
                        'cls'
                        'func'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Constructs Signature for the given python function.\n\n        Deprecated since Python 3.5, use `Signature.from_callable()`.\n        '
                        'inspect.Signature.from_function() is deprecated since Python 3.5, use Signature.from_callable()'
                        2
                        (
                            'stacklevel'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: warnings
                        2       LOAD_ATTR                       1: warn
                        4       LOAD_CONST                      1: 'inspect.Signature.from_function() is deprecated since Python 3.5, use Signature.from_callable()'
                        6       LOAD_GLOBAL                     2: DeprecationWarning
                        8       LOAD_CONST                      2: 2
                        10      LOAD_CONST                      3: ('stacklevel',)
                        12      CALL_FUNCTION_KW                3
                        14      POP_TOP                         
                        16      LOAD_GLOBAL                     3: _signature_from_function
                        18      LOAD_FAST                       0: cls
                        20      LOAD_FAST                       1: func
                        22      CALL_FUNCTION                   2
                        24      RETURN_VALUE                    
                'Signature.from_function'
                [Code]
                    File Name: inspect.py
                    Object Name: from_builtin
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'warnings'
                        'warn'
                        'DeprecationWarning'
                        '_signature_from_builtin'
                    [Var Names]
                        'cls'
                        'func'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Constructs Signature for the given builtin function.\n\n        Deprecated since Python 3.5, use `Signature.from_callable()`.\n        '
                        'inspect.Signature.from_builtin() is deprecated since Python 3.5, use Signature.from_callable()'
                        2
                        (
                            'stacklevel'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: warnings
                        2       LOAD_ATTR                       1: warn
                        4       LOAD_CONST                      1: 'inspect.Signature.from_builtin() is deprecated since Python 3.5, use Signature.from_callable()'
                        6       LOAD_GLOBAL                     2: DeprecationWarning
                        8       LOAD_CONST                      2: 2
                        10      LOAD_CONST                      3: ('stacklevel',)
                        12      CALL_FUNCTION_KW                3
                        14      POP_TOP                         
                        16      LOAD_GLOBAL                     3: _signature_from_builtin
                        18      LOAD_FAST                       0: cls
                        20      LOAD_FAST                       1: func
                        22      CALL_FUNCTION                   2
                        24      RETURN_VALUE                    
                'Signature.from_builtin'
                False
                (
                    'follow_wrapped'
                    'globals'
                    'locals'
                    'eval_str'
                )
                [Code]
                    File Name: inspect.py
                    Object Name: from_callable
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 4
                    Locals: 6
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_signature_from_callable'
                    [Var Names]
                        'cls'
                        'obj'
                        'follow_wrapped'
                        'globals'
                        'locals'
                        'eval_str'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Constructs Signature for the given callable object.'
                        (
                            'sigcls'
                            'follow_wrapper_chains'
                            'globals'
                            'locals'
                            'eval_str'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _signature_from_callable
                        2       LOAD_FAST                       1: obj
                        4       LOAD_FAST                       0: cls
                        6       LOAD_FAST                       2: follow_wrapped
                        8       LOAD_FAST                       3: globals
                        10      LOAD_FAST                       4: locals
                        12      LOAD_FAST                       5: eval_str
                        14      LOAD_CONST                      1: ('sigcls', 'follow_wrapper_chains', 'globals', 'locals', 'eval_str')
                        16      CALL_FUNCTION_KW                6
                        18      RETURN_VALUE                    
                'Signature.from_callable'
                [Code]
                    File Name: inspect.py
                    Object Name: parameters
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_parameters'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _parameters
                        4       RETURN_VALUE                    
                'Signature.parameters'
                [Code]
                    File Name: inspect.py
                    Object Name: return_annotation
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_return_annotation'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _return_annotation
                        4       RETURN_VALUE                    
                'Signature.return_annotation'
                (
                    'parameters'
                    'return_annotation'
                )
                [Code]
                    File Name: inspect.py
                    Object Name: replace
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 2
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_void'
                        'parameters'
                        'values'
                        '_return_annotation'
                        'type'
                    [Var Names]
                        'self'
                        'parameters'
                        'return_annotation'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Creates a customized copy of the Signature.\n        Pass 'parameters' and/or 'return_annotation' arguments\n        to override them in the new copy.\n        "
                        (
                            'return_annotation'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       1: parameters
                        2       LOAD_GLOBAL                     0: _void
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               9 (to 18)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: parameters
                        12      LOAD_METHOD                     2: values
                        14      CALL_METHOD                     0
                        16      STORE_FAST                      1: parameters
                        18      LOAD_FAST                       2: return_annotation
                        20      LOAD_GLOBAL                     0: _void
                        22      IS_OP                           0 (is)
                        24      POP_JUMP_IF_FALSE               16 (to 32)
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       3: _return_annotation
                        30      STORE_FAST                      2: return_annotation
                        32      LOAD_GLOBAL                     4: type
                        34      LOAD_FAST                       0: self
                        36      CALL_FUNCTION                   1
                        38      LOAD_FAST                       1: parameters
                        40      LOAD_FAST                       2: return_annotation
                        42      LOAD_CONST                      1: ('return_annotation',)
                        44      CALL_FUNCTION_KW                2
                        46      RETURN_VALUE                    
                'Signature.replace'
                [Code]
                    File Name: inspect.py
                    Object Name: _hash_basis
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'tuple'
                        'parameters'
                        'values'
                        'return_annotation'
                    [Var Names]
                        'self'
                        'params'
                        'kwo_params'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        [Code]
                            File Name: inspect.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000073 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR | CO_NOFREE)
                            [Names]
                                'kind'
                                '_KEYWORD_ONLY'
                            [Var Names]
                                '.0'
                                'param'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        10 (to 26)
                                6       STORE_FAST                      1: param
                                8       LOAD_FAST                       1: param
                                10      LOAD_ATTR                       0: kind
                                12      LOAD_GLOBAL                     1: _KEYWORD_ONLY
                                14      COMPARE_OP                      3 (!=)
                                16      POP_JUMP_IF_FALSE               2 (to 4)
                                18      LOAD_FAST                       1: param
                                20      YIELD_VALUE                     
                                22      POP_TOP                         
                                24      JUMP_ABSOLUTE                   2 (to 4)
                                26      LOAD_CONST                      0: None
                                28      RETURN_VALUE                    
                        'Signature._hash_basis.<locals>.<genexpr>'
                        [Code]
                            File Name: inspect.py
                            Object Name: <dictcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 4
                            Flags: 0x00000053 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_NOFREE)
                            [Names]
                                'kind'
                                '_KEYWORD_ONLY'
                                'name'
                            [Var Names]
                                '.0'
                                'param'
                            [Free Vars]
                            [Cell Vars]
                            [Constants]
                            [Disassembly]
                                0       BUILD_MAP                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        11 (to 28)
                                6       STORE_FAST                      1: param
                                8       LOAD_FAST                       1: param
                                10      LOAD_ATTR                       0: kind
                                12      LOAD_GLOBAL                     1: _KEYWORD_ONLY
                                14      COMPARE_OP                      2 (==)
                                16      POP_JUMP_IF_FALSE               2 (to 4)
                                18      LOAD_FAST                       1: param
                                20      LOAD_ATTR                       2: name
                                22      LOAD_FAST                       1: param
                                24      MAP_ADD                         2
                                26      JUMP_ABSOLUTE                   2 (to 4)
                                28      RETURN_VALUE                    
                        'Signature._hash_basis.<locals>.<dictcomp>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: tuple
                        2       LOAD_CONST                      1: <CODE> <genexpr>
                        4       LOAD_CONST                      2: 'Signature._hash_basis.<locals>.<genexpr>'
                        6       MAKE_FUNCTION                   0
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: parameters
                        12      LOAD_METHOD                     2: values
                        14      CALL_METHOD                     0
                        16      GET_ITER                        
                        18      CALL_FUNCTION                   1
                        20      CALL_FUNCTION                   1
                        22      STORE_FAST                      1: params
                        24      LOAD_CONST                      3: <CODE> <dictcomp>
                        26      LOAD_CONST                      4: 'Signature._hash_basis.<locals>.<dictcomp>'
                        28      MAKE_FUNCTION                   0
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       1: parameters
                        34      LOAD_METHOD                     2: values
                        36      CALL_METHOD                     0
                        38      GET_ITER                        
                        40      CALL_FUNCTION                   1
                        42      STORE_FAST                      2: kwo_params
                        44      LOAD_FAST                       1: params
                        46      LOAD_FAST                       2: kwo_params
                        48      LOAD_FAST                       0: self
                        50      LOAD_ATTR                       3: return_annotation
                        52      BUILD_TUPLE                     3
                        54      RETURN_VALUE                    
                'Signature._hash_basis'
                [Code]
                    File Name: inspect.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_hash_basis'
                        'frozenset'
                        'values'
                        'hash'
                    [Var Names]
                        'self'
                        'params'
                        'kwo_params'
                        'return_annotation'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _hash_basis
                        4       CALL_METHOD                     0
                        6       UNPACK_SEQUENCE                 3
                        8       STORE_FAST                      1: params
                        10      STORE_FAST                      2: kwo_params
                        12      STORE_FAST                      3: return_annotation
                        14      LOAD_GLOBAL                     1: frozenset
                        16      LOAD_FAST                       2: kwo_params
                        18      LOAD_METHOD                     2: values
                        20      CALL_METHOD                     0
                        22      CALL_FUNCTION                   1
                        24      STORE_FAST                      2: kwo_params
                        26      LOAD_GLOBAL                     3: hash
                        28      LOAD_FAST                       1: params
                        30      LOAD_FAST                       2: kwo_params
                        32      LOAD_FAST                       3: return_annotation
                        34      BUILD_TUPLE                     3
                        36      CALL_FUNCTION                   1
                        38      RETURN_VALUE                    
                'Signature.__hash__'
                [Code]
                    File Name: inspect.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'Signature'
                        'NotImplemented'
                        '_hash_basis'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       1: other
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               6 (to 12)
                        8       LOAD_CONST                      1: True
                        10      RETURN_VALUE                    
                        12      LOAD_GLOBAL                     0: isinstance
                        14      LOAD_FAST                       1: other
                        16      LOAD_GLOBAL                     1: Signature
                        18      CALL_FUNCTION                   2
                        20      POP_JUMP_IF_TRUE                13 (to 26)
                        22      LOAD_GLOBAL                     2: NotImplemented
                        24      RETURN_VALUE                    
                        26      LOAD_FAST                       0: self
                        28      LOAD_METHOD                     3: _hash_basis
                        30      CALL_METHOD                     0
                        32      LOAD_FAST                       1: other
                        34      LOAD_METHOD                     3: _hash_basis
                        36      CALL_METHOD                     0
                        38      COMPARE_OP                      2 (==)
                        40      RETURN_VALUE                    
                'Signature.__eq__'
                (
                    'partial'
                )
                [Code]
                    File Name: inspect.py
                    Object Name: _bind
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 1
                    Locals: 14
                    Stack Size: 11
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'iter'
                        'parameters'
                        'values'
                        'next'
                        'StopIteration'
                        'kind'
                        '_VAR_POSITIONAL'
                        'name'
                        '_POSITIONAL_ONLY'
                        'format'
                        'TypeError'
                        '_VAR_KEYWORD'
                        'default'
                        '_empty'
                        '_KEYWORD_ONLY'
                        'extend'
                        'tuple'
                        'itertools'
                        'chain'
                        'pop'
                        'KeyError'
                        '_bound_arguments_cls'
                    [Var Names]
                        'self'
                        'args'
                        'kwargs'
                        'partial'
                        'arguments'
                        'parameters'
                        'parameters_ex'
                        'arg_vals'
                        'arg_val'
                        'param'
                        'msg'
                        'values'
                        'kwargs_param'
                        'param_name'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Private method. Don't use directly."
                        (
                        )
                        True
                        '{arg!r} parameter is positional only, but was passed as a keyword'
                        (
                            'arg'
                        )
                        None
                        'missing a required argument: {arg!r}'
                        'too many positional arguments'
                        'multiple values for argument {arg!r}'
                        'got an unexpected keyword argument {arg!r}'
                    [Disassembly]
                        0       BUILD_MAP                       0
                        2       STORE_FAST                      4: arguments
                        4       LOAD_GLOBAL                     0: iter
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: parameters
                        10      LOAD_METHOD                     2: values
                        12      CALL_METHOD                     0
                        14      CALL_FUNCTION                   1
                        16      STORE_FAST                      5: parameters
                        18      LOAD_CONST                      1: ()
                        20      STORE_FAST                      6: parameters_ex
                        22      LOAD_GLOBAL                     0: iter
                        24      LOAD_FAST                       1: args
                        26      CALL_FUNCTION                   1
                        28      STORE_FAST                      7: arg_vals
                        30      NOP                             
                        32      SETUP_FINALLY                   6 (to 46)
                        34      LOAD_GLOBAL                     3: next
                        36      LOAD_FAST                       7: arg_vals
                        38      CALL_FUNCTION                   1
                        40      STORE_FAST                      8: arg_val
                        42      POP_BLOCK                       
                        44      JUMP_FORWARD                    96 (to 238)
                        46      DUP_TOP                         
                        48      LOAD_GLOBAL                     4: StopIteration
                        50      JUMP_IF_NOT_EXC_MATCH           118 (to 236)
                        52      POP_TOP                         
                        54      POP_TOP                         
                        56      POP_TOP                         
                        58      SETUP_FINALLY                   6 (to 72)
                        60      LOAD_GLOBAL                     3: next
                        62      LOAD_FAST                       5: parameters
                        64      CALL_FUNCTION                   1
                        66      STORE_FAST                      9: param
                        68      POP_BLOCK                       
                        70      JUMP_FORWARD                    10 (to 92)
                        72      DUP_TOP                         
                        74      LOAD_GLOBAL                     4: StopIteration
                        76      JUMP_IF_NOT_EXC_MATCH           45 (to 90)
                        78      POP_TOP                         
                        80      POP_TOP                         
                        82      POP_TOP                         
                        84      POP_EXCEPT                      
                        86      POP_EXCEPT                      
                        88      JUMP_FORWARD                    152 (to 394)
                        90      RERAISE                         0
                        92      LOAD_FAST                       9: param
                        94      LOAD_ATTR                       5: kind
                        96      LOAD_GLOBAL                     6: _VAR_POSITIONAL
                        98      COMPARE_OP                      2 (==)
                        100     POP_JUMP_IF_FALSE               53 (to 106)
                        102     POP_EXCEPT                      
                        104     JUMP_FORWARD                    144 (to 394)
                        106     LOAD_FAST                       9: param
                        108     LOAD_ATTR                       7: name
                        110     LOAD_FAST                       2: kwargs
                        112     CONTAINS_OP                     0 (in)
                        114     POP_JUMP_IF_FALSE               82 (to 164)
                        116     LOAD_FAST                       9: param
                        118     LOAD_ATTR                       5: kind
                        120     LOAD_GLOBAL                     8: _POSITIONAL_ONLY
                        122     COMPARE_OP                      2 (==)
                        124     POP_JUMP_IF_FALSE               77 (to 154)
                        126     LOAD_CONST                      3: '{arg!r} parameter is positional only, but was passed as a keyword'
                        128     STORE_FAST                      10: msg
                        130     LOAD_FAST                       10: msg
                        132     LOAD_ATTR                       9: format
                        134     LOAD_FAST                       9: param
                        136     LOAD_ATTR                       7: name
                        138     LOAD_CONST                      4: ('arg',)
                        140     CALL_FUNCTION_KW                1
                        142     STORE_FAST                      10: msg
                        144     LOAD_GLOBAL                     10: TypeError
                        146     LOAD_FAST                       10: msg
                        148     CALL_FUNCTION                   1
                        150     LOAD_CONST                      5: None
                        152     RAISE_VARARGS                   2
                        154     LOAD_FAST                       9: param
                        156     BUILD_TUPLE                     1
                        158     STORE_FAST                      6: parameters_ex
                        160     POP_EXCEPT                      
                        162     JUMP_FORWARD                    115 (to 394)
                        164     LOAD_FAST                       9: param
                        166     LOAD_ATTR                       5: kind
                        168     LOAD_GLOBAL                     11: _VAR_KEYWORD
                        170     COMPARE_OP                      2 (==)
                        172     POP_JUMP_IF_TRUE                92 (to 184)
                        174     LOAD_FAST                       9: param
                        176     LOAD_ATTR                       12: default
                        178     LOAD_GLOBAL                     13: _empty
                        180     IS_OP                           1 (is not)
                        182     POP_JUMP_IF_FALSE               97 (to 194)
                        184     LOAD_FAST                       9: param
                        186     BUILD_TUPLE                     1
                        188     STORE_FAST                      6: parameters_ex
                        190     POP_EXCEPT                      
                        192     JUMP_FORWARD                    100 (to 394)
                        194     LOAD_FAST                       3: partial
                        196     POP_JUMP_IF_FALSE               104 (to 208)
                        198     LOAD_FAST                       9: param
                        200     BUILD_TUPLE                     1
                        202     STORE_FAST                      6: parameters_ex
                        204     POP_EXCEPT                      
                        206     JUMP_FORWARD                    93 (to 394)
                        208     LOAD_CONST                      6: 'missing a required argument: {arg!r}'
                        210     STORE_FAST                      10: msg
                        212     LOAD_FAST                       10: msg
                        214     LOAD_ATTR                       9: format
                        216     LOAD_FAST                       9: param
                        218     LOAD_ATTR                       7: name
                        220     LOAD_CONST                      4: ('arg',)
                        222     CALL_FUNCTION_KW                1
                        224     STORE_FAST                      10: msg
                        226     LOAD_GLOBAL                     10: TypeError
                        228     LOAD_FAST                       10: msg
                        230     CALL_FUNCTION                   1
                        232     LOAD_CONST                      5: None
                        234     RAISE_VARARGS                   2
                        236     RERAISE                         0
                        238     SETUP_FINALLY                   6 (to 252)
                        240     LOAD_GLOBAL                     3: next
                        242     LOAD_FAST                       5: parameters
                        244     CALL_FUNCTION                   1
                        246     STORE_FAST                      9: param
                        248     POP_BLOCK                       
                        250     JUMP_FORWARD                    12 (to 276)
                        252     DUP_TOP                         
                        254     LOAD_GLOBAL                     4: StopIteration
                        256     JUMP_IF_NOT_EXC_MATCH           137 (to 274)
                        258     POP_TOP                         
                        260     POP_TOP                         
                        262     POP_TOP                         
                        264     LOAD_GLOBAL                     10: TypeError
                        266     LOAD_CONST                      7: 'too many positional arguments'
                        268     CALL_FUNCTION                   1
                        270     LOAD_CONST                      5: None
                        272     RAISE_VARARGS                   2
                        274     RERAISE                         0
                        276     LOAD_FAST                       9: param
                        278     LOAD_ATTR                       5: kind
                        280     LOAD_GLOBAL                     11: _VAR_KEYWORD
                        282     LOAD_GLOBAL                     14: _KEYWORD_ONLY
                        284     BUILD_TUPLE                     2
                        286     CONTAINS_OP                     0 (in)
                        288     POP_JUMP_IF_FALSE               150 (to 300)
                        290     LOAD_GLOBAL                     10: TypeError
                        292     LOAD_CONST                      7: 'too many positional arguments'
                        294     CALL_FUNCTION                   1
                        296     LOAD_CONST                      5: None
                        298     RAISE_VARARGS                   2
                        300     LOAD_FAST                       9: param
                        302     LOAD_ATTR                       5: kind
                        304     LOAD_GLOBAL                     6: _VAR_POSITIONAL
                        306     COMPARE_OP                      2 (==)
                        308     POP_JUMP_IF_FALSE               171 (to 342)
                        310     LOAD_FAST                       8: arg_val
                        312     BUILD_LIST                      1
                        314     STORE_FAST                      11: values
                        316     LOAD_FAST                       11: values
                        318     LOAD_METHOD                     15: extend
                        320     LOAD_FAST                       7: arg_vals
                        322     CALL_METHOD                     1
                        324     POP_TOP                         
                        326     LOAD_GLOBAL                     16: tuple
                        328     LOAD_FAST                       11: values
                        330     CALL_FUNCTION                   1
                        332     LOAD_FAST                       4: arguments
                        334     LOAD_FAST                       9: param
                        336     LOAD_ATTR                       7: name
                        338     STORE_SUBSCR                    
                        340     JUMP_FORWARD                    26 (to 394)
                        342     LOAD_FAST                       9: param
                        344     LOAD_ATTR                       7: name
                        346     LOAD_FAST                       2: kwargs
                        348     CONTAINS_OP                     0 (in)
                        350     POP_JUMP_IF_FALSE               191 (to 382)
                        352     LOAD_FAST                       9: param
                        354     LOAD_ATTR                       5: kind
                        356     LOAD_GLOBAL                     8: _POSITIONAL_ONLY
                        358     COMPARE_OP                      3 (!=)
                        360     POP_JUMP_IF_FALSE               191 (to 382)
                        362     LOAD_GLOBAL                     10: TypeError
                        364     LOAD_CONST                      8: 'multiple values for argument {arg!r}'
                        366     LOAD_ATTR                       9: format
                        368     LOAD_FAST                       9: param
                        370     LOAD_ATTR                       7: name
                        372     LOAD_CONST                      4: ('arg',)
                        374     CALL_FUNCTION_KW                1
                        376     CALL_FUNCTION                   1
                        378     LOAD_CONST                      5: None
                        380     RAISE_VARARGS                   2
                        382     LOAD_FAST                       8: arg_val
                        384     LOAD_FAST                       4: arguments
                        386     LOAD_FAST                       9: param
                        388     LOAD_ATTR                       7: name
                        390     STORE_SUBSCR                    
                        392     JUMP_ABSOLUTE                   16 (to 32)
                        394     LOAD_CONST                      5: None
                        396     STORE_FAST                      12: kwargs_param
                        398     LOAD_GLOBAL                     17: itertools
                        400     LOAD_METHOD                     18: chain
                        402     LOAD_FAST                       6: parameters_ex
                        404     LOAD_FAST                       5: parameters
                        406     CALL_METHOD                     2
                        408     GET_ITER                        
                        410     FOR_ITER                        80 (to 572)
                        412     STORE_FAST                      9: param
                        414     LOAD_FAST                       9: param
                        416     LOAD_ATTR                       5: kind
                        418     LOAD_GLOBAL                     11: _VAR_KEYWORD
                        420     COMPARE_OP                      2 (==)
                        422     POP_JUMP_IF_FALSE               215 (to 430)
                        424     LOAD_FAST                       9: param
                        426     STORE_FAST                      12: kwargs_param
                        428     JUMP_ABSOLUTE                   205 (to 410)
                        430     LOAD_FAST                       9: param
                        432     LOAD_ATTR                       5: kind
                        434     LOAD_GLOBAL                     6: _VAR_POSITIONAL
                        436     COMPARE_OP                      2 (==)
                        438     POP_JUMP_IF_FALSE               221 (to 442)
                        440     JUMP_ABSOLUTE                   205 (to 410)
                        442     LOAD_FAST                       9: param
                        444     LOAD_ATTR                       7: name
                        446     STORE_FAST                      13: param_name
                        448     SETUP_FINALLY                   7 (to 464)
                        450     LOAD_FAST                       2: kwargs
                        452     LOAD_METHOD                     19: pop
                        454     LOAD_FAST                       13: param_name
                        456     CALL_METHOD                     1
                        458     STORE_FAST                      8: arg_val
                        460     POP_BLOCK                       
                        462     JUMP_FORWARD                    34 (to 532)
                        464     DUP_TOP                         
                        466     LOAD_GLOBAL                     20: KeyError
                        468     JUMP_IF_NOT_EXC_MATCH           265 (to 530)
                        472     POP_TOP                         
                        474     POP_TOP                         
                        476     POP_TOP                         
                        478     LOAD_FAST                       3: partial
                        480     POP_JUMP_IF_TRUE                263 (to 526)
                        484     LOAD_FAST                       9: param
                        486     LOAD_ATTR                       5: kind
                        488     LOAD_GLOBAL                     6: _VAR_POSITIONAL
                        490     COMPARE_OP                      3 (!=)
                        492     POP_JUMP_IF_FALSE               263 (to 526)
                        496     LOAD_FAST                       9: param
                        498     LOAD_ATTR                       12: default
                        500     LOAD_GLOBAL                     13: _empty
                        502     IS_OP                           0 (is)
                        504     POP_JUMP_IF_FALSE               263 (to 526)
                        508     LOAD_GLOBAL                     10: TypeError
                        510     LOAD_CONST                      6: 'missing a required argument: {arg!r}'
                        512     LOAD_ATTR                       9: format
                        514     LOAD_FAST                       13: param_name
                        516     LOAD_CONST                      4: ('arg',)
                        518     CALL_FUNCTION_KW                1
                        520     CALL_FUNCTION                   1
                        522     LOAD_CONST                      5: None
                        524     RAISE_VARARGS                   2
                        526     POP_EXCEPT                      
                        528     JUMP_ABSOLUTE                   205 (to 410)
                        530     RERAISE                         0
                        532     LOAD_FAST                       9: param
                        534     LOAD_ATTR                       5: kind
                        536     LOAD_GLOBAL                     8: _POSITIONAL_ONLY
                        538     COMPARE_OP                      2 (==)
                        540     POP_JUMP_IF_FALSE               281 (to 562)
                        544     LOAD_GLOBAL                     10: TypeError
                        546     LOAD_CONST                      3: '{arg!r} parameter is positional only, but was passed as a keyword'
                        548     LOAD_ATTR                       9: format
                        550     LOAD_FAST                       9: param
                        552     LOAD_ATTR                       7: name
                        554     LOAD_CONST                      4: ('arg',)
                        556     CALL_FUNCTION_KW                1
                        558     CALL_FUNCTION                   1
                        560     RAISE_VARARGS                   1
                        562     LOAD_FAST                       8: arg_val
                        564     LOAD_FAST                       4: arguments
                        566     LOAD_FAST                       13: param_name
                        568     STORE_SUBSCR                    
                        570     JUMP_ABSOLUTE                   205 (to 410)
                        572     LOAD_FAST                       2: kwargs
                        574     POP_JUMP_IF_FALSE               312 (to 624)
                        578     LOAD_FAST                       12: kwargs_param
                        580     LOAD_CONST                      5: None
                        582     IS_OP                           1 (is not)
                        584     POP_JUMP_IF_FALSE               300 (to 600)
                        588     LOAD_FAST                       2: kwargs
                        590     LOAD_FAST                       4: arguments
                        592     LOAD_FAST                       12: kwargs_param
                        594     LOAD_ATTR                       7: name
                        596     STORE_SUBSCR                    
                        598     JUMP_FORWARD                    12 (to 624)
                        600     LOAD_GLOBAL                     10: TypeError
                        602     LOAD_CONST                      9: 'got an unexpected keyword argument {arg!r}'
                        604     LOAD_ATTR                       9: format
                        606     LOAD_GLOBAL                     3: next
                        608     LOAD_GLOBAL                     0: iter
                        610     LOAD_FAST                       2: kwargs
                        612     CALL_FUNCTION                   1
                        614     CALL_FUNCTION                   1
                        616     LOAD_CONST                      4: ('arg',)
                        618     CALL_FUNCTION_KW                1
                        620     CALL_FUNCTION                   1
                        622     RAISE_VARARGS                   1
                        624     LOAD_FAST                       0: self
                        626     LOAD_METHOD                     21: _bound_arguments_cls
                        628     LOAD_FAST                       0: self
                        630     LOAD_FAST                       4: arguments
                        632     CALL_METHOD                     2
                        634     RETURN_VALUE                    
                'Signature._bind'
                [Code]
                    File Name: inspect.py
                    Object Name: bind
                    Arg Count: 1
                    Pos Only Arg Count: 1
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        '_bind'
                    [Var Names]
                        'self'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Get a BoundArguments object, that maps the passed `args`\n        and `kwargs` to the function's signature.  Raises `TypeError`\n        if the passed arguments can not be bound.\n        "
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _bind
                        4       LOAD_FAST                       1: args
                        6       LOAD_FAST                       2: kwargs
                        8       CALL_METHOD                     2
                        10      RETURN_VALUE                    
                'Signature.bind'
                [Code]
                    File Name: inspect.py
                    Object Name: bind_partial
                    Arg Count: 1
                    Pos Only Arg Count: 1
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x0000004F (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE)
                    [Names]
                        '_bind'
                    [Var Names]
                        'self'
                        'args'
                        'kwargs'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Get a BoundArguments object, that partially maps the\n        passed `args` and `kwargs` to the function's signature.\n        Raises `TypeError` if the passed arguments can not be bound.\n        "
                        True
                        (
                            'partial'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _bind
                        4       LOAD_FAST                       1: args
                        6       LOAD_FAST                       2: kwargs
                        8       LOAD_CONST                      1: True
                        10      LOAD_CONST                      2: ('partial',)
                        12      CALL_FUNCTION_KW                3
                        14      RETURN_VALUE                    
                'Signature.bind_partial'
                [Code]
                    File Name: inspect.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        'tuple'
                        '_parameters'
                        'values'
                        '_return_annotation'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '_return_annotation'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: type
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_GLOBAL                     1: tuple
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: _parameters
                        12      LOAD_METHOD                     3: values
                        14      CALL_METHOD                     0
                        16      CALL_FUNCTION                   1
                        18      BUILD_TUPLE                     1
                        20      LOAD_CONST                      1: '_return_annotation'
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       4: _return_annotation
                        26      BUILD_MAP                       1
                        28      BUILD_TUPLE                     3
                        30      RETURN_VALUE                    
                'Signature.__reduce__'
                [Code]
                    File Name: inspect.py
                    Object Name: __setstate__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_return_annotation'
                    [Var Names]
                        'self'
                        'state'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '_return_annotation'
                    [Disassembly]
                        0       LOAD_FAST                       1: state
                        2       LOAD_CONST                      1: '_return_annotation'
                        4       BINARY_SUBSCR                   
                        6       LOAD_FAST                       0: self
                        8       STORE_ATTR                      0: _return_annotation
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                'Signature.__setstate__'
                [Code]
                    File Name: inspect.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'format'
                        '__class__'
                        '__name__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '<{} {}>'
                    [Disassembly]
                        0       LOAD_CONST                      1: '<{} {}>'
                        2       LOAD_METHOD                     0: format
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: __class__
                        8       LOAD_ATTR                       2: __name__
                        10      LOAD_FAST                       0: self
                        12      CALL_METHOD                     2
                        14      RETURN_VALUE                    
                'Signature.__repr__'
                [Code]
                    File Name: inspect.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'parameters'
                        'values'
                        'str'
                        'kind'
                        '_POSITIONAL_ONLY'
                        'append'
                        '_VAR_POSITIONAL'
                        '_KEYWORD_ONLY'
                        'format'
                        'join'
                        'return_annotation'
                        '_empty'
                        'formatannotation'
                    [Var Names]
                        'self'
                        'result'
                        'render_pos_only_separator'
                        'render_kw_only_separator'
                        'param'
                        'formatted'
                        'kind'
                        'rendered'
                        'anno'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        True
                        '/'
                        '*'
                        '({})'
                        ', '
                        ' -> {}'
                    [Disassembly]
                        0       BUILD_LIST                      0
                        2       STORE_FAST                      1: result
                        4       LOAD_CONST                      1: False
                        6       STORE_FAST                      2: render_pos_only_separator
                        8       LOAD_CONST                      2: True
                        10      STORE_FAST                      3: render_kw_only_separator
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       0: parameters
                        16      LOAD_METHOD                     1: values
                        18      CALL_METHOD                     0
                        20      GET_ITER                        
                        22      FOR_ITER                        50 (to 124)
                        24      STORE_FAST                      4: param
                        26      LOAD_GLOBAL                     2: str
                        28      LOAD_FAST                       4: param
                        30      CALL_FUNCTION                   1
                        32      STORE_FAST                      5: formatted
                        34      LOAD_FAST                       4: param
                        36      LOAD_ATTR                       3: kind
                        38      STORE_FAST                      6: kind
                        40      LOAD_FAST                       6: kind
                        42      LOAD_GLOBAL                     4: _POSITIONAL_ONLY
                        44      COMPARE_OP                      2 (==)
                        46      POP_JUMP_IF_FALSE               27 (to 54)
                        48      LOAD_CONST                      2: True
                        50      STORE_FAST                      2: render_pos_only_separator
                        52      JUMP_FORWARD                    9 (to 72)
                        54      LOAD_FAST                       2: render_pos_only_separator
                        56      POP_JUMP_IF_FALSE               36 (to 72)
                        58      LOAD_FAST                       1: result
                        60      LOAD_METHOD                     5: append
                        62      LOAD_CONST                      3: '/'
                        64      CALL_METHOD                     1
                        66      POP_TOP                         
                        68      LOAD_CONST                      1: False
                        70      STORE_FAST                      2: render_pos_only_separator
                        72      LOAD_FAST                       6: kind
                        74      LOAD_GLOBAL                     6: _VAR_POSITIONAL
                        76      COMPARE_OP                      2 (==)
                        78      POP_JUMP_IF_FALSE               43 (to 86)
                        80      LOAD_CONST                      1: False
                        82      STORE_FAST                      3: render_kw_only_separator
                        84      JUMP_FORWARD                    13 (to 112)
                        86      LOAD_FAST                       6: kind
                        88      LOAD_GLOBAL                     7: _KEYWORD_ONLY
                        90      COMPARE_OP                      2 (==)
                        92      POP_JUMP_IF_FALSE               56 (to 112)
                        94      LOAD_FAST                       3: render_kw_only_separator
                        96      POP_JUMP_IF_FALSE               56 (to 112)
                        98      LOAD_FAST                       1: result
                        100     LOAD_METHOD                     5: append
                        102     LOAD_CONST                      4: '*'
                        104     CALL_METHOD                     1
                        106     POP_TOP                         
                        108     LOAD_CONST                      1: False
                        110     STORE_FAST                      3: render_kw_only_separator
                        112     LOAD_FAST                       1: result
                        114     LOAD_METHOD                     5: append
                        116     LOAD_FAST                       5: formatted
                        118     CALL_METHOD                     1
                        120     POP_TOP                         
                        122     JUMP_ABSOLUTE                   11 (to 22)
                        124     LOAD_FAST                       2: render_pos_only_separator
                        126     POP_JUMP_IF_FALSE               69 (to 138)
                        128     LOAD_FAST                       1: result
                        130     LOAD_METHOD                     5: append
                        132     LOAD_CONST                      3: '/'
                        134     CALL_METHOD                     1
                        136     POP_TOP                         
                        138     LOAD_CONST                      5: '({})'
                        140     LOAD_METHOD                     8: format
                        142     LOAD_CONST                      6: ', '
                        144     LOAD_METHOD                     9: join
                        146     LOAD_FAST                       1: result
                        148     CALL_METHOD                     1
                        150     CALL_METHOD                     1
                        152     STORE_FAST                      7: rendered
                        154     LOAD_FAST                       0: self
                        156     LOAD_ATTR                       10: return_annotation
                        158     LOAD_GLOBAL                     11: _empty
                        160     IS_OP                           1 (is not)
                        162     POP_JUMP_IF_FALSE               94 (to 188)
                        164     LOAD_GLOBAL                     12: formatannotation
                        166     LOAD_FAST                       0: self
                        168     LOAD_ATTR                       10: return_annotation
                        170     CALL_FUNCTION                   1
                        172     STORE_FAST                      8: anno
                        174     LOAD_FAST                       7: rendered
                        176     LOAD_CONST                      7: ' -> {}'
                        178     LOAD_METHOD                     8: format
                        180     LOAD_FAST                       8: anno
                        182     CALL_METHOD                     1
                        184     INPLACE_ADD                     
                        186     STORE_FAST                      7: rendered
                        188     LOAD_FAST                       7: rendered
                        190     RETURN_VALUE                    
                'Signature.__str__'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'Signature'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "A Signature object represents the overall signature of a function.\n    It stores a Parameter object for each parameter accepted by the\n    function, as well as information specific to the function itself.\n\n    A Signature object has the following public attributes and methods:\n\n    * parameters : OrderedDict\n        An ordered mapping of parameters' names to the corresponding\n        Parameter objects (keyword-only arguments are in the same order\n        as listed in `code.co_varnames`).\n    * return_annotation : object\n        The annotation for the return type of the function if specified.\n        If the function has no annotation for its return type, this\n        attribute is set to `Signature.empty`.\n    * bind(*args, **kwargs) -> BoundArguments\n        Creates a mapping from positional and keyword arguments to\n        parameters.\n    * bind_partial(*args, **kwargs) -> BoundArguments\n        Creates a partial mapping from positional and keyword arguments\n        to parameters (simulating 'functools.partial' behavior.)\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ('_return_annotation', '_parameters')
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: Parameter
                18      STORE_NAME                      6: _parameter_cls
                20      LOAD_NAME                       7: BoundArguments
                22      STORE_NAME                      8: _bound_arguments_cls
                24      LOAD_NAME                       9: _empty
                26      STORE_NAME                      10: empty
                28      LOAD_CONST                      44: (None,)
                30      LOAD_NAME                       9: _empty
                32      LOAD_CONST                      4: True
                34      LOAD_CONST                      5: ('return_annotation', '__validate_parameters__')
                36      BUILD_CONST_KEY_MAP             2
                38      LOAD_CONST                      6: <CODE> __init__
                40      LOAD_CONST                      7: 'Signature.__init__'
                42      MAKE_FUNCTION                   3
                44      STORE_NAME                      11: __init__
                46      LOAD_NAME                       12: classmethod
                48      LOAD_CONST                      8: <CODE> from_function
                50      LOAD_CONST                      9: 'Signature.from_function'
                52      MAKE_FUNCTION                   0
                54      CALL_FUNCTION                   1
                56      STORE_NAME                      13: from_function
                58      LOAD_NAME                       12: classmethod
                60      LOAD_CONST                      10: <CODE> from_builtin
                62      LOAD_CONST                      11: 'Signature.from_builtin'
                64      MAKE_FUNCTION                   0
                66      CALL_FUNCTION                   1
                68      STORE_NAME                      14: from_builtin
                70      LOAD_NAME                       12: classmethod
                72      LOAD_CONST                      4: True
                74      LOAD_CONST                      3: None
                76      LOAD_CONST                      3: None
                78      LOAD_CONST                      12: False
                80      LOAD_CONST                      13: ('follow_wrapped', 'globals', 'locals', 'eval_str')
                82      BUILD_CONST_KEY_MAP             4
                84      LOAD_CONST                      14: <CODE> from_callable
                86      LOAD_CONST                      15: 'Signature.from_callable'
                88      MAKE_FUNCTION                   2
                90      CALL_FUNCTION                   1
                92      STORE_NAME                      15: from_callable
                94      LOAD_NAME                       16: property
                96      LOAD_CONST                      16: <CODE> parameters
                98      LOAD_CONST                      17: 'Signature.parameters'
                100     MAKE_FUNCTION                   0
                102     CALL_FUNCTION                   1
                104     STORE_NAME                      17: parameters
                106     LOAD_NAME                       16: property
                108     LOAD_CONST                      18: <CODE> return_annotation
                110     LOAD_CONST                      19: 'Signature.return_annotation'
                112     MAKE_FUNCTION                   0
                114     CALL_FUNCTION                   1
                116     STORE_NAME                      18: return_annotation
                118     LOAD_NAME                       19: _void
                120     LOAD_NAME                       19: _void
                122     LOAD_CONST                      20: ('parameters', 'return_annotation')
                124     BUILD_CONST_KEY_MAP             2
                126     LOAD_CONST                      21: <CODE> replace
                128     LOAD_CONST                      22: 'Signature.replace'
                130     MAKE_FUNCTION                   2
                132     STORE_NAME                      20: replace
                134     LOAD_CONST                      23: <CODE> _hash_basis
                136     LOAD_CONST                      24: 'Signature._hash_basis'
                138     MAKE_FUNCTION                   0
                140     STORE_NAME                      21: _hash_basis
                142     LOAD_CONST                      25: <CODE> __hash__
                144     LOAD_CONST                      26: 'Signature.__hash__'
                146     MAKE_FUNCTION                   0
                148     STORE_NAME                      22: __hash__
                150     LOAD_CONST                      27: <CODE> __eq__
                152     LOAD_CONST                      28: 'Signature.__eq__'
                154     MAKE_FUNCTION                   0
                156     STORE_NAME                      23: __eq__
                158     LOAD_CONST                      12: False
                160     LOAD_CONST                      29: ('partial',)
                162     BUILD_CONST_KEY_MAP             1
                164     LOAD_CONST                      30: <CODE> _bind
                166     LOAD_CONST                      31: 'Signature._bind'
                168     MAKE_FUNCTION                   2
                170     STORE_NAME                      24: _bind
                172     LOAD_CONST                      32: <CODE> bind
                174     LOAD_CONST                      33: 'Signature.bind'
                176     MAKE_FUNCTION                   0
                178     STORE_NAME                      25: bind
                180     LOAD_CONST                      34: <CODE> bind_partial
                182     LOAD_CONST                      35: 'Signature.bind_partial'
                184     MAKE_FUNCTION                   0
                186     STORE_NAME                      26: bind_partial
                188     LOAD_CONST                      36: <CODE> __reduce__
                190     LOAD_CONST                      37: 'Signature.__reduce__'
                192     MAKE_FUNCTION                   0
                194     STORE_NAME                      27: __reduce__
                196     LOAD_CONST                      38: <CODE> __setstate__
                198     LOAD_CONST                      39: 'Signature.__setstate__'
                200     MAKE_FUNCTION                   0
                202     STORE_NAME                      28: __setstate__
                204     LOAD_CONST                      40: <CODE> __repr__
                206     LOAD_CONST                      41: 'Signature.__repr__'
                208     MAKE_FUNCTION                   0
                210     STORE_NAME                      29: __repr__
                212     LOAD_CONST                      42: <CODE> __str__
                214     LOAD_CONST                      43: 'Signature.__str__'
                216     MAKE_FUNCTION                   0
                218     STORE_NAME                      30: __str__
                220     LOAD_CONST                      3: None
                222     RETURN_VALUE                    
        'Signature'
        (
            'follow_wrapped'
            'globals'
            'locals'
            'eval_str'
        )
        [Code]
            File Name: inspect.py
            Object Name: signature
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 4
            Locals: 5
            Stack Size: 7
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'Signature'
                'from_callable'
            [Var Names]
                'obj'
                'follow_wrapped'
                'globals'
                'locals'
                'eval_str'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Get a signature object for the passed callable.'
                (
                    'follow_wrapped'
                    'globals'
                    'locals'
                    'eval_str'
                )
            [Disassembly]
                0       LOAD_GLOBAL                     0: Signature
                2       LOAD_ATTR                       1: from_callable
                4       LOAD_FAST                       0: obj
                6       LOAD_FAST                       1: follow_wrapped
                8       LOAD_FAST                       2: globals
                10      LOAD_FAST                       3: locals
                12      LOAD_FAST                       4: eval_str
                14      LOAD_CONST                      1: ('follow_wrapped', 'globals', 'locals', 'eval_str')
                16      CALL_FUNCTION_KW                5
                18      RETURN_VALUE                    
        'signature'
        [Code]
            File Name: inspect.py
            Object Name: _main
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 16
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'argparse'
                'importlib'
                'ArgumentParser'
                'add_argument'
                'parse_args'
                'object'
                'partition'
                'import_module'
                'Exception'
                'format'
                'type'
                '__name__'
                'print'
                'sys'
                'stderr'
                'exit'
                'split'
                'getattr'
                'builtin_module_names'
                'details'
                'getsourcefile'
                '__cached__'
                'repr'
                '__loader__'
                'hasattr'
                '__path__'
                'findsource'
                'getsource'
            [Var Names]
                'argparse'
                'importlib'
                'parser'
                'args'
                'target'
                'mod_name'
                'has_attrs'
                'attrs'
                'obj'
                'module'
                'exc'
                'msg'
                'parts'
                'part'
                '__'
                'lineno'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' Logic for inspecting an object given at command line '
                0
                None
                'object'
                "The object to be analysed. It supports the 'module:qualname' syntax"
                (
                    'help'
                )
                '-d'
                '--details'
                'store_true'
                'Display info about the module rather than its source code'
                (
                    'action'
                    'help'
                )
                ':'
                'Failed to import {} ({}: {})'
                (
                    'file'
                )
                2
                '.'
                "Can't get info for builtin modules."
                1
                'Target: {}'
                'Origin: {}'
                'Cached: {}'
                'Loader: {}'
                '__path__'
                'Submodule search path: {}'
                'Line: {}'
                '\n'
            [Disassembly]
                0       LOAD_CONST                      1: 0
                2       LOAD_CONST                      2: None
                4       IMPORT_NAME                     0: argparse
                6       STORE_FAST                      0: argparse
                8       LOAD_CONST                      1: 0
                10      LOAD_CONST                      2: None
                12      IMPORT_NAME                     1: importlib
                14      STORE_FAST                      1: importlib
                16      LOAD_FAST                       0: argparse
                18      LOAD_METHOD                     2: ArgumentParser
                20      CALL_METHOD                     0
                22      STORE_FAST                      2: parser
                24      LOAD_FAST                       2: parser
                26      LOAD_ATTR                       3: add_argument
                28      LOAD_CONST                      3: 'object'
                30      LOAD_CONST                      4: "The object to be analysed. It supports the 'module:qualname' syntax"
                32      LOAD_CONST                      5: ('help',)
                34      CALL_FUNCTION_KW                2
                36      POP_TOP                         
                38      LOAD_FAST                       2: parser
                40      LOAD_ATTR                       3: add_argument
                42      LOAD_CONST                      6: '-d'
                44      LOAD_CONST                      7: '--details'
                46      LOAD_CONST                      8: 'store_true'
                48      LOAD_CONST                      9: 'Display info about the module rather than its source code'
                50      LOAD_CONST                      10: ('action', 'help')
                52      CALL_FUNCTION_KW                4
                54      POP_TOP                         
                56      LOAD_FAST                       2: parser
                58      LOAD_METHOD                     4: parse_args
                60      CALL_METHOD                     0
                62      STORE_FAST                      3: args
                64      LOAD_FAST                       3: args
                66      LOAD_ATTR                       5: object
                68      STORE_FAST                      4: target
                70      LOAD_FAST                       4: target
                72      LOAD_METHOD                     6: partition
                74      LOAD_CONST                      11: ':'
                76      CALL_METHOD                     1
                78      UNPACK_SEQUENCE                 3
                80      STORE_FAST                      5: mod_name
                82      STORE_FAST                      6: has_attrs
                84      STORE_FAST                      7: attrs
                86      SETUP_FINALLY                   9 (to 106)
                88      LOAD_FAST                       1: importlib
                90      LOAD_METHOD                     7: import_module
                92      LOAD_FAST                       5: mod_name
                94      CALL_METHOD                     1
                96      DUP_TOP                         
                98      STORE_FAST                      8: obj
                100     STORE_FAST                      9: module
                102     POP_BLOCK                       
                104     JUMP_FORWARD                    40 (to 186)
                106     DUP_TOP                         
                108     LOAD_GLOBAL                     8: Exception
                110     JUMP_IF_NOT_EXC_MATCH           92 (to 184)
                112     POP_TOP                         
                114     STORE_FAST                      10: exc
                116     POP_TOP                         
                118     SETUP_FINALLY                   28 (to 176)
                120     LOAD_CONST                      12: 'Failed to import {} ({}: {})'
                122     LOAD_METHOD                     9: format
                124     LOAD_FAST                       5: mod_name
                126     LOAD_GLOBAL                     10: type
                128     LOAD_FAST                       10: exc
                130     CALL_FUNCTION                   1
                132     LOAD_ATTR                       11: __name__
                134     LOAD_FAST                       10: exc
                136     CALL_METHOD                     3
                138     STORE_FAST                      11: msg
                140     LOAD_GLOBAL                     12: print
                142     LOAD_FAST                       11: msg
                144     LOAD_GLOBAL                     13: sys
                146     LOAD_ATTR                       14: stderr
                148     LOAD_CONST                      13: ('file',)
                150     CALL_FUNCTION_KW                2
                152     POP_TOP                         
                154     LOAD_GLOBAL                     13: sys
                156     LOAD_METHOD                     15: exit
                158     LOAD_CONST                      14: 2
                160     CALL_METHOD                     1
                162     POP_TOP                         
                164     POP_BLOCK                       
                166     POP_EXCEPT                      
                168     LOAD_CONST                      2: None
                170     STORE_FAST                      10: exc
                172     DELETE_FAST                     10: exc
                174     JUMP_FORWARD                    5 (to 186)
                176     LOAD_CONST                      2: None
                178     STORE_FAST                      10: exc
                180     DELETE_FAST                     10: exc
                182     RERAISE                         1
                184     RERAISE                         0
                186     LOAD_FAST                       6: has_attrs
                188     POP_JUMP_IF_FALSE               112 (to 224)
                190     LOAD_FAST                       7: attrs
                192     LOAD_METHOD                     16: split
                194     LOAD_CONST                      15: '.'
                196     CALL_METHOD                     1
                198     STORE_FAST                      12: parts
                200     LOAD_FAST                       9: module
                202     STORE_FAST                      8: obj
                204     LOAD_FAST                       12: parts
                206     GET_ITER                        
                208     FOR_ITER                        7 (to 224)
                210     STORE_FAST                      13: part
                212     LOAD_GLOBAL                     17: getattr
                214     LOAD_FAST                       8: obj
                216     LOAD_FAST                       13: part
                218     CALL_FUNCTION                   2
                220     STORE_FAST                      8: obj
                222     JUMP_ABSOLUTE                   104 (to 208)
                224     LOAD_FAST                       9: module
                226     LOAD_ATTR                       11: __name__
                228     LOAD_GLOBAL                     13: sys
                230     LOAD_ATTR                       18: builtin_module_names
                232     CONTAINS_OP                     0 (in)
                234     POP_JUMP_IF_FALSE               130 (to 260)
                236     LOAD_GLOBAL                     12: print
                238     LOAD_CONST                      16: "Can't get info for builtin modules."
                240     LOAD_GLOBAL                     13: sys
                242     LOAD_ATTR                       14: stderr
                244     LOAD_CONST                      13: ('file',)
                246     CALL_FUNCTION_KW                2
                248     POP_TOP                         
                250     LOAD_GLOBAL                     13: sys
                252     LOAD_METHOD                     15: exit
                254     LOAD_CONST                      17: 1
                256     CALL_METHOD                     1
                258     POP_TOP                         
                260     LOAD_FAST                       3: args
                262     LOAD_ATTR                       19: details
                264     POP_JUMP_IF_FALSE               216 (to 432)
                266     LOAD_GLOBAL                     12: print
                268     LOAD_CONST                      18: 'Target: {}'
                270     LOAD_METHOD                     9: format
                272     LOAD_FAST                       4: target
                274     CALL_METHOD                     1
                276     CALL_FUNCTION                   1
                278     POP_TOP                         
                280     LOAD_GLOBAL                     12: print
                282     LOAD_CONST                      19: 'Origin: {}'
                284     LOAD_METHOD                     9: format
                286     LOAD_GLOBAL                     20: getsourcefile
                288     LOAD_FAST                       9: module
                290     CALL_FUNCTION                   1
                292     CALL_METHOD                     1
                294     CALL_FUNCTION                   1
                296     POP_TOP                         
                298     LOAD_GLOBAL                     12: print
                300     LOAD_CONST                      20: 'Cached: {}'
                302     LOAD_METHOD                     9: format
                304     LOAD_FAST                       9: module
                306     LOAD_ATTR                       21: __cached__
                308     CALL_METHOD                     1
                310     CALL_FUNCTION                   1
                312     POP_TOP                         
                314     LOAD_FAST                       8: obj
                316     LOAD_FAST                       9: module
                318     IS_OP                           0 (is)
                320     POP_JUMP_IF_FALSE               185 (to 370)
                322     LOAD_GLOBAL                     12: print
                324     LOAD_CONST                      21: 'Loader: {}'
                326     LOAD_METHOD                     9: format
                328     LOAD_GLOBAL                     22: repr
                330     LOAD_FAST                       9: module
                332     LOAD_ATTR                       23: __loader__
                334     CALL_FUNCTION                   1
                336     CALL_METHOD                     1
                338     CALL_FUNCTION                   1
                340     POP_TOP                         
                342     LOAD_GLOBAL                     24: hasattr
                344     LOAD_FAST                       9: module
                346     LOAD_CONST                      22: '__path__'
                348     CALL_FUNCTION                   2
                350     POP_JUMP_IF_FALSE               184 (to 368)
                352     LOAD_GLOBAL                     12: print
                354     LOAD_CONST                      23: 'Submodule search path: {}'
                356     LOAD_METHOD                     9: format
                358     LOAD_FAST                       9: module
                360     LOAD_ATTR                       25: __path__
                362     CALL_METHOD                     1
                364     CALL_FUNCTION                   1
                366     POP_TOP                         
                368     JUMP_FORWARD                    25 (to 420)
                370     SETUP_FINALLY                   8 (to 388)
                372     LOAD_GLOBAL                     26: findsource
                374     LOAD_FAST                       8: obj
                376     CALL_FUNCTION                   1
                378     UNPACK_SEQUENCE                 2
                380     STORE_FAST                      14: __
                382     STORE_FAST                      15: lineno
                384     POP_BLOCK                       
                386     JUMP_FORWARD                    9 (to 406)
                388     DUP_TOP                         
                390     LOAD_GLOBAL                     8: Exception
                392     JUMP_IF_NOT_EXC_MATCH           202 (to 404)
                394     POP_TOP                         
                396     POP_TOP                         
                398     POP_TOP                         
                400     POP_EXCEPT                      
                402     JUMP_FORWARD                    8 (to 420)
                404     RERAISE                         0
                406     LOAD_GLOBAL                     12: print
                408     LOAD_CONST                      24: 'Line: {}'
                410     LOAD_METHOD                     9: format
                412     LOAD_FAST                       15: lineno
                414     CALL_METHOD                     1
                416     CALL_FUNCTION                   1
                418     POP_TOP                         
                420     LOAD_GLOBAL                     12: print
                422     LOAD_CONST                      25: '\n'
                424     CALL_FUNCTION                   1
                426     POP_TOP                         
                428     LOAD_CONST                      2: None
                430     RETURN_VALUE                    
                432     LOAD_GLOBAL                     12: print
                434     LOAD_GLOBAL                     27: getsource
                436     LOAD_FAST                       8: obj
                438     CALL_FUNCTION                   1
                440     CALL_FUNCTION                   1
                442     POP_TOP                         
                444     LOAD_CONST                      2: None
                446     RETURN_VALUE                    
        '_main'
        '__main__'
        (
            None
        )
        (
            False
        )
        (
            1
        )
        (
            (
            )
        )
        (
            True
        )
        (
            True
            None
            None
            False
        )
    [Disassembly]
        0       LOAD_CONST                      0: "Get useful information from live Python objects.\n\nThis module encapsulates the interface provided by the internal special\nattributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.\nIt also provides some help for examining source code and class layout.\n\nHere are some of the useful functions provided by this module:\n\n    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),\n        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),\n        isroutine() - check object types\n    getmembers() - get members of an object that satisfy a given condition\n\n    getfile(), getsourcefile(), getsource() - find an object's source code\n    getdoc(), getcomments() - get documentation on an object\n    getmodule() - determine the module that an object came from\n    getclasstree() - arrange classes so as to represent their hierarchy\n\n    getargvalues(), getcallargs() - get info about function arguments\n    getfullargspec() - same, with support for Python 3 features\n    formatargvalues() - format an argument spec\n    getouterframes(), getinnerframes() - get info about frames\n    currentframe() - get the current stack frame\n    stack(), trace() - get info about frames on the stack or in a traceback\n\n    signature() - get a Signature object for the callable\n\n    get_annotations() - safely compute an object's annotations\n"
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: ('Ka-Ping Yee <ping@lfw.org>', 'Yury Selivanov <yselivanov@sprymix.com>')
        6       STORE_NAME                      1: __author__
        8       LOAD_CONST                      2: 0
        10      LOAD_CONST                      3: None
        12      IMPORT_NAME                     2: abc
        14      STORE_NAME                      2: abc
        16      LOAD_CONST                      2: 0
        18      LOAD_CONST                      3: None
        20      IMPORT_NAME                     3: ast
        22      STORE_NAME                      3: ast
        24      LOAD_CONST                      2: 0
        26      LOAD_CONST                      3: None
        28      IMPORT_NAME                     4: dis
        30      STORE_NAME                      4: dis
        32      LOAD_CONST                      2: 0
        34      LOAD_CONST                      3: None
        36      IMPORT_NAME                     5: collections.abc
        38      STORE_NAME                      6: collections
        40      LOAD_CONST                      2: 0
        42      LOAD_CONST                      3: None
        44      IMPORT_NAME                     7: enum
        46      STORE_NAME                      7: enum
        48      LOAD_CONST                      2: 0
        50      LOAD_CONST                      3: None
        52      IMPORT_NAME                     8: importlib.machinery
        54      STORE_NAME                      9: importlib
        56      LOAD_CONST                      2: 0
        58      LOAD_CONST                      3: None
        60      IMPORT_NAME                     10: itertools
        62      STORE_NAME                      10: itertools
        64      LOAD_CONST                      2: 0
        66      LOAD_CONST                      3: None
        68      IMPORT_NAME                     11: linecache
        70      STORE_NAME                      11: linecache
        72      LOAD_CONST                      2: 0
        74      LOAD_CONST                      3: None
        76      IMPORT_NAME                     12: os
        78      STORE_NAME                      12: os
        80      LOAD_CONST                      2: 0
        82      LOAD_CONST                      3: None
        84      IMPORT_NAME                     13: re
        86      STORE_NAME                      13: re
        88      LOAD_CONST                      2: 0
        90      LOAD_CONST                      3: None
        92      IMPORT_NAME                     14: sys
        94      STORE_NAME                      14: sys
        96      LOAD_CONST                      2: 0
        98      LOAD_CONST                      3: None
        100     IMPORT_NAME                     15: tokenize
        102     STORE_NAME                      15: tokenize
        104     LOAD_CONST                      2: 0
        106     LOAD_CONST                      3: None
        108     IMPORT_NAME                     16: token
        110     STORE_NAME                      16: token
        112     LOAD_CONST                      2: 0
        114     LOAD_CONST                      3: None
        116     IMPORT_NAME                     17: types
        118     STORE_NAME                      17: types
        120     LOAD_CONST                      2: 0
        122     LOAD_CONST                      3: None
        124     IMPORT_NAME                     18: warnings
        126     STORE_NAME                      18: warnings
        128     LOAD_CONST                      2: 0
        130     LOAD_CONST                      3: None
        132     IMPORT_NAME                     19: functools
        134     STORE_NAME                      19: functools
        136     LOAD_CONST                      2: 0
        138     LOAD_CONST                      3: None
        140     IMPORT_NAME                     20: builtins
        142     STORE_NAME                      20: builtins
        144     LOAD_CONST                      2: 0
        146     LOAD_CONST                      4: ('attrgetter',)
        148     IMPORT_NAME                     21: operator
        150     IMPORT_FROM                     22: attrgetter
        152     STORE_NAME                      22: attrgetter
        154     POP_TOP                         
        156     LOAD_CONST                      2: 0
        158     LOAD_CONST                      5: ('namedtuple', 'OrderedDict')
        160     IMPORT_NAME                     6: collections
        162     IMPORT_FROM                     23: namedtuple
        164     STORE_NAME                      23: namedtuple
        166     IMPORT_FROM                     24: OrderedDict
        168     STORE_NAME                      24: OrderedDict
        170     POP_TOP                         
        172     LOAD_NAME                       25: globals
        174     CALL_FUNCTION                   0
        176     STORE_NAME                      26: mod_dict
        178     LOAD_NAME                       4: dis
        180     LOAD_ATTR                       27: COMPILER_FLAG_NAMES
        182     LOAD_METHOD                     28: items
        184     CALL_METHOD                     0
        186     GET_ITER                        
        188     FOR_ITER                        10 (to 210)
        190     UNPACK_SEQUENCE                 2
        192     STORE_NAME                      29: k
        194     STORE_NAME                      30: v
        196     LOAD_NAME                       29: k
        198     LOAD_NAME                       26: mod_dict
        200     LOAD_CONST                      6: 'CO_'
        202     LOAD_NAME                       30: v
        204     BINARY_ADD                      
        206     STORE_SUBSCR                    
        208     JUMP_ABSOLUTE                   94 (to 188)
        210     LOAD_CONST                      7: 1048576
        212     STORE_NAME                      31: TPFLAGS_IS_ABSTRACT
        214     LOAD_CONST                      3: None
        216     LOAD_CONST                      3: None
        218     LOAD_CONST                      8: False
        220     LOAD_CONST                      9: ('globals', 'locals', 'eval_str')
        222     BUILD_CONST_KEY_MAP             3
        224     LOAD_CONST                      10: <CODE> get_annotations
        226     LOAD_CONST                      11: 'get_annotations'
        228     MAKE_FUNCTION                   2
        230     STORE_NAME                      32: get_annotations
        232     LOAD_CONST                      12: <CODE> ismodule
        234     LOAD_CONST                      13: 'ismodule'
        236     MAKE_FUNCTION                   0
        238     STORE_NAME                      33: ismodule
        240     LOAD_CONST                      14: <CODE> isclass
        242     LOAD_CONST                      15: 'isclass'
        244     MAKE_FUNCTION                   0
        246     STORE_NAME                      34: isclass
        248     LOAD_CONST                      16: <CODE> ismethod
        250     LOAD_CONST                      17: 'ismethod'
        252     MAKE_FUNCTION                   0
        254     STORE_NAME                      35: ismethod
        256     LOAD_CONST                      18: <CODE> ismethoddescriptor
        258     LOAD_CONST                      19: 'ismethoddescriptor'
        260     MAKE_FUNCTION                   0
        262     STORE_NAME                      36: ismethoddescriptor
        264     LOAD_CONST                      20: <CODE> isdatadescriptor
        266     LOAD_CONST                      21: 'isdatadescriptor'
        268     MAKE_FUNCTION                   0
        270     STORE_NAME                      37: isdatadescriptor
        272     LOAD_NAME                       38: hasattr
        274     LOAD_NAME                       17: types
        276     LOAD_CONST                      22: 'MemberDescriptorType'
        278     CALL_FUNCTION                   2
        280     POP_JUMP_IF_FALSE               146 (to 292)
        282     LOAD_CONST                      23: <CODE> ismemberdescriptor
        284     LOAD_CONST                      24: 'ismemberdescriptor'
        286     MAKE_FUNCTION                   0
        288     STORE_NAME                      39: ismemberdescriptor
        290     JUMP_FORWARD                    4 (to 300)
        292     LOAD_CONST                      25: <CODE> ismemberdescriptor
        294     LOAD_CONST                      24: 'ismemberdescriptor'
        296     MAKE_FUNCTION                   0
        298     STORE_NAME                      39: ismemberdescriptor
        300     LOAD_NAME                       38: hasattr
        302     LOAD_NAME                       17: types
        304     LOAD_CONST                      26: 'GetSetDescriptorType'
        306     CALL_FUNCTION                   2
        308     POP_JUMP_IF_FALSE               160 (to 320)
        310     LOAD_CONST                      27: <CODE> isgetsetdescriptor
        312     LOAD_CONST                      28: 'isgetsetdescriptor'
        314     MAKE_FUNCTION                   0
        316     STORE_NAME                      40: isgetsetdescriptor
        318     JUMP_FORWARD                    4 (to 328)
        320     LOAD_CONST                      29: <CODE> isgetsetdescriptor
        322     LOAD_CONST                      28: 'isgetsetdescriptor'
        324     MAKE_FUNCTION                   0
        326     STORE_NAME                      40: isgetsetdescriptor
        328     LOAD_CONST                      30: <CODE> isfunction
        330     LOAD_CONST                      31: 'isfunction'
        332     MAKE_FUNCTION                   0
        334     STORE_NAME                      41: isfunction
        336     LOAD_CONST                      32: <CODE> _has_code_flag
        338     LOAD_CONST                      33: '_has_code_flag'
        340     MAKE_FUNCTION                   0
        342     STORE_NAME                      42: _has_code_flag
        344     LOAD_CONST                      34: <CODE> isgeneratorfunction
        346     LOAD_CONST                      35: 'isgeneratorfunction'
        348     MAKE_FUNCTION                   0
        350     STORE_NAME                      43: isgeneratorfunction
        352     LOAD_CONST                      36: <CODE> iscoroutinefunction
        354     LOAD_CONST                      37: 'iscoroutinefunction'
        356     MAKE_FUNCTION                   0
        358     STORE_NAME                      44: iscoroutinefunction
        360     LOAD_CONST                      38: <CODE> isasyncgenfunction
        362     LOAD_CONST                      39: 'isasyncgenfunction'
        364     MAKE_FUNCTION                   0
        366     STORE_NAME                      45: isasyncgenfunction
        368     LOAD_CONST                      40: <CODE> isasyncgen
        370     LOAD_CONST                      41: 'isasyncgen'
        372     MAKE_FUNCTION                   0
        374     STORE_NAME                      46: isasyncgen
        376     LOAD_CONST                      42: <CODE> isgenerator
        378     LOAD_CONST                      43: 'isgenerator'
        380     MAKE_FUNCTION                   0
        382     STORE_NAME                      47: isgenerator
        384     LOAD_CONST                      44: <CODE> iscoroutine
        386     LOAD_CONST                      45: 'iscoroutine'
        388     MAKE_FUNCTION                   0
        390     STORE_NAME                      48: iscoroutine
        392     LOAD_CONST                      46: <CODE> isawaitable
        394     LOAD_CONST                      47: 'isawaitable'
        396     MAKE_FUNCTION                   0
        398     STORE_NAME                      49: isawaitable
        400     LOAD_CONST                      48: <CODE> istraceback
        402     LOAD_CONST                      49: 'istraceback'
        404     MAKE_FUNCTION                   0
        406     STORE_NAME                      50: istraceback
        408     LOAD_CONST                      50: <CODE> isframe
        410     LOAD_CONST                      51: 'isframe'
        412     MAKE_FUNCTION                   0
        414     STORE_NAME                      51: isframe
        416     LOAD_CONST                      52: <CODE> iscode
        418     LOAD_CONST                      53: 'iscode'
        420     MAKE_FUNCTION                   0
        422     STORE_NAME                      52: iscode
        424     LOAD_CONST                      54: <CODE> isbuiltin
        426     LOAD_CONST                      55: 'isbuiltin'
        428     MAKE_FUNCTION                   0
        430     STORE_NAME                      53: isbuiltin
        432     LOAD_CONST                      56: <CODE> isroutine
        434     LOAD_CONST                      57: 'isroutine'
        436     MAKE_FUNCTION                   0
        438     STORE_NAME                      54: isroutine
        440     LOAD_CONST                      58: <CODE> isabstract
        442     LOAD_CONST                      59: 'isabstract'
        444     MAKE_FUNCTION                   0
        446     STORE_NAME                      55: isabstract
        448     LOAD_CONST                      251: (None,)
        450     LOAD_CONST                      60: <CODE> getmembers
        452     LOAD_CONST                      61: 'getmembers'
        454     MAKE_FUNCTION                   1
        456     STORE_NAME                      56: getmembers
        458     LOAD_NAME                       23: namedtuple
        460     LOAD_CONST                      62: 'Attribute'
        462     LOAD_CONST                      63: 'name kind defining_class object'
        464     CALL_FUNCTION                   2
        466     STORE_NAME                      57: Attribute
        468     LOAD_CONST                      64: <CODE> classify_class_attrs
        470     LOAD_CONST                      65: 'classify_class_attrs'
        472     MAKE_FUNCTION                   0
        474     STORE_NAME                      58: classify_class_attrs
        476     LOAD_CONST                      66: <CODE> getmro
        478     LOAD_CONST                      67: 'getmro'
        480     MAKE_FUNCTION                   0
        482     STORE_NAME                      59: getmro
        484     LOAD_CONST                      3: None
        486     LOAD_CONST                      68: ('stop',)
        488     BUILD_CONST_KEY_MAP             1
        490     LOAD_CONST                      69: <CODE> unwrap
        492     LOAD_CONST                      70: 'unwrap'
        494     MAKE_FUNCTION                   2
        496     STORE_NAME                      60: unwrap
        498     LOAD_CONST                      71: <CODE> indentsize
        500     LOAD_CONST                      72: 'indentsize'
        502     MAKE_FUNCTION                   0
        504     STORE_NAME                      61: indentsize
        506     LOAD_CONST                      73: <CODE> _findclass
        508     LOAD_CONST                      74: '_findclass'
        510     MAKE_FUNCTION                   0
        512     STORE_NAME                      62: _findclass
        514     LOAD_CONST                      75: <CODE> _finddoc
        516     LOAD_CONST                      76: '_finddoc'
        518     MAKE_FUNCTION                   0
        520     STORE_NAME                      63: _finddoc
        522     LOAD_CONST                      77: <CODE> getdoc
        524     LOAD_CONST                      78: 'getdoc'
        526     MAKE_FUNCTION                   0
        528     STORE_NAME                      64: getdoc
        530     LOAD_CONST                      79: <CODE> cleandoc
        532     LOAD_CONST                      80: 'cleandoc'
        534     MAKE_FUNCTION                   0
        536     STORE_NAME                      65: cleandoc
        538     LOAD_CONST                      81: <CODE> getfile
        540     LOAD_CONST                      82: 'getfile'
        542     MAKE_FUNCTION                   0
        544     STORE_NAME                      66: getfile
        546     LOAD_CONST                      83: <CODE> getmodulename
        548     LOAD_CONST                      84: 'getmodulename'
        550     MAKE_FUNCTION                   0
        552     STORE_NAME                      67: getmodulename
        554     LOAD_CONST                      85: <CODE> getsourcefile
        556     LOAD_CONST                      86: 'getsourcefile'
        558     MAKE_FUNCTION                   0
        560     STORE_NAME                      68: getsourcefile
        562     LOAD_CONST                      251: (None,)
        564     LOAD_CONST                      87: <CODE> getabsfile
        566     LOAD_CONST                      88: 'getabsfile'
        568     MAKE_FUNCTION                   1
        570     STORE_NAME                      69: getabsfile
        572     BUILD_MAP                       0
        574     STORE_NAME                      70: modulesbyfile
        576     BUILD_MAP                       0
        578     STORE_NAME                      71: _filesbymodname
        580     LOAD_CONST                      251: (None,)
        582     LOAD_CONST                      89: <CODE> getmodule
        584     LOAD_CONST                      90: 'getmodule'
        586     MAKE_FUNCTION                   1
        588     STORE_NAME                      72: getmodule
        590     LOAD_BUILD_CLASS                
        592     LOAD_CONST                      91: <CODE> ClassFoundException
        594     LOAD_CONST                      92: 'ClassFoundException'
        596     MAKE_FUNCTION                   0
        598     LOAD_CONST                      92: 'ClassFoundException'
        600     LOAD_NAME                       73: Exception
        602     CALL_FUNCTION                   3
        604     STORE_NAME                      74: ClassFoundException
        606     LOAD_BUILD_CLASS                
        608     LOAD_CONST                      93: <CODE> _ClassFinder
        610     LOAD_CONST                      94: '_ClassFinder'
        612     MAKE_FUNCTION                   0
        614     LOAD_CONST                      94: '_ClassFinder'
        616     LOAD_NAME                       3: ast
        618     LOAD_ATTR                       75: NodeVisitor
        620     CALL_FUNCTION                   3
        622     STORE_NAME                      76: _ClassFinder
        624     LOAD_CONST                      95: <CODE> findsource
        626     LOAD_CONST                      96: 'findsource'
        628     MAKE_FUNCTION                   0
        630     STORE_NAME                      77: findsource
        632     LOAD_CONST                      97: <CODE> getcomments
        634     LOAD_CONST                      98: 'getcomments'
        636     MAKE_FUNCTION                   0
        638     STORE_NAME                      78: getcomments
        640     LOAD_BUILD_CLASS                
        642     LOAD_CONST                      99: <CODE> EndOfBlock
        644     LOAD_CONST                      100: 'EndOfBlock'
        646     MAKE_FUNCTION                   0
        648     LOAD_CONST                      100: 'EndOfBlock'
        650     LOAD_NAME                       73: Exception
        652     CALL_FUNCTION                   3
        654     STORE_NAME                      79: EndOfBlock
        656     LOAD_BUILD_CLASS                
        658     LOAD_CONST                      101: <CODE> BlockFinder
        660     LOAD_CONST                      102: 'BlockFinder'
        662     MAKE_FUNCTION                   0
        664     LOAD_CONST                      102: 'BlockFinder'
        666     CALL_FUNCTION                   2
        668     STORE_NAME                      80: BlockFinder
        670     LOAD_CONST                      103: <CODE> getblock
        672     LOAD_CONST                      104: 'getblock'
        674     MAKE_FUNCTION                   0
        676     STORE_NAME                      81: getblock
        678     LOAD_CONST                      105: <CODE> getsourcelines
        680     LOAD_CONST                      106: 'getsourcelines'
        682     MAKE_FUNCTION                   0
        684     STORE_NAME                      82: getsourcelines
        686     LOAD_CONST                      107: <CODE> getsource
        688     LOAD_CONST                      108: 'getsource'
        690     MAKE_FUNCTION                   0
        692     STORE_NAME                      83: getsource
        694     LOAD_CONST                      109: <CODE> walktree
        696     LOAD_CONST                      110: 'walktree'
        698     MAKE_FUNCTION                   0
        700     STORE_NAME                      84: walktree
        702     LOAD_CONST                      252: (False,)
        704     LOAD_CONST                      111: <CODE> getclasstree
        706     LOAD_CONST                      112: 'getclasstree'
        708     MAKE_FUNCTION                   1
        710     STORE_NAME                      85: getclasstree
        712     LOAD_NAME                       23: namedtuple
        714     LOAD_CONST                      113: 'Arguments'
        716     LOAD_CONST                      114: 'args, varargs, varkw'
        718     CALL_FUNCTION                   2
        720     STORE_NAME                      86: Arguments
        722     LOAD_CONST                      115: <CODE> getargs
        724     LOAD_CONST                      116: 'getargs'
        726     MAKE_FUNCTION                   0
        728     STORE_NAME                      87: getargs
        730     LOAD_NAME                       23: namedtuple
        732     LOAD_CONST                      117: 'ArgSpec'
        734     LOAD_CONST                      118: 'args varargs keywords defaults'
        736     CALL_FUNCTION                   2
        738     STORE_NAME                      88: ArgSpec
        740     LOAD_CONST                      119: <CODE> getargspec
        742     LOAD_CONST                      120: 'getargspec'
        744     MAKE_FUNCTION                   0
        746     STORE_NAME                      89: getargspec
        748     LOAD_NAME                       23: namedtuple
        750     LOAD_CONST                      121: 'FullArgSpec'
        752     LOAD_CONST                      122: 'args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations'
        754     CALL_FUNCTION                   2
        756     STORE_NAME                      90: FullArgSpec
        758     LOAD_CONST                      123: <CODE> getfullargspec
        760     LOAD_CONST                      124: 'getfullargspec'
        762     MAKE_FUNCTION                   0
        764     STORE_NAME                      91: getfullargspec
        766     LOAD_NAME                       23: namedtuple
        768     LOAD_CONST                      125: 'ArgInfo'
        770     LOAD_CONST                      126: 'args varargs keywords locals'
        772     CALL_FUNCTION                   2
        774     STORE_NAME                      92: ArgInfo
        776     LOAD_CONST                      127: <CODE> getargvalues
        778     LOAD_CONST                      128: 'getargvalues'
        780     MAKE_FUNCTION                   0
        782     STORE_NAME                      93: getargvalues
        784     LOAD_CONST                      251: (None,)
        786     LOAD_CONST                      129: <CODE> formatannotation
        788     LOAD_CONST                      130: 'formatannotation'
        790     MAKE_FUNCTION                   1
        792     STORE_NAME                      94: formatannotation
        794     LOAD_CONST                      131: <CODE> formatannotationrelativeto
        796     LOAD_CONST                      132: 'formatannotationrelativeto'
        798     MAKE_FUNCTION                   0
        800     STORE_NAME                      95: formatannotationrelativeto
        802     LOAD_CONST                      3: None
        804     LOAD_CONST                      3: None
        806     LOAD_CONST                      3: None
        808     LOAD_CONST                      133: ()
        810     BUILD_MAP                       0
        812     BUILD_MAP                       0
        814     LOAD_NAME                       96: str
        816     LOAD_CONST                      134: <CODE> <lambda>
        818     LOAD_CONST                      135: '<lambda>'
        820     MAKE_FUNCTION                   0
        822     LOAD_CONST                      136: <CODE> <lambda>
        824     LOAD_CONST                      135: '<lambda>'
        826     MAKE_FUNCTION                   0
        828     LOAD_CONST                      137: <CODE> <lambda>
        830     LOAD_CONST                      135: '<lambda>'
        832     MAKE_FUNCTION                   0
        834     LOAD_CONST                      138: <CODE> <lambda>
        836     LOAD_CONST                      135: '<lambda>'
        838     MAKE_FUNCTION                   0
        840     LOAD_NAME                       94: formatannotation
        842     BUILD_TUPLE                     12
        844     LOAD_CONST                      139: <CODE> formatargspec
        846     LOAD_CONST                      140: 'formatargspec'
        848     MAKE_FUNCTION                   1
        850     STORE_NAME                      97: formatargspec
        852     LOAD_NAME                       96: str
        854     LOAD_CONST                      141: <CODE> <lambda>
        856     LOAD_CONST                      135: '<lambda>'
        858     MAKE_FUNCTION                   0
        860     LOAD_CONST                      142: <CODE> <lambda>
        862     LOAD_CONST                      135: '<lambda>'
        864     MAKE_FUNCTION                   0
        866     LOAD_CONST                      143: <CODE> <lambda>
        868     LOAD_CONST                      135: '<lambda>'
        870     MAKE_FUNCTION                   0
        872     BUILD_TUPLE                     4
        874     LOAD_CONST                      144: <CODE> formatargvalues
        876     LOAD_CONST                      145: 'formatargvalues'
        878     MAKE_FUNCTION                   1
        880     STORE_NAME                      98: formatargvalues
        882     LOAD_CONST                      146: <CODE> _missing_arguments
        884     LOAD_CONST                      147: '_missing_arguments'
        886     MAKE_FUNCTION                   0
        888     STORE_NAME                      99: _missing_arguments
        890     LOAD_CONST                      148: <CODE> _too_many
        892     LOAD_CONST                      149: '_too_many'
        894     MAKE_FUNCTION                   0
        896     STORE_NAME                      100: _too_many
        898     LOAD_CONST                      150: <CODE> getcallargs
        900     LOAD_CONST                      151: 'getcallargs'
        902     MAKE_FUNCTION                   0
        904     STORE_NAME                      101: getcallargs
        906     LOAD_NAME                       23: namedtuple
        908     LOAD_CONST                      152: 'ClosureVars'
        910     LOAD_CONST                      153: 'nonlocals globals builtins unbound'
        912     CALL_FUNCTION                   2
        914     STORE_NAME                      102: ClosureVars
        916     LOAD_CONST                      154: <CODE> getclosurevars
        918     LOAD_CONST                      155: 'getclosurevars'
        920     MAKE_FUNCTION                   0
        922     STORE_NAME                      103: getclosurevars
        924     LOAD_NAME                       23: namedtuple
        926     LOAD_CONST                      156: 'Traceback'
        928     LOAD_CONST                      157: 'filename lineno function code_context index'
        930     CALL_FUNCTION                   2
        932     STORE_NAME                      104: Traceback
        934     LOAD_CONST                      253: (1,)
        936     LOAD_CONST                      159: <CODE> getframeinfo
        938     LOAD_CONST                      160: 'getframeinfo'
        940     MAKE_FUNCTION                   1
        942     STORE_NAME                      105: getframeinfo
        944     LOAD_CONST                      161: <CODE> getlineno
        946     LOAD_CONST                      162: 'getlineno'
        948     MAKE_FUNCTION                   0
        950     STORE_NAME                      106: getlineno
        952     LOAD_NAME                       23: namedtuple
        954     LOAD_CONST                      163: 'FrameInfo'
        956     LOAD_CONST                      164: ('frame',)
        958     LOAD_NAME                       104: Traceback
        960     LOAD_ATTR                       107: _fields
        962     BINARY_ADD                      
        964     CALL_FUNCTION                   2
        966     STORE_NAME                      108: FrameInfo
        968     LOAD_CONST                      253: (1,)
        970     LOAD_CONST                      165: <CODE> getouterframes
        972     LOAD_CONST                      166: 'getouterframes'
        974     MAKE_FUNCTION                   1
        976     STORE_NAME                      109: getouterframes
        978     LOAD_CONST                      253: (1,)
        980     LOAD_CONST                      167: <CODE> getinnerframes
        982     LOAD_CONST                      168: 'getinnerframes'
        984     MAKE_FUNCTION                   1
        986     STORE_NAME                      110: getinnerframes
        988     LOAD_CONST                      169: <CODE> currentframe
        990     LOAD_CONST                      170: 'currentframe'
        992     MAKE_FUNCTION                   0
        994     STORE_NAME                      111: currentframe
        996     LOAD_CONST                      253: (1,)
        998     LOAD_CONST                      171: <CODE> stack
        1000    LOAD_CONST                      172: 'stack'
        1002    MAKE_FUNCTION                   1
        1004    STORE_NAME                      112: stack
        1006    LOAD_CONST                      253: (1,)
        1008    LOAD_CONST                      173: <CODE> trace
        1010    LOAD_CONST                      174: 'trace'
        1012    MAKE_FUNCTION                   1
        1014    STORE_NAME                      113: trace
        1016    LOAD_NAME                       114: object
        1018    CALL_FUNCTION                   0
        1020    STORE_NAME                      115: _sentinel
        1022    LOAD_CONST                      175: <CODE> _static_getmro
        1024    LOAD_CONST                      176: '_static_getmro'
        1026    MAKE_FUNCTION                   0
        1028    STORE_NAME                      116: _static_getmro
        1030    LOAD_CONST                      177: <CODE> _check_instance
        1032    LOAD_CONST                      178: '_check_instance'
        1034    MAKE_FUNCTION                   0
        1036    STORE_NAME                      117: _check_instance
        1038    LOAD_CONST                      179: <CODE> _check_class
        1040    LOAD_CONST                      180: '_check_class'
        1042    MAKE_FUNCTION                   0
        1044    STORE_NAME                      118: _check_class
        1046    LOAD_CONST                      181: <CODE> _is_type
        1048    LOAD_CONST                      182: '_is_type'
        1050    MAKE_FUNCTION                   0
        1052    STORE_NAME                      119: _is_type
        1054    LOAD_CONST                      183: <CODE> _shadowed_dict
        1056    LOAD_CONST                      184: '_shadowed_dict'
        1058    MAKE_FUNCTION                   0
        1060    STORE_NAME                      120: _shadowed_dict
        1062    LOAD_NAME                       115: _sentinel
        1064    BUILD_TUPLE                     1
        1066    LOAD_CONST                      185: <CODE> getattr_static
        1068    LOAD_CONST                      186: 'getattr_static'
        1070    MAKE_FUNCTION                   1
        1072    STORE_NAME                      121: getattr_static
        1074    LOAD_CONST                      187: 'GEN_CREATED'
        1076    STORE_NAME                      122: GEN_CREATED
        1078    LOAD_CONST                      188: 'GEN_RUNNING'
        1080    STORE_NAME                      123: GEN_RUNNING
        1082    LOAD_CONST                      189: 'GEN_SUSPENDED'
        1084    STORE_NAME                      124: GEN_SUSPENDED
        1086    LOAD_CONST                      190: 'GEN_CLOSED'
        1088    STORE_NAME                      125: GEN_CLOSED
        1090    LOAD_CONST                      191: <CODE> getgeneratorstate
        1092    LOAD_CONST                      192: 'getgeneratorstate'
        1094    MAKE_FUNCTION                   0
        1096    STORE_NAME                      126: getgeneratorstate
        1098    LOAD_CONST                      193: <CODE> getgeneratorlocals
        1100    LOAD_CONST                      194: 'getgeneratorlocals'
        1102    MAKE_FUNCTION                   0
        1104    STORE_NAME                      127: getgeneratorlocals
        1106    LOAD_CONST                      195: 'CORO_CREATED'
        1108    STORE_NAME                      128: CORO_CREATED
        1110    LOAD_CONST                      196: 'CORO_RUNNING'
        1112    STORE_NAME                      129: CORO_RUNNING
        1114    LOAD_CONST                      197: 'CORO_SUSPENDED'
        1116    STORE_NAME                      130: CORO_SUSPENDED
        1118    LOAD_CONST                      198: 'CORO_CLOSED'
        1120    STORE_NAME                      131: CORO_CLOSED
        1122    LOAD_CONST                      199: <CODE> getcoroutinestate
        1124    LOAD_CONST                      200: 'getcoroutinestate'
        1126    MAKE_FUNCTION                   0
        1128    STORE_NAME                      132: getcoroutinestate
        1130    LOAD_CONST                      201: <CODE> getcoroutinelocals
        1132    LOAD_CONST                      202: 'getcoroutinelocals'
        1134    MAKE_FUNCTION                   0
        1136    STORE_NAME                      133: getcoroutinelocals
        1138    LOAD_NAME                       134: type
        1140    LOAD_NAME                       134: type
        1142    LOAD_ATTR                       135: __call__
        1144    CALL_FUNCTION                   1
        1146    STORE_NAME                      136: _WrapperDescriptor
        1148    LOAD_NAME                       134: type
        1150    LOAD_NAME                       137: all
        1152    LOAD_ATTR                       135: __call__
        1154    CALL_FUNCTION                   1
        1156    STORE_NAME                      138: _MethodWrapper
        1158    LOAD_NAME                       134: type
        1160    LOAD_NAME                       139: int
        1162    LOAD_ATTR                       140: __dict__
        1164    LOAD_CONST                      203: 'from_bytes'
        1166    BINARY_SUBSCR                   
        1168    CALL_FUNCTION                   1
        1170    STORE_NAME                      141: _ClassMethodWrapper
        1172    LOAD_NAME                       136: _WrapperDescriptor
        1174    LOAD_NAME                       138: _MethodWrapper
        1176    LOAD_NAME                       141: _ClassMethodWrapper
        1178    LOAD_NAME                       17: types
        1180    LOAD_ATTR                       142: BuiltinFunctionType
        1182    BUILD_TUPLE                     4
        1184    STORE_NAME                      143: _NonUserDefinedCallables
        1186    LOAD_CONST                      204: <CODE> _signature_get_user_defined_method
        1188    LOAD_CONST                      205: '_signature_get_user_defined_method'
        1190    MAKE_FUNCTION                   0
        1192    STORE_NAME                      144: _signature_get_user_defined_method
        1194    LOAD_CONST                      254: ((),)
        1196    LOAD_CONST                      206: <CODE> _signature_get_partial
        1198    LOAD_CONST                      207: '_signature_get_partial'
        1200    MAKE_FUNCTION                   1
        1202    STORE_NAME                      145: _signature_get_partial
        1204    LOAD_CONST                      208: <CODE> _signature_bound_method
        1206    LOAD_CONST                      209: '_signature_bound_method'
        1208    MAKE_FUNCTION                   0
        1210    STORE_NAME                      146: _signature_bound_method
        1212    LOAD_CONST                      210: <CODE> _signature_is_builtin
        1214    LOAD_CONST                      211: '_signature_is_builtin'
        1216    MAKE_FUNCTION                   0
        1218    STORE_NAME                      147: _signature_is_builtin
        1220    LOAD_CONST                      212: <CODE> _signature_is_functionlike
        1222    LOAD_CONST                      213: '_signature_is_functionlike'
        1224    MAKE_FUNCTION                   0
        1226    STORE_NAME                      148: _signature_is_functionlike
        1228    LOAD_CONST                      214: <CODE> _signature_get_bound_param
        1230    LOAD_CONST                      215: '_signature_get_bound_param'
        1232    MAKE_FUNCTION                   0
        1234    STORE_NAME                      149: _signature_get_bound_param
        1236    LOAD_CONST                      216: <CODE> _signature_strip_non_python_syntax
        1238    LOAD_CONST                      217: '_signature_strip_non_python_syntax'
        1240    MAKE_FUNCTION                   0
        1242    STORE_NAME                      150: _signature_strip_non_python_syntax
        1244    LOAD_CONST                      255: (True,)
        1246    LOAD_CONST                      219: <CODE> _signature_fromstr
        1248    LOAD_CONST                      220: '_signature_fromstr'
        1250    MAKE_FUNCTION                   1
        1252    STORE_NAME                      151: _signature_fromstr
        1254    LOAD_CONST                      255: (True,)
        1256    LOAD_CONST                      221: <CODE> _signature_from_builtin
        1258    LOAD_CONST                      222: '_signature_from_builtin'
        1260    MAKE_FUNCTION                   1
        1262    STORE_NAME                      152: _signature_from_builtin
        1264    NOP                             
        1266    NOP                             
        1268    LOAD_CONST                      256: (True, None, None, False)
        1272    LOAD_CONST                      223: <CODE> _signature_from_function
        1274    LOAD_CONST                      224: '_signature_from_function'
        1276    MAKE_FUNCTION                   1
        1278    STORE_NAME                      153: _signature_from_function
        1280    LOAD_CONST                      218: True
        1282    LOAD_CONST                      218: True
        1284    LOAD_CONST                      3: None
        1286    LOAD_CONST                      3: None
        1288    LOAD_CONST                      8: False
        1290    LOAD_CONST                      225: ('follow_wrapper_chains', 'skip_bound_arg', 'globals', 'locals', 'eval_str')
        1292    BUILD_CONST_KEY_MAP             5
        1294    LOAD_CONST                      226: <CODE> _signature_from_callable
        1296    LOAD_CONST                      227: '_signature_from_callable'
        1298    MAKE_FUNCTION                   2
        1300    STORE_NAME                      154: _signature_from_callable
        1302    LOAD_BUILD_CLASS                
        1304    LOAD_CONST                      228: <CODE> _void
        1306    LOAD_CONST                      229: '_void'
        1308    MAKE_FUNCTION                   0
        1310    LOAD_CONST                      229: '_void'
        1312    CALL_FUNCTION                   2
        1314    STORE_NAME                      155: _void
        1316    LOAD_BUILD_CLASS                
        1318    LOAD_CONST                      230: <CODE> _empty
        1320    LOAD_CONST                      231: '_empty'
        1322    MAKE_FUNCTION                   0
        1324    LOAD_CONST                      231: '_empty'
        1326    CALL_FUNCTION                   2
        1328    STORE_NAME                      156: _empty
        1330    LOAD_BUILD_CLASS                
        1332    LOAD_CONST                      232: <CODE> _ParameterKind
        1334    LOAD_CONST                      233: '_ParameterKind'
        1336    MAKE_FUNCTION                   0
        1338    LOAD_CONST                      233: '_ParameterKind'
        1340    LOAD_NAME                       7: enum
        1342    LOAD_ATTR                       157: IntEnum
        1344    CALL_FUNCTION                   3
        1346    STORE_NAME                      158: _ParameterKind
        1348    LOAD_NAME                       158: _ParameterKind
        1350    LOAD_ATTR                       159: POSITIONAL_ONLY
        1352    STORE_NAME                      160: _POSITIONAL_ONLY
        1354    LOAD_NAME                       158: _ParameterKind
        1356    LOAD_ATTR                       161: POSITIONAL_OR_KEYWORD
        1358    STORE_NAME                      162: _POSITIONAL_OR_KEYWORD
        1360    LOAD_NAME                       158: _ParameterKind
        1362    LOAD_ATTR                       163: VAR_POSITIONAL
        1364    STORE_NAME                      164: _VAR_POSITIONAL
        1366    LOAD_NAME                       158: _ParameterKind
        1368    LOAD_ATTR                       165: KEYWORD_ONLY
        1370    STORE_NAME                      166: _KEYWORD_ONLY
        1372    LOAD_NAME                       158: _ParameterKind
        1374    LOAD_ATTR                       167: VAR_KEYWORD
        1376    STORE_NAME                      168: _VAR_KEYWORD
        1378    LOAD_NAME                       160: _POSITIONAL_ONLY
        1380    LOAD_CONST                      234: 'positional-only'
        1382    LOAD_NAME                       162: _POSITIONAL_OR_KEYWORD
        1384    LOAD_CONST                      235: 'positional or keyword'
        1386    LOAD_NAME                       164: _VAR_POSITIONAL
        1388    LOAD_CONST                      236: 'variadic positional'
        1390    LOAD_NAME                       166: _KEYWORD_ONLY
        1392    LOAD_CONST                      237: 'keyword-only'
        1394    LOAD_NAME                       168: _VAR_KEYWORD
        1396    LOAD_CONST                      238: 'variadic keyword'
        1398    BUILD_MAP                       5
        1400    STORE_NAME                      169: _PARAM_NAME_MAPPING
        1402    LOAD_BUILD_CLASS                
        1404    LOAD_CONST                      239: <CODE> Parameter
        1406    LOAD_CONST                      240: 'Parameter'
        1408    MAKE_FUNCTION                   0
        1410    LOAD_CONST                      240: 'Parameter'
        1412    CALL_FUNCTION                   2
        1414    STORE_NAME                      170: Parameter
        1416    LOAD_BUILD_CLASS                
        1418    LOAD_CONST                      241: <CODE> BoundArguments
        1420    LOAD_CONST                      242: 'BoundArguments'
        1422    MAKE_FUNCTION                   0
        1424    LOAD_CONST                      242: 'BoundArguments'
        1426    CALL_FUNCTION                   2
        1428    STORE_NAME                      171: BoundArguments
        1430    LOAD_BUILD_CLASS                
        1432    LOAD_CONST                      243: <CODE> Signature
        1434    LOAD_CONST                      244: 'Signature'
        1436    MAKE_FUNCTION                   0
        1438    LOAD_CONST                      244: 'Signature'
        1440    CALL_FUNCTION                   2
        1442    STORE_NAME                      172: Signature
        1444    LOAD_CONST                      218: True
        1446    LOAD_CONST                      3: None
        1448    LOAD_CONST                      3: None
        1450    LOAD_CONST                      8: False
        1452    LOAD_CONST                      245: ('follow_wrapped', 'globals', 'locals', 'eval_str')
        1454    BUILD_CONST_KEY_MAP             4
        1456    LOAD_CONST                      246: <CODE> signature
        1458    LOAD_CONST                      247: 'signature'
        1460    MAKE_FUNCTION                   2
        1462    STORE_NAME                      173: signature
        1464    LOAD_CONST                      248: <CODE> _main
        1466    LOAD_CONST                      249: '_main'
        1468    MAKE_FUNCTION                   0
        1470    STORE_NAME                      174: _main
        1472    LOAD_NAME                       175: __name__
        1474    LOAD_CONST                      250: '__main__'
        1476    COMPARE_OP                      2 (==)
        1478    POP_JUMP_IF_FALSE               746 (to 1492)
        1482    LOAD_NAME                       174: _main
        1484    CALL_FUNCTION                   0
        1486    POP_TOP                         
        1488    LOAD_CONST                      3: None
        1490    RETURN_VALUE                    
        1492    LOAD_CONST                      3: None
        1494    RETURN_VALUE                    
