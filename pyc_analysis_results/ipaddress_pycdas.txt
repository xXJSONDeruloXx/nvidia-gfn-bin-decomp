ipaddress.pyc (Python 3.10)
[Code]
    File Name: ipaddress.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 5
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        '__version__'
        'functools'
        'IPV4LENGTH'
        'IPV6LENGTH'
        'ValueError'
        'AddressValueError'
        'NetmaskValueError'
        'ip_address'
        'ip_network'
        'ip_interface'
        'v4_int_to_packed'
        'v6_int_to_packed'
        '_split_optional_netmask'
        '_find_address_range'
        '_count_righthand_zero_bits'
        'summarize_address_range'
        '_collapse_addresses_internal'
        'collapse_addresses'
        'get_mixed_type_key'
        '_IPAddressBase'
        '_address_fmt_re'
        'total_ordering'
        '_BaseAddress'
        '_BaseNetwork'
        '_BaseV4'
        'IPv4Address'
        'IPv4Interface'
        'IPv4Network'
        '_IPv4Constants'
        '_constants'
        '_BaseV6'
        'IPv6Address'
        'IPv6Interface'
        'IPv6Network'
        '_IPv6Constants'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        'A fast, lightweight IPv4/IPv6 manipulation library in Python.\n\nThis library is used to create/poke/manipulate IPv4 and IPv6 addresses\nand networks.\n\n'
        '1.0'
        0
        None
        32
        128
        [Code]
            File Name: ipaddress.py
            Object Name: AddressValueError
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'AddressValueError'
                'A Value Error related to the address.'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'AddressValueError'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A Value Error related to the address.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'AddressValueError'
        [Code]
            File Name: ipaddress.py
            Object Name: NetmaskValueError
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'NetmaskValueError'
                'A Value Error related to the netmask.'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'NetmaskValueError'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A Value Error related to the netmask.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: None
                14      RETURN_VALUE                    
        'NetmaskValueError'
        [Code]
            File Name: ipaddress.py
            Object Name: ip_address
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'IPv4Address'
                'AddressValueError'
                'NetmaskValueError'
                'IPv6Address'
                'ValueError'
            [Var Names]
                'address'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Take an IP string/int and return an object of the correct type.\n\n    Args:\n        address: A string or integer, the IP address.  Either IPv4 or\n          IPv6 addresses may be supplied; integers less than 2**32 will\n          be considered to be IPv4 by default.\n\n    Returns:\n        An IPv4Address or IPv6Address object.\n\n    Raises:\n        ValueError: if the *address* passed isn't either a v4 or a v6\n          address\n\n    "
                ' does not appear to be an IPv4 or IPv6 address'
            [Disassembly]
                0       SETUP_FINALLY                   5 (to 12)
                2       LOAD_GLOBAL                     0: IPv4Address
                4       LOAD_FAST                       0: address
                6       CALL_FUNCTION                   1
                8       POP_BLOCK                       
                10      RETURN_VALUE                    
                12      DUP_TOP                         
                14      LOAD_GLOBAL                     1: AddressValueError
                16      LOAD_GLOBAL                     2: NetmaskValueError
                18      BUILD_TUPLE                     2
                20      JUMP_IF_NOT_EXC_MATCH           16 (to 32)
                22      POP_TOP                         
                24      POP_TOP                         
                26      POP_TOP                         
                28      POP_EXCEPT                      
                30      JUMP_FORWARD                    1 (to 34)
                32      RERAISE                         0
                34      SETUP_FINALLY                   5 (to 46)
                36      LOAD_GLOBAL                     3: IPv6Address
                38      LOAD_FAST                       0: address
                40      CALL_FUNCTION                   1
                42      POP_BLOCK                       
                44      RETURN_VALUE                    
                46      DUP_TOP                         
                48      LOAD_GLOBAL                     1: AddressValueError
                50      LOAD_GLOBAL                     2: NetmaskValueError
                52      BUILD_TUPLE                     2
                54      JUMP_IF_NOT_EXC_MATCH           33 (to 66)
                56      POP_TOP                         
                58      POP_TOP                         
                60      POP_TOP                         
                62      POP_EXCEPT                      
                64      JUMP_FORWARD                    1 (to 68)
                66      RERAISE                         0
                68      LOAD_GLOBAL                     4: ValueError
                70      LOAD_FAST                       0: address
                72      FORMAT_VALUE                    2 (FVC_REPR)
                74      LOAD_CONST                      1: ' does not appear to be an IPv4 or IPv6 address'
                76      BUILD_STRING                    2
                78      CALL_FUNCTION                   1
                80      RAISE_VARARGS                   1
        'ip_address'
        True
        [Code]
            File Name: ipaddress.py
            Object Name: ip_network
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'IPv4Network'
                'AddressValueError'
                'NetmaskValueError'
                'IPv6Network'
                'ValueError'
            [Var Names]
                'address'
                'strict'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Take an IP string/int and return an object of the correct type.\n\n    Args:\n        address: A string or integer, the IP network.  Either IPv4 or\n          IPv6 networks may be supplied; integers less than 2**32 will\n          be considered to be IPv4 by default.\n\n    Returns:\n        An IPv4Network or IPv6Network object.\n\n    Raises:\n        ValueError: if the string passed isn't either a v4 or a v6\n          address. Or if the network has host bits set.\n\n    "
                ' does not appear to be an IPv4 or IPv6 network'
            [Disassembly]
                0       SETUP_FINALLY                   6 (to 14)
                2       LOAD_GLOBAL                     0: IPv4Network
                4       LOAD_FAST                       0: address
                6       LOAD_FAST                       1: strict
                8       CALL_FUNCTION                   2
                10      POP_BLOCK                       
                12      RETURN_VALUE                    
                14      DUP_TOP                         
                16      LOAD_GLOBAL                     1: AddressValueError
                18      LOAD_GLOBAL                     2: NetmaskValueError
                20      BUILD_TUPLE                     2
                22      JUMP_IF_NOT_EXC_MATCH           17 (to 34)
                24      POP_TOP                         
                26      POP_TOP                         
                28      POP_TOP                         
                30      POP_EXCEPT                      
                32      JUMP_FORWARD                    1 (to 36)
                34      RERAISE                         0
                36      SETUP_FINALLY                   6 (to 50)
                38      LOAD_GLOBAL                     3: IPv6Network
                40      LOAD_FAST                       0: address
                42      LOAD_FAST                       1: strict
                44      CALL_FUNCTION                   2
                46      POP_BLOCK                       
                48      RETURN_VALUE                    
                50      DUP_TOP                         
                52      LOAD_GLOBAL                     1: AddressValueError
                54      LOAD_GLOBAL                     2: NetmaskValueError
                56      BUILD_TUPLE                     2
                58      JUMP_IF_NOT_EXC_MATCH           35 (to 70)
                60      POP_TOP                         
                62      POP_TOP                         
                64      POP_TOP                         
                66      POP_EXCEPT                      
                68      JUMP_FORWARD                    1 (to 72)
                70      RERAISE                         0
                72      LOAD_GLOBAL                     4: ValueError
                74      LOAD_FAST                       0: address
                76      FORMAT_VALUE                    2 (FVC_REPR)
                78      LOAD_CONST                      1: ' does not appear to be an IPv4 or IPv6 network'
                80      BUILD_STRING                    2
                82      CALL_FUNCTION                   1
                84      RAISE_VARARGS                   1
        'ip_network'
        [Code]
            File Name: ipaddress.py
            Object Name: ip_interface
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'IPv4Interface'
                'AddressValueError'
                'NetmaskValueError'
                'IPv6Interface'
                'ValueError'
            [Var Names]
                'address'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Take an IP string/int and return an object of the correct type.\n\n    Args:\n        address: A string or integer, the IP address.  Either IPv4 or\n          IPv6 addresses may be supplied; integers less than 2**32 will\n          be considered to be IPv4 by default.\n\n    Returns:\n        An IPv4Interface or IPv6Interface object.\n\n    Raises:\n        ValueError: if the string passed isn't either a v4 or a v6\n          address.\n\n    Notes:\n        The IPv?Interface classes describe an Address on a particular\n        Network, so they're basically a combination of both the Address\n        and Network classes.\n\n    "
                ' does not appear to be an IPv4 or IPv6 interface'
            [Disassembly]
                0       SETUP_FINALLY                   5 (to 12)
                2       LOAD_GLOBAL                     0: IPv4Interface
                4       LOAD_FAST                       0: address
                6       CALL_FUNCTION                   1
                8       POP_BLOCK                       
                10      RETURN_VALUE                    
                12      DUP_TOP                         
                14      LOAD_GLOBAL                     1: AddressValueError
                16      LOAD_GLOBAL                     2: NetmaskValueError
                18      BUILD_TUPLE                     2
                20      JUMP_IF_NOT_EXC_MATCH           16 (to 32)
                22      POP_TOP                         
                24      POP_TOP                         
                26      POP_TOP                         
                28      POP_EXCEPT                      
                30      JUMP_FORWARD                    1 (to 34)
                32      RERAISE                         0
                34      SETUP_FINALLY                   5 (to 46)
                36      LOAD_GLOBAL                     3: IPv6Interface
                38      LOAD_FAST                       0: address
                40      CALL_FUNCTION                   1
                42      POP_BLOCK                       
                44      RETURN_VALUE                    
                46      DUP_TOP                         
                48      LOAD_GLOBAL                     1: AddressValueError
                50      LOAD_GLOBAL                     2: NetmaskValueError
                52      BUILD_TUPLE                     2
                54      JUMP_IF_NOT_EXC_MATCH           33 (to 66)
                56      POP_TOP                         
                58      POP_TOP                         
                60      POP_TOP                         
                62      POP_EXCEPT                      
                64      JUMP_FORWARD                    1 (to 68)
                66      RERAISE                         0
                68      LOAD_GLOBAL                     4: ValueError
                70      LOAD_FAST                       0: address
                72      FORMAT_VALUE                    2 (FVC_REPR)
                74      LOAD_CONST                      1: ' does not appear to be an IPv4 or IPv6 interface'
                76      BUILD_STRING                    2
                78      CALL_FUNCTION                   1
                80      RAISE_VARARGS                   1
        'ip_interface'
        [Code]
            File Name: ipaddress.py
            Object Name: v4_int_to_packed
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'to_bytes'
                'OverflowError'
                'ValueError'
            [Var Names]
                'address'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Represent an address as 4 packed bytes in network (big-endian) order.\n\n    Args:\n        address: An integer representation of an IPv4 IP address.\n\n    Returns:\n        The integer address packed as 4 bytes in network (big-endian) order.\n\n    Raises:\n        ValueError: If the integer is negative or too large to be an\n          IPv4 IP address.\n\n    '
                4
                'big'
                'Address negative or too large for IPv4'
            [Disassembly]
                0       SETUP_FINALLY                   7 (to 16)
                2       LOAD_FAST                       0: address
                4       LOAD_METHOD                     0: to_bytes
                6       LOAD_CONST                      1: 4
                8       LOAD_CONST                      2: 'big'
                10      CALL_METHOD                     2
                12      POP_BLOCK                       
                14      RETURN_VALUE                    
                16      DUP_TOP                         
                18      LOAD_GLOBAL                     1: OverflowError
                20      JUMP_IF_NOT_EXC_MATCH           18 (to 36)
                22      POP_TOP                         
                24      POP_TOP                         
                26      POP_TOP                         
                28      LOAD_GLOBAL                     2: ValueError
                30      LOAD_CONST                      3: 'Address negative or too large for IPv4'
                32      CALL_FUNCTION                   1
                34      RAISE_VARARGS                   1
                36      RERAISE                         0
        'v4_int_to_packed'
        [Code]
            File Name: ipaddress.py
            Object Name: v6_int_to_packed
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'to_bytes'
                'OverflowError'
                'ValueError'
            [Var Names]
                'address'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Represent an address as 16 packed bytes in network (big-endian) order.\n\n    Args:\n        address: An integer representation of an IPv6 IP address.\n\n    Returns:\n        The integer address packed as 16 bytes in network (big-endian) order.\n\n    '
                16
                'big'
                'Address negative or too large for IPv6'
            [Disassembly]
                0       SETUP_FINALLY                   7 (to 16)
                2       LOAD_FAST                       0: address
                4       LOAD_METHOD                     0: to_bytes
                6       LOAD_CONST                      1: 16
                8       LOAD_CONST                      2: 'big'
                10      CALL_METHOD                     2
                12      POP_BLOCK                       
                14      RETURN_VALUE                    
                16      DUP_TOP                         
                18      LOAD_GLOBAL                     1: OverflowError
                20      JUMP_IF_NOT_EXC_MATCH           18 (to 36)
                22      POP_TOP                         
                24      POP_TOP                         
                26      POP_TOP                         
                28      LOAD_GLOBAL                     2: ValueError
                30      LOAD_CONST                      3: 'Address negative or too large for IPv6'
                32      CALL_FUNCTION                   1
                34      RAISE_VARARGS                   1
                36      RERAISE                         0
        'v6_int_to_packed'
        [Code]
            File Name: ipaddress.py
            Object Name: _split_optional_netmask
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'str'
                'split'
                'len'
                'AddressValueError'
            [Var Names]
                'address'
                'addr'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Helper to split the netmask and raise AddressValueError if needed'
                '/'
                2
                "Only one '/' permitted in "
            [Disassembly]
                0       LOAD_GLOBAL                     0: str
                2       LOAD_FAST                       0: address
                4       CALL_FUNCTION                   1
                6       LOAD_METHOD                     1: split
                8       LOAD_CONST                      1: '/'
                10      CALL_METHOD                     1
                12      STORE_FAST                      1: addr
                14      LOAD_GLOBAL                     2: len
                16      LOAD_FAST                       1: addr
                18      CALL_FUNCTION                   1
                20      LOAD_CONST                      2: 2
                22      COMPARE_OP                      4 (>)
                24      POP_JUMP_IF_FALSE               20 (to 40)
                26      LOAD_GLOBAL                     3: AddressValueError
                28      LOAD_CONST                      3: "Only one '/' permitted in "
                30      LOAD_FAST                       0: address
                32      FORMAT_VALUE                    2 (FVC_REPR)
                34      BUILD_STRING                    2
                36      CALL_FUNCTION                   1
                38      RAISE_VARARGS                   1
                40      LOAD_FAST                       1: addr
                42      RETURN_VALUE                    
        '_split_optional_netmask'
        [Code]
            File Name: ipaddress.py
            Object Name: _find_address_range
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 4
            Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
            [Names]
                'iter'
                'next'
                '_ip'
            [Var Names]
                'addresses'
                'it'
                'first'
                'last'
                'ip'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Find a sequence of sorted deduplicated IPv#Address.\n\n    Args:\n        addresses: a list of IPv#Address objects.\n\n    Yields:\n        A tuple containing the first and last IP addresses in the sequence.\n\n    '
                1
                None
            [Disassembly]
                0       GEN_START                       0
                2       LOAD_GLOBAL                     0: iter
                4       LOAD_FAST                       0: addresses
                6       CALL_FUNCTION                   1
                8       STORE_FAST                      1: it
                10      LOAD_GLOBAL                     1: next
                12      LOAD_FAST                       1: it
                14      CALL_FUNCTION                   1
                16      DUP_TOP                         
                18      STORE_FAST                      2: first
                20      STORE_FAST                      3: last
                22      LOAD_FAST                       1: it
                24      GET_ITER                        
                26      FOR_ITER                        19 (to 66)
                28      STORE_FAST                      4: ip
                30      LOAD_FAST                       4: ip
                32      LOAD_ATTR                       2: _ip
                34      LOAD_FAST                       3: last
                36      LOAD_ATTR                       2: _ip
                38      LOAD_CONST                      1: 1
                40      BINARY_ADD                      
                42      COMPARE_OP                      3 (!=)
                44      POP_JUMP_IF_FALSE               30 (to 60)
                46      LOAD_FAST                       2: first
                48      LOAD_FAST                       3: last
                50      BUILD_TUPLE                     2
                52      YIELD_VALUE                     
                54      POP_TOP                         
                56      LOAD_FAST                       4: ip
                58      STORE_FAST                      2: first
                60      LOAD_FAST                       4: ip
                62      STORE_FAST                      3: last
                64      JUMP_ABSOLUTE                   13 (to 26)
                66      LOAD_FAST                       2: first
                68      LOAD_FAST                       3: last
                70      BUILD_TUPLE                     2
                72      YIELD_VALUE                     
                74      POP_TOP                         
                76      LOAD_CONST                      2: None
                78      RETURN_VALUE                    
        '_find_address_range'
        [Code]
            File Name: ipaddress.py
            Object Name: _count_righthand_zero_bits
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'min'
                'bit_length'
            [Var Names]
                'number'
                'bits'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Count the number of zero bits on the right hand side.\n\n    Args:\n        number: an integer.\n        bits: maximum number of bits to count.\n\n    Returns:\n        The number of zero bits on the right hand side of the number.\n\n    '
                0
                1
            [Disassembly]
                0       LOAD_FAST                       0: number
                2       LOAD_CONST                      1: 0
                4       COMPARE_OP                      2 (==)
                6       POP_JUMP_IF_FALSE               6 (to 12)
                8       LOAD_FAST                       1: bits
                10      RETURN_VALUE                    
                12      LOAD_GLOBAL                     0: min
                14      LOAD_FAST                       1: bits
                16      LOAD_FAST                       0: number
                18      UNARY_INVERT                    
                20      LOAD_FAST                       0: number
                22      LOAD_CONST                      2: 1
                24      BINARY_SUBTRACT                 
                26      BINARY_AND                      
                28      LOAD_METHOD                     1: bit_length
                30      CALL_METHOD                     0
                32      CALL_FUNCTION                   2
                34      RETURN_VALUE                    
        '_count_righthand_zero_bits'
        [Code]
            File Name: ipaddress.py
            Object Name: summarize_address_range
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 8
            Stack Size: 4
            Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
            [Names]
                'isinstance'
                '_BaseAddress'
                'TypeError'
                'version'
                'ValueError'
                'IPv4Network'
                'IPv6Network'
                '_max_prefixlen'
                '_ip'
                'min'
                '_count_righthand_zero_bits'
                'bit_length'
                '_ALL_ONES'
            [Var Names]
                'first'
                'last'
                'ip'
                'ip_bits'
                'first_int'
                'last_int'
                'nbits'
                'net'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Summarize a network range given the first and last IP addresses.\n\n    Example:\n        >>> list(summarize_address_range(IPv4Address('192.0.2.0'),\n        ...                              IPv4Address('192.0.2.130')))\n        ...                                #doctest: +NORMALIZE_WHITESPACE\n        [IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/31'),\n         IPv4Network('192.0.2.130/32')]\n\n    Args:\n        first: the first IPv4Address or IPv6Address in the range.\n        last: the last IPv4Address or IPv6Address in the range.\n\n    Returns:\n        An iterator of the summarized IPv(4|6) network objects.\n\n    Raise:\n        TypeError:\n            If the first and last objects are not IP addresses.\n            If the first and last objects are not the same version.\n        ValueError:\n            If the last object is not greater than the first.\n            If the version of the first address is not 4 or 6.\n\n    "
                'first and last must be IP addresses, not networks'
                '%s and %s are not of the same version'
                'last IP address must be greater than first'
                4
                6
                'unknown IP version'
                1
                None
            [Disassembly]
                0       GEN_START                       0
                2       LOAD_GLOBAL                     0: isinstance
                4       LOAD_FAST                       0: first
                6       LOAD_GLOBAL                     1: _BaseAddress
                8       CALL_FUNCTION                   2
                10      POP_JUMP_IF_FALSE               11 (to 22)
                12      LOAD_GLOBAL                     0: isinstance
                14      LOAD_FAST                       1: last
                16      LOAD_GLOBAL                     1: _BaseAddress
                18      CALL_FUNCTION                   2
                20      POP_JUMP_IF_TRUE                15 (to 30)
                22      LOAD_GLOBAL                     2: TypeError
                24      LOAD_CONST                      1: 'first and last must be IP addresses, not networks'
                26      CALL_FUNCTION                   1
                28      RAISE_VARARGS                   1
                30      LOAD_FAST                       0: first
                32      LOAD_ATTR                       3: version
                34      LOAD_FAST                       1: last
                36      LOAD_ATTR                       3: version
                38      COMPARE_OP                      3 (!=)
                40      POP_JUMP_IF_FALSE               29 (to 58)
                42      LOAD_GLOBAL                     2: TypeError
                44      LOAD_CONST                      2: '%s and %s are not of the same version'
                46      LOAD_FAST                       0: first
                48      LOAD_FAST                       1: last
                50      BUILD_TUPLE                     2
                52      BINARY_MODULO                   
                54      CALL_FUNCTION                   1
                56      RAISE_VARARGS                   1
                58      LOAD_FAST                       0: first
                60      LOAD_FAST                       1: last
                62      COMPARE_OP                      4 (>)
                64      POP_JUMP_IF_FALSE               37 (to 74)
                66      LOAD_GLOBAL                     4: ValueError
                68      LOAD_CONST                      3: 'last IP address must be greater than first'
                70      CALL_FUNCTION                   1
                72      RAISE_VARARGS                   1
                74      LOAD_FAST                       0: first
                76      LOAD_ATTR                       3: version
                78      LOAD_CONST                      4: 4
                80      COMPARE_OP                      2 (==)
                82      POP_JUMP_IF_FALSE               45 (to 90)
                84      LOAD_GLOBAL                     5: IPv4Network
                86      STORE_FAST                      2: ip
                88      JUMP_FORWARD                    12 (to 114)
                90      LOAD_FAST                       0: first
                92      LOAD_ATTR                       3: version
                94      LOAD_CONST                      5: 6
                96      COMPARE_OP                      2 (==)
                98      POP_JUMP_IF_FALSE               53 (to 106)
                100     LOAD_GLOBAL                     6: IPv6Network
                102     STORE_FAST                      2: ip
                104     JUMP_FORWARD                    4 (to 114)
                106     LOAD_GLOBAL                     4: ValueError
                108     LOAD_CONST                      6: 'unknown IP version'
                110     CALL_FUNCTION                   1
                112     RAISE_VARARGS                   1
                114     LOAD_FAST                       0: first
                116     LOAD_ATTR                       7: _max_prefixlen
                118     STORE_FAST                      3: ip_bits
                120     LOAD_FAST                       0: first
                122     LOAD_ATTR                       8: _ip
                124     STORE_FAST                      4: first_int
                126     LOAD_FAST                       1: last
                128     LOAD_ATTR                       8: _ip
                130     STORE_FAST                      5: last_int
                132     LOAD_FAST                       4: first_int
                134     LOAD_FAST                       5: last_int
                136     COMPARE_OP                      1 (<=)
                138     POP_JUMP_IF_FALSE               118 (to 236)
                140     LOAD_GLOBAL                     9: min
                142     LOAD_GLOBAL                     10: _count_righthand_zero_bits
                144     LOAD_FAST                       4: first_int
                146     LOAD_FAST                       3: ip_bits
                148     CALL_FUNCTION                   2
                150     LOAD_FAST                       5: last_int
                152     LOAD_FAST                       4: first_int
                154     BINARY_SUBTRACT                 
                156     LOAD_CONST                      7: 1
                158     BINARY_ADD                      
                160     LOAD_METHOD                     11: bit_length
                162     CALL_METHOD                     0
                164     LOAD_CONST                      7: 1
                166     BINARY_SUBTRACT                 
                168     CALL_FUNCTION                   2
                170     STORE_FAST                      6: nbits
                172     LOAD_FAST                       2: ip
                174     LOAD_FAST                       4: first_int
                176     LOAD_FAST                       3: ip_bits
                178     LOAD_FAST                       6: nbits
                180     BINARY_SUBTRACT                 
                182     BUILD_TUPLE                     2
                184     CALL_FUNCTION                   1
                186     STORE_FAST                      7: net
                188     LOAD_FAST                       7: net
                190     YIELD_VALUE                     
                192     POP_TOP                         
                194     LOAD_FAST                       4: first_int
                196     LOAD_CONST                      7: 1
                198     LOAD_FAST                       6: nbits
                200     BINARY_LSHIFT                   
                202     INPLACE_ADD                     
                204     STORE_FAST                      4: first_int
                206     LOAD_FAST                       4: first_int
                208     LOAD_CONST                      7: 1
                210     BINARY_SUBTRACT                 
                212     LOAD_FAST                       2: ip
                214     LOAD_ATTR                       12: _ALL_ONES
                216     COMPARE_OP                      2 (==)
                218     POP_JUMP_IF_FALSE               112 (to 224)
                220     LOAD_CONST                      8: None
                222     RETURN_VALUE                    
                224     LOAD_FAST                       4: first_int
                226     LOAD_FAST                       5: last_int
                228     COMPARE_OP                      1 (<=)
                230     POP_JUMP_IF_TRUE                70 (to 140)
                232     LOAD_CONST                      8: None
                234     RETURN_VALUE                    
                236     LOAD_CONST                      8: None
                238     RETURN_VALUE                    
        'summarize_address_range'
        [Code]
            File Name: ipaddress.py
            Object Name: _collapse_addresses_internal
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 7
            Stack Size: 3
            Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
            [Names]
                'list'
                'pop'
                'supernet'
                'get'
                'append'
                'sorted'
                'values'
                'broadcast_address'
            [Var Names]
                'addresses'
                'to_merge'
                'subnets'
                'net'
                'supernet'
                'existing'
                'last'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Loops through the addresses, collapsing concurrent netblocks.\n\n    Example:\n\n        ip1 = IPv4Network('192.0.2.0/26')\n        ip2 = IPv4Network('192.0.2.64/26')\n        ip3 = IPv4Network('192.0.2.128/26')\n        ip4 = IPv4Network('192.0.2.192/26')\n\n        _collapse_addresses_internal([ip1, ip2, ip3, ip4]) ->\n          [IPv4Network('192.0.2.0/24')]\n\n        This shouldn't be called directly; it is called via\n          collapse_addresses([]).\n\n    Args:\n        addresses: A list of IPv4Network's or IPv6Network's\n\n    Returns:\n        A list of IPv4Network's or IPv6Network's depending on what we were\n        passed.\n\n    "
                None
            [Disassembly]
                0       GEN_START                       0
                2       LOAD_GLOBAL                     0: list
                4       LOAD_FAST                       0: addresses
                6       CALL_FUNCTION                   1
                8       STORE_FAST                      1: to_merge
                10      BUILD_MAP                       0
                12      STORE_FAST                      2: subnets
                14      LOAD_FAST                       1: to_merge
                16      POP_JUMP_IF_FALSE               45 (to 90)
                18      LOAD_FAST                       1: to_merge
                20      LOAD_METHOD                     1: pop
                22      CALL_METHOD                     0
                24      STORE_FAST                      3: net
                26      LOAD_FAST                       3: net
                28      LOAD_METHOD                     2: supernet
                30      CALL_METHOD                     0
                32      STORE_FAST                      4: supernet
                34      LOAD_FAST                       2: subnets
                36      LOAD_METHOD                     3: get
                38      LOAD_FAST                       4: supernet
                40      CALL_METHOD                     1
                42      STORE_FAST                      5: existing
                44      LOAD_FAST                       5: existing
                46      LOAD_CONST                      1: None
                48      IS_OP                           0 (is)
                50      POP_JUMP_IF_FALSE               31 (to 62)
                52      LOAD_FAST                       3: net
                54      LOAD_FAST                       2: subnets
                56      LOAD_FAST                       4: supernet
                58      STORE_SUBSCR                    
                60      JUMP_FORWARD                    12 (to 86)
                62      LOAD_FAST                       5: existing
                64      LOAD_FAST                       3: net
                66      COMPARE_OP                      3 (!=)
                68      POP_JUMP_IF_FALSE               43 (to 86)
                70      LOAD_FAST                       2: subnets
                72      LOAD_FAST                       4: supernet
                74      DELETE_SUBSCR                   
                76      LOAD_FAST                       1: to_merge
                78      LOAD_METHOD                     4: append
                80      LOAD_FAST                       4: supernet
                82      CALL_METHOD                     1
                84      POP_TOP                         
                86      LOAD_FAST                       1: to_merge
                88      POP_JUMP_IF_TRUE                9 (to 18)
                90      LOAD_CONST                      1: None
                92      STORE_FAST                      6: last
                94      LOAD_GLOBAL                     5: sorted
                96      LOAD_FAST                       2: subnets
                98      LOAD_METHOD                     6: values
                100     CALL_METHOD                     0
                102     CALL_FUNCTION                   1
                104     GET_ITER                        
                106     FOR_ITER                        18 (to 144)
                108     STORE_FAST                      3: net
                110     LOAD_FAST                       6: last
                112     LOAD_CONST                      1: None
                114     IS_OP                           1 (is not)
                116     POP_JUMP_IF_FALSE               66 (to 132)
                118     LOAD_FAST                       6: last
                120     LOAD_ATTR                       7: broadcast_address
                122     LOAD_FAST                       3: net
                124     LOAD_ATTR                       7: broadcast_address
                126     COMPARE_OP                      5 (>=)
                128     POP_JUMP_IF_FALSE               66 (to 132)
                130     JUMP_ABSOLUTE                   53 (to 106)
                132     LOAD_FAST                       3: net
                134     YIELD_VALUE                     
                136     POP_TOP                         
                138     LOAD_FAST                       3: net
                140     STORE_FAST                      6: last
                142     JUMP_ABSOLUTE                   53 (to 106)
                144     LOAD_CONST                      1: None
                146     RETURN_VALUE                    
        '_collapse_addresses_internal'
        [Code]
            File Name: ipaddress.py
            Object Name: collapse_addresses
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 7
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                '_BaseAddress'
                '_version'
                'TypeError'
                'append'
                '_prefixlen'
                '_max_prefixlen'
                'ip'
                'AttributeError'
                'network_address'
                'sorted'
                'set'
                '_find_address_range'
                'extend'
                'summarize_address_range'
                '_collapse_addresses_internal'
            [Var Names]
                'addresses'
                'addrs'
                'ips'
                'nets'
                'ip'
                'first'
                'last'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Collapse a list of IP objects.\n\n    Example:\n        collapse_addresses([IPv4Network('192.0.2.0/25'),\n                            IPv4Network('192.0.2.128/25')]) ->\n                           [IPv4Network('192.0.2.0/24')]\n\n    Args:\n        addresses: An iterator of IPv4Network or IPv6Network objects.\n\n    Returns:\n        An iterator of the collapsed IPv(4|6)Network objects.\n\n    Raises:\n        TypeError: If passed a list of mixed version objects.\n\n    "
                -1
                '%s and %s are not of the same version'
            [Disassembly]
                0       BUILD_LIST                      0
                2       STORE_FAST                      1: addrs
                4       BUILD_LIST                      0
                6       STORE_FAST                      2: ips
                8       BUILD_LIST                      0
                10      STORE_FAST                      3: nets
                12      LOAD_FAST                       0: addresses
                14      GET_ITER                        
                16      FOR_ITER                        108 (to 234)
                18      STORE_FAST                      4: ip
                20      LOAD_GLOBAL                     0: isinstance
                22      LOAD_FAST                       4: ip
                24      LOAD_GLOBAL                     1: _BaseAddress
                26      CALL_FUNCTION                   2
                28      POP_JUMP_IF_FALSE               41 (to 82)
                30      LOAD_FAST                       2: ips
                32      POP_JUMP_IF_FALSE               35 (to 70)
                34      LOAD_FAST                       2: ips
                36      LOAD_CONST                      1: -1
                38      BINARY_SUBSCR                   
                40      LOAD_ATTR                       2: _version
                42      LOAD_FAST                       4: ip
                44      LOAD_ATTR                       2: _version
                46      COMPARE_OP                      3 (!=)
                48      POP_JUMP_IF_FALSE               35 (to 70)
                50      LOAD_GLOBAL                     3: TypeError
                52      LOAD_CONST                      2: '%s and %s are not of the same version'
                54      LOAD_FAST                       4: ip
                56      LOAD_FAST                       2: ips
                58      LOAD_CONST                      1: -1
                60      BINARY_SUBSCR                   
                62      BUILD_TUPLE                     2
                64      BINARY_MODULO                   
                66      CALL_FUNCTION                   1
                68      RAISE_VARARGS                   1
                70      LOAD_FAST                       2: ips
                72      LOAD_METHOD                     4: append
                74      LOAD_FAST                       4: ip
                76      CALL_METHOD                     1
                78      POP_TOP                         
                80      JUMP_ABSOLUTE                   8 (to 16)
                82      LOAD_FAST                       4: ip
                84      LOAD_ATTR                       5: _prefixlen
                86      LOAD_FAST                       4: ip
                88      LOAD_ATTR                       6: _max_prefixlen
                90      COMPARE_OP                      2 (==)
                92      POP_JUMP_IF_FALSE               91 (to 182)
                94      LOAD_FAST                       2: ips
                96      POP_JUMP_IF_FALSE               67 (to 134)
                98      LOAD_FAST                       2: ips
                100     LOAD_CONST                      1: -1
                102     BINARY_SUBSCR                   
                104     LOAD_ATTR                       2: _version
                106     LOAD_FAST                       4: ip
                108     LOAD_ATTR                       2: _version
                110     COMPARE_OP                      3 (!=)
                112     POP_JUMP_IF_FALSE               67 (to 134)
                114     LOAD_GLOBAL                     3: TypeError
                116     LOAD_CONST                      2: '%s and %s are not of the same version'
                118     LOAD_FAST                       4: ip
                120     LOAD_FAST                       2: ips
                122     LOAD_CONST                      1: -1
                124     BINARY_SUBSCR                   
                126     BUILD_TUPLE                     2
                128     BINARY_MODULO                   
                130     CALL_FUNCTION                   1
                132     RAISE_VARARGS                   1
                134     SETUP_FINALLY                   8 (to 152)
                136     LOAD_FAST                       2: ips
                138     LOAD_METHOD                     4: append
                140     LOAD_FAST                       4: ip
                142     LOAD_ATTR                       7: ip
                144     CALL_METHOD                     1
                146     POP_TOP                         
                148     POP_BLOCK                       
                150     JUMP_ABSOLUTE                   8 (to 16)
                152     DUP_TOP                         
                154     LOAD_GLOBAL                     8: AttributeError
                156     JUMP_IF_NOT_EXC_MATCH           90 (to 180)
                158     POP_TOP                         
                160     POP_TOP                         
                162     POP_TOP                         
                164     LOAD_FAST                       2: ips
                166     LOAD_METHOD                     4: append
                168     LOAD_FAST                       4: ip
                170     LOAD_ATTR                       9: network_address
                172     CALL_METHOD                     1
                174     POP_TOP                         
                176     POP_EXCEPT                      
                178     JUMP_ABSOLUTE                   8 (to 16)
                180     RERAISE                         0
                182     LOAD_FAST                       3: nets
                184     POP_JUMP_IF_FALSE               111 (to 222)
                186     LOAD_FAST                       3: nets
                188     LOAD_CONST                      1: -1
                190     BINARY_SUBSCR                   
                192     LOAD_ATTR                       2: _version
                194     LOAD_FAST                       4: ip
                196     LOAD_ATTR                       2: _version
                198     COMPARE_OP                      3 (!=)
                200     POP_JUMP_IF_FALSE               111 (to 222)
                202     LOAD_GLOBAL                     3: TypeError
                204     LOAD_CONST                      2: '%s and %s are not of the same version'
                206     LOAD_FAST                       4: ip
                208     LOAD_FAST                       3: nets
                210     LOAD_CONST                      1: -1
                212     BINARY_SUBSCR                   
                214     BUILD_TUPLE                     2
                216     BINARY_MODULO                   
                218     CALL_FUNCTION                   1
                220     RAISE_VARARGS                   1
                222     LOAD_FAST                       3: nets
                224     LOAD_METHOD                     4: append
                226     LOAD_FAST                       4: ip
                228     CALL_METHOD                     1
                230     POP_TOP                         
                232     JUMP_ABSOLUTE                   8 (to 16)
                234     LOAD_GLOBAL                     10: sorted
                236     LOAD_GLOBAL                     11: set
                238     LOAD_FAST                       2: ips
                240     CALL_FUNCTION                   1
                242     CALL_FUNCTION                   1
                244     STORE_FAST                      2: ips
                246     LOAD_FAST                       2: ips
                248     POP_JUMP_IF_FALSE               142 (to 284)
                250     LOAD_GLOBAL                     12: _find_address_range
                252     LOAD_FAST                       2: ips
                254     CALL_FUNCTION                   1
                256     GET_ITER                        
                258     FOR_ITER                        12 (to 284)
                260     UNPACK_SEQUENCE                 2
                262     STORE_FAST                      5: first
                264     STORE_FAST                      6: last
                266     LOAD_FAST                       1: addrs
                268     LOAD_METHOD                     13: extend
                270     LOAD_GLOBAL                     14: summarize_address_range
                272     LOAD_FAST                       5: first
                274     LOAD_FAST                       6: last
                276     CALL_FUNCTION                   2
                278     CALL_METHOD                     1
                280     POP_TOP                         
                282     JUMP_ABSOLUTE                   129 (to 258)
                284     LOAD_GLOBAL                     15: _collapse_addresses_internal
                286     LOAD_FAST                       1: addrs
                288     LOAD_FAST                       3: nets
                290     BINARY_ADD                      
                292     CALL_FUNCTION                   1
                294     RETURN_VALUE                    
        'collapse_addresses'
        [Code]
            File Name: ipaddress.py
            Object Name: get_mixed_type_key
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isinstance'
                '_BaseNetwork'
                '_get_networks_key'
                '_BaseAddress'
                '_get_address_key'
                'NotImplemented'
            [Var Names]
                'obj'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Return a key suitable for sorting between networks and addresses.\n\n    Address and Network objects are not sortable by default; they're\n    fundamentally different so the expression\n\n        IPv4Address('192.0.2.0') <= IPv4Network('192.0.2.0/24')\n\n    doesn't make any sense.  There are some times however, where you may wish\n    to have ipaddress sort these for you anyway. If you need to do this, you\n    can use this function as the key= argument to sorted().\n\n    Args:\n      obj: either a Network or Address object.\n    Returns:\n      appropriate key.\n\n    "
            [Disassembly]
                0       LOAD_GLOBAL                     0: isinstance
                2       LOAD_FAST                       0: obj
                4       LOAD_GLOBAL                     1: _BaseNetwork
                6       CALL_FUNCTION                   2
                8       POP_JUMP_IF_FALSE               9 (to 18)
                10      LOAD_FAST                       0: obj
                12      LOAD_METHOD                     2: _get_networks_key
                14      CALL_METHOD                     0
                16      RETURN_VALUE                    
                18      LOAD_GLOBAL                     0: isinstance
                20      LOAD_FAST                       0: obj
                22      LOAD_GLOBAL                     3: _BaseAddress
                24      CALL_FUNCTION                   2
                26      POP_JUMP_IF_FALSE               18 (to 36)
                28      LOAD_FAST                       0: obj
                30      LOAD_METHOD                     4: _get_address_key
                32      CALL_METHOD                     0
                34      RETURN_VALUE                    
                36      LOAD_GLOBAL                     5: NotImplemented
                38      RETURN_VALUE                    
        'get_mixed_type_key'
        [Code]
            File Name: ipaddress.py
            Object Name: _IPAddressBase
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                'property'
                'exploded'
                'compressed'
                'reverse_pointer'
                'version'
                '_check_int_address'
                '_check_packed_address'
                'classmethod'
                '_ip_int_from_prefix'
                '_prefix_from_ip_int'
                '_report_invalid_netmask'
                '_prefix_from_prefix_string'
                '_prefix_from_ip_string'
                '_split_addr_prefix'
                '__reduce__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_IPAddressBase'
                'The mother class.'
                (
                )
                [Code]
                    File Name: ipaddress.py
                    Object Name: exploded
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_explode_shorthand_ip_string'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the longhand version of the IP address as a string.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _explode_shorthand_ip_string
                        4       CALL_METHOD                     0
                        6       RETURN_VALUE                    
                '_IPAddressBase.exploded'
                [Code]
                    File Name: ipaddress.py
                    Object Name: compressed
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'str'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the shorthand version of the IP address as a string.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: str
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                '_IPAddressBase.compressed'
                [Code]
                    File Name: ipaddress.py
                    Object Name: reverse_pointer
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_reverse_pointer'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'The name of the reverse DNS pointer for the IP address, e.g.:\n            >>> ipaddress.ip_address("127.0.0.1").reverse_pointer\n            \'1.0.0.127.in-addr.arpa\'\n            >>> ipaddress.ip_address("2001:db8::1").reverse_pointer\n            \'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa\'\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _reverse_pointer
                        4       CALL_METHOD                     0
                        6       RETURN_VALUE                    
                '_IPAddressBase.reverse_pointer'
                [Code]
                    File Name: ipaddress.py
                    Object Name: version
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        'NotImplementedError'
                    [Var Names]
                        'self'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%200s has no version specified'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%200s has no version specified'
                        2       LOAD_GLOBAL                     0: type
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   1
                        8       BUILD_TUPLE                     1
                        10      BINARY_MODULO                   
                        12      STORE_FAST                      1: msg
                        14      LOAD_GLOBAL                     1: NotImplementedError
                        16      LOAD_FAST                       1: msg
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                '_IPAddressBase.version'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _check_int_address
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'AddressValueError'
                        '_version'
                        '_ALL_ONES'
                        '_max_prefixlen'
                    [Var Names]
                        'self'
                        'address'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        '%d (< 0) is not permitted as an IPv%d address'
                        '%d (>= 2**%d) is not permitted as an IPv%d address'
                    [Disassembly]
                        0       LOAD_FAST                       1: address
                        2       LOAD_CONST                      1: 0
                        4       COMPARE_OP                      0 (<)
                        6       POP_JUMP_IF_FALSE               15 (to 30)
                        8       LOAD_CONST                      2: '%d (< 0) is not permitted as an IPv%d address'
                        10      STORE_FAST                      2: msg
                        12      LOAD_GLOBAL                     0: AddressValueError
                        14      LOAD_FAST                       2: msg
                        16      LOAD_FAST                       1: address
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       1: _version
                        22      BUILD_TUPLE                     2
                        24      BINARY_MODULO                   
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      LOAD_FAST                       1: address
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       2: _ALL_ONES
                        36      COMPARE_OP                      4 (>)
                        38      POP_JUMP_IF_FALSE               33 (to 66)
                        40      LOAD_CONST                      3: '%d (>= 2**%d) is not permitted as an IPv%d address'
                        42      STORE_FAST                      2: msg
                        44      LOAD_GLOBAL                     0: AddressValueError
                        46      LOAD_FAST                       2: msg
                        48      LOAD_FAST                       1: address
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       3: _max_prefixlen
                        54      LOAD_FAST                       0: self
                        56      LOAD_ATTR                       1: _version
                        58      BUILD_TUPLE                     3
                        60      BINARY_MODULO                   
                        62      CALL_FUNCTION                   1
                        64      RAISE_VARARGS                   1
                        66      LOAD_CONST                      0: None
                        68      RETURN_VALUE                    
                '_IPAddressBase._check_int_address'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _check_packed_address
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'len'
                        'AddressValueError'
                        '_version'
                    [Var Names]
                        'self'
                        'address'
                        'expected_len'
                        'address_len'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%r (len %d != %d) is not permitted as an IPv%d address'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: len
                        2       LOAD_FAST                       1: address
                        4       CALL_FUNCTION                   1
                        6       STORE_FAST                      3: address_len
                        8       LOAD_FAST                       3: address_len
                        10      LOAD_FAST                       2: expected_len
                        12      COMPARE_OP                      3 (!=)
                        14      POP_JUMP_IF_FALSE               21 (to 42)
                        16      LOAD_CONST                      1: '%r (len %d != %d) is not permitted as an IPv%d address'
                        18      STORE_FAST                      4: msg
                        20      LOAD_GLOBAL                     1: AddressValueError
                        22      LOAD_FAST                       4: msg
                        24      LOAD_FAST                       1: address
                        26      LOAD_FAST                       3: address_len
                        28      LOAD_FAST                       2: expected_len
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       2: _version
                        34      BUILD_TUPLE                     4
                        36      BINARY_MODULO                   
                        38      CALL_FUNCTION                   1
                        40      RAISE_VARARGS                   1
                        42      LOAD_CONST                      0: None
                        44      RETURN_VALUE                    
                '_IPAddressBase._check_packed_address'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _ip_int_from_prefix
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ALL_ONES'
                    [Var Names]
                        'cls'
                        'prefixlen'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Turn the prefix length into a bitwise netmask\n\n        Args:\n            prefixlen: An integer, the prefix length.\n\n        Returns:\n            An integer.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: cls
                        2       LOAD_ATTR                       0: _ALL_ONES
                        4       LOAD_FAST                       0: cls
                        6       LOAD_ATTR                       0: _ALL_ONES
                        8       LOAD_FAST                       1: prefixlen
                        10      BINARY_RSHIFT                   
                        12      BINARY_XOR                      
                        14      RETURN_VALUE                    
                '_IPAddressBase._ip_int_from_prefix'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _prefix_from_ip_int
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_count_righthand_zero_bits'
                        '_max_prefixlen'
                        'to_bytes'
                        'ValueError'
                    [Var Names]
                        'cls'
                        'ip_int'
                        'trailing_zeroes'
                        'prefixlen'
                        'leading_ones'
                        'all_ones'
                        'byteslen'
                        'details'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return prefix length from the bitwise netmask.\n\n        Args:\n            ip_int: An integer, the netmask in expanded bitwise format\n\n        Returns:\n            An integer, the prefix length.\n\n        Raises:\n            ValueError: If the input intermingles zeroes & ones\n        '
                        1
                        8
                        'big'
                        'Netmask pattern %r mixes zeroes & ones'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _count_righthand_zero_bits
                        2       LOAD_FAST                       1: ip_int
                        4       LOAD_FAST                       0: cls
                        6       LOAD_ATTR                       1: _max_prefixlen
                        8       CALL_FUNCTION                   2
                        10      STORE_FAST                      2: trailing_zeroes
                        12      LOAD_FAST                       0: cls
                        14      LOAD_ATTR                       1: _max_prefixlen
                        16      LOAD_FAST                       2: trailing_zeroes
                        18      BINARY_SUBTRACT                 
                        20      STORE_FAST                      3: prefixlen
                        22      LOAD_FAST                       1: ip_int
                        24      LOAD_FAST                       2: trailing_zeroes
                        26      BINARY_RSHIFT                   
                        28      STORE_FAST                      4: leading_ones
                        30      LOAD_CONST                      1: 1
                        32      LOAD_FAST                       3: prefixlen
                        34      BINARY_LSHIFT                   
                        36      LOAD_CONST                      1: 1
                        38      BINARY_SUBTRACT                 
                        40      STORE_FAST                      5: all_ones
                        42      LOAD_FAST                       4: leading_ones
                        44      LOAD_FAST                       5: all_ones
                        46      COMPARE_OP                      3 (!=)
                        48      POP_JUMP_IF_FALSE               44 (to 88)
                        50      LOAD_FAST                       0: cls
                        52      LOAD_ATTR                       1: _max_prefixlen
                        54      LOAD_CONST                      2: 8
                        56      BINARY_FLOOR_DIVIDE             
                        58      STORE_FAST                      6: byteslen
                        60      LOAD_FAST                       1: ip_int
                        62      LOAD_METHOD                     2: to_bytes
                        64      LOAD_FAST                       6: byteslen
                        66      LOAD_CONST                      3: 'big'
                        68      CALL_METHOD                     2
                        70      STORE_FAST                      7: details
                        72      LOAD_CONST                      4: 'Netmask pattern %r mixes zeroes & ones'
                        74      STORE_FAST                      8: msg
                        76      LOAD_GLOBAL                     3: ValueError
                        78      LOAD_FAST                       8: msg
                        80      LOAD_FAST                       7: details
                        82      BINARY_MODULO                   
                        84      CALL_FUNCTION                   1
                        86      RAISE_VARARGS                   1
                        88      LOAD_FAST                       3: prefixlen
                        90      RETURN_VALUE                    
                '_IPAddressBase._prefix_from_ip_int'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _report_invalid_netmask
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'NetmaskValueError'
                    [Var Names]
                        'cls'
                        'netmask_str'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%r is not a valid netmask'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%r is not a valid netmask'
                        2       LOAD_FAST                       1: netmask_str
                        4       BINARY_MODULO                   
                        6       STORE_FAST                      2: msg
                        8       LOAD_GLOBAL                     0: NetmaskValueError
                        10      LOAD_FAST                       2: msg
                        12      CALL_FUNCTION                   1
                        14      LOAD_CONST                      0: None
                        16      RAISE_VARARGS                   2
                '_IPAddressBase._report_invalid_netmask'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _prefix_from_prefix_string
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isascii'
                        'isdigit'
                        '_report_invalid_netmask'
                        'int'
                        'ValueError'
                        '_max_prefixlen'
                    [Var Names]
                        'cls'
                        'prefixlen_str'
                        'prefixlen'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return prefix length from a numeric string\n\n        Args:\n            prefixlen_str: The string to be converted\n\n        Returns:\n            An integer, the prefix length.\n\n        Raises:\n            NetmaskValueError: If the input is not a valid netmask\n        '
                        0
                    [Disassembly]
                        0       LOAD_FAST                       1: prefixlen_str
                        2       LOAD_METHOD                     0: isascii
                        4       CALL_METHOD                     0
                        6       POP_JUMP_IF_FALSE               8 (to 16)
                        8       LOAD_FAST                       1: prefixlen_str
                        10      LOAD_METHOD                     1: isdigit
                        12      CALL_METHOD                     0
                        14      POP_JUMP_IF_TRUE                13 (to 26)
                        16      LOAD_FAST                       0: cls
                        18      LOAD_METHOD                     2: _report_invalid_netmask
                        20      LOAD_FAST                       1: prefixlen_str
                        22      CALL_METHOD                     1
                        24      POP_TOP                         
                        26      SETUP_FINALLY                   6 (to 40)
                        28      LOAD_GLOBAL                     3: int
                        30      LOAD_FAST                       1: prefixlen_str
                        32      CALL_FUNCTION                   1
                        34      STORE_FAST                      2: prefixlen
                        36      POP_BLOCK                       
                        38      JUMP_FORWARD                    14 (to 68)
                        40      DUP_TOP                         
                        42      LOAD_GLOBAL                     4: ValueError
                        44      JUMP_IF_NOT_EXC_MATCH           33 (to 66)
                        46      POP_TOP                         
                        48      POP_TOP                         
                        50      POP_TOP                         
                        52      LOAD_FAST                       0: cls
                        54      LOAD_METHOD                     2: _report_invalid_netmask
                        56      LOAD_FAST                       1: prefixlen_str
                        58      CALL_METHOD                     1
                        60      POP_TOP                         
                        62      POP_EXCEPT                      
                        64      JUMP_FORWARD                    1 (to 68)
                        66      RERAISE                         0
                        68      LOAD_CONST                      1: 0
                        70      LOAD_FAST                       2: prefixlen
                        72      DUP_TOP                         
                        74      ROT_THREE                       
                        76      COMPARE_OP                      1 (<=)
                        78      POP_JUMP_IF_FALSE               45 (to 90)
                        80      LOAD_FAST                       0: cls
                        82      LOAD_ATTR                       5: _max_prefixlen
                        84      COMPARE_OP                      1 (<=)
                        86      POP_JUMP_IF_TRUE                51 (to 102)
                        88      JUMP_FORWARD                    1 (to 92)
                        90      POP_TOP                         
                        92      LOAD_FAST                       0: cls
                        94      LOAD_METHOD                     2: _report_invalid_netmask
                        96      LOAD_FAST                       1: prefixlen_str
                        98      CALL_METHOD                     1
                        100     POP_TOP                         
                        102     LOAD_FAST                       2: prefixlen
                        104     RETURN_VALUE                    
                '_IPAddressBase._prefix_from_prefix_string'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _prefix_from_ip_string
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ip_int_from_string'
                        'AddressValueError'
                        '_report_invalid_netmask'
                        '_prefix_from_ip_int'
                        'ValueError'
                        '_ALL_ONES'
                    [Var Names]
                        'cls'
                        'ip_str'
                        'ip_int'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Turn a netmask/hostmask string into a prefix length\n\n        Args:\n            ip_str: The netmask/hostmask to be converted\n\n        Returns:\n            An integer, the prefix length.\n\n        Raises:\n            NetmaskValueError: If the input is not a valid netmask/hostmask\n        '
                        None
                    [Disassembly]
                        0       SETUP_FINALLY                   7 (to 16)
                        2       LOAD_FAST                       0: cls
                        4       LOAD_METHOD                     0: _ip_int_from_string
                        6       LOAD_FAST                       1: ip_str
                        8       CALL_METHOD                     1
                        10      STORE_FAST                      2: ip_int
                        12      POP_BLOCK                       
                        14      JUMP_FORWARD                    14 (to 44)
                        16      DUP_TOP                         
                        18      LOAD_GLOBAL                     1: AddressValueError
                        20      JUMP_IF_NOT_EXC_MATCH           21 (to 42)
                        22      POP_TOP                         
                        24      POP_TOP                         
                        26      POP_TOP                         
                        28      LOAD_FAST                       0: cls
                        30      LOAD_METHOD                     2: _report_invalid_netmask
                        32      LOAD_FAST                       1: ip_str
                        34      CALL_METHOD                     1
                        36      POP_TOP                         
                        38      POP_EXCEPT                      
                        40      JUMP_FORWARD                    1 (to 44)
                        42      RERAISE                         0
                        44      SETUP_FINALLY                   6 (to 58)
                        46      LOAD_FAST                       0: cls
                        48      LOAD_METHOD                     3: _prefix_from_ip_int
                        50      LOAD_FAST                       2: ip_int
                        52      CALL_METHOD                     1
                        54      POP_BLOCK                       
                        56      RETURN_VALUE                    
                        58      DUP_TOP                         
                        60      LOAD_GLOBAL                     4: ValueError
                        62      JUMP_IF_NOT_EXC_MATCH           37 (to 74)
                        64      POP_TOP                         
                        66      POP_TOP                         
                        68      POP_TOP                         
                        70      POP_EXCEPT                      
                        72      JUMP_FORWARD                    1 (to 76)
                        74      RERAISE                         0
                        76      LOAD_FAST                       2: ip_int
                        78      LOAD_FAST                       0: cls
                        80      LOAD_ATTR                       5: _ALL_ONES
                        82      INPLACE_XOR                     
                        84      STORE_FAST                      2: ip_int
                        86      SETUP_FINALLY                   6 (to 100)
                        88      LOAD_FAST                       0: cls
                        90      LOAD_METHOD                     3: _prefix_from_ip_int
                        92      LOAD_FAST                       2: ip_int
                        94      CALL_METHOD                     1
                        96      POP_BLOCK                       
                        98      RETURN_VALUE                    
                        100     DUP_TOP                         
                        102     LOAD_GLOBAL                     4: ValueError
                        104     JUMP_IF_NOT_EXC_MATCH           64 (to 128)
                        106     POP_TOP                         
                        108     POP_TOP                         
                        110     POP_TOP                         
                        112     LOAD_FAST                       0: cls
                        114     LOAD_METHOD                     2: _report_invalid_netmask
                        116     LOAD_FAST                       1: ip_str
                        118     CALL_METHOD                     1
                        120     POP_TOP                         
                        122     POP_EXCEPT                      
                        124     LOAD_CONST                      1: None
                        126     RETURN_VALUE                    
                        128     RERAISE                         0
                '_IPAddressBase._prefix_from_ip_string'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _split_addr_prefix
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'bytes'
                        'int'
                        '_max_prefixlen'
                        'tuple'
                        '_split_optional_netmask'
                        'len'
                    [Var Names]
                        'cls'
                        'address'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Helper function to parse address of Network/Interface.\n\n        Arg:\n            address: Argument of Network/Interface.\n\n        Returns:\n            (addr, prefix) tuple.\n        '
                        1
                        0
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: address
                        4       LOAD_GLOBAL                     1: bytes
                        6       LOAD_GLOBAL                     2: int
                        8       BUILD_TUPLE                     2
                        10      CALL_FUNCTION                   2
                        12      POP_JUMP_IF_FALSE               12 (to 24)
                        14      LOAD_FAST                       1: address
                        16      LOAD_FAST                       0: cls
                        18      LOAD_ATTR                       3: _max_prefixlen
                        20      BUILD_TUPLE                     2
                        22      RETURN_VALUE                    
                        24      LOAD_GLOBAL                     0: isinstance
                        26      LOAD_FAST                       1: address
                        28      LOAD_GLOBAL                     4: tuple
                        30      CALL_FUNCTION                   2
                        32      POP_JUMP_IF_TRUE                21 (to 42)
                        34      LOAD_GLOBAL                     5: _split_optional_netmask
                        36      LOAD_FAST                       1: address
                        38      CALL_FUNCTION                   1
                        40      STORE_FAST                      1: address
                        42      LOAD_GLOBAL                     6: len
                        44      LOAD_FAST                       1: address
                        46      CALL_FUNCTION                   1
                        48      LOAD_CONST                      1: 1
                        50      COMPARE_OP                      4 (>)
                        52      POP_JUMP_IF_FALSE               29 (to 58)
                        54      LOAD_FAST                       1: address
                        56      RETURN_VALUE                    
                        58      LOAD_FAST                       1: address
                        60      LOAD_CONST                      2: 0
                        62      BINARY_SUBSCR                   
                        64      LOAD_FAST                       0: cls
                        66      LOAD_ATTR                       3: _max_prefixlen
                        68      BUILD_TUPLE                     2
                        70      RETURN_VALUE                    
                '_IPAddressBase._split_addr_prefix'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__class__'
                        'str'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __class__
                        4       LOAD_GLOBAL                     1: str
                        6       LOAD_FAST                       0: self
                        8       CALL_FUNCTION                   1
                        10      BUILD_TUPLE                     1
                        12      BUILD_TUPLE                     2
                        14      RETURN_VALUE                    
                '_IPAddressBase.__reduce__'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_IPAddressBase'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'The mother class.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_NAME                       5: property
                18      LOAD_CONST                      3: <CODE> exploded
                20      LOAD_CONST                      4: '_IPAddressBase.exploded'
                22      MAKE_FUNCTION                   0
                24      CALL_FUNCTION                   1
                26      STORE_NAME                      6: exploded
                28      LOAD_NAME                       5: property
                30      LOAD_CONST                      5: <CODE> compressed
                32      LOAD_CONST                      6: '_IPAddressBase.compressed'
                34      MAKE_FUNCTION                   0
                36      CALL_FUNCTION                   1
                38      STORE_NAME                      7: compressed
                40      LOAD_NAME                       5: property
                42      LOAD_CONST                      7: <CODE> reverse_pointer
                44      LOAD_CONST                      8: '_IPAddressBase.reverse_pointer'
                46      MAKE_FUNCTION                   0
                48      CALL_FUNCTION                   1
                50      STORE_NAME                      8: reverse_pointer
                52      LOAD_NAME                       5: property
                54      LOAD_CONST                      9: <CODE> version
                56      LOAD_CONST                      10: '_IPAddressBase.version'
                58      MAKE_FUNCTION                   0
                60      CALL_FUNCTION                   1
                62      STORE_NAME                      9: version
                64      LOAD_CONST                      11: <CODE> _check_int_address
                66      LOAD_CONST                      12: '_IPAddressBase._check_int_address'
                68      MAKE_FUNCTION                   0
                70      STORE_NAME                      10: _check_int_address
                72      LOAD_CONST                      13: <CODE> _check_packed_address
                74      LOAD_CONST                      14: '_IPAddressBase._check_packed_address'
                76      MAKE_FUNCTION                   0
                78      STORE_NAME                      11: _check_packed_address
                80      LOAD_NAME                       12: classmethod
                82      LOAD_CONST                      15: <CODE> _ip_int_from_prefix
                84      LOAD_CONST                      16: '_IPAddressBase._ip_int_from_prefix'
                86      MAKE_FUNCTION                   0
                88      CALL_FUNCTION                   1
                90      STORE_NAME                      13: _ip_int_from_prefix
                92      LOAD_NAME                       12: classmethod
                94      LOAD_CONST                      17: <CODE> _prefix_from_ip_int
                96      LOAD_CONST                      18: '_IPAddressBase._prefix_from_ip_int'
                98      MAKE_FUNCTION                   0
                100     CALL_FUNCTION                   1
                102     STORE_NAME                      14: _prefix_from_ip_int
                104     LOAD_NAME                       12: classmethod
                106     LOAD_CONST                      19: <CODE> _report_invalid_netmask
                108     LOAD_CONST                      20: '_IPAddressBase._report_invalid_netmask'
                110     MAKE_FUNCTION                   0
                112     CALL_FUNCTION                   1
                114     STORE_NAME                      15: _report_invalid_netmask
                116     LOAD_NAME                       12: classmethod
                118     LOAD_CONST                      21: <CODE> _prefix_from_prefix_string
                120     LOAD_CONST                      22: '_IPAddressBase._prefix_from_prefix_string'
                122     MAKE_FUNCTION                   0
                124     CALL_FUNCTION                   1
                126     STORE_NAME                      16: _prefix_from_prefix_string
                128     LOAD_NAME                       12: classmethod
                130     LOAD_CONST                      23: <CODE> _prefix_from_ip_string
                132     LOAD_CONST                      24: '_IPAddressBase._prefix_from_ip_string'
                134     MAKE_FUNCTION                   0
                136     CALL_FUNCTION                   1
                138     STORE_NAME                      17: _prefix_from_ip_string
                140     LOAD_NAME                       12: classmethod
                142     LOAD_CONST                      25: <CODE> _split_addr_prefix
                144     LOAD_CONST                      26: '_IPAddressBase._split_addr_prefix'
                146     MAKE_FUNCTION                   0
                148     CALL_FUNCTION                   1
                150     STORE_NAME                      18: _split_addr_prefix
                152     LOAD_CONST                      27: <CODE> __reduce__
                154     LOAD_CONST                      28: '_IPAddressBase.__reduce__'
                156     MAKE_FUNCTION                   0
                158     STORE_NAME                      19: __reduce__
                160     LOAD_CONST                      29: None
                162     RETURN_VALUE                    
        '_IPAddressBase'
        [Code]
            File Name: ipaddress.py
            Object Name: _BaseAddress
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__int__'
                '__eq__'
                '__lt__'
                '__add__'
                '__sub__'
                '__repr__'
                '__str__'
                '__hash__'
                '_get_address_key'
                '__reduce__'
                '__format__'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                '_BaseAddress'
                'A generic IP object.\n\n    This IP class contains the version independent methods which are\n    used by single IP addresses.\n    '
                (
                )
                [Code]
                    File Name: ipaddress.py
                    Object Name: __int__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ip'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _ip
                        4       RETURN_VALUE                    
                '_BaseAddress.__int__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ip'
                        '_version'
                        'AttributeError'
                        'NotImplemented'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       SETUP_FINALLY                   13 (to 28)
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _ip
                        6       LOAD_FAST                       1: other
                        8       LOAD_ATTR                       0: _ip
                        10      COMPARE_OP                      2 (==)
                        12      JUMP_IF_FALSE_OR_POP            12 (to 24)
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: _version
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       1: _version
                        22      COMPARE_OP                      2 (==)
                        24      POP_BLOCK                       
                        26      RETURN_VALUE                    
                        28      DUP_TOP                         
                        30      LOAD_GLOBAL                     2: AttributeError
                        32      JUMP_IF_NOT_EXC_MATCH           24 (to 48)
                        34      POP_TOP                         
                        36      POP_TOP                         
                        38      POP_TOP                         
                        40      LOAD_GLOBAL                     3: NotImplemented
                        42      ROT_FOUR                        
                        44      POP_EXCEPT                      
                        46      RETURN_VALUE                    
                        48      RERAISE                         0
                '_BaseAddress.__eq__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __lt__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        '_BaseAddress'
                        'NotImplemented'
                        '_version'
                        'TypeError'
                        '_ip'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s and %s are not of the same version'
                        False
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: _BaseAddress
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: _version
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       3: _version
                        22      COMPARE_OP                      3 (!=)
                        24      POP_JUMP_IF_FALSE               21 (to 42)
                        26      LOAD_GLOBAL                     4: TypeError
                        28      LOAD_CONST                      1: '%s and %s are not of the same version'
                        30      LOAD_FAST                       0: self
                        32      LOAD_FAST                       1: other
                        34      BUILD_TUPLE                     2
                        36      BINARY_MODULO                   
                        38      CALL_FUNCTION                   1
                        40      RAISE_VARARGS                   1
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       5: _ip
                        46      LOAD_FAST                       1: other
                        48      LOAD_ATTR                       5: _ip
                        50      COMPARE_OP                      3 (!=)
                        52      POP_JUMP_IF_FALSE               33 (to 66)
                        54      LOAD_FAST                       0: self
                        56      LOAD_ATTR                       5: _ip
                        58      LOAD_FAST                       1: other
                        60      LOAD_ATTR                       5: _ip
                        62      COMPARE_OP                      0 (<)
                        64      RETURN_VALUE                    
                        66      LOAD_CONST                      2: False
                        68      RETURN_VALUE                    
                '_BaseAddress.__lt__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __add__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'int'
                        'NotImplemented'
                        '__class__'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: int
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     3: __class__
                        18      LOAD_GLOBAL                     1: int
                        20      LOAD_FAST                       0: self
                        22      CALL_FUNCTION                   1
                        24      LOAD_FAST                       1: other
                        26      BINARY_ADD                      
                        28      CALL_METHOD                     1
                        30      RETURN_VALUE                    
                '_BaseAddress.__add__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __sub__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'int'
                        'NotImplemented'
                        '__class__'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: int
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     3: __class__
                        18      LOAD_GLOBAL                     1: int
                        20      LOAD_FAST                       0: self
                        22      CALL_FUNCTION                   1
                        24      LOAD_FAST                       1: other
                        26      BINARY_SUBTRACT                 
                        28      CALL_METHOD                     1
                        30      RETURN_VALUE                    
                '_BaseAddress.__sub__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__class__'
                        '__name__'
                        'str'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s(%r)'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s(%r)'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: __class__
                        6       LOAD_ATTR                       1: __name__
                        8       LOAD_GLOBAL                     2: str
                        10      LOAD_FAST                       0: self
                        12      CALL_FUNCTION                   1
                        14      BUILD_TUPLE                     2
                        16      BINARY_MODULO                   
                        18      RETURN_VALUE                    
                '_BaseAddress.__repr__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'str'
                        '_string_from_ip_int'
                        '_ip'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: str
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     1: _string_from_ip_int
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: _ip
                        10      CALL_METHOD                     1
                        12      CALL_FUNCTION                   1
                        14      RETURN_VALUE                    
                '_BaseAddress.__str__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        'hex'
                        'int'
                        '_ip'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_GLOBAL                     1: hex
                        4       LOAD_GLOBAL                     2: int
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       3: _ip
                        10      CALL_FUNCTION                   1
                        12      CALL_FUNCTION                   1
                        14      CALL_FUNCTION                   1
                        16      RETURN_VALUE                    
                '_BaseAddress.__hash__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _get_address_key
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_version'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _version
                        4       LOAD_FAST                       0: self
                        6       BUILD_TUPLE                     2
                        8       RETURN_VALUE                    
                '_BaseAddress._get_address_key'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __reduce__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__class__'
                        '_ip'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: __class__
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: _ip
                        8       BUILD_TUPLE                     1
                        10      BUILD_TUPLE                     2
                        12      RETURN_VALUE                    
                '_BaseAddress.__reduce__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __format__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 8
                    Stack Size: 7
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'format'
                        'str'
                        '_address_fmt_re'
                        're'
                        'compile'
                        'fullmatch'
                        'super'
                        '__format__'
                        'groups'
                        '_version'
                        '_max_prefixlen'
                        'int'
                    [Var Names]
                        'self'
                        'fmt'
                        're'
                        'm'
                        'alternate'
                        'grouping'
                        'fmt_base'
                        'padlen'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        "Returns an IP address as a formatted string.\n\n        Supported presentation types are:\n        's': returns the IP address as a string (default)\n        'b': converts to binary and returns a zero-padded string\n        'X' or 'x': converts to upper- or lower-case hex and returns a zero-padded string\n        'n': the same as 'b' for IPv4 and 'x' for IPv6\n\n        For binary and hex presentation types, the alternate form specifier\n        '#' and the grouping option '_' are supported.\n        "
                        -1
                        's'
                        None
                        0
                        '(#?)(_?)([xbnX])'
                        'n'
                        4
                        'b'
                        'x'
                        1
                        2
                        '0'
                    [Disassembly]
                        0       LOAD_FAST                       1: fmt
                        2       POP_JUMP_IF_FALSE               8 (to 16)
                        4       LOAD_FAST                       1: fmt
                        6       LOAD_CONST                      1: -1
                        8       BINARY_SUBSCR                   
                        10      LOAD_CONST                      2: 's'
                        12      COMPARE_OP                      2 (==)
                        14      POP_JUMP_IF_FALSE               15 (to 30)
                        16      LOAD_GLOBAL                     0: format
                        18      LOAD_GLOBAL                     1: str
                        20      LOAD_FAST                       0: self
                        22      CALL_FUNCTION                   1
                        24      LOAD_FAST                       1: fmt
                        26      CALL_FUNCTION                   2
                        28      RETURN_VALUE                    
                        30      LOAD_GLOBAL                     2: _address_fmt_re
                        32      LOAD_CONST                      3: None
                        34      IS_OP                           0 (is)
                        36      POP_JUMP_IF_FALSE               28 (to 56)
                        38      LOAD_CONST                      4: 0
                        40      LOAD_CONST                      3: None
                        42      IMPORT_NAME                     3: re
                        44      STORE_FAST                      2: re
                        46      LOAD_FAST                       2: re
                        48      LOAD_METHOD                     4: compile
                        50      LOAD_CONST                      5: '(#?)(_?)([xbnX])'
                        52      CALL_METHOD                     1
                        54      STORE_GLOBAL                    2: _address_fmt_re
                        56      LOAD_GLOBAL                     2: _address_fmt_re
                        58      LOAD_METHOD                     5: fullmatch
                        60      LOAD_FAST                       1: fmt
                        62      CALL_METHOD                     1
                        64      STORE_FAST                      3: m
                        66      LOAD_FAST                       3: m
                        68      POP_JUMP_IF_TRUE                41 (to 82)
                        70      LOAD_GLOBAL                     6: super
                        72      CALL_FUNCTION                   0
                        74      LOAD_METHOD                     7: __format__
                        76      LOAD_FAST                       1: fmt
                        78      CALL_METHOD                     1
                        80      RETURN_VALUE                    
                        82      LOAD_FAST                       3: m
                        84      LOAD_METHOD                     8: groups
                        86      CALL_METHOD                     0
                        88      UNPACK_SEQUENCE                 3
                        90      STORE_FAST                      4: alternate
                        92      STORE_FAST                      5: grouping
                        94      STORE_FAST                      6: fmt_base
                        96      LOAD_FAST                       6: fmt_base
                        98      LOAD_CONST                      6: 'n'
                        100     COMPARE_OP                      2 (==)
                        102     POP_JUMP_IF_FALSE               62 (to 124)
                        104     LOAD_FAST                       0: self
                        106     LOAD_ATTR                       9: _version
                        108     LOAD_CONST                      7: 4
                        110     COMPARE_OP                      2 (==)
                        112     POP_JUMP_IF_FALSE               60 (to 120)
                        114     LOAD_CONST                      8: 'b'
                        116     STORE_FAST                      6: fmt_base
                        118     JUMP_FORWARD                    2 (to 124)
                        120     LOAD_CONST                      9: 'x'
                        122     STORE_FAST                      6: fmt_base
                        124     LOAD_FAST                       6: fmt_base
                        126     LOAD_CONST                      8: 'b'
                        128     COMPARE_OP                      2 (==)
                        130     POP_JUMP_IF_FALSE               70 (to 140)
                        132     LOAD_FAST                       0: self
                        134     LOAD_ATTR                       10: _max_prefixlen
                        136     STORE_FAST                      7: padlen
                        138     JUMP_FORWARD                    5 (to 150)
                        140     LOAD_FAST                       0: self
                        142     LOAD_ATTR                       10: _max_prefixlen
                        144     LOAD_CONST                      7: 4
                        146     BINARY_FLOOR_DIVIDE             
                        148     STORE_FAST                      7: padlen
                        150     LOAD_FAST                       5: grouping
                        152     POP_JUMP_IF_FALSE               85 (to 170)
                        154     LOAD_FAST                       7: padlen
                        156     LOAD_FAST                       7: padlen
                        158     LOAD_CONST                      7: 4
                        160     BINARY_FLOOR_DIVIDE             
                        162     LOAD_CONST                      10: 1
                        164     BINARY_SUBTRACT                 
                        166     INPLACE_ADD                     
                        168     STORE_FAST                      7: padlen
                        170     LOAD_FAST                       4: alternate
                        172     POP_JUMP_IF_FALSE               91 (to 182)
                        174     LOAD_FAST                       7: padlen
                        176     LOAD_CONST                      11: 2
                        178     INPLACE_ADD                     
                        180     STORE_FAST                      7: padlen
                        182     LOAD_GLOBAL                     0: format
                        184     LOAD_GLOBAL                     11: int
                        186     LOAD_FAST                       0: self
                        188     CALL_FUNCTION                   1
                        190     LOAD_FAST                       4: alternate
                        192     FORMAT_VALUE                    0 (FVC_NONE)
                        194     LOAD_CONST                      12: '0'
                        196     LOAD_FAST                       7: padlen
                        198     FORMAT_VALUE                    0 (FVC_NONE)
                        200     LOAD_FAST                       5: grouping
                        202     FORMAT_VALUE                    0 (FVC_NONE)
                        204     LOAD_FAST                       6: fmt_base
                        206     FORMAT_VALUE                    0 (FVC_NONE)
                        208     BUILD_STRING                    5
                        210     CALL_FUNCTION                   2
                        212     RETURN_VALUE                    
                '_BaseAddress.__format__'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_BaseAddress'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A generic IP object.\n\n    This IP class contains the version independent methods which are\n    used by single IP addresses.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: <CODE> __int__
                18      LOAD_CONST                      4: '_BaseAddress.__int__'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      5: __int__
                24      LOAD_CONST                      5: <CODE> __eq__
                26      LOAD_CONST                      6: '_BaseAddress.__eq__'
                28      MAKE_FUNCTION                   0
                30      STORE_NAME                      6: __eq__
                32      LOAD_CONST                      7: <CODE> __lt__
                34      LOAD_CONST                      8: '_BaseAddress.__lt__'
                36      MAKE_FUNCTION                   0
                38      STORE_NAME                      7: __lt__
                40      LOAD_CONST                      9: <CODE> __add__
                42      LOAD_CONST                      10: '_BaseAddress.__add__'
                44      MAKE_FUNCTION                   0
                46      STORE_NAME                      8: __add__
                48      LOAD_CONST                      11: <CODE> __sub__
                50      LOAD_CONST                      12: '_BaseAddress.__sub__'
                52      MAKE_FUNCTION                   0
                54      STORE_NAME                      9: __sub__
                56      LOAD_CONST                      13: <CODE> __repr__
                58      LOAD_CONST                      14: '_BaseAddress.__repr__'
                60      MAKE_FUNCTION                   0
                62      STORE_NAME                      10: __repr__
                64      LOAD_CONST                      15: <CODE> __str__
                66      LOAD_CONST                      16: '_BaseAddress.__str__'
                68      MAKE_FUNCTION                   0
                70      STORE_NAME                      11: __str__
                72      LOAD_CONST                      17: <CODE> __hash__
                74      LOAD_CONST                      18: '_BaseAddress.__hash__'
                76      MAKE_FUNCTION                   0
                78      STORE_NAME                      12: __hash__
                80      LOAD_CONST                      19: <CODE> _get_address_key
                82      LOAD_CONST                      20: '_BaseAddress._get_address_key'
                84      MAKE_FUNCTION                   0
                86      STORE_NAME                      13: _get_address_key
                88      LOAD_CONST                      21: <CODE> __reduce__
                90      LOAD_CONST                      22: '_BaseAddress.__reduce__'
                92      MAKE_FUNCTION                   0
                94      STORE_NAME                      14: __reduce__
                96      LOAD_CLOSURE                    0: __class__
                98      BUILD_TUPLE                     1
                100     LOAD_CONST                      23: <CODE> __format__
                102     LOAD_CONST                      24: '_BaseAddress.__format__'
                104     MAKE_FUNCTION                   8
                106     STORE_NAME                      15: __format__
                108     LOAD_CLOSURE                    0: __class__
                110     DUP_TOP                         
                112     STORE_NAME                      16: __classcell__
                114     RETURN_VALUE                    
        '_BaseAddress'
        [Code]
            File Name: ipaddress.py
            Object Name: _BaseNetwork
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__repr__'
                '__str__'
                'hosts'
                '__iter__'
                '__getitem__'
                '__lt__'
                '__eq__'
                '__hash__'
                '__contains__'
                'overlaps'
                'functools'
                'cached_property'
                'broadcast_address'
                'hostmask'
                'property'
                'with_prefixlen'
                'with_netmask'
                'with_hostmask'
                'num_addresses'
                '_address_class'
                'prefixlen'
                'address_exclude'
                'compare_networks'
                '_get_networks_key'
                'subnets'
                'supernet'
                'is_multicast'
                'staticmethod'
                '_is_subnet_of'
                'subnet_of'
                'supernet_of'
                'is_reserved'
                'is_link_local'
                'is_private'
                'is_global'
                'is_unspecified'
                'is_loopback'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_BaseNetwork'
                'A generic IP network object.\n\n    This IP class contains the version independent methods which are\n    used by networks.\n    '
                [Code]
                    File Name: ipaddress.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '__class__'
                        '__name__'
                        'str'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s(%r)'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s(%r)'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: __class__
                        6       LOAD_ATTR                       1: __name__
                        8       LOAD_GLOBAL                     2: str
                        10      LOAD_FAST                       0: self
                        12      CALL_FUNCTION                   1
                        14      BUILD_TUPLE                     2
                        16      BINARY_MODULO                   
                        18      RETURN_VALUE                    
                '_BaseNetwork.__repr__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'prefixlen'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%d'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%d'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: network_address
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: prefixlen
                        10      BUILD_TUPLE                     2
                        12      BINARY_MODULO                   
                        14      RETURN_VALUE                    
                '_BaseNetwork.__str__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: hosts
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'int'
                        'network_address'
                        'broadcast_address'
                        'range'
                        '_address_class'
                    [Var Names]
                        'self'
                        'network'
                        'broadcast'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Generate Iterator over usable hosts in a network.\n\n        This is like __iter__ except it doesn't return the network\n        or broadcast addresses.\n\n        "
                        1
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_GLOBAL                     0: int
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: network_address
                        8       CALL_FUNCTION                   1
                        10      STORE_FAST                      1: network
                        12      LOAD_GLOBAL                     0: int
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: broadcast_address
                        18      CALL_FUNCTION                   1
                        20      STORE_FAST                      2: broadcast
                        22      LOAD_GLOBAL                     3: range
                        24      LOAD_FAST                       1: network
                        26      LOAD_CONST                      1: 1
                        28      BINARY_ADD                      
                        30      LOAD_FAST                       2: broadcast
                        32      CALL_FUNCTION                   2
                        34      GET_ITER                        
                        36      FOR_ITER                        8 (to 54)
                        38      STORE_FAST                      3: x
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     4: _address_class
                        44      LOAD_FAST                       3: x
                        46      CALL_METHOD                     1
                        48      YIELD_VALUE                     
                        50      POP_TOP                         
                        52      JUMP_ABSOLUTE                   18 (to 36)
                        54      LOAD_CONST                      2: None
                        56      RETURN_VALUE                    
                '_BaseNetwork.hosts'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __iter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'int'
                        'network_address'
                        'broadcast_address'
                        'range'
                        '_address_class'
                    [Var Names]
                        'self'
                        'network'
                        'broadcast'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_GLOBAL                     0: int
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: network_address
                        8       CALL_FUNCTION                   1
                        10      STORE_FAST                      1: network
                        12      LOAD_GLOBAL                     0: int
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: broadcast_address
                        18      CALL_FUNCTION                   1
                        20      STORE_FAST                      2: broadcast
                        22      LOAD_GLOBAL                     3: range
                        24      LOAD_FAST                       1: network
                        26      LOAD_FAST                       2: broadcast
                        28      LOAD_CONST                      1: 1
                        30      BINARY_ADD                      
                        32      CALL_FUNCTION                   2
                        34      GET_ITER                        
                        36      FOR_ITER                        8 (to 54)
                        38      STORE_FAST                      3: x
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     4: _address_class
                        44      LOAD_FAST                       3: x
                        46      CALL_METHOD                     1
                        48      YIELD_VALUE                     
                        50      POP_TOP                         
                        52      JUMP_ABSOLUTE                   18 (to 36)
                        54      LOAD_CONST                      0: None
                        56      RETURN_VALUE                    
                '_BaseNetwork.__iter__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __getitem__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'int'
                        'network_address'
                        'broadcast_address'
                        'IndexError'
                        '_address_class'
                    [Var Names]
                        'self'
                        'n'
                        'network'
                        'broadcast'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'address out of range'
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: int
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: network_address
                        6       CALL_FUNCTION                   1
                        8       STORE_FAST                      2: network
                        10      LOAD_GLOBAL                     0: int
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: broadcast_address
                        16      CALL_FUNCTION                   1
                        18      STORE_FAST                      3: broadcast
                        20      LOAD_FAST                       1: n
                        22      LOAD_CONST                      1: 0
                        24      COMPARE_OP                      5 (>=)
                        26      POP_JUMP_IF_FALSE               31 (to 62)
                        28      LOAD_FAST                       2: network
                        30      LOAD_FAST                       1: n
                        32      BINARY_ADD                      
                        34      LOAD_FAST                       3: broadcast
                        36      COMPARE_OP                      4 (>)
                        38      POP_JUMP_IF_FALSE               24 (to 48)
                        40      LOAD_GLOBAL                     3: IndexError
                        42      LOAD_CONST                      2: 'address out of range'
                        44      CALL_FUNCTION                   1
                        46      RAISE_VARARGS                   1
                        48      LOAD_FAST                       0: self
                        50      LOAD_METHOD                     4: _address_class
                        52      LOAD_FAST                       2: network
                        54      LOAD_FAST                       1: n
                        56      BINARY_ADD                      
                        58      CALL_METHOD                     1
                        60      RETURN_VALUE                    
                        62      LOAD_FAST                       1: n
                        64      LOAD_CONST                      3: 1
                        66      INPLACE_ADD                     
                        68      STORE_FAST                      1: n
                        70      LOAD_FAST                       3: broadcast
                        72      LOAD_FAST                       1: n
                        74      BINARY_ADD                      
                        76      LOAD_FAST                       2: network
                        78      COMPARE_OP                      0 (<)
                        80      POP_JUMP_IF_FALSE               45 (to 90)
                        82      LOAD_GLOBAL                     3: IndexError
                        84      LOAD_CONST                      2: 'address out of range'
                        86      CALL_FUNCTION                   1
                        88      RAISE_VARARGS                   1
                        90      LOAD_FAST                       0: self
                        92      LOAD_METHOD                     4: _address_class
                        94      LOAD_FAST                       3: broadcast
                        96      LOAD_FAST                       1: n
                        98      BINARY_ADD                      
                        100     CALL_METHOD                     1
                        102     RETURN_VALUE                    
                '_BaseNetwork.__getitem__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __lt__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        '_BaseNetwork'
                        'NotImplemented'
                        '_version'
                        'TypeError'
                        'network_address'
                        'netmask'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s and %s are not of the same version'
                        False
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: other
                        4       LOAD_GLOBAL                     1: _BaseNetwork
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_TRUE                7 (to 14)
                        10      LOAD_GLOBAL                     2: NotImplemented
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: _version
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       3: _version
                        22      COMPARE_OP                      3 (!=)
                        24      POP_JUMP_IF_FALSE               21 (to 42)
                        26      LOAD_GLOBAL                     4: TypeError
                        28      LOAD_CONST                      1: '%s and %s are not of the same version'
                        30      LOAD_FAST                       0: self
                        32      LOAD_FAST                       1: other
                        34      BUILD_TUPLE                     2
                        36      BINARY_MODULO                   
                        38      CALL_FUNCTION                   1
                        40      RAISE_VARARGS                   1
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       5: network_address
                        46      LOAD_FAST                       1: other
                        48      LOAD_ATTR                       5: network_address
                        50      COMPARE_OP                      3 (!=)
                        52      POP_JUMP_IF_FALSE               33 (to 66)
                        54      LOAD_FAST                       0: self
                        56      LOAD_ATTR                       5: network_address
                        58      LOAD_FAST                       1: other
                        60      LOAD_ATTR                       5: network_address
                        62      COMPARE_OP                      0 (<)
                        64      RETURN_VALUE                    
                        66      LOAD_FAST                       0: self
                        68      LOAD_ATTR                       6: netmask
                        70      LOAD_FAST                       1: other
                        72      LOAD_ATTR                       6: netmask
                        74      COMPARE_OP                      3 (!=)
                        76      POP_JUMP_IF_FALSE               45 (to 90)
                        78      LOAD_FAST                       0: self
                        80      LOAD_ATTR                       6: netmask
                        82      LOAD_FAST                       1: other
                        84      LOAD_ATTR                       6: netmask
                        86      COMPARE_OP                      0 (<)
                        88      RETURN_VALUE                    
                        90      LOAD_CONST                      2: False
                        92      RETURN_VALUE                    
                '_BaseNetwork.__lt__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_version'
                        'network_address'
                        'int'
                        'netmask'
                        'AttributeError'
                        'NotImplemented'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       SETUP_FINALLY                   23 (to 48)
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _version
                        6       LOAD_FAST                       1: other
                        8       LOAD_ATTR                       0: _version
                        10      COMPARE_OP                      2 (==)
                        12      JUMP_IF_FALSE_OR_POP            22 (to 44)
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: network_address
                        18      LOAD_FAST                       1: other
                        20      LOAD_ATTR                       1: network_address
                        22      COMPARE_OP                      2 (==)
                        24      JUMP_IF_FALSE_OR_POP            22 (to 44)
                        26      LOAD_GLOBAL                     2: int
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       3: netmask
                        32      CALL_FUNCTION                   1
                        34      LOAD_GLOBAL                     2: int
                        36      LOAD_FAST                       1: other
                        38      LOAD_ATTR                       3: netmask
                        40      CALL_FUNCTION                   1
                        42      COMPARE_OP                      2 (==)
                        44      POP_BLOCK                       
                        46      RETURN_VALUE                    
                        48      DUP_TOP                         
                        50      LOAD_GLOBAL                     4: AttributeError
                        52      JUMP_IF_NOT_EXC_MATCH           34 (to 68)
                        54      POP_TOP                         
                        56      POP_TOP                         
                        58      POP_TOP                         
                        60      LOAD_GLOBAL                     5: NotImplemented
                        62      ROT_FOUR                        
                        64      POP_EXCEPT                      
                        66      RETURN_VALUE                    
                        68      RERAISE                         0
                '_BaseNetwork.__eq__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        'int'
                        'network_address'
                        'netmask'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_GLOBAL                     1: int
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       2: network_address
                        8       CALL_FUNCTION                   1
                        10      LOAD_GLOBAL                     1: int
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: netmask
                        16      CALL_FUNCTION                   1
                        18      BINARY_XOR                      
                        20      CALL_FUNCTION                   1
                        22      RETURN_VALUE                    
                '_BaseNetwork.__hash__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __contains__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_version'
                        'isinstance'
                        '_BaseNetwork'
                        '_ip'
                        'netmask'
                        'network_address'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _version
                        4       LOAD_FAST                       1: other
                        6       LOAD_ATTR                       0: _version
                        8       COMPARE_OP                      3 (!=)
                        10      POP_JUMP_IF_FALSE               8 (to 16)
                        12      LOAD_CONST                      1: False
                        14      RETURN_VALUE                    
                        16      LOAD_GLOBAL                     1: isinstance
                        18      LOAD_FAST                       1: other
                        20      LOAD_GLOBAL                     2: _BaseNetwork
                        22      CALL_FUNCTION                   2
                        24      POP_JUMP_IF_FALSE               15 (to 30)
                        26      LOAD_CONST                      1: False
                        28      RETURN_VALUE                    
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       3: _ip
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       4: netmask
                        38      LOAD_ATTR                       3: _ip
                        40      BINARY_AND                      
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       5: network_address
                        46      LOAD_ATTR                       3: _ip
                        48      COMPARE_OP                      2 (==)
                        50      RETURN_VALUE                    
                '_BaseNetwork.__contains__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: overlaps
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'broadcast_address'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Tell if self is partly contained in other.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: network_address
                        4       LOAD_FAST                       1: other
                        6       CONTAINS_OP                     0 (in)
                        8       JUMP_IF_TRUE_OR_POP             19 (to 38)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: broadcast_address
                        14      LOAD_FAST                       1: other
                        16      CONTAINS_OP                     0 (in)
                        18      JUMP_IF_TRUE_OR_POP             19 (to 38)
                        20      LOAD_FAST                       1: other
                        22      LOAD_ATTR                       0: network_address
                        24      LOAD_FAST                       0: self
                        26      CONTAINS_OP                     0 (in)
                        28      JUMP_IF_TRUE_OR_POP             19 (to 38)
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       1: broadcast_address
                        34      LOAD_FAST                       0: self
                        36      CONTAINS_OP                     0 (in)
                        38      RETURN_VALUE                    
                '_BaseNetwork.overlaps'
                [Code]
                    File Name: ipaddress.py
                    Object Name: broadcast_address
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_address_class'
                        'int'
                        'network_address'
                        'hostmask'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _address_class
                        4       LOAD_GLOBAL                     1: int
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: network_address
                        10      CALL_FUNCTION                   1
                        12      LOAD_GLOBAL                     1: int
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       3: hostmask
                        18      CALL_FUNCTION                   1
                        20      BINARY_OR                       
                        22      CALL_METHOD                     1
                        24      RETURN_VALUE                    
                '_BaseNetwork.broadcast_address'
                [Code]
                    File Name: ipaddress.py
                    Object Name: hostmask
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_address_class'
                        'int'
                        'netmask'
                        '_ALL_ONES'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _address_class
                        4       LOAD_GLOBAL                     1: int
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: netmask
                        10      CALL_FUNCTION                   1
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: _ALL_ONES
                        16      BINARY_XOR                      
                        18      CALL_METHOD                     1
                        20      RETURN_VALUE                    
                '_BaseNetwork.hostmask'
                [Code]
                    File Name: ipaddress.py
                    Object Name: with_prefixlen
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        '_prefixlen'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%d'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%d'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: network_address
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _prefixlen
                        10      BUILD_TUPLE                     2
                        12      BINARY_MODULO                   
                        14      RETURN_VALUE                    
                '_BaseNetwork.with_prefixlen'
                [Code]
                    File Name: ipaddress.py
                    Object Name: with_netmask
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'netmask'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%s'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%s'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: network_address
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: netmask
                        10      BUILD_TUPLE                     2
                        12      BINARY_MODULO                   
                        14      RETURN_VALUE                    
                '_BaseNetwork.with_netmask'
                [Code]
                    File Name: ipaddress.py
                    Object Name: with_hostmask
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'hostmask'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%s'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%s'
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: network_address
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: hostmask
                        10      BUILD_TUPLE                     2
                        12      BINARY_MODULO                   
                        14      RETURN_VALUE                    
                '_BaseNetwork.with_hostmask'
                [Code]
                    File Name: ipaddress.py
                    Object Name: num_addresses
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'int'
                        'broadcast_address'
                        'network_address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Number of hosts in the current subnet.'
                        1
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: int
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: broadcast_address
                        6       CALL_FUNCTION                   1
                        8       LOAD_GLOBAL                     0: int
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: network_address
                        14      CALL_FUNCTION                   1
                        16      BINARY_SUBTRACT                 
                        18      LOAD_CONST                      1: 1
                        20      BINARY_ADD                      
                        22      RETURN_VALUE                    
                '_BaseNetwork.num_addresses'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _address_class
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'type'
                        'NotImplementedError'
                    [Var Names]
                        'self'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%200s has no associated address class'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%200s has no associated address class'
                        2       LOAD_GLOBAL                     0: type
                        4       LOAD_FAST                       0: self
                        6       CALL_FUNCTION                   1
                        8       BUILD_TUPLE                     1
                        10      BINARY_MODULO                   
                        12      STORE_FAST                      1: msg
                        14      LOAD_GLOBAL                     1: NotImplementedError
                        16      LOAD_FAST                       1: msg
                        18      CALL_FUNCTION                   1
                        20      RAISE_VARARGS                   1
                '_BaseNetwork._address_class'
                [Code]
                    File Name: ipaddress.py
                    Object Name: prefixlen
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_prefixlen'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _prefixlen
                        4       RETURN_VALUE                    
                '_BaseNetwork.prefixlen'
                [Code]
                    File Name: ipaddress.py
                    Object Name: address_exclude
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        '_version'
                        'TypeError'
                        'isinstance'
                        '_BaseNetwork'
                        'subnet_of'
                        'ValueError'
                        '__class__'
                        'network_address'
                        'prefixlen'
                        'subnets'
                        'AssertionError'
                    [Var Names]
                        'self'
                        'other'
                        's1'
                        's2'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Remove an address from a larger block.\n\n        For example:\n\n            addr1 = ip_network('192.0.2.0/28')\n            addr2 = ip_network('192.0.2.1/32')\n            list(addr1.address_exclude(addr2)) =\n                [IPv4Network('192.0.2.0/32'), IPv4Network('192.0.2.2/31'),\n                 IPv4Network('192.0.2.4/30'), IPv4Network('192.0.2.8/29')]\n\n        or IPv6:\n\n            addr1 = ip_network('2001:db8::1/32')\n            addr2 = ip_network('2001:db8::1/128')\n            list(addr1.address_exclude(addr2)) =\n                [ip_network('2001:db8::1/128'),\n                 ip_network('2001:db8::2/127'),\n                 ip_network('2001:db8::4/126'),\n                 ip_network('2001:db8::8/125'),\n                 ...\n                 ip_network('2001:db8:8000::/33')]\n\n        Args:\n            other: An IPv4Network or IPv6Network object of the same type.\n\n        Returns:\n            An iterator of the IPv(4|6)Network objects which is self\n            minus other.\n\n        Raises:\n            TypeError: If self and other are of differing address\n              versions, or if other is not a network object.\n            ValueError: If other is not completely contained by self.\n\n        "
                        '%s and %s are not of the same version'
                        '%s is not a network object'
                        '%s not contained in %s'
                        None
                        '%s/%s'
                        'Error performing exclusion: s1: %s s2: %s other: %s'
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _version
                        6       LOAD_FAST                       1: other
                        8       LOAD_ATTR                       0: _version
                        10      COMPARE_OP                      2 (==)
                        12      POP_JUMP_IF_TRUE                15 (to 30)
                        14      LOAD_GLOBAL                     1: TypeError
                        16      LOAD_CONST                      1: '%s and %s are not of the same version'
                        18      LOAD_FAST                       0: self
                        20      LOAD_FAST                       1: other
                        22      BUILD_TUPLE                     2
                        24      BINARY_MODULO                   
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      LOAD_GLOBAL                     2: isinstance
                        32      LOAD_FAST                       1: other
                        34      LOAD_GLOBAL                     3: _BaseNetwork
                        36      CALL_FUNCTION                   2
                        38      POP_JUMP_IF_TRUE                26 (to 52)
                        40      LOAD_GLOBAL                     1: TypeError
                        42      LOAD_CONST                      2: '%s is not a network object'
                        44      LOAD_FAST                       1: other
                        46      BINARY_MODULO                   
                        48      CALL_FUNCTION                   1
                        50      RAISE_VARARGS                   1
                        52      LOAD_FAST                       1: other
                        54      LOAD_METHOD                     4: subnet_of
                        56      LOAD_FAST                       0: self
                        58      CALL_METHOD                     1
                        60      POP_JUMP_IF_TRUE                39 (to 78)
                        62      LOAD_GLOBAL                     5: ValueError
                        64      LOAD_CONST                      3: '%s not contained in %s'
                        66      LOAD_FAST                       1: other
                        68      LOAD_FAST                       0: self
                        70      BUILD_TUPLE                     2
                        72      BINARY_MODULO                   
                        74      CALL_FUNCTION                   1
                        76      RAISE_VARARGS                   1
                        78      LOAD_FAST                       1: other
                        80      LOAD_FAST                       0: self
                        82      COMPARE_OP                      2 (==)
                        84      POP_JUMP_IF_FALSE               45 (to 90)
                        86      LOAD_CONST                      4: None
                        88      RETURN_VALUE                    
                        90      LOAD_FAST                       1: other
                        92      LOAD_METHOD                     6: __class__
                        94      LOAD_CONST                      5: '%s/%s'
                        96      LOAD_FAST                       1: other
                        98      LOAD_ATTR                       7: network_address
                        100     LOAD_FAST                       1: other
                        102     LOAD_ATTR                       8: prefixlen
                        104     BUILD_TUPLE                     2
                        106     BINARY_MODULO                   
                        108     CALL_METHOD                     1
                        110     STORE_FAST                      1: other
                        112     LOAD_FAST                       0: self
                        114     LOAD_METHOD                     9: subnets
                        116     CALL_METHOD                     0
                        118     UNPACK_SEQUENCE                 2
                        120     STORE_FAST                      2: s1
                        122     STORE_FAST                      3: s2
                        124     LOAD_FAST                       2: s1
                        126     LOAD_FAST                       1: other
                        128     COMPARE_OP                      3 (!=)
                        130     POP_JUMP_IF_FALSE               117 (to 234)
                        132     LOAD_FAST                       3: s2
                        134     LOAD_FAST                       1: other
                        136     COMPARE_OP                      3 (!=)
                        138     POP_JUMP_IF_FALSE               117 (to 234)
                        140     LOAD_FAST                       1: other
                        142     LOAD_METHOD                     4: subnet_of
                        144     LOAD_FAST                       2: s1
                        146     CALL_METHOD                     1
                        148     POP_JUMP_IF_FALSE               85 (to 170)
                        150     LOAD_FAST                       3: s2
                        152     YIELD_VALUE                     
                        154     POP_TOP                         
                        156     LOAD_FAST                       2: s1
                        158     LOAD_METHOD                     9: subnets
                        160     CALL_METHOD                     0
                        162     UNPACK_SEQUENCE                 2
                        164     STORE_FAST                      2: s1
                        166     STORE_FAST                      3: s2
                        168     JUMP_FORWARD                    24 (to 218)
                        170     LOAD_FAST                       1: other
                        172     LOAD_METHOD                     4: subnet_of
                        174     LOAD_FAST                       3: s2
                        176     CALL_METHOD                     1
                        178     POP_JUMP_IF_FALSE               100 (to 200)
                        180     LOAD_FAST                       2: s1
                        182     YIELD_VALUE                     
                        184     POP_TOP                         
                        186     LOAD_FAST                       3: s2
                        188     LOAD_METHOD                     9: subnets
                        190     CALL_METHOD                     0
                        192     UNPACK_SEQUENCE                 2
                        194     STORE_FAST                      2: s1
                        196     STORE_FAST                      3: s2
                        198     JUMP_FORWARD                    9 (to 218)
                        200     LOAD_GLOBAL                     10: AssertionError
                        202     LOAD_CONST                      6: 'Error performing exclusion: s1: %s s2: %s other: %s'
                        204     LOAD_FAST                       2: s1
                        206     LOAD_FAST                       3: s2
                        208     LOAD_FAST                       1: other
                        210     BUILD_TUPLE                     3
                        212     BINARY_MODULO                   
                        214     CALL_FUNCTION                   1
                        216     RAISE_VARARGS                   1
                        218     LOAD_FAST                       2: s1
                        220     LOAD_FAST                       1: other
                        222     COMPARE_OP                      3 (!=)
                        224     POP_JUMP_IF_FALSE               117 (to 234)
                        226     LOAD_FAST                       3: s2
                        228     LOAD_FAST                       1: other
                        230     COMPARE_OP                      3 (!=)
                        232     POP_JUMP_IF_TRUE                70 (to 140)
                        234     LOAD_FAST                       2: s1
                        236     LOAD_FAST                       1: other
                        238     COMPARE_OP                      2 (==)
                        240     POP_JUMP_IF_FALSE               126 (to 252)
                        242     LOAD_FAST                       3: s2
                        244     YIELD_VALUE                     
                        246     POP_TOP                         
                        248     LOAD_CONST                      4: None
                        250     RETURN_VALUE                    
                        252     LOAD_FAST                       3: s2
                        254     LOAD_FAST                       1: other
                        256     COMPARE_OP                      2 (==)
                        258     POP_JUMP_IF_FALSE               135 (to 270)
                        260     LOAD_FAST                       2: s1
                        262     YIELD_VALUE                     
                        264     POP_TOP                         
                        266     LOAD_CONST                      4: None
                        268     RETURN_VALUE                    
                        270     LOAD_GLOBAL                     10: AssertionError
                        272     LOAD_CONST                      6: 'Error performing exclusion: s1: %s s2: %s other: %s'
                        274     LOAD_FAST                       2: s1
                        276     LOAD_FAST                       3: s2
                        278     LOAD_FAST                       1: other
                        280     BUILD_TUPLE                     3
                        282     BINARY_MODULO                   
                        284     CALL_FUNCTION                   1
                        286     RAISE_VARARGS                   1
                '_BaseNetwork.address_exclude'
                [Code]
                    File Name: ipaddress.py
                    Object Name: compare_networks
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_version'
                        'TypeError'
                        'network_address'
                        'netmask'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Compare two IP objects.\n\n        This is only concerned about the comparison of the integer\n        representation of the network addresses.  This means that the\n        host bits aren't considered at all in this method.  If you want\n        to compare host bits, you can easily enough do a\n        'HostA._ip < HostB._ip'\n\n        Args:\n            other: An IP object.\n\n        Returns:\n            If the IP versions of self and other are the same, returns:\n\n            -1 if self < other:\n              eg: IPv4Network('192.0.2.0/25') < IPv4Network('192.0.2.128/25')\n              IPv6Network('2001:db8::1000/124') <\n                  IPv6Network('2001:db8::2000/124')\n            0 if self == other\n              eg: IPv4Network('192.0.2.0/24') == IPv4Network('192.0.2.0/24')\n              IPv6Network('2001:db8::1000/124') ==\n                  IPv6Network('2001:db8::1000/124')\n            1 if self > other\n              eg: IPv4Network('192.0.2.128/25') > IPv4Network('192.0.2.0/25')\n                  IPv6Network('2001:db8::2000/124') >\n                      IPv6Network('2001:db8::1000/124')\n\n          Raises:\n              TypeError if the IP versions are different.\n\n        "
                        '%s and %s are not of the same type'
                        -1
                        1
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _version
                        4       LOAD_FAST                       1: other
                        6       LOAD_ATTR                       0: _version
                        8       COMPARE_OP                      3 (!=)
                        10      POP_JUMP_IF_FALSE               14 (to 28)
                        12      LOAD_GLOBAL                     1: TypeError
                        14      LOAD_CONST                      1: '%s and %s are not of the same type'
                        16      LOAD_FAST                       0: self
                        18      LOAD_FAST                       1: other
                        20      BUILD_TUPLE                     2
                        22      BINARY_MODULO                   
                        24      CALL_FUNCTION                   1
                        26      RAISE_VARARGS                   1
                        28      LOAD_FAST                       0: self
                        30      LOAD_ATTR                       2: network_address
                        32      LOAD_FAST                       1: other
                        34      LOAD_ATTR                       2: network_address
                        36      COMPARE_OP                      0 (<)
                        38      POP_JUMP_IF_FALSE               22 (to 44)
                        40      LOAD_CONST                      2: -1
                        42      RETURN_VALUE                    
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       2: network_address
                        48      LOAD_FAST                       1: other
                        50      LOAD_ATTR                       2: network_address
                        52      COMPARE_OP                      4 (>)
                        54      POP_JUMP_IF_FALSE               30 (to 60)
                        56      LOAD_CONST                      3: 1
                        58      RETURN_VALUE                    
                        60      LOAD_FAST                       0: self
                        62      LOAD_ATTR                       3: netmask
                        64      LOAD_FAST                       1: other
                        66      LOAD_ATTR                       3: netmask
                        68      COMPARE_OP                      0 (<)
                        70      POP_JUMP_IF_FALSE               38 (to 76)
                        72      LOAD_CONST                      2: -1
                        74      RETURN_VALUE                    
                        76      LOAD_FAST                       0: self
                        78      LOAD_ATTR                       3: netmask
                        80      LOAD_FAST                       1: other
                        82      LOAD_ATTR                       3: netmask
                        84      COMPARE_OP                      4 (>)
                        86      POP_JUMP_IF_FALSE               46 (to 92)
                        88      LOAD_CONST                      3: 1
                        90      RETURN_VALUE                    
                        92      LOAD_CONST                      4: 0
                        94      RETURN_VALUE                    
                '_BaseNetwork.compare_networks'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _get_networks_key
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_version'
                        'network_address'
                        'netmask'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Network-only key function.\n\n        Returns an object that identifies this address\' network and\n        netmask. This function is a suitable "key" argument for sorted()\n        and list.sort().\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _version
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: network_address
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: netmask
                        12      BUILD_TUPLE                     3
                        14      RETURN_VALUE                    
                '_BaseNetwork._get_networks_key'
                1
                None
                [Code]
                    File Name: ipaddress.py
                    Object Name: subnets
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 5
                    Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        '_prefixlen'
                        '_max_prefixlen'
                        'ValueError'
                        'int'
                        'network_address'
                        'broadcast_address'
                        'hostmask'
                        'range'
                        '__class__'
                    [Var Names]
                        'self'
                        'prefixlen_diff'
                        'new_prefix'
                        'new_prefixlen'
                        'start'
                        'end'
                        'step'
                        'new_addr'
                        'current'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'The subnets which join to make the current subnet.\n\n        In the case that self contains only one IP\n        (self._prefixlen == 32 for IPv4 or self._prefixlen == 128\n        for IPv6), yield an iterator with just ourself.\n\n        Args:\n            prefixlen_diff: An integer, the amount the prefix length\n              should be increased by. This should not be set if\n              new_prefix is also set.\n            new_prefix: The desired new prefix length. This must be a\n              larger number (smaller prefix) than the existing prefix.\n              This should not be set if prefixlen_diff is also set.\n\n        Returns:\n            An iterator of IPv(4|6) objects.\n\n        Raises:\n            ValueError: The prefixlen_diff is too small or too large.\n                OR\n            prefixlen_diff and new_prefix are both set or new_prefix\n              is a smaller number than the current prefix (smaller\n              number means a larger network)\n\n        '
                        None
                        'new prefix must be longer'
                        1
                        'cannot set prefixlen_diff and new_prefix'
                        0
                        'prefix length diff must be > 0'
                        'prefix length diff %d is invalid for netblock %s'
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _prefixlen
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _max_prefixlen
                        10      COMPARE_OP                      2 (==)
                        12      POP_JUMP_IF_FALSE               12 (to 24)
                        14      LOAD_FAST                       0: self
                        16      YIELD_VALUE                     
                        18      POP_TOP                         
                        20      LOAD_CONST                      1: None
                        22      RETURN_VALUE                    
                        24      LOAD_FAST                       2: new_prefix
                        26      LOAD_CONST                      1: None
                        28      IS_OP                           1 (is not)
                        30      POP_JUMP_IF_FALSE               38 (to 76)
                        32      LOAD_FAST                       2: new_prefix
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       0: _prefixlen
                        38      COMPARE_OP                      0 (<)
                        40      POP_JUMP_IF_FALSE               25 (to 50)
                        42      LOAD_GLOBAL                     2: ValueError
                        44      LOAD_CONST                      2: 'new prefix must be longer'
                        46      CALL_FUNCTION                   1
                        48      RAISE_VARARGS                   1
                        50      LOAD_FAST                       1: prefixlen_diff
                        52      LOAD_CONST                      3: 1
                        54      COMPARE_OP                      3 (!=)
                        56      POP_JUMP_IF_FALSE               33 (to 66)
                        58      LOAD_GLOBAL                     2: ValueError
                        60      LOAD_CONST                      4: 'cannot set prefixlen_diff and new_prefix'
                        62      CALL_FUNCTION                   1
                        64      RAISE_VARARGS                   1
                        66      LOAD_FAST                       2: new_prefix
                        68      LOAD_FAST                       0: self
                        70      LOAD_ATTR                       0: _prefixlen
                        72      BINARY_SUBTRACT                 
                        74      STORE_FAST                      1: prefixlen_diff
                        76      LOAD_FAST                       1: prefixlen_diff
                        78      LOAD_CONST                      5: 0
                        80      COMPARE_OP                      0 (<)
                        82      POP_JUMP_IF_FALSE               46 (to 92)
                        84      LOAD_GLOBAL                     2: ValueError
                        86      LOAD_CONST                      6: 'prefix length diff must be > 0'
                        88      CALL_FUNCTION                   1
                        90      RAISE_VARARGS                   1
                        92      LOAD_FAST                       0: self
                        94      LOAD_ATTR                       0: _prefixlen
                        96      LOAD_FAST                       1: prefixlen_diff
                        98      BINARY_ADD                      
                        100     STORE_FAST                      3: new_prefixlen
                        102     LOAD_FAST                       3: new_prefixlen
                        104     LOAD_FAST                       0: self
                        106     LOAD_ATTR                       1: _max_prefixlen
                        108     COMPARE_OP                      4 (>)
                        110     POP_JUMP_IF_FALSE               64 (to 128)
                        112     LOAD_GLOBAL                     2: ValueError
                        114     LOAD_CONST                      7: 'prefix length diff %d is invalid for netblock %s'
                        116     LOAD_FAST                       3: new_prefixlen
                        118     LOAD_FAST                       0: self
                        120     BUILD_TUPLE                     2
                        122     BINARY_MODULO                   
                        124     CALL_FUNCTION                   1
                        126     RAISE_VARARGS                   1
                        128     LOAD_GLOBAL                     3: int
                        130     LOAD_FAST                       0: self
                        132     LOAD_ATTR                       4: network_address
                        134     CALL_FUNCTION                   1
                        136     STORE_FAST                      4: start
                        138     LOAD_GLOBAL                     3: int
                        140     LOAD_FAST                       0: self
                        142     LOAD_ATTR                       5: broadcast_address
                        144     CALL_FUNCTION                   1
                        146     LOAD_CONST                      3: 1
                        148     BINARY_ADD                      
                        150     STORE_FAST                      5: end
                        152     LOAD_GLOBAL                     3: int
                        154     LOAD_FAST                       0: self
                        156     LOAD_ATTR                       6: hostmask
                        158     CALL_FUNCTION                   1
                        160     LOAD_CONST                      3: 1
                        162     BINARY_ADD                      
                        164     LOAD_FAST                       1: prefixlen_diff
                        166     BINARY_RSHIFT                   
                        168     STORE_FAST                      6: step
                        170     LOAD_GLOBAL                     7: range
                        172     LOAD_FAST                       4: start
                        174     LOAD_FAST                       5: end
                        176     LOAD_FAST                       6: step
                        178     CALL_FUNCTION                   3
                        180     GET_ITER                        
                        182     FOR_ITER                        12 (to 208)
                        184     STORE_FAST                      7: new_addr
                        186     LOAD_FAST                       0: self
                        188     LOAD_METHOD                     8: __class__
                        190     LOAD_FAST                       7: new_addr
                        192     LOAD_FAST                       3: new_prefixlen
                        194     BUILD_TUPLE                     2
                        196     CALL_METHOD                     1
                        198     STORE_FAST                      8: current
                        200     LOAD_FAST                       8: current
                        202     YIELD_VALUE                     
                        204     POP_TOP                         
                        206     JUMP_ABSOLUTE                   91 (to 182)
                        208     LOAD_CONST                      1: None
                        210     RETURN_VALUE                    
                '_BaseNetwork.subnets'
                [Code]
                    File Name: ipaddress.py
                    Object Name: supernet
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_prefixlen'
                        'ValueError'
                        'prefixlen'
                        '__class__'
                        'int'
                        'network_address'
                        'netmask'
                    [Var Names]
                        'self'
                        'prefixlen_diff'
                        'new_prefix'
                        'new_prefixlen'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'The supernet containing the current network.\n\n        Args:\n            prefixlen_diff: An integer, the amount the prefix length of\n              the network should be decreased by.  For example, given a\n              /24 network and a prefixlen_diff of 3, a supernet with a\n              /21 netmask is returned.\n\n        Returns:\n            An IPv4 network object.\n\n        Raises:\n            ValueError: If self.prefixlen - prefixlen_diff < 0. I.e., you have\n              a negative prefix length.\n                OR\n            If prefixlen_diff and new_prefix are both set or new_prefix is a\n              larger number than the current prefix (larger number means a\n              smaller network)\n\n        '
                        0
                        None
                        'new prefix must be shorter'
                        1
                        'cannot set prefixlen_diff and new_prefix'
                        'current prefixlen is %d, cannot have a prefixlen_diff of %d'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _prefixlen
                        4       LOAD_CONST                      1: 0
                        6       COMPARE_OP                      2 (==)
                        8       POP_JUMP_IF_FALSE               7 (to 14)
                        10      LOAD_FAST                       0: self
                        12      RETURN_VALUE                    
                        14      LOAD_FAST                       2: new_prefix
                        16      LOAD_CONST                      2: None
                        18      IS_OP                           1 (is not)
                        20      POP_JUMP_IF_FALSE               33 (to 66)
                        22      LOAD_FAST                       2: new_prefix
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       0: _prefixlen
                        28      COMPARE_OP                      4 (>)
                        30      POP_JUMP_IF_FALSE               20 (to 40)
                        32      LOAD_GLOBAL                     1: ValueError
                        34      LOAD_CONST                      3: 'new prefix must be shorter'
                        36      CALL_FUNCTION                   1
                        38      RAISE_VARARGS                   1
                        40      LOAD_FAST                       1: prefixlen_diff
                        42      LOAD_CONST                      4: 1
                        44      COMPARE_OP                      3 (!=)
                        46      POP_JUMP_IF_FALSE               28 (to 56)
                        48      LOAD_GLOBAL                     1: ValueError
                        50      LOAD_CONST                      5: 'cannot set prefixlen_diff and new_prefix'
                        52      CALL_FUNCTION                   1
                        54      RAISE_VARARGS                   1
                        56      LOAD_FAST                       0: self
                        58      LOAD_ATTR                       0: _prefixlen
                        60      LOAD_FAST                       2: new_prefix
                        62      BINARY_SUBTRACT                 
                        64      STORE_FAST                      1: prefixlen_diff
                        66      LOAD_FAST                       0: self
                        68      LOAD_ATTR                       2: prefixlen
                        70      LOAD_FAST                       1: prefixlen_diff
                        72      BINARY_SUBTRACT                 
                        74      STORE_FAST                      3: new_prefixlen
                        76      LOAD_FAST                       3: new_prefixlen
                        78      LOAD_CONST                      1: 0
                        80      COMPARE_OP                      0 (<)
                        82      POP_JUMP_IF_FALSE               51 (to 102)
                        84      LOAD_GLOBAL                     1: ValueError
                        86      LOAD_CONST                      6: 'current prefixlen is %d, cannot have a prefixlen_diff of %d'
                        88      LOAD_FAST                       0: self
                        90      LOAD_ATTR                       2: prefixlen
                        92      LOAD_FAST                       1: prefixlen_diff
                        94      BUILD_TUPLE                     2
                        96      BINARY_MODULO                   
                        98      CALL_FUNCTION                   1
                        100     RAISE_VARARGS                   1
                        102     LOAD_FAST                       0: self
                        104     LOAD_METHOD                     3: __class__
                        106     LOAD_GLOBAL                     4: int
                        108     LOAD_FAST                       0: self
                        110     LOAD_ATTR                       5: network_address
                        112     CALL_FUNCTION                   1
                        114     LOAD_GLOBAL                     4: int
                        116     LOAD_FAST                       0: self
                        118     LOAD_ATTR                       6: netmask
                        120     CALL_FUNCTION                   1
                        122     LOAD_FAST                       1: prefixlen_diff
                        124     BINARY_LSHIFT                   
                        126     BINARY_AND                      
                        128     LOAD_FAST                       3: new_prefixlen
                        130     BUILD_TUPLE                     2
                        132     CALL_METHOD                     1
                        134     RETURN_VALUE                    
                '_BaseNetwork.supernet'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_multicast
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'is_multicast'
                        'broadcast_address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is reserved for multicast use.\n\n        Returns:\n            A boolean, True if the address is a multicast address.\n            See RFC 2373 2.7 for details.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: network_address
                        4       LOAD_ATTR                       1: is_multicast
                        6       JUMP_IF_FALSE_OR_POP            7 (to 14)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: broadcast_address
                        12      LOAD_ATTR                       1: is_multicast
                        14      RETURN_VALUE                    
                '_BaseNetwork.is_multicast'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _is_subnet_of
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_version'
                        'TypeError'
                        'network_address'
                        'broadcast_address'
                        'AttributeError'
                    [Var Names]
                        'a'
                        'b'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        ' and '
                        ' are not of the same version'
                        'Unable to test subnet containment between '
                    [Disassembly]
                        0       SETUP_FINALLY                   29 (to 60)
                        2       LOAD_FAST                       0: a
                        4       LOAD_ATTR                       0: _version
                        6       LOAD_FAST                       1: b
                        8       LOAD_ATTR                       0: _version
                        10      COMPARE_OP                      3 (!=)
                        12      POP_JUMP_IF_FALSE               17 (to 34)
                        14      LOAD_GLOBAL                     1: TypeError
                        16      LOAD_FAST                       0: a
                        18      FORMAT_VALUE                    0 (FVC_NONE)
                        20      LOAD_CONST                      1: ' and '
                        22      LOAD_FAST                       1: b
                        24      FORMAT_VALUE                    0 (FVC_NONE)
                        26      LOAD_CONST                      2: ' are not of the same version'
                        28      BUILD_STRING                    4
                        30      CALL_FUNCTION                   1
                        32      RAISE_VARARGS                   1
                        34      LOAD_FAST                       1: b
                        36      LOAD_ATTR                       2: network_address
                        38      LOAD_FAST                       0: a
                        40      LOAD_ATTR                       2: network_address
                        42      COMPARE_OP                      1 (<=)
                        44      JUMP_IF_FALSE_OR_POP            28 (to 56)
                        46      LOAD_FAST                       1: b
                        48      LOAD_ATTR                       3: broadcast_address
                        50      LOAD_FAST                       0: a
                        52      LOAD_ATTR                       3: broadcast_address
                        54      COMPARE_OP                      5 (>=)
                        56      POP_BLOCK                       
                        58      RETURN_VALUE                    
                        60      DUP_TOP                         
                        62      LOAD_GLOBAL                     4: AttributeError
                        64      JUMP_IF_NOT_EXC_MATCH           46 (to 92)
                        66      POP_TOP                         
                        68      POP_TOP                         
                        70      POP_TOP                         
                        72      LOAD_GLOBAL                     1: TypeError
                        74      LOAD_CONST                      3: 'Unable to test subnet containment between '
                        76      LOAD_FAST                       0: a
                        78      FORMAT_VALUE                    0 (FVC_NONE)
                        80      LOAD_CONST                      1: ' and '
                        82      LOAD_FAST                       1: b
                        84      FORMAT_VALUE                    0 (FVC_NONE)
                        86      BUILD_STRING                    4
                        88      CALL_FUNCTION                   1
                        90      RAISE_VARARGS                   1
                        92      RERAISE                         0
                '_BaseNetwork._is_subnet_of'
                [Code]
                    File Name: ipaddress.py
                    Object Name: subnet_of
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_subnet_of'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if this network is a subnet of other.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _is_subnet_of
                        4       LOAD_FAST                       0: self
                        6       LOAD_FAST                       1: other
                        8       CALL_METHOD                     2
                        10      RETURN_VALUE                    
                '_BaseNetwork.subnet_of'
                [Code]
                    File Name: ipaddress.py
                    Object Name: supernet_of
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_is_subnet_of'
                    [Var Names]
                        'self'
                        'other'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return True if this network is a supernet of other.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _is_subnet_of
                        4       LOAD_FAST                       1: other
                        6       LOAD_FAST                       0: self
                        8       CALL_METHOD                     2
                        10      RETURN_VALUE                    
                '_BaseNetwork.supernet_of'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_reserved
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'is_reserved'
                        'broadcast_address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is otherwise IETF reserved.\n\n        Returns:\n            A boolean, True if the address is within one of the\n            reserved IPv6 Network ranges.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: network_address
                        4       LOAD_ATTR                       1: is_reserved
                        6       JUMP_IF_FALSE_OR_POP            7 (to 14)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: broadcast_address
                        12      LOAD_ATTR                       1: is_reserved
                        14      RETURN_VALUE                    
                '_BaseNetwork.is_reserved'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_link_local
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'is_link_local'
                        'broadcast_address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is reserved for link-local.\n\n        Returns:\n            A boolean, True if the address is reserved per RFC 4291.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: network_address
                        4       LOAD_ATTR                       1: is_link_local
                        6       JUMP_IF_FALSE_OR_POP            7 (to 14)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: broadcast_address
                        12      LOAD_ATTR                       1: is_link_local
                        14      RETURN_VALUE                    
                '_BaseNetwork.is_link_local'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_private
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'is_private'
                        'broadcast_address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if this address is allocated for private networks.\n\n        Returns:\n            A boolean, True if the address is reserved per\n            iana-ipv4-special-registry or iana-ipv6-special-registry.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: network_address
                        4       LOAD_ATTR                       1: is_private
                        6       JUMP_IF_FALSE_OR_POP            7 (to 14)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: broadcast_address
                        12      LOAD_ATTR                       1: is_private
                        14      RETURN_VALUE                    
                '_BaseNetwork.is_private'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_global
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'is_private'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if this address is allocated for public networks.\n\n        Returns:\n            A boolean, True if the address is not reserved per\n            iana-ipv4-special-registry or iana-ipv6-special-registry.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: is_private
                        4       UNARY_NOT                       
                        6       RETURN_VALUE                    
                '_BaseNetwork.is_global'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_unspecified
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'is_unspecified'
                        'broadcast_address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is unspecified.\n\n        Returns:\n            A boolean, True if this is the unspecified address as defined in\n            RFC 2373 2.5.2.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: network_address
                        4       LOAD_ATTR                       1: is_unspecified
                        6       JUMP_IF_FALSE_OR_POP            7 (to 14)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: broadcast_address
                        12      LOAD_ATTR                       1: is_unspecified
                        14      RETURN_VALUE                    
                '_BaseNetwork.is_unspecified'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_loopback
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'is_loopback'
                        'broadcast_address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is a loopback address.\n\n        Returns:\n            A boolean, True if the address is a loopback address as defined in\n            RFC 2373 2.5.3.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: network_address
                        4       LOAD_ATTR                       1: is_loopback
                        6       JUMP_IF_FALSE_OR_POP            7 (to 14)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: broadcast_address
                        12      LOAD_ATTR                       1: is_loopback
                        14      RETURN_VALUE                    
                '_BaseNetwork.is_loopback'
                (
                    1
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_BaseNetwork'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A generic IP network object.\n\n    This IP class contains the version independent methods which are\n    used by networks.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __repr__
                14      LOAD_CONST                      3: '_BaseNetwork.__repr__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __repr__
                20      LOAD_CONST                      4: <CODE> __str__
                22      LOAD_CONST                      5: '_BaseNetwork.__str__'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: __str__
                28      LOAD_CONST                      6: <CODE> hosts
                30      LOAD_CONST                      7: '_BaseNetwork.hosts'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: hosts
                36      LOAD_CONST                      8: <CODE> __iter__
                38      LOAD_CONST                      9: '_BaseNetwork.__iter__'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: __iter__
                44      LOAD_CONST                      10: <CODE> __getitem__
                46      LOAD_CONST                      11: '_BaseNetwork.__getitem__'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      8: __getitem__
                52      LOAD_CONST                      12: <CODE> __lt__
                54      LOAD_CONST                      13: '_BaseNetwork.__lt__'
                56      MAKE_FUNCTION                   0
                58      STORE_NAME                      9: __lt__
                60      LOAD_CONST                      14: <CODE> __eq__
                62      LOAD_CONST                      15: '_BaseNetwork.__eq__'
                64      MAKE_FUNCTION                   0
                66      STORE_NAME                      10: __eq__
                68      LOAD_CONST                      16: <CODE> __hash__
                70      LOAD_CONST                      17: '_BaseNetwork.__hash__'
                72      MAKE_FUNCTION                   0
                74      STORE_NAME                      11: __hash__
                76      LOAD_CONST                      18: <CODE> __contains__
                78      LOAD_CONST                      19: '_BaseNetwork.__contains__'
                80      MAKE_FUNCTION                   0
                82      STORE_NAME                      12: __contains__
                84      LOAD_CONST                      20: <CODE> overlaps
                86      LOAD_CONST                      21: '_BaseNetwork.overlaps'
                88      MAKE_FUNCTION                   0
                90      STORE_NAME                      13: overlaps
                92      LOAD_NAME                       14: functools
                94      LOAD_ATTR                       15: cached_property
                96      LOAD_CONST                      22: <CODE> broadcast_address
                98      LOAD_CONST                      23: '_BaseNetwork.broadcast_address'
                100     MAKE_FUNCTION                   0
                102     CALL_FUNCTION                   1
                104     STORE_NAME                      16: broadcast_address
                106     LOAD_NAME                       14: functools
                108     LOAD_ATTR                       15: cached_property
                110     LOAD_CONST                      24: <CODE> hostmask
                112     LOAD_CONST                      25: '_BaseNetwork.hostmask'
                114     MAKE_FUNCTION                   0
                116     CALL_FUNCTION                   1
                118     STORE_NAME                      17: hostmask
                120     LOAD_NAME                       18: property
                122     LOAD_CONST                      26: <CODE> with_prefixlen
                124     LOAD_CONST                      27: '_BaseNetwork.with_prefixlen'
                126     MAKE_FUNCTION                   0
                128     CALL_FUNCTION                   1
                130     STORE_NAME                      19: with_prefixlen
                132     LOAD_NAME                       18: property
                134     LOAD_CONST                      28: <CODE> with_netmask
                136     LOAD_CONST                      29: '_BaseNetwork.with_netmask'
                138     MAKE_FUNCTION                   0
                140     CALL_FUNCTION                   1
                142     STORE_NAME                      20: with_netmask
                144     LOAD_NAME                       18: property
                146     LOAD_CONST                      30: <CODE> with_hostmask
                148     LOAD_CONST                      31: '_BaseNetwork.with_hostmask'
                150     MAKE_FUNCTION                   0
                152     CALL_FUNCTION                   1
                154     STORE_NAME                      21: with_hostmask
                156     LOAD_NAME                       18: property
                158     LOAD_CONST                      32: <CODE> num_addresses
                160     LOAD_CONST                      33: '_BaseNetwork.num_addresses'
                162     MAKE_FUNCTION                   0
                164     CALL_FUNCTION                   1
                166     STORE_NAME                      22: num_addresses
                168     LOAD_NAME                       18: property
                170     LOAD_CONST                      34: <CODE> _address_class
                172     LOAD_CONST                      35: '_BaseNetwork._address_class'
                174     MAKE_FUNCTION                   0
                176     CALL_FUNCTION                   1
                178     STORE_NAME                      23: _address_class
                180     LOAD_NAME                       18: property
                182     LOAD_CONST                      36: <CODE> prefixlen
                184     LOAD_CONST                      37: '_BaseNetwork.prefixlen'
                186     MAKE_FUNCTION                   0
                188     CALL_FUNCTION                   1
                190     STORE_NAME                      24: prefixlen
                192     LOAD_CONST                      38: <CODE> address_exclude
                194     LOAD_CONST                      39: '_BaseNetwork.address_exclude'
                196     MAKE_FUNCTION                   0
                198     STORE_NAME                      25: address_exclude
                200     LOAD_CONST                      40: <CODE> compare_networks
                202     LOAD_CONST                      41: '_BaseNetwork.compare_networks'
                204     MAKE_FUNCTION                   0
                206     STORE_NAME                      26: compare_networks
                208     LOAD_CONST                      42: <CODE> _get_networks_key
                210     LOAD_CONST                      43: '_BaseNetwork._get_networks_key'
                212     MAKE_FUNCTION                   0
                214     STORE_NAME                      27: _get_networks_key
                216     LOAD_CONST                      70: (1, None)
                218     LOAD_CONST                      46: <CODE> subnets
                220     LOAD_CONST                      47: '_BaseNetwork.subnets'
                222     MAKE_FUNCTION                   1
                224     STORE_NAME                      28: subnets
                226     LOAD_CONST                      70: (1, None)
                228     LOAD_CONST                      48: <CODE> supernet
                230     LOAD_CONST                      49: '_BaseNetwork.supernet'
                232     MAKE_FUNCTION                   1
                234     STORE_NAME                      29: supernet
                236     LOAD_NAME                       18: property
                238     LOAD_CONST                      50: <CODE> is_multicast
                240     LOAD_CONST                      51: '_BaseNetwork.is_multicast'
                242     MAKE_FUNCTION                   0
                244     CALL_FUNCTION                   1
                246     STORE_NAME                      30: is_multicast
                248     LOAD_NAME                       31: staticmethod
                250     LOAD_CONST                      52: <CODE> _is_subnet_of
                252     LOAD_CONST                      53: '_BaseNetwork._is_subnet_of'
                254     MAKE_FUNCTION                   0
                256     CALL_FUNCTION                   1
                258     STORE_NAME                      32: _is_subnet_of
                260     LOAD_CONST                      54: <CODE> subnet_of
                262     LOAD_CONST                      55: '_BaseNetwork.subnet_of'
                264     MAKE_FUNCTION                   0
                266     STORE_NAME                      33: subnet_of
                268     LOAD_CONST                      56: <CODE> supernet_of
                270     LOAD_CONST                      57: '_BaseNetwork.supernet_of'
                272     MAKE_FUNCTION                   0
                274     STORE_NAME                      34: supernet_of
                276     LOAD_NAME                       18: property
                278     LOAD_CONST                      58: <CODE> is_reserved
                280     LOAD_CONST                      59: '_BaseNetwork.is_reserved'
                282     MAKE_FUNCTION                   0
                284     CALL_FUNCTION                   1
                286     STORE_NAME                      35: is_reserved
                288     LOAD_NAME                       18: property
                290     LOAD_CONST                      60: <CODE> is_link_local
                292     LOAD_CONST                      61: '_BaseNetwork.is_link_local'
                294     MAKE_FUNCTION                   0
                296     CALL_FUNCTION                   1
                298     STORE_NAME                      36: is_link_local
                300     LOAD_NAME                       18: property
                302     LOAD_CONST                      62: <CODE> is_private
                304     LOAD_CONST                      63: '_BaseNetwork.is_private'
                306     MAKE_FUNCTION                   0
                308     CALL_FUNCTION                   1
                310     STORE_NAME                      37: is_private
                312     LOAD_NAME                       18: property
                314     LOAD_CONST                      64: <CODE> is_global
                316     LOAD_CONST                      65: '_BaseNetwork.is_global'
                318     MAKE_FUNCTION                   0
                320     CALL_FUNCTION                   1
                322     STORE_NAME                      38: is_global
                324     LOAD_NAME                       18: property
                326     LOAD_CONST                      66: <CODE> is_unspecified
                328     LOAD_CONST                      67: '_BaseNetwork.is_unspecified'
                330     MAKE_FUNCTION                   0
                332     CALL_FUNCTION                   1
                334     STORE_NAME                      39: is_unspecified
                336     LOAD_NAME                       18: property
                338     LOAD_CONST                      68: <CODE> is_loopback
                340     LOAD_CONST                      69: '_BaseNetwork.is_loopback'
                342     MAKE_FUNCTION                   0
                344     CALL_FUNCTION                   1
                346     STORE_NAME                      40: is_loopback
                348     LOAD_CONST                      45: None
                350     RETURN_VALUE                    
        '_BaseNetwork'
        [Code]
            File Name: ipaddress.py
            Object Name: _BaseV4
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '_version'
                'IPV4LENGTH'
                '_ALL_ONES'
                '_max_prefixlen'
                '_netmask_cache'
                '_explode_shorthand_ip_string'
                'classmethod'
                '_make_netmask'
                '_ip_int_from_string'
                '_parse_octet'
                '_string_from_ip_int'
                '_reverse_pointer'
                'property'
                'max_prefixlen'
                'version'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_BaseV4'
                'Base IPv4 object.\n\n    The following methods are used by IPv4 objects in both single IP\n    addresses and networks.\n\n    '
                (
                )
                4
                2
                1
                [Code]
                    File Name: ipaddress.py
                    Object Name: _explode_shorthand_ip_string
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'str'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: str
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       RETURN_VALUE                    
                '_BaseV4._explode_shorthand_ip_string'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _make_netmask
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_netmask_cache'
                        'isinstance'
                        'int'
                        '_max_prefixlen'
                        '_report_invalid_netmask'
                        '_prefix_from_prefix_string'
                        'NetmaskValueError'
                        '_prefix_from_ip_string'
                        'IPv4Address'
                        '_ip_int_from_prefix'
                    [Var Names]
                        'cls'
                        'arg'
                        'prefixlen'
                        'netmask'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Make a (netmask, prefix_len) tuple from the given argument.\n\n        Argument can be:\n        - an integer (the prefix length)\n        - a string representing the prefix length (e.g. "24")\n        - a string representing the prefix netmask (e.g. "255.255.255.0")\n        '
                        0
                    [Disassembly]
                        0       LOAD_FAST                       1: arg
                        2       LOAD_FAST                       0: cls
                        4       LOAD_ATTR                       0: _netmask_cache
                        6       CONTAINS_OP                     1 (not in)
                        8       POP_JUMP_IF_FALSE               66 (to 132)
                        10      LOAD_GLOBAL                     1: isinstance
                        12      LOAD_FAST                       1: arg
                        14      LOAD_GLOBAL                     2: int
                        16      CALL_FUNCTION                   2
                        18      POP_JUMP_IF_FALSE               30 (to 60)
                        20      LOAD_FAST                       1: arg
                        22      STORE_FAST                      2: prefixlen
                        24      LOAD_CONST                      1: 0
                        26      LOAD_FAST                       2: prefixlen
                        28      DUP_TOP                         
                        30      ROT_THREE                       
                        32      COMPARE_OP                      1 (<=)
                        34      POP_JUMP_IF_FALSE               23 (to 46)
                        36      LOAD_FAST                       0: cls
                        38      LOAD_ATTR                       3: _max_prefixlen
                        40      COMPARE_OP                      1 (<=)
                        42      POP_JUMP_IF_TRUE                29 (to 58)
                        44      JUMP_FORWARD                    1 (to 48)
                        46      POP_TOP                         
                        48      LOAD_FAST                       0: cls
                        50      LOAD_METHOD                     4: _report_invalid_netmask
                        52      LOAD_FAST                       2: prefixlen
                        54      CALL_METHOD                     1
                        56      POP_TOP                         
                        58      JUMP_FORWARD                    22 (to 104)
                        60      SETUP_FINALLY                   7 (to 76)
                        62      LOAD_FAST                       0: cls
                        64      LOAD_METHOD                     5: _prefix_from_prefix_string
                        66      LOAD_FAST                       1: arg
                        68      CALL_METHOD                     1
                        70      STORE_FAST                      2: prefixlen
                        72      POP_BLOCK                       
                        74      JUMP_FORWARD                    14 (to 104)
                        76      DUP_TOP                         
                        78      LOAD_GLOBAL                     6: NetmaskValueError
                        80      JUMP_IF_NOT_EXC_MATCH           51 (to 102)
                        82      POP_TOP                         
                        84      POP_TOP                         
                        86      POP_TOP                         
                        88      LOAD_FAST                       0: cls
                        90      LOAD_METHOD                     7: _prefix_from_ip_string
                        92      LOAD_FAST                       1: arg
                        94      CALL_METHOD                     1
                        96      STORE_FAST                      2: prefixlen
                        98      POP_EXCEPT                      
                        100     JUMP_FORWARD                    1 (to 104)
                        102     RERAISE                         0
                        104     LOAD_GLOBAL                     8: IPv4Address
                        106     LOAD_FAST                       0: cls
                        108     LOAD_METHOD                     9: _ip_int_from_prefix
                        110     LOAD_FAST                       2: prefixlen
                        112     CALL_METHOD                     1
                        114     CALL_FUNCTION                   1
                        116     STORE_FAST                      3: netmask
                        118     LOAD_FAST                       3: netmask
                        120     LOAD_FAST                       2: prefixlen
                        122     BUILD_TUPLE                     2
                        124     LOAD_FAST                       0: cls
                        126     LOAD_ATTR                       0: _netmask_cache
                        128     LOAD_FAST                       1: arg
                        130     STORE_SUBSCR                    
                        132     LOAD_FAST                       0: cls
                        134     LOAD_ATTR                       0: _netmask_cache
                        136     LOAD_FAST                       1: arg
                        138     BINARY_SUBSCR                   
                        140     RETURN_VALUE                    
                '_BaseV4._make_netmask'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _ip_int_from_string
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'AddressValueError'
                        'split'
                        'len'
                        'int'
                        'from_bytes'
                        'map'
                        '_parse_octet'
                        'ValueError'
                    [Var Names]
                        'cls'
                        'ip_str'
                        'octets'
                        'exc'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Turn the given IP string into an integer for comparison.\n\n        Args:\n            ip_str: A string, the IP ip_str.\n\n        Returns:\n            The IP ip_str as an integer.\n\n        Raises:\n            AddressValueError: if ip_str isn't a valid IPv4 Address.\n\n        "
                        'Address cannot be empty'
                        '.'
                        4
                        'Expected 4 octets in %r'
                        'big'
                        '%s in %r'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: ip_str
                        2       POP_JUMP_IF_TRUE                6 (to 12)
                        4       LOAD_GLOBAL                     0: AddressValueError
                        6       LOAD_CONST                      1: 'Address cannot be empty'
                        8       CALL_FUNCTION                   1
                        10      RAISE_VARARGS                   1
                        12      LOAD_FAST                       1: ip_str
                        14      LOAD_METHOD                     1: split
                        16      LOAD_CONST                      2: '.'
                        18      CALL_METHOD                     1
                        20      STORE_FAST                      2: octets
                        22      LOAD_GLOBAL                     2: len
                        24      LOAD_FAST                       2: octets
                        26      CALL_FUNCTION                   1
                        28      LOAD_CONST                      3: 4
                        30      COMPARE_OP                      3 (!=)
                        32      POP_JUMP_IF_FALSE               23 (to 46)
                        34      LOAD_GLOBAL                     0: AddressValueError
                        36      LOAD_CONST                      4: 'Expected 4 octets in %r'
                        38      LOAD_FAST                       1: ip_str
                        40      BINARY_MODULO                   
                        42      CALL_FUNCTION                   1
                        44      RAISE_VARARGS                   1
                        46      SETUP_FINALLY                   11 (to 70)
                        48      LOAD_GLOBAL                     3: int
                        50      LOAD_METHOD                     4: from_bytes
                        52      LOAD_GLOBAL                     5: map
                        54      LOAD_FAST                       0: cls
                        56      LOAD_ATTR                       6: _parse_octet
                        58      LOAD_FAST                       2: octets
                        60      CALL_FUNCTION                   2
                        62      LOAD_CONST                      5: 'big'
                        64      CALL_METHOD                     2
                        66      POP_BLOCK                       
                        68      RETURN_VALUE                    
                        70      DUP_TOP                         
                        72      LOAD_GLOBAL                     7: ValueError
                        74      JUMP_IF_NOT_EXC_MATCH           55 (to 110)
                        76      POP_TOP                         
                        78      STORE_FAST                      3: exc
                        80      POP_TOP                         
                        82      SETUP_FINALLY                   9 (to 102)
                        84      LOAD_GLOBAL                     0: AddressValueError
                        86      LOAD_CONST                      6: '%s in %r'
                        88      LOAD_FAST                       3: exc
                        90      LOAD_FAST                       1: ip_str
                        92      BUILD_TUPLE                     2
                        94      BINARY_MODULO                   
                        96      CALL_FUNCTION                   1
                        98      LOAD_CONST                      7: None
                        100     RAISE_VARARGS                   2
                        102     LOAD_CONST                      7: None
                        104     STORE_FAST                      3: exc
                        106     DELETE_FAST                     3: exc
                        108     RERAISE                         1
                        110     RERAISE                         0
                '_BaseV4._ip_int_from_string'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _parse_octet
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ValueError'
                        'isascii'
                        'isdigit'
                        'len'
                        'int'
                    [Var Names]
                        'cls'
                        'octet_str'
                        'msg'
                        'octet_int'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Convert a decimal octet into an integer.\n\n        Args:\n            octet_str: A string, the number to parse.\n\n        Returns:\n            The octet as an integer.\n\n        Raises:\n            ValueError: if the octet isn't strictly a decimal from [0..255].\n\n        "
                        'Empty octet not permitted'
                        'Only decimal digits permitted in %r'
                        3
                        'At most 3 characters permitted in %r'
                        '0'
                        0
                        'Leading zeros are not permitted in %r'
                        10
                        255
                        'Octet %d (> 255) not permitted'
                    [Disassembly]
                        0       LOAD_FAST                       1: octet_str
                        2       POP_JUMP_IF_TRUE                6 (to 12)
                        4       LOAD_GLOBAL                     0: ValueError
                        6       LOAD_CONST                      1: 'Empty octet not permitted'
                        8       CALL_FUNCTION                   1
                        10      RAISE_VARARGS                   1
                        12      LOAD_FAST                       1: octet_str
                        14      LOAD_METHOD                     1: isascii
                        16      CALL_METHOD                     0
                        18      POP_JUMP_IF_FALSE               14 (to 28)
                        20      LOAD_FAST                       1: octet_str
                        22      LOAD_METHOD                     2: isdigit
                        24      CALL_METHOD                     0
                        26      POP_JUMP_IF_TRUE                22 (to 44)
                        28      LOAD_CONST                      2: 'Only decimal digits permitted in %r'
                        30      STORE_FAST                      2: msg
                        32      LOAD_GLOBAL                     0: ValueError
                        34      LOAD_FAST                       2: msg
                        36      LOAD_FAST                       1: octet_str
                        38      BINARY_MODULO                   
                        40      CALL_FUNCTION                   1
                        42      RAISE_VARARGS                   1
                        44      LOAD_GLOBAL                     3: len
                        46      LOAD_FAST                       1: octet_str
                        48      CALL_FUNCTION                   1
                        50      LOAD_CONST                      3: 3
                        52      COMPARE_OP                      4 (>)
                        54      POP_JUMP_IF_FALSE               36 (to 72)
                        56      LOAD_CONST                      4: 'At most 3 characters permitted in %r'
                        58      STORE_FAST                      2: msg
                        60      LOAD_GLOBAL                     0: ValueError
                        62      LOAD_FAST                       2: msg
                        64      LOAD_FAST                       1: octet_str
                        66      BINARY_MODULO                   
                        68      CALL_FUNCTION                   1
                        70      RAISE_VARARGS                   1
                        72      LOAD_FAST                       1: octet_str
                        74      LOAD_CONST                      5: '0'
                        76      COMPARE_OP                      3 (!=)
                        78      POP_JUMP_IF_FALSE               54 (to 108)
                        80      LOAD_FAST                       1: octet_str
                        82      LOAD_CONST                      6: 0
                        84      BINARY_SUBSCR                   
                        86      LOAD_CONST                      5: '0'
                        88      COMPARE_OP                      2 (==)
                        90      POP_JUMP_IF_FALSE               54 (to 108)
                        92      LOAD_CONST                      7: 'Leading zeros are not permitted in %r'
                        94      STORE_FAST                      2: msg
                        96      LOAD_GLOBAL                     0: ValueError
                        98      LOAD_FAST                       2: msg
                        100     LOAD_FAST                       1: octet_str
                        102     BINARY_MODULO                   
                        104     CALL_FUNCTION                   1
                        106     RAISE_VARARGS                   1
                        108     LOAD_GLOBAL                     4: int
                        110     LOAD_FAST                       1: octet_str
                        112     LOAD_CONST                      8: 10
                        114     CALL_FUNCTION                   2
                        116     STORE_FAST                      3: octet_int
                        118     LOAD_FAST                       3: octet_int
                        120     LOAD_CONST                      9: 255
                        122     COMPARE_OP                      4 (>)
                        124     POP_JUMP_IF_FALSE               69 (to 138)
                        126     LOAD_GLOBAL                     0: ValueError
                        128     LOAD_CONST                      10: 'Octet %d (> 255) not permitted'
                        130     LOAD_FAST                       3: octet_int
                        132     BINARY_MODULO                   
                        134     CALL_FUNCTION                   1
                        136     RAISE_VARARGS                   1
                        138     LOAD_FAST                       3: octet_int
                        140     RETURN_VALUE                    
                '_BaseV4._parse_octet'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _string_from_ip_int
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'join'
                        'map'
                        'str'
                        'to_bytes'
                    [Var Names]
                        'cls'
                        'ip_int'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Turns a 32-bit integer into dotted decimal notation.\n\n        Args:\n            ip_int: An integer, the IP address.\n\n        Returns:\n            The IP address as a string in dotted decimal notation.\n\n        '
                        '.'
                        4
                        'big'
                    [Disassembly]
                        0       LOAD_CONST                      1: '.'
                        2       LOAD_METHOD                     0: join
                        4       LOAD_GLOBAL                     1: map
                        6       LOAD_GLOBAL                     2: str
                        8       LOAD_FAST                       1: ip_int
                        10      LOAD_METHOD                     3: to_bytes
                        12      LOAD_CONST                      2: 4
                        14      LOAD_CONST                      3: 'big'
                        16      CALL_METHOD                     2
                        18      CALL_FUNCTION                   2
                        20      CALL_METHOD                     1
                        22      RETURN_VALUE                    
                '_BaseV4._string_from_ip_int'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _reverse_pointer
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'str'
                        'split'
                        'join'
                    [Var Names]
                        'self'
                        'reverse_octets'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the reverse DNS pointer name for the IPv4 address.\n\n        This implements the method described in RFC1035 3.5.\n\n        '
                        '.'
                        None
                        -1
                        '.in-addr.arpa'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: str
                        2       LOAD_FAST                       0: self
                        4       CALL_FUNCTION                   1
                        6       LOAD_METHOD                     1: split
                        8       LOAD_CONST                      1: '.'
                        10      CALL_METHOD                     1
                        12      LOAD_CONST                      2: None
                        14      LOAD_CONST                      2: None
                        16      LOAD_CONST                      3: -1
                        18      BUILD_SLICE                     3
                        20      BINARY_SUBSCR                   
                        22      STORE_FAST                      1: reverse_octets
                        24      LOAD_CONST                      1: '.'
                        26      LOAD_METHOD                     2: join
                        28      LOAD_FAST                       1: reverse_octets
                        30      CALL_METHOD                     1
                        32      LOAD_CONST                      4: '.in-addr.arpa'
                        34      BINARY_ADD                      
                        36      RETURN_VALUE                    
                '_BaseV4._reverse_pointer'
                [Code]
                    File Name: ipaddress.py
                    Object Name: max_prefixlen
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_max_prefixlen'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _max_prefixlen
                        4       RETURN_VALUE                    
                '_BaseV4.max_prefixlen'
                [Code]
                    File Name: ipaddress.py
                    Object Name: version
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_version'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _version
                        4       RETURN_VALUE                    
                '_BaseV4.version'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_BaseV4'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Base IPv4 object.\n\n    The following methods are used by IPv4 objects in both single IP\n    addresses and networks.\n\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: 4
                18      STORE_NAME                      5: _version
                20      LOAD_CONST                      4: 2
                22      LOAD_NAME                       6: IPV4LENGTH
                24      BINARY_POWER                    
                26      LOAD_CONST                      5: 1
                28      BINARY_SUBTRACT                 
                30      STORE_NAME                      7: _ALL_ONES
                32      LOAD_NAME                       6: IPV4LENGTH
                34      STORE_NAME                      8: _max_prefixlen
                36      BUILD_MAP                       0
                38      STORE_NAME                      9: _netmask_cache
                40      LOAD_CONST                      6: <CODE> _explode_shorthand_ip_string
                42      LOAD_CONST                      7: '_BaseV4._explode_shorthand_ip_string'
                44      MAKE_FUNCTION                   0
                46      STORE_NAME                      10: _explode_shorthand_ip_string
                48      LOAD_NAME                       11: classmethod
                50      LOAD_CONST                      8: <CODE> _make_netmask
                52      LOAD_CONST                      9: '_BaseV4._make_netmask'
                54      MAKE_FUNCTION                   0
                56      CALL_FUNCTION                   1
                58      STORE_NAME                      12: _make_netmask
                60      LOAD_NAME                       11: classmethod
                62      LOAD_CONST                      10: <CODE> _ip_int_from_string
                64      LOAD_CONST                      11: '_BaseV4._ip_int_from_string'
                66      MAKE_FUNCTION                   0
                68      CALL_FUNCTION                   1
                70      STORE_NAME                      13: _ip_int_from_string
                72      LOAD_NAME                       11: classmethod
                74      LOAD_CONST                      12: <CODE> _parse_octet
                76      LOAD_CONST                      13: '_BaseV4._parse_octet'
                78      MAKE_FUNCTION                   0
                80      CALL_FUNCTION                   1
                82      STORE_NAME                      14: _parse_octet
                84      LOAD_NAME                       11: classmethod
                86      LOAD_CONST                      14: <CODE> _string_from_ip_int
                88      LOAD_CONST                      15: '_BaseV4._string_from_ip_int'
                90      MAKE_FUNCTION                   0
                92      CALL_FUNCTION                   1
                94      STORE_NAME                      15: _string_from_ip_int
                96      LOAD_CONST                      16: <CODE> _reverse_pointer
                98      LOAD_CONST                      17: '_BaseV4._reverse_pointer'
                100     MAKE_FUNCTION                   0
                102     STORE_NAME                      16: _reverse_pointer
                104     LOAD_NAME                       17: property
                106     LOAD_CONST                      18: <CODE> max_prefixlen
                108     LOAD_CONST                      19: '_BaseV4.max_prefixlen'
                110     MAKE_FUNCTION                   0
                112     CALL_FUNCTION                   1
                114     STORE_NAME                      18: max_prefixlen
                116     LOAD_NAME                       17: property
                118     LOAD_CONST                      20: <CODE> version
                120     LOAD_CONST                      21: '_BaseV4.version'
                122     MAKE_FUNCTION                   0
                124     CALL_FUNCTION                   1
                126     STORE_NAME                      19: version
                128     LOAD_CONST                      22: None
                130     RETURN_VALUE                    
        '_BaseV4'
        [Code]
            File Name: ipaddress.py
            Object Name: IPv4Address
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__init__'
                'property'
                'packed'
                'is_reserved'
                'functools'
                'lru_cache'
                'is_private'
                'is_global'
                'is_multicast'
                'is_unspecified'
                'is_loopback'
                'is_link_local'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'IPv4Address'
                'Represent and manipulate single IPv4 Addresses.'
                (
                    '_ip'
                    '__weakref__'
                )
                [Code]
                    File Name: ipaddress.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'int'
                        '_check_int_address'
                        '_ip'
                        'bytes'
                        '_check_packed_address'
                        'from_bytes'
                        'str'
                        'AddressValueError'
                        '_ip_int_from_string'
                    [Var Names]
                        'self'
                        'address'
                        'addr_str'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "\n        Args:\n            address: A string or integer representing the IP\n\n              Additionally, an integer can be passed, so\n              IPv4Address('192.0.2.1') == IPv4Address(3221225985).\n              or, more generally\n              IPv4Address(int(IPv4Address('192.0.2.1'))) ==\n                IPv4Address('192.0.2.1')\n\n        Raises:\n            AddressValueError: If ipaddress isn't a valid IPv4 address.\n\n        "
                        None
                        4
                        'big'
                        '/'
                        "Unexpected '/' in "
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: address
                        4       LOAD_GLOBAL                     1: int
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               15 (to 30)
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     2: _check_int_address
                        14      LOAD_FAST                       1: address
                        16      CALL_METHOD                     1
                        18      POP_TOP                         
                        20      LOAD_FAST                       1: address
                        22      LOAD_FAST                       0: self
                        24      STORE_ATTR                      3: _ip
                        26      LOAD_CONST                      1: None
                        28      RETURN_VALUE                    
                        30      LOAD_GLOBAL                     0: isinstance
                        32      LOAD_FAST                       1: address
                        34      LOAD_GLOBAL                     4: bytes
                        36      CALL_FUNCTION                   2
                        38      POP_JUMP_IF_FALSE               35 (to 70)
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     5: _check_packed_address
                        44      LOAD_FAST                       1: address
                        46      LOAD_CONST                      2: 4
                        48      CALL_METHOD                     2
                        50      POP_TOP                         
                        52      LOAD_GLOBAL                     1: int
                        54      LOAD_METHOD                     6: from_bytes
                        56      LOAD_FAST                       1: address
                        58      LOAD_CONST                      3: 'big'
                        60      CALL_METHOD                     2
                        62      LOAD_FAST                       0: self
                        64      STORE_ATTR                      3: _ip
                        66      LOAD_CONST                      1: None
                        68      RETURN_VALUE                    
                        70      LOAD_GLOBAL                     7: str
                        72      LOAD_FAST                       1: address
                        74      CALL_FUNCTION                   1
                        76      STORE_FAST                      2: addr_str
                        78      LOAD_CONST                      4: '/'
                        80      LOAD_FAST                       2: addr_str
                        82      CONTAINS_OP                     0 (in)
                        84      POP_JUMP_IF_FALSE               50 (to 100)
                        86      LOAD_GLOBAL                     8: AddressValueError
                        88      LOAD_CONST                      5: "Unexpected '/' in "
                        90      LOAD_FAST                       1: address
                        92      FORMAT_VALUE                    2 (FVC_REPR)
                        94      BUILD_STRING                    2
                        96      CALL_FUNCTION                   1
                        98      RAISE_VARARGS                   1
                        100     LOAD_FAST                       0: self
                        102     LOAD_METHOD                     9: _ip_int_from_string
                        104     LOAD_FAST                       2: addr_str
                        106     CALL_METHOD                     1
                        108     LOAD_FAST                       0: self
                        110     STORE_ATTR                      3: _ip
                        112     LOAD_CONST                      1: None
                        114     RETURN_VALUE                    
                'IPv4Address.__init__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: packed
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'v4_int_to_packed'
                        '_ip'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'The binary representation of this address.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: v4_int_to_packed
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _ip
                        6       CALL_FUNCTION                   1
                        8       RETURN_VALUE                    
                'IPv4Address.packed'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_reserved
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_constants'
                        '_reserved_network'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is otherwise IETF reserved.\n\n         Returns:\n             A boolean, True if the address is within the\n             reserved IPv4 Network range.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _constants
                        6       LOAD_ATTR                       1: _reserved_network
                        8       CONTAINS_OP                     0 (in)
                        10      RETURN_VALUE                    
                'IPv4Address.is_reserved'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_private
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'any'
                        '_constants'
                        '_private_networks'
                        'all'
                        '_private_networks_exceptions'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        '``True`` if the address is defined as not globally reachable by\n        iana-ipv4-special-registry_ (for IPv4) or iana-ipv6-special-registry_\n        (for IPv6) with the following exceptions:\n\n        * ``is_private`` is ``False`` for ``100.64.0.0/10``\n        * For IPv4-mapped IPv6-addresses the ``is_private`` value is determined by the\n            semantics of the underlying IPv4 addresses and the following condition holds\n            (see :attr:`IPv6Address.ipv4_mapped`)::\n\n                address.is_private == address.ipv4_mapped.is_private\n\n        ``is_private`` has value opposite to :attr:`is_global`, except for the ``100.64.0.0/10``\n        IPv4 range where they are both ``False``.\n        '
                        [Code]
                            File Name: ipaddress.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                            [Var Names]
                                '.0'
                                'net'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: net
                                8       LOAD_DEREF                      0: self
                                10      LOAD_FAST                       1: net
                                12      CONTAINS_OP                     0 (in)
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'IPv4Address.is_private.<locals>.<genexpr>'
                        [Code]
                            File Name: ipaddress.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                            [Var Names]
                                '.0'
                                'net'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: net
                                8       LOAD_DEREF                      0: self
                                10      LOAD_FAST                       1: net
                                12      CONTAINS_OP                     1 (not in)
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: any
                        2       LOAD_CLOSURE                    0: self
                        4       BUILD_TUPLE                     1
                        6       LOAD_CONST                      1: <CODE> <genexpr>
                        8       LOAD_CONST                      2: 'IPv4Address.is_private.<locals>.<genexpr>'
                        10      MAKE_FUNCTION                   8
                        12      LOAD_DEREF                      0: self
                        14      LOAD_ATTR                       1: _constants
                        16      LOAD_ATTR                       2: _private_networks
                        18      GET_ITER                        
                        20      CALL_FUNCTION                   1
                        22      CALL_FUNCTION                   1
                        24      JUMP_IF_FALSE_OR_POP            25 (to 50)
                        26      LOAD_GLOBAL                     3: all
                        28      LOAD_CLOSURE                    0: self
                        30      BUILD_TUPLE                     1
                        32      LOAD_CONST                      3: <CODE> <genexpr>
                        34      LOAD_CONST                      2: 'IPv4Address.is_private.<locals>.<genexpr>'
                        36      MAKE_FUNCTION                   8
                        38      LOAD_DEREF                      0: self
                        40      LOAD_ATTR                       1: _constants
                        42      LOAD_ATTR                       4: _private_networks_exceptions
                        44      GET_ITER                        
                        46      CALL_FUNCTION                   1
                        48      CALL_FUNCTION                   1
                        50      RETURN_VALUE                    
                'IPv4Address.is_private'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_global
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_constants'
                        '_public_network'
                        'is_private'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '``True`` if the address is defined as globally reachable by\n        iana-ipv4-special-registry_ (for IPv4) or iana-ipv6-special-registry_\n        (for IPv6) with the following exception:\n\n        For IPv4-mapped IPv6-addresses the ``is_private`` value is determined by the\n        semantics of the underlying IPv4 addresses and the following condition holds\n        (see :attr:`IPv6Address.ipv4_mapped`)::\n\n            address.is_global == address.ipv4_mapped.is_global\n\n        ``is_global`` has value opposite to :attr:`is_private`, except for the ``100.64.0.0/10``\n        IPv4 range where they are both ``False``.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _constants
                        6       LOAD_ATTR                       1: _public_network
                        8       CONTAINS_OP                     1 (not in)
                        10      JUMP_IF_FALSE_OR_POP            9 (to 18)
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: is_private
                        16      UNARY_NOT                       
                        18      RETURN_VALUE                    
                'IPv4Address.is_global'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_multicast
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_constants'
                        '_multicast_network'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is reserved for multicast use.\n\n        Returns:\n            A boolean, True if the address is multicast.\n            See RFC 3171 for details.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _constants
                        6       LOAD_ATTR                       1: _multicast_network
                        8       CONTAINS_OP                     0 (in)
                        10      RETURN_VALUE                    
                'IPv4Address.is_multicast'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_unspecified
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_constants'
                        '_unspecified_address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is unspecified.\n\n        Returns:\n            A boolean, True if this is the unspecified address as defined in\n            RFC 5735 3.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _constants
                        6       LOAD_ATTR                       1: _unspecified_address
                        8       COMPARE_OP                      2 (==)
                        10      RETURN_VALUE                    
                'IPv4Address.is_unspecified'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_loopback
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_constants'
                        '_loopback_network'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is a loopback address.\n\n        Returns:\n            A boolean, True if the address is a loopback per RFC 3330.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _constants
                        6       LOAD_ATTR                       1: _loopback_network
                        8       CONTAINS_OP                     0 (in)
                        10      RETURN_VALUE                    
                'IPv4Address.is_loopback'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_link_local
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_constants'
                        '_linklocal_network'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is reserved for link-local.\n\n        Returns:\n            A boolean, True if the address is link-local per RFC 3927.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _constants
                        6       LOAD_ATTR                       1: _linklocal_network
                        8       CONTAINS_OP                     0 (in)
                        10      RETURN_VALUE                    
                'IPv4Address.is_link_local'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'IPv4Address'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Represent and manipulate single IPv4 Addresses.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ('_ip', '__weakref__')
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: <CODE> __init__
                18      LOAD_CONST                      4: 'IPv4Address.__init__'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      5: __init__
                24      LOAD_NAME                       6: property
                26      LOAD_CONST                      5: <CODE> packed
                28      LOAD_CONST                      6: 'IPv4Address.packed'
                30      MAKE_FUNCTION                   0
                32      CALL_FUNCTION                   1
                34      STORE_NAME                      7: packed
                36      LOAD_NAME                       6: property
                38      LOAD_CONST                      7: <CODE> is_reserved
                40      LOAD_CONST                      8: 'IPv4Address.is_reserved'
                42      MAKE_FUNCTION                   0
                44      CALL_FUNCTION                   1
                46      STORE_NAME                      8: is_reserved
                48      LOAD_NAME                       6: property
                50      LOAD_NAME                       9: functools
                52      LOAD_METHOD                     10: lru_cache
                54      CALL_METHOD                     0
                56      LOAD_CONST                      9: <CODE> is_private
                58      LOAD_CONST                      10: 'IPv4Address.is_private'
                60      MAKE_FUNCTION                   0
                62      CALL_FUNCTION                   1
                64      CALL_FUNCTION                   1
                66      STORE_NAME                      11: is_private
                68      LOAD_NAME                       6: property
                70      LOAD_NAME                       9: functools
                72      LOAD_METHOD                     10: lru_cache
                74      CALL_METHOD                     0
                76      LOAD_CONST                      11: <CODE> is_global
                78      LOAD_CONST                      12: 'IPv4Address.is_global'
                80      MAKE_FUNCTION                   0
                82      CALL_FUNCTION                   1
                84      CALL_FUNCTION                   1
                86      STORE_NAME                      12: is_global
                88      LOAD_NAME                       6: property
                90      LOAD_CONST                      13: <CODE> is_multicast
                92      LOAD_CONST                      14: 'IPv4Address.is_multicast'
                94      MAKE_FUNCTION                   0
                96      CALL_FUNCTION                   1
                98      STORE_NAME                      13: is_multicast
                100     LOAD_NAME                       6: property
                102     LOAD_CONST                      15: <CODE> is_unspecified
                104     LOAD_CONST                      16: 'IPv4Address.is_unspecified'
                106     MAKE_FUNCTION                   0
                108     CALL_FUNCTION                   1
                110     STORE_NAME                      14: is_unspecified
                112     LOAD_NAME                       6: property
                114     LOAD_CONST                      17: <CODE> is_loopback
                116     LOAD_CONST                      18: 'IPv4Address.is_loopback'
                118     MAKE_FUNCTION                   0
                120     CALL_FUNCTION                   1
                122     STORE_NAME                      15: is_loopback
                124     LOAD_NAME                       6: property
                126     LOAD_CONST                      19: <CODE> is_link_local
                128     LOAD_CONST                      20: 'IPv4Address.is_link_local'
                130     MAKE_FUNCTION                   0
                132     CALL_FUNCTION                   1
                134     STORE_NAME                      16: is_link_local
                136     LOAD_CONST                      21: None
                138     RETURN_VALUE                    
        'IPv4Address'
        [Code]
            File Name: ipaddress.py
            Object Name: IPv4Interface
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                'functools'
                'cached_property'
                'hostmask'
                '__str__'
                '__eq__'
                '__lt__'
                '__hash__'
                '_IPAddressBase'
                '__reduce__'
                'property'
                'ip'
                'with_prefixlen'
                'with_netmask'
                'with_hostmask'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'IPv4Interface'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_split_addr_prefix'
                        'IPv4Address'
                        '__init__'
                        'IPv4Network'
                        'network'
                        'netmask'
                        '_prefixlen'
                    [Var Names]
                        'self'
                        'address'
                        'addr'
                        'mask'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        (
                            'strict'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _split_addr_prefix
                        4       LOAD_FAST                       1: address
                        6       CALL_METHOD                     1
                        8       UNPACK_SEQUENCE                 2
                        10      STORE_FAST                      2: addr
                        12      STORE_FAST                      3: mask
                        14      LOAD_GLOBAL                     1: IPv4Address
                        16      LOAD_METHOD                     2: __init__
                        18      LOAD_FAST                       0: self
                        20      LOAD_FAST                       2: addr
                        22      CALL_METHOD                     2
                        24      POP_TOP                         
                        26      LOAD_GLOBAL                     3: IPv4Network
                        28      LOAD_FAST                       2: addr
                        30      LOAD_FAST                       3: mask
                        32      BUILD_TUPLE                     2
                        34      LOAD_CONST                      1: False
                        36      LOAD_CONST                      2: ('strict',)
                        38      CALL_FUNCTION_KW                2
                        40      LOAD_FAST                       0: self
                        42      STORE_ATTR                      4: network
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       4: network
                        48      LOAD_ATTR                       5: netmask
                        50      LOAD_FAST                       0: self
                        52      STORE_ATTR                      5: netmask
                        54      LOAD_FAST                       0: self
                        56      LOAD_ATTR                       4: network
                        58      LOAD_ATTR                       6: _prefixlen
                        60      LOAD_FAST                       0: self
                        62      STORE_ATTR                      6: _prefixlen
                        64      LOAD_CONST                      0: None
                        66      RETURN_VALUE                    
                'IPv4Interface.__init__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: hostmask
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network'
                        'hostmask'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: network
                        4       LOAD_ATTR                       1: hostmask
                        6       RETURN_VALUE                    
                'IPv4Interface.hostmask'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_string_from_ip_int'
                        '_ip'
                        '_prefixlen'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%d'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%d'
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _string_from_ip_int
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _ip
                        10      CALL_METHOD                     1
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: _prefixlen
                        16      BUILD_TUPLE                     2
                        18      BINARY_MODULO                   
                        20      RETURN_VALUE                    
                'IPv4Interface.__str__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'IPv4Address'
                        '__eq__'
                        'NotImplemented'
                        'network'
                        'AttributeError'
                    [Var Names]
                        'self'
                        'other'
                        'address_equal'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: IPv4Address
                        2       LOAD_METHOD                     1: __eq__
                        4       LOAD_FAST                       0: self
                        6       LOAD_FAST                       1: other
                        8       CALL_METHOD                     2
                        10      STORE_FAST                      2: address_equal
                        12      LOAD_FAST                       2: address_equal
                        14      LOAD_GLOBAL                     2: NotImplemented
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_TRUE                12 (to 24)
                        20      LOAD_FAST                       2: address_equal
                        22      POP_JUMP_IF_TRUE                14 (to 28)
                        24      LOAD_FAST                       2: address_equal
                        26      RETURN_VALUE                    
                        28      SETUP_FINALLY                   7 (to 44)
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       3: network
                        34      LOAD_FAST                       1: other
                        36      LOAD_ATTR                       3: network
                        38      COMPARE_OP                      2 (==)
                        40      POP_BLOCK                       
                        42      RETURN_VALUE                    
                        44      DUP_TOP                         
                        46      LOAD_GLOBAL                     4: AttributeError
                        48      JUMP_IF_NOT_EXC_MATCH           31 (to 62)
                        50      POP_TOP                         
                        52      POP_TOP                         
                        54      POP_TOP                         
                        56      POP_EXCEPT                      
                        58      LOAD_CONST                      1: False
                        60      RETURN_VALUE                    
                        62      RERAISE                         0
                'IPv4Interface.__eq__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __lt__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'IPv4Address'
                        '__lt__'
                        'NotImplemented'
                        'network'
                        'AttributeError'
                    [Var Names]
                        'self'
                        'other'
                        'address_less'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: IPv4Address
                        2       LOAD_METHOD                     1: __lt__
                        4       LOAD_FAST                       0: self
                        6       LOAD_FAST                       1: other
                        8       CALL_METHOD                     2
                        10      STORE_FAST                      2: address_less
                        12      LOAD_FAST                       2: address_less
                        14      LOAD_GLOBAL                     2: NotImplemented
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_FALSE               12 (to 24)
                        20      LOAD_GLOBAL                     2: NotImplemented
                        22      RETURN_VALUE                    
                        24      SETUP_FINALLY                   15 (to 56)
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       3: network
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       3: network
                        34      COMPARE_OP                      0 (<)
                        36      JUMP_IF_TRUE_OR_POP             26 (to 52)
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       3: network
                        42      LOAD_FAST                       1: other
                        44      LOAD_ATTR                       3: network
                        46      COMPARE_OP                      2 (==)
                        48      JUMP_IF_FALSE_OR_POP            26 (to 52)
                        50      LOAD_FAST                       2: address_less
                        52      POP_BLOCK                       
                        54      RETURN_VALUE                    
                        56      DUP_TOP                         
                        58      LOAD_GLOBAL                     4: AttributeError
                        60      JUMP_IF_NOT_EXC_MATCH           37 (to 74)
                        62      POP_TOP                         
                        64      POP_TOP                         
                        66      POP_TOP                         
                        68      POP_EXCEPT                      
                        70      LOAD_CONST                      1: False
                        72      RETURN_VALUE                    
                        74      RERAISE                         0
                'IPv4Interface.__lt__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        '_ip'
                        '_prefixlen'
                        'int'
                        'network'
                        'network_address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _ip
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: _prefixlen
                        10      LOAD_GLOBAL                     3: int
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       4: network
                        16      LOAD_ATTR                       5: network_address
                        18      CALL_FUNCTION                   1
                        20      BUILD_TUPLE                     3
                        22      CALL_FUNCTION                   1
                        24      RETURN_VALUE                    
                'IPv4Interface.__hash__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: ip
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'IPv4Address'
                        '_ip'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: IPv4Address
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _ip
                        6       CALL_FUNCTION                   1
                        8       RETURN_VALUE                    
                'IPv4Interface.ip'
                [Code]
                    File Name: ipaddress.py
                    Object Name: with_prefixlen
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_string_from_ip_int'
                        '_ip'
                        '_prefixlen'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%s'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%s'
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _string_from_ip_int
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _ip
                        10      CALL_METHOD                     1
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: _prefixlen
                        16      BUILD_TUPLE                     2
                        18      BINARY_MODULO                   
                        20      RETURN_VALUE                    
                'IPv4Interface.with_prefixlen'
                [Code]
                    File Name: ipaddress.py
                    Object Name: with_netmask
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_string_from_ip_int'
                        '_ip'
                        'netmask'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%s'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%s'
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _string_from_ip_int
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _ip
                        10      CALL_METHOD                     1
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: netmask
                        16      BUILD_TUPLE                     2
                        18      BINARY_MODULO                   
                        20      RETURN_VALUE                    
                'IPv4Interface.with_netmask'
                [Code]
                    File Name: ipaddress.py
                    Object Name: with_hostmask
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_string_from_ip_int'
                        '_ip'
                        'hostmask'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%s'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%s'
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _string_from_ip_int
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _ip
                        10      CALL_METHOD                     1
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: hostmask
                        16      BUILD_TUPLE                     2
                        18      BINARY_MODULO                   
                        20      RETURN_VALUE                    
                'IPv4Interface.with_hostmask'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'IPv4Interface'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: <CODE> __init__
                10      LOAD_CONST                      2: 'IPv4Interface.__init__'
                12      MAKE_FUNCTION                   0
                14      STORE_NAME                      3: __init__
                16      LOAD_NAME                       4: functools
                18      LOAD_ATTR                       5: cached_property
                20      LOAD_CONST                      3: <CODE> hostmask
                22      LOAD_CONST                      4: 'IPv4Interface.hostmask'
                24      MAKE_FUNCTION                   0
                26      CALL_FUNCTION                   1
                28      STORE_NAME                      6: hostmask
                30      LOAD_CONST                      5: <CODE> __str__
                32      LOAD_CONST                      6: 'IPv4Interface.__str__'
                34      MAKE_FUNCTION                   0
                36      STORE_NAME                      7: __str__
                38      LOAD_CONST                      7: <CODE> __eq__
                40      LOAD_CONST                      8: 'IPv4Interface.__eq__'
                42      MAKE_FUNCTION                   0
                44      STORE_NAME                      8: __eq__
                46      LOAD_CONST                      9: <CODE> __lt__
                48      LOAD_CONST                      10: 'IPv4Interface.__lt__'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      9: __lt__
                54      LOAD_CONST                      11: <CODE> __hash__
                56      LOAD_CONST                      12: 'IPv4Interface.__hash__'
                58      MAKE_FUNCTION                   0
                60      STORE_NAME                      10: __hash__
                62      LOAD_NAME                       11: _IPAddressBase
                64      LOAD_ATTR                       12: __reduce__
                66      STORE_NAME                      12: __reduce__
                68      LOAD_NAME                       13: property
                70      LOAD_CONST                      13: <CODE> ip
                72      LOAD_CONST                      14: 'IPv4Interface.ip'
                74      MAKE_FUNCTION                   0
                76      CALL_FUNCTION                   1
                78      STORE_NAME                      14: ip
                80      LOAD_NAME                       13: property
                82      LOAD_CONST                      15: <CODE> with_prefixlen
                84      LOAD_CONST                      16: 'IPv4Interface.with_prefixlen'
                86      MAKE_FUNCTION                   0
                88      CALL_FUNCTION                   1
                90      STORE_NAME                      15: with_prefixlen
                92      LOAD_NAME                       13: property
                94      LOAD_CONST                      17: <CODE> with_netmask
                96      LOAD_CONST                      18: 'IPv4Interface.with_netmask'
                98      MAKE_FUNCTION                   0
                100     CALL_FUNCTION                   1
                102     STORE_NAME                      16: with_netmask
                104     LOAD_NAME                       13: property
                106     LOAD_CONST                      19: <CODE> with_hostmask
                108     LOAD_CONST                      20: 'IPv4Interface.with_hostmask'
                110     MAKE_FUNCTION                   0
                112     CALL_FUNCTION                   1
                114     STORE_NAME                      17: with_hostmask
                116     LOAD_CONST                      21: None
                118     RETURN_VALUE                    
        'IPv4Interface'
        [Code]
            File Name: ipaddress.py
            Object Name: IPv4Network
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'IPv4Address'
                '_address_class'
                '__init__'
                'property'
                'functools'
                'lru_cache'
                'is_global'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'IPv4Network'
                "This class represents and manipulates 32-bit IPv4 network + addresses..\n\n    Attributes: [examples for IPv4Network('192.0.2.0/27')]\n        .network_address: IPv4Address('192.0.2.0')\n        .hostmask: IPv4Address('0.0.0.31')\n        .broadcast_address: IPv4Address('192.0.2.32')\n        .netmask: IPv4Address('255.255.255.224')\n        .prefixlen: 27\n\n    "
                True
                [Code]
                    File Name: ipaddress.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_split_addr_prefix'
                        'IPv4Address'
                        'network_address'
                        '_make_netmask'
                        'netmask'
                        '_prefixlen'
                        'int'
                        'ValueError'
                        '_max_prefixlen'
                        '__iter__'
                        'hosts'
                    [Var Names]
                        'self'
                        'address'
                        'strict'
                        'mask'
                        'packed'
                    [Free Vars]
                    [Cell Vars]
                        'addr'
                    [Constants]
                        "Instantiate a new IPv4 network object.\n\n        Args:\n            address: A string or integer representing the IP [& network].\n              '192.0.2.0/24'\n              '192.0.2.0/255.255.255.0'\n              '192.0.2.0/0.0.0.255'\n              are all functionally the same in IPv4. Similarly,\n              '192.0.2.1'\n              '192.0.2.1/255.255.255.255'\n              '192.0.2.1/32'\n              are also functionally equivalent. That is to say, failing to\n              provide a subnetmask will create an object with a mask of /32.\n\n              If the mask (portion after the / in the argument) is given in\n              dotted quad form, it is treated as a netmask if it starts with a\n              non-zero field (e.g. /255.0.0.0 == /8) and as a hostmask if it\n              starts with a zero field (e.g. 0.255.255.255 == /8), with the\n              single exception of an all-zero mask which is treated as a\n              netmask == /0. If no mask is given, a default of /32 is used.\n\n              Additionally, an integer can be passed, so\n              IPv4Network('192.0.2.1') == IPv4Network(3221225985)\n              or, more generally\n              IPv4Interface(int(IPv4Interface('192.0.2.1'))) ==\n                IPv4Interface('192.0.2.1')\n\n        Raises:\n            AddressValueError: If ipaddress isn't a valid IPv4 address.\n            NetmaskValueError: If the netmask isn't valid for\n              an IPv4 address.\n            ValueError: If strict is True and a network address is not\n              supplied.\n        "
                        '%s has host bits set'
                        1
                        [Code]
                            File Name: ipaddress.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 2
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'IPv4Address'
                            [Var Names]
                            [Free Vars]
                                'addr'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_GLOBAL                     0: IPv4Address
                                2       LOAD_DEREF                      0: addr
                                4       CALL_FUNCTION                   1
                                6       BUILD_LIST                      1
                                8       RETURN_VALUE                    
                        'IPv4Network.__init__.<locals>.<lambda>'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _split_addr_prefix
                        4       LOAD_FAST                       1: address
                        6       CALL_METHOD                     1
                        8       UNPACK_SEQUENCE                 2
                        10      STORE_DEREF                     0: addr
                        12      STORE_FAST                      3: mask
                        14      LOAD_GLOBAL                     1: IPv4Address
                        16      LOAD_DEREF                      0: addr
                        18      CALL_FUNCTION                   1
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      2: network_address
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     3: _make_netmask
                        28      LOAD_FAST                       3: mask
                        30      CALL_METHOD                     1
                        32      UNPACK_SEQUENCE                 2
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      4: netmask
                        38      LOAD_FAST                       0: self
                        40      STORE_ATTR                      5: _prefixlen
                        42      LOAD_GLOBAL                     6: int
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       2: network_address
                        48      CALL_FUNCTION                   1
                        50      STORE_FAST                      4: packed
                        52      LOAD_FAST                       4: packed
                        54      LOAD_GLOBAL                     6: int
                        56      LOAD_FAST                       0: self
                        58      LOAD_ATTR                       4: netmask
                        60      CALL_FUNCTION                   1
                        62      BINARY_AND                      
                        64      LOAD_FAST                       4: packed
                        66      COMPARE_OP                      3 (!=)
                        68      POP_JUMP_IF_FALSE               53 (to 106)
                        70      LOAD_FAST                       2: strict
                        72      POP_JUMP_IF_FALSE               43 (to 86)
                        74      LOAD_GLOBAL                     7: ValueError
                        76      LOAD_CONST                      1: '%s has host bits set'
                        78      LOAD_FAST                       0: self
                        80      BINARY_MODULO                   
                        82      CALL_FUNCTION                   1
                        84      RAISE_VARARGS                   1
                        86      LOAD_GLOBAL                     1: IPv4Address
                        88      LOAD_FAST                       4: packed
                        90      LOAD_GLOBAL                     6: int
                        92      LOAD_FAST                       0: self
                        94      LOAD_ATTR                       4: netmask
                        96      CALL_FUNCTION                   1
                        98      BINARY_AND                      
                        100     CALL_FUNCTION                   1
                        102     LOAD_FAST                       0: self
                        104     STORE_ATTR                      2: network_address
                        106     LOAD_FAST                       0: self
                        108     LOAD_ATTR                       5: _prefixlen
                        110     LOAD_FAST                       0: self
                        112     LOAD_ATTR                       8: _max_prefixlen
                        114     LOAD_CONST                      2: 1
                        116     BINARY_SUBTRACT                 
                        118     COMPARE_OP                      2 (==)
                        120     POP_JUMP_IF_FALSE               67 (to 134)
                        122     LOAD_FAST                       0: self
                        124     LOAD_ATTR                       9: __iter__
                        126     LOAD_FAST                       0: self
                        128     STORE_ATTR                      10: hosts
                        130     LOAD_CONST                      5: None
                        132     RETURN_VALUE                    
                        134     LOAD_FAST                       0: self
                        136     LOAD_ATTR                       5: _prefixlen
                        138     LOAD_FAST                       0: self
                        140     LOAD_ATTR                       8: _max_prefixlen
                        142     COMPARE_OP                      2 (==)
                        144     POP_JUMP_IF_FALSE               82 (to 164)
                        146     LOAD_CLOSURE                    0: addr
                        148     BUILD_TUPLE                     1
                        150     LOAD_CONST                      3: <CODE> <lambda>
                        152     LOAD_CONST                      4: 'IPv4Network.__init__.<locals>.<lambda>'
                        154     MAKE_FUNCTION                   8
                        156     LOAD_FAST                       0: self
                        158     STORE_ATTR                      10: hosts
                        160     LOAD_CONST                      5: None
                        162     RETURN_VALUE                    
                        164     LOAD_CONST                      5: None
                        166     RETURN_VALUE                    
                'IPv4Network.__init__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_global
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'IPv4Network'
                        'broadcast_address'
                        'is_private'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if this address is allocated for public networks.\n\n        Returns:\n            A boolean, True if the address is not reserved per\n            iana-ipv4-special-registry.\n\n        '
                        '100.64.0.0/10'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: network_address
                        4       LOAD_GLOBAL                     1: IPv4Network
                        6       LOAD_CONST                      1: '100.64.0.0/10'
                        8       CALL_FUNCTION                   1
                        10      CONTAINS_OP                     0 (in)
                        12      JUMP_IF_FALSE_OR_POP            13 (to 26)
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: broadcast_address
                        18      LOAD_GLOBAL                     1: IPv4Network
                        20      LOAD_CONST                      1: '100.64.0.0/10'
                        22      CALL_FUNCTION                   1
                        24      CONTAINS_OP                     0 (in)
                        26      UNARY_NOT                       
                        28      JUMP_IF_FALSE_OR_POP            18 (to 36)
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       3: is_private
                        34      UNARY_NOT                       
                        36      RETURN_VALUE                    
                'IPv4Network.is_global'
                None
                (
                    True
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'IPv4Network'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "This class represents and manipulates 32-bit IPv4 network + addresses..\n\n    Attributes: [examples for IPv4Network('192.0.2.0/27')]\n        .network_address: IPv4Address('192.0.2.0')\n        .hostmask: IPv4Address('0.0.0.31')\n        .broadcast_address: IPv4Address('192.0.2.32')\n        .netmask: IPv4Address('255.255.255.224')\n        .prefixlen: 27\n\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: IPv4Address
                14      STORE_NAME                      5: _address_class
                16      LOAD_CONST                      8: (True,)
                18      LOAD_CONST                      3: <CODE> __init__
                20      LOAD_CONST                      4: 'IPv4Network.__init__'
                22      MAKE_FUNCTION                   1
                24      STORE_NAME                      6: __init__
                26      LOAD_NAME                       7: property
                28      LOAD_NAME                       8: functools
                30      LOAD_METHOD                     9: lru_cache
                32      CALL_METHOD                     0
                34      LOAD_CONST                      5: <CODE> is_global
                36      LOAD_CONST                      6: 'IPv4Network.is_global'
                38      MAKE_FUNCTION                   0
                40      CALL_FUNCTION                   1
                42      CALL_FUNCTION                   1
                44      STORE_NAME                      10: is_global
                46      LOAD_CONST                      7: None
                48      RETURN_VALUE                    
        'IPv4Network'
        [Code]
            File Name: ipaddress.py
            Object Name: _IPv4Constants
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 15
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'IPv4Network'
                '_linklocal_network'
                '_loopback_network'
                '_multicast_network'
                '_public_network'
                '_private_networks'
                '_private_networks_exceptions'
                '_reserved_network'
                'IPv4Address'
                '_unspecified_address'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_IPv4Constants'
                '169.254.0.0/16'
                '127.0.0.0/8'
                '224.0.0.0/4'
                '100.64.0.0/10'
                '0.0.0.0/8'
                '10.0.0.0/8'
                '172.16.0.0/12'
                '192.0.0.0/24'
                '192.0.0.170/31'
                '192.0.2.0/24'
                '192.168.0.0/16'
                '198.18.0.0/15'
                '198.51.100.0/24'
                '203.0.113.0/24'
                '240.0.0.0/4'
                '255.255.255.255/32'
                '192.0.0.9/32'
                '192.0.0.10/32'
                '0.0.0.0'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_IPv4Constants'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: IPv4Network
                10      LOAD_CONST                      1: '169.254.0.0/16'
                12      CALL_FUNCTION                   1
                14      STORE_NAME                      4: _linklocal_network
                16      LOAD_NAME                       3: IPv4Network
                18      LOAD_CONST                      2: '127.0.0.0/8'
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: _loopback_network
                24      LOAD_NAME                       3: IPv4Network
                26      LOAD_CONST                      3: '224.0.0.0/4'
                28      CALL_FUNCTION                   1
                30      STORE_NAME                      6: _multicast_network
                32      LOAD_NAME                       3: IPv4Network
                34      LOAD_CONST                      4: '100.64.0.0/10'
                36      CALL_FUNCTION                   1
                38      STORE_NAME                      7: _public_network
                40      LOAD_NAME                       3: IPv4Network
                42      LOAD_CONST                      5: '0.0.0.0/8'
                44      CALL_FUNCTION                   1
                46      LOAD_NAME                       3: IPv4Network
                48      LOAD_CONST                      6: '10.0.0.0/8'
                50      CALL_FUNCTION                   1
                52      LOAD_NAME                       3: IPv4Network
                54      LOAD_CONST                      2: '127.0.0.0/8'
                56      CALL_FUNCTION                   1
                58      LOAD_NAME                       3: IPv4Network
                60      LOAD_CONST                      1: '169.254.0.0/16'
                62      CALL_FUNCTION                   1
                64      LOAD_NAME                       3: IPv4Network
                66      LOAD_CONST                      7: '172.16.0.0/12'
                68      CALL_FUNCTION                   1
                70      LOAD_NAME                       3: IPv4Network
                72      LOAD_CONST                      8: '192.0.0.0/24'
                74      CALL_FUNCTION                   1
                76      LOAD_NAME                       3: IPv4Network
                78      LOAD_CONST                      9: '192.0.0.170/31'
                80      CALL_FUNCTION                   1
                82      LOAD_NAME                       3: IPv4Network
                84      LOAD_CONST                      10: '192.0.2.0/24'
                86      CALL_FUNCTION                   1
                88      LOAD_NAME                       3: IPv4Network
                90      LOAD_CONST                      11: '192.168.0.0/16'
                92      CALL_FUNCTION                   1
                94      LOAD_NAME                       3: IPv4Network
                96      LOAD_CONST                      12: '198.18.0.0/15'
                98      CALL_FUNCTION                   1
                100     LOAD_NAME                       3: IPv4Network
                102     LOAD_CONST                      13: '198.51.100.0/24'
                104     CALL_FUNCTION                   1
                106     LOAD_NAME                       3: IPv4Network
                108     LOAD_CONST                      14: '203.0.113.0/24'
                110     CALL_FUNCTION                   1
                112     LOAD_NAME                       3: IPv4Network
                114     LOAD_CONST                      15: '240.0.0.0/4'
                116     CALL_FUNCTION                   1
                118     LOAD_NAME                       3: IPv4Network
                120     LOAD_CONST                      16: '255.255.255.255/32'
                122     CALL_FUNCTION                   1
                124     BUILD_LIST                      14
                126     STORE_NAME                      8: _private_networks
                128     LOAD_NAME                       3: IPv4Network
                130     LOAD_CONST                      17: '192.0.0.9/32'
                132     CALL_FUNCTION                   1
                134     LOAD_NAME                       3: IPv4Network
                136     LOAD_CONST                      18: '192.0.0.10/32'
                138     CALL_FUNCTION                   1
                140     BUILD_LIST                      2
                142     STORE_NAME                      9: _private_networks_exceptions
                144     LOAD_NAME                       3: IPv4Network
                146     LOAD_CONST                      15: '240.0.0.0/4'
                148     CALL_FUNCTION                   1
                150     STORE_NAME                      10: _reserved_network
                152     LOAD_NAME                       11: IPv4Address
                154     LOAD_CONST                      19: '0.0.0.0'
                156     CALL_FUNCTION                   1
                158     STORE_NAME                      12: _unspecified_address
                160     LOAD_CONST                      20: None
                162     RETURN_VALUE                    
        '_IPv4Constants'
        [Code]
            File Name: ipaddress.py
            Object Name: _BaseV6
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '_version'
                'IPV6LENGTH'
                '_ALL_ONES'
                '_HEXTET_COUNT'
                'frozenset'
                '_HEX_DIGITS'
                '_max_prefixlen'
                '_netmask_cache'
                'classmethod'
                '_make_netmask'
                '_ip_int_from_string'
                '_parse_hextet'
                '_compress_hextets'
                '_string_from_ip_int'
                '_explode_shorthand_ip_string'
                '_reverse_pointer'
                'staticmethod'
                '_split_scope_id'
                'property'
                'max_prefixlen'
                'version'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_BaseV6'
                'Base IPv6 object.\n\n    The following methods are used by IPv6 objects in both single IP\n    addresses and networks.\n\n    '
                (
                )
                6
                2
                1
                8
                '0123456789ABCDEFabcdef'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _make_netmask
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_netmask_cache'
                        'isinstance'
                        'int'
                        '_max_prefixlen'
                        '_report_invalid_netmask'
                        '_prefix_from_prefix_string'
                        'IPv6Address'
                        '_ip_int_from_prefix'
                    [Var Names]
                        'cls'
                        'arg'
                        'prefixlen'
                        'netmask'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Make a (netmask, prefix_len) tuple from the given argument.\n\n        Argument can be:\n        - an integer (the prefix length)\n        - a string representing the prefix length (e.g. "24")\n        - a string representing the prefix netmask (e.g. "255.255.255.0")\n        '
                        0
                    [Disassembly]
                        0       LOAD_FAST                       1: arg
                        2       LOAD_FAST                       0: cls
                        4       LOAD_ATTR                       0: _netmask_cache
                        6       CONTAINS_OP                     1 (not in)
                        8       POP_JUMP_IF_FALSE               49 (to 98)
                        10      LOAD_GLOBAL                     1: isinstance
                        12      LOAD_FAST                       1: arg
                        14      LOAD_GLOBAL                     2: int
                        16      CALL_FUNCTION                   2
                        18      POP_JUMP_IF_FALSE               30 (to 60)
                        20      LOAD_FAST                       1: arg
                        22      STORE_FAST                      2: prefixlen
                        24      LOAD_CONST                      1: 0
                        26      LOAD_FAST                       2: prefixlen
                        28      DUP_TOP                         
                        30      ROT_THREE                       
                        32      COMPARE_OP                      1 (<=)
                        34      POP_JUMP_IF_FALSE               23 (to 46)
                        36      LOAD_FAST                       0: cls
                        38      LOAD_ATTR                       3: _max_prefixlen
                        40      COMPARE_OP                      1 (<=)
                        42      POP_JUMP_IF_TRUE                29 (to 58)
                        44      JUMP_FORWARD                    1 (to 48)
                        46      POP_TOP                         
                        48      LOAD_FAST                       0: cls
                        50      LOAD_METHOD                     4: _report_invalid_netmask
                        52      LOAD_FAST                       2: prefixlen
                        54      CALL_METHOD                     1
                        56      POP_TOP                         
                        58      JUMP_FORWARD                    5 (to 70)
                        60      LOAD_FAST                       0: cls
                        62      LOAD_METHOD                     5: _prefix_from_prefix_string
                        64      LOAD_FAST                       1: arg
                        66      CALL_METHOD                     1
                        68      STORE_FAST                      2: prefixlen
                        70      LOAD_GLOBAL                     6: IPv6Address
                        72      LOAD_FAST                       0: cls
                        74      LOAD_METHOD                     7: _ip_int_from_prefix
                        76      LOAD_FAST                       2: prefixlen
                        78      CALL_METHOD                     1
                        80      CALL_FUNCTION                   1
                        82      STORE_FAST                      3: netmask
                        84      LOAD_FAST                       3: netmask
                        86      LOAD_FAST                       2: prefixlen
                        88      BUILD_TUPLE                     2
                        90      LOAD_FAST                       0: cls
                        92      LOAD_ATTR                       0: _netmask_cache
                        94      LOAD_FAST                       1: arg
                        96      STORE_SUBSCR                    
                        98      LOAD_FAST                       0: cls
                        100     LOAD_ATTR                       0: _netmask_cache
                        102     LOAD_FAST                       1: arg
                        104     BINARY_SUBSCR                   
                        106     RETURN_VALUE                    
                '_BaseV6._make_netmask'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _ip_int_from_string
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 14
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'AddressValueError'
                        'split'
                        'len'
                        'IPv4Address'
                        'pop'
                        '_ip'
                        'append'
                        '_HEXTET_COUNT'
                        'range'
                        '_parse_hextet'
                        'ValueError'
                    [Var Names]
                        'cls'
                        'ip_str'
                        'parts'
                        '_min_parts'
                        'msg'
                        'ipv4_int'
                        'exc'
                        '_max_parts'
                        'skip_index'
                        'i'
                        'parts_hi'
                        'parts_lo'
                        'parts_skipped'
                        'ip_int'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Turn an IPv6 ip_str into an integer.\n\n        Args:\n            ip_str: A string, the IPv6 ip_str.\n\n        Returns:\n            An int, the IPv6 address\n\n        Raises:\n            AddressValueError: if ip_str isn't a valid IPv6 Address.\n\n        "
                        'Address cannot be empty'
                        ':'
                        3
                        'At least %d parts expected in %r'
                        '.'
                        -1
                        '%s in %r'
                        None
                        '%x'
                        16
                        65535
                        1
                        'At most %d colons permitted in %r'
                        "At most one '::' permitted in %r"
                        0
                        "Leading ':' only permitted as part of '::' in %r"
                        "Trailing ':' only permitted as part of '::' in %r"
                        "Expected at most %d other parts with '::' in %r"
                        "Exactly %d parts expected without '::' in %r"
                    [Disassembly]
                        0       LOAD_FAST                       1: ip_str
                        2       POP_JUMP_IF_TRUE                6 (to 12)
                        4       LOAD_GLOBAL                     0: AddressValueError
                        6       LOAD_CONST                      1: 'Address cannot be empty'
                        8       CALL_FUNCTION                   1
                        10      RAISE_VARARGS                   1
                        12      LOAD_FAST                       1: ip_str
                        14      LOAD_METHOD                     1: split
                        16      LOAD_CONST                      2: ':'
                        18      CALL_METHOD                     1
                        20      STORE_FAST                      2: parts
                        22      LOAD_CONST                      3: 3
                        24      STORE_FAST                      3: _min_parts
                        26      LOAD_GLOBAL                     2: len
                        28      LOAD_FAST                       2: parts
                        30      CALL_FUNCTION                   1
                        32      LOAD_FAST                       3: _min_parts
                        34      COMPARE_OP                      0 (<)
                        36      POP_JUMP_IF_FALSE               29 (to 58)
                        38      LOAD_CONST                      4: 'At least %d parts expected in %r'
                        40      LOAD_FAST                       3: _min_parts
                        42      LOAD_FAST                       1: ip_str
                        44      BUILD_TUPLE                     2
                        46      BINARY_MODULO                   
                        48      STORE_FAST                      4: msg
                        50      LOAD_GLOBAL                     0: AddressValueError
                        52      LOAD_FAST                       4: msg
                        54      CALL_FUNCTION                   1
                        56      RAISE_VARARGS                   1
                        58      LOAD_CONST                      5: '.'
                        60      LOAD_FAST                       2: parts
                        62      LOAD_CONST                      6: -1
                        64      BINARY_SUBSCR                   
                        66      CONTAINS_OP                     0 (in)
                        68      POP_JUMP_IF_FALSE               86 (to 172)
                        70      SETUP_FINALLY                   9 (to 90)
                        72      LOAD_GLOBAL                     3: IPv4Address
                        74      LOAD_FAST                       2: parts
                        76      LOAD_METHOD                     4: pop
                        78      CALL_METHOD                     0
                        80      CALL_FUNCTION                   1
                        82      LOAD_ATTR                       5: _ip
                        84      STORE_FAST                      5: ipv4_int
                        86      POP_BLOCK                       
                        88      JUMP_FORWARD                    21 (to 132)
                        90      DUP_TOP                         
                        92      LOAD_GLOBAL                     0: AddressValueError
                        94      JUMP_IF_NOT_EXC_MATCH           65 (to 130)
                        96      POP_TOP                         
                        98      STORE_FAST                      6: exc
                        100     POP_TOP                         
                        102     SETUP_FINALLY                   9 (to 122)
                        104     LOAD_GLOBAL                     0: AddressValueError
                        106     LOAD_CONST                      7: '%s in %r'
                        108     LOAD_FAST                       6: exc
                        110     LOAD_FAST                       1: ip_str
                        112     BUILD_TUPLE                     2
                        114     BINARY_MODULO                   
                        116     CALL_FUNCTION                   1
                        118     LOAD_CONST                      8: None
                        120     RAISE_VARARGS                   2
                        122     LOAD_CONST                      8: None
                        124     STORE_FAST                      6: exc
                        126     DELETE_FAST                     6: exc
                        128     RERAISE                         1
                        130     RERAISE                         0
                        132     LOAD_FAST                       2: parts
                        134     LOAD_METHOD                     6: append
                        136     LOAD_CONST                      9: '%x'
                        138     LOAD_FAST                       5: ipv4_int
                        140     LOAD_CONST                      10: 16
                        142     BINARY_RSHIFT                   
                        144     LOAD_CONST                      11: 65535
                        146     BINARY_AND                      
                        148     BINARY_MODULO                   
                        150     CALL_METHOD                     1
                        152     POP_TOP                         
                        154     LOAD_FAST                       2: parts
                        156     LOAD_METHOD                     6: append
                        158     LOAD_CONST                      9: '%x'
                        160     LOAD_FAST                       5: ipv4_int
                        162     LOAD_CONST                      11: 65535
                        164     BINARY_AND                      
                        166     BINARY_MODULO                   
                        168     CALL_METHOD                     1
                        170     POP_TOP                         
                        172     LOAD_FAST                       0: cls
                        174     LOAD_ATTR                       7: _HEXTET_COUNT
                        176     LOAD_CONST                      12: 1
                        178     BINARY_ADD                      
                        180     STORE_FAST                      7: _max_parts
                        182     LOAD_GLOBAL                     2: len
                        184     LOAD_FAST                       2: parts
                        186     CALL_FUNCTION                   1
                        188     LOAD_FAST                       7: _max_parts
                        190     COMPARE_OP                      4 (>)
                        192     POP_JUMP_IF_FALSE               109 (to 218)
                        194     LOAD_CONST                      13: 'At most %d colons permitted in %r'
                        196     LOAD_FAST                       7: _max_parts
                        198     LOAD_CONST                      12: 1
                        200     BINARY_SUBTRACT                 
                        202     LOAD_FAST                       1: ip_str
                        204     BUILD_TUPLE                     2
                        206     BINARY_MODULO                   
                        208     STORE_FAST                      4: msg
                        210     LOAD_GLOBAL                     0: AddressValueError
                        212     LOAD_FAST                       4: msg
                        214     CALL_FUNCTION                   1
                        216     RAISE_VARARGS                   1
                        218     LOAD_CONST                      8: None
                        220     STORE_FAST                      8: skip_index
                        222     LOAD_GLOBAL                     8: range
                        224     LOAD_CONST                      12: 1
                        226     LOAD_GLOBAL                     2: len
                        228     LOAD_FAST                       2: parts
                        230     CALL_FUNCTION                   1
                        232     LOAD_CONST                      12: 1
                        234     BINARY_SUBTRACT                 
                        236     CALL_FUNCTION                   2
                        238     GET_ITER                        
                        240     FOR_ITER                        20 (to 282)
                        242     STORE_FAST                      9: i
                        244     LOAD_FAST                       2: parts
                        246     LOAD_FAST                       9: i
                        248     BINARY_SUBSCR                   
                        250     POP_JUMP_IF_TRUE                140 (to 280)
                        252     LOAD_FAST                       8: skip_index
                        254     LOAD_CONST                      8: None
                        256     IS_OP                           1 (is not)
                        258     POP_JUMP_IF_FALSE               138 (to 276)
                        260     LOAD_CONST                      14: "At most one '::' permitted in %r"
                        262     LOAD_FAST                       1: ip_str
                        264     BINARY_MODULO                   
                        266     STORE_FAST                      4: msg
                        268     LOAD_GLOBAL                     0: AddressValueError
                        270     LOAD_FAST                       4: msg
                        272     CALL_FUNCTION                   1
                        274     RAISE_VARARGS                   1
                        276     LOAD_FAST                       9: i
                        278     STORE_FAST                      8: skip_index
                        280     JUMP_ABSOLUTE                   120 (to 240)
                        282     LOAD_FAST                       8: skip_index
                        284     LOAD_CONST                      8: None
                        286     IS_OP                           1 (is not)
                        288     POP_JUMP_IF_FALSE               216 (to 432)
                        290     LOAD_FAST                       8: skip_index
                        292     STORE_FAST                      10: parts_hi
                        294     LOAD_GLOBAL                     2: len
                        296     LOAD_FAST                       2: parts
                        298     CALL_FUNCTION                   1
                        300     LOAD_FAST                       8: skip_index
                        302     BINARY_SUBTRACT                 
                        304     LOAD_CONST                      12: 1
                        306     BINARY_SUBTRACT                 
                        308     STORE_FAST                      11: parts_lo
                        310     LOAD_FAST                       2: parts
                        312     LOAD_CONST                      15: 0
                        314     BINARY_SUBSCR                   
                        316     POP_JUMP_IF_TRUE                173 (to 346)
                        318     LOAD_FAST                       10: parts_hi
                        320     LOAD_CONST                      12: 1
                        322     INPLACE_SUBTRACT                
                        324     STORE_FAST                      10: parts_hi
                        326     LOAD_FAST                       10: parts_hi
                        328     POP_JUMP_IF_FALSE               173 (to 346)
                        330     LOAD_CONST                      16: "Leading ':' only permitted as part of '::' in %r"
                        332     STORE_FAST                      4: msg
                        334     LOAD_GLOBAL                     0: AddressValueError
                        336     LOAD_FAST                       4: msg
                        338     LOAD_FAST                       1: ip_str
                        340     BINARY_MODULO                   
                        342     CALL_FUNCTION                   1
                        344     RAISE_VARARGS                   1
                        346     LOAD_FAST                       2: parts
                        348     LOAD_CONST                      6: -1
                        350     BINARY_SUBSCR                   
                        352     POP_JUMP_IF_TRUE                191 (to 382)
                        354     LOAD_FAST                       11: parts_lo
                        356     LOAD_CONST                      12: 1
                        358     INPLACE_SUBTRACT                
                        360     STORE_FAST                      11: parts_lo
                        362     LOAD_FAST                       11: parts_lo
                        364     POP_JUMP_IF_FALSE               191 (to 382)
                        366     LOAD_CONST                      17: "Trailing ':' only permitted as part of '::' in %r"
                        368     STORE_FAST                      4: msg
                        370     LOAD_GLOBAL                     0: AddressValueError
                        372     LOAD_FAST                       4: msg
                        374     LOAD_FAST                       1: ip_str
                        376     BINARY_MODULO                   
                        378     CALL_FUNCTION                   1
                        380     RAISE_VARARGS                   1
                        382     LOAD_FAST                       0: cls
                        384     LOAD_ATTR                       7: _HEXTET_COUNT
                        386     LOAD_FAST                       10: parts_hi
                        388     LOAD_FAST                       11: parts_lo
                        390     BINARY_ADD                      
                        392     BINARY_SUBTRACT                 
                        394     STORE_FAST                      12: parts_skipped
                        396     LOAD_FAST                       12: parts_skipped
                        398     LOAD_CONST                      12: 1
                        400     COMPARE_OP                      0 (<)
                        402     POP_JUMP_IF_FALSE               215 (to 430)
                        404     LOAD_CONST                      18: "Expected at most %d other parts with '::' in %r"
                        406     STORE_FAST                      4: msg
                        408     LOAD_GLOBAL                     0: AddressValueError
                        410     LOAD_FAST                       4: msg
                        412     LOAD_FAST                       0: cls
                        414     LOAD_ATTR                       7: _HEXTET_COUNT
                        416     LOAD_CONST                      12: 1
                        418     BINARY_SUBTRACT                 
                        420     LOAD_FAST                       1: ip_str
                        422     BUILD_TUPLE                     2
                        424     BINARY_MODULO                   
                        426     CALL_FUNCTION                   1
                        428     RAISE_VARARGS                   1
                        430     JUMP_FORWARD                    51 (to 534)
                        432     LOAD_GLOBAL                     2: len
                        434     LOAD_FAST                       2: parts
                        436     CALL_FUNCTION                   1
                        438     LOAD_FAST                       0: cls
                        440     LOAD_ATTR                       7: _HEXTET_COUNT
                        442     COMPARE_OP                      3 (!=)
                        444     POP_JUMP_IF_FALSE               234 (to 468)
                        446     LOAD_CONST                      19: "Exactly %d parts expected without '::' in %r"
                        448     STORE_FAST                      4: msg
                        450     LOAD_GLOBAL                     0: AddressValueError
                        452     LOAD_FAST                       4: msg
                        454     LOAD_FAST                       0: cls
                        456     LOAD_ATTR                       7: _HEXTET_COUNT
                        458     LOAD_FAST                       1: ip_str
                        460     BUILD_TUPLE                     2
                        462     BINARY_MODULO                   
                        464     CALL_FUNCTION                   1
                        466     RAISE_VARARGS                   1
                        468     LOAD_FAST                       2: parts
                        470     LOAD_CONST                      15: 0
                        472     BINARY_SUBSCR                   
                        474     POP_JUMP_IF_TRUE                246 (to 492)
                        476     LOAD_CONST                      16: "Leading ':' only permitted as part of '::' in %r"
                        478     STORE_FAST                      4: msg
                        480     LOAD_GLOBAL                     0: AddressValueError
                        482     LOAD_FAST                       4: msg
                        484     LOAD_FAST                       1: ip_str
                        486     BINARY_MODULO                   
                        488     CALL_FUNCTION                   1
                        490     RAISE_VARARGS                   1
                        492     LOAD_FAST                       2: parts
                        494     LOAD_CONST                      6: -1
                        496     BINARY_SUBSCR                   
                        498     POP_JUMP_IF_TRUE                259 (to 518)
                        502     LOAD_CONST                      17: "Trailing ':' only permitted as part of '::' in %r"
                        504     STORE_FAST                      4: msg
                        506     LOAD_GLOBAL                     0: AddressValueError
                        508     LOAD_FAST                       4: msg
                        510     LOAD_FAST                       1: ip_str
                        512     BINARY_MODULO                   
                        514     CALL_FUNCTION                   1
                        516     RAISE_VARARGS                   1
                        518     LOAD_GLOBAL                     2: len
                        520     LOAD_FAST                       2: parts
                        522     CALL_FUNCTION                   1
                        524     STORE_FAST                      10: parts_hi
                        526     LOAD_CONST                      15: 0
                        528     STORE_FAST                      11: parts_lo
                        530     LOAD_CONST                      15: 0
                        532     STORE_FAST                      12: parts_skipped
                        534     SETUP_FINALLY                   55 (to 646)
                        536     LOAD_CONST                      15: 0
                        538     STORE_FAST                      13: ip_int
                        540     LOAD_GLOBAL                     8: range
                        542     LOAD_FAST                       10: parts_hi
                        544     CALL_FUNCTION                   1
                        546     GET_ITER                        
                        548     FOR_ITER                        16 (to 582)
                        550     STORE_FAST                      9: i
                        552     LOAD_FAST                       13: ip_int
                        554     LOAD_CONST                      10: 16
                        556     INPLACE_LSHIFT                  
                        558     STORE_FAST                      13: ip_int
                        560     LOAD_FAST                       13: ip_int
                        562     LOAD_FAST                       0: cls
                        564     LOAD_METHOD                     9: _parse_hextet
                        566     LOAD_FAST                       2: parts
                        568     LOAD_FAST                       9: i
                        570     BINARY_SUBSCR                   
                        572     CALL_METHOD                     1
                        574     INPLACE_OR                      
                        576     STORE_FAST                      13: ip_int
                        578     JUMP_ABSOLUTE                   274 (to 548)
                        582     LOAD_FAST                       13: ip_int
                        584     LOAD_CONST                      10: 16
                        586     LOAD_FAST                       12: parts_skipped
                        588     BINARY_MULTIPLY                 
                        590     INPLACE_LSHIFT                  
                        592     STORE_FAST                      13: ip_int
                        594     LOAD_GLOBAL                     8: range
                        596     LOAD_FAST                       11: parts_lo
                        598     UNARY_NEGATIVE                  
                        600     LOAD_CONST                      15: 0
                        602     CALL_FUNCTION                   2
                        604     GET_ITER                        
                        606     FOR_ITER                        16 (to 640)
                        608     STORE_FAST                      9: i
                        610     LOAD_FAST                       13: ip_int
                        612     LOAD_CONST                      10: 16
                        614     INPLACE_LSHIFT                  
                        616     STORE_FAST                      13: ip_int
                        618     LOAD_FAST                       13: ip_int
                        620     LOAD_FAST                       0: cls
                        622     LOAD_METHOD                     9: _parse_hextet
                        624     LOAD_FAST                       2: parts
                        626     LOAD_FAST                       9: i
                        628     BINARY_SUBSCR                   
                        630     CALL_METHOD                     1
                        632     INPLACE_OR                      
                        634     STORE_FAST                      13: ip_int
                        636     JUMP_ABSOLUTE                   303 (to 606)
                        640     LOAD_FAST                       13: ip_int
                        642     POP_BLOCK                       
                        644     RETURN_VALUE                    
                        646     DUP_TOP                         
                        648     LOAD_GLOBAL                     10: ValueError
                        650     JUMP_IF_NOT_EXC_MATCH           344 (to 688)
                        654     POP_TOP                         
                        656     STORE_FAST                      6: exc
                        658     POP_TOP                         
                        660     SETUP_FINALLY                   9 (to 680)
                        662     LOAD_GLOBAL                     0: AddressValueError
                        664     LOAD_CONST                      7: '%s in %r'
                        666     LOAD_FAST                       6: exc
                        668     LOAD_FAST                       1: ip_str
                        670     BUILD_TUPLE                     2
                        672     BINARY_MODULO                   
                        674     CALL_FUNCTION                   1
                        676     LOAD_CONST                      8: None
                        678     RAISE_VARARGS                   2
                        680     LOAD_CONST                      8: None
                        682     STORE_FAST                      6: exc
                        684     DELETE_FAST                     6: exc
                        686     RERAISE                         1
                        688     RERAISE                         0
                '_BaseV6._ip_int_from_string'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _parse_hextet
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_HEX_DIGITS'
                        'issuperset'
                        'ValueError'
                        'len'
                        'int'
                    [Var Names]
                        'cls'
                        'hextet_str'
                        'msg'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Convert an IPv6 hextet string into an integer.\n\n        Args:\n            hextet_str: A string, the number to parse.\n\n        Returns:\n            The hextet as an integer.\n\n        Raises:\n            ValueError: if the input isn't strictly a hex number from\n              [0..FFFF].\n\n        "
                        'Only hex digits permitted in %r'
                        4
                        'At most 4 characters permitted in %r'
                        16
                    [Disassembly]
                        0       LOAD_FAST                       0: cls
                        2       LOAD_ATTR                       0: _HEX_DIGITS
                        4       LOAD_METHOD                     1: issuperset
                        6       LOAD_FAST                       1: hextet_str
                        8       CALL_METHOD                     1
                        10      POP_JUMP_IF_TRUE                12 (to 24)
                        12      LOAD_GLOBAL                     2: ValueError
                        14      LOAD_CONST                      1: 'Only hex digits permitted in %r'
                        16      LOAD_FAST                       1: hextet_str
                        18      BINARY_MODULO                   
                        20      CALL_FUNCTION                   1
                        22      RAISE_VARARGS                   1
                        24      LOAD_GLOBAL                     3: len
                        26      LOAD_FAST                       1: hextet_str
                        28      CALL_FUNCTION                   1
                        30      LOAD_CONST                      2: 4
                        32      COMPARE_OP                      4 (>)
                        34      POP_JUMP_IF_FALSE               26 (to 52)
                        36      LOAD_CONST                      3: 'At most 4 characters permitted in %r'
                        38      STORE_FAST                      2: msg
                        40      LOAD_GLOBAL                     2: ValueError
                        42      LOAD_FAST                       2: msg
                        44      LOAD_FAST                       1: hextet_str
                        46      BINARY_MODULO                   
                        48      CALL_FUNCTION                   1
                        50      RAISE_VARARGS                   1
                        52      LOAD_GLOBAL                     4: int
                        54      LOAD_FAST                       1: hextet_str
                        56      LOAD_CONST                      4: 16
                        58      CALL_FUNCTION                   2
                        60      RETURN_VALUE                    
                '_BaseV6._parse_hextet'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _compress_hextets
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 9
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'enumerate'
                        'len'
                    [Var Names]
                        'cls'
                        'hextets'
                        'best_doublecolon_start'
                        'best_doublecolon_len'
                        'doublecolon_start'
                        'doublecolon_len'
                        'index'
                        'hextet'
                        'best_doublecolon_end'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Compresses a list of hextets.\n\n        Compresses a list of strings, replacing the longest continuous\n        sequence of "0" in the list with "" and adding empty strings at\n        the beginning or at the end of the string such that subsequently\n        calling ":".join(hextets) will produce the compressed version of\n        the IPv6 address.\n\n        Args:\n            hextets: A list of strings, the hextets to compress.\n\n        Returns:\n            A list of strings.\n\n        '
                        -1
                        0
                        '0'
                        1
                        ''
                    [Disassembly]
                        0       LOAD_CONST                      1: -1
                        2       STORE_FAST                      2: best_doublecolon_start
                        4       LOAD_CONST                      2: 0
                        6       STORE_FAST                      3: best_doublecolon_len
                        8       LOAD_CONST                      1: -1
                        10      STORE_FAST                      4: doublecolon_start
                        12      LOAD_CONST                      2: 0
                        14      STORE_FAST                      5: doublecolon_len
                        16      LOAD_GLOBAL                     0: enumerate
                        18      LOAD_FAST                       1: hextets
                        20      CALL_FUNCTION                   1
                        22      GET_ITER                        
                        24      FOR_ITER                        31 (to 88)
                        26      UNPACK_SEQUENCE                 2
                        28      STORE_FAST                      6: index
                        30      STORE_FAST                      7: hextet
                        32      LOAD_FAST                       7: hextet
                        34      LOAD_CONST                      3: '0'
                        36      COMPARE_OP                      2 (==)
                        38      POP_JUMP_IF_FALSE               39 (to 78)
                        40      LOAD_FAST                       5: doublecolon_len
                        42      LOAD_CONST                      4: 1
                        44      INPLACE_ADD                     
                        46      STORE_FAST                      5: doublecolon_len
                        48      LOAD_FAST                       4: doublecolon_start
                        50      LOAD_CONST                      1: -1
                        52      COMPARE_OP                      2 (==)
                        54      POP_JUMP_IF_FALSE               30 (to 60)
                        56      LOAD_FAST                       6: index
                        58      STORE_FAST                      4: doublecolon_start
                        60      LOAD_FAST                       5: doublecolon_len
                        62      LOAD_FAST                       3: best_doublecolon_len
                        64      COMPARE_OP                      4 (>)
                        66      POP_JUMP_IF_FALSE               38 (to 76)
                        68      LOAD_FAST                       5: doublecolon_len
                        70      STORE_FAST                      3: best_doublecolon_len
                        72      LOAD_FAST                       4: doublecolon_start
                        74      STORE_FAST                      2: best_doublecolon_start
                        76      JUMP_ABSOLUTE                   12 (to 24)
                        78      LOAD_CONST                      2: 0
                        80      STORE_FAST                      5: doublecolon_len
                        82      LOAD_CONST                      1: -1
                        84      STORE_FAST                      4: doublecolon_start
                        86      JUMP_ABSOLUTE                   12 (to 24)
                        88      LOAD_FAST                       3: best_doublecolon_len
                        90      LOAD_CONST                      4: 1
                        92      COMPARE_OP                      4 (>)
                        94      POP_JUMP_IF_FALSE               79 (to 158)
                        96      LOAD_FAST                       2: best_doublecolon_start
                        98      LOAD_FAST                       3: best_doublecolon_len
                        100     BINARY_ADD                      
                        102     STORE_FAST                      8: best_doublecolon_end
                        104     LOAD_FAST                       8: best_doublecolon_end
                        106     LOAD_GLOBAL                     1: len
                        108     LOAD_FAST                       1: hextets
                        110     CALL_FUNCTION                   1
                        112     COMPARE_OP                      2 (==)
                        114     POP_JUMP_IF_FALSE               63 (to 126)
                        116     LOAD_FAST                       1: hextets
                        118     LOAD_CONST                      5: ''
                        120     BUILD_LIST                      1
                        122     INPLACE_ADD                     
                        124     STORE_FAST                      1: hextets
                        126     LOAD_CONST                      5: ''
                        128     BUILD_LIST                      1
                        130     LOAD_FAST                       1: hextets
                        132     LOAD_FAST                       2: best_doublecolon_start
                        134     LOAD_FAST                       8: best_doublecolon_end
                        136     BUILD_SLICE                     2
                        138     STORE_SUBSCR                    
                        140     LOAD_FAST                       2: best_doublecolon_start
                        142     LOAD_CONST                      2: 0
                        144     COMPARE_OP                      2 (==)
                        146     POP_JUMP_IF_FALSE               79 (to 158)
                        148     LOAD_CONST                      5: ''
                        150     BUILD_LIST                      1
                        152     LOAD_FAST                       1: hextets
                        154     BINARY_ADD                      
                        156     STORE_FAST                      1: hextets
                        158     LOAD_FAST                       1: hextets
                        160     RETURN_VALUE                    
                '_BaseV6._compress_hextets'
                None
                [Code]
                    File Name: ipaddress.py
                    Object Name: _string_from_ip_int
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'int'
                        '_ip'
                        '_ALL_ONES'
                        'ValueError'
                        'range'
                        '_compress_hextets'
                        'join'
                    [Var Names]
                        'cls'
                        'ip_int'
                        'hextets'
                    [Free Vars]
                    [Cell Vars]
                        'hex_str'
                    [Constants]
                        'Turns a 128-bit integer into hexadecimal notation.\n\n        Args:\n            ip_int: An integer, the IP address.\n\n        Returns:\n            A string, the hexadecimal representation of the address.\n\n        Raises:\n            ValueError: The address is bigger than 128 bits of all ones.\n\n        '
                        None
                        'IPv6 address is too large'
                        '%032x'
                        [Code]
                            File Name: ipaddress.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 8
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'int'
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                                'hex_str'
                            [Cell Vars]
                            [Constants]
                                '%x'
                                4
                                16
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        15 (to 36)
                                6       STORE_FAST                      1: x
                                8       LOAD_CONST                      0: '%x'
                                10      LOAD_GLOBAL                     0: int
                                12      LOAD_DEREF                      0: hex_str
                                14      LOAD_FAST                       1: x
                                16      LOAD_FAST                       1: x
                                18      LOAD_CONST                      1: 4
                                20      BINARY_ADD                      
                                22      BUILD_SLICE                     2
                                24      BINARY_SUBSCR                   
                                26      LOAD_CONST                      2: 16
                                28      CALL_FUNCTION                   2
                                30      BINARY_MODULO                   
                                32      LIST_APPEND                     2
                                34      JUMP_ABSOLUTE                   2 (to 4)
                                36      RETURN_VALUE                    
                        '_BaseV6._string_from_ip_int.<locals>.<listcomp>'
                        0
                        32
                        4
                        ':'
                    [Disassembly]
                        0       LOAD_FAST                       1: ip_int
                        2       LOAD_CONST                      1: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               9 (to 18)
                        8       LOAD_GLOBAL                     0: int
                        10      LOAD_FAST                       0: cls
                        12      LOAD_ATTR                       1: _ip
                        14      CALL_FUNCTION                   1
                        16      STORE_FAST                      1: ip_int
                        18      LOAD_FAST                       1: ip_int
                        20      LOAD_FAST                       0: cls
                        22      LOAD_ATTR                       2: _ALL_ONES
                        24      COMPARE_OP                      4 (>)
                        26      POP_JUMP_IF_FALSE               18 (to 36)
                        28      LOAD_GLOBAL                     3: ValueError
                        30      LOAD_CONST                      2: 'IPv6 address is too large'
                        32      CALL_FUNCTION                   1
                        34      RAISE_VARARGS                   1
                        36      LOAD_CONST                      3: '%032x'
                        38      LOAD_FAST                       1: ip_int
                        40      BINARY_MODULO                   
                        42      STORE_DEREF                     0: hex_str
                        44      LOAD_CLOSURE                    0: hex_str
                        46      BUILD_TUPLE                     1
                        48      LOAD_CONST                      4: <CODE> <listcomp>
                        50      LOAD_CONST                      5: '_BaseV6._string_from_ip_int.<locals>.<listcomp>'
                        52      MAKE_FUNCTION                   8
                        54      LOAD_GLOBAL                     4: range
                        56      LOAD_CONST                      6: 0
                        58      LOAD_CONST                      7: 32
                        60      LOAD_CONST                      8: 4
                        62      CALL_FUNCTION                   3
                        64      GET_ITER                        
                        66      CALL_FUNCTION                   1
                        68      STORE_FAST                      2: hextets
                        70      LOAD_FAST                       0: cls
                        72      LOAD_METHOD                     5: _compress_hextets
                        74      LOAD_FAST                       2: hextets
                        76      CALL_METHOD                     1
                        78      STORE_FAST                      2: hextets
                        80      LOAD_CONST                      9: ':'
                        82      LOAD_METHOD                     6: join
                        84      LOAD_FAST                       2: hextets
                        86      CALL_METHOD                     1
                        88      RETURN_VALUE                    
                '_BaseV6._string_from_ip_int'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _explode_shorthand_ip_string
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'isinstance'
                        'IPv6Network'
                        'str'
                        'network_address'
                        'IPv6Interface'
                        'ip'
                        '_ip_int_from_string'
                        'range'
                        '_BaseNetwork'
                        'join'
                        '_prefixlen'
                    [Var Names]
                        'self'
                        'ip_str'
                        'ip_int'
                        'parts'
                    [Free Vars]
                    [Cell Vars]
                        'hex_str'
                    [Constants]
                        'Expand a shortened IPv6 address.\n\n        Args:\n            ip_str: A string, the IPv6 address.\n\n        Returns:\n            A string, the expanded IPv6 address.\n\n        '
                        '%032x'
                        [Code]
                            File Name: ipaddress.py
                            Object Name: <listcomp>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 6
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                                'hex_str'
                            [Cell Vars]
                            [Constants]
                                4
                            [Disassembly]
                                0       BUILD_LIST                      0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        10 (to 26)
                                6       STORE_FAST                      1: x
                                8       LOAD_DEREF                      0: hex_str
                                10      LOAD_FAST                       1: x
                                12      LOAD_FAST                       1: x
                                14      LOAD_CONST                      0: 4
                                16      BINARY_ADD                      
                                18      BUILD_SLICE                     2
                                20      BINARY_SUBSCR                   
                                22      LIST_APPEND                     2
                                24      JUMP_ABSOLUTE                   2 (to 4)
                                26      RETURN_VALUE                    
                        '_BaseV6._explode_shorthand_ip_string.<locals>.<listcomp>'
                        0
                        32
                        4
                        '%s/%d'
                        ':'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       0: self
                        4       LOAD_GLOBAL                     1: IPv6Network
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               11 (to 22)
                        10      LOAD_GLOBAL                     2: str
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       3: network_address
                        16      CALL_FUNCTION                   1
                        18      STORE_FAST                      1: ip_str
                        20      JUMP_FORWARD                    15 (to 52)
                        22      LOAD_GLOBAL                     0: isinstance
                        24      LOAD_FAST                       0: self
                        26      LOAD_GLOBAL                     4: IPv6Interface
                        28      CALL_FUNCTION                   2
                        30      POP_JUMP_IF_FALSE               22 (to 44)
                        32      LOAD_GLOBAL                     2: str
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       5: ip
                        38      CALL_FUNCTION                   1
                        40      STORE_FAST                      1: ip_str
                        42      JUMP_FORWARD                    4 (to 52)
                        44      LOAD_GLOBAL                     2: str
                        46      LOAD_FAST                       0: self
                        48      CALL_FUNCTION                   1
                        50      STORE_FAST                      1: ip_str
                        52      LOAD_FAST                       0: self
                        54      LOAD_METHOD                     6: _ip_int_from_string
                        56      LOAD_FAST                       1: ip_str
                        58      CALL_METHOD                     1
                        60      STORE_FAST                      2: ip_int
                        62      LOAD_CONST                      1: '%032x'
                        64      LOAD_FAST                       2: ip_int
                        66      BINARY_MODULO                   
                        68      STORE_DEREF                     0: hex_str
                        70      LOAD_CLOSURE                    0: hex_str
                        72      BUILD_TUPLE                     1
                        74      LOAD_CONST                      2: <CODE> <listcomp>
                        76      LOAD_CONST                      3: '_BaseV6._explode_shorthand_ip_string.<locals>.<listcomp>'
                        78      MAKE_FUNCTION                   8
                        80      LOAD_GLOBAL                     7: range
                        82      LOAD_CONST                      4: 0
                        84      LOAD_CONST                      5: 32
                        86      LOAD_CONST                      6: 4
                        88      CALL_FUNCTION                   3
                        90      GET_ITER                        
                        92      CALL_FUNCTION                   1
                        94      STORE_FAST                      3: parts
                        96      LOAD_GLOBAL                     0: isinstance
                        98      LOAD_FAST                       0: self
                        100     LOAD_GLOBAL                     8: _BaseNetwork
                        102     LOAD_GLOBAL                     4: IPv6Interface
                        104     BUILD_TUPLE                     2
                        106     CALL_FUNCTION                   2
                        108     POP_JUMP_IF_FALSE               65 (to 130)
                        110     LOAD_CONST                      7: '%s/%d'
                        112     LOAD_CONST                      8: ':'
                        114     LOAD_METHOD                     9: join
                        116     LOAD_FAST                       3: parts
                        118     CALL_METHOD                     1
                        120     LOAD_FAST                       0: self
                        122     LOAD_ATTR                       10: _prefixlen
                        124     BUILD_TUPLE                     2
                        126     BINARY_MODULO                   
                        128     RETURN_VALUE                    
                        130     LOAD_CONST                      8: ':'
                        132     LOAD_METHOD                     9: join
                        134     LOAD_FAST                       3: parts
                        136     CALL_METHOD                     1
                        138     RETURN_VALUE                    
                '_BaseV6._explode_shorthand_ip_string'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _reverse_pointer
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'exploded'
                        'replace'
                        'join'
                    [Var Names]
                        'self'
                        'reverse_chars'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the reverse DNS pointer name for the IPv6 address.\n\n        This implements the method described in RFC3596 2.5.\n\n        '
                        None
                        -1
                        ':'
                        ''
                        '.'
                        '.ip6.arpa'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: exploded
                        4       LOAD_CONST                      1: None
                        6       LOAD_CONST                      1: None
                        8       LOAD_CONST                      2: -1
                        10      BUILD_SLICE                     3
                        12      BINARY_SUBSCR                   
                        14      LOAD_METHOD                     1: replace
                        16      LOAD_CONST                      3: ':'
                        18      LOAD_CONST                      4: ''
                        20      CALL_METHOD                     2
                        22      STORE_FAST                      1: reverse_chars
                        24      LOAD_CONST                      5: '.'
                        26      LOAD_METHOD                     2: join
                        28      LOAD_FAST                       1: reverse_chars
                        30      CALL_METHOD                     1
                        32      LOAD_CONST                      6: '.ip6.arpa'
                        34      BINARY_ADD                      
                        36      RETURN_VALUE                    
                '_BaseV6._reverse_pointer'
                [Code]
                    File Name: ipaddress.py
                    Object Name: _split_scope_id
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'partition'
                        'AddressValueError'
                    [Var Names]
                        'ip_str'
                        'addr'
                        'sep'
                        'scope_id'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Helper function to parse IPv6 string address with scope id.\n\n        See RFC 4007 for details.\n\n        Args:\n            ip_str: A string, the IPv6 address.\n\n        Returns:\n            (addr, scope_id) tuple.\n\n        '
                        '%'
                        None
                        'Invalid IPv6 address: "%r"'
                    [Disassembly]
                        0       LOAD_FAST                       0: ip_str
                        2       LOAD_METHOD                     0: partition
                        4       LOAD_CONST                      1: '%'
                        6       CALL_METHOD                     1
                        8       UNPACK_SEQUENCE                 3
                        10      STORE_FAST                      1: addr
                        12      STORE_FAST                      2: sep
                        14      STORE_FAST                      3: scope_id
                        16      LOAD_FAST                       2: sep
                        18      POP_JUMP_IF_TRUE                16 (to 32)
                        20      LOAD_CONST                      2: None
                        22      STORE_FAST                      3: scope_id
                        24      LOAD_FAST                       1: addr
                        26      LOAD_FAST                       3: scope_id
                        28      BUILD_TUPLE                     2
                        30      RETURN_VALUE                    
                        32      LOAD_FAST                       3: scope_id
                        34      POP_JUMP_IF_FALSE               22 (to 44)
                        36      LOAD_CONST                      1: '%'
                        38      LOAD_FAST                       3: scope_id
                        40      CONTAINS_OP                     0 (in)
                        42      POP_JUMP_IF_FALSE               28 (to 56)
                        44      LOAD_GLOBAL                     1: AddressValueError
                        46      LOAD_CONST                      3: 'Invalid IPv6 address: "%r"'
                        48      LOAD_FAST                       0: ip_str
                        50      BINARY_MODULO                   
                        52      CALL_FUNCTION                   1
                        54      RAISE_VARARGS                   1
                        56      LOAD_FAST                       1: addr
                        58      LOAD_FAST                       3: scope_id
                        60      BUILD_TUPLE                     2
                        62      RETURN_VALUE                    
                '_BaseV6._split_scope_id'
                [Code]
                    File Name: ipaddress.py
                    Object Name: max_prefixlen
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_max_prefixlen'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _max_prefixlen
                        4       RETURN_VALUE                    
                '_BaseV6.max_prefixlen'
                [Code]
                    File Name: ipaddress.py
                    Object Name: version
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_version'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _version
                        4       RETURN_VALUE                    
                '_BaseV6.version'
                (
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_BaseV6'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Base IPv6 object.\n\n    The following methods are used by IPv6 objects in both single IP\n    addresses and networks.\n\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ()
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: 6
                18      STORE_NAME                      5: _version
                20      LOAD_CONST                      4: 2
                22      LOAD_NAME                       6: IPV6LENGTH
                24      BINARY_POWER                    
                26      LOAD_CONST                      5: 1
                28      BINARY_SUBTRACT                 
                30      STORE_NAME                      7: _ALL_ONES
                32      LOAD_CONST                      6: 8
                34      STORE_NAME                      8: _HEXTET_COUNT
                36      LOAD_NAME                       9: frozenset
                38      LOAD_CONST                      7: '0123456789ABCDEFabcdef'
                40      CALL_FUNCTION                   1
                42      STORE_NAME                      10: _HEX_DIGITS
                44      LOAD_NAME                       6: IPV6LENGTH
                46      STORE_NAME                      11: _max_prefixlen
                48      BUILD_MAP                       0
                50      STORE_NAME                      12: _netmask_cache
                52      LOAD_NAME                       13: classmethod
                54      LOAD_CONST                      8: <CODE> _make_netmask
                56      LOAD_CONST                      9: '_BaseV6._make_netmask'
                58      MAKE_FUNCTION                   0
                60      CALL_FUNCTION                   1
                62      STORE_NAME                      14: _make_netmask
                64      LOAD_NAME                       13: classmethod
                66      LOAD_CONST                      10: <CODE> _ip_int_from_string
                68      LOAD_CONST                      11: '_BaseV6._ip_int_from_string'
                70      MAKE_FUNCTION                   0
                72      CALL_FUNCTION                   1
                74      STORE_NAME                      15: _ip_int_from_string
                76      LOAD_NAME                       13: classmethod
                78      LOAD_CONST                      12: <CODE> _parse_hextet
                80      LOAD_CONST                      13: '_BaseV6._parse_hextet'
                82      MAKE_FUNCTION                   0
                84      CALL_FUNCTION                   1
                86      STORE_NAME                      16: _parse_hextet
                88      LOAD_NAME                       13: classmethod
                90      LOAD_CONST                      14: <CODE> _compress_hextets
                92      LOAD_CONST                      15: '_BaseV6._compress_hextets'
                94      MAKE_FUNCTION                   0
                96      CALL_FUNCTION                   1
                98      STORE_NAME                      17: _compress_hextets
                100     LOAD_NAME                       13: classmethod
                102     LOAD_CONST                      29: (None,)
                104     LOAD_CONST                      17: <CODE> _string_from_ip_int
                106     LOAD_CONST                      18: '_BaseV6._string_from_ip_int'
                108     MAKE_FUNCTION                   1
                110     CALL_FUNCTION                   1
                112     STORE_NAME                      18: _string_from_ip_int
                114     LOAD_CONST                      19: <CODE> _explode_shorthand_ip_string
                116     LOAD_CONST                      20: '_BaseV6._explode_shorthand_ip_string'
                118     MAKE_FUNCTION                   0
                120     STORE_NAME                      19: _explode_shorthand_ip_string
                122     LOAD_CONST                      21: <CODE> _reverse_pointer
                124     LOAD_CONST                      22: '_BaseV6._reverse_pointer'
                126     MAKE_FUNCTION                   0
                128     STORE_NAME                      20: _reverse_pointer
                130     LOAD_NAME                       21: staticmethod
                132     LOAD_CONST                      23: <CODE> _split_scope_id
                134     LOAD_CONST                      24: '_BaseV6._split_scope_id'
                136     MAKE_FUNCTION                   0
                138     CALL_FUNCTION                   1
                140     STORE_NAME                      22: _split_scope_id
                142     LOAD_NAME                       23: property
                144     LOAD_CONST                      25: <CODE> max_prefixlen
                146     LOAD_CONST                      26: '_BaseV6.max_prefixlen'
                148     MAKE_FUNCTION                   0
                150     CALL_FUNCTION                   1
                152     STORE_NAME                      24: max_prefixlen
                154     LOAD_NAME                       23: property
                156     LOAD_CONST                      27: <CODE> version
                158     LOAD_CONST                      28: '_BaseV6.version'
                160     MAKE_FUNCTION                   0
                162     CALL_FUNCTION                   1
                164     STORE_NAME                      25: version
                166     LOAD_CONST                      16: None
                168     RETURN_VALUE                    
        '_BaseV6'
        [Code]
            File Name: ipaddress.py
            Object Name: IPv6Address
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 4
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__init__'
                '__str__'
                '__hash__'
                '__eq__'
                'property'
                'scope_id'
                'packed'
                'is_multicast'
                'is_reserved'
                'is_link_local'
                'is_site_local'
                'functools'
                'lru_cache'
                'is_private'
                'is_global'
                'is_unspecified'
                'is_loopback'
                'ipv4_mapped'
                'teredo'
                'sixtofour'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'IPv6Address'
                'Represent and manipulate single IPv6 Addresses.'
                (
                    '_ip'
                    '_scope_id'
                    '__weakref__'
                )
                [Code]
                    File Name: ipaddress.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'isinstance'
                        'int'
                        '_check_int_address'
                        '_ip'
                        '_scope_id'
                        'bytes'
                        '_check_packed_address'
                        'from_bytes'
                        'str'
                        'AddressValueError'
                        '_split_scope_id'
                        '_ip_int_from_string'
                    [Var Names]
                        'self'
                        'address'
                        'addr_str'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Instantiate a new IPv6 address object.\n\n        Args:\n            address: A string or integer representing the IP\n\n              Additionally, an integer can be passed, so\n              IPv6Address('2001:db8::') ==\n                IPv6Address(42540766411282592856903984951653826560)\n              or, more generally\n              IPv6Address(int(IPv6Address('2001:db8::'))) ==\n                IPv6Address('2001:db8::')\n\n        Raises:\n            AddressValueError: If address isn't a valid IPv6 address.\n\n        "
                        None
                        16
                        'big'
                        '/'
                        "Unexpected '/' in "
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: isinstance
                        2       LOAD_FAST                       1: address
                        4       LOAD_GLOBAL                     1: int
                        6       CALL_FUNCTION                   2
                        8       POP_JUMP_IF_FALSE               18 (to 36)
                        10      LOAD_FAST                       0: self
                        12      LOAD_METHOD                     2: _check_int_address
                        14      LOAD_FAST                       1: address
                        16      CALL_METHOD                     1
                        18      POP_TOP                         
                        20      LOAD_FAST                       1: address
                        22      LOAD_FAST                       0: self
                        24      STORE_ATTR                      3: _ip
                        26      LOAD_CONST                      1: None
                        28      LOAD_FAST                       0: self
                        30      STORE_ATTR                      4: _scope_id
                        32      LOAD_CONST                      1: None
                        34      RETURN_VALUE                    
                        36      LOAD_GLOBAL                     0: isinstance
                        38      LOAD_FAST                       1: address
                        40      LOAD_GLOBAL                     5: bytes
                        42      CALL_FUNCTION                   2
                        44      POP_JUMP_IF_FALSE               41 (to 82)
                        46      LOAD_FAST                       0: self
                        48      LOAD_METHOD                     6: _check_packed_address
                        50      LOAD_FAST                       1: address
                        52      LOAD_CONST                      2: 16
                        54      CALL_METHOD                     2
                        56      POP_TOP                         
                        58      LOAD_GLOBAL                     1: int
                        60      LOAD_METHOD                     7: from_bytes
                        62      LOAD_FAST                       1: address
                        64      LOAD_CONST                      3: 'big'
                        66      CALL_METHOD                     2
                        68      LOAD_FAST                       0: self
                        70      STORE_ATTR                      3: _ip
                        72      LOAD_CONST                      1: None
                        74      LOAD_FAST                       0: self
                        76      STORE_ATTR                      4: _scope_id
                        78      LOAD_CONST                      1: None
                        80      RETURN_VALUE                    
                        82      LOAD_GLOBAL                     8: str
                        84      LOAD_FAST                       1: address
                        86      CALL_FUNCTION                   1
                        88      STORE_FAST                      2: addr_str
                        90      LOAD_CONST                      4: '/'
                        92      LOAD_FAST                       2: addr_str
                        94      CONTAINS_OP                     0 (in)
                        96      POP_JUMP_IF_FALSE               56 (to 112)
                        98      LOAD_GLOBAL                     9: AddressValueError
                        100     LOAD_CONST                      5: "Unexpected '/' in "
                        102     LOAD_FAST                       1: address
                        104     FORMAT_VALUE                    2 (FVC_REPR)
                        106     BUILD_STRING                    2
                        108     CALL_FUNCTION                   1
                        110     RAISE_VARARGS                   1
                        112     LOAD_FAST                       0: self
                        114     LOAD_METHOD                     10: _split_scope_id
                        116     LOAD_FAST                       2: addr_str
                        118     CALL_METHOD                     1
                        120     UNPACK_SEQUENCE                 2
                        122     STORE_FAST                      2: addr_str
                        124     LOAD_FAST                       0: self
                        126     STORE_ATTR                      4: _scope_id
                        128     LOAD_FAST                       0: self
                        130     LOAD_METHOD                     11: _ip_int_from_string
                        132     LOAD_FAST                       2: addr_str
                        134     CALL_METHOD                     1
                        136     LOAD_FAST                       0: self
                        138     STORE_ATTR                      3: _ip
                        140     LOAD_CONST                      1: None
                        142     RETURN_VALUE                    
                'IPv6Address.__init__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '__str__'
                        '_scope_id'
                    [Var Names]
                        'self'
                        'ip_str'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        '%'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_METHOD                     1: __str__
                        6       CALL_METHOD                     0
                        8       STORE_FAST                      1: ip_str
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _scope_id
                        14      POP_JUMP_IF_FALSE               15 (to 30)
                        16      LOAD_FAST                       1: ip_str
                        18      LOAD_CONST                      1: '%'
                        20      BINARY_ADD                      
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       2: _scope_id
                        26      BINARY_ADD                      
                        28      RETURN_VALUE                    
                        30      LOAD_FAST                       1: ip_str
                        32      RETURN_VALUE                    
                'IPv6Address.__str__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        '_ip'
                        '_scope_id'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _ip
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: _scope_id
                        10      BUILD_TUPLE                     2
                        12      CALL_FUNCTION                   1
                        14      RETURN_VALUE                    
                'IPv6Address.__hash__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 5
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '__eq__'
                        'NotImplemented'
                        '_scope_id'
                        'getattr'
                    [Var Names]
                        'self'
                        'other'
                        'address_equal'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        '_scope_id'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: super
                        2       CALL_FUNCTION                   0
                        4       LOAD_METHOD                     1: __eq__
                        6       LOAD_FAST                       1: other
                        8       CALL_METHOD                     1
                        10      STORE_FAST                      2: address_equal
                        12      LOAD_FAST                       2: address_equal
                        14      LOAD_GLOBAL                     2: NotImplemented
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_FALSE               12 (to 24)
                        20      LOAD_GLOBAL                     2: NotImplemented
                        22      RETURN_VALUE                    
                        24      LOAD_FAST                       2: address_equal
                        26      POP_JUMP_IF_TRUE                16 (to 32)
                        28      LOAD_CONST                      1: False
                        30      RETURN_VALUE                    
                        32      LOAD_FAST                       0: self
                        34      LOAD_ATTR                       3: _scope_id
                        36      LOAD_GLOBAL                     4: getattr
                        38      LOAD_FAST                       1: other
                        40      LOAD_CONST                      2: '_scope_id'
                        42      LOAD_CONST                      0: None
                        44      CALL_FUNCTION                   3
                        46      COMPARE_OP                      2 (==)
                        48      RETURN_VALUE                    
                'IPv6Address.__eq__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: scope_id
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_scope_id'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Identifier of a particular zone of the address's scope.\n\n        See RFC 4007 for details.\n\n        Returns:\n            A string identifying the zone of the address if specified, else None.\n\n        "
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _scope_id
                        4       RETURN_VALUE                    
                'IPv6Address.scope_id'
                [Code]
                    File Name: ipaddress.py
                    Object Name: packed
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'v6_int_to_packed'
                        '_ip'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'The binary representation of this address.'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: v6_int_to_packed
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _ip
                        6       CALL_FUNCTION                   1
                        8       RETURN_VALUE                    
                'IPv6Address.packed'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_multicast
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_constants'
                        '_multicast_network'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is reserved for multicast use.\n\n        Returns:\n            A boolean, True if the address is a multicast address.\n            See RFC 2373 2.7 for details.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _constants
                        6       LOAD_ATTR                       1: _multicast_network
                        8       CONTAINS_OP                     0 (in)
                        10      RETURN_VALUE                    
                'IPv6Address.is_multicast'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_reserved
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'any'
                        '_constants'
                        '_reserved_networks'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        'Test if the address is otherwise IETF reserved.\n\n        Returns:\n            A boolean, True if the address is within one of the\n            reserved IPv6 Network ranges.\n\n        '
                        [Code]
                            File Name: ipaddress.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                            [Var Names]
                                '.0'
                                'x'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: x
                                8       LOAD_DEREF                      0: self
                                10      LOAD_FAST                       1: x
                                12      CONTAINS_OP                     0 (in)
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'IPv6Address.is_reserved.<locals>.<genexpr>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: any
                        2       LOAD_CLOSURE                    0: self
                        4       BUILD_TUPLE                     1
                        6       LOAD_CONST                      1: <CODE> <genexpr>
                        8       LOAD_CONST                      2: 'IPv6Address.is_reserved.<locals>.<genexpr>'
                        10      MAKE_FUNCTION                   8
                        12      LOAD_DEREF                      0: self
                        14      LOAD_ATTR                       1: _constants
                        16      LOAD_ATTR                       2: _reserved_networks
                        18      GET_ITER                        
                        20      CALL_FUNCTION                   1
                        22      CALL_FUNCTION                   1
                        24      RETURN_VALUE                    
                'IPv6Address.is_reserved'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_link_local
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_constants'
                        '_linklocal_network'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is reserved for link-local.\n\n        Returns:\n            A boolean, True if the address is reserved per RFC 4291.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _constants
                        6       LOAD_ATTR                       1: _linklocal_network
                        8       CONTAINS_OP                     0 (in)
                        10      RETURN_VALUE                    
                'IPv6Address.is_link_local'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_site_local
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_constants'
                        '_sitelocal_network'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is reserved for site-local.\n\n        Note that the site-local address space has been deprecated by RFC 3879.\n        Use is_private to test if this address is in the space of unique local\n        addresses as defined by RFC 4193.\n\n        Returns:\n            A boolean, True if the address is reserved per RFC 3513 2.5.6.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       0: _constants
                        6       LOAD_ATTR                       1: _sitelocal_network
                        8       CONTAINS_OP                     0 (in)
                        10      RETURN_VALUE                    
                'IPv6Address.is_site_local'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_private
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'ipv4_mapped'
                        'is_private'
                        'any'
                        '_constants'
                        '_private_networks'
                        'all'
                        '_private_networks_exceptions'
                    [Var Names]
                        'self'
                        'ipv4_mapped'
                    [Free Vars]
                    [Cell Vars]
                        'self'
                    [Constants]
                        '``True`` if the address is defined as not globally reachable by\n        iana-ipv4-special-registry_ (for IPv4) or iana-ipv6-special-registry_\n        (for IPv6) with the following exceptions:\n\n        * ``is_private`` is ``False`` for ``100.64.0.0/10``\n        * For IPv4-mapped IPv6-addresses the ``is_private`` value is determined by the\n            semantics of the underlying IPv4 addresses and the following condition holds\n            (see :attr:`IPv6Address.ipv4_mapped`)::\n\n                address.is_private == address.ipv4_mapped.is_private\n\n        ``is_private`` has value opposite to :attr:`is_global`, except for the ``100.64.0.0/10``\n        IPv4 range where they are both ``False``.\n        '
                        None
                        [Code]
                            File Name: ipaddress.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                            [Var Names]
                                '.0'
                                'net'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: net
                                8       LOAD_DEREF                      0: self
                                10      LOAD_FAST                       1: net
                                12      CONTAINS_OP                     0 (in)
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                        'IPv6Address.is_private.<locals>.<genexpr>'
                        [Code]
                            File Name: ipaddress.py
                            Object Name: <genexpr>
                            Arg Count: 1
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 2
                            Stack Size: 3
                            Flags: 0x00000033 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED | CO_GENERATOR)
                            [Names]
                            [Var Names]
                                '.0'
                                'net'
                            [Free Vars]
                                'self'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       GEN_START                       0
                                2       LOAD_FAST                       0: .0
                                4       FOR_ITER                        7 (to 20)
                                6       STORE_FAST                      1: net
                                8       LOAD_DEREF                      0: self
                                10      LOAD_FAST                       1: net
                                12      CONTAINS_OP                     1 (not in)
                                14      YIELD_VALUE                     
                                16      POP_TOP                         
                                18      JUMP_ABSOLUTE                   2 (to 4)
                                20      LOAD_CONST                      0: None
                                22      RETURN_VALUE                    
                    [Disassembly]
                        0       LOAD_DEREF                      0: self
                        2       LOAD_ATTR                       0: ipv4_mapped
                        4       STORE_FAST                      1: ipv4_mapped
                        6       LOAD_FAST                       1: ipv4_mapped
                        8       LOAD_CONST                      1: None
                        10      IS_OP                           1 (is not)
                        12      POP_JUMP_IF_FALSE               10 (to 20)
                        14      LOAD_FAST                       1: ipv4_mapped
                        16      LOAD_ATTR                       1: is_private
                        18      RETURN_VALUE                    
                        20      LOAD_GLOBAL                     2: any
                        22      LOAD_CLOSURE                    0: self
                        24      BUILD_TUPLE                     1
                        26      LOAD_CONST                      2: <CODE> <genexpr>
                        28      LOAD_CONST                      3: 'IPv6Address.is_private.<locals>.<genexpr>'
                        30      MAKE_FUNCTION                   8
                        32      LOAD_DEREF                      0: self
                        34      LOAD_ATTR                       3: _constants
                        36      LOAD_ATTR                       4: _private_networks
                        38      GET_ITER                        
                        40      CALL_FUNCTION                   1
                        42      CALL_FUNCTION                   1
                        44      JUMP_IF_FALSE_OR_POP            35 (to 70)
                        46      LOAD_GLOBAL                     5: all
                        48      LOAD_CLOSURE                    0: self
                        50      BUILD_TUPLE                     1
                        52      LOAD_CONST                      4: <CODE> <genexpr>
                        54      LOAD_CONST                      3: 'IPv6Address.is_private.<locals>.<genexpr>'
                        56      MAKE_FUNCTION                   8
                        58      LOAD_DEREF                      0: self
                        60      LOAD_ATTR                       3: _constants
                        62      LOAD_ATTR                       6: _private_networks_exceptions
                        64      GET_ITER                        
                        66      CALL_FUNCTION                   1
                        68      CALL_FUNCTION                   1
                        70      RETURN_VALUE                    
                'IPv6Address.is_private'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_global
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'is_private'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        '``True`` if the address is defined as globally reachable by\n        iana-ipv4-special-registry_ (for IPv4) or iana-ipv6-special-registry_\n        (for IPv6) with the following exception:\n\n        For IPv4-mapped IPv6-addresses the ``is_private`` value is determined by the\n        semantics of the underlying IPv4 addresses and the following condition holds\n        (see :attr:`IPv6Address.ipv4_mapped`)::\n\n            address.is_global == address.ipv4_mapped.is_global\n\n        ``is_global`` has value opposite to :attr:`is_private`, except for the ``100.64.0.0/10``\n        IPv4 range where they are both ``False``.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: is_private
                        4       UNARY_NOT                       
                        6       RETURN_VALUE                    
                'IPv6Address.is_global'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_unspecified
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ip'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is unspecified.\n\n        Returns:\n            A boolean, True if this is the unspecified address as defined in\n            RFC 2373 2.5.2.\n\n        '
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _ip
                        4       LOAD_CONST                      1: 0
                        6       COMPARE_OP                      2 (==)
                        8       RETURN_VALUE                    
                'IPv6Address.is_unspecified'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_loopback
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ip'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is a loopback address.\n\n        Returns:\n            A boolean, True if the address is a loopback address as defined in\n            RFC 2373 2.5.3.\n\n        '
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _ip
                        4       LOAD_CONST                      1: 1
                        6       COMPARE_OP                      2 (==)
                        8       RETURN_VALUE                    
                'IPv6Address.is_loopback'
                [Code]
                    File Name: ipaddress.py
                    Object Name: ipv4_mapped
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ip'
                        'IPv4Address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the IPv4 mapped address.\n\n        Returns:\n            If the IPv6 address is a v4 mapped address, return the\n            IPv4 mapped address. Return None otherwise.\n\n        '
                        32
                        65535
                        None
                        0xFFFFFFFF
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _ip
                        4       LOAD_CONST                      1: 32
                        6       BINARY_RSHIFT                   
                        8       LOAD_CONST                      2: 65535
                        10      COMPARE_OP                      3 (!=)
                        12      POP_JUMP_IF_FALSE               9 (to 18)
                        14      LOAD_CONST                      3: None
                        16      RETURN_VALUE                    
                        18      LOAD_GLOBAL                     1: IPv4Address
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       0: _ip
                        24      LOAD_CONST                      4: 0xFFFFFFFF
                        26      BINARY_AND                      
                        28      CALL_FUNCTION                   1
                        30      RETURN_VALUE                    
                'IPv6Address.ipv4_mapped'
                [Code]
                    File Name: ipaddress.py
                    Object Name: teredo
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ip'
                        'IPv4Address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Tuple of embedded teredo IPs.\n\n        Returns:\n            Tuple of the (server, client) IPs or None if the address\n            doesn't appear to be a teredo address (doesn't start with\n            2001::/32)\n\n        "
                        96
                        536936448
                        None
                        64
                        0xFFFFFFFF
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _ip
                        4       LOAD_CONST                      1: 96
                        6       BINARY_RSHIFT                   
                        8       LOAD_CONST                      2: 536936448
                        10      COMPARE_OP                      3 (!=)
                        12      POP_JUMP_IF_FALSE               9 (to 18)
                        14      LOAD_CONST                      3: None
                        16      RETURN_VALUE                    
                        18      LOAD_GLOBAL                     1: IPv4Address
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       0: _ip
                        24      LOAD_CONST                      4: 64
                        26      BINARY_RSHIFT                   
                        28      LOAD_CONST                      5: 0xFFFFFFFF
                        30      BINARY_AND                      
                        32      CALL_FUNCTION                   1
                        34      LOAD_GLOBAL                     1: IPv4Address
                        36      LOAD_FAST                       0: self
                        38      LOAD_ATTR                       0: _ip
                        40      UNARY_INVERT                    
                        42      LOAD_CONST                      5: 0xFFFFFFFF
                        44      BINARY_AND                      
                        46      CALL_FUNCTION                   1
                        48      BUILD_TUPLE                     2
                        50      RETURN_VALUE                    
                'IPv6Address.teredo'
                [Code]
                    File Name: ipaddress.py
                    Object Name: sixtofour
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ip'
                        'IPv4Address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Return the IPv4 6to4 embedded address.\n\n        Returns:\n            The IPv4 6to4-embedded address if present or None if the\n            address doesn't appear to contain a 6to4 embedded address.\n\n        "
                        112
                        8194
                        None
                        80
                        0xFFFFFFFF
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _ip
                        4       LOAD_CONST                      1: 112
                        6       BINARY_RSHIFT                   
                        8       LOAD_CONST                      2: 8194
                        10      COMPARE_OP                      3 (!=)
                        12      POP_JUMP_IF_FALSE               9 (to 18)
                        14      LOAD_CONST                      3: None
                        16      RETURN_VALUE                    
                        18      LOAD_GLOBAL                     1: IPv4Address
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       0: _ip
                        24      LOAD_CONST                      4: 80
                        26      BINARY_RSHIFT                   
                        28      LOAD_CONST                      5: 0xFFFFFFFF
                        30      BINARY_AND                      
                        32      CALL_FUNCTION                   1
                        34      RETURN_VALUE                    
                'IPv6Address.sixtofour'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'IPv6Address'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Represent and manipulate single IPv6 Addresses.'
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: ('_ip', '_scope_id', '__weakref__')
                14      STORE_NAME                      4: __slots__
                16      LOAD_CONST                      3: <CODE> __init__
                18      LOAD_CONST                      4: 'IPv6Address.__init__'
                20      MAKE_FUNCTION                   0
                22      STORE_NAME                      5: __init__
                24      LOAD_CLOSURE                    0: __class__
                26      BUILD_TUPLE                     1
                28      LOAD_CONST                      5: <CODE> __str__
                30      LOAD_CONST                      6: 'IPv6Address.__str__'
                32      MAKE_FUNCTION                   8
                34      STORE_NAME                      6: __str__
                36      LOAD_CONST                      7: <CODE> __hash__
                38      LOAD_CONST                      8: 'IPv6Address.__hash__'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: __hash__
                44      LOAD_CLOSURE                    0: __class__
                46      BUILD_TUPLE                     1
                48      LOAD_CONST                      9: <CODE> __eq__
                50      LOAD_CONST                      10: 'IPv6Address.__eq__'
                52      MAKE_FUNCTION                   8
                54      STORE_NAME                      8: __eq__
                56      LOAD_NAME                       9: property
                58      LOAD_CONST                      11: <CODE> scope_id
                60      LOAD_CONST                      12: 'IPv6Address.scope_id'
                62      MAKE_FUNCTION                   0
                64      CALL_FUNCTION                   1
                66      STORE_NAME                      10: scope_id
                68      LOAD_NAME                       9: property
                70      LOAD_CONST                      13: <CODE> packed
                72      LOAD_CONST                      14: 'IPv6Address.packed'
                74      MAKE_FUNCTION                   0
                76      CALL_FUNCTION                   1
                78      STORE_NAME                      11: packed
                80      LOAD_NAME                       9: property
                82      LOAD_CONST                      15: <CODE> is_multicast
                84      LOAD_CONST                      16: 'IPv6Address.is_multicast'
                86      MAKE_FUNCTION                   0
                88      CALL_FUNCTION                   1
                90      STORE_NAME                      12: is_multicast
                92      LOAD_NAME                       9: property
                94      LOAD_CONST                      17: <CODE> is_reserved
                96      LOAD_CONST                      18: 'IPv6Address.is_reserved'
                98      MAKE_FUNCTION                   0
                100     CALL_FUNCTION                   1
                102     STORE_NAME                      13: is_reserved
                104     LOAD_NAME                       9: property
                106     LOAD_CONST                      19: <CODE> is_link_local
                108     LOAD_CONST                      20: 'IPv6Address.is_link_local'
                110     MAKE_FUNCTION                   0
                112     CALL_FUNCTION                   1
                114     STORE_NAME                      14: is_link_local
                116     LOAD_NAME                       9: property
                118     LOAD_CONST                      21: <CODE> is_site_local
                120     LOAD_CONST                      22: 'IPv6Address.is_site_local'
                122     MAKE_FUNCTION                   0
                124     CALL_FUNCTION                   1
                126     STORE_NAME                      15: is_site_local
                128     LOAD_NAME                       9: property
                130     LOAD_NAME                       16: functools
                132     LOAD_METHOD                     17: lru_cache
                134     CALL_METHOD                     0
                136     LOAD_CONST                      23: <CODE> is_private
                138     LOAD_CONST                      24: 'IPv6Address.is_private'
                140     MAKE_FUNCTION                   0
                142     CALL_FUNCTION                   1
                144     CALL_FUNCTION                   1
                146     STORE_NAME                      18: is_private
                148     LOAD_NAME                       9: property
                150     LOAD_CONST                      25: <CODE> is_global
                152     LOAD_CONST                      26: 'IPv6Address.is_global'
                154     MAKE_FUNCTION                   0
                156     CALL_FUNCTION                   1
                158     STORE_NAME                      19: is_global
                160     LOAD_NAME                       9: property
                162     LOAD_CONST                      27: <CODE> is_unspecified
                164     LOAD_CONST                      28: 'IPv6Address.is_unspecified'
                166     MAKE_FUNCTION                   0
                168     CALL_FUNCTION                   1
                170     STORE_NAME                      20: is_unspecified
                172     LOAD_NAME                       9: property
                174     LOAD_CONST                      29: <CODE> is_loopback
                176     LOAD_CONST                      30: 'IPv6Address.is_loopback'
                178     MAKE_FUNCTION                   0
                180     CALL_FUNCTION                   1
                182     STORE_NAME                      21: is_loopback
                184     LOAD_NAME                       9: property
                186     LOAD_CONST                      31: <CODE> ipv4_mapped
                188     LOAD_CONST                      32: 'IPv6Address.ipv4_mapped'
                190     MAKE_FUNCTION                   0
                192     CALL_FUNCTION                   1
                194     STORE_NAME                      22: ipv4_mapped
                196     LOAD_NAME                       9: property
                198     LOAD_CONST                      33: <CODE> teredo
                200     LOAD_CONST                      34: 'IPv6Address.teredo'
                202     MAKE_FUNCTION                   0
                204     CALL_FUNCTION                   1
                206     STORE_NAME                      23: teredo
                208     LOAD_NAME                       9: property
                210     LOAD_CONST                      35: <CODE> sixtofour
                212     LOAD_CONST                      36: 'IPv6Address.sixtofour'
                214     MAKE_FUNCTION                   0
                216     CALL_FUNCTION                   1
                218     STORE_NAME                      24: sixtofour
                220     LOAD_CLOSURE                    0: __class__
                222     DUP_TOP                         
                224     STORE_NAME                      25: __classcell__
                226     RETURN_VALUE                    
        'IPv6Address'
        [Code]
            File Name: ipaddress.py
            Object Name: IPv6Interface
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__init__'
                'functools'
                'cached_property'
                'hostmask'
                '__str__'
                '__eq__'
                '__lt__'
                '__hash__'
                '_IPAddressBase'
                '__reduce__'
                'property'
                'ip'
                'with_prefixlen'
                'with_netmask'
                'with_hostmask'
                'is_unspecified'
                'is_loopback'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'IPv6Interface'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __init__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_split_addr_prefix'
                        'IPv6Address'
                        '__init__'
                        'IPv6Network'
                        'network'
                        'netmask'
                        '_prefixlen'
                    [Var Names]
                        'self'
                        'address'
                        'addr'
                        'mask'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                        (
                            'strict'
                        )
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _split_addr_prefix
                        4       LOAD_FAST                       1: address
                        6       CALL_METHOD                     1
                        8       UNPACK_SEQUENCE                 2
                        10      STORE_FAST                      2: addr
                        12      STORE_FAST                      3: mask
                        14      LOAD_GLOBAL                     1: IPv6Address
                        16      LOAD_METHOD                     2: __init__
                        18      LOAD_FAST                       0: self
                        20      LOAD_FAST                       2: addr
                        22      CALL_METHOD                     2
                        24      POP_TOP                         
                        26      LOAD_GLOBAL                     3: IPv6Network
                        28      LOAD_FAST                       2: addr
                        30      LOAD_FAST                       3: mask
                        32      BUILD_TUPLE                     2
                        34      LOAD_CONST                      1: False
                        36      LOAD_CONST                      2: ('strict',)
                        38      CALL_FUNCTION_KW                2
                        40      LOAD_FAST                       0: self
                        42      STORE_ATTR                      4: network
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       4: network
                        48      LOAD_ATTR                       5: netmask
                        50      LOAD_FAST                       0: self
                        52      STORE_ATTR                      5: netmask
                        54      LOAD_FAST                       0: self
                        56      LOAD_ATTR                       4: network
                        58      LOAD_ATTR                       6: _prefixlen
                        60      LOAD_FAST                       0: self
                        62      STORE_ATTR                      6: _prefixlen
                        64      LOAD_CONST                      0: None
                        66      RETURN_VALUE                    
                'IPv6Interface.__init__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: hostmask
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network'
                        'hostmask'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: network
                        4       LOAD_ATTR                       1: hostmask
                        6       RETURN_VALUE                    
                'IPv6Interface.hostmask'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __str__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'super'
                        '__str__'
                        '_prefixlen'
                    [Var Names]
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%d'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%d'
                        2       LOAD_GLOBAL                     0: super
                        4       CALL_FUNCTION                   0
                        6       LOAD_METHOD                     1: __str__
                        8       CALL_METHOD                     0
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       2: _prefixlen
                        14      BUILD_TUPLE                     2
                        16      BINARY_MODULO                   
                        18      RETURN_VALUE                    
                'IPv6Interface.__str__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __eq__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'IPv6Address'
                        '__eq__'
                        'NotImplemented'
                        'network'
                        'AttributeError'
                    [Var Names]
                        'self'
                        'other'
                        'address_equal'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: IPv6Address
                        2       LOAD_METHOD                     1: __eq__
                        4       LOAD_FAST                       0: self
                        6       LOAD_FAST                       1: other
                        8       CALL_METHOD                     2
                        10      STORE_FAST                      2: address_equal
                        12      LOAD_FAST                       2: address_equal
                        14      LOAD_GLOBAL                     2: NotImplemented
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_TRUE                12 (to 24)
                        20      LOAD_FAST                       2: address_equal
                        22      POP_JUMP_IF_TRUE                14 (to 28)
                        24      LOAD_FAST                       2: address_equal
                        26      RETURN_VALUE                    
                        28      SETUP_FINALLY                   7 (to 44)
                        30      LOAD_FAST                       0: self
                        32      LOAD_ATTR                       3: network
                        34      LOAD_FAST                       1: other
                        36      LOAD_ATTR                       3: network
                        38      COMPARE_OP                      2 (==)
                        40      POP_BLOCK                       
                        42      RETURN_VALUE                    
                        44      DUP_TOP                         
                        46      LOAD_GLOBAL                     4: AttributeError
                        48      JUMP_IF_NOT_EXC_MATCH           31 (to 62)
                        50      POP_TOP                         
                        52      POP_TOP                         
                        54      POP_TOP                         
                        56      POP_EXCEPT                      
                        58      LOAD_CONST                      1: False
                        60      RETURN_VALUE                    
                        62      RERAISE                         0
                'IPv6Interface.__eq__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __lt__
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'IPv6Address'
                        '__lt__'
                        'NotImplemented'
                        'network'
                        'AttributeError'
                    [Var Names]
                        'self'
                        'other'
                        'address_less'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        False
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: IPv6Address
                        2       LOAD_METHOD                     1: __lt__
                        4       LOAD_FAST                       0: self
                        6       LOAD_FAST                       1: other
                        8       CALL_METHOD                     2
                        10      STORE_FAST                      2: address_less
                        12      LOAD_FAST                       2: address_less
                        14      LOAD_GLOBAL                     2: NotImplemented
                        16      IS_OP                           0 (is)
                        18      POP_JUMP_IF_FALSE               12 (to 24)
                        20      LOAD_FAST                       2: address_less
                        22      RETURN_VALUE                    
                        24      SETUP_FINALLY                   15 (to 56)
                        26      LOAD_FAST                       0: self
                        28      LOAD_ATTR                       3: network
                        30      LOAD_FAST                       1: other
                        32      LOAD_ATTR                       3: network
                        34      COMPARE_OP                      0 (<)
                        36      JUMP_IF_TRUE_OR_POP             26 (to 52)
                        38      LOAD_FAST                       0: self
                        40      LOAD_ATTR                       3: network
                        42      LOAD_FAST                       1: other
                        44      LOAD_ATTR                       3: network
                        46      COMPARE_OP                      2 (==)
                        48      JUMP_IF_FALSE_OR_POP            26 (to 52)
                        50      LOAD_FAST                       2: address_less
                        52      POP_BLOCK                       
                        54      RETURN_VALUE                    
                        56      DUP_TOP                         
                        58      LOAD_GLOBAL                     4: AttributeError
                        60      JUMP_IF_NOT_EXC_MATCH           37 (to 74)
                        62      POP_TOP                         
                        64      POP_TOP                         
                        66      POP_TOP                         
                        68      POP_EXCEPT                      
                        70      LOAD_CONST                      1: False
                        72      RETURN_VALUE                    
                        74      RERAISE                         0
                'IPv6Interface.__lt__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: __hash__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'hash'
                        '_ip'
                        '_prefixlen'
                        'int'
                        'network'
                        'network_address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: hash
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _ip
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       2: _prefixlen
                        10      LOAD_GLOBAL                     3: int
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       4: network
                        16      LOAD_ATTR                       5: network_address
                        18      CALL_FUNCTION                   1
                        20      BUILD_TUPLE                     3
                        22      CALL_FUNCTION                   1
                        24      RETURN_VALUE                    
                'IPv6Interface.__hash__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: ip
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'IPv6Address'
                        '_ip'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: IPv6Address
                        2       LOAD_FAST                       0: self
                        4       LOAD_ATTR                       1: _ip
                        6       CALL_FUNCTION                   1
                        8       RETURN_VALUE                    
                'IPv6Interface.ip'
                [Code]
                    File Name: ipaddress.py
                    Object Name: with_prefixlen
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_string_from_ip_int'
                        '_ip'
                        '_prefixlen'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%s'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%s'
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _string_from_ip_int
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _ip
                        10      CALL_METHOD                     1
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: _prefixlen
                        16      BUILD_TUPLE                     2
                        18      BINARY_MODULO                   
                        20      RETURN_VALUE                    
                'IPv6Interface.with_prefixlen'
                [Code]
                    File Name: ipaddress.py
                    Object Name: with_netmask
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_string_from_ip_int'
                        '_ip'
                        'netmask'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%s'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%s'
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _string_from_ip_int
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _ip
                        10      CALL_METHOD                     1
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: netmask
                        16      BUILD_TUPLE                     2
                        18      BINARY_MODULO                   
                        20      RETURN_VALUE                    
                'IPv6Interface.with_netmask'
                [Code]
                    File Name: ipaddress.py
                    Object Name: with_hostmask
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_string_from_ip_int'
                        '_ip'
                        'hostmask'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        '%s/%s'
                    [Disassembly]
                        0       LOAD_CONST                      1: '%s/%s'
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _string_from_ip_int
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _ip
                        10      CALL_METHOD                     1
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: hostmask
                        16      BUILD_TUPLE                     2
                        18      BINARY_MODULO                   
                        20      RETURN_VALUE                    
                'IPv6Interface.with_hostmask'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_unspecified
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ip'
                        'network'
                        'is_unspecified'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _ip
                        4       LOAD_CONST                      1: 0
                        6       COMPARE_OP                      2 (==)
                        8       JUMP_IF_FALSE_OR_POP            8 (to 16)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: network
                        14      LOAD_ATTR                       2: is_unspecified
                        16      RETURN_VALUE                    
                'IPv6Interface.is_unspecified'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_loopback
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_ip'
                        'network'
                        'is_loopback'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _ip
                        4       LOAD_CONST                      1: 1
                        6       COMPARE_OP                      2 (==)
                        8       JUMP_IF_FALSE_OR_POP            8 (to 16)
                        10      LOAD_FAST                       0: self
                        12      LOAD_ATTR                       1: network
                        14      LOAD_ATTR                       2: is_loopback
                        16      RETURN_VALUE                    
                'IPv6Interface.is_loopback'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'IPv6Interface'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: <CODE> __init__
                10      LOAD_CONST                      2: 'IPv6Interface.__init__'
                12      MAKE_FUNCTION                   0
                14      STORE_NAME                      3: __init__
                16      LOAD_NAME                       4: functools
                18      LOAD_ATTR                       5: cached_property
                20      LOAD_CONST                      3: <CODE> hostmask
                22      LOAD_CONST                      4: 'IPv6Interface.hostmask'
                24      MAKE_FUNCTION                   0
                26      CALL_FUNCTION                   1
                28      STORE_NAME                      6: hostmask
                30      LOAD_CLOSURE                    0: __class__
                32      BUILD_TUPLE                     1
                34      LOAD_CONST                      5: <CODE> __str__
                36      LOAD_CONST                      6: 'IPv6Interface.__str__'
                38      MAKE_FUNCTION                   8
                40      STORE_NAME                      7: __str__
                42      LOAD_CONST                      7: <CODE> __eq__
                44      LOAD_CONST                      8: 'IPv6Interface.__eq__'
                46      MAKE_FUNCTION                   0
                48      STORE_NAME                      8: __eq__
                50      LOAD_CONST                      9: <CODE> __lt__
                52      LOAD_CONST                      10: 'IPv6Interface.__lt__'
                54      MAKE_FUNCTION                   0
                56      STORE_NAME                      9: __lt__
                58      LOAD_CONST                      11: <CODE> __hash__
                60      LOAD_CONST                      12: 'IPv6Interface.__hash__'
                62      MAKE_FUNCTION                   0
                64      STORE_NAME                      10: __hash__
                66      LOAD_NAME                       11: _IPAddressBase
                68      LOAD_ATTR                       12: __reduce__
                70      STORE_NAME                      12: __reduce__
                72      LOAD_NAME                       13: property
                74      LOAD_CONST                      13: <CODE> ip
                76      LOAD_CONST                      14: 'IPv6Interface.ip'
                78      MAKE_FUNCTION                   0
                80      CALL_FUNCTION                   1
                82      STORE_NAME                      14: ip
                84      LOAD_NAME                       13: property
                86      LOAD_CONST                      15: <CODE> with_prefixlen
                88      LOAD_CONST                      16: 'IPv6Interface.with_prefixlen'
                90      MAKE_FUNCTION                   0
                92      CALL_FUNCTION                   1
                94      STORE_NAME                      15: with_prefixlen
                96      LOAD_NAME                       13: property
                98      LOAD_CONST                      17: <CODE> with_netmask
                100     LOAD_CONST                      18: 'IPv6Interface.with_netmask'
                102     MAKE_FUNCTION                   0
                104     CALL_FUNCTION                   1
                106     STORE_NAME                      16: with_netmask
                108     LOAD_NAME                       13: property
                110     LOAD_CONST                      19: <CODE> with_hostmask
                112     LOAD_CONST                      20: 'IPv6Interface.with_hostmask'
                114     MAKE_FUNCTION                   0
                116     CALL_FUNCTION                   1
                118     STORE_NAME                      17: with_hostmask
                120     LOAD_NAME                       13: property
                122     LOAD_CONST                      21: <CODE> is_unspecified
                124     LOAD_CONST                      22: 'IPv6Interface.is_unspecified'
                126     MAKE_FUNCTION                   0
                128     CALL_FUNCTION                   1
                130     STORE_NAME                      18: is_unspecified
                132     LOAD_NAME                       13: property
                134     LOAD_CONST                      23: <CODE> is_loopback
                136     LOAD_CONST                      24: 'IPv6Interface.is_loopback'
                138     MAKE_FUNCTION                   0
                140     CALL_FUNCTION                   1
                142     STORE_NAME                      19: is_loopback
                144     LOAD_CLOSURE                    0: __class__
                146     DUP_TOP                         
                148     STORE_NAME                      20: __classcell__
                150     RETURN_VALUE                    
        'IPv6Interface'
        [Code]
            File Name: ipaddress.py
            Object Name: IPv6Network
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                'IPv6Address'
                '_address_class'
                '__init__'
                'hosts'
                'property'
                'is_site_local'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                'IPv6Network'
                "This class represents and manipulates 128-bit IPv6 networks.\n\n    Attributes: [examples for IPv6('2001:db8::1000/124')]\n        .network_address: IPv6Address('2001:db8::1000')\n        .hostmask: IPv6Address('::f')\n        .broadcast_address: IPv6Address('2001:db8::100f')\n        .netmask: IPv6Address('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff0')\n        .prefixlen: 124\n\n    "
                True
                [Code]
                    File Name: ipaddress.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 4
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_split_addr_prefix'
                        'IPv6Address'
                        'network_address'
                        '_make_netmask'
                        'netmask'
                        '_prefixlen'
                        'int'
                        'ValueError'
                        '_max_prefixlen'
                        '__iter__'
                        'hosts'
                    [Var Names]
                        'self'
                        'address'
                        'strict'
                        'mask'
                        'packed'
                    [Free Vars]
                    [Cell Vars]
                        'addr'
                    [Constants]
                        "Instantiate a new IPv6 Network object.\n\n        Args:\n            address: A string or integer representing the IPv6 network or the\n              IP and prefix/netmask.\n              '2001:db8::/128'\n              '2001:db8:0000:0000:0000:0000:0000:0000/128'\n              '2001:db8::'\n              are all functionally the same in IPv6.  That is to say,\n              failing to provide a subnetmask will create an object with\n              a mask of /128.\n\n              Additionally, an integer can be passed, so\n              IPv6Network('2001:db8::') ==\n                IPv6Network(42540766411282592856903984951653826560)\n              or, more generally\n              IPv6Network(int(IPv6Network('2001:db8::'))) ==\n                IPv6Network('2001:db8::')\n\n            strict: A boolean. If true, ensure that we have been passed\n              A true network address, eg, 2001:db8::1000/124 and not an\n              IP address on a network, eg, 2001:db8::1/124.\n\n        Raises:\n            AddressValueError: If address isn't a valid IPv6 address.\n            NetmaskValueError: If the netmask isn't valid for\n              an IPv6 address.\n            ValueError: If strict was True and a network address was not\n              supplied.\n        "
                        '%s has host bits set'
                        1
                        [Code]
                            File Name: ipaddress.py
                            Object Name: <lambda>
                            Arg Count: 0
                            Pos Only Arg Count: 0
                            KW Only Arg Count: 0
                            Locals: 0
                            Stack Size: 2
                            Flags: 0x00000013 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NESTED)
                            [Names]
                                'IPv6Address'
                            [Var Names]
                            [Free Vars]
                                'addr'
                            [Cell Vars]
                            [Constants]
                                None
                            [Disassembly]
                                0       LOAD_GLOBAL                     0: IPv6Address
                                2       LOAD_DEREF                      0: addr
                                4       CALL_FUNCTION                   1
                                6       BUILD_LIST                      1
                                8       RETURN_VALUE                    
                        'IPv6Network.__init__.<locals>.<lambda>'
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _split_addr_prefix
                        4       LOAD_FAST                       1: address
                        6       CALL_METHOD                     1
                        8       UNPACK_SEQUENCE                 2
                        10      STORE_DEREF                     0: addr
                        12      STORE_FAST                      3: mask
                        14      LOAD_GLOBAL                     1: IPv6Address
                        16      LOAD_DEREF                      0: addr
                        18      CALL_FUNCTION                   1
                        20      LOAD_FAST                       0: self
                        22      STORE_ATTR                      2: network_address
                        24      LOAD_FAST                       0: self
                        26      LOAD_METHOD                     3: _make_netmask
                        28      LOAD_FAST                       3: mask
                        30      CALL_METHOD                     1
                        32      UNPACK_SEQUENCE                 2
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      4: netmask
                        38      LOAD_FAST                       0: self
                        40      STORE_ATTR                      5: _prefixlen
                        42      LOAD_GLOBAL                     6: int
                        44      LOAD_FAST                       0: self
                        46      LOAD_ATTR                       2: network_address
                        48      CALL_FUNCTION                   1
                        50      STORE_FAST                      4: packed
                        52      LOAD_FAST                       4: packed
                        54      LOAD_GLOBAL                     6: int
                        56      LOAD_FAST                       0: self
                        58      LOAD_ATTR                       4: netmask
                        60      CALL_FUNCTION                   1
                        62      BINARY_AND                      
                        64      LOAD_FAST                       4: packed
                        66      COMPARE_OP                      3 (!=)
                        68      POP_JUMP_IF_FALSE               53 (to 106)
                        70      LOAD_FAST                       2: strict
                        72      POP_JUMP_IF_FALSE               43 (to 86)
                        74      LOAD_GLOBAL                     7: ValueError
                        76      LOAD_CONST                      1: '%s has host bits set'
                        78      LOAD_FAST                       0: self
                        80      BINARY_MODULO                   
                        82      CALL_FUNCTION                   1
                        84      RAISE_VARARGS                   1
                        86      LOAD_GLOBAL                     1: IPv6Address
                        88      LOAD_FAST                       4: packed
                        90      LOAD_GLOBAL                     6: int
                        92      LOAD_FAST                       0: self
                        94      LOAD_ATTR                       4: netmask
                        96      CALL_FUNCTION                   1
                        98      BINARY_AND                      
                        100     CALL_FUNCTION                   1
                        102     LOAD_FAST                       0: self
                        104     STORE_ATTR                      2: network_address
                        106     LOAD_FAST                       0: self
                        108     LOAD_ATTR                       5: _prefixlen
                        110     LOAD_FAST                       0: self
                        112     LOAD_ATTR                       8: _max_prefixlen
                        114     LOAD_CONST                      2: 1
                        116     BINARY_SUBTRACT                 
                        118     COMPARE_OP                      2 (==)
                        120     POP_JUMP_IF_FALSE               67 (to 134)
                        122     LOAD_FAST                       0: self
                        124     LOAD_ATTR                       9: __iter__
                        126     LOAD_FAST                       0: self
                        128     STORE_ATTR                      10: hosts
                        130     LOAD_CONST                      5: None
                        132     RETURN_VALUE                    
                        134     LOAD_FAST                       0: self
                        136     LOAD_ATTR                       5: _prefixlen
                        138     LOAD_FAST                       0: self
                        140     LOAD_ATTR                       8: _max_prefixlen
                        142     COMPARE_OP                      2 (==)
                        144     POP_JUMP_IF_FALSE               82 (to 164)
                        146     LOAD_CLOSURE                    0: addr
                        148     BUILD_TUPLE                     1
                        150     LOAD_CONST                      3: <CODE> <lambda>
                        152     LOAD_CONST                      4: 'IPv6Network.__init__.<locals>.<lambda>'
                        154     MAKE_FUNCTION                   8
                        156     LOAD_FAST                       0: self
                        158     STORE_ATTR                      10: hosts
                        160     LOAD_CONST                      5: None
                        162     RETURN_VALUE                    
                        164     LOAD_CONST                      5: None
                        166     RETURN_VALUE                    
                'IPv6Network.__init__'
                [Code]
                    File Name: ipaddress.py
                    Object Name: hosts
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 4
                    Flags: 0x00000063 (CO_OPTIMIZED | CO_NEWLOCALS | CO_GENERATOR | CO_NOFREE)
                    [Names]
                        'int'
                        'network_address'
                        'broadcast_address'
                        'range'
                        '_address_class'
                    [Var Names]
                        'self'
                        'network'
                        'broadcast'
                        'x'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Generate Iterator over usable hosts in a network.\n\n          This is like __iter__ except it doesn't return the\n          Subnet-Router anycast address.\n\n        "
                        1
                        None
                    [Disassembly]
                        0       GEN_START                       0
                        2       LOAD_GLOBAL                     0: int
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: network_address
                        8       CALL_FUNCTION                   1
                        10      STORE_FAST                      1: network
                        12      LOAD_GLOBAL                     0: int
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: broadcast_address
                        18      CALL_FUNCTION                   1
                        20      STORE_FAST                      2: broadcast
                        22      LOAD_GLOBAL                     3: range
                        24      LOAD_FAST                       1: network
                        26      LOAD_CONST                      1: 1
                        28      BINARY_ADD                      
                        30      LOAD_FAST                       2: broadcast
                        32      LOAD_CONST                      1: 1
                        34      BINARY_ADD                      
                        36      CALL_FUNCTION                   2
                        38      GET_ITER                        
                        40      FOR_ITER                        8 (to 58)
                        42      STORE_FAST                      3: x
                        44      LOAD_FAST                       0: self
                        46      LOAD_METHOD                     4: _address_class
                        48      LOAD_FAST                       3: x
                        50      CALL_METHOD                     1
                        52      YIELD_VALUE                     
                        54      POP_TOP                         
                        56      JUMP_ABSOLUTE                   20 (to 40)
                        58      LOAD_CONST                      2: None
                        60      RETURN_VALUE                    
                'IPv6Network.hosts'
                [Code]
                    File Name: ipaddress.py
                    Object Name: is_site_local
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'network_address'
                        'is_site_local'
                        'broadcast_address'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Test if the address is reserved for site-local.\n\n        Note that the site-local address space has been deprecated by RFC 3879.\n        Use is_private to test if this address is in the space of unique local\n        addresses as defined by RFC 4193.\n\n        Returns:\n            A boolean, True if the address is reserved per RFC 3513 2.5.6.\n\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: network_address
                        4       LOAD_ATTR                       1: is_site_local
                        6       JUMP_IF_FALSE_OR_POP            7 (to 14)
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       2: broadcast_address
                        12      LOAD_ATTR                       1: is_site_local
                        14      RETURN_VALUE                    
                'IPv6Network.is_site_local'
                None
                (
                    True
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'IPv6Network'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: "This class represents and manipulates 128-bit IPv6 networks.\n\n    Attributes: [examples for IPv6('2001:db8::1000/124')]\n        .network_address: IPv6Address('2001:db8::1000')\n        .hostmask: IPv6Address('::f')\n        .broadcast_address: IPv6Address('2001:db8::100f')\n        .netmask: IPv6Address('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff0')\n        .prefixlen: 124\n\n    "
                10      STORE_NAME                      3: __doc__
                12      LOAD_NAME                       4: IPv6Address
                14      STORE_NAME                      5: _address_class
                16      LOAD_CONST                      10: (True,)
                18      LOAD_CONST                      3: <CODE> __init__
                20      LOAD_CONST                      4: 'IPv6Network.__init__'
                22      MAKE_FUNCTION                   1
                24      STORE_NAME                      6: __init__
                26      LOAD_CONST                      5: <CODE> hosts
                28      LOAD_CONST                      6: 'IPv6Network.hosts'
                30      MAKE_FUNCTION                   0
                32      STORE_NAME                      7: hosts
                34      LOAD_NAME                       8: property
                36      LOAD_CONST                      7: <CODE> is_site_local
                38      LOAD_CONST                      8: 'IPv6Network.is_site_local'
                40      MAKE_FUNCTION                   0
                42      CALL_FUNCTION                   1
                44      STORE_NAME                      9: is_site_local
                46      LOAD_CONST                      9: None
                48      RETURN_VALUE                    
        'IPv6Network'
        [Code]
            File Name: ipaddress.py
            Object Name: _IPv6Constants
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 16
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                'IPv6Network'
                '_linklocal_network'
                '_multicast_network'
                '_private_networks'
                '_private_networks_exceptions'
                '_reserved_networks'
                '_sitelocal_network'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_IPv6Constants'
                'fe80::/10'
                'ff00::/8'
                '::1/128'
                '::/128'
                '::ffff:0:0/96'
                '64:ff9b:1::/48'
                '100::/64'
                '2001::/23'
                '2001:db8::/32'
                '2002::/16'
                'fc00::/7'
                '2001:1::1/128'
                '2001:1::2/128'
                '2001:3::/32'
                '2001:4:112::/48'
                '2001:20::/28'
                '2001:30::/28'
                '::/8'
                '100::/8'
                '200::/7'
                '400::/6'
                '800::/5'
                '1000::/4'
                '4000::/3'
                '6000::/3'
                '8000::/3'
                'A000::/3'
                'C000::/3'
                'E000::/4'
                'F000::/5'
                'F800::/6'
                'FE00::/9'
                'fec0::/10'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_IPv6Constants'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_NAME                       3: IPv6Network
                10      LOAD_CONST                      1: 'fe80::/10'
                12      CALL_FUNCTION                   1
                14      STORE_NAME                      4: _linklocal_network
                16      LOAD_NAME                       3: IPv6Network
                18      LOAD_CONST                      2: 'ff00::/8'
                20      CALL_FUNCTION                   1
                22      STORE_NAME                      5: _multicast_network
                24      LOAD_NAME                       3: IPv6Network
                26      LOAD_CONST                      3: '::1/128'
                28      CALL_FUNCTION                   1
                30      LOAD_NAME                       3: IPv6Network
                32      LOAD_CONST                      4: '::/128'
                34      CALL_FUNCTION                   1
                36      LOAD_NAME                       3: IPv6Network
                38      LOAD_CONST                      5: '::ffff:0:0/96'
                40      CALL_FUNCTION                   1
                42      LOAD_NAME                       3: IPv6Network
                44      LOAD_CONST                      6: '64:ff9b:1::/48'
                46      CALL_FUNCTION                   1
                48      LOAD_NAME                       3: IPv6Network
                50      LOAD_CONST                      7: '100::/64'
                52      CALL_FUNCTION                   1
                54      LOAD_NAME                       3: IPv6Network
                56      LOAD_CONST                      8: '2001::/23'
                58      CALL_FUNCTION                   1
                60      LOAD_NAME                       3: IPv6Network
                62      LOAD_CONST                      9: '2001:db8::/32'
                64      CALL_FUNCTION                   1
                66      LOAD_NAME                       3: IPv6Network
                68      LOAD_CONST                      10: '2002::/16'
                70      CALL_FUNCTION                   1
                72      LOAD_NAME                       3: IPv6Network
                74      LOAD_CONST                      11: 'fc00::/7'
                76      CALL_FUNCTION                   1
                78      LOAD_NAME                       3: IPv6Network
                80      LOAD_CONST                      1: 'fe80::/10'
                82      CALL_FUNCTION                   1
                84      BUILD_LIST                      10
                86      STORE_NAME                      6: _private_networks
                88      LOAD_NAME                       3: IPv6Network
                90      LOAD_CONST                      12: '2001:1::1/128'
                92      CALL_FUNCTION                   1
                94      LOAD_NAME                       3: IPv6Network
                96      LOAD_CONST                      13: '2001:1::2/128'
                98      CALL_FUNCTION                   1
                100     LOAD_NAME                       3: IPv6Network
                102     LOAD_CONST                      14: '2001:3::/32'
                104     CALL_FUNCTION                   1
                106     LOAD_NAME                       3: IPv6Network
                108     LOAD_CONST                      15: '2001:4:112::/48'
                110     CALL_FUNCTION                   1
                112     LOAD_NAME                       3: IPv6Network
                114     LOAD_CONST                      16: '2001:20::/28'
                116     CALL_FUNCTION                   1
                118     LOAD_NAME                       3: IPv6Network
                120     LOAD_CONST                      17: '2001:30::/28'
                122     CALL_FUNCTION                   1
                124     BUILD_LIST                      6
                126     STORE_NAME                      7: _private_networks_exceptions
                128     LOAD_NAME                       3: IPv6Network
                130     LOAD_CONST                      18: '::/8'
                132     CALL_FUNCTION                   1
                134     LOAD_NAME                       3: IPv6Network
                136     LOAD_CONST                      19: '100::/8'
                138     CALL_FUNCTION                   1
                140     LOAD_NAME                       3: IPv6Network
                142     LOAD_CONST                      20: '200::/7'
                144     CALL_FUNCTION                   1
                146     LOAD_NAME                       3: IPv6Network
                148     LOAD_CONST                      21: '400::/6'
                150     CALL_FUNCTION                   1
                152     LOAD_NAME                       3: IPv6Network
                154     LOAD_CONST                      22: '800::/5'
                156     CALL_FUNCTION                   1
                158     LOAD_NAME                       3: IPv6Network
                160     LOAD_CONST                      23: '1000::/4'
                162     CALL_FUNCTION                   1
                164     LOAD_NAME                       3: IPv6Network
                166     LOAD_CONST                      24: '4000::/3'
                168     CALL_FUNCTION                   1
                170     LOAD_NAME                       3: IPv6Network
                172     LOAD_CONST                      25: '6000::/3'
                174     CALL_FUNCTION                   1
                176     LOAD_NAME                       3: IPv6Network
                178     LOAD_CONST                      26: '8000::/3'
                180     CALL_FUNCTION                   1
                182     LOAD_NAME                       3: IPv6Network
                184     LOAD_CONST                      27: 'A000::/3'
                186     CALL_FUNCTION                   1
                188     LOAD_NAME                       3: IPv6Network
                190     LOAD_CONST                      28: 'C000::/3'
                192     CALL_FUNCTION                   1
                194     LOAD_NAME                       3: IPv6Network
                196     LOAD_CONST                      29: 'E000::/4'
                198     CALL_FUNCTION                   1
                200     LOAD_NAME                       3: IPv6Network
                202     LOAD_CONST                      30: 'F000::/5'
                204     CALL_FUNCTION                   1
                206     LOAD_NAME                       3: IPv6Network
                208     LOAD_CONST                      31: 'F800::/6'
                210     CALL_FUNCTION                   1
                212     LOAD_NAME                       3: IPv6Network
                214     LOAD_CONST                      32: 'FE00::/9'
                216     CALL_FUNCTION                   1
                218     BUILD_LIST                      15
                220     STORE_NAME                      8: _reserved_networks
                222     LOAD_NAME                       3: IPv6Network
                224     LOAD_CONST                      33: 'fec0::/10'
                226     CALL_FUNCTION                   1
                228     STORE_NAME                      9: _sitelocal_network
                230     LOAD_CONST                      34: None
                232     RETURN_VALUE                    
        '_IPv6Constants'
        (
            True
        )
    [Disassembly]
        0       LOAD_CONST                      0: 'A fast, lightweight IPv4/IPv6 manipulation library in Python.\n\nThis library is used to create/poke/manipulate IPv4 and IPv6 addresses\nand networks.\n\n'
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: '1.0'
        6       STORE_NAME                      1: __version__
        8       LOAD_CONST                      2: 0
        10      LOAD_CONST                      3: None
        12      IMPORT_NAME                     2: functools
        14      STORE_NAME                      2: functools
        16      LOAD_CONST                      4: 32
        18      STORE_NAME                      3: IPV4LENGTH
        20      LOAD_CONST                      5: 128
        22      STORE_NAME                      4: IPV6LENGTH
        24      LOAD_BUILD_CLASS                
        26      LOAD_CONST                      6: <CODE> AddressValueError
        28      LOAD_CONST                      7: 'AddressValueError'
        30      MAKE_FUNCTION                   0
        32      LOAD_CONST                      7: 'AddressValueError'
        34      LOAD_NAME                       5: ValueError
        36      CALL_FUNCTION                   3
        38      STORE_NAME                      6: AddressValueError
        40      LOAD_BUILD_CLASS                
        42      LOAD_CONST                      8: <CODE> NetmaskValueError
        44      LOAD_CONST                      9: 'NetmaskValueError'
        46      MAKE_FUNCTION                   0
        48      LOAD_CONST                      9: 'NetmaskValueError'
        50      LOAD_NAME                       5: ValueError
        52      CALL_FUNCTION                   3
        54      STORE_NAME                      7: NetmaskValueError
        56      LOAD_CONST                      10: <CODE> ip_address
        58      LOAD_CONST                      11: 'ip_address'
        60      MAKE_FUNCTION                   0
        62      STORE_NAME                      8: ip_address
        64      LOAD_CONST                      61: (True,)
        66      LOAD_CONST                      13: <CODE> ip_network
        68      LOAD_CONST                      14: 'ip_network'
        70      MAKE_FUNCTION                   1
        72      STORE_NAME                      9: ip_network
        74      LOAD_CONST                      15: <CODE> ip_interface
        76      LOAD_CONST                      16: 'ip_interface'
        78      MAKE_FUNCTION                   0
        80      STORE_NAME                      10: ip_interface
        82      LOAD_CONST                      17: <CODE> v4_int_to_packed
        84      LOAD_CONST                      18: 'v4_int_to_packed'
        86      MAKE_FUNCTION                   0
        88      STORE_NAME                      11: v4_int_to_packed
        90      LOAD_CONST                      19: <CODE> v6_int_to_packed
        92      LOAD_CONST                      20: 'v6_int_to_packed'
        94      MAKE_FUNCTION                   0
        96      STORE_NAME                      12: v6_int_to_packed
        98      LOAD_CONST                      21: <CODE> _split_optional_netmask
        100     LOAD_CONST                      22: '_split_optional_netmask'
        102     MAKE_FUNCTION                   0
        104     STORE_NAME                      13: _split_optional_netmask
        106     LOAD_CONST                      23: <CODE> _find_address_range
        108     LOAD_CONST                      24: '_find_address_range'
        110     MAKE_FUNCTION                   0
        112     STORE_NAME                      14: _find_address_range
        114     LOAD_CONST                      25: <CODE> _count_righthand_zero_bits
        116     LOAD_CONST                      26: '_count_righthand_zero_bits'
        118     MAKE_FUNCTION                   0
        120     STORE_NAME                      15: _count_righthand_zero_bits
        122     LOAD_CONST                      27: <CODE> summarize_address_range
        124     LOAD_CONST                      28: 'summarize_address_range'
        126     MAKE_FUNCTION                   0
        128     STORE_NAME                      16: summarize_address_range
        130     LOAD_CONST                      29: <CODE> _collapse_addresses_internal
        132     LOAD_CONST                      30: '_collapse_addresses_internal'
        134     MAKE_FUNCTION                   0
        136     STORE_NAME                      17: _collapse_addresses_internal
        138     LOAD_CONST                      31: <CODE> collapse_addresses
        140     LOAD_CONST                      32: 'collapse_addresses'
        142     MAKE_FUNCTION                   0
        144     STORE_NAME                      18: collapse_addresses
        146     LOAD_CONST                      33: <CODE> get_mixed_type_key
        148     LOAD_CONST                      34: 'get_mixed_type_key'
        150     MAKE_FUNCTION                   0
        152     STORE_NAME                      19: get_mixed_type_key
        154     LOAD_BUILD_CLASS                
        156     LOAD_CONST                      35: <CODE> _IPAddressBase
        158     LOAD_CONST                      36: '_IPAddressBase'
        160     MAKE_FUNCTION                   0
        162     LOAD_CONST                      36: '_IPAddressBase'
        164     CALL_FUNCTION                   2
        166     STORE_NAME                      20: _IPAddressBase
        168     LOAD_CONST                      3: None
        170     STORE_GLOBAL                    21: _address_fmt_re
        172     LOAD_NAME                       2: functools
        174     LOAD_ATTR                       22: total_ordering
        176     LOAD_BUILD_CLASS                
        178     LOAD_CONST                      37: <CODE> _BaseAddress
        180     LOAD_CONST                      38: '_BaseAddress'
        182     MAKE_FUNCTION                   0
        184     LOAD_CONST                      38: '_BaseAddress'
        186     LOAD_NAME                       20: _IPAddressBase
        188     CALL_FUNCTION                   3
        190     CALL_FUNCTION                   1
        192     STORE_NAME                      23: _BaseAddress
        194     LOAD_NAME                       2: functools
        196     LOAD_ATTR                       22: total_ordering
        198     LOAD_BUILD_CLASS                
        200     LOAD_CONST                      39: <CODE> _BaseNetwork
        202     LOAD_CONST                      40: '_BaseNetwork'
        204     MAKE_FUNCTION                   0
        206     LOAD_CONST                      40: '_BaseNetwork'
        208     LOAD_NAME                       20: _IPAddressBase
        210     CALL_FUNCTION                   3
        212     CALL_FUNCTION                   1
        214     STORE_NAME                      24: _BaseNetwork
        216     LOAD_BUILD_CLASS                
        218     LOAD_CONST                      41: <CODE> _BaseV4
        220     LOAD_CONST                      42: '_BaseV4'
        222     MAKE_FUNCTION                   0
        224     LOAD_CONST                      42: '_BaseV4'
        226     CALL_FUNCTION                   2
        228     STORE_NAME                      25: _BaseV4
        230     LOAD_BUILD_CLASS                
        232     LOAD_CONST                      43: <CODE> IPv4Address
        234     LOAD_CONST                      44: 'IPv4Address'
        236     MAKE_FUNCTION                   0
        238     LOAD_CONST                      44: 'IPv4Address'
        240     LOAD_NAME                       25: _BaseV4
        242     LOAD_NAME                       23: _BaseAddress
        244     CALL_FUNCTION                   4
        246     STORE_NAME                      26: IPv4Address
        248     LOAD_BUILD_CLASS                
        250     LOAD_CONST                      45: <CODE> IPv4Interface
        252     LOAD_CONST                      46: 'IPv4Interface'
        254     MAKE_FUNCTION                   0
        256     LOAD_CONST                      46: 'IPv4Interface'
        258     LOAD_NAME                       26: IPv4Address
        260     CALL_FUNCTION                   3
        262     STORE_NAME                      27: IPv4Interface
        264     LOAD_BUILD_CLASS                
        266     LOAD_CONST                      47: <CODE> IPv4Network
        268     LOAD_CONST                      48: 'IPv4Network'
        270     MAKE_FUNCTION                   0
        272     LOAD_CONST                      48: 'IPv4Network'
        274     LOAD_NAME                       25: _BaseV4
        276     LOAD_NAME                       24: _BaseNetwork
        278     CALL_FUNCTION                   4
        280     STORE_NAME                      28: IPv4Network
        282     LOAD_BUILD_CLASS                
        284     LOAD_CONST                      49: <CODE> _IPv4Constants
        286     LOAD_CONST                      50: '_IPv4Constants'
        288     MAKE_FUNCTION                   0
        290     LOAD_CONST                      50: '_IPv4Constants'
        292     CALL_FUNCTION                   2
        294     STORE_NAME                      29: _IPv4Constants
        296     LOAD_NAME                       29: _IPv4Constants
        298     LOAD_NAME                       26: IPv4Address
        300     STORE_ATTR                      30: _constants
        302     LOAD_BUILD_CLASS                
        304     LOAD_CONST                      51: <CODE> _BaseV6
        306     LOAD_CONST                      52: '_BaseV6'
        308     MAKE_FUNCTION                   0
        310     LOAD_CONST                      52: '_BaseV6'
        312     CALL_FUNCTION                   2
        314     STORE_NAME                      31: _BaseV6
        316     LOAD_BUILD_CLASS                
        318     LOAD_CONST                      53: <CODE> IPv6Address
        320     LOAD_CONST                      54: 'IPv6Address'
        322     MAKE_FUNCTION                   0
        324     LOAD_CONST                      54: 'IPv6Address'
        326     LOAD_NAME                       31: _BaseV6
        328     LOAD_NAME                       23: _BaseAddress
        330     CALL_FUNCTION                   4
        332     STORE_NAME                      32: IPv6Address
        334     LOAD_BUILD_CLASS                
        336     LOAD_CONST                      55: <CODE> IPv6Interface
        338     LOAD_CONST                      56: 'IPv6Interface'
        340     MAKE_FUNCTION                   0
        342     LOAD_CONST                      56: 'IPv6Interface'
        344     LOAD_NAME                       32: IPv6Address
        346     CALL_FUNCTION                   3
        348     STORE_NAME                      33: IPv6Interface
        350     LOAD_BUILD_CLASS                
        352     LOAD_CONST                      57: <CODE> IPv6Network
        354     LOAD_CONST                      58: 'IPv6Network'
        356     MAKE_FUNCTION                   0
        358     LOAD_CONST                      58: 'IPv6Network'
        360     LOAD_NAME                       31: _BaseV6
        362     LOAD_NAME                       24: _BaseNetwork
        364     CALL_FUNCTION                   4
        366     STORE_NAME                      34: IPv6Network
        368     LOAD_BUILD_CLASS                
        370     LOAD_CONST                      59: <CODE> _IPv6Constants
        372     LOAD_CONST                      60: '_IPv6Constants'
        374     MAKE_FUNCTION                   0
        376     LOAD_CONST                      60: '_IPv6Constants'
        378     CALL_FUNCTION                   2
        380     STORE_NAME                      35: _IPv6Constants
        382     LOAD_NAME                       35: _IPv6Constants
        384     LOAD_NAME                       32: IPv6Address
        386     STORE_ATTR                      30: _constants
        388     LOAD_CONST                      3: None
        390     RETURN_VALUE                    
