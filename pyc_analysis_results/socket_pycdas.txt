socket.pyc (Python 3.10)
[Code]
    File Name: socket.py
    Object Name: <module>
    Arg Count: 0
    Pos Only Arg Count: 0
    KW Only Arg Count: 0
    Locals: 0
    Stack Size: 8
    Flags: 0x00000040 (CO_NOFREE)
    [Names]
        '__doc__'
        '_socket'
        'os'
        'sys'
        'io'
        'selectors'
        'enum'
        'IntEnum'
        'IntFlag'
        'errno'
        'ImportError'
        'getattr'
        'EBADF'
        'EAGAIN'
        'EWOULDBLOCK'
        '__all__'
        'extend'
        '_get_exports_list'
        '_convert_'
        '__name__'
        '_LOCALHOST'
        '_LOCALHOST_V6'
        '_intenum_converter'
        'platform'
        'lower'
        'startswith'
        'errorTab'
        'append'
        'Exception'
        '_GiveupOnSendfile'
        'socket'
        'fromfd'
        'hasattr'
        'array'
        'send_fds'
        'recv_fds'
        'fromshare'
        'SOCK_STREAM'
        'socketpair'
        'AF_INET'
        '_blocking_errnos'
        'RawIOBase'
        'SocketIO'
        'getfqdn'
        'object'
        '_GLOBAL_DEFAULT_TIMEOUT'
        'create_connection'
        'has_dualstack_ipv6'
        'create_server'
        'getaddrinfo'
    [Var Names]
    [Free Vars]
    [Cell Vars]
    [Constants]
        "This module provides socket operations and some related functions.\nOn Unix, it supports IP (Internet Protocol) and Unix domain sockets.\nOn other systems, it only supports IP. Functions specific for a\nsocket are available as methods of the socket object.\n\nFunctions:\n\nsocket() -- create a new socket object\nsocketpair() -- create a pair of new socket objects [*]\nfromfd() -- create a socket object from an open file descriptor [*]\nsend_fds() -- Send file descriptor to the socket.\nrecv_fds() -- Recieve file descriptors from the socket.\nfromshare() -- create a socket object from data received from socket.share() [*]\ngethostname() -- return the current hostname\ngethostbyname() -- map a hostname to its IP number\ngethostbyaddr() -- map an IP number or hostname to DNS info\ngetservbyname() -- map a service name and a protocol name to a port number\ngetprotobyname() -- map a protocol name (e.g. 'tcp') to a number\nntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order\nhtons(), htonl() -- convert 16, 32 bit int from host to network byte order\ninet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format\ninet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)\nsocket.getdefaulttimeout() -- get the default timeout value\nsocket.setdefaulttimeout() -- set the default timeout value\ncreate_connection() -- connects to an address, with an optional timeout and\n                       optional source address.\n\n [*] not available on all platforms!\n\nSpecial objects:\n\nSocketType -- type object for socket objects\nerror -- exception raised for I/O errors\nhas_ipv6 -- boolean value indicating if IPv6 is supported\n\nIntEnum constants:\n\nAF_INET, AF_UNIX -- socket domains (first argument to socket() call)\nSOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)\n\nInteger constants:\n\nMany other constants may be defined; these may be used in calls to\nthe setsockopt() and getsockopt() methods.\n"
        0
        None
        (
            '*'
        )
        (
            'IntEnum'
            'IntFlag'
        )
        'EBADF'
        9
        'EAGAIN'
        11
        'EWOULDBLOCK'
        (
            'fromfd'
            'getfqdn'
            'create_connection'
            'create_server'
            'has_dualstack_ipv6'
            'AddressFamily'
            'SocketKind'
        )
        'AddressFamily'
        [Code]
            File Name: socket.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isupper'
                'startswith'
            [Var Names]
                'C'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'AF_'
            [Disassembly]
                0       LOAD_FAST                       0: C
                2       LOAD_METHOD                     0: isupper
                4       CALL_METHOD                     0
                6       JUMP_IF_FALSE_OR_POP            8 (to 16)
                8       LOAD_FAST                       0: C
                10      LOAD_METHOD                     1: startswith
                12      LOAD_CONST                      1: 'AF_'
                14      CALL_METHOD                     1
                16      RETURN_VALUE                    
        '<lambda>'
        'SocketKind'
        [Code]
            File Name: socket.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isupper'
                'startswith'
            [Var Names]
                'C'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'SOCK_'
            [Disassembly]
                0       LOAD_FAST                       0: C
                2       LOAD_METHOD                     0: isupper
                4       CALL_METHOD                     0
                6       JUMP_IF_FALSE_OR_POP            8 (to 16)
                8       LOAD_FAST                       0: C
                10      LOAD_METHOD                     1: startswith
                12      LOAD_CONST                      1: 'SOCK_'
                14      CALL_METHOD                     1
                16      RETURN_VALUE                    
        'MsgFlag'
        [Code]
            File Name: socket.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isupper'
                'startswith'
            [Var Names]
                'C'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'MSG_'
            [Disassembly]
                0       LOAD_FAST                       0: C
                2       LOAD_METHOD                     0: isupper
                4       CALL_METHOD                     0
                6       JUMP_IF_FALSE_OR_POP            8 (to 16)
                8       LOAD_FAST                       0: C
                10      LOAD_METHOD                     1: startswith
                12      LOAD_CONST                      1: 'MSG_'
                14      CALL_METHOD                     1
                16      RETURN_VALUE                    
        'AddressInfo'
        [Code]
            File Name: socket.py
            Object Name: <lambda>
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 3
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'isupper'
                'startswith'
            [Var Names]
                'C'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'AI_'
            [Disassembly]
                0       LOAD_FAST                       0: C
                2       LOAD_METHOD                     0: isupper
                4       CALL_METHOD                     0
                6       JUMP_IF_FALSE_OR_POP            8 (to 16)
                8       LOAD_FAST                       0: C
                10      LOAD_METHOD                     1: startswith
                12      LOAD_CONST                      1: 'AI_'
                14      CALL_METHOD                     1
                16      RETURN_VALUE                    
        '127.0.0.1'
        '::1'
        [Code]
            File Name: socket.py
            Object Name: _intenum_converter
            Arg Count: 2
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 2
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'ValueError'
            [Var Names]
                'value'
                'enum_klass'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Convert a numeric family value to an IntEnum member.\n\n    If it's not a known member, return the numeric value itself.\n    "
            [Disassembly]
                0       SETUP_FINALLY                   5 (to 12)
                2       LOAD_FAST                       1: enum_klass
                4       LOAD_FAST                       0: value
                6       CALL_FUNCTION                   1
                8       POP_BLOCK                       
                10      RETURN_VALUE                    
                12      DUP_TOP                         
                14      LOAD_GLOBAL                     0: ValueError
                16      JUMP_IF_NOT_EXC_MATCH           16 (to 32)
                18      POP_TOP                         
                20      POP_TOP                         
                22      POP_TOP                         
                24      LOAD_FAST                       0: value
                26      ROT_FOUR                        
                28      POP_EXCEPT                      
                30      RETURN_VALUE                    
                32      RERAISE                         0
        '_intenum_converter'
        'win'
        'Specified event object handle is invalid.'
        6
        'Insufficient memory available.'
        8
        'One or more parameters are invalid.'
        87
        'Overlapped operation aborted.'
        995
        'Overlapped I/O event object not in signaled state.'
        996
        'Overlapped operation will complete later.'
        997
        'The operation was interrupted.'
        10004
        'A bad file handle was passed.'
        10009
        'Permission denied.'
        10013
        'A fault occurred on the network??'
        10014
        'An invalid operation was attempted.'
        10022
        'Too many open files.'
        10024
        'The socket operation would block'
        10035
        'A blocking operation is already in progress.'
        10036
        'Operation already in progress.'
        10037
        'Socket operation on nonsocket.'
        10038
        'Destination address required.'
        10039
        'Message too long.'
        10040
        'Protocol wrong type for socket.'
        10041
        'Bad protocol option.'
        10042
        'Protocol not supported.'
        10043
        'Socket type not supported.'
        10044
        'Operation not supported.'
        10045
        'Protocol family not supported.'
        10046
        'Address family not supported by protocol family.'
        10047
        'The network address is in use.'
        10048
        'Cannot assign requested address.'
        10049
        'Network is down.'
        10050
        'Network is unreachable.'
        10051
        'Network dropped connection on reset.'
        10052
        'Software caused connection abort.'
        10053
        'The connection has been reset.'
        10054
        'No buffer space available.'
        10055
        'Socket is already connected.'
        10056
        'Socket is not connected.'
        10057
        'The network has been shut down.'
        10058
        'Too many references.'
        10059
        'The operation timed out.'
        10060
        'Connection refused.'
        10061
        'Cannot translate name.'
        10062
        'The name is too long.'
        10063
        'The host is down.'
        10064
        'The host is unreachable.'
        10065
        'Directory not empty.'
        10066
        'Too many processes.'
        10067
        'User quota exceeded.'
        10068
        'Disk quota exceeded.'
        10069
        'Stale file handle reference.'
        10070
        'Item is remote.'
        10071
        'Network subsystem is unavailable.'
        10091
        'Winsock.dll version out of range.'
        10092
        'Successful WSAStartup not yet performed.'
        10093
        'Graceful shutdown in progress.'
        10101
        'No more results from WSALookupServiceNext.'
        10102
        'Call has been canceled.'
        10103
        'Procedure call table is invalid.'
        10104
        'Service provider is invalid.'
        10105
        'Service provider failed to initialize.'
        10106
        'System call failure.'
        10107
        'Service not found.'
        10108
        'Class type not found.'
        10109
        10110
        'Call was canceled.'
        10111
        'Database query was refused.'
        10112
        'Host not found.'
        11001
        'Nonauthoritative host not found.'
        11002
        'This is a nonrecoverable error.'
        11003
        'Valid name, no data record requested type.'
        11004
        'QoS receivers.'
        11005
        'QoS senders.'
        11006
        'No QoS senders.'
        11007
        'QoS no receivers.'
        11008
        'QoS request confirmed.'
        11009
        'QoS admission error.'
        11010
        'QoS policy failure.'
        11011
        'QoS bad style.'
        11012
        'QoS bad object.'
        11013
        'QoS traffic control error.'
        11014
        'QoS generic error.'
        11015
        'QoS service type error.'
        11016
        'QoS flowspec error.'
        11017
        'Invalid QoS provider buffer.'
        11018
        'Invalid QoS filter style.'
        11019
        11020
        'Incorrect QoS filter count.'
        11021
        'Invalid QoS object length.'
        11022
        'Incorrect QoS flow count.'
        11023
        'Unrecognized QoS object.'
        11024
        'Invalid QoS policy object.'
        11025
        'Invalid QoS flow descriptor.'
        11026
        'Invalid QoS provider-specific flowspec.'
        11027
        'Invalid QoS provider-specific filterspec.'
        11028
        'Invalid QoS shape discard mode object.'
        11029
        'Invalid QoS shaping rate object.'
        11030
        'Reserved policy QoS element type.'
        11031
        'errorTab'
        [Code]
            File Name: socket.py
            Object Name: _GiveupOnSendfile
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 1
            Flags: 0x00000040 (CO_NOFREE)
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
            [Constants]
                '_GiveupOnSendfile'
                None
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: '_GiveupOnSendfile'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: None
                10      RETURN_VALUE                    
        '_GiveupOnSendfile'
        [Code]
            File Name: socket.py
            Object Name: socket
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 5
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__slots__'
                '__init__'
                '__enter__'
                '__exit__'
                '__repr__'
                '__getstate__'
                'dup'
                'accept'
                'makefile'
                'hasattr'
                'os'
                '_sendfile_use_sendfile'
                '_sendfile_use_send'
                '_check_sendfile_params'
                'sendfile'
                '_decref_socketios'
                '_socket'
                'socket'
                '_real_close'
                'close'
                'detach'
                'property'
                'family'
                'type'
                'name'
                'get_inheritable'
                'set_inheritable'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'socket'
                'A subclass of _socket.socket adding the makefile() method.'
                (
                    '__weakref__'
                    '_io_refs'
                    '_closed'
                )
                -1
                None
                [Code]
                    File Name: socket.py
                    Object Name: __init__
                    Arg Count: 5
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 7
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'AF_INET'
                        'SOCK_STREAM'
                        '_socket'
                        'socket'
                        '__init__'
                        '_io_refs'
                        '_closed'
                    [Var Names]
                        'self'
                        'family'
                        'type'
                        'proto'
                        'fileno'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        -1
                        0
                        False
                    [Disassembly]
                        0       LOAD_FAST                       4: fileno
                        2       LOAD_CONST                      0: None
                        4       IS_OP                           0 (is)
                        6       POP_JUMP_IF_FALSE               22 (to 44)
                        8       LOAD_FAST                       1: family
                        10      LOAD_CONST                      1: -1
                        12      COMPARE_OP                      2 (==)
                        14      POP_JUMP_IF_FALSE               10 (to 20)
                        16      LOAD_GLOBAL                     0: AF_INET
                        18      STORE_FAST                      1: family
                        20      LOAD_FAST                       2: type
                        22      LOAD_CONST                      1: -1
                        24      COMPARE_OP                      2 (==)
                        26      POP_JUMP_IF_FALSE               16 (to 32)
                        28      LOAD_GLOBAL                     1: SOCK_STREAM
                        30      STORE_FAST                      2: type
                        32      LOAD_FAST                       3: proto
                        34      LOAD_CONST                      1: -1
                        36      COMPARE_OP                      2 (==)
                        38      POP_JUMP_IF_FALSE               22 (to 44)
                        40      LOAD_CONST                      2: 0
                        42      STORE_FAST                      3: proto
                        44      LOAD_GLOBAL                     2: _socket
                        46      LOAD_ATTR                       3: socket
                        48      LOAD_METHOD                     4: __init__
                        50      LOAD_FAST                       0: self
                        52      LOAD_FAST                       1: family
                        54      LOAD_FAST                       2: type
                        56      LOAD_FAST                       3: proto
                        58      LOAD_FAST                       4: fileno
                        60      CALL_METHOD                     5
                        62      POP_TOP                         
                        64      LOAD_CONST                      2: 0
                        66      LOAD_FAST                       0: self
                        68      STORE_ATTR                      5: _io_refs
                        70      LOAD_CONST                      3: False
                        72      LOAD_FAST                       0: self
                        74      STORE_ATTR                      6: _closed
                        76      LOAD_CONST                      0: None
                        78      RETURN_VALUE                    
                'socket.__init__'
                [Code]
                    File Name: socket.py
                    Object Name: __enter__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       RETURN_VALUE                    
                'socket.__enter__'
                [Code]
                    File Name: socket.py
                    Object Name: __exit__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 2
                    Flags: 0x00000047 (CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE)
                    [Names]
                        '_closed'
                        'close'
                    [Var Names]
                        'self'
                        'args'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _closed
                        4       POP_JUMP_IF_TRUE                9 (to 18)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: close
                        10      CALL_METHOD                     0
                        12      POP_TOP                         
                        14      LOAD_CONST                      0: None
                        16      RETURN_VALUE                    
                        18      LOAD_CONST                      0: None
                        20      RETURN_VALUE                    
                'socket.__exit__'
                [Code]
                    File Name: socket.py
                    Object Name: __repr__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 5
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getattr'
                        '__class__'
                        '__module__'
                        '__qualname__'
                        'fileno'
                        'family'
                        'type'
                        'proto'
                        'getsockname'
                        'str'
                        'error'
                        'getpeername'
                    [Var Names]
                        'self'
                        'closed'
                        's'
                        'laddr'
                        'raddr'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Wrap __repr__() to reveal the real class name and socket\n        address(es).\n        '
                        '_closed'
                        False
                        '<%s.%s%s fd=%i, family=%s, type=%s, proto=%i'
                        ' [closed]'
                        ''
                        ', laddr=%s'
                        ', raddr=%s'
                        '>'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: getattr
                        2       LOAD_FAST                       0: self
                        4       LOAD_CONST                      1: '_closed'
                        6       LOAD_CONST                      2: False
                        8       CALL_FUNCTION                   3
                        10      STORE_FAST                      1: closed
                        12      LOAD_CONST                      3: '<%s.%s%s fd=%i, family=%s, type=%s, proto=%i'
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       1: __class__
                        18      LOAD_ATTR                       2: __module__
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       1: __class__
                        24      LOAD_ATTR                       3: __qualname__
                        26      LOAD_FAST                       1: closed
                        28      POP_JUMP_IF_FALSE               17 (to 34)
                        30      LOAD_CONST                      4: ' [closed]'
                        32      JUMP_FORWARD                    1 (to 36)
                        34      LOAD_CONST                      5: ''
                        36      LOAD_FAST                       0: self
                        38      LOAD_METHOD                     4: fileno
                        40      CALL_METHOD                     0
                        42      LOAD_FAST                       0: self
                        44      LOAD_ATTR                       5: family
                        46      LOAD_FAST                       0: self
                        48      LOAD_ATTR                       6: type
                        50      LOAD_FAST                       0: self
                        52      LOAD_ATTR                       7: proto
                        54      BUILD_TUPLE                     7
                        56      BINARY_MODULO                   
                        58      STORE_FAST                      2: s
                        60      LOAD_FAST                       1: closed
                        62      POP_JUMP_IF_TRUE                84 (to 168)
                        64      SETUP_FINALLY                   16 (to 98)
                        66      LOAD_FAST                       0: self
                        68      LOAD_METHOD                     8: getsockname
                        70      CALL_METHOD                     0
                        72      STORE_FAST                      3: laddr
                        74      LOAD_FAST                       3: laddr
                        76      POP_JUMP_IF_FALSE               47 (to 94)
                        78      LOAD_FAST                       2: s
                        80      LOAD_CONST                      6: ', laddr=%s'
                        82      LOAD_GLOBAL                     9: str
                        84      LOAD_FAST                       3: laddr
                        86      CALL_FUNCTION                   1
                        88      BINARY_MODULO                   
                        90      INPLACE_ADD                     
                        92      STORE_FAST                      2: s
                        94      POP_BLOCK                       
                        96      JUMP_FORWARD                    9 (to 116)
                        98      DUP_TOP                         
                        100     LOAD_GLOBAL                     10: error
                        102     JUMP_IF_NOT_EXC_MATCH           57 (to 114)
                        104     POP_TOP                         
                        106     POP_TOP                         
                        108     POP_TOP                         
                        110     POP_EXCEPT                      
                        112     JUMP_FORWARD                    1 (to 116)
                        114     RERAISE                         0
                        116     SETUP_FINALLY                   16 (to 150)
                        118     LOAD_FAST                       0: self
                        120     LOAD_METHOD                     11: getpeername
                        122     CALL_METHOD                     0
                        124     STORE_FAST                      4: raddr
                        126     LOAD_FAST                       4: raddr
                        128     POP_JUMP_IF_FALSE               73 (to 146)
                        130     LOAD_FAST                       2: s
                        132     LOAD_CONST                      7: ', raddr=%s'
                        134     LOAD_GLOBAL                     9: str
                        136     LOAD_FAST                       4: raddr
                        138     CALL_FUNCTION                   1
                        140     BINARY_MODULO                   
                        142     INPLACE_ADD                     
                        144     STORE_FAST                      2: s
                        146     POP_BLOCK                       
                        148     JUMP_FORWARD                    9 (to 168)
                        150     DUP_TOP                         
                        152     LOAD_GLOBAL                     10: error
                        154     JUMP_IF_NOT_EXC_MATCH           83 (to 166)
                        156     POP_TOP                         
                        158     POP_TOP                         
                        160     POP_TOP                         
                        162     POP_EXCEPT                      
                        164     JUMP_FORWARD                    1 (to 168)
                        166     RERAISE                         0
                        168     LOAD_FAST                       2: s
                        170     LOAD_CONST                      8: '>'
                        172     INPLACE_ADD                     
                        174     STORE_FAST                      2: s
                        176     LOAD_FAST                       2: s
                        178     RETURN_VALUE                    
                'socket.__repr__'
                [Code]
                    File Name: socket.py
                    Object Name: __getstate__
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'TypeError'
                        '__class__'
                        '__name__'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'cannot pickle '
                        ' object'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: TypeError
                        2       LOAD_CONST                      1: 'cannot pickle '
                        4       LOAD_FAST                       0: self
                        6       LOAD_ATTR                       1: __class__
                        8       LOAD_ATTR                       2: __name__
                        10      FORMAT_VALUE                    2 (FVC_REPR)
                        12      LOAD_CONST                      2: ' object'
                        14      BUILD_STRING                    3
                        16      CALL_FUNCTION                   1
                        18      RAISE_VARARGS                   1
                'socket.__getstate__'
                [Code]
                    File Name: socket.py
                    Object Name: dup
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'dup'
                        'fileno'
                        '__class__'
                        'family'
                        'type'
                        'proto'
                        'settimeout'
                        'gettimeout'
                    [Var Names]
                        'self'
                        'fd'
                        'sock'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'dup() -> socket object\n\n        Duplicate the socket. Return a new socket object connected to the same\n        system resource. The new socket is non-inheritable.\n        '
                        (
                            'fileno'
                        )
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: dup
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     1: fileno
                        6       CALL_METHOD                     0
                        8       CALL_FUNCTION                   1
                        10      STORE_FAST                      1: fd
                        12      LOAD_FAST                       0: self
                        14      LOAD_ATTR                       2: __class__
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       3: family
                        20      LOAD_FAST                       0: self
                        22      LOAD_ATTR                       4: type
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       5: proto
                        28      LOAD_FAST                       1: fd
                        30      LOAD_CONST                      1: ('fileno',)
                        32      CALL_FUNCTION_KW                4
                        34      STORE_FAST                      2: sock
                        36      LOAD_FAST                       2: sock
                        38      LOAD_METHOD                     6: settimeout
                        40      LOAD_FAST                       0: self
                        42      LOAD_METHOD                     7: gettimeout
                        44      CALL_METHOD                     0
                        46      CALL_METHOD                     1
                        48      POP_TOP                         
                        50      LOAD_FAST                       2: sock
                        52      RETURN_VALUE                    
                'socket.dup'
                [Code]
                    File Name: socket.py
                    Object Name: accept
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_accept'
                        'socket'
                        'family'
                        'type'
                        'proto'
                        'getdefaulttimeout'
                        'gettimeout'
                        'setblocking'
                    [Var Names]
                        'self'
                        'fd'
                        'addr'
                        'sock'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'accept() -> (socket object, address info)\n\n        Wait for an incoming connection.  Return a new socket\n        representing the connection, and the address of the client.\n        For IP sockets, the address info is a pair (hostaddr, port).\n        '
                        (
                            'fileno'
                        )
                        None
                        True
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _accept
                        4       CALL_METHOD                     0
                        6       UNPACK_SEQUENCE                 2
                        8       STORE_FAST                      1: fd
                        10      STORE_FAST                      2: addr
                        12      LOAD_GLOBAL                     1: socket
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: family
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       3: type
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       4: proto
                        26      LOAD_FAST                       1: fd
                        28      LOAD_CONST                      1: ('fileno',)
                        30      CALL_FUNCTION_KW                4
                        32      STORE_FAST                      3: sock
                        34      LOAD_GLOBAL                     5: getdefaulttimeout
                        36      CALL_FUNCTION                   0
                        38      LOAD_CONST                      2: None
                        40      IS_OP                           0 (is)
                        42      POP_JUMP_IF_FALSE               31 (to 62)
                        44      LOAD_FAST                       0: self
                        46      LOAD_METHOD                     6: gettimeout
                        48      CALL_METHOD                     0
                        50      POP_JUMP_IF_FALSE               31 (to 62)
                        52      LOAD_FAST                       3: sock
                        54      LOAD_METHOD                     7: setblocking
                        56      LOAD_CONST                      3: True
                        58      CALL_METHOD                     1
                        60      POP_TOP                         
                        62      LOAD_FAST                       3: sock
                        64      LOAD_FAST                       2: addr
                        66      BUILD_TUPLE                     2
                        68      RETURN_VALUE                    
                'socket.accept'
                'r'
                (
                    'encoding'
                    'errors'
                    'newline'
                )
                [Code]
                    File Name: socket.py
                    Object Name: makefile
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 3
                    Locals: 13
                    Stack Size: 6
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'set'
                        'ValueError'
                        'SocketIO'
                        '_io_refs'
                        'io'
                        'DEFAULT_BUFFER_SIZE'
                        'BufferedRWPair'
                        'BufferedReader'
                        'BufferedWriter'
                        'text_encoding'
                        'TextIOWrapper'
                        'mode'
                    [Var Names]
                        'self'
                        'mode'
                        'buffering'
                        'encoding'
                        'errors'
                        'newline'
                        'writing'
                        'reading'
                        'binary'
                        'rawmode'
                        'raw'
                        'buffer'
                        'text'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "makefile(...) -> an I/O stream connected to the socket\n\n        The arguments are as for io.open() after the filename, except the only\n        supported mode values are 'r' (default), 'w' and 'b'.\n        "
                        frozenset({
                            'b'
                            'r'
                            'w'
                        })
                        'invalid mode %r (only r, w, b allowed)'
                        'w'
                        'r'
                        'b'
                        ''
                        1
                        None
                        -1
                        0
                        'unbuffered streams must be binary'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: set
                        2       LOAD_FAST                       1: mode
                        4       CALL_FUNCTION                   1
                        6       BUILD_SET                       0
                        8       LOAD_CONST                      1: frozenset({'b', 'r', 'w'})
                        10      SET_UPDATE                      1
                        12      COMPARE_OP                      1 (<=)
                        14      POP_JUMP_IF_TRUE                15 (to 30)
                        16      LOAD_GLOBAL                     1: ValueError
                        18      LOAD_CONST                      2: 'invalid mode %r (only r, w, b allowed)'
                        20      LOAD_FAST                       1: mode
                        22      BUILD_TUPLE                     1
                        24      BINARY_MODULO                   
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      LOAD_CONST                      3: 'w'
                        32      LOAD_FAST                       1: mode
                        34      CONTAINS_OP                     0 (in)
                        36      STORE_FAST                      6: writing
                        38      LOAD_CONST                      4: 'r'
                        40      LOAD_FAST                       1: mode
                        42      CONTAINS_OP                     0 (in)
                        44      JUMP_IF_TRUE_OR_POP             25 (to 50)
                        46      LOAD_FAST                       6: writing
                        48      UNARY_NOT                       
                        50      STORE_FAST                      7: reading
                        52      LOAD_FAST                       7: reading
                        54      POP_JUMP_IF_TRUE                32 (to 64)
                        56      LOAD_FAST                       6: writing
                        58      POP_JUMP_IF_TRUE                32 (to 64)
                        60      LOAD_ASSERTION_ERROR            
                        62      RAISE_VARARGS                   1
                        64      LOAD_CONST                      5: 'b'
                        66      LOAD_FAST                       1: mode
                        68      CONTAINS_OP                     0 (in)
                        70      STORE_FAST                      8: binary
                        72      LOAD_CONST                      6: ''
                        74      STORE_FAST                      9: rawmode
                        76      LOAD_FAST                       7: reading
                        78      POP_JUMP_IF_FALSE               44 (to 88)
                        80      LOAD_FAST                       9: rawmode
                        82      LOAD_CONST                      4: 'r'
                        84      INPLACE_ADD                     
                        86      STORE_FAST                      9: rawmode
                        88      LOAD_FAST                       6: writing
                        90      POP_JUMP_IF_FALSE               50 (to 100)
                        92      LOAD_FAST                       9: rawmode
                        94      LOAD_CONST                      3: 'w'
                        96      INPLACE_ADD                     
                        98      STORE_FAST                      9: rawmode
                        100     LOAD_GLOBAL                     2: SocketIO
                        102     LOAD_FAST                       0: self
                        104     LOAD_FAST                       9: rawmode
                        106     CALL_FUNCTION                   2
                        108     STORE_FAST                      10: raw
                        110     LOAD_FAST                       0: self
                        112     DUP_TOP                         
                        114     LOAD_ATTR                       3: _io_refs
                        116     LOAD_CONST                      7: 1
                        118     INPLACE_ADD                     
                        120     ROT_TWO                         
                        122     STORE_ATTR                      3: _io_refs
                        124     LOAD_FAST                       2: buffering
                        126     LOAD_CONST                      8: None
                        128     IS_OP                           0 (is)
                        130     POP_JUMP_IF_FALSE               68 (to 136)
                        132     LOAD_CONST                      9: -1
                        134     STORE_FAST                      2: buffering
                        136     LOAD_FAST                       2: buffering
                        138     LOAD_CONST                      10: 0
                        140     COMPARE_OP                      0 (<)
                        142     POP_JUMP_IF_FALSE               75 (to 150)
                        144     LOAD_GLOBAL                     4: io
                        146     LOAD_ATTR                       5: DEFAULT_BUFFER_SIZE
                        148     STORE_FAST                      2: buffering
                        150     LOAD_FAST                       2: buffering
                        152     LOAD_CONST                      10: 0
                        154     COMPARE_OP                      2 (==)
                        156     POP_JUMP_IF_FALSE               87 (to 174)
                        158     LOAD_FAST                       8: binary
                        160     POP_JUMP_IF_TRUE                85 (to 170)
                        162     LOAD_GLOBAL                     1: ValueError
                        164     LOAD_CONST                      11: 'unbuffered streams must be binary'
                        166     CALL_FUNCTION                   1
                        168     RAISE_VARARGS                   1
                        170     LOAD_FAST                       10: raw
                        172     RETURN_VALUE                    
                        174     LOAD_FAST                       7: reading
                        176     POP_JUMP_IF_FALSE               99 (to 198)
                        178     LOAD_FAST                       6: writing
                        180     POP_JUMP_IF_FALSE               99 (to 198)
                        182     LOAD_GLOBAL                     4: io
                        184     LOAD_METHOD                     6: BufferedRWPair
                        186     LOAD_FAST                       10: raw
                        188     LOAD_FAST                       10: raw
                        190     LOAD_FAST                       2: buffering
                        192     CALL_METHOD                     3
                        194     STORE_FAST                      11: buffer
                        196     JUMP_FORWARD                    19 (to 236)
                        198     LOAD_FAST                       7: reading
                        200     POP_JUMP_IF_FALSE               108 (to 216)
                        202     LOAD_GLOBAL                     4: io
                        204     LOAD_METHOD                     7: BufferedReader
                        206     LOAD_FAST                       10: raw
                        208     LOAD_FAST                       2: buffering
                        210     CALL_METHOD                     2
                        212     STORE_FAST                      11: buffer
                        214     JUMP_FORWARD                    10 (to 236)
                        216     LOAD_FAST                       6: writing
                        218     POP_JUMP_IF_TRUE                112 (to 224)
                        220     LOAD_ASSERTION_ERROR            
                        222     RAISE_VARARGS                   1
                        224     LOAD_GLOBAL                     4: io
                        226     LOAD_METHOD                     8: BufferedWriter
                        228     LOAD_FAST                       10: raw
                        230     LOAD_FAST                       2: buffering
                        232     CALL_METHOD                     2
                        234     STORE_FAST                      11: buffer
                        236     LOAD_FAST                       8: binary
                        238     POP_JUMP_IF_FALSE               122 (to 244)
                        240     LOAD_FAST                       11: buffer
                        242     RETURN_VALUE                    
                        244     LOAD_GLOBAL                     4: io
                        246     LOAD_METHOD                     9: text_encoding
                        248     LOAD_FAST                       3: encoding
                        250     CALL_METHOD                     1
                        252     STORE_FAST                      3: encoding
                        254     LOAD_GLOBAL                     4: io
                        256     LOAD_METHOD                     10: TextIOWrapper
                        258     LOAD_FAST                       11: buffer
                        260     LOAD_FAST                       3: encoding
                        262     LOAD_FAST                       4: errors
                        264     LOAD_FAST                       5: newline
                        266     CALL_METHOD                     4
                        268     STORE_FAST                      12: text
                        270     LOAD_FAST                       1: mode
                        272     LOAD_FAST                       12: text
                        274     STORE_ATTR                      11: mode
                        276     LOAD_FAST                       12: text
                        278     RETURN_VALUE                    
                'socket.makefile'
                'sendfile'
                0
                [Code]
                    File Name: socket.py
                    Object Name: _sendfile_use_sendfile
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 15
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_check_sendfile_params'
                        'fileno'
                        'AttributeError'
                        'io'
                        'UnsupportedOperation'
                        '_GiveupOnSendfile'
                        'os'
                        'fstat'
                        'st_size'
                        'OSError'
                        'min'
                        'gettimeout'
                        'ValueError'
                        'hasattr'
                        'selectors'
                        'PollSelector'
                        'SelectSelector'
                        'register'
                        'EVENT_WRITE'
                        'select'
                        'sendfile'
                        'TimeoutError'
                        'BlockingIOError'
                        'seek'
                    [Var Names]
                        'self'
                        'file'
                        'offset'
                        'count'
                        'sockno'
                        'fileno'
                        'err'
                        'fsize'
                        'blocksize'
                        'timeout'
                        'selector'
                        'total_sent'
                        'selector_select'
                        'os_sendfile'
                        'sent'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        1073741824
                        'non-blocking sockets are not supported'
                        'PollSelector'
                        True
                        'timed out'
                        'seek'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _check_sendfile_params
                        4       LOAD_FAST                       1: file
                        6       LOAD_FAST                       2: offset
                        8       LOAD_FAST                       3: count
                        10      CALL_METHOD                     3
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     1: fileno
                        18      CALL_METHOD                     0
                        20      STORE_FAST                      4: sockno
                        22      SETUP_FINALLY                   6 (to 36)
                        24      LOAD_FAST                       1: file
                        26      LOAD_METHOD                     1: fileno
                        28      CALL_METHOD                     0
                        30      STORE_FAST                      5: fileno
                        32      POP_BLOCK                       
                        34      JUMP_FORWARD                    19 (to 74)
                        36      DUP_TOP                         
                        38      LOAD_GLOBAL                     2: AttributeError
                        40      LOAD_GLOBAL                     3: io
                        42      LOAD_ATTR                       4: UnsupportedOperation
                        44      BUILD_TUPLE                     2
                        46      JUMP_IF_NOT_EXC_MATCH           36 (to 72)
                        48      POP_TOP                         
                        50      STORE_FAST                      6: err
                        52      POP_TOP                         
                        54      SETUP_FINALLY                   4 (to 64)
                        56      LOAD_GLOBAL                     5: _GiveupOnSendfile
                        58      LOAD_FAST                       6: err
                        60      CALL_FUNCTION                   1
                        62      RAISE_VARARGS                   1
                        64      LOAD_CONST                      0: None
                        66      STORE_FAST                      6: err
                        68      DELETE_FAST                     6: err
                        70      RERAISE                         1
                        72      RERAISE                         0
                        74      SETUP_FINALLY                   8 (to 92)
                        76      LOAD_GLOBAL                     6: os
                        78      LOAD_METHOD                     7: fstat
                        80      LOAD_FAST                       5: fileno
                        82      CALL_METHOD                     1
                        84      LOAD_ATTR                       8: st_size
                        86      STORE_FAST                      7: fsize
                        88      POP_BLOCK                       
                        90      JUMP_FORWARD                    16 (to 124)
                        92      DUP_TOP                         
                        94      LOAD_GLOBAL                     9: OSError
                        96      JUMP_IF_NOT_EXC_MATCH           61 (to 122)
                        98      POP_TOP                         
                        100     STORE_FAST                      6: err
                        102     POP_TOP                         
                        104     SETUP_FINALLY                   4 (to 114)
                        106     LOAD_GLOBAL                     5: _GiveupOnSendfile
                        108     LOAD_FAST                       6: err
                        110     CALL_FUNCTION                   1
                        112     RAISE_VARARGS                   1
                        114     LOAD_CONST                      0: None
                        116     STORE_FAST                      6: err
                        118     DELETE_FAST                     6: err
                        120     RERAISE                         1
                        122     RERAISE                         0
                        124     LOAD_FAST                       7: fsize
                        126     POP_JUMP_IF_TRUE                66 (to 132)
                        128     LOAD_CONST                      1: 0
                        130     RETURN_VALUE                    
                        132     LOAD_GLOBAL                     10: min
                        134     LOAD_FAST                       3: count
                        136     JUMP_IF_TRUE_OR_POP             70 (to 140)
                        138     LOAD_FAST                       7: fsize
                        140     LOAD_CONST                      2: 1073741824
                        142     CALL_FUNCTION                   2
                        144     STORE_FAST                      8: blocksize
                        146     LOAD_FAST                       0: self
                        148     LOAD_METHOD                     11: gettimeout
                        150     CALL_METHOD                     0
                        152     STORE_FAST                      9: timeout
                        154     LOAD_FAST                       9: timeout
                        156     LOAD_CONST                      1: 0
                        158     COMPARE_OP                      2 (==)
                        160     POP_JUMP_IF_FALSE               85 (to 170)
                        162     LOAD_GLOBAL                     12: ValueError
                        164     LOAD_CONST                      3: 'non-blocking sockets are not supported'
                        166     CALL_FUNCTION                   1
                        168     RAISE_VARARGS                   1
                        170     LOAD_GLOBAL                     13: hasattr
                        172     LOAD_GLOBAL                     14: selectors
                        174     LOAD_CONST                      4: 'PollSelector'
                        176     CALL_FUNCTION                   2
                        178     POP_JUMP_IF_FALSE               95 (to 190)
                        180     LOAD_GLOBAL                     14: selectors
                        182     LOAD_METHOD                     15: PollSelector
                        184     CALL_METHOD                     0
                        186     STORE_FAST                      10: selector
                        188     JUMP_FORWARD                    4 (to 198)
                        190     LOAD_GLOBAL                     14: selectors
                        192     LOAD_METHOD                     16: SelectSelector
                        194     CALL_METHOD                     0
                        196     STORE_FAST                      10: selector
                        198     LOAD_FAST                       10: selector
                        200     LOAD_METHOD                     17: register
                        202     LOAD_FAST                       4: sockno
                        204     LOAD_GLOBAL                     14: selectors
                        206     LOAD_ATTR                       18: EVENT_WRITE
                        208     CALL_METHOD                     2
                        210     POP_TOP                         
                        212     LOAD_CONST                      1: 0
                        214     STORE_FAST                      11: total_sent
                        216     LOAD_FAST                       10: selector
                        218     LOAD_ATTR                       19: select
                        220     STORE_FAST                      12: selector_select
                        222     LOAD_GLOBAL                     6: os
                        224     LOAD_ATTR                       20: sendfile
                        226     STORE_FAST                      13: os_sendfile
                        228     SETUP_FINALLY                   101 (to 432)
                        230     NOP                             
                        232     LOAD_FAST                       9: timeout
                        234     POP_JUMP_IF_FALSE               126 (to 252)
                        236     LOAD_FAST                       12: selector_select
                        238     LOAD_FAST                       9: timeout
                        240     CALL_FUNCTION                   1
                        242     POP_JUMP_IF_TRUE                126 (to 252)
                        244     LOAD_GLOBAL                     21: TimeoutError
                        246     LOAD_CONST                      6: 'timed out'
                        248     CALL_FUNCTION                   1
                        250     RAISE_VARARGS                   1
                        252     LOAD_FAST                       3: count
                        254     POP_JUMP_IF_FALSE               137 (to 274)
                        256     LOAD_FAST                       3: count
                        258     LOAD_FAST                       11: total_sent
                        260     BINARY_SUBTRACT                 
                        262     STORE_FAST                      8: blocksize
                        264     LOAD_FAST                       8: blocksize
                        266     LOAD_CONST                      1: 0
                        268     COMPARE_OP                      1 (<=)
                        270     POP_JUMP_IF_FALSE               137 (to 274)
                        272     JUMP_FORWARD                    60 (to 394)
                        274     SETUP_FINALLY                   9 (to 294)
                        276     LOAD_FAST                       13: os_sendfile
                        278     LOAD_FAST                       4: sockno
                        280     LOAD_FAST                       5: fileno
                        282     LOAD_FAST                       2: offset
                        284     LOAD_FAST                       8: blocksize
                        286     CALL_FUNCTION                   4
                        288     STORE_FAST                      14: sent
                        290     POP_BLOCK                       
                        292     JUMP_FORWARD                    36 (to 366)
                        294     DUP_TOP                         
                        296     LOAD_GLOBAL                     22: BlockingIOError
                        298     JUMP_IF_NOT_EXC_MATCH           160 (to 320)
                        300     POP_TOP                         
                        302     POP_TOP                         
                        304     POP_TOP                         
                        306     LOAD_FAST                       9: timeout
                        308     POP_JUMP_IF_TRUE                158 (to 316)
                        310     LOAD_FAST                       12: selector_select
                        312     CALL_FUNCTION                   0
                        314     POP_TOP                         
                        316     POP_EXCEPT                      
                        318     JUMP_ABSOLUTE                   115 (to 230)
                        320     DUP_TOP                         
                        322     LOAD_GLOBAL                     9: OSError
                        324     JUMP_IF_NOT_EXC_MATCH           182 (to 364)
                        326     POP_TOP                         
                        328     STORE_FAST                      6: err
                        330     POP_TOP                         
                        332     SETUP_FINALLY                   11 (to 356)
                        334     LOAD_FAST                       11: total_sent
                        336     LOAD_CONST                      1: 0
                        338     COMPARE_OP                      2 (==)
                        340     POP_JUMP_IF_FALSE               175 (to 350)
                        342     LOAD_GLOBAL                     5: _GiveupOnSendfile
                        344     LOAD_FAST                       6: err
                        346     CALL_FUNCTION                   1
                        348     RAISE_VARARGS                   1
                        350     LOAD_FAST                       6: err
                        352     LOAD_CONST                      0: None
                        354     RAISE_VARARGS                   2
                        356     LOAD_CONST                      0: None
                        358     STORE_FAST                      6: err
                        360     DELETE_FAST                     6: err
                        362     RERAISE                         1
                        364     RERAISE                         0
                        366     LOAD_FAST                       14: sent
                        368     LOAD_CONST                      1: 0
                        370     COMPARE_OP                      2 (==)
                        372     POP_JUMP_IF_FALSE               188 (to 376)
                        374     JUMP_FORWARD                    9 (to 394)
                        376     LOAD_FAST                       2: offset
                        378     LOAD_FAST                       14: sent
                        380     INPLACE_ADD                     
                        382     STORE_FAST                      2: offset
                        384     LOAD_FAST                       11: total_sent
                        386     LOAD_FAST                       14: sent
                        388     INPLACE_ADD                     
                        390     STORE_FAST                      11: total_sent
                        392     JUMP_ABSOLUTE                   116 (to 232)
                        394     LOAD_FAST                       11: total_sent
                        396     POP_BLOCK                       
                        398     LOAD_FAST                       11: total_sent
                        400     LOAD_CONST                      1: 0
                        402     COMPARE_OP                      4 (>)
                        404     POP_JUMP_IF_FALSE               214 (to 428)
                        406     LOAD_GLOBAL                     13: hasattr
                        408     LOAD_FAST                       1: file
                        410     LOAD_CONST                      7: 'seek'
                        412     CALL_FUNCTION                   2
                        414     POP_JUMP_IF_FALSE               215 (to 430)
                        416     LOAD_FAST                       1: file
                        418     LOAD_METHOD                     23: seek
                        420     LOAD_FAST                       2: offset
                        422     CALL_METHOD                     1
                        424     POP_TOP                         
                        426     RETURN_VALUE                    
                        428     RETURN_VALUE                    
                        430     RETURN_VALUE                    
                        432     LOAD_FAST                       11: total_sent
                        434     LOAD_CONST                      1: 0
                        436     COMPARE_OP                      4 (>)
                        438     POP_JUMP_IF_FALSE               231 (to 462)
                        440     LOAD_GLOBAL                     13: hasattr
                        442     LOAD_FAST                       1: file
                        444     LOAD_CONST                      7: 'seek'
                        446     CALL_FUNCTION                   2
                        448     POP_JUMP_IF_FALSE               232 (to 464)
                        450     LOAD_FAST                       1: file
                        452     LOAD_METHOD                     23: seek
                        454     LOAD_FAST                       2: offset
                        456     CALL_METHOD                     1
                        458     POP_TOP                         
                        460     RERAISE                         0
                        462     RERAISE                         0
                        464     RERAISE                         0
                'socket._sendfile_use_sendfile'
                [Code]
                    File Name: socket.py
                    Object Name: _sendfile_use_sendfile
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_GiveupOnSendfile'
                    [Var Names]
                        'self'
                        'file'
                        'offset'
                        'count'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'os.sendfile() not available on this platform'
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _GiveupOnSendfile
                        2       LOAD_CONST                      1: 'os.sendfile() not available on this platform'
                        4       CALL_FUNCTION                   1
                        6       RAISE_VARARGS                   1
                [Code]
                    File Name: socket.py
                    Object Name: _sendfile_use_send
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 10
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_check_sendfile_params'
                        'gettimeout'
                        'ValueError'
                        'seek'
                        'min'
                        'read'
                        'send'
                        'memoryview'
                        'BlockingIOError'
                        'len'
                        'hasattr'
                    [Var Names]
                        'self'
                        'file'
                        'offset'
                        'count'
                        'blocksize'
                        'total_sent'
                        'file_read'
                        'sock_send'
                        'data'
                        'sent'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        'non-blocking sockets are not supported'
                        8192
                        True
                        'seek'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _check_sendfile_params
                        4       LOAD_FAST                       1: file
                        6       LOAD_FAST                       2: offset
                        8       LOAD_FAST                       3: count
                        10      CALL_METHOD                     3
                        12      POP_TOP                         
                        14      LOAD_FAST                       0: self
                        16      LOAD_METHOD                     1: gettimeout
                        18      CALL_METHOD                     0
                        20      LOAD_CONST                      1: 0
                        22      COMPARE_OP                      2 (==)
                        24      POP_JUMP_IF_FALSE               17 (to 34)
                        26      LOAD_GLOBAL                     2: ValueError
                        28      LOAD_CONST                      2: 'non-blocking sockets are not supported'
                        30      CALL_FUNCTION                   1
                        32      RAISE_VARARGS                   1
                        34      LOAD_FAST                       2: offset
                        36      POP_JUMP_IF_FALSE               24 (to 48)
                        38      LOAD_FAST                       1: file
                        40      LOAD_METHOD                     3: seek
                        42      LOAD_FAST                       2: offset
                        44      CALL_METHOD                     1
                        46      POP_TOP                         
                        48      LOAD_FAST                       3: count
                        50      POP_JUMP_IF_FALSE               31 (to 62)
                        52      LOAD_GLOBAL                     4: min
                        54      LOAD_FAST                       3: count
                        56      LOAD_CONST                      3: 8192
                        58      CALL_FUNCTION                   2
                        60      JUMP_FORWARD                    1 (to 64)
                        62      LOAD_CONST                      3: 8192
                        64      STORE_FAST                      4: blocksize
                        66      LOAD_CONST                      1: 0
                        68      STORE_FAST                      5: total_sent
                        70      LOAD_FAST                       1: file
                        72      LOAD_ATTR                       5: read
                        74      STORE_FAST                      6: file_read
                        76      LOAD_FAST                       0: self
                        78      LOAD_ATTR                       6: send
                        80      STORE_FAST                      7: sock_send
                        82      SETUP_FINALLY                   82 (to 248)
                        84      NOP                             
                        86      LOAD_FAST                       3: count
                        88      POP_JUMP_IF_FALSE               57 (to 114)
                        90      LOAD_GLOBAL                     4: min
                        92      LOAD_FAST                       3: count
                        94      LOAD_FAST                       5: total_sent
                        96      BINARY_SUBTRACT                 
                        98      LOAD_FAST                       4: blocksize
                        100     CALL_FUNCTION                   2
                        102     STORE_FAST                      4: blocksize
                        104     LOAD_FAST                       4: blocksize
                        106     LOAD_CONST                      1: 0
                        108     COMPARE_OP                      1 (<=)
                        110     POP_JUMP_IF_FALSE               57 (to 114)
                        112     JUMP_FORWARD                    46 (to 206)
                        114     LOAD_GLOBAL                     7: memoryview
                        116     LOAD_FAST                       6: file_read
                        118     LOAD_FAST                       4: blocksize
                        120     CALL_FUNCTION                   1
                        122     CALL_FUNCTION                   1
                        124     STORE_FAST                      8: data
                        126     LOAD_FAST                       8: data
                        128     POP_JUMP_IF_TRUE                66 (to 132)
                        130     JUMP_FORWARD                    37 (to 206)
                        132     NOP                             
                        134     SETUP_FINALLY                   6 (to 148)
                        136     LOAD_FAST                       7: sock_send
                        138     LOAD_FAST                       8: data
                        140     CALL_FUNCTION                   1
                        142     STORE_FAST                      9: sent
                        144     POP_BLOCK                       
                        146     JUMP_FORWARD                    9 (to 166)
                        148     DUP_TOP                         
                        150     LOAD_GLOBAL                     8: BlockingIOError
                        152     JUMP_IF_NOT_EXC_MATCH           82 (to 164)
                        154     POP_TOP                         
                        156     POP_TOP                         
                        158     POP_TOP                         
                        160     POP_EXCEPT                      
                        162     JUMP_ABSOLUTE                   66 (to 132)
                        164     RERAISE                         0
                        166     LOAD_FAST                       5: total_sent
                        168     LOAD_FAST                       9: sent
                        170     INPLACE_ADD                     
                        172     STORE_FAST                      5: total_sent
                        174     LOAD_FAST                       9: sent
                        176     LOAD_GLOBAL                     9: len
                        178     LOAD_FAST                       8: data
                        180     CALL_FUNCTION                   1
                        182     COMPARE_OP                      0 (<)
                        184     POP_JUMP_IF_FALSE               100 (to 200)
                        186     LOAD_FAST                       8: data
                        188     LOAD_FAST                       9: sent
                        190     LOAD_CONST                      0: None
                        192     BUILD_SLICE                     2
                        194     BINARY_SUBSCR                   
                        196     STORE_FAST                      8: data
                        198     JUMP_FORWARD                    1 (to 202)
                        200     JUMP_FORWARD                    1 (to 204)
                        202     JUMP_ABSOLUTE                   67 (to 134)
                        204     JUMP_ABSOLUTE                   43 (to 86)
                        206     LOAD_FAST                       5: total_sent
                        208     POP_BLOCK                       
                        210     LOAD_FAST                       5: total_sent
                        212     LOAD_CONST                      1: 0
                        214     COMPARE_OP                      4 (>)
                        216     POP_JUMP_IF_FALSE               122 (to 244)
                        218     LOAD_GLOBAL                     10: hasattr
                        220     LOAD_FAST                       1: file
                        222     LOAD_CONST                      5: 'seek'
                        224     CALL_FUNCTION                   2
                        226     POP_JUMP_IF_FALSE               123 (to 246)
                        228     LOAD_FAST                       1: file
                        230     LOAD_METHOD                     3: seek
                        232     LOAD_FAST                       2: offset
                        234     LOAD_FAST                       5: total_sent
                        236     BINARY_ADD                      
                        238     CALL_METHOD                     1
                        240     POP_TOP                         
                        242     RETURN_VALUE                    
                        244     RETURN_VALUE                    
                        246     RETURN_VALUE                    
                        248     LOAD_FAST                       5: total_sent
                        250     LOAD_CONST                      1: 0
                        252     COMPARE_OP                      4 (>)
                        254     POP_JUMP_IF_FALSE               141 (to 282)
                        256     LOAD_GLOBAL                     10: hasattr
                        258     LOAD_FAST                       1: file
                        260     LOAD_CONST                      5: 'seek'
                        262     CALL_FUNCTION                   2
                        264     POP_JUMP_IF_FALSE               142 (to 284)
                        266     LOAD_FAST                       1: file
                        268     LOAD_METHOD                     3: seek
                        270     LOAD_FAST                       2: offset
                        272     LOAD_FAST                       5: total_sent
                        274     BINARY_ADD                      
                        276     CALL_METHOD                     1
                        278     POP_TOP                         
                        280     RERAISE                         0
                        282     RERAISE                         0
                        284     RERAISE                         0
                'socket._sendfile_use_send'
                [Code]
                    File Name: socket.py
                    Object Name: _check_sendfile_params
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 5
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'getattr'
                        'ValueError'
                        'type'
                        'SOCK_STREAM'
                        'isinstance'
                        'int'
                        'TypeError'
                        'format'
                    [Var Names]
                        'self'
                        'file'
                        'offset'
                        'count'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        'b'
                        'mode'
                        'file should be opened in binary mode'
                        'only SOCK_STREAM type sockets are supported'
                        'count must be a positive integer (got {!r})'
                        0
                    [Disassembly]
                        0       LOAD_CONST                      1: 'b'
                        2       LOAD_GLOBAL                     0: getattr
                        4       LOAD_FAST                       1: file
                        6       LOAD_CONST                      2: 'mode'
                        8       LOAD_CONST                      1: 'b'
                        10      CALL_FUNCTION                   3
                        12      CONTAINS_OP                     1 (not in)
                        14      POP_JUMP_IF_FALSE               12 (to 24)
                        16      LOAD_GLOBAL                     1: ValueError
                        18      LOAD_CONST                      3: 'file should be opened in binary mode'
                        20      CALL_FUNCTION                   1
                        22      RAISE_VARARGS                   1
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       2: type
                        28      LOAD_GLOBAL                     3: SOCK_STREAM
                        30      BINARY_AND                      
                        32      POP_JUMP_IF_TRUE                21 (to 42)
                        34      LOAD_GLOBAL                     1: ValueError
                        36      LOAD_CONST                      4: 'only SOCK_STREAM type sockets are supported'
                        38      CALL_FUNCTION                   1
                        40      RAISE_VARARGS                   1
                        42      LOAD_FAST                       3: count
                        44      LOAD_CONST                      0: None
                        46      IS_OP                           1 (is not)
                        48      POP_JUMP_IF_FALSE               48 (to 96)
                        50      LOAD_GLOBAL                     4: isinstance
                        52      LOAD_FAST                       3: count
                        54      LOAD_GLOBAL                     5: int
                        56      CALL_FUNCTION                   2
                        58      POP_JUMP_IF_TRUE                37 (to 74)
                        60      LOAD_GLOBAL                     6: TypeError
                        62      LOAD_CONST                      5: 'count must be a positive integer (got {!r})'
                        64      LOAD_METHOD                     7: format
                        66      LOAD_FAST                       3: count
                        68      CALL_METHOD                     1
                        70      CALL_FUNCTION                   1
                        72      RAISE_VARARGS                   1
                        74      LOAD_FAST                       3: count
                        76      LOAD_CONST                      6: 0
                        78      COMPARE_OP                      1 (<=)
                        80      POP_JUMP_IF_FALSE               50 (to 100)
                        82      LOAD_GLOBAL                     1: ValueError
                        84      LOAD_CONST                      5: 'count must be a positive integer (got {!r})'
                        86      LOAD_METHOD                     7: format
                        88      LOAD_FAST                       3: count
                        90      CALL_METHOD                     1
                        92      CALL_FUNCTION                   1
                        94      RAISE_VARARGS                   1
                        96      LOAD_CONST                      0: None
                        98      RETURN_VALUE                    
                        100     LOAD_CONST                      0: None
                        102     RETURN_VALUE                    
                'socket._check_sendfile_params'
                [Code]
                    File Name: socket.py
                    Object Name: sendfile
                    Arg Count: 4
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 4
                    Stack Size: 8
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_sendfile_use_sendfile'
                        '_GiveupOnSendfile'
                        '_sendfile_use_send'
                    [Var Names]
                        'self'
                        'file'
                        'offset'
                        'count'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'sendfile(file[, offset[, count]]) -> sent\n\n        Send a file until EOF is reached by using high-performance\n        os.sendfile() and return the total number of bytes which\n        were sent.\n        *file* must be a regular file object opened in binary mode.\n        If os.sendfile() is not available (e.g. Windows) or file is\n        not a regular file socket.send() will be used instead.\n        *offset* tells from where to start reading the file.\n        If specified, *count* is the total number of bytes to transmit\n        as opposed to sending the file until EOF is reached.\n        File position is updated on return or also in case of error in\n        which case file.tell() can be used to figure out the number of\n        bytes which were sent.\n        The socket must be of SOCK_STREAM type.\n        Non-blocking sockets are not supported.\n        '
                    [Disassembly]
                        0       SETUP_FINALLY                   8 (to 18)
                        2       LOAD_FAST                       0: self
                        4       LOAD_METHOD                     0: _sendfile_use_sendfile
                        6       LOAD_FAST                       1: file
                        8       LOAD_FAST                       2: offset
                        10      LOAD_FAST                       3: count
                        12      CALL_METHOD                     3
                        14      POP_BLOCK                       
                        16      RETURN_VALUE                    
                        18      DUP_TOP                         
                        20      LOAD_GLOBAL                     1: _GiveupOnSendfile
                        22      JUMP_IF_NOT_EXC_MATCH           24 (to 48)
                        24      POP_TOP                         
                        26      POP_TOP                         
                        28      POP_TOP                         
                        30      LOAD_FAST                       0: self
                        32      LOAD_METHOD                     2: _sendfile_use_send
                        34      LOAD_FAST                       1: file
                        36      LOAD_FAST                       2: offset
                        38      LOAD_FAST                       3: count
                        40      CALL_METHOD                     3
                        42      ROT_FOUR                        
                        44      POP_EXCEPT                      
                        46      RETURN_VALUE                    
                        48      RERAISE                         0
                'socket.sendfile'
                [Code]
                    File Name: socket.py
                    Object Name: _decref_socketios
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_io_refs'
                        '_closed'
                        'close'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        0
                        1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _io_refs
                        4       LOAD_CONST                      1: 0
                        6       COMPARE_OP                      4 (>)
                        8       POP_JUMP_IF_FALSE               12 (to 24)
                        10      LOAD_FAST                       0: self
                        12      DUP_TOP                         
                        14      LOAD_ATTR                       0: _io_refs
                        16      LOAD_CONST                      2: 1
                        18      INPLACE_SUBTRACT                
                        20      ROT_TWO                         
                        22      STORE_ATTR                      0: _io_refs
                        24      LOAD_FAST                       0: self
                        26      LOAD_ATTR                       1: _closed
                        28      POP_JUMP_IF_FALSE               21 (to 42)
                        30      LOAD_FAST                       0: self
                        32      LOAD_METHOD                     2: close
                        34      CALL_METHOD                     0
                        36      POP_TOP                         
                        38      LOAD_CONST                      0: None
                        40      RETURN_VALUE                    
                        42      LOAD_CONST                      0: None
                        44      RETURN_VALUE                    
                'socket._decref_socketios'
                [Code]
                    File Name: socket.py
                    Object Name: _real_close
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'close'
                    [Var Names]
                        'self'
                        '_ss'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       1: _ss
                        2       LOAD_METHOD                     0: close
                        4       LOAD_FAST                       0: self
                        6       CALL_METHOD                     1
                        8       POP_TOP                         
                        10      LOAD_CONST                      0: None
                        12      RETURN_VALUE                    
                'socket._real_close'
                [Code]
                    File Name: socket.py
                    Object Name: close
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_closed'
                        '_io_refs'
                        '_real_close'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        True
                        0
                    [Disassembly]
                        0       LOAD_CONST                      1: True
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _closed
                        6       LOAD_FAST                       0: self
                        8       LOAD_ATTR                       1: _io_refs
                        10      LOAD_CONST                      2: 0
                        12      COMPARE_OP                      1 (<=)
                        14      POP_JUMP_IF_FALSE               14 (to 28)
                        16      LOAD_FAST                       0: self
                        18      LOAD_METHOD                     2: _real_close
                        20      CALL_METHOD                     0
                        22      POP_TOP                         
                        24      LOAD_CONST                      0: None
                        26      RETURN_VALUE                    
                        28      LOAD_CONST                      0: None
                        30      RETURN_VALUE                    
                'socket.close'
                [Code]
                    File Name: socket.py
                    Object Name: detach
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_closed'
                        'super'
                        'detach'
                    [Var Names]
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        'detach() -> file descriptor\n\n        Close the socket object without closing the underlying file descriptor.\n        The object cannot be used after this call, but the file descriptor\n        can be reused for other purposes.  The file descriptor is returned.\n        '
                        True
                    [Disassembly]
                        0       LOAD_CONST                      1: True
                        2       LOAD_FAST                       0: self
                        4       STORE_ATTR                      0: _closed
                        6       LOAD_GLOBAL                     1: super
                        8       CALL_FUNCTION                   0
                        10      LOAD_METHOD                     2: detach
                        12      CALL_METHOD                     0
                        14      RETURN_VALUE                    
                'socket.detach'
                [Code]
                    File Name: socket.py
                    Object Name: family
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_intenum_converter'
                        'super'
                        'family'
                        'AddressFamily'
                    [Var Names]
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        'Read-only access to the address family for this socket.\n        '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _intenum_converter
                        2       LOAD_GLOBAL                     1: super
                        4       CALL_FUNCTION                   0
                        6       LOAD_ATTR                       2: family
                        8       LOAD_GLOBAL                     3: AddressFamily
                        10      CALL_FUNCTION                   2
                        12      RETURN_VALUE                    
                'socket.family'
                [Code]
                    File Name: socket.py
                    Object Name: type
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        '_intenum_converter'
                        'super'
                        'type'
                        'SocketKind'
                    [Var Names]
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        'Read-only access to the socket type.\n        '
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: _intenum_converter
                        2       LOAD_GLOBAL                     1: super
                        4       CALL_FUNCTION                   0
                        6       LOAD_ATTR                       2: type
                        8       LOAD_GLOBAL                     3: SocketKind
                        10      CALL_FUNCTION                   2
                        12      RETURN_VALUE                    
                'socket.type'
                'nt'
                [Code]
                    File Name: socket.py
                    Object Name: get_inheritable
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'os'
                        'get_handle_inheritable'
                        'fileno'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: os
                        2       LOAD_METHOD                     1: get_handle_inheritable
                        4       LOAD_FAST                       0: self
                        6       LOAD_METHOD                     2: fileno
                        8       CALL_METHOD                     0
                        10      CALL_METHOD                     1
                        12      RETURN_VALUE                    
                'socket.get_inheritable'
                [Code]
                    File Name: socket.py
                    Object Name: set_inheritable
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'os'
                        'set_handle_inheritable'
                        'fileno'
                    [Var Names]
                        'self'
                        'inheritable'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: os
                        2       LOAD_METHOD                     1: set_handle_inheritable
                        4       LOAD_FAST                       0: self
                        6       LOAD_METHOD                     2: fileno
                        8       CALL_METHOD                     0
                        10      LOAD_FAST                       1: inheritable
                        12      CALL_METHOD                     2
                        14      POP_TOP                         
                        16      LOAD_CONST                      0: None
                        18      RETURN_VALUE                    
                'socket.set_inheritable'
                [Code]
                    File Name: socket.py
                    Object Name: get_inheritable
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'os'
                        'get_inheritable'
                        'fileno'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: os
                        2       LOAD_METHOD                     1: get_inheritable
                        4       LOAD_FAST                       0: self
                        6       LOAD_METHOD                     2: fileno
                        8       CALL_METHOD                     0
                        10      CALL_METHOD                     1
                        12      RETURN_VALUE                    
                [Code]
                    File Name: socket.py
                    Object Name: set_inheritable
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 2
                    Stack Size: 4
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'os'
                        'set_inheritable'
                        'fileno'
                    [Var Names]
                        'self'
                        'inheritable'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_GLOBAL                     0: os
                        2       LOAD_METHOD                     1: set_inheritable
                        4       LOAD_FAST                       0: self
                        6       LOAD_METHOD                     2: fileno
                        8       CALL_METHOD                     0
                        10      LOAD_FAST                       1: inheritable
                        12      CALL_METHOD                     2
                        14      POP_TOP                         
                        16      LOAD_CONST                      0: None
                        18      RETURN_VALUE                    
                'Get the inheritable flag of the socket'
                'Set the inheritable flag of the socket'
                (
                    -1
                    -1
                    -1
                    None
                )
                (
                    'r'
                    None
                )
                (
                    0
                    None
                )
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'socket'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'A subclass of _socket.socket adding the makefile() method.'
                10      STORE_NAME                      3: __doc__
                12      BUILD_LIST                      0
                14      LOAD_CONST                      2: ('__weakref__', '_io_refs', '_closed')
                16      LIST_EXTEND                     1
                18      STORE_NAME                      4: __slots__
                20      LOAD_CONST                      55: (-1, -1, -1, None)
                22      LOAD_CONST                      5: <CODE> __init__
                24      LOAD_CONST                      6: 'socket.__init__'
                26      MAKE_FUNCTION                   1
                28      STORE_NAME                      5: __init__
                30      LOAD_CONST                      7: <CODE> __enter__
                32      LOAD_CONST                      8: 'socket.__enter__'
                34      MAKE_FUNCTION                   0
                36      STORE_NAME                      6: __enter__
                38      LOAD_CONST                      9: <CODE> __exit__
                40      LOAD_CONST                      10: 'socket.__exit__'
                42      MAKE_FUNCTION                   0
                44      STORE_NAME                      7: __exit__
                46      LOAD_CONST                      11: <CODE> __repr__
                48      LOAD_CONST                      12: 'socket.__repr__'
                50      MAKE_FUNCTION                   0
                52      STORE_NAME                      8: __repr__
                54      LOAD_CONST                      13: <CODE> __getstate__
                56      LOAD_CONST                      14: 'socket.__getstate__'
                58      MAKE_FUNCTION                   0
                60      STORE_NAME                      9: __getstate__
                62      LOAD_CONST                      15: <CODE> dup
                64      LOAD_CONST                      16: 'socket.dup'
                66      MAKE_FUNCTION                   0
                68      STORE_NAME                      10: dup
                70      LOAD_CONST                      17: <CODE> accept
                72      LOAD_CONST                      18: 'socket.accept'
                74      MAKE_FUNCTION                   0
                76      STORE_NAME                      11: accept
                78      LOAD_CONST                      56: ('r', None)
                80      LOAD_CONST                      4: None
                82      LOAD_CONST                      4: None
                84      LOAD_CONST                      4: None
                86      LOAD_CONST                      20: ('encoding', 'errors', 'newline')
                88      BUILD_CONST_KEY_MAP             3
                90      LOAD_CONST                      21: <CODE> makefile
                92      LOAD_CONST                      22: 'socket.makefile'
                94      MAKE_FUNCTION                   3
                96      STORE_NAME                      12: makefile
                98      LOAD_NAME                       13: hasattr
                100     LOAD_NAME                       14: os
                102     LOAD_CONST                      23: 'sendfile'
                104     CALL_FUNCTION                   2
                106     POP_JUMP_IF_FALSE               60 (to 120)
                108     LOAD_CONST                      57: (0, None)
                110     LOAD_CONST                      25: <CODE> _sendfile_use_sendfile
                112     LOAD_CONST                      26: 'socket._sendfile_use_sendfile'
                114     MAKE_FUNCTION                   1
                116     STORE_NAME                      15: _sendfile_use_sendfile
                118     JUMP_FORWARD                    5 (to 130)
                120     LOAD_CONST                      57: (0, None)
                122     LOAD_CONST                      27: <CODE> _sendfile_use_sendfile
                124     LOAD_CONST                      26: 'socket._sendfile_use_sendfile'
                126     MAKE_FUNCTION                   1
                128     STORE_NAME                      15: _sendfile_use_sendfile
                130     LOAD_CONST                      57: (0, None)
                132     LOAD_CONST                      28: <CODE> _sendfile_use_send
                134     LOAD_CONST                      29: 'socket._sendfile_use_send'
                136     MAKE_FUNCTION                   1
                138     STORE_NAME                      16: _sendfile_use_send
                140     LOAD_CONST                      30: <CODE> _check_sendfile_params
                142     LOAD_CONST                      31: 'socket._check_sendfile_params'
                144     MAKE_FUNCTION                   0
                146     STORE_NAME                      17: _check_sendfile_params
                148     LOAD_CONST                      57: (0, None)
                150     LOAD_CONST                      32: <CODE> sendfile
                152     LOAD_CONST                      33: 'socket.sendfile'
                154     MAKE_FUNCTION                   1
                156     STORE_NAME                      18: sendfile
                158     LOAD_CONST                      34: <CODE> _decref_socketios
                160     LOAD_CONST                      35: 'socket._decref_socketios'
                162     MAKE_FUNCTION                   0
                164     STORE_NAME                      19: _decref_socketios
                166     LOAD_NAME                       20: _socket
                168     LOAD_ATTR                       21: socket
                170     BUILD_TUPLE                     1
                172     LOAD_CONST                      36: <CODE> _real_close
                174     LOAD_CONST                      37: 'socket._real_close'
                176     MAKE_FUNCTION                   1
                178     STORE_NAME                      22: _real_close
                180     LOAD_CONST                      38: <CODE> close
                182     LOAD_CONST                      39: 'socket.close'
                184     MAKE_FUNCTION                   0
                186     STORE_NAME                      23: close
                188     LOAD_CLOSURE                    0: __class__
                190     BUILD_TUPLE                     1
                192     LOAD_CONST                      40: <CODE> detach
                194     LOAD_CONST                      41: 'socket.detach'
                196     MAKE_FUNCTION                   8
                198     STORE_NAME                      24: detach
                200     LOAD_NAME                       25: property
                202     LOAD_CLOSURE                    0: __class__
                204     BUILD_TUPLE                     1
                206     LOAD_CONST                      42: <CODE> family
                208     LOAD_CONST                      43: 'socket.family'
                210     MAKE_FUNCTION                   8
                212     CALL_FUNCTION                   1
                214     STORE_NAME                      26: family
                216     LOAD_NAME                       25: property
                218     LOAD_CLOSURE                    0: __class__
                220     BUILD_TUPLE                     1
                222     LOAD_CONST                      44: <CODE> type
                224     LOAD_CONST                      45: 'socket.type'
                226     MAKE_FUNCTION                   8
                228     CALL_FUNCTION                   1
                230     STORE_NAME                      27: type
                232     LOAD_NAME                       14: os
                234     LOAD_ATTR                       28: name
                236     LOAD_CONST                      46: 'nt'
                238     COMPARE_OP                      2 (==)
                240     POP_JUMP_IF_FALSE               130 (to 260)
                242     LOAD_CONST                      47: <CODE> get_inheritable
                244     LOAD_CONST                      48: 'socket.get_inheritable'
                246     MAKE_FUNCTION                   0
                248     STORE_NAME                      29: get_inheritable
                250     LOAD_CONST                      49: <CODE> set_inheritable
                252     LOAD_CONST                      50: 'socket.set_inheritable'
                254     MAKE_FUNCTION                   0
                256     STORE_NAME                      30: set_inheritable
                258     JUMP_FORWARD                    8 (to 276)
                260     LOAD_CONST                      51: <CODE> get_inheritable
                262     LOAD_CONST                      48: 'socket.get_inheritable'
                264     MAKE_FUNCTION                   0
                266     STORE_NAME                      29: get_inheritable
                268     LOAD_CONST                      52: <CODE> set_inheritable
                270     LOAD_CONST                      50: 'socket.set_inheritable'
                272     MAKE_FUNCTION                   0
                274     STORE_NAME                      30: set_inheritable
                276     LOAD_CONST                      53: 'Get the inheritable flag of the socket'
                278     LOAD_NAME                       29: get_inheritable
                280     STORE_ATTR                      3: __doc__
                282     LOAD_CONST                      54: 'Set the inheritable flag of the socket'
                284     LOAD_NAME                       30: set_inheritable
                286     STORE_ATTR                      3: __doc__
                288     LOAD_CLOSURE                    0: __class__
                290     DUP_TOP                         
                292     STORE_NAME                      31: __classcell__
                294     RETURN_VALUE                    
        'socket'
        [Code]
            File Name: socket.py
            Object Name: fromfd
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'dup'
                'socket'
            [Var Names]
                'fd'
                'family'
                'type'
                'proto'
                'nfd'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' fromfd(fd, family, type[, proto]) -> socket object\n\n    Create a socket object from a duplicate of the given file\n    descriptor.  The remaining arguments are the same as for socket().\n    '
            [Disassembly]
                0       LOAD_GLOBAL                     0: dup
                2       LOAD_FAST                       0: fd
                4       CALL_FUNCTION                   1
                6       STORE_FAST                      4: nfd
                8       LOAD_GLOBAL                     1: socket
                10      LOAD_FAST                       1: family
                12      LOAD_FAST                       2: type
                14      LOAD_FAST                       3: proto
                16      LOAD_FAST                       4: nfd
                18      CALL_FUNCTION                   4
                20      RETURN_VALUE                    
        'fromfd'
        'sendmsg'
        [Code]
            File Name: socket.py
            Object Name: send_fds
            Arg Count: 5
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'sendmsg'
                '_socket'
                'SOL_SOCKET'
                'SCM_RIGHTS'
                'array'
            [Var Names]
                'sock'
                'buffers'
                'fds'
                'flags'
                'address'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' send_fds(sock, buffers, fds[, flags[, address]]) -> integer\n\n        Send the list of file descriptors fds over an AF_UNIX socket.\n        '
                'i'
            [Disassembly]
                0       LOAD_FAST                       0: sock
                2       LOAD_METHOD                     0: sendmsg
                4       LOAD_FAST                       1: buffers
                6       LOAD_GLOBAL                     1: _socket
                8       LOAD_ATTR                       2: SOL_SOCKET
                10      LOAD_GLOBAL                     1: _socket
                12      LOAD_ATTR                       3: SCM_RIGHTS
                14      LOAD_GLOBAL                     4: array
                16      LOAD_METHOD                     4: array
                18      LOAD_CONST                      1: 'i'
                20      LOAD_FAST                       2: fds
                22      CALL_METHOD                     2
                24      BUILD_TUPLE                     3
                26      BUILD_LIST                      1
                28      CALL_METHOD                     2
                30      RETURN_VALUE                    
        'send_fds'
        'recvmsg'
        [Code]
            File Name: socket.py
            Object Name: recv_fds
            Arg Count: 4
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 11
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'array'
                'recvmsg'
                '_socket'
                'CMSG_LEN'
                'itemsize'
                'SOL_SOCKET'
                'SCM_RIGHTS'
                'frombytes'
                'len'
                'list'
            [Var Names]
                'sock'
                'bufsize'
                'maxfds'
                'flags'
                'fds'
                'msg'
                'ancdata'
                'addr'
                'cmsg_level'
                'cmsg_type'
                'cmsg_data'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' recv_fds(sock, bufsize, maxfds[, flags]) -> (data, list of file\n        descriptors, msg_flags, address)\n\n        Receive up to maxfds file descriptors returning the message\n        data and a list containing the descriptors.\n        '
                'i'
                None
            [Disassembly]
                0       LOAD_GLOBAL                     0: array
                2       LOAD_METHOD                     0: array
                4       LOAD_CONST                      1: 'i'
                6       CALL_METHOD                     1
                8       STORE_FAST                      4: fds
                10      LOAD_FAST                       0: sock
                12      LOAD_METHOD                     1: recvmsg
                14      LOAD_FAST                       1: bufsize
                16      LOAD_GLOBAL                     2: _socket
                18      LOAD_METHOD                     3: CMSG_LEN
                20      LOAD_FAST                       2: maxfds
                22      LOAD_FAST                       4: fds
                24      LOAD_ATTR                       4: itemsize
                26      BINARY_MULTIPLY                 
                28      CALL_METHOD                     1
                30      CALL_METHOD                     2
                32      UNPACK_SEQUENCE                 4
                34      STORE_FAST                      5: msg
                36      STORE_FAST                      6: ancdata
                38      STORE_FAST                      3: flags
                40      STORE_FAST                      7: addr
                42      LOAD_FAST                       6: ancdata
                44      GET_ITER                        
                46      FOR_ITER                        33 (to 114)
                48      UNPACK_SEQUENCE                 3
                50      STORE_FAST                      8: cmsg_level
                52      STORE_FAST                      9: cmsg_type
                54      STORE_FAST                      10: cmsg_data
                56      LOAD_FAST                       8: cmsg_level
                58      LOAD_GLOBAL                     2: _socket
                60      LOAD_ATTR                       5: SOL_SOCKET
                62      COMPARE_OP                      2 (==)
                64      POP_JUMP_IF_FALSE               56 (to 112)
                66      LOAD_FAST                       9: cmsg_type
                68      LOAD_GLOBAL                     2: _socket
                70      LOAD_ATTR                       6: SCM_RIGHTS
                72      COMPARE_OP                      2 (==)
                74      POP_JUMP_IF_FALSE               56 (to 112)
                76      LOAD_FAST                       4: fds
                78      LOAD_METHOD                     7: frombytes
                80      LOAD_FAST                       10: cmsg_data
                82      LOAD_CONST                      2: None
                84      LOAD_GLOBAL                     8: len
                86      LOAD_FAST                       10: cmsg_data
                88      CALL_FUNCTION                   1
                90      LOAD_GLOBAL                     8: len
                92      LOAD_FAST                       10: cmsg_data
                94      CALL_FUNCTION                   1
                96      LOAD_FAST                       4: fds
                98      LOAD_ATTR                       4: itemsize
                100     BINARY_MODULO                   
                102     BINARY_SUBTRACT                 
                104     BUILD_SLICE                     2
                106     BINARY_SUBSCR                   
                108     CALL_METHOD                     1
                110     POP_TOP                         
                112     JUMP_ABSOLUTE                   23 (to 46)
                114     LOAD_FAST                       5: msg
                116     LOAD_GLOBAL                     9: list
                118     LOAD_FAST                       4: fds
                120     CALL_FUNCTION                   1
                122     LOAD_FAST                       3: flags
                124     LOAD_FAST                       7: addr
                126     BUILD_TUPLE                     4
                128     RETURN_VALUE                    
        'recv_fds'
        'share'
        [Code]
            File Name: socket.py
            Object Name: fromshare
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 5
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'socket'
            [Var Names]
                'info'
            [Free Vars]
            [Cell Vars]
            [Constants]
                ' fromshare(info) -> socket object\n\n        Create a socket object from the bytes object returned by\n        socket.share(pid).\n        '
                0
            [Disassembly]
                0       LOAD_GLOBAL                     0: socket
                2       LOAD_CONST                      1: 0
                4       LOAD_CONST                      1: 0
                6       LOAD_CONST                      1: 0
                8       LOAD_FAST                       0: info
                10      CALL_FUNCTION                   4
                12      RETURN_VALUE                    
        'fromshare'
        'socketpair'
        [Code]
            File Name: socket.py
            Object Name: socketpair
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 5
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'AF_UNIX'
                'NameError'
                'AF_INET'
                '_socket'
                'socketpair'
                'socket'
                'detach'
            [Var Names]
                'family'
                'type'
                'proto'
                'a'
                'b'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'socketpair([family[, type[, proto]]]) -> (socket object, socket object)\n\n        Create a pair of socket objects from the sockets returned by the platform\n        socketpair() function.\n        The arguments are the same as for socket() except the default family is\n        AF_UNIX if defined on the platform; otherwise, the default is AF_INET.\n        '
                None
            [Disassembly]
                0       LOAD_FAST                       0: family
                2       LOAD_CONST                      1: None
                4       IS_OP                           0 (is)
                6       POP_JUMP_IF_FALSE               20 (to 40)
                8       SETUP_FINALLY                   4 (to 18)
                10      LOAD_GLOBAL                     0: AF_UNIX
                12      STORE_FAST                      0: family
                14      POP_BLOCK                       
                16      JUMP_FORWARD                    11 (to 40)
                18      DUP_TOP                         
                20      LOAD_GLOBAL                     1: NameError
                22      JUMP_IF_NOT_EXC_MATCH           19 (to 38)
                24      POP_TOP                         
                26      POP_TOP                         
                28      POP_TOP                         
                30      LOAD_GLOBAL                     2: AF_INET
                32      STORE_FAST                      0: family
                34      POP_EXCEPT                      
                36      JUMP_FORWARD                    1 (to 40)
                38      RERAISE                         0
                40      LOAD_GLOBAL                     3: _socket
                42      LOAD_METHOD                     4: socketpair
                44      LOAD_FAST                       0: family
                46      LOAD_FAST                       1: type
                48      LOAD_FAST                       2: proto
                50      CALL_METHOD                     3
                52      UNPACK_SEQUENCE                 2
                54      STORE_FAST                      3: a
                56      STORE_FAST                      4: b
                58      LOAD_GLOBAL                     5: socket
                60      LOAD_FAST                       0: family
                62      LOAD_FAST                       1: type
                64      LOAD_FAST                       2: proto
                66      LOAD_FAST                       3: a
                68      LOAD_METHOD                     6: detach
                70      CALL_METHOD                     0
                72      CALL_FUNCTION                   4
                74      STORE_FAST                      3: a
                76      LOAD_GLOBAL                     5: socket
                78      LOAD_FAST                       0: family
                80      LOAD_FAST                       1: type
                82      LOAD_FAST                       2: proto
                84      LOAD_FAST                       4: b
                86      LOAD_METHOD                     6: detach
                88      CALL_METHOD                     0
                90      CALL_FUNCTION                   4
                92      STORE_FAST                      4: b
                94      LOAD_FAST                       3: a
                96      LOAD_FAST                       4: b
                98      BUILD_TUPLE                     2
                100     RETURN_VALUE                    
        [Code]
            File Name: socket.py
            Object Name: socketpair
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 10
            Stack Size: 9
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'AF_INET'
                '_LOCALHOST'
                'AF_INET6'
                '_LOCALHOST_V6'
                'ValueError'
                'SOCK_STREAM'
                'socket'
                'bind'
                'listen'
                'getsockname'
                'setblocking'
                'connect'
                'BlockingIOError'
                'InterruptedError'
                'accept'
                'close'
            [Var Names]
                'family'
                'type'
                'proto'
                'host'
                'lsock'
                'addr'
                'port'
                'csock'
                'ssock'
                '_'
            [Free Vars]
            [Cell Vars]
            [Constants]
                None
                'Only AF_INET and AF_INET6 socket address families are supported'
                'Only SOCK_STREAM socket type is supported'
                0
                'Only protocol zero is supported'
                2
                False
                True
            [Disassembly]
                0       LOAD_FAST                       0: family
                2       LOAD_GLOBAL                     0: AF_INET
                4       COMPARE_OP                      2 (==)
                6       POP_JUMP_IF_FALSE               7 (to 14)
                8       LOAD_GLOBAL                     1: _LOCALHOST
                10      STORE_FAST                      3: host
                12      JUMP_FORWARD                    11 (to 36)
                14      LOAD_FAST                       0: family
                16      LOAD_GLOBAL                     2: AF_INET6
                18      COMPARE_OP                      2 (==)
                20      POP_JUMP_IF_FALSE               14 (to 28)
                22      LOAD_GLOBAL                     3: _LOCALHOST_V6
                24      STORE_FAST                      3: host
                26      JUMP_FORWARD                    4 (to 36)
                28      LOAD_GLOBAL                     4: ValueError
                30      LOAD_CONST                      1: 'Only AF_INET and AF_INET6 socket address families are supported'
                32      CALL_FUNCTION                   1
                34      RAISE_VARARGS                   1
                36      LOAD_FAST                       1: type
                38      LOAD_GLOBAL                     5: SOCK_STREAM
                40      COMPARE_OP                      3 (!=)
                42      POP_JUMP_IF_FALSE               26 (to 52)
                44      LOAD_GLOBAL                     4: ValueError
                46      LOAD_CONST                      2: 'Only SOCK_STREAM socket type is supported'
                48      CALL_FUNCTION                   1
                50      RAISE_VARARGS                   1
                52      LOAD_FAST                       2: proto
                54      LOAD_CONST                      3: 0
                56      COMPARE_OP                      3 (!=)
                58      POP_JUMP_IF_FALSE               34 (to 68)
                60      LOAD_GLOBAL                     4: ValueError
                62      LOAD_CONST                      4: 'Only protocol zero is supported'
                64      CALL_FUNCTION                   1
                66      RAISE_VARARGS                   1
                68      LOAD_GLOBAL                     6: socket
                70      LOAD_FAST                       0: family
                72      LOAD_FAST                       1: type
                74      LOAD_FAST                       2: proto
                76      CALL_FUNCTION                   3
                78      STORE_FAST                      4: lsock
                80      SETUP_FINALLY                   84 (to 250)
                82      LOAD_FAST                       4: lsock
                84      LOAD_METHOD                     7: bind
                86      LOAD_FAST                       3: host
                88      LOAD_CONST                      3: 0
                90      BUILD_TUPLE                     2
                92      CALL_METHOD                     1
                94      POP_TOP                         
                96      LOAD_FAST                       4: lsock
                98      LOAD_METHOD                     8: listen
                100     CALL_METHOD                     0
                102     POP_TOP                         
                104     LOAD_FAST                       4: lsock
                106     LOAD_METHOD                     9: getsockname
                108     CALL_METHOD                     0
                110     LOAD_CONST                      0: None
                112     LOAD_CONST                      5: 2
                114     BUILD_SLICE                     2
                116     BINARY_SUBSCR                   
                118     UNPACK_SEQUENCE                 2
                120     STORE_FAST                      5: addr
                122     STORE_FAST                      6: port
                124     LOAD_GLOBAL                     6: socket
                126     LOAD_FAST                       0: family
                128     LOAD_FAST                       1: type
                130     LOAD_FAST                       2: proto
                132     CALL_FUNCTION                   3
                134     STORE_FAST                      7: csock
                136     SETUP_FINALLY                   39 (to 216)
                138     LOAD_FAST                       7: csock
                140     LOAD_METHOD                     10: setblocking
                142     LOAD_CONST                      6: False
                144     CALL_METHOD                     1
                146     POP_TOP                         
                148     SETUP_FINALLY                   9 (to 168)
                150     LOAD_FAST                       7: csock
                152     LOAD_METHOD                     11: connect
                154     LOAD_FAST                       5: addr
                156     LOAD_FAST                       6: port
                158     BUILD_TUPLE                     2
                160     CALL_METHOD                     1
                162     POP_TOP                         
                164     POP_BLOCK                       
                166     JUMP_FORWARD                    11 (to 190)
                168     DUP_TOP                         
                170     LOAD_GLOBAL                     12: BlockingIOError
                172     LOAD_GLOBAL                     13: InterruptedError
                174     BUILD_TUPLE                     2
                176     JUMP_IF_NOT_EXC_MATCH           94 (to 188)
                178     POP_TOP                         
                180     POP_TOP                         
                182     POP_TOP                         
                184     POP_EXCEPT                      
                186     JUMP_FORWARD                    1 (to 190)
                188     RERAISE                         0
                190     LOAD_FAST                       7: csock
                192     LOAD_METHOD                     10: setblocking
                194     LOAD_CONST                      7: True
                196     CALL_METHOD                     1
                198     POP_TOP                         
                200     LOAD_FAST                       4: lsock
                202     LOAD_METHOD                     14: accept
                204     CALL_METHOD                     0
                206     UNPACK_SEQUENCE                 2
                208     STORE_FAST                      8: ssock
                210     STORE_FAST                      9: _
                212     POP_BLOCK                       
                214     JUMP_FORWARD                    8 (to 232)
                216     POP_TOP                         
                218     POP_TOP                         
                220     POP_TOP                         
                222     LOAD_FAST                       7: csock
                224     LOAD_METHOD                     15: close
                226     CALL_METHOD                     0
                228     POP_TOP                         
                230     RAISE_VARARGS                   0
                232     POP_BLOCK                       
                234     LOAD_FAST                       4: lsock
                236     LOAD_METHOD                     15: close
                238     CALL_METHOD                     0
                240     POP_TOP                         
                242     LOAD_FAST                       8: ssock
                244     LOAD_FAST                       7: csock
                246     BUILD_TUPLE                     2
                248     RETURN_VALUE                    
                250     LOAD_FAST                       4: lsock
                252     LOAD_METHOD                     15: close
                254     CALL_METHOD                     0
                256     POP_TOP                         
                258     RERAISE                         0
        'socketpair([family[, type[, proto]]]) -> (socket object, socket object)\nCreate a pair of socket objects from the sockets returned by the platform\nsocketpair() function.\nThe arguments are the same as for socket() except the default family is AF_UNIX\nif defined on the platform; otherwise, the default is AF_INET.\n'
        [Code]
            File Name: socket.py
            Object Name: SocketIO
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 0
            Stack Size: 3
            Flags: 0x00000000
            [Names]
                '__name__'
                '__module__'
                '__qualname__'
                '__doc__'
                '__init__'
                'readinto'
                'write'
                'readable'
                'writable'
                'seekable'
                'fileno'
                'property'
                'name'
                'mode'
                'close'
                '__classcell__'
            [Var Names]
            [Free Vars]
            [Cell Vars]
                '__class__'
            [Constants]
                'SocketIO'
                'Raw I/O implementation for stream sockets.\n\n    This class supports the makefile() method on sockets.  It provides\n    the raw I/O interface on top of a socket object.\n    '
                [Code]
                    File Name: socket.py
                    Object Name: __init__
                    Arg Count: 3
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'ValueError'
                        'io'
                        'RawIOBase'
                        '__init__'
                        '_sock'
                        '_mode'
                        '_reading'
                        '_writing'
                        '_timeout_occurred'
                    [Var Names]
                        'self'
                        'sock'
                        'mode'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        (
                            'r'
                            'w'
                            'rw'
                            'rb'
                            'wb'
                            'rwb'
                        )
                        'invalid mode: %r'
                        'b'
                        'r'
                        'w'
                        False
                    [Disassembly]
                        0       LOAD_FAST                       2: mode
                        2       LOAD_CONST                      1: ('r', 'w', 'rw', 'rb', 'wb', 'rwb')
                        4       CONTAINS_OP                     1 (not in)
                        6       POP_JUMP_IF_FALSE               10 (to 20)
                        8       LOAD_GLOBAL                     0: ValueError
                        10      LOAD_CONST                      2: 'invalid mode: %r'
                        12      LOAD_FAST                       2: mode
                        14      BINARY_MODULO                   
                        16      CALL_FUNCTION                   1
                        18      RAISE_VARARGS                   1
                        20      LOAD_GLOBAL                     1: io
                        22      LOAD_ATTR                       2: RawIOBase
                        24      LOAD_METHOD                     3: __init__
                        26      LOAD_FAST                       0: self
                        28      CALL_METHOD                     1
                        30      POP_TOP                         
                        32      LOAD_FAST                       1: sock
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      4: _sock
                        38      LOAD_CONST                      3: 'b'
                        40      LOAD_FAST                       2: mode
                        42      CONTAINS_OP                     1 (not in)
                        44      POP_JUMP_IF_FALSE               27 (to 54)
                        46      LOAD_FAST                       2: mode
                        48      LOAD_CONST                      3: 'b'
                        50      INPLACE_ADD                     
                        52      STORE_FAST                      2: mode
                        54      LOAD_FAST                       2: mode
                        56      LOAD_FAST                       0: self
                        58      STORE_ATTR                      5: _mode
                        60      LOAD_CONST                      4: 'r'
                        62      LOAD_FAST                       2: mode
                        64      CONTAINS_OP                     0 (in)
                        66      LOAD_FAST                       0: self
                        68      STORE_ATTR                      6: _reading
                        70      LOAD_CONST                      5: 'w'
                        72      LOAD_FAST                       2: mode
                        74      CONTAINS_OP                     0 (in)
                        76      LOAD_FAST                       0: self
                        78      STORE_ATTR                      7: _writing
                        80      LOAD_CONST                      6: False
                        82      LOAD_FAST                       0: self
                        84      STORE_ATTR                      8: _timeout_occurred
                        86      LOAD_CONST                      0: None
                        88      RETURN_VALUE                    
                'SocketIO.__init__'
                [Code]
                    File Name: socket.py
                    Object Name: readinto
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_checkClosed'
                        '_checkReadable'
                        '_timeout_occurred'
                        'OSError'
                        '_sock'
                        'recv_into'
                        'timeout'
                        'error'
                        'errno'
                        '_blocking_errnos'
                    [Var Names]
                        'self'
                        'b'
                        'e'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n\n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        '
                        'cannot read from timed out object'
                        True
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _checkClosed
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     1: _checkReadable
                        12      CALL_METHOD                     0
                        14      POP_TOP                         
                        16      LOAD_FAST                       0: self
                        18      LOAD_ATTR                       2: _timeout_occurred
                        20      POP_JUMP_IF_FALSE               15 (to 30)
                        22      LOAD_GLOBAL                     3: OSError
                        24      LOAD_CONST                      1: 'cannot read from timed out object'
                        26      CALL_FUNCTION                   1
                        28      RAISE_VARARGS                   1
                        30      NOP                             
                        32      SETUP_FINALLY                   7 (to 48)
                        34      LOAD_FAST                       0: self
                        36      LOAD_ATTR                       4: _sock
                        38      LOAD_METHOD                     5: recv_into
                        40      LOAD_FAST                       1: b
                        42      CALL_METHOD                     1
                        44      POP_BLOCK                       
                        46      RETURN_VALUE                    
                        48      DUP_TOP                         
                        50      LOAD_GLOBAL                     6: timeout
                        52      JUMP_IF_NOT_EXC_MATCH           34 (to 68)
                        54      POP_TOP                         
                        56      POP_TOP                         
                        58      POP_TOP                         
                        60      LOAD_CONST                      2: True
                        62      LOAD_FAST                       0: self
                        64      STORE_ATTR                      2: _timeout_occurred
                        66      RAISE_VARARGS                   0
                        68      DUP_TOP                         
                        70      LOAD_GLOBAL                     7: error
                        72      JUMP_IF_NOT_EXC_MATCH           58 (to 116)
                        74      POP_TOP                         
                        76      STORE_FAST                      2: e
                        78      POP_TOP                         
                        80      SETUP_FINALLY                   13 (to 108)
                        82      LOAD_FAST                       2: e
                        84      LOAD_ATTR                       8: errno
                        86      LOAD_GLOBAL                     9: _blocking_errnos
                        88      CONTAINS_OP                     0 (in)
                        90      POP_JUMP_IF_FALSE               53 (to 106)
                        92      POP_BLOCK                       
                        94      POP_EXCEPT                      
                        96      LOAD_CONST                      3: None
                        98      STORE_FAST                      2: e
                        100     DELETE_FAST                     2: e
                        102     LOAD_CONST                      3: None
                        104     RETURN_VALUE                    
                        106     RAISE_VARARGS                   0
                        108     LOAD_CONST                      3: None
                        110     STORE_FAST                      2: e
                        112     DELETE_FAST                     2: e
                        114     RERAISE                         1
                        116     RERAISE                         0
                'SocketIO.readinto'
                [Code]
                    File Name: socket.py
                    Object Name: write
                    Arg Count: 2
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 3
                    Stack Size: 10
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_checkClosed'
                        '_checkWritable'
                        '_sock'
                        'send'
                        'error'
                        'errno'
                        '_blocking_errnos'
                    [Var Names]
                        'self'
                        'b'
                        'e'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Write the given bytes or bytearray object *b* to the socket\n        and return the number of bytes written.  This can be less than\n        len(b) if not all data could be written.  If the socket is\n        non-blocking and no bytes could be written None is returned.\n        '
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _checkClosed
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       0: self
                        10      LOAD_METHOD                     1: _checkWritable
                        12      CALL_METHOD                     0
                        14      POP_TOP                         
                        16      SETUP_FINALLY                   7 (to 32)
                        18      LOAD_FAST                       0: self
                        20      LOAD_ATTR                       2: _sock
                        22      LOAD_METHOD                     3: send
                        24      LOAD_FAST                       1: b
                        26      CALL_METHOD                     1
                        28      POP_BLOCK                       
                        30      RETURN_VALUE                    
                        32      DUP_TOP                         
                        34      LOAD_GLOBAL                     4: error
                        36      JUMP_IF_NOT_EXC_MATCH           40 (to 80)
                        38      POP_TOP                         
                        40      STORE_FAST                      2: e
                        42      POP_TOP                         
                        44      SETUP_FINALLY                   13 (to 72)
                        46      LOAD_FAST                       2: e
                        48      LOAD_ATTR                       5: errno
                        50      LOAD_GLOBAL                     6: _blocking_errnos
                        52      CONTAINS_OP                     0 (in)
                        54      POP_JUMP_IF_FALSE               35 (to 70)
                        56      POP_BLOCK                       
                        58      POP_EXCEPT                      
                        60      LOAD_CONST                      1: None
                        62      STORE_FAST                      2: e
                        64      DELETE_FAST                     2: e
                        66      LOAD_CONST                      1: None
                        68      RETURN_VALUE                    
                        70      RAISE_VARARGS                   0
                        72      LOAD_CONST                      1: None
                        74      STORE_FAST                      2: e
                        76      DELETE_FAST                     2: e
                        78      RERAISE                         1
                        80      RERAISE                         0
                'SocketIO.write'
                [Code]
                    File Name: socket.py
                    Object Name: readable
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'closed'
                        'ValueError'
                        '_reading'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'True if the SocketIO is open for reading.\n        '
                        'I/O operation on closed socket.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: closed
                        4       POP_JUMP_IF_FALSE               7 (to 14)
                        6       LOAD_GLOBAL                     1: ValueError
                        8       LOAD_CONST                      1: 'I/O operation on closed socket.'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _reading
                        18      RETURN_VALUE                    
                'SocketIO.readable'
                [Code]
                    File Name: socket.py
                    Object Name: writable
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'closed'
                        'ValueError'
                        '_writing'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'True if the SocketIO is open for writing.\n        '
                        'I/O operation on closed socket.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: closed
                        4       POP_JUMP_IF_FALSE               7 (to 14)
                        6       LOAD_GLOBAL                     1: ValueError
                        8       LOAD_CONST                      1: 'I/O operation on closed socket.'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_FAST                       0: self
                        16      LOAD_ATTR                       2: _writing
                        18      RETURN_VALUE                    
                'SocketIO.writable'
                [Code]
                    File Name: socket.py
                    Object Name: seekable
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)
                    [Names]
                        'closed'
                        'ValueError'
                        'super'
                        'seekable'
                    [Var Names]
                        'self'
                    [Free Vars]
                        '__class__'
                    [Cell Vars]
                    [Constants]
                        'True if the SocketIO is open for seeking.\n        '
                        'I/O operation on closed socket.'
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: closed
                        4       POP_JUMP_IF_FALSE               7 (to 14)
                        6       LOAD_GLOBAL                     1: ValueError
                        8       LOAD_CONST                      1: 'I/O operation on closed socket.'
                        10      CALL_FUNCTION                   1
                        12      RAISE_VARARGS                   1
                        14      LOAD_GLOBAL                     2: super
                        16      CALL_FUNCTION                   0
                        18      LOAD_METHOD                     3: seekable
                        20      CALL_METHOD                     0
                        22      RETURN_VALUE                    
                'SocketIO.seekable'
                [Code]
                    File Name: socket.py
                    Object Name: fileno
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_checkClosed'
                        '_sock'
                        'fileno'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        'Return the file descriptor of the underlying socket.\n        '
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_METHOD                     0: _checkClosed
                        4       CALL_METHOD                     0
                        6       POP_TOP                         
                        8       LOAD_FAST                       0: self
                        10      LOAD_ATTR                       1: _sock
                        12      LOAD_METHOD                     2: fileno
                        14      CALL_METHOD                     0
                        16      RETURN_VALUE                    
                'SocketIO.fileno'
                [Code]
                    File Name: socket.py
                    Object Name: name
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 2
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'closed'
                        'fileno'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                        -1
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: closed
                        4       POP_JUMP_IF_TRUE                7 (to 14)
                        6       LOAD_FAST                       0: self
                        8       LOAD_METHOD                     1: fileno
                        10      CALL_METHOD                     0
                        12      RETURN_VALUE                    
                        14      LOAD_CONST                      1: -1
                        16      RETURN_VALUE                    
                'SocketIO.name'
                [Code]
                    File Name: socket.py
                    Object Name: mode
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 1
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        '_mode'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: _mode
                        4       RETURN_VALUE                    
                'SocketIO.mode'
                [Code]
                    File Name: socket.py
                    Object Name: close
                    Arg Count: 1
                    Pos Only Arg Count: 0
                    KW Only Arg Count: 0
                    Locals: 1
                    Stack Size: 3
                    Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
                    [Names]
                        'closed'
                        'io'
                        'RawIOBase'
                        'close'
                        '_sock'
                        '_decref_socketios'
                    [Var Names]
                        'self'
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        "Close the SocketIO object.  This doesn't close the underlying\n        socket, except if all references to it have disappeared.\n        "
                        None
                    [Disassembly]
                        0       LOAD_FAST                       0: self
                        2       LOAD_ATTR                       0: closed
                        4       POP_JUMP_IF_FALSE               5 (to 10)
                        6       LOAD_CONST                      1: None
                        8       RETURN_VALUE                    
                        10      LOAD_GLOBAL                     1: io
                        12      LOAD_ATTR                       2: RawIOBase
                        14      LOAD_METHOD                     3: close
                        16      LOAD_FAST                       0: self
                        18      CALL_METHOD                     1
                        20      POP_TOP                         
                        22      LOAD_FAST                       0: self
                        24      LOAD_ATTR                       4: _sock
                        26      LOAD_METHOD                     5: _decref_socketios
                        28      CALL_METHOD                     0
                        30      POP_TOP                         
                        32      LOAD_CONST                      1: None
                        34      LOAD_FAST                       0: self
                        36      STORE_ATTR                      4: _sock
                        38      LOAD_CONST                      1: None
                        40      RETURN_VALUE                    
                'SocketIO.close'
            [Disassembly]
                0       LOAD_NAME                       0: __name__
                2       STORE_NAME                      1: __module__
                4       LOAD_CONST                      0: 'SocketIO'
                6       STORE_NAME                      2: __qualname__
                8       LOAD_CONST                      1: 'Raw I/O implementation for stream sockets.\n\n    This class supports the makefile() method on sockets.  It provides\n    the raw I/O interface on top of a socket object.\n    '
                10      STORE_NAME                      3: __doc__
                12      LOAD_CONST                      2: <CODE> __init__
                14      LOAD_CONST                      3: 'SocketIO.__init__'
                16      MAKE_FUNCTION                   0
                18      STORE_NAME                      4: __init__
                20      LOAD_CONST                      4: <CODE> readinto
                22      LOAD_CONST                      5: 'SocketIO.readinto'
                24      MAKE_FUNCTION                   0
                26      STORE_NAME                      5: readinto
                28      LOAD_CONST                      6: <CODE> write
                30      LOAD_CONST                      7: 'SocketIO.write'
                32      MAKE_FUNCTION                   0
                34      STORE_NAME                      6: write
                36      LOAD_CONST                      8: <CODE> readable
                38      LOAD_CONST                      9: 'SocketIO.readable'
                40      MAKE_FUNCTION                   0
                42      STORE_NAME                      7: readable
                44      LOAD_CONST                      10: <CODE> writable
                46      LOAD_CONST                      11: 'SocketIO.writable'
                48      MAKE_FUNCTION                   0
                50      STORE_NAME                      8: writable
                52      LOAD_CLOSURE                    0: __class__
                54      BUILD_TUPLE                     1
                56      LOAD_CONST                      12: <CODE> seekable
                58      LOAD_CONST                      13: 'SocketIO.seekable'
                60      MAKE_FUNCTION                   8
                62      STORE_NAME                      9: seekable
                64      LOAD_CONST                      14: <CODE> fileno
                66      LOAD_CONST                      15: 'SocketIO.fileno'
                68      MAKE_FUNCTION                   0
                70      STORE_NAME                      10: fileno
                72      LOAD_NAME                       11: property
                74      LOAD_CONST                      16: <CODE> name
                76      LOAD_CONST                      17: 'SocketIO.name'
                78      MAKE_FUNCTION                   0
                80      CALL_FUNCTION                   1
                82      STORE_NAME                      12: name
                84      LOAD_NAME                       11: property
                86      LOAD_CONST                      18: <CODE> mode
                88      LOAD_CONST                      19: 'SocketIO.mode'
                90      MAKE_FUNCTION                   0
                92      CALL_FUNCTION                   1
                94      STORE_NAME                      13: mode
                96      LOAD_CONST                      20: <CODE> close
                98      LOAD_CONST                      21: 'SocketIO.close'
                100     MAKE_FUNCTION                   0
                102     STORE_NAME                      14: close
                104     LOAD_CLOSURE                    0: __class__
                106     DUP_TOP                         
                108     STORE_NAME                      15: __classcell__
                110     RETURN_VALUE                    
        'SocketIO'
        ''
        [Code]
            File Name: socket.py
            Object Name: getfqdn
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 4
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'strip'
                'gethostname'
                'gethostbyaddr'
                'error'
                'insert'
            [Var Names]
                'name'
                'hostname'
                'aliases'
                'ipaddrs'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Get fully qualified domain name from name.\n\n    An empty argument is interpreted as meaning the local host.\n\n    First the hostname returned by gethostbyaddr() is checked, then\n    possibly existing aliases. In case no FQDN is available and `name`\n    was given, it is returned unchanged. If `name` was empty, '0.0.0.0' or '::',\n    hostname from gethostname() is returned.\n    "
                (
                    '0.0.0.0'
                    '::'
                )
                0
                '.'
            [Disassembly]
                0       LOAD_FAST                       0: name
                2       LOAD_METHOD                     0: strip
                4       CALL_METHOD                     0
                6       STORE_FAST                      0: name
                8       LOAD_FAST                       0: name
                10      POP_JUMP_IF_FALSE               10 (to 20)
                12      LOAD_FAST                       0: name
                14      LOAD_CONST                      1: ('0.0.0.0', '::')
                16      CONTAINS_OP                     0 (in)
                18      POP_JUMP_IF_FALSE               13 (to 26)
                20      LOAD_GLOBAL                     1: gethostname
                22      CALL_FUNCTION                   0
                24      STORE_FAST                      0: name
                26      SETUP_FINALLY                   9 (to 46)
                28      LOAD_GLOBAL                     2: gethostbyaddr
                30      LOAD_FAST                       0: name
                32      CALL_FUNCTION                   1
                34      UNPACK_SEQUENCE                 3
                36      STORE_FAST                      1: hostname
                38      STORE_FAST                      2: aliases
                40      STORE_FAST                      3: ipaddrs
                42      POP_BLOCK                       
                44      JUMP_FORWARD                    10 (to 66)
                46      DUP_TOP                         
                48      LOAD_GLOBAL                     3: error
                50      JUMP_IF_NOT_EXC_MATCH           32 (to 64)
                52      POP_TOP                         
                54      POP_TOP                         
                56      POP_TOP                         
                58      POP_EXCEPT                      
                60      LOAD_FAST                       0: name
                62      RETURN_VALUE                    
                64      RERAISE                         0
                66      LOAD_FAST                       2: aliases
                68      LOAD_METHOD                     4: insert
                70      LOAD_CONST                      2: 0
                72      LOAD_FAST                       1: hostname
                74      CALL_METHOD                     2
                76      POP_TOP                         
                78      LOAD_FAST                       2: aliases
                80      GET_ITER                        
                82      FOR_ITER                        9 (to 102)
                84      STORE_FAST                      0: name
                86      LOAD_CONST                      3: '.'
                88      LOAD_FAST                       0: name
                90      CONTAINS_OP                     0 (in)
                92      POP_JUMP_IF_FALSE               50 (to 100)
                94      POP_TOP                         
                96      LOAD_FAST                       0: name
                98      RETURN_VALUE                    
                100     JUMP_ABSOLUTE                   41 (to 82)
                102     LOAD_FAST                       1: hostname
                104     STORE_FAST                      0: name
                106     LOAD_FAST                       0: name
                108     RETURN_VALUE                    
        'getfqdn'
        [Code]
            File Name: socket.py
            Object Name: create_connection
            Arg Count: 3
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 14
            Stack Size: 11
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'getaddrinfo'
                'SOCK_STREAM'
                'socket'
                '_GLOBAL_DEFAULT_TIMEOUT'
                'settimeout'
                'bind'
                'connect'
                'error'
                'close'
            [Var Names]
                'address'
                'timeout'
                'source_address'
                'host'
                'port'
                'err'
                'res'
                'af'
                'socktype'
                'proto'
                'canonname'
                'sa'
                'sock'
                '_'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Connect to *address* and return the socket object.\n\n    Convenience function.  Connect to *address* (a 2-tuple ``(host,\n    port)``) and return the socket object.  Passing the optional\n    *timeout* parameter will set the timeout on the socket instance\n    before attempting to connect.  If no *timeout* is supplied, the\n    global default timeout setting returned by :func:`getdefaulttimeout`\n    is used.  If *source_address* is set it must be a tuple of (host, port)\n    for the socket to bind as a source address before making the connection.\n    A host of '' or port 0 tells the OS to use the default.\n    "
                None
                0
                'getaddrinfo returns an empty list'
            [Disassembly]
                0       LOAD_FAST                       0: address
                2       UNPACK_SEQUENCE                 2
                4       STORE_FAST                      3: host
                6       STORE_FAST                      4: port
                8       LOAD_CONST                      1: None
                10      STORE_FAST                      5: err
                12      LOAD_GLOBAL                     0: getaddrinfo
                14      LOAD_FAST                       3: host
                16      LOAD_FAST                       4: port
                18      LOAD_CONST                      2: 0
                20      LOAD_GLOBAL                     1: SOCK_STREAM
                22      CALL_FUNCTION                   4
                24      GET_ITER                        
                26      FOR_ITER                        73 (to 174)
                28      STORE_FAST                      6: res
                30      LOAD_FAST                       6: res
                32      UNPACK_SEQUENCE                 5
                34      STORE_FAST                      7: af
                36      STORE_FAST                      8: socktype
                38      STORE_FAST                      9: proto
                40      STORE_FAST                      10: canonname
                42      STORE_FAST                      11: sa
                44      LOAD_CONST                      1: None
                46      STORE_FAST                      12: sock
                48      SETUP_FINALLY                   34 (to 118)
                50      LOAD_GLOBAL                     2: socket
                52      LOAD_FAST                       7: af
                54      LOAD_FAST                       8: socktype
                56      LOAD_FAST                       9: proto
                58      CALL_FUNCTION                   3
                60      STORE_FAST                      12: sock
                62      LOAD_FAST                       1: timeout
                64      LOAD_GLOBAL                     3: _GLOBAL_DEFAULT_TIMEOUT
                66      IS_OP                           1 (is not)
                68      POP_JUMP_IF_FALSE               40 (to 80)
                70      LOAD_FAST                       12: sock
                72      LOAD_METHOD                     4: settimeout
                74      LOAD_FAST                       1: timeout
                76      CALL_METHOD                     1
                78      POP_TOP                         
                80      LOAD_FAST                       2: source_address
                82      POP_JUMP_IF_FALSE               47 (to 94)
                84      LOAD_FAST                       12: sock
                86      LOAD_METHOD                     5: bind
                88      LOAD_FAST                       2: source_address
                90      CALL_METHOD                     1
                92      POP_TOP                         
                94      LOAD_FAST                       12: sock
                96      LOAD_METHOD                     6: connect
                98      LOAD_FAST                       11: sa
                100     CALL_METHOD                     1
                102     POP_TOP                         
                104     LOAD_CONST                      1: None
                106     STORE_FAST                      5: err
                108     LOAD_FAST                       12: sock
                110     POP_BLOCK                       
                112     ROT_TWO                         
                114     POP_TOP                         
                116     RETURN_VALUE                    
                118     DUP_TOP                         
                120     LOAD_GLOBAL                     7: error
                122     JUMP_IF_NOT_EXC_MATCH           86 (to 172)
                124     POP_TOP                         
                126     STORE_FAST                      13: _
                128     POP_TOP                         
                130     SETUP_FINALLY                   16 (to 164)
                132     LOAD_FAST                       13: _
                134     STORE_FAST                      5: err
                136     LOAD_FAST                       12: sock
                138     LOAD_CONST                      1: None
                140     IS_OP                           1 (is not)
                142     POP_JUMP_IF_FALSE               76 (to 152)
                144     LOAD_FAST                       12: sock
                146     LOAD_METHOD                     8: close
                148     CALL_METHOD                     0
                150     POP_TOP                         
                152     POP_BLOCK                       
                154     POP_EXCEPT                      
                156     LOAD_CONST                      1: None
                158     STORE_FAST                      13: _
                160     DELETE_FAST                     13: _
                162     JUMP_ABSOLUTE                   13 (to 26)
                164     LOAD_CONST                      1: None
                166     STORE_FAST                      13: _
                168     DELETE_FAST                     13: _
                170     RERAISE                         1
                172     RERAISE                         0
                174     LOAD_FAST                       5: err
                176     LOAD_CONST                      1: None
                178     IS_OP                           1 (is not)
                180     POP_JUMP_IF_FALSE               97 (to 194)
                182     SETUP_FINALLY                   2 (to 188)
                184     LOAD_FAST                       5: err
                186     RAISE_VARARGS                   1
                188     LOAD_CONST                      1: None
                190     STORE_FAST                      5: err
                192     RERAISE                         0
                194     LOAD_GLOBAL                     7: error
                196     LOAD_CONST                      3: 'getaddrinfo returns an empty list'
                198     CALL_FUNCTION                   1
                200     RAISE_VARARGS                   1
        'create_connection'
        [Code]
            File Name: socket.py
            Object Name: has_dualstack_ipv6
            Arg Count: 0
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 1
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'has_ipv6'
                'hasattr'
                '_socket'
                'socket'
                'AF_INET6'
                'SOCK_STREAM'
                'setsockopt'
                'IPPROTO_IPV6'
                'IPV6_V6ONLY'
                'error'
            [Var Names]
                'sock'
            [Free Vars]
            [Cell Vars]
            [Constants]
                'Return True if the platform supports creating a SOCK_STREAM socket\n    which can handle both AF_INET and AF_INET6 (IPv4 / IPv6) connections.\n    '
                'IPPROTO_IPV6'
                'IPV6_V6ONLY'
                False
                0
                None
                True
            [Disassembly]
                0       LOAD_GLOBAL                     0: has_ipv6
                2       POP_JUMP_IF_FALSE               12 (to 24)
                4       LOAD_GLOBAL                     1: hasattr
                6       LOAD_GLOBAL                     2: _socket
                8       LOAD_CONST                      1: 'IPPROTO_IPV6'
                10      CALL_FUNCTION                   2
                12      POP_JUMP_IF_FALSE               12 (to 24)
                14      LOAD_GLOBAL                     1: hasattr
                16      LOAD_GLOBAL                     2: _socket
                18      LOAD_CONST                      2: 'IPV6_V6ONLY'
                20      CALL_FUNCTION                   2
                22      POP_JUMP_IF_TRUE                14 (to 28)
                24      LOAD_CONST                      3: False
                26      RETURN_VALUE                    
                28      SETUP_FINALLY                   34 (to 98)
                30      LOAD_GLOBAL                     3: socket
                32      LOAD_GLOBAL                     4: AF_INET6
                34      LOAD_GLOBAL                     5: SOCK_STREAM
                36      CALL_FUNCTION                   2
                38      SETUP_WITH                      18 (to 76)
                40      STORE_FAST                      0: sock
                42      LOAD_FAST                       0: sock
                44      LOAD_METHOD                     6: setsockopt
                46      LOAD_GLOBAL                     7: IPPROTO_IPV6
                48      LOAD_GLOBAL                     8: IPV6_V6ONLY
                50      LOAD_CONST                      4: 0
                52      CALL_METHOD                     3
                54      POP_TOP                         
                56      NOP                             
                58      POP_BLOCK                       
                60      LOAD_CONST                      5: None
                62      DUP_TOP                         
                64      DUP_TOP                         
                66      CALL_FUNCTION                   3
                68      POP_TOP                         
                70      POP_BLOCK                       
                72      LOAD_CONST                      6: True
                74      RETURN_VALUE                    
                76      WITH_EXCEPT_START               
                78      POP_JUMP_IF_TRUE                41 (to 82)
                80      RERAISE                         1
                82      POP_TOP                         
                84      POP_TOP                         
                86      POP_TOP                         
                88      POP_EXCEPT                      
                90      POP_TOP                         
                92      POP_BLOCK                       
                94      LOAD_CONST                      5: None
                96      RETURN_VALUE                    
                98      DUP_TOP                         
                100     LOAD_GLOBAL                     9: error
                102     JUMP_IF_NOT_EXC_MATCH           58 (to 116)
                104     POP_TOP                         
                106     POP_TOP                         
                108     POP_TOP                         
                110     POP_EXCEPT                      
                112     LOAD_CONST                      3: False
                114     RETURN_VALUE                    
                116     RERAISE                         0
        'has_dualstack_ipv6'
        False
        (
            'family'
            'backlog'
            'reuse_port'
            'dualstack_ipv6'
        )
        [Code]
            File Name: socket.py
            Object Name: create_server
            Arg Count: 1
            Pos Only Arg Count: 0
            KW Only Arg Count: 4
            Locals: 8
            Stack Size: 10
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                'hasattr'
                '_socket'
                'ValueError'
                'has_dualstack_ipv6'
                'AF_INET6'
                'socket'
                'SOCK_STREAM'
                'os'
                'name'
                'setsockopt'
                'SOL_SOCKET'
                'SO_REUSEADDR'
                'error'
                'SO_REUSEPORT'
                'has_ipv6'
                'IPPROTO_IPV6'
                'IPV6_V6ONLY'
                'bind'
                'strerror'
                'errno'
                'listen'
                'close'
            [Var Names]
                'address'
                'family'
                'backlog'
                'reuse_port'
                'dualstack_ipv6'
                'sock'
                'err'
                'msg'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Convenience function which creates a SOCK_STREAM type socket\n    bound to *address* (a 2-tuple (host, port)) and return the socket\n    object.\n\n    *family* should be either AF_INET or AF_INET6.\n    *backlog* is the queue size passed to socket.listen().\n    *reuse_port* dictates whether to use the SO_REUSEPORT socket option.\n    *dualstack_ipv6*: if true and the platform supports it, it will\n    create an AF_INET6 socket able to accept both IPv4 or IPv6\n    connections. When false it will explicitly disable this option on\n    platforms that enable it by default (e.g. Linux).\n\n    >>> with create_server(('', 8000)) as server:\n    ...     while True:\n    ...         conn, addr = server.accept()\n    ...         # handle new connection\n    "
                'SO_REUSEPORT'
                'SO_REUSEPORT not supported on this platform'
                'dualstack_ipv6 not supported on this platform'
                'dualstack_ipv6 requires AF_INET6 family'
                (
                    'nt'
                    'cygwin'
                )
                'SO_REUSEADDR'
                1
                0
                'IPV6_V6ONLY'
                'IPPROTO_IPV6'
                '%s (while attempting to bind on address %r)'
                None
            [Disassembly]
                0       LOAD_FAST                       3: reuse_port
                2       POP_JUMP_IF_FALSE               11 (to 22)
                4       LOAD_GLOBAL                     0: hasattr
                6       LOAD_GLOBAL                     1: _socket
                8       LOAD_CONST                      1: 'SO_REUSEPORT'
                10      CALL_FUNCTION                   2
                12      POP_JUMP_IF_TRUE                11 (to 22)
                14      LOAD_GLOBAL                     2: ValueError
                16      LOAD_CONST                      2: 'SO_REUSEPORT not supported on this platform'
                18      CALL_FUNCTION                   1
                20      RAISE_VARARGS                   1
                22      LOAD_FAST                       4: dualstack_ipv6
                24      POP_JUMP_IF_FALSE               28 (to 56)
                26      LOAD_GLOBAL                     3: has_dualstack_ipv6
                28      CALL_FUNCTION                   0
                30      POP_JUMP_IF_TRUE                20 (to 40)
                32      LOAD_GLOBAL                     2: ValueError
                34      LOAD_CONST                      3: 'dualstack_ipv6 not supported on this platform'
                36      CALL_FUNCTION                   1
                38      RAISE_VARARGS                   1
                40      LOAD_FAST                       1: family
                42      LOAD_GLOBAL                     4: AF_INET6
                44      COMPARE_OP                      3 (!=)
                46      POP_JUMP_IF_FALSE               28 (to 56)
                48      LOAD_GLOBAL                     2: ValueError
                50      LOAD_CONST                      4: 'dualstack_ipv6 requires AF_INET6 family'
                52      CALL_FUNCTION                   1
                54      RAISE_VARARGS                   1
                56      LOAD_GLOBAL                     5: socket
                58      LOAD_FAST                       1: family
                60      LOAD_GLOBAL                     6: SOCK_STREAM
                62      CALL_FUNCTION                   2
                64      STORE_FAST                      5: sock
                66      SETUP_FINALLY                   124 (to 316)
                68      LOAD_GLOBAL                     7: os
                70      LOAD_ATTR                       8: name
                72      LOAD_CONST                      5: ('nt', 'cygwin')
                74      CONTAINS_OP                     1 (not in)
                76      POP_JUMP_IF_FALSE               63 (to 126)
                78      LOAD_GLOBAL                     0: hasattr
                80      LOAD_GLOBAL                     1: _socket
                82      LOAD_CONST                      6: 'SO_REUSEADDR'
                84      CALL_FUNCTION                   2
                86      POP_JUMP_IF_FALSE               63 (to 126)
                88      SETUP_FINALLY                   9 (to 108)
                90      LOAD_FAST                       5: sock
                92      LOAD_METHOD                     9: setsockopt
                94      LOAD_GLOBAL                     10: SOL_SOCKET
                96      LOAD_GLOBAL                     11: SO_REUSEADDR
                98      LOAD_CONST                      7: 1
                100     CALL_METHOD                     3
                102     POP_TOP                         
                104     POP_BLOCK                       
                106     JUMP_FORWARD                    9 (to 126)
                108     DUP_TOP                         
                110     LOAD_GLOBAL                     12: error
                112     JUMP_IF_NOT_EXC_MATCH           62 (to 124)
                114     POP_TOP                         
                116     POP_TOP                         
                118     POP_TOP                         
                120     POP_EXCEPT                      
                122     JUMP_FORWARD                    1 (to 126)
                124     RERAISE                         0
                126     LOAD_FAST                       3: reuse_port
                128     POP_JUMP_IF_FALSE               72 (to 144)
                130     LOAD_FAST                       5: sock
                132     LOAD_METHOD                     9: setsockopt
                134     LOAD_GLOBAL                     10: SOL_SOCKET
                136     LOAD_GLOBAL                     13: SO_REUSEPORT
                138     LOAD_CONST                      7: 1
                140     CALL_METHOD                     3
                142     POP_TOP                         
                144     LOAD_GLOBAL                     14: has_ipv6
                146     POP_JUMP_IF_FALSE               105 (to 210)
                148     LOAD_FAST                       1: family
                150     LOAD_GLOBAL                     4: AF_INET6
                152     COMPARE_OP                      2 (==)
                154     POP_JUMP_IF_FALSE               105 (to 210)
                156     LOAD_FAST                       4: dualstack_ipv6
                158     POP_JUMP_IF_FALSE               88 (to 176)
                160     LOAD_FAST                       5: sock
                162     LOAD_METHOD                     9: setsockopt
                164     LOAD_GLOBAL                     15: IPPROTO_IPV6
                166     LOAD_GLOBAL                     16: IPV6_V6ONLY
                168     LOAD_CONST                      8: 0
                170     CALL_METHOD                     3
                172     POP_TOP                         
                174     JUMP_FORWARD                    17 (to 210)
                176     LOAD_GLOBAL                     0: hasattr
                178     LOAD_GLOBAL                     1: _socket
                180     LOAD_CONST                      9: 'IPV6_V6ONLY'
                182     CALL_FUNCTION                   2
                184     POP_JUMP_IF_FALSE               105 (to 210)
                186     LOAD_GLOBAL                     0: hasattr
                188     LOAD_GLOBAL                     1: _socket
                190     LOAD_CONST                      10: 'IPPROTO_IPV6'
                192     CALL_FUNCTION                   2
                194     POP_JUMP_IF_FALSE               105 (to 210)
                196     LOAD_FAST                       5: sock
                198     LOAD_METHOD                     9: setsockopt
                200     LOAD_GLOBAL                     15: IPPROTO_IPV6
                202     LOAD_GLOBAL                     16: IPV6_V6ONLY
                204     LOAD_CONST                      7: 1
                206     CALL_METHOD                     3
                208     POP_TOP                         
                210     SETUP_FINALLY                   7 (to 226)
                212     LOAD_FAST                       5: sock
                214     LOAD_METHOD                     17: bind
                216     LOAD_FAST                       0: address
                218     CALL_METHOD                     1
                220     POP_TOP                         
                222     POP_BLOCK                       
                224     JUMP_FORWARD                    26 (to 278)
                226     DUP_TOP                         
                228     LOAD_GLOBAL                     12: error
                230     JUMP_IF_NOT_EXC_MATCH           138 (to 276)
                232     POP_TOP                         
                234     STORE_FAST                      6: err
                236     POP_TOP                         
                238     SETUP_FINALLY                   14 (to 268)
                240     LOAD_CONST                      11: '%s (while attempting to bind on address %r)'
                242     LOAD_FAST                       6: err
                244     LOAD_ATTR                       18: strerror
                246     LOAD_FAST                       0: address
                248     BUILD_TUPLE                     2
                250     BINARY_MODULO                   
                252     STORE_FAST                      7: msg
                254     LOAD_GLOBAL                     12: error
                256     LOAD_FAST                       6: err
                258     LOAD_ATTR                       19: errno
                260     LOAD_FAST                       7: msg
                262     CALL_FUNCTION                   2
                264     LOAD_CONST                      12: None
                266     RAISE_VARARGS                   2
                268     LOAD_CONST                      12: None
                270     STORE_FAST                      6: err
                272     DELETE_FAST                     6: err
                274     RERAISE                         1
                276     RERAISE                         0
                278     LOAD_FAST                       2: backlog
                280     LOAD_CONST                      12: None
                282     IS_OP                           0 (is)
                284     POP_JUMP_IF_FALSE               150 (to 300)
                286     LOAD_FAST                       5: sock
                288     LOAD_METHOD                     20: listen
                290     CALL_METHOD                     0
                292     POP_TOP                         
                294     LOAD_FAST                       5: sock
                296     POP_BLOCK                       
                298     RETURN_VALUE                    
                300     LOAD_FAST                       5: sock
                302     LOAD_METHOD                     20: listen
                304     LOAD_FAST                       2: backlog
                306     CALL_METHOD                     1
                308     POP_TOP                         
                310     LOAD_FAST                       5: sock
                312     POP_BLOCK                       
                314     RETURN_VALUE                    
                316     DUP_TOP                         
                318     LOAD_GLOBAL                     12: error
                320     JUMP_IF_NOT_EXC_MATCH           169 (to 338)
                322     POP_TOP                         
                324     POP_TOP                         
                326     POP_TOP                         
                328     LOAD_FAST                       5: sock
                330     LOAD_METHOD                     21: close
                332     CALL_METHOD                     0
                334     POP_TOP                         
                336     RAISE_VARARGS                   0
                338     RERAISE                         0
        'create_server'
        [Code]
            File Name: socket.py
            Object Name: getaddrinfo
            Arg Count: 6
            Pos Only Arg Count: 0
            KW Only Arg Count: 0
            Locals: 12
            Stack Size: 8
            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)
            [Names]
                '_socket'
                'getaddrinfo'
                'append'
                '_intenum_converter'
                'AddressFamily'
                'SocketKind'
            [Var Names]
                'host'
                'port'
                'family'
                'type'
                'proto'
                'flags'
                'addrlist'
                'res'
                'af'
                'socktype'
                'canonname'
                'sa'
            [Free Vars]
            [Cell Vars]
            [Constants]
                "Resolve host and port into list of address info entries.\n\n    Translate the host/port argument into a sequence of 5-tuples that contain\n    all the necessary arguments for creating a socket connected to that service.\n    host is a domain name, a string representation of an IPv4/v6 address or\n    None. port is a string service name such as 'http', a numeric port number or\n    None. By passing None as the value of host and port, you can pass NULL to\n    the underlying C API.\n\n    The family, type and proto arguments can be optionally specified in order to\n    narrow the list of addresses returned. Passing zero as a value for each of\n    these arguments selects the full range of results.\n    "
            [Disassembly]
                0       BUILD_LIST                      0
                2       STORE_FAST                      6: addrlist
                4       LOAD_GLOBAL                     0: _socket
                6       LOAD_METHOD                     1: getaddrinfo
                8       LOAD_FAST                       0: host
                10      LOAD_FAST                       1: port
                12      LOAD_FAST                       2: family
                14      LOAD_FAST                       3: type
                16      LOAD_FAST                       4: proto
                18      LOAD_FAST                       5: flags
                20      CALL_METHOD                     6
                22      GET_ITER                        
                24      FOR_ITER                        25 (to 76)
                26      STORE_FAST                      7: res
                28      LOAD_FAST                       7: res
                30      UNPACK_SEQUENCE                 5
                32      STORE_FAST                      8: af
                34      STORE_FAST                      9: socktype
                36      STORE_FAST                      4: proto
                38      STORE_FAST                      10: canonname
                40      STORE_FAST                      11: sa
                42      LOAD_FAST                       6: addrlist
                44      LOAD_METHOD                     2: append
                46      LOAD_GLOBAL                     3: _intenum_converter
                48      LOAD_FAST                       8: af
                50      LOAD_GLOBAL                     4: AddressFamily
                52      CALL_FUNCTION                   2
                54      LOAD_GLOBAL                     3: _intenum_converter
                56      LOAD_FAST                       9: socktype
                58      LOAD_GLOBAL                     5: SocketKind
                60      CALL_FUNCTION                   2
                62      LOAD_FAST                       4: proto
                64      LOAD_FAST                       10: canonname
                66      LOAD_FAST                       11: sa
                68      BUILD_TUPLE                     5
                70      CALL_METHOD                     1
                72      POP_TOP                         
                74      JUMP_ABSOLUTE                   12 (to 24)
                76      LOAD_FAST                       6: addrlist
                78      RETURN_VALUE                    
        'getaddrinfo'
        (
            0
        )
        (
            0
            None
        )
        (
            ''
        )
        (
            0
            0
            0
            0
        )
    [Disassembly]
        0       LOAD_CONST                      0: "This module provides socket operations and some related functions.\nOn Unix, it supports IP (Internet Protocol) and Unix domain sockets.\nOn other systems, it only supports IP. Functions specific for a\nsocket are available as methods of the socket object.\n\nFunctions:\n\nsocket() -- create a new socket object\nsocketpair() -- create a pair of new socket objects [*]\nfromfd() -- create a socket object from an open file descriptor [*]\nsend_fds() -- Send file descriptor to the socket.\nrecv_fds() -- Recieve file descriptors from the socket.\nfromshare() -- create a socket object from data received from socket.share() [*]\ngethostname() -- return the current hostname\ngethostbyname() -- map a hostname to its IP number\ngethostbyaddr() -- map an IP number or hostname to DNS info\ngetservbyname() -- map a service name and a protocol name to a port number\ngetprotobyname() -- map a protocol name (e.g. 'tcp') to a number\nntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order\nhtons(), htonl() -- convert 16, 32 bit int from host to network byte order\ninet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format\ninet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)\nsocket.getdefaulttimeout() -- get the default timeout value\nsocket.setdefaulttimeout() -- set the default timeout value\ncreate_connection() -- connects to an address, with an optional timeout and\n                       optional source address.\n\n [*] not available on all platforms!\n\nSpecial objects:\n\nSocketType -- type object for socket objects\nerror -- exception raised for I/O errors\nhas_ipv6 -- boolean value indicating if IPv6 is supported\n\nIntEnum constants:\n\nAF_INET, AF_UNIX -- socket domains (first argument to socket() call)\nSOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)\n\nInteger constants:\n\nMany other constants may be defined; these may be used in calls to\nthe setsockopt() and getsockopt() methods.\n"
        2       STORE_NAME                      0: __doc__
        4       LOAD_CONST                      1: 0
        6       LOAD_CONST                      2: None
        8       IMPORT_NAME                     1: _socket
        10      STORE_NAME                      1: _socket
        12      LOAD_CONST                      1: 0
        14      LOAD_CONST                      3: ('*',)
        16      IMPORT_NAME                     1: _socket
        18      IMPORT_STAR                     
        20      LOAD_CONST                      1: 0
        22      LOAD_CONST                      2: None
        24      IMPORT_NAME                     2: os
        26      STORE_NAME                      2: os
        28      LOAD_CONST                      1: 0
        30      LOAD_CONST                      2: None
        32      IMPORT_NAME                     3: sys
        34      STORE_NAME                      3: sys
        36      LOAD_CONST                      1: 0
        38      LOAD_CONST                      2: None
        40      IMPORT_NAME                     4: io
        42      STORE_NAME                      4: io
        44      LOAD_CONST                      1: 0
        46      LOAD_CONST                      2: None
        48      IMPORT_NAME                     5: selectors
        50      STORE_NAME                      5: selectors
        52      LOAD_CONST                      1: 0
        54      LOAD_CONST                      4: ('IntEnum', 'IntFlag')
        56      IMPORT_NAME                     6: enum
        58      IMPORT_FROM                     7: IntEnum
        60      STORE_NAME                      7: IntEnum
        62      IMPORT_FROM                     8: IntFlag
        64      STORE_NAME                      8: IntFlag
        66      POP_TOP                         
        68      SETUP_FINALLY                   6 (to 82)
        70      LOAD_CONST                      1: 0
        72      LOAD_CONST                      2: None
        74      IMPORT_NAME                     9: errno
        76      STORE_NAME                      9: errno
        78      POP_BLOCK                       
        80      JUMP_FORWARD                    11 (to 104)
        82      DUP_TOP                         
        84      LOAD_NAME                       10: ImportError
        86      JUMP_IF_NOT_EXC_MATCH           51 (to 102)
        88      POP_TOP                         
        90      POP_TOP                         
        92      POP_TOP                         
        94      LOAD_CONST                      2: None
        96      STORE_NAME                      9: errno
        98      POP_EXCEPT                      
        100     JUMP_FORWARD                    1 (to 104)
        102     RERAISE                         0
        104     LOAD_NAME                       11: getattr
        106     LOAD_NAME                       9: errno
        108     LOAD_CONST                      5: 'EBADF'
        110     LOAD_CONST                      6: 9
        112     CALL_FUNCTION                   3
        114     STORE_NAME                      12: EBADF
        116     LOAD_NAME                       11: getattr
        118     LOAD_NAME                       9: errno
        120     LOAD_CONST                      7: 'EAGAIN'
        122     LOAD_CONST                      8: 11
        124     CALL_FUNCTION                   3
        126     STORE_NAME                      13: EAGAIN
        128     LOAD_NAME                       11: getattr
        130     LOAD_NAME                       9: errno
        132     LOAD_CONST                      9: 'EWOULDBLOCK'
        134     LOAD_CONST                      8: 11
        136     CALL_FUNCTION                   3
        138     STORE_NAME                      14: EWOULDBLOCK
        140     BUILD_LIST                      0
        142     LOAD_CONST                      10: ('fromfd', 'getfqdn', 'create_connection', 'create_server', 'has_dualstack_ipv6', 'AddressFamily', 'SocketKind')
        144     LIST_EXTEND                     1
        146     STORE_NAME                      15: __all__
        148     LOAD_NAME                       15: __all__
        150     LOAD_METHOD                     16: extend
        152     LOAD_NAME                       2: os
        154     LOAD_METHOD                     17: _get_exports_list
        156     LOAD_NAME                       1: _socket
        158     CALL_METHOD                     1
        160     CALL_METHOD                     1
        162     POP_TOP                         
        164     LOAD_NAME                       7: IntEnum
        166     LOAD_METHOD                     18: _convert_
        168     LOAD_CONST                      11: 'AddressFamily'
        170     LOAD_NAME                       19: __name__
        172     LOAD_CONST                      12: <CODE> <lambda>
        174     LOAD_CONST                      13: '<lambda>'
        176     MAKE_FUNCTION                   0
        178     CALL_METHOD                     3
        180     POP_TOP                         
        182     LOAD_NAME                       7: IntEnum
        184     LOAD_METHOD                     18: _convert_
        186     LOAD_CONST                      14: 'SocketKind'
        188     LOAD_NAME                       19: __name__
        190     LOAD_CONST                      15: <CODE> <lambda>
        192     LOAD_CONST                      13: '<lambda>'
        194     MAKE_FUNCTION                   0
        196     CALL_METHOD                     3
        198     POP_TOP                         
        200     LOAD_NAME                       8: IntFlag
        202     LOAD_METHOD                     18: _convert_
        204     LOAD_CONST                      16: 'MsgFlag'
        206     LOAD_NAME                       19: __name__
        208     LOAD_CONST                      17: <CODE> <lambda>
        210     LOAD_CONST                      13: '<lambda>'
        212     MAKE_FUNCTION                   0
        214     CALL_METHOD                     3
        216     POP_TOP                         
        218     LOAD_NAME                       8: IntFlag
        220     LOAD_METHOD                     18: _convert_
        222     LOAD_CONST                      18: 'AddressInfo'
        224     LOAD_NAME                       19: __name__
        226     LOAD_CONST                      19: <CODE> <lambda>
        228     LOAD_CONST                      13: '<lambda>'
        230     MAKE_FUNCTION                   0
        232     CALL_METHOD                     3
        234     POP_TOP                         
        236     LOAD_CONST                      20: '127.0.0.1'
        238     STORE_NAME                      20: _LOCALHOST
        240     LOAD_CONST                      21: '::1'
        242     STORE_NAME                      21: _LOCALHOST_V6
        244     LOAD_CONST                      22: <CODE> _intenum_converter
        246     LOAD_CONST                      23: '_intenum_converter'
        248     MAKE_FUNCTION                   0
        250     STORE_NAME                      22: _intenum_converter
        252     LOAD_NAME                       3: sys
        254     LOAD_ATTR                       23: platform
        256     LOAD_METHOD                     24: lower
        258     CALL_METHOD                     0
        260     LOAD_METHOD                     25: startswith
        262     LOAD_CONST                      24: 'win'
        264     CALL_METHOD                     1
        266     POP_JUMP_IF_FALSE               522 (to 1044)
        270     BUILD_MAP                       0
        272     STORE_NAME                      26: errorTab
        274     LOAD_CONST                      25: 'Specified event object handle is invalid.'
        276     LOAD_NAME                       26: errorTab
        278     LOAD_CONST                      26: 6
        280     STORE_SUBSCR                    
        282     LOAD_CONST                      27: 'Insufficient memory available.'
        284     LOAD_NAME                       26: errorTab
        286     LOAD_CONST                      28: 8
        288     STORE_SUBSCR                    
        290     LOAD_CONST                      29: 'One or more parameters are invalid.'
        292     LOAD_NAME                       26: errorTab
        294     LOAD_CONST                      30: 87
        296     STORE_SUBSCR                    
        298     LOAD_CONST                      31: 'Overlapped operation aborted.'
        300     LOAD_NAME                       26: errorTab
        302     LOAD_CONST                      32: 995
        304     STORE_SUBSCR                    
        306     LOAD_CONST                      33: 'Overlapped I/O event object not in signaled state.'
        308     LOAD_NAME                       26: errorTab
        310     LOAD_CONST                      34: 996
        312     STORE_SUBSCR                    
        314     LOAD_CONST                      35: 'Overlapped operation will complete later.'
        316     LOAD_NAME                       26: errorTab
        318     LOAD_CONST                      36: 997
        320     STORE_SUBSCR                    
        322     LOAD_CONST                      37: 'The operation was interrupted.'
        324     LOAD_NAME                       26: errorTab
        326     LOAD_CONST                      38: 10004
        328     STORE_SUBSCR                    
        330     LOAD_CONST                      39: 'A bad file handle was passed.'
        332     LOAD_NAME                       26: errorTab
        334     LOAD_CONST                      40: 10009
        336     STORE_SUBSCR                    
        338     LOAD_CONST                      41: 'Permission denied.'
        340     LOAD_NAME                       26: errorTab
        342     LOAD_CONST                      42: 10013
        344     STORE_SUBSCR                    
        346     LOAD_CONST                      43: 'A fault occurred on the network??'
        348     LOAD_NAME                       26: errorTab
        350     LOAD_CONST                      44: 10014
        352     STORE_SUBSCR                    
        354     LOAD_CONST                      45: 'An invalid operation was attempted.'
        356     LOAD_NAME                       26: errorTab
        358     LOAD_CONST                      46: 10022
        360     STORE_SUBSCR                    
        362     LOAD_CONST                      47: 'Too many open files.'
        364     LOAD_NAME                       26: errorTab
        366     LOAD_CONST                      48: 10024
        368     STORE_SUBSCR                    
        370     LOAD_CONST                      49: 'The socket operation would block'
        372     LOAD_NAME                       26: errorTab
        374     LOAD_CONST                      50: 10035
        376     STORE_SUBSCR                    
        378     LOAD_CONST                      51: 'A blocking operation is already in progress.'
        380     LOAD_NAME                       26: errorTab
        382     LOAD_CONST                      52: 10036
        384     STORE_SUBSCR                    
        386     LOAD_CONST                      53: 'Operation already in progress.'
        388     LOAD_NAME                       26: errorTab
        390     LOAD_CONST                      54: 10037
        392     STORE_SUBSCR                    
        394     LOAD_CONST                      55: 'Socket operation on nonsocket.'
        396     LOAD_NAME                       26: errorTab
        398     LOAD_CONST                      56: 10038
        400     STORE_SUBSCR                    
        402     LOAD_CONST                      57: 'Destination address required.'
        404     LOAD_NAME                       26: errorTab
        406     LOAD_CONST                      58: 10039
        408     STORE_SUBSCR                    
        410     LOAD_CONST                      59: 'Message too long.'
        412     LOAD_NAME                       26: errorTab
        414     LOAD_CONST                      60: 10040
        416     STORE_SUBSCR                    
        418     LOAD_CONST                      61: 'Protocol wrong type for socket.'
        420     LOAD_NAME                       26: errorTab
        422     LOAD_CONST                      62: 10041
        424     STORE_SUBSCR                    
        426     LOAD_CONST                      63: 'Bad protocol option.'
        428     LOAD_NAME                       26: errorTab
        430     LOAD_CONST                      64: 10042
        432     STORE_SUBSCR                    
        434     LOAD_CONST                      65: 'Protocol not supported.'
        436     LOAD_NAME                       26: errorTab
        438     LOAD_CONST                      66: 10043
        440     STORE_SUBSCR                    
        442     LOAD_CONST                      67: 'Socket type not supported.'
        444     LOAD_NAME                       26: errorTab
        446     LOAD_CONST                      68: 10044
        448     STORE_SUBSCR                    
        450     LOAD_CONST                      69: 'Operation not supported.'
        452     LOAD_NAME                       26: errorTab
        454     LOAD_CONST                      70: 10045
        456     STORE_SUBSCR                    
        458     LOAD_CONST                      71: 'Protocol family not supported.'
        460     LOAD_NAME                       26: errorTab
        462     LOAD_CONST                      72: 10046
        464     STORE_SUBSCR                    
        466     LOAD_CONST                      73: 'Address family not supported by protocol family.'
        468     LOAD_NAME                       26: errorTab
        470     LOAD_CONST                      74: 10047
        472     STORE_SUBSCR                    
        474     LOAD_CONST                      75: 'The network address is in use.'
        476     LOAD_NAME                       26: errorTab
        478     LOAD_CONST                      76: 10048
        480     STORE_SUBSCR                    
        482     LOAD_CONST                      77: 'Cannot assign requested address.'
        484     LOAD_NAME                       26: errorTab
        486     LOAD_CONST                      78: 10049
        488     STORE_SUBSCR                    
        490     LOAD_CONST                      79: 'Network is down.'
        492     LOAD_NAME                       26: errorTab
        494     LOAD_CONST                      80: 10050
        496     STORE_SUBSCR                    
        498     LOAD_CONST                      81: 'Network is unreachable.'
        500     LOAD_NAME                       26: errorTab
        502     LOAD_CONST                      82: 10051
        504     STORE_SUBSCR                    
        506     LOAD_CONST                      83: 'Network dropped connection on reset.'
        508     LOAD_NAME                       26: errorTab
        510     LOAD_CONST                      84: 10052
        512     STORE_SUBSCR                    
        514     LOAD_CONST                      85: 'Software caused connection abort.'
        516     LOAD_NAME                       26: errorTab
        518     LOAD_CONST                      86: 10053
        520     STORE_SUBSCR                    
        522     LOAD_CONST                      87: 'The connection has been reset.'
        524     LOAD_NAME                       26: errorTab
        526     LOAD_CONST                      88: 10054
        528     STORE_SUBSCR                    
        530     LOAD_CONST                      89: 'No buffer space available.'
        532     LOAD_NAME                       26: errorTab
        534     LOAD_CONST                      90: 10055
        536     STORE_SUBSCR                    
        538     LOAD_CONST                      91: 'Socket is already connected.'
        540     LOAD_NAME                       26: errorTab
        542     LOAD_CONST                      92: 10056
        544     STORE_SUBSCR                    
        546     LOAD_CONST                      93: 'Socket is not connected.'
        548     LOAD_NAME                       26: errorTab
        550     LOAD_CONST                      94: 10057
        552     STORE_SUBSCR                    
        554     LOAD_CONST                      95: 'The network has been shut down.'
        556     LOAD_NAME                       26: errorTab
        558     LOAD_CONST                      96: 10058
        560     STORE_SUBSCR                    
        562     LOAD_CONST                      97: 'Too many references.'
        564     LOAD_NAME                       26: errorTab
        566     LOAD_CONST                      98: 10059
        568     STORE_SUBSCR                    
        570     LOAD_CONST                      99: 'The operation timed out.'
        572     LOAD_NAME                       26: errorTab
        574     LOAD_CONST                      100: 10060
        576     STORE_SUBSCR                    
        578     LOAD_CONST                      101: 'Connection refused.'
        580     LOAD_NAME                       26: errorTab
        582     LOAD_CONST                      102: 10061
        584     STORE_SUBSCR                    
        586     LOAD_CONST                      103: 'Cannot translate name.'
        588     LOAD_NAME                       26: errorTab
        590     LOAD_CONST                      104: 10062
        592     STORE_SUBSCR                    
        594     LOAD_CONST                      105: 'The name is too long.'
        596     LOAD_NAME                       26: errorTab
        598     LOAD_CONST                      106: 10063
        600     STORE_SUBSCR                    
        602     LOAD_CONST                      107: 'The host is down.'
        604     LOAD_NAME                       26: errorTab
        606     LOAD_CONST                      108: 10064
        608     STORE_SUBSCR                    
        610     LOAD_CONST                      109: 'The host is unreachable.'
        612     LOAD_NAME                       26: errorTab
        614     LOAD_CONST                      110: 10065
        616     STORE_SUBSCR                    
        618     LOAD_CONST                      111: 'Directory not empty.'
        620     LOAD_NAME                       26: errorTab
        622     LOAD_CONST                      112: 10066
        624     STORE_SUBSCR                    
        626     LOAD_CONST                      113: 'Too many processes.'
        628     LOAD_NAME                       26: errorTab
        630     LOAD_CONST                      114: 10067
        632     STORE_SUBSCR                    
        634     LOAD_CONST                      115: 'User quota exceeded.'
        636     LOAD_NAME                       26: errorTab
        638     LOAD_CONST                      116: 10068
        640     STORE_SUBSCR                    
        642     LOAD_CONST                      117: 'Disk quota exceeded.'
        644     LOAD_NAME                       26: errorTab
        646     LOAD_CONST                      118: 10069
        648     STORE_SUBSCR                    
        650     LOAD_CONST                      119: 'Stale file handle reference.'
        652     LOAD_NAME                       26: errorTab
        654     LOAD_CONST                      120: 10070
        656     STORE_SUBSCR                    
        658     LOAD_CONST                      121: 'Item is remote.'
        660     LOAD_NAME                       26: errorTab
        662     LOAD_CONST                      122: 10071
        664     STORE_SUBSCR                    
        666     LOAD_CONST                      123: 'Network subsystem is unavailable.'
        668     LOAD_NAME                       26: errorTab
        670     LOAD_CONST                      124: 10091
        672     STORE_SUBSCR                    
        674     LOAD_CONST                      125: 'Winsock.dll version out of range.'
        676     LOAD_NAME                       26: errorTab
        678     LOAD_CONST                      126: 10092
        680     STORE_SUBSCR                    
        682     LOAD_CONST                      127: 'Successful WSAStartup not yet performed.'
        684     LOAD_NAME                       26: errorTab
        686     LOAD_CONST                      128: 10093
        688     STORE_SUBSCR                    
        690     LOAD_CONST                      129: 'Graceful shutdown in progress.'
        692     LOAD_NAME                       26: errorTab
        694     LOAD_CONST                      130: 10101
        696     STORE_SUBSCR                    
        698     LOAD_CONST                      131: 'No more results from WSALookupServiceNext.'
        700     LOAD_NAME                       26: errorTab
        702     LOAD_CONST                      132: 10102
        704     STORE_SUBSCR                    
        706     LOAD_CONST                      133: 'Call has been canceled.'
        708     LOAD_NAME                       26: errorTab
        710     LOAD_CONST                      134: 10103
        712     STORE_SUBSCR                    
        714     LOAD_CONST                      135: 'Procedure call table is invalid.'
        716     LOAD_NAME                       26: errorTab
        718     LOAD_CONST                      136: 10104
        720     STORE_SUBSCR                    
        722     LOAD_CONST                      137: 'Service provider is invalid.'
        724     LOAD_NAME                       26: errorTab
        726     LOAD_CONST                      138: 10105
        728     STORE_SUBSCR                    
        730     LOAD_CONST                      139: 'Service provider failed to initialize.'
        732     LOAD_NAME                       26: errorTab
        734     LOAD_CONST                      140: 10106
        736     STORE_SUBSCR                    
        738     LOAD_CONST                      141: 'System call failure.'
        740     LOAD_NAME                       26: errorTab
        742     LOAD_CONST                      142: 10107
        744     STORE_SUBSCR                    
        746     LOAD_CONST                      143: 'Service not found.'
        748     LOAD_NAME                       26: errorTab
        750     LOAD_CONST                      144: 10108
        752     STORE_SUBSCR                    
        754     LOAD_CONST                      145: 'Class type not found.'
        756     LOAD_NAME                       26: errorTab
        758     LOAD_CONST                      146: 10109
        760     STORE_SUBSCR                    
        762     LOAD_CONST                      131: 'No more results from WSALookupServiceNext.'
        764     LOAD_NAME                       26: errorTab
        766     LOAD_CONST                      147: 10110
        768     STORE_SUBSCR                    
        770     LOAD_CONST                      148: 'Call was canceled.'
        772     LOAD_NAME                       26: errorTab
        774     LOAD_CONST                      149: 10111
        776     STORE_SUBSCR                    
        778     LOAD_CONST                      150: 'Database query was refused.'
        780     LOAD_NAME                       26: errorTab
        782     LOAD_CONST                      151: 10112
        784     STORE_SUBSCR                    
        786     LOAD_CONST                      152: 'Host not found.'
        788     LOAD_NAME                       26: errorTab
        790     LOAD_CONST                      153: 11001
        792     STORE_SUBSCR                    
        794     LOAD_CONST                      154: 'Nonauthoritative host not found.'
        796     LOAD_NAME                       26: errorTab
        798     LOAD_CONST                      155: 11002
        800     STORE_SUBSCR                    
        802     LOAD_CONST                      156: 'This is a nonrecoverable error.'
        804     LOAD_NAME                       26: errorTab
        806     LOAD_CONST                      157: 11003
        808     STORE_SUBSCR                    
        810     LOAD_CONST                      158: 'Valid name, no data record requested type.'
        812     LOAD_NAME                       26: errorTab
        814     LOAD_CONST                      159: 11004
        816     STORE_SUBSCR                    
        818     LOAD_CONST                      160: 'QoS receivers.'
        820     LOAD_NAME                       26: errorTab
        822     LOAD_CONST                      161: 11005
        824     STORE_SUBSCR                    
        826     LOAD_CONST                      162: 'QoS senders.'
        828     LOAD_NAME                       26: errorTab
        830     LOAD_CONST                      163: 11006
        832     STORE_SUBSCR                    
        834     LOAD_CONST                      164: 'No QoS senders.'
        836     LOAD_NAME                       26: errorTab
        838     LOAD_CONST                      165: 11007
        840     STORE_SUBSCR                    
        842     LOAD_CONST                      166: 'QoS no receivers.'
        844     LOAD_NAME                       26: errorTab
        846     LOAD_CONST                      167: 11008
        848     STORE_SUBSCR                    
        850     LOAD_CONST                      168: 'QoS request confirmed.'
        852     LOAD_NAME                       26: errorTab
        854     LOAD_CONST                      169: 11009
        856     STORE_SUBSCR                    
        858     LOAD_CONST                      170: 'QoS admission error.'
        860     LOAD_NAME                       26: errorTab
        862     LOAD_CONST                      171: 11010
        864     STORE_SUBSCR                    
        866     LOAD_CONST                      172: 'QoS policy failure.'
        868     LOAD_NAME                       26: errorTab
        870     LOAD_CONST                      173: 11011
        872     STORE_SUBSCR                    
        874     LOAD_CONST                      174: 'QoS bad style.'
        876     LOAD_NAME                       26: errorTab
        878     LOAD_CONST                      175: 11012
        880     STORE_SUBSCR                    
        882     LOAD_CONST                      176: 'QoS bad object.'
        884     LOAD_NAME                       26: errorTab
        886     LOAD_CONST                      177: 11013
        888     STORE_SUBSCR                    
        890     LOAD_CONST                      178: 'QoS traffic control error.'
        892     LOAD_NAME                       26: errorTab
        894     LOAD_CONST                      179: 11014
        896     STORE_SUBSCR                    
        898     LOAD_CONST                      180: 'QoS generic error.'
        900     LOAD_NAME                       26: errorTab
        902     LOAD_CONST                      181: 11015
        904     STORE_SUBSCR                    
        906     LOAD_CONST                      182: 'QoS service type error.'
        908     LOAD_NAME                       26: errorTab
        910     LOAD_CONST                      183: 11016
        912     STORE_SUBSCR                    
        914     LOAD_CONST                      184: 'QoS flowspec error.'
        916     LOAD_NAME                       26: errorTab
        918     LOAD_CONST                      185: 11017
        920     STORE_SUBSCR                    
        922     LOAD_CONST                      186: 'Invalid QoS provider buffer.'
        924     LOAD_NAME                       26: errorTab
        926     LOAD_CONST                      187: 11018
        928     STORE_SUBSCR                    
        930     LOAD_CONST                      188: 'Invalid QoS filter style.'
        932     LOAD_NAME                       26: errorTab
        934     LOAD_CONST                      189: 11019
        936     STORE_SUBSCR                    
        938     LOAD_CONST                      188: 'Invalid QoS filter style.'
        940     LOAD_NAME                       26: errorTab
        942     LOAD_CONST                      190: 11020
        944     STORE_SUBSCR                    
        946     LOAD_CONST                      191: 'Incorrect QoS filter count.'
        948     LOAD_NAME                       26: errorTab
        950     LOAD_CONST                      192: 11021
        952     STORE_SUBSCR                    
        954     LOAD_CONST                      193: 'Invalid QoS object length.'
        956     LOAD_NAME                       26: errorTab
        958     LOAD_CONST                      194: 11022
        960     STORE_SUBSCR                    
        962     LOAD_CONST                      195: 'Incorrect QoS flow count.'
        964     LOAD_NAME                       26: errorTab
        966     LOAD_CONST                      196: 11023
        968     STORE_SUBSCR                    
        970     LOAD_CONST                      197: 'Unrecognized QoS object.'
        972     LOAD_NAME                       26: errorTab
        974     LOAD_CONST                      198: 11024
        976     STORE_SUBSCR                    
        978     LOAD_CONST                      199: 'Invalid QoS policy object.'
        980     LOAD_NAME                       26: errorTab
        982     LOAD_CONST                      200: 11025
        984     STORE_SUBSCR                    
        986     LOAD_CONST                      201: 'Invalid QoS flow descriptor.'
        988     LOAD_NAME                       26: errorTab
        990     LOAD_CONST                      202: 11026
        992     STORE_SUBSCR                    
        994     LOAD_CONST                      203: 'Invalid QoS provider-specific flowspec.'
        996     LOAD_NAME                       26: errorTab
        998     LOAD_CONST                      204: 11027
        1000    STORE_SUBSCR                    
        1002    LOAD_CONST                      205: 'Invalid QoS provider-specific filterspec.'
        1004    LOAD_NAME                       26: errorTab
        1006    LOAD_CONST                      206: 11028
        1008    STORE_SUBSCR                    
        1010    LOAD_CONST                      207: 'Invalid QoS shape discard mode object.'
        1012    LOAD_NAME                       26: errorTab
        1014    LOAD_CONST                      208: 11029
        1016    STORE_SUBSCR                    
        1018    LOAD_CONST                      209: 'Invalid QoS shaping rate object.'
        1020    LOAD_NAME                       26: errorTab
        1022    LOAD_CONST                      210: 11030
        1024    STORE_SUBSCR                    
        1026    LOAD_CONST                      211: 'Reserved policy QoS element type.'
        1028    LOAD_NAME                       26: errorTab
        1030    LOAD_CONST                      212: 11031
        1032    STORE_SUBSCR                    
        1034    LOAD_NAME                       15: __all__
        1036    LOAD_METHOD                     27: append
        1038    LOAD_CONST                      213: 'errorTab'
        1040    CALL_METHOD                     1
        1042    POP_TOP                         
        1044    LOAD_BUILD_CLASS                
        1046    LOAD_CONST                      214: <CODE> _GiveupOnSendfile
        1048    LOAD_CONST                      215: '_GiveupOnSendfile'
        1050    MAKE_FUNCTION                   0
        1052    LOAD_CONST                      215: '_GiveupOnSendfile'
        1054    LOAD_NAME                       28: Exception
        1056    CALL_FUNCTION                   3
        1058    STORE_NAME                      29: _GiveupOnSendfile
        1060    LOAD_BUILD_CLASS                
        1062    LOAD_CONST                      216: <CODE> socket
        1064    LOAD_CONST                      217: 'socket'
        1066    MAKE_FUNCTION                   0
        1068    LOAD_CONST                      217: 'socket'
        1070    LOAD_NAME                       1: _socket
        1072    LOAD_ATTR                       30: socket
        1074    CALL_FUNCTION                   3
        1076    STORE_NAME                      30: socket
        1078    LOAD_CONST                      248: (0,)
        1080    LOAD_CONST                      218: <CODE> fromfd
        1082    LOAD_CONST                      219: 'fromfd'
        1084    MAKE_FUNCTION                   1
        1086    STORE_NAME                      31: fromfd
        1088    LOAD_NAME                       32: hasattr
        1090    LOAD_NAME                       1: _socket
        1092    LOAD_ATTR                       30: socket
        1094    LOAD_CONST                      220: 'sendmsg'
        1096    CALL_FUNCTION                   2
        1098    POP_JUMP_IF_FALSE               565 (to 1130)
        1102    LOAD_CONST                      1: 0
        1104    LOAD_CONST                      2: None
        1106    IMPORT_NAME                     33: array
        1108    STORE_NAME                      33: array
        1110    LOAD_CONST                      249: (0, None)
        1112    LOAD_CONST                      221: <CODE> send_fds
        1114    LOAD_CONST                      222: 'send_fds'
        1116    MAKE_FUNCTION                   1
        1118    STORE_NAME                      34: send_fds
        1120    LOAD_NAME                       15: __all__
        1122    LOAD_METHOD                     27: append
        1124    LOAD_CONST                      222: 'send_fds'
        1126    CALL_METHOD                     1
        1128    POP_TOP                         
        1130    LOAD_NAME                       32: hasattr
        1132    LOAD_NAME                       1: _socket
        1134    LOAD_ATTR                       30: socket
        1136    LOAD_CONST                      223: 'recvmsg'
        1138    CALL_FUNCTION                   2
        1140    POP_JUMP_IF_FALSE               586 (to 1172)
        1144    LOAD_CONST                      1: 0
        1146    LOAD_CONST                      2: None
        1148    IMPORT_NAME                     33: array
        1150    STORE_NAME                      33: array
        1152    LOAD_CONST                      248: (0,)
        1154    LOAD_CONST                      224: <CODE> recv_fds
        1156    LOAD_CONST                      225: 'recv_fds'
        1158    MAKE_FUNCTION                   1
        1160    STORE_NAME                      35: recv_fds
        1162    LOAD_NAME                       15: __all__
        1164    LOAD_METHOD                     27: append
        1166    LOAD_CONST                      225: 'recv_fds'
        1168    CALL_METHOD                     1
        1170    POP_TOP                         
        1172    LOAD_NAME                       32: hasattr
        1174    LOAD_NAME                       1: _socket
        1176    LOAD_ATTR                       30: socket
        1178    LOAD_CONST                      226: 'share'
        1180    CALL_FUNCTION                   2
        1182    POP_JUMP_IF_FALSE               602 (to 1204)
        1186    LOAD_CONST                      227: <CODE> fromshare
        1188    LOAD_CONST                      228: 'fromshare'
        1190    MAKE_FUNCTION                   0
        1192    STORE_NAME                      36: fromshare
        1194    LOAD_NAME                       15: __all__
        1196    LOAD_METHOD                     27: append
        1198    LOAD_CONST                      228: 'fromshare'
        1200    CALL_METHOD                     1
        1202    POP_TOP                         
        1204    LOAD_NAME                       32: hasattr
        1206    LOAD_NAME                       1: _socket
        1208    LOAD_CONST                      229: 'socketpair'
        1210    CALL_FUNCTION                   2
        1212    POP_JUMP_IF_FALSE               617 (to 1234)
        1216    LOAD_CONST                      2: None
        1218    LOAD_NAME                       37: SOCK_STREAM
        1220    LOAD_CONST                      1: 0
        1222    BUILD_TUPLE                     3
        1224    LOAD_CONST                      230: <CODE> socketpair
        1226    LOAD_CONST                      229: 'socketpair'
        1228    MAKE_FUNCTION                   1
        1230    STORE_NAME                      38: socketpair
        1232    JUMP_FORWARD                    13 (to 1260)
        1234    LOAD_NAME                       39: AF_INET
        1236    LOAD_NAME                       37: SOCK_STREAM
        1238    LOAD_CONST                      1: 0
        1240    BUILD_TUPLE                     3
        1242    LOAD_CONST                      231: <CODE> socketpair
        1244    LOAD_CONST                      229: 'socketpair'
        1246    MAKE_FUNCTION                   1
        1248    STORE_NAME                      38: socketpair
        1250    LOAD_NAME                       15: __all__
        1252    LOAD_METHOD                     27: append
        1254    LOAD_CONST                      229: 'socketpair'
        1256    CALL_METHOD                     1
        1258    POP_TOP                         
        1260    LOAD_CONST                      232: 'socketpair([family[, type[, proto]]]) -> (socket object, socket object)\nCreate a pair of socket objects from the sockets returned by the platform\nsocketpair() function.\nThe arguments are the same as for socket() except the default family is AF_UNIX\nif defined on the platform; otherwise, the default is AF_INET.\n'
        1262    LOAD_NAME                       38: socketpair
        1264    STORE_ATTR                      0: __doc__
        1266    LOAD_NAME                       13: EAGAIN
        1268    LOAD_NAME                       14: EWOULDBLOCK
        1270    BUILD_SET                       2
        1272    STORE_NAME                      40: _blocking_errnos
        1274    LOAD_BUILD_CLASS                
        1276    LOAD_CONST                      233: <CODE> SocketIO
        1278    LOAD_CONST                      234: 'SocketIO'
        1280    MAKE_FUNCTION                   0
        1282    LOAD_CONST                      234: 'SocketIO'
        1284    LOAD_NAME                       4: io
        1286    LOAD_ATTR                       41: RawIOBase
        1288    CALL_FUNCTION                   3
        1290    STORE_NAME                      42: SocketIO
        1292    LOAD_CONST                      250: ('',)
        1294    LOAD_CONST                      236: <CODE> getfqdn
        1296    LOAD_CONST                      237: 'getfqdn'
        1298    MAKE_FUNCTION                   1
        1300    STORE_NAME                      43: getfqdn
        1302    LOAD_NAME                       44: object
        1304    CALL_FUNCTION                   0
        1306    STORE_NAME                      45: _GLOBAL_DEFAULT_TIMEOUT
        1308    LOAD_NAME                       45: _GLOBAL_DEFAULT_TIMEOUT
        1310    LOAD_CONST                      2: None
        1312    BUILD_TUPLE                     2
        1314    LOAD_CONST                      238: <CODE> create_connection
        1316    LOAD_CONST                      239: 'create_connection'
        1318    MAKE_FUNCTION                   1
        1320    STORE_NAME                      46: create_connection
        1322    LOAD_CONST                      240: <CODE> has_dualstack_ipv6
        1324    LOAD_CONST                      241: 'has_dualstack_ipv6'
        1326    MAKE_FUNCTION                   0
        1328    STORE_NAME                      47: has_dualstack_ipv6
        1330    LOAD_NAME                       39: AF_INET
        1332    LOAD_CONST                      2: None
        1334    LOAD_CONST                      242: False
        1336    LOAD_CONST                      242: False
        1338    LOAD_CONST                      243: ('family', 'backlog', 'reuse_port', 'dualstack_ipv6')
        1340    BUILD_CONST_KEY_MAP             4
        1342    LOAD_CONST                      244: <CODE> create_server
        1344    LOAD_CONST                      245: 'create_server'
        1346    MAKE_FUNCTION                   2
        1348    STORE_NAME                      48: create_server
        1350    LOAD_CONST                      251: (0, 0, 0, 0)
        1352    LOAD_CONST                      246: <CODE> getaddrinfo
        1354    LOAD_CONST                      247: 'getaddrinfo'
        1356    MAKE_FUNCTION                   1
        1358    STORE_NAME                      49: getaddrinfo
        1360    LOAD_CONST                      2: None
        1362    RETURN_VALUE                    
